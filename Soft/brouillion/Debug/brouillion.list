
brouillion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800a260  0800a260  0000b260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab14  0800ab14  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab14  0800ab14  0000bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab1c  0800ab1c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab1c  0800ab1c  0000bb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ab24  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  200001d8  0800acfc  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce0  0800acfc  0000cce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eaa  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e73  00000000  00000000  0001f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00021f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3e  00000000  00000000  00023070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a5d  00000000  00000000  00023dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b63  00000000  00000000  0004c80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4873  00000000  00000000  0006036e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b98  00000000  00000000  00154c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a244 	.word	0x0800a244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a244 	.word	0x0800a244

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a07      	ldr	r2, [pc, #28]	@ (800104c <vApplicationGetIdleTaskMemory+0x2c>)
 8001030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <vApplicationGetIdleTaskMemory+0x30>)
 8001036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001f4 	.word	0x200001f4
 8001050:	20000248 	.word	0x20000248

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f000 fcc9 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f82d 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f000 f959 	bl	8001318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001066:	f000 f927 	bl	80012b8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800106a:	f000 f879 	bl	8001160 <MX_SPI2_Init>
  MX_SPI3_Init();
 800106e:	f000 f8b5 	bl	80011dc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001072:	f000 f8f1 	bl	8001258 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <main+0x5c>)
 8001078:	1d3c      	adds	r4, r7, #4
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f003 f91b 	bl	80042c8 <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <main+0x60>)
 8001096:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xSemaphore = xSemaphoreCreateBinary();
 8001098:	2203      	movs	r2, #3
 800109a:	2100      	movs	r1, #0
 800109c:	2001      	movs	r0, #1
 800109e:	f003 fa91 	bl	80045c4 <xQueueGenericCreate>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <main+0x64>)
 80010a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010a8:	f003 f907 	bl	80042ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <main+0x58>
 80010b0:	0800a26c 	.word	0x0800a26c
 80010b4:	20000628 	.word	0x20000628
 80010b8:	20000448 	.word	0x20000448

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b096      	sub	sp, #88	@ 0x58
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2244      	movs	r2, #68	@ 0x44
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 fcdf 	bl	8006a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010e2:	f000 fffb 	bl	80020dc <HAL_PWREx_ControlVoltageScaling>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010ec:	f000 f9ea 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fa:	2310      	movs	r3, #16
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800110a:	230a      	movs	r3, #10
 800110c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800110e:	2307      	movs	r3, #7
 8001110:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f832 	bl	8002188 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800112a:	f000 f9cb 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2303      	movs	r3, #3
 8001134:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fbfa 	bl	8002940 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001152:	f000 f9b7 	bl	80014c4 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3758      	adds	r7, #88	@ 0x58
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_SPI2_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <MX_SPI2_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_SPI2_Init+0x74>)
 800116c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001170:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_SPI2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_SPI2_Init+0x74>)
 800117a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800117e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_SPI2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_SPI2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_SPI2_Init+0x74>)
 800118e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001192:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_SPI2_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_SPI2_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_SPI2_Init+0x74>)
 80011c0:	f002 fa9e 	bl	8003700 <HAL_SPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 f97b 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000450 	.word	0x20000450
 80011d8:	40003800 	.word	0x40003800

080011dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_SPI3_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <MX_SPI3_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_SPI3_Init+0x74>)
 80011e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_SPI3_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_SPI3_Init+0x74>)
 80011f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_SPI3_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_SPI3_Init+0x74>)
 800120a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_SPI3_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_SPI3_Init+0x74>)
 800122a:	2207      	movs	r2, #7
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_SPI3_Init+0x74>)
 8001236:	2208      	movs	r2, #8
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_SPI3_Init+0x74>)
 800123c:	f002 fa60 	bl	8003700 <HAL_SPI_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 f93d 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200004b4 	.word	0x200004b4
 8001254:	40003c00 	.word	0x40003c00

08001258 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <MX_USART1_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001264:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART1_UART_Init+0x58>)
 800129c:	f002 fad3 	bl	8003846 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 f90d 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000518 	.word	0x20000518
 80012b4:	40013800 	.word	0x40013800

080012b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_USART2_UART_Init+0x5c>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_USART2_UART_Init+0x58>)
 80012fc:	f002 faa3 	bl	8003846 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 f8dd 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200005a0 	.word	0x200005a0
 8001314:	40004400 	.word	0x40004400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a2e      	ldr	r2, [pc, #184]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b2c      	ldr	r3, [pc, #176]	@ (80013ec <MX_GPIO_Init+0xd4>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a28      	ldr	r2, [pc, #160]	@ (80013ec <MX_GPIO_Init+0xd4>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_GPIO_Init+0xd4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <MX_GPIO_Init+0xd4>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_GPIO_Init+0xd4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2120      	movs	r1, #32
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f000 fe63 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	@ (80013f0 <MX_GPIO_Init+0xd8>)
 80013b2:	f000 fcab 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013b6:	2320      	movs	r3, #32
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d0:	f000 fc9c 	bl	8001d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2105      	movs	r1, #5
 80013d8:	2028      	movs	r0, #40	@ 0x28
 80013da:	f000 fc60 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013de:	2028      	movs	r0, #40	@ 0x28
 80013e0:	f000 fc79 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000800 	.word	0x48000800

080013f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
	xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_GPIO_EXTI_Callback+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4905      	ldr	r1, [pc, #20]	@ (8001418 <HAL_GPIO_EXTI_Callback+0x24>)
 8001404:	4618      	mov	r0, r3
 8001406:	f003 f937 	bl	8004678 <xQueueGiveFromISR>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000448 	.word	0x20000448
 8001418:	2000044c 	.word	0x2000044c

0800141c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800142a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800142e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	uint8_t F9pRawData[3] = {0};
 8001430:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001434:	f103 030c 	add.w	r3, r3, #12
 8001438:	2100      	movs	r1, #0
 800143a:	460a      	mov	r2, r1
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	460a      	mov	r2, r1
 8001440:	709a      	strb	r2, [r3, #2]
	uint8_t debugTab[255] = {0};
 8001442:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001446:	f103 0318 	add.w	r3, r3, #24
 800144a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800144e:	4618      	mov	r0, r3
 8001450:	23ff      	movs	r3, #255	@ 0xff
 8001452:	461a      	mov	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f005 fb1a 	bl	8006a8e <memset>
	char uartMsg[32];
	const char* msg = "rtcm recu\r\n";
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <StartDefaultTask+0xa0>)
 800145c:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8001460:	f102 0214 	add.w	r2, r2, #20
 8001464:	6013      	str	r3, [r2, #0]
		uint16_t wRtcmLen;
		uint8_t pcRtcmData[1024];
		uint8_t *pcRtcmCrc;
	}rtcmMsg_t;

	rtcmMsg_t RtcmMsg={0, {0}, 0};
 8001466:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800146a:	f103 0318 	add.w	r3, r3, #24
 800146e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <StartDefaultTask+0xa4>)
 8001474:	4618      	mov	r0, r3
 8001476:	4611      	mov	r1, r2
 8001478:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800147c:	461a      	mov	r2, r3
 800147e:	f005 fb86 	bl	8006b8e <memcpy>
#define RTCM_MSG_TAB 3
	rtcmMsg_t LocalRtcmMsgTab[RTCM_MSG_TAB]={0}; // up to 16 Rtcm msg should be acquired  by one time
 8001482:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001486:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800148a:	4618      	mov	r0, r3
 800148c:	f640 4318 	movw	r3, #3096	@ 0xc18
 8001490:	461a      	mov	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f005 fafb 	bl	8006a8e <memset>
	uint16_t msgType = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800149e:	f102 0212 	add.w	r2, r2, #18
 80014a2:	8013      	strh	r3, [r2, #0]
	uint8_t RtcmMsgCount = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80014aa:	f102 0211 	add.w	r2, r2, #17
 80014ae:	7013      	strb	r3, [r2, #0]
	  else{
		  // while(1); //error → get out
	  	}
  }
*/
osDelay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f002 ff55 	bl	8004360 <osDelay>
  {
 80014b6:	bf00      	nop
 80014b8:	e7fa      	b.n	80014b0 <StartDefaultTask+0x94>
 80014ba:	bf00      	nop
 80014bc:	0800a288 	.word	0x0800a288
 80014c0:	0800a294 	.word	0x0800a294

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_MspInit+0x4c>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <HAL_MspInit+0x4c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <HAL_MspInit+0x4c>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_MspInit+0x4c>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_MspInit+0x4c>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 fbc6 	bl	8001c9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	@ 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a3d      	ldr	r2, [pc, #244]	@ (8001634 <HAL_SPI_MspInit+0x114>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d145      	bne.n	80015ce <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	4a3c      	ldr	r2, [pc, #240]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6593      	str	r3, [r2, #88]	@ 0x58
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a36      	ldr	r2, [pc, #216]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a30      	ldr	r2, [pc, #192]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158a:	230c      	movs	r3, #12
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800159a:	2305      	movs	r3, #5
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	@ (800163c <HAL_SPI_MspInit+0x11c>)
 80015a6:	f000 fbb1 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015bc:	2305      	movs	r3, #5
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	481e      	ldr	r0, [pc, #120]	@ (8001640 <HAL_SPI_MspInit+0x120>)
 80015c8:	f000 fba0 	bl	8001d0c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015cc:	e02d      	b.n	800162a <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <HAL_SPI_MspInit+0x124>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d128      	bne.n	800162a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_SPI_MspInit+0x118>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001608:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161a:	2306      	movs	r3, #6
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_SPI_MspInit+0x11c>)
 8001626:	f000 fb71 	bl	8001d0c <HAL_GPIO_Init>
}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40003800 	.word	0x40003800
 8001638:	40021000 	.word	0x40021000
 800163c:	48000800 	.word	0x48000800
 8001640:	48000400 	.word	0x48000400
 8001644:	40003c00 	.word	0x40003c00

08001648 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ae      	sub	sp, #184	@ 0xb8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2288      	movs	r2, #136	@ 0x88
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fa10 	bl	8006a8e <memset>
  if(huart->Instance==USART1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a43      	ldr	r2, [pc, #268]	@ (8001780 <HAL_UART_MspInit+0x138>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d13d      	bne.n	80016f4 <HAL_UART_MspInit+0xac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800167c:	2300      	movs	r3, #0
 800167e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fb7f 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff ff18 	bl	80014c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001698:	4a3a      	ldr	r2, [pc, #232]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169e:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b0:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016de:	2307      	movs	r3, #7
 80016e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ee:	f000 fb0d 	bl	8001d0c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f2:	e040      	b.n	8001776 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <HAL_UART_MspInit+0x140>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d13b      	bne.n	8001776 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001702:	2300      	movs	r3, #0
 8001704:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fb3c 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001716:	f7ff fed5 	bl	80014c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	6593      	str	r3, [r2, #88]	@ 0x58
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a13      	ldr	r2, [pc, #76]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_UART_MspInit+0x13c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174a:	230c      	movs	r3, #12
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001762:	2307      	movs	r3, #7
 8001764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f000 facb 	bl	8001d0c <HAL_GPIO_Init>
}
 8001776:	bf00      	nop
 8001778:	37b8      	adds	r7, #184	@ 0xb8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40013800 	.word	0x40013800
 8001784:	40021000 	.word	0x40021000
 8001788:	40004400 	.word	0x40004400

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 f96f 	bl	8001aa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017ca:	f003 fd11 	bl	80051f0 <xTaskGetSchedulerState>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017d4:	f003 ff50 	bl	8005678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017e4:	f000 fc54 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_kill>:

int _kill(int pid, int sig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001806:	f005 f995 	bl	8006b34 <__errno>
 800180a:	4603      	mov	r3, r0
 800180c:	2216      	movs	r2, #22
 800180e:	601a      	str	r2, [r3, #0]
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_exit>:

void _exit (int status)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ffe7 	bl	80017fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800182e:	bf00      	nop
 8001830:	e7fd      	b.n	800182e <_exit+0x12>

08001832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e00a      	b.n	800185a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001844:	f3af 8000 	nop.w
 8001848:	4601      	mov	r1, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	60ba      	str	r2, [r7, #8]
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbf0      	blt.n	8001844 <_read+0x12>
  }

  return len;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e009      	b.n	8001892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60ba      	str	r2, [r7, #8]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	dbf1      	blt.n	800187e <_write+0x12>
  }
  return len;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_close>:

int _close(int file)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018cc:	605a      	str	r2, [r3, #4]
  return 0;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f005 f8fa 	bl	8006b34 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20018000 	.word	0x20018000
 800196c:	00000400 	.word	0x00000400
 8001970:	20000e80 	.word	0x20000e80
 8001974:	20001ce0 	.word	0x20001ce0

08001978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff ffea 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a6:	490d      	ldr	r1, [pc, #52]	@ (80019dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <LoopForever+0xe>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019bc:	4c0a      	ldr	r4, [pc, #40]	@ (80019e8 <LoopForever+0x16>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f005 f8b9 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ce:	f7ff fb41 	bl	8001054 <main>

080019d2 <LoopForever>:

LoopForever:
    b LoopForever
 80019d2:	e7fe      	b.n	80019d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019e0:	0800ab24 	.word	0x0800ab24
  ldr r2, =_sbss
 80019e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019e8:	20001ce0 	.word	0x20001ce0

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_Init+0x3c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_Init+0x3c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f93e 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0c:	200f      	movs	r0, #15
 8001a0e:	f000 f80f 	bl	8001a30 <HAL_InitTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	e001      	b.n	8001a22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1e:	f7ff fd57 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_InitTick+0x70>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_InitTick+0x6c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f949 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d809      	bhi.n	8001a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f913 	bl	8001c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_InitTick+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e004      	b.n	8001a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e001      	b.n	8001a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000e84 	.word	0x20000e84

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000e84 	.word	0x20000e84

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	@ (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e17f      	b.n	800201c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8171 	beq.w	8002016 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d005      	beq.n	8001d4c <HAL_GPIO_Init+0x40>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d130      	bne.n	8001dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 0201 	and.w	r2, r3, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d118      	bne.n	8001dec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d017      	beq.n	8001e28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	6939      	ldr	r1, [r7, #16]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80ac 	beq.w	8002016 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800203c <HAL_GPIO_Init+0x330>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800203c <HAL_GPIO_Init+0x330>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eca:	4b5c      	ldr	r3, [pc, #368]	@ (800203c <HAL_GPIO_Init+0x330>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8002040 <HAL_GPIO_Init+0x334>)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f00:	d025      	beq.n	8001f4e <HAL_GPIO_Init+0x242>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <HAL_GPIO_Init+0x338>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <HAL_GPIO_Init+0x23e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_GPIO_Init+0x33c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x23a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_GPIO_Init+0x340>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x236>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_GPIO_Init+0x344>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x232>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	@ (8002054 <HAL_GPIO_Init+0x348>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x22e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002058 <HAL_GPIO_Init+0x34c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x22a>
 8001f32:	2306      	movs	r3, #6
 8001f34:	e00c      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00a      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x244>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f60:	4937      	ldr	r1, [pc, #220]	@ (8002040 <HAL_GPIO_Init+0x334>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f92:	4a32      	ldr	r2, [pc, #200]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fbc:	4a27      	ldr	r2, [pc, #156]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_GPIO_Init+0x350>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <HAL_GPIO_Init+0x350>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae78 	bne.w	8001d1c <HAL_GPIO_Init+0x10>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	48000400 	.word	0x48000400
 8002048:	48000800 	.word	0x48000800
 800204c:	48000c00 	.word	0x48000c00
 8002050:	48001000 	.word	0x48001000
 8002054:	48001400 	.word	0x48001400
 8002058:	48001800 	.word	0x48001800
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800207c:	e002      	b.n	8002084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f9a0 	bl	80013f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40007000 	.word	0x40007000

080020dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ea:	d130      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ec:	4b23      	ldr	r3, [pc, #140]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f8:	d038      	beq.n	800216c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002102:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002104:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2232      	movs	r2, #50	@ 0x32
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	4a1b      	ldr	r2, [pc, #108]	@ (8002184 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0c9b      	lsrs	r3, r3, #18
 800211c:	3301      	adds	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002120:	e002      	b.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002134:	d102      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f2      	bne.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002148:	d110      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e00f      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d007      	beq.n	800216c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002164:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40007000 	.word	0x40007000
 8002180:	20000000 	.word	0x20000000
 8002184:	431bde83 	.word	0x431bde83

08002188 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e3ca      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b97      	ldr	r3, [pc, #604]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b94      	ldr	r3, [pc, #592]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80e4 	beq.w	8002384 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4a>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	f040 808b 	bne.w	80022e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	f040 8087 	bne.w	80022e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x62>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e3a2      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	4b82      	ldr	r3, [pc, #520]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_RCC_OscConfig+0x7c>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002202:	e005      	b.n	8002210 <HAL_RCC_OscConfig+0x88>
 8002204:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002210:	4293      	cmp	r3, r2
 8002212:	d223      	bcs.n	800225c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fd55 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e383      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002228:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a72      	ldr	r2, [pc, #456]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b70      	ldr	r3, [pc, #448]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	496d      	ldr	r1, [pc, #436]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002246:	4b6c      	ldr	r3, [pc, #432]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	4968      	ldr	r1, [pc, #416]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
 800225a:	e025      	b.n	80022a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225c:	4b66      	ldr	r3, [pc, #408]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a65      	ldr	r2, [pc, #404]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4960      	ldr	r1, [pc, #384]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227a:	4b5f      	ldr	r3, [pc, #380]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	495b      	ldr	r1, [pc, #364]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fd15 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e343      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a8:	f000 fc4a 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b52      	ldr	r3, [pc, #328]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	4950      	ldr	r1, [pc, #320]	@ (80023fc <HAL_RCC_OscConfig+0x274>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002400 <HAL_RCC_OscConfig+0x278>)
 80022c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fbaf 	bl	8001a30 <HAL_InitTick>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d052      	beq.n	8002382 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	e327      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d032      	beq.n	800234e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022e8:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a42      	ldr	r2, [pc, #264]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fbec 	bl	8001ad0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fc:	f7ff fbe8 	bl	8001ad0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e310      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230e:	4b3a      	ldr	r3, [pc, #232]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	4b37      	ldr	r3, [pc, #220]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a36      	ldr	r2, [pc, #216]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b34      	ldr	r3, [pc, #208]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4931      	ldr	r1, [pc, #196]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002338:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	492c      	ldr	r1, [pc, #176]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
 800234c:	e01a      	b.n	8002384 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800234e:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235a:	f7ff fbb9 	bl	8001ad0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002362:	f7ff fbb5 	bl	8001ad0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e2dd      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002374:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x1da>
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002382:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d074      	beq.n	800247a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b08      	cmp	r3, #8
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x21a>
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d10e      	bne.n	80023ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d064      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f0>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d160      	bne.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e2ba      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x24a>
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e026      	b.n	8002420 <HAL_RCC_OscConfig+0x298>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023da:	d115      	bne.n	8002408 <HAL_RCC_OscConfig+0x280>
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a02      	ldr	r2, [pc, #8]	@ (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e014      	b.n	8002420 <HAL_RCC_OscConfig+0x298>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	0800a6a4 	.word	0x0800a6a4
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004
 8002408:	4ba0      	ldr	r3, [pc, #640]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a9f      	ldr	r2, [pc, #636]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b9d      	ldr	r3, [pc, #628]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a9c      	ldr	r2, [pc, #624]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff fb52 	bl	8001ad0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff fb4e 	bl	8001ad0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e276      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	4b92      	ldr	r3, [pc, #584]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x2a8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff fb3e 	bl	8001ad0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fb3a 	bl	8001ad0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e262      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246a:	4b88      	ldr	r3, [pc, #544]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d0>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d060      	beq.n	8002548 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d005      	beq.n	8002498 <HAL_RCC_OscConfig+0x310>
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d119      	bne.n	80024c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d116      	bne.n	80024c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	4b7c      	ldr	r3, [pc, #496]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x328>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e23f      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b76      	ldr	r3, [pc, #472]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	4973      	ldr	r1, [pc, #460]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	e040      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d023      	beq.n	8002516 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ce:	4b6f      	ldr	r3, [pc, #444]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6e      	ldr	r2, [pc, #440]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff faf9 	bl	8001ad0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff faf5 	bl	8001ad0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e21d      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f4:	4b65      	ldr	r3, [pc, #404]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b62      	ldr	r3, [pc, #392]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	495f      	ldr	r1, [pc, #380]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e018      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b5d      	ldr	r3, [pc, #372]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5c      	ldr	r2, [pc, #368]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800251c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fad5 	bl	8001ad0 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7ff fad1 	bl	8001ad0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1f9      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03c      	beq.n	80025ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255c:	4b4b      	ldr	r3, [pc, #300]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002562:	4a4a      	ldr	r2, [pc, #296]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7ff fab0 	bl	8001ad0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff faac 	bl	8001ad0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1d4      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002586:	4b41      	ldr	r3, [pc, #260]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCC_OscConfig+0x3ec>
 8002594:	e01b      	b.n	80025ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002596:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	4a3b      	ldr	r2, [pc, #236]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7ff fa93 	bl	8001ad0 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7ff fa8f 	bl	8001ad0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1b7      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ef      	bne.n	80025ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a6 	beq.w	8002728 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f0:	4a26      	ldr	r2, [pc, #152]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f8:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002604:	2301      	movs	r3, #1
 8002606:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCC_OscConfig+0x508>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d118      	bne.n	8002646 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002614:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_RCC_OscConfig+0x508>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <HAL_RCC_OscConfig+0x508>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002620:	f7ff fa56 	bl	8001ad0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7ff fa52 	bl	8001ad0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e17a      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x508>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x4d8>
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800265e:	e029      	b.n	80026b4 <HAL_RCC_OscConfig+0x52c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d115      	bne.n	8002694 <HAL_RCC_OscConfig+0x50c>
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a03      	ldr	r2, [pc, #12]	@ (800268c <HAL_RCC_OscConfig+0x504>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x52c>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
 8002694:	4b9c      	ldr	r3, [pc, #624]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	4a9b      	ldr	r2, [pc, #620]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a4:	4b98      	ldr	r3, [pc, #608]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	4a97      	ldr	r2, [pc, #604]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7ff fa08 	bl	8001ad0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff fa04 	bl	8001ad0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e12a      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b8b      	ldr	r3, [pc, #556]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ed      	beq.n	80026c4 <HAL_RCC_OscConfig+0x53c>
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff f9f1 	bl	8001ad0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7ff f9ed 	bl	8001ad0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e113      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ed      	bne.n	80026f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b7a      	ldr	r3, [pc, #488]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80fe 	beq.w	800292e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	2b02      	cmp	r3, #2
 8002738:	f040 80d0 	bne.w	80028dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800273c:	4b72      	ldr	r3, [pc, #456]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	429a      	cmp	r2, r3
 800274e:	d130      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	3b01      	subs	r3, #1
 800275c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d127      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d11f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800277c:	2a07      	cmp	r2, #7
 800277e:	bf14      	ite	ne
 8002780:	2201      	movne	r2, #1
 8002782:	2200      	moveq	r2, #0
 8002784:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002786:	4293      	cmp	r3, r2
 8002788:	d113      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d06e      	beq.n	8002890 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d069      	beq.n	800288c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027b8:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027c4:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ad      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80027da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e0:	f7ff f976 	bl	8001ad0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff f972 	bl	8001ad0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e09a      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fa:	4b43      	ldr	r3, [pc, #268]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002806:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b40      	ldr	r3, [pc, #256]	@ (800290c <HAL_RCC_OscConfig+0x784>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002816:	3a01      	subs	r2, #1
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002820:	0212      	lsls	r2, r2, #8
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002828:	0852      	lsrs	r2, r2, #1
 800282a:	3a01      	subs	r2, #1
 800282c:	0552      	lsls	r2, r2, #21
 800282e:	4311      	orrs	r1, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002834:	0852      	lsrs	r2, r2, #1
 8002836:	3a01      	subs	r2, #1
 8002838:	0652      	lsls	r2, r2, #25
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002840:	0912      	lsrs	r2, r2, #4
 8002842:	0452      	lsls	r2, r2, #17
 8002844:	430a      	orrs	r2, r1
 8002846:	4930      	ldr	r1, [pc, #192]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800284c:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2d      	ldr	r2, [pc, #180]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7ff f934 	bl	8001ad0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff f930 	bl	8001ad0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e058      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288a:	e050      	b.n	800292e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e04f      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002890:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d148      	bne.n	800292e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a19      	ldr	r2, [pc, #100]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a16      	ldr	r2, [pc, #88]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b4:	f7ff f90c 	bl	8001ad0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7ff f908 	bl	8001ad0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e030      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x734>
 80028da:	e028      	b.n	800292e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d023      	beq.n	800292a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a08      	ldr	r2, [pc, #32]	@ (8002908 <HAL_RCC_OscConfig+0x780>)
 80028e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7ff f8ef 	bl	8001ad0 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f4:	e00c      	b.n	8002910 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff f8eb 	bl	8001ad0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d905      	bls.n	8002910 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e013      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
 8002908:	40021000 	.word	0x40021000
 800290c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_OscConfig+0x7b0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ec      	bne.n	80028f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x7b0>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	4905      	ldr	r1, [pc, #20]	@ (8002938 <HAL_RCC_OscConfig+0x7b0>)
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_OscConfig+0x7b4>)
 8002924:	4013      	ands	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
 8002928:	e001      	b.n	800292e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	feeefffc 	.word	0xfeeefffc

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0e7      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b75      	ldr	r3, [pc, #468]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b72      	ldr	r3, [pc, #456]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4970      	ldr	r1, [pc, #448]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cf      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800299c:	429a      	cmp	r2, r3
 800299e:	d908      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b63      	ldr	r3, [pc, #396]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4960      	ldr	r1, [pc, #384]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d04c      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d121      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0a6      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d115      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e09a      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e086      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4943      	ldr	r1, [pc, #268]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7ff f852 	bl	8001ad0 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7ff f84e 	bl	8001ad0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e06e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d208      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	492b      	ldr	r1, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a86:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d210      	bcs.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 0207 	bic.w	r2, r3, #7
 8002a9c:	4923      	ldr	r1, [pc, #140]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4918      	ldr	r1, [pc, #96]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4910      	ldr	r1, [pc, #64]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af4:	f000 f824 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	490b      	ldr	r1, [pc, #44]	@ (8002b34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1fc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe ff89 	bl	8001a30 <HAL_InitTick>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	0800a6a4 	.word	0x0800a6a4
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d121      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d134      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0xac>
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be8:	617b      	str	r3, [r7, #20]
      break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bee:	617b      	str	r3, [r7, #20]
      break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	617b      	str	r3, [r7, #20]
      break;
 8002bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	3301      	adds	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0e5b      	lsrs	r3, r3, #25
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	0800a6bc 	.word	0x0800a6bc
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	0800a6b4 	.word	0x0800a6b4

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca0:	f7ff ffda 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	0800a6b4 	.word	0x0800a6b4

08002cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce0:	f7ff f9ee 	bl	80020c0 <HAL_PWREx_GetVoltageRange>
 8002ce4:	6178      	str	r0, [r7, #20]
 8002ce6:	e014      	b.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f9de 	bl	80020c0 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d18:	d10b      	bne.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	@ 0x80
 8002d1e:	d919      	bls.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d24:	d902      	bls.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d26:	2302      	movs	r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e013      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e010      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	@ 0x80
 8002d36:	d902      	bls.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d38:	2303      	movs	r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e00a      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	@ 0x80
 8002d42:	d102      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e004      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b70      	cmp	r3, #112	@ 0x70
 8002d4e:	d101      	bne.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4909      	ldr	r1, [pc, #36]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40022000 	.word	0x40022000

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d041      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dac:	d02a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002db2:	d824      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dbe:	d81e      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc8:	d010      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dca:	e018      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dcc:	4b86      	ldr	r3, [pc, #536]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a85      	ldr	r2, [pc, #532]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd8:	e015      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fabb 	bl	800335c <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dea:	e00c      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3320      	adds	r3, #32
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fba6 	bl	8003544 <RCCEx_PLLSAI2_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	74fb      	strb	r3, [r7, #19]
      break;
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0c:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e1a:	4973      	ldr	r1, [pc, #460]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d041      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e3c:	d02a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e42:	d824      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e4e:	d81e      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e58:	d010      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e5a:	e018      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5c:	4b62      	ldr	r3, [pc, #392]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a61      	ldr	r2, [pc, #388]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e68:	e015      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fa73 	bl	800335c <RCCEx_PLLSAI1_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3320      	adds	r3, #32
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fb5e 	bl	8003544 <RCCEx_PLLSAI2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	74fb      	strb	r3, [r7, #19]
      break;
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9c:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eaa:	494f      	ldr	r1, [pc, #316]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a0 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	4a40      	ldr	r2, [pc, #256]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eec:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3a      	ldr	r2, [pc, #232]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f08:	f7fe fde2 	bl	8001ad0 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f0e:	e009      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fe fdde 	bl	8001ad0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d902      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	74fb      	strb	r3, [r7, #19]
        break;
 8002f22:	e005      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d15c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f36:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d019      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f54:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f60:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	4a20      	ldr	r2, [pc, #128]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fd9d 	bl	8001ad0 <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	e00b      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fd99 	bl	8001ad0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d902      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ec      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b9e      	ldr	r3, [pc, #632]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	4a9d      	ldr	r2, [pc, #628]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b98      	ldr	r3, [pc, #608]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	4994      	ldr	r1, [pc, #592]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b8f      	ldr	r3, [pc, #572]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	498c      	ldr	r1, [pc, #560]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b87      	ldr	r3, [pc, #540]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4983      	ldr	r1, [pc, #524]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b7e      	ldr	r3, [pc, #504]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	497b      	ldr	r1, [pc, #492]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a8:	4972      	ldr	r1, [pc, #456]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	496a      	ldr	r1, [pc, #424]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4b65      	ldr	r3, [pc, #404]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	4961      	ldr	r1, [pc, #388]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003100:	4b5c      	ldr	r3, [pc, #368]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	4959      	ldr	r1, [pc, #356]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003122:	4b54      	ldr	r3, [pc, #336]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003130:	4950      	ldr	r1, [pc, #320]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003144:	4b4b      	ldr	r3, [pc, #300]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	4948      	ldr	r1, [pc, #288]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003166:	4b43      	ldr	r3, [pc, #268]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	493f      	ldr	r1, [pc, #252]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003188:	4b3a      	ldr	r3, [pc, #232]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003196:	4937      	ldr	r1, [pc, #220]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b32      	ldr	r3, [pc, #200]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a31      	ldr	r2, [pc, #196]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e011      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031be:	d10c      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f8c8 	bl	800335c <RCCEx_PLLSAI1_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e6:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	491f      	ldr	r1, [pc, #124]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003204:	d106      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003210:	60d3      	str	r3, [r2, #12]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f899 	bl	800335c <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003252:	4908      	ldr	r1, [pc, #32]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003262:	d109      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a02      	ldr	r2, [pc, #8]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800326e:	60d3      	str	r3, [r2, #12]
 8003270:	e014      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f867 	bl	800335c <RCCEx_PLLSAI1_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02f      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b6:	4928      	ldr	r1, [pc, #160]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f844 	bl	800335c <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d014      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
 80032e2:	e011      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3320      	adds	r3, #32
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f925 	bl	8003544 <RCCEx_PLLSAI2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003322:	490d      	ldr	r1, [pc, #52]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4904      	ldr	r1, [pc, #16]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800334e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000

0800335c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336a:	4b75      	ldr	r3, [pc, #468]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003376:	4b72      	ldr	r3, [pc, #456]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10d      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
       ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800338e:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
       ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d047      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e044      	b.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d018      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0x86>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d825      	bhi.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x62>
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d009      	beq.n	80033d0 <RCCEx_PLLSAI1_Config+0x74>
 80033bc:	e020      	b.n	8003400 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033be:	4b60      	ldr	r3, [pc, #384]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11d      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e01a      	b.n	8003406 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d116      	bne.n	800340a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e013      	b.n	800340a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e2:	4b57      	ldr	r3, [pc, #348]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ee:	4b54      	ldr	r3, [pc, #336]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033fe:	e006      	b.n	800340e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e004      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003416:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	430b      	orrs	r3, r1
 800342c:	4944      	ldr	r1, [pc, #272]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d17d      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003438:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a40      	ldr	r2, [pc, #256]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fe fb44 	bl	8001ad0 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800344a:	e009      	b.n	8003460 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344c:	f7fe fb40 	bl	8001ad0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d902      	bls.n	8003460 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	73fb      	strb	r3, [r7, #15]
        break;
 800345e:	e005      	b.n	800346c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003460:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ef      	bne.n	800344c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d160      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	0912      	lsrs	r2, r2, #4
 8003490:	0452      	lsls	r2, r2, #17
 8003492:	430a      	orrs	r2, r1
 8003494:	492a      	ldr	r1, [pc, #168]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	610b      	str	r3, [r1, #16]
 800349a:	e027      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d112      	bne.n	80034c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a2:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6892      	ldr	r2, [r2, #8]
 80034b2:	0211      	lsls	r1, r2, #8
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6912      	ldr	r2, [r2, #16]
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	3a01      	subs	r2, #1
 80034bc:	0552      	lsls	r2, r2, #21
 80034be:	430a      	orrs	r2, r1
 80034c0:	491f      	ldr	r1, [pc, #124]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]
 80034c6:	e011      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6952      	ldr	r2, [r2, #20]
 80034de:	0852      	lsrs	r2, r2, #1
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0652      	lsls	r2, r2, #25
 80034e4:	430a      	orrs	r2, r1
 80034e6:	4916      	ldr	r1, [pc, #88]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe faea 	bl	8001ad0 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034fe:	e009      	b.n	8003514 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003500:	f7fe fae6 	bl	8001ad0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	73fb      	strb	r3, [r7, #15]
          break;
 8003512:	e005      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	4904      	ldr	r1, [pc, #16]	@ (8003540 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003552:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800355e:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0203 	and.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d10d      	bne.n	800358a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
       ||
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003576:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
       ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d047      	beq.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e044      	b.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d018      	beq.n	80035ca <RCCEx_PLLSAI2_Config+0x86>
 8003598:	2b03      	cmp	r3, #3
 800359a:	d825      	bhi.n	80035e8 <RCCEx_PLLSAI2_Config+0xa4>
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x62>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d009      	beq.n	80035b8 <RCCEx_PLLSAI2_Config+0x74>
 80035a4:	e020      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a6:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11d      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e01a      	b.n	80035ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e013      	b.n	80035f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ca:	4b4c      	ldr	r3, [pc, #304]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d6:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e6:	e006      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e004      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	430b      	orrs	r3, r1
 8003614:	4939      	ldr	r1, [pc, #228]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d167      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003620:	4b36      	ldr	r3, [pc, #216]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7fe fa50 	bl	8001ad0 <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003632:	e009      	b.n	8003648 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003634:	f7fe fa4c 	bl	8001ad0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d902      	bls.n	8003648 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	73fb      	strb	r3, [r7, #15]
        break;
 8003646:	e005      	b.n	8003654 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003648:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ef      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d14a      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d111      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003660:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	0211      	lsls	r1, r2, #8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	0912      	lsrs	r2, r2, #4
 8003678:	0452      	lsls	r2, r2, #17
 800367a:	430a      	orrs	r2, r1
 800367c:	491f      	ldr	r1, [pc, #124]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	614b      	str	r3, [r1, #20]
 8003682:	e011      	b.n	80036a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800368c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	0211      	lsls	r1, r2, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0652      	lsls	r2, r2, #25
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4916      	ldr	r1, [pc, #88]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036a8:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a13      	ldr	r2, [pc, #76]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fe fa0c 	bl	8001ad0 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036bc:	f7fe fa08 	bl	8001ad0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
          break;
 80036ce:	e005      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4904      	ldr	r1, [pc, #16]	@ (80036fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000

08003700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e095      	b.n	800383e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003722:	d009      	beq.n	8003738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e005      	b.n	8003738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fee4 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003778:	d902      	bls.n	8003780 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e002      	b.n	8003786 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800378e:	d007      	beq.n	80037a0 <HAL_SPI_Init+0xa0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	ea42 0103 	orr.w	r1, r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	f003 0204 	and.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e040      	b.n	80038da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fd feed 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	@ 0x24
 8003872:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fae1 	bl	8003e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f826 	bl	80038e4 <UART_SetConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01b      	b.n	80038da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb60 	bl	8003f98 <UART_CheckIdleState>
 80038d8:	4603      	mov	r3, r0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b08a      	sub	sp, #40	@ 0x28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba4 <UART_SetConfig+0x2c0>)
 8003914:	4013      	ands	r3, r2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a99      	ldr	r2, [pc, #612]	@ (8003ba8 <UART_SetConfig+0x2c4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	4313      	orrs	r3, r2
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a90      	ldr	r2, [pc, #576]	@ (8003bac <UART_SetConfig+0x2c8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d126      	bne.n	80039bc <UART_SetConfig+0xd8>
 800396e:	4b90      	ldr	r3, [pc, #576]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b03      	cmp	r3, #3
 800397a:	d81b      	bhi.n	80039b4 <UART_SetConfig+0xd0>
 800397c:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <UART_SetConfig+0xa0>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	08003995 	.word	0x08003995
 8003988:	080039a5 	.word	0x080039a5
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039ad 	.word	0x080039ad
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399a:	e116      	b.n	8003bca <UART_SetConfig+0x2e6>
 800399c:	2302      	movs	r3, #2
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a2:	e112      	b.n	8003bca <UART_SetConfig+0x2e6>
 80039a4:	2304      	movs	r3, #4
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039aa:	e10e      	b.n	8003bca <UART_SetConfig+0x2e6>
 80039ac:	2308      	movs	r3, #8
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b2:	e10a      	b.n	8003bca <UART_SetConfig+0x2e6>
 80039b4:	2310      	movs	r3, #16
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ba:	e106      	b.n	8003bca <UART_SetConfig+0x2e6>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb4 <UART_SetConfig+0x2d0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d138      	bne.n	8003a38 <UART_SetConfig+0x154>
 80039c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d82d      	bhi.n	8003a30 <UART_SetConfig+0x14c>
 80039d4:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <UART_SetConfig+0xf8>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a31 	.word	0x08003a31
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a31 	.word	0x08003a31
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	08003a31 	.word	0x08003a31
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a16:	e0d8      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e0d4      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a20:	2304      	movs	r3, #4
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e0d0      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e0cc      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a30:	2310      	movs	r3, #16
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e0c8      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bb8 <UART_SetConfig+0x2d4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d125      	bne.n	8003a8e <UART_SetConfig+0x1aa>
 8003a42:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a4c:	2b30      	cmp	r3, #48	@ 0x30
 8003a4e:	d016      	beq.n	8003a7e <UART_SetConfig+0x19a>
 8003a50:	2b30      	cmp	r3, #48	@ 0x30
 8003a52:	d818      	bhi.n	8003a86 <UART_SetConfig+0x1a2>
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d00a      	beq.n	8003a6e <UART_SetConfig+0x18a>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d814      	bhi.n	8003a86 <UART_SetConfig+0x1a2>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <UART_SetConfig+0x182>
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d008      	beq.n	8003a76 <UART_SetConfig+0x192>
 8003a64:	e00f      	b.n	8003a86 <UART_SetConfig+0x1a2>
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6c:	e0ad      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a74:	e0a9      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a76:	2304      	movs	r3, #4
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7c:	e0a5      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a84:	e0a1      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a86:	2310      	movs	r3, #16
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8c:	e09d      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4a      	ldr	r2, [pc, #296]	@ (8003bbc <UART_SetConfig+0x2d8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d125      	bne.n	8003ae4 <UART_SetConfig+0x200>
 8003a98:	4b45      	ldr	r3, [pc, #276]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003aa4:	d016      	beq.n	8003ad4 <UART_SetConfig+0x1f0>
 8003aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003aa8:	d818      	bhi.n	8003adc <UART_SetConfig+0x1f8>
 8003aaa:	2b80      	cmp	r3, #128	@ 0x80
 8003aac:	d00a      	beq.n	8003ac4 <UART_SetConfig+0x1e0>
 8003aae:	2b80      	cmp	r3, #128	@ 0x80
 8003ab0:	d814      	bhi.n	8003adc <UART_SetConfig+0x1f8>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <UART_SetConfig+0x1d8>
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	d008      	beq.n	8003acc <UART_SetConfig+0x1e8>
 8003aba:	e00f      	b.n	8003adc <UART_SetConfig+0x1f8>
 8003abc:	2300      	movs	r3, #0
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e082      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e07e      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003acc:	2304      	movs	r3, #4
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e07a      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e076      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003adc:	2310      	movs	r3, #16
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e072      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a35      	ldr	r2, [pc, #212]	@ (8003bc0 <UART_SetConfig+0x2dc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d12a      	bne.n	8003b44 <UART_SetConfig+0x260>
 8003aee:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afc:	d01a      	beq.n	8003b34 <UART_SetConfig+0x250>
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b02:	d81b      	bhi.n	8003b3c <UART_SetConfig+0x258>
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b08:	d00c      	beq.n	8003b24 <UART_SetConfig+0x240>
 8003b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0e:	d815      	bhi.n	8003b3c <UART_SetConfig+0x258>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <UART_SetConfig+0x238>
 8003b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b18:	d008      	beq.n	8003b2c <UART_SetConfig+0x248>
 8003b1a:	e00f      	b.n	8003b3c <UART_SetConfig+0x258>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b22:	e052      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e04e      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e04a      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b34:	2308      	movs	r3, #8
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3a:	e046      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b42:	e042      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <UART_SetConfig+0x2c4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d13a      	bne.n	8003bc4 <UART_SetConfig+0x2e0>
 8003b4e:	4b18      	ldr	r3, [pc, #96]	@ (8003bb0 <UART_SetConfig+0x2cc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b5c:	d01a      	beq.n	8003b94 <UART_SetConfig+0x2b0>
 8003b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b62:	d81b      	bhi.n	8003b9c <UART_SetConfig+0x2b8>
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b68:	d00c      	beq.n	8003b84 <UART_SetConfig+0x2a0>
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b6e:	d815      	bhi.n	8003b9c <UART_SetConfig+0x2b8>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <UART_SetConfig+0x298>
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b78:	d008      	beq.n	8003b8c <UART_SetConfig+0x2a8>
 8003b7a:	e00f      	b.n	8003b9c <UART_SetConfig+0x2b8>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b82:	e022      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e01e      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e01a      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e016      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e012      	b.n	8003bca <UART_SetConfig+0x2e6>
 8003ba4:	efff69f3 	.word	0xefff69f3
 8003ba8:	40008000 	.word	0x40008000
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40004800 	.word	0x40004800
 8003bbc:	40004c00 	.word	0x40004c00
 8003bc0:	40005000 	.word	0x40005000
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a9f      	ldr	r2, [pc, #636]	@ (8003e4c <UART_SetConfig+0x568>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d17a      	bne.n	8003cca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d824      	bhi.n	8003c26 <UART_SetConfig+0x342>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <UART_SetConfig+0x300>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c27 	.word	0x08003c27
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c27 	.word	0x08003c27
 8003bf4:	08003c17 	.word	0x08003c17
 8003bf8:	08003c27 	.word	0x08003c27
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff f832 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61f8      	str	r0, [r7, #28]
        break;
 8003c0e:	e010      	b.n	8003c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c10:	4b8f      	ldr	r3, [pc, #572]	@ (8003e50 <UART_SetConfig+0x56c>)
 8003c12:	61fb      	str	r3, [r7, #28]
        break;
 8003c14:	e00d      	b.n	8003c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c16:	f7fe ff93 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003c1a:	61f8      	str	r0, [r7, #28]
        break;
 8003c1c:	e009      	b.n	8003c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c22:	61fb      	str	r3, [r7, #28]
        break;
 8003c24:	e005      	b.n	8003c32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80fb 	beq.w	8003e30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d305      	bcc.n	8003c56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c5c:	e0e8      	b.n	8003e30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2200      	movs	r2, #0
 8003c62:	461c      	mov	r4, r3
 8003c64:	4615      	mov	r5, r2
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	022b      	lsls	r3, r5, #8
 8003c70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c74:	0222      	lsls	r2, r4, #8
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	6849      	ldr	r1, [r1, #4]
 8003c7a:	0849      	lsrs	r1, r1, #1
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4688      	mov	r8, r1
 8003c80:	4681      	mov	r9, r0
 8003c82:	eb12 0a08 	adds.w	sl, r2, r8
 8003c86:	eb43 0b09 	adc.w	fp, r3, r9
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c98:	4650      	mov	r0, sl
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	f7fc fff4 	bl	8000c88 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cae:	d308      	bcc.n	8003cc2 <UART_SetConfig+0x3de>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb6:	d204      	bcs.n	8003cc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	e0b6      	b.n	8003e30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cc8:	e0b2      	b.n	8003e30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd2:	d15e      	bne.n	8003d92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d828      	bhi.n	8003d2e <UART_SetConfig+0x44a>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <UART_SetConfig+0x400>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d1f 	.word	0x08003d1f
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d2f 	.word	0x08003d2f
 8003d00:	08003d2f 	.word	0x08003d2f
 8003d04:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7fe ffb2 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	61f8      	str	r0, [r7, #28]
        break;
 8003d0e:	e014      	b.n	8003d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe ffc4 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003d14:	61f8      	str	r0, [r7, #28]
        break;
 8003d16:	e010      	b.n	8003d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b4d      	ldr	r3, [pc, #308]	@ (8003e50 <UART_SetConfig+0x56c>)
 8003d1a:	61fb      	str	r3, [r7, #28]
        break;
 8003d1c:	e00d      	b.n	8003d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe ff0f 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003d22:	61f8      	str	r0, [r7, #28]
        break;
 8003d24:	e009      	b.n	8003d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2a:	61fb      	str	r3, [r7, #28]
        break;
 8003d2c:	e005      	b.n	8003d3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d077      	beq.n	8003e30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005a      	lsls	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0f      	cmp	r3, #15
 8003d5a:	d916      	bls.n	8003d8a <UART_SetConfig+0x4a6>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d62:	d212      	bcs.n	8003d8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f023 030f 	bic.w	r3, r3, #15
 8003d6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	8afb      	ldrh	r3, [r7, #22]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	8afa      	ldrh	r2, [r7, #22]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e052      	b.n	8003e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d90:	e04e      	b.n	8003e30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d827      	bhi.n	8003dea <UART_SetConfig+0x506>
 8003d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <UART_SetConfig+0x4bc>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe ff54 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	61f8      	str	r0, [r7, #28]
        break;
 8003dca:	e014      	b.n	8003df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe ff66 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <UART_SetConfig+0x56c>)
 8003dd6:	61fb      	str	r3, [r7, #28]
        break;
 8003dd8:	e00d      	b.n	8003df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe feb1 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003dde:	61f8      	str	r0, [r7, #28]
        break;
 8003de0:	e009      	b.n	8003df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	61fb      	str	r3, [r7, #28]
        break;
 8003de8:	e005      	b.n	8003df6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003df4:	bf00      	nop
    }

    if (pclk != 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085a      	lsrs	r2, r3, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	441a      	add	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d909      	bls.n	8003e2a <UART_SetConfig+0x546>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d205      	bcs.n	8003e2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e002      	b.n	8003e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	@ 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40008000 	.word	0x40008000
 8003e50:	00f42400 	.word	0x00f42400

08003e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f52:	d10a      	bne.n	8003f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b098      	sub	sp, #96	@ 0x60
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa8:	f7fd fd92 	bl	8001ad0 <HAL_GetTick>
 8003fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d12e      	bne.n	800401a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f88c 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d021      	beq.n	800401a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e062      	b.n	80040e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d149      	bne.n	80040bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f856 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03c      	beq.n	80040bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	623b      	str	r3, [r7, #32]
   return(result);
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004060:	633b      	str	r3, [r7, #48]	@ 0x30
 8004062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e6      	bne.n	8004042 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	60fb      	str	r3, [r7, #12]
   return(result);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3308      	adds	r3, #8
 8004092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004094:	61fa      	str	r2, [r7, #28]
 8004096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	617b      	str	r3, [r7, #20]
   return(result);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e011      	b.n	80040e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3758      	adds	r7, #88	@ 0x58
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	e04f      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d04b      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd fce5 	bl	8001ad0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <UART_WaitOnFlagUntilTimeout+0x30>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e04e      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d037      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b80      	cmp	r3, #128	@ 0x80
 800412e:	d034      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d031      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d110      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f838 	bl	80041c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2208      	movs	r2, #8
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e029      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004174:	d111      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800417e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f81e 	bl	80041c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0a0      	beq.n	80040fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b095      	sub	sp, #84	@ 0x54
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	61fb      	str	r3, [r7, #28]
   return(result);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	2b01      	cmp	r3, #1
 8004236:	d118      	bne.n	800426a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60bb      	str	r3, [r7, #8]
   return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	647b      	str	r3, [r7, #68]	@ 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	613b      	str	r3, [r7, #16]
   return(result);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e6      	bne.n	8004238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800427e:	bf00      	nop
 8004280:	3754      	adds	r7, #84	@ 0x54
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429c:	2b84      	cmp	r3, #132	@ 0x84
 800429e:	d005      	beq.n	80042ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	3303      	adds	r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042be:	f000 fc39 	bl	8004b34 <vTaskStartScheduler>
  
  return osOK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b089      	sub	sp, #36	@ 0x24
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d020      	beq.n	800431c <osThreadCreate+0x54>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01c      	beq.n	800431c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685c      	ldr	r4, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691e      	ldr	r6, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ffc8 	bl	800428a <makeFreeRtosPriority>
 80042fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004304:	9202      	str	r2, [sp, #8]
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	9100      	str	r1, [sp, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4632      	mov	r2, r6
 800430e:	4629      	mov	r1, r5
 8004310:	4620      	mov	r0, r4
 8004312:	f000 fa41 	bl	8004798 <xTaskCreateStatic>
 8004316:	4603      	mov	r3, r0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e01c      	b.n	8004356 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685c      	ldr	r4, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004328:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ffaa 	bl	800428a <makeFreeRtosPriority>
 8004336:	4602      	mov	r2, r0
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	9200      	str	r2, [sp, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4632      	mov	r2, r6
 8004344:	4629      	mov	r1, r5
 8004346:	4620      	mov	r0, r4
 8004348:	f000 fa86 	bl	8004858 <xTaskCreate>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004360 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <osDelay+0x16>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e000      	b.n	8004378 <osDelay+0x18>
 8004376:	2301      	movs	r3, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fba5 	bl	8004ac8 <vTaskDelay>
  
  return osOK;
 800437e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f103 0208 	add.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f103 0208 	add.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e00c      	b.n	8004464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3308      	adds	r3, #8
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e002      	b.n	8004458 <vListInsert+0x2e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d2f6      	bcs.n	8004452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6892      	ldr	r2, [r2, #8]
 80044b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800451c:	f001 f81c 	bl	8005558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	3b01      	subs	r3, #1
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	441a      	add	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	@ 0xff
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	@ 0xff
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d114      	bne.n	800459c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3310      	adds	r3, #16
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fcfc 	bl	8004f7c <xTaskRemoveFromEventList>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <xQueueGenericReset+0xd0>)
 800458c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	e009      	b.n	80045b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3310      	adds	r3, #16
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fef1 	bl	8004388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3324      	adds	r3, #36	@ 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff feec 	bl	8004388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045b0:	f001 f804 	bl	80055bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045b4:	2301      	movs	r3, #1
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3348      	adds	r3, #72	@ 0x48
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f8cc 	bl	800579c <pvPortMalloc>
 8004604:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d011      	beq.n	8004630 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3348      	adds	r3, #72	@ 0x48
 8004614:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800461e:	79fa      	ldrb	r2, [r7, #7]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f805 	bl	800463a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004630:	69bb      	ldr	r3, [r7, #24]
	}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e002      	b.n	800465c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004668:	2101      	movs	r1, #1
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f7ff ff40 	bl	80044f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	@ 0x38
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61fb      	str	r3, [r7, #28]
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <xQueueGiveFromISR+0x5c>
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <xQueueGiveFromISR+0x60>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <xQueueGiveFromISR+0x62>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	61bb      	str	r3, [r7, #24]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046f6:	f001 f80f 	bl	8005718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046fa:	f3ef 8211 	mrs	r2, BASEPRI
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	617a      	str	r2, [r7, #20]
 8004710:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004712:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004722:	429a      	cmp	r2, r3
 8004724:	d22b      	bcs.n	800477e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004738:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d112      	bne.n	8004768 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	3324      	adds	r3, #36	@ 0x24
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fc14 	bl	8004f7c <xTaskRemoveFromEventList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e007      	b.n	8004778 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800476c:	3301      	adds	r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	b25a      	sxtb	r2, r3
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
 800477c:	e001      	b.n	8004782 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800478c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004790:	4618      	mov	r0, r3
 8004792:	3738      	adds	r7, #56	@ 0x38
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	@ 0x38
 800479c:	af04      	add	r7, sp, #16
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	61fb      	str	r3, [r7, #28]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047e2:	2354      	movs	r3, #84	@ 0x54
 80047e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b54      	cmp	r3, #84	@ 0x54
 80047ea:	d00b      	beq.n	8004804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	61bb      	str	r3, [r7, #24]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <xTaskCreateStatic+0xb2>
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004824:	2300      	movs	r3, #0
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f850 	bl	80048e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004844:	f000 f8d6 	bl	80049f4 <prvAddNewTaskToReadyList>
 8004848:	e001      	b.n	800484e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800484e:	697b      	ldr	r3, [r7, #20]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	@ 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af04      	add	r7, sp, #16
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ff95 	bl	800579c <pvPortMalloc>
 8004872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800487a:	2054      	movs	r0, #84	@ 0x54
 800487c:	f000 ff8e 	bl	800579c <pvPortMalloc>
 8004880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
 800488e:	e005      	b.n	800489c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f001 f851 	bl	8005938 <vPortFree>
 8004896:	e001      	b.n	800489c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f80e 	bl	80048e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c6:	69f8      	ldr	r0, [r7, #28]
 80048c8:	f000 f894 	bl	80049f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e002      	b.n	80048d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048d8:	69bb      	ldr	r3, [r7, #24]
	}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b088      	sub	sp, #32
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048fa:	3b01      	subs	r3, #1
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f023 0307 	bic.w	r3, r3, #7
 8004908:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	617b      	str	r3, [r7, #20]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01f      	beq.n	8004972 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e012      	b.n	800495e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	7819      	ldrb	r1, [r3, #0]
 8004940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	3334      	adds	r3, #52	@ 0x34
 8004948:	460a      	mov	r2, r1
 800494a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d006      	beq.n	8004966 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d9e9      	bls.n	8004938 <prvInitialiseNewTask+0x56>
 8004964:	e000      	b.n	8004968 <prvInitialiseNewTask+0x86>
			{
				break;
 8004966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004970:	e003      	b.n	800497a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	2b06      	cmp	r3, #6
 800497e:	d901      	bls.n	8004984 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004980:	2306      	movs	r3, #6
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004988:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	2200      	movs	r2, #0
 8004994:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fd14 	bl	80043c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	3318      	adds	r3, #24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fd0f 	bl	80043c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	f1c3 0207 	rsb	r2, r3, #7
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	68f9      	ldr	r1, [r7, #12]
 80049d2:	69b8      	ldr	r0, [r7, #24]
 80049d4:	f000 fc90 	bl	80052f8 <pxPortInitialiseStack>
 80049d8:	4602      	mov	r2, r0
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049fc:	f000 fdac 	bl	8005558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a00:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a29      	ldr	r2, [pc, #164]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a12:	4a27      	ldr	r2, [pc, #156]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a18:	4b24      	ldr	r3, [pc, #144]	@ (8004aac <prvAddNewTaskToReadyList+0xb8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d110      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a20:	f000 fb28 	bl	8005074 <prvInitialiseTaskLists>
 8004a24:	e00d      	b.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	2201      	movs	r2, #1
 8004a52:	409a      	lsls	r2, r3
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	4a18      	ldr	r2, [pc, #96]	@ (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7ff fcb4 	bl	80043e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a7a:	f000 fd9f 	bl	80055bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <prvAddNewTaskToReadyList+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d207      	bcs.n	8004aa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000f88 	.word	0x20000f88
 8004ab0:	20000e88 	.word	0x20000e88
 8004ab4:	20000f94 	.word	0x20000f94
 8004ab8:	20000fa4 	.word	0x20000fa4
 8004abc:	20000f90 	.word	0x20000f90
 8004ac0:	20000e8c 	.word	0x20000e8c
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d018      	beq.n	8004b0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ada:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <vTaskDelay+0x64>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <vTaskDelay+0x32>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60bb      	str	r3, [r7, #8]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004afa:	f000 f87d 	bl	8004bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004afe:	2100      	movs	r1, #0
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fb93 	bl	800522c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b06:	f000 f885 	bl	8004c14 <xTaskResumeAll>
 8004b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b12:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <vTaskDelay+0x68>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000fb0 	.word	0x20000fb0
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b42:	463a      	mov	r2, r7
 8004b44:	1d39      	adds	r1, r7, #4
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc fa68 	bl	8001020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	9202      	str	r2, [sp, #8]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	460a      	mov	r2, r1
 8004b62:	491f      	ldr	r1, [pc, #124]	@ (8004be0 <vTaskStartScheduler+0xac>)
 8004b64:	481f      	ldr	r0, [pc, #124]	@ (8004be4 <vTaskStartScheduler+0xb0>)
 8004b66:	f7ff fe17 	bl	8004798 <xTaskCreateStatic>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004be8 <vTaskStartScheduler+0xb4>)
 8004b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <vTaskStartScheduler+0xb4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e001      	b.n	8004b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d116      	bne.n	8004bb6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	613b      	str	r3, [r7, #16]
}
 8004b9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <vTaskStartScheduler+0xb8>)
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ba4:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <vTaskStartScheduler+0xbc>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004baa:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <vTaskStartScheduler+0xc0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bb0:	f000 fc2e 	bl	8005410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bb4:	e00f      	b.n	8004bd6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d10b      	bne.n	8004bd6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	60fb      	str	r3, [r7, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <vTaskStartScheduler+0x9e>
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	0800a69c 	.word	0x0800a69c
 8004be4:	08005045 	.word	0x08005045
 8004be8:	20000fac 	.word	0x20000fac
 8004bec:	20000fa8 	.word	0x20000fa8
 8004bf0:	20000f94 	.word	0x20000f94
 8004bf4:	20000f8c 	.word	0x20000f8c

08004bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <vTaskSuspendAll+0x18>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	4a03      	ldr	r2, [pc, #12]	@ (8004c10 <vTaskSuspendAll+0x18>)
 8004c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000fb0 	.word	0x20000fb0

08004c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c22:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <xTaskResumeAll+0x2e>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c42:	f000 fc89 	bl	8005558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c46:	4b39      	ldr	r3, [pc, #228]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a37      	ldr	r2, [pc, #220]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c50:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <xTaskResumeAll+0x118>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d161      	bne.n	8004d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c58:	4b35      	ldr	r3, [pc, #212]	@ (8004d30 <xTaskResumeAll+0x11c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d05d      	beq.n	8004d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c60:	e02e      	b.n	8004cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c62:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <xTaskResumeAll+0x120>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fc14 	bl	800449c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fc0f 	bl	800449c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	2201      	movs	r2, #1
 8004c84:	409a      	lsls	r2, r3
 8004c86:	4b2c      	ldr	r3, [pc, #176]	@ (8004d38 <xTaskResumeAll+0x124>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <xTaskResumeAll+0x124>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a27      	ldr	r2, [pc, #156]	@ (8004d3c <xTaskResumeAll+0x128>)
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7ff fb9b 	bl	80043e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	4b23      	ldr	r3, [pc, #140]	@ (8004d40 <xTaskResumeAll+0x12c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <xTaskResumeAll+0x120>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1cc      	bne.n	8004c62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cce:	f000 fa6f 	bl	80051b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d48 <xTaskResumeAll+0x134>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cde:	f000 f837 	bl	8004d50 <xTaskIncrementTick>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f1      	bne.n	8004cde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004cfa:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <xTaskResumeAll+0x134>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d00:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <xTaskResumeAll+0x130>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d4c <xTaskResumeAll+0x138>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d1c:	f000 fc4e 	bl	80055bc <vPortExitCritical>

	return xAlreadyYielded;
 8004d20:	68bb      	ldr	r3, [r7, #8]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000fb0 	.word	0x20000fb0
 8004d30:	20000f88 	.word	0x20000f88
 8004d34:	20000f48 	.word	0x20000f48
 8004d38:	20000f90 	.word	0x20000f90
 8004d3c:	20000e8c 	.word	0x20000e8c
 8004d40:	20000e88 	.word	0x20000e88
 8004d44:	20000f9c 	.word	0x20000f9c
 8004d48:	20000f98 	.word	0x20000f98
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e98 <xTaskIncrementTick+0x148>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 808f 	bne.w	8004e82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d64:	4b4d      	ldr	r3, [pc, #308]	@ (8004e9c <xTaskIncrementTick+0x14c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e9c <xTaskIncrementTick+0x14c>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d121      	bne.n	8004dbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d78:	4b49      	ldr	r3, [pc, #292]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	603b      	str	r3, [r7, #0]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <xTaskIncrementTick+0x46>
 8004d9a:	4b41      	ldr	r3, [pc, #260]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4b40      	ldr	r3, [pc, #256]	@ (8004ea4 <xTaskIncrementTick+0x154>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea4 <xTaskIncrementTick+0x154>)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <xTaskIncrementTick+0x158>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea8 <xTaskIncrementTick+0x158>)
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	f000 f9fa 	bl	80051b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d348      	bcc.n	8004e58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc6:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	601a      	str	r2, [r3, #0]
					break;
 8004dd8:	e03e      	b.n	8004e58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	4b31      	ldr	r3, [pc, #196]	@ (8004ea0 <xTaskIncrementTick+0x150>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d203      	bcs.n	8004dfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004df2:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <xTaskIncrementTick+0x15c>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004df8:	e02e      	b.n	8004e58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fb4c 	bl	800449c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3318      	adds	r3, #24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fb43 	bl	800449c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <xTaskIncrementTick+0x160>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <xTaskIncrementTick+0x160>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <xTaskIncrementTick+0x164>)
 8004e36:	441a      	add	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff facf 	bl	80043e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <xTaskIncrementTick+0x168>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3b9      	bcc.n	8004dc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e56:	e7b6      	b.n	8004dc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e58:	4b17      	ldr	r3, [pc, #92]	@ (8004eb8 <xTaskIncrementTick+0x168>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5e:	4915      	ldr	r1, [pc, #84]	@ (8004eb4 <xTaskIncrementTick+0x164>)
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d901      	bls.n	8004e74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <xTaskIncrementTick+0x16c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e004      	b.n	8004e8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e82:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <xTaskIncrementTick+0x170>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <xTaskIncrementTick+0x170>)
 8004e8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e8c:	697b      	ldr	r3, [r7, #20]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000fb0 	.word	0x20000fb0
 8004e9c:	20000f8c 	.word	0x20000f8c
 8004ea0:	20000f40 	.word	0x20000f40
 8004ea4:	20000f44 	.word	0x20000f44
 8004ea8:	20000fa0 	.word	0x20000fa0
 8004eac:	20000fa8 	.word	0x20000fa8
 8004eb0:	20000f90 	.word	0x20000f90
 8004eb4:	20000e8c 	.word	0x20000e8c
 8004eb8:	20000e88 	.word	0x20000e88
 8004ebc:	20000f9c 	.word	0x20000f9c
 8004ec0:	20000f98 	.word	0x20000f98

08004ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eca:	4b27      	ldr	r3, [pc, #156]	@ (8004f68 <vTaskSwitchContext+0xa4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ed2:	4b26      	ldr	r3, [pc, #152]	@ (8004f6c <vTaskSwitchContext+0xa8>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ed8:	e040      	b.n	8004f5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004eda:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <vTaskSwitchContext+0xa8>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee0:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <vTaskSwitchContext+0xac>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	f1c3 031f 	rsb	r3, r3, #31
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	491f      	ldr	r1, [pc, #124]	@ (8004f74 <vTaskSwitchContext+0xb0>)
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vTaskSwitchContext+0x5a>
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <vTaskSwitchContext+0xb0>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3308      	adds	r3, #8
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d104      	bne.n	8004f52 <vTaskSwitchContext+0x8e>
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a07      	ldr	r2, [pc, #28]	@ (8004f78 <vTaskSwitchContext+0xb4>)
 8004f5a:	6013      	str	r3, [r2, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000fb0 	.word	0x20000fb0
 8004f6c:	20000f9c 	.word	0x20000f9c
 8004f70:	20000f90 	.word	0x20000f90
 8004f74:	20000e8c 	.word	0x20000e8c
 8004f78:	20000e88 	.word	0x20000e88

08004f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60fb      	str	r3, [r7, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3318      	adds	r3, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fa74 	bl	800449c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <xTaskRemoveFromEventList+0xb0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11c      	bne.n	8004ff6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fa6b 	bl	800449c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <xTaskRemoveFromEventList+0xb8>)
 8004fe6:	441a      	add	r2, r3
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7ff f9f7 	bl	80043e2 <vListInsertEnd>
 8004ff4:	e005      	b.n	8005002 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3318      	adds	r3, #24
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	480e      	ldr	r0, [pc, #56]	@ (8005038 <xTaskRemoveFromEventList+0xbc>)
 8004ffe:	f7ff f9f0 	bl	80043e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <xTaskRemoveFromEventList+0xc0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	429a      	cmp	r2, r3
 800500e:	d905      	bls.n	800501c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005010:	2301      	movs	r3, #1
 8005012:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005014:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <xTaskRemoveFromEventList+0xc4>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e001      	b.n	8005020 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005020:	697b      	ldr	r3, [r7, #20]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000fb0 	.word	0x20000fb0
 8005030:	20000f90 	.word	0x20000f90
 8005034:	20000e8c 	.word	0x20000e8c
 8005038:	20000f48 	.word	0x20000f48
 800503c:	20000e88 	.word	0x20000e88
 8005040:	20000f9c 	.word	0x20000f9c

08005044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800504c:	f000 f852 	bl	80050f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <prvIdleTask+0x28>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d9f9      	bls.n	800504c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <prvIdleTask+0x2c>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005068:	e7f0      	b.n	800504c <prvIdleTask+0x8>
 800506a:	bf00      	nop
 800506c:	20000e8c 	.word	0x20000e8c
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e00c      	b.n	800509a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <prvInitialiseTaskLists+0x60>)
 800508c:	4413      	add	r3, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f97a 	bl	8004388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d9ef      	bls.n	8005080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a0:	480d      	ldr	r0, [pc, #52]	@ (80050d8 <prvInitialiseTaskLists+0x64>)
 80050a2:	f7ff f971 	bl	8004388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a6:	480d      	ldr	r0, [pc, #52]	@ (80050dc <prvInitialiseTaskLists+0x68>)
 80050a8:	f7ff f96e 	bl	8004388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ac:	480c      	ldr	r0, [pc, #48]	@ (80050e0 <prvInitialiseTaskLists+0x6c>)
 80050ae:	f7ff f96b 	bl	8004388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b2:	480c      	ldr	r0, [pc, #48]	@ (80050e4 <prvInitialiseTaskLists+0x70>)
 80050b4:	f7ff f968 	bl	8004388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b8:	480b      	ldr	r0, [pc, #44]	@ (80050e8 <prvInitialiseTaskLists+0x74>)
 80050ba:	f7ff f965 	bl	8004388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <prvInitialiseTaskLists+0x78>)
 80050c0:	4a05      	ldr	r2, [pc, #20]	@ (80050d8 <prvInitialiseTaskLists+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvInitialiseTaskLists+0x7c>)
 80050c6:	4a05      	ldr	r2, [pc, #20]	@ (80050dc <prvInitialiseTaskLists+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000e8c 	.word	0x20000e8c
 80050d8:	20000f18 	.word	0x20000f18
 80050dc:	20000f2c 	.word	0x20000f2c
 80050e0:	20000f48 	.word	0x20000f48
 80050e4:	20000f5c 	.word	0x20000f5c
 80050e8:	20000f74 	.word	0x20000f74
 80050ec:	20000f40 	.word	0x20000f40
 80050f0:	20000f44 	.word	0x20000f44

080050f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fa:	e019      	b.n	8005130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050fc:	f000 fa2c 	bl	8005558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005100:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <prvCheckTasksWaitingTermination+0x50>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff f9c5 	bl	800449c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a0b      	ldr	r2, [pc, #44]	@ (8005148 <prvCheckTasksWaitingTermination+0x54>)
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005126:	f000 fa49 	bl	80055bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f810 	bl	8005150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000f5c 	.word	0x20000f5c
 8005148:	20000f88 	.word	0x20000f88
 800514c:	20000f70 	.word	0x20000f70

08005150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fbe6 	bl	8005938 <vPortFree>
				vPortFree( pxTCB );
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fbe3 	bl	8005938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005172:	e019      	b.n	80051a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800517a:	2b01      	cmp	r3, #1
 800517c:	d103      	bne.n	8005186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fbda 	bl	8005938 <vPortFree>
	}
 8005184:	e010      	b.n	80051a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800518c:	2b02      	cmp	r3, #2
 800518e:	d00b      	beq.n	80051a8 <prvDeleteTCB+0x58>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <prvDeleteTCB+0x54>
	}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b6:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <prvResetNextTaskUnblockTime+0x38>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <prvResetNextTaskUnblockTime+0x3c>)
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295
 80051c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051c8:	e008      	b.n	80051dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ca:	4b07      	ldr	r3, [pc, #28]	@ (80051e8 <prvResetNextTaskUnblockTime+0x38>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a04      	ldr	r2, [pc, #16]	@ (80051ec <prvResetNextTaskUnblockTime+0x3c>)
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000f40 	.word	0x20000f40
 80051ec:	20000fa8 	.word	0x20000fa8

080051f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <xTaskGetSchedulerState+0x34>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051fe:	2301      	movs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	e008      	b.n	8005216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <xTaskGetSchedulerState+0x38>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800520c:	2302      	movs	r3, #2
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	e001      	b.n	8005216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005216:	687b      	ldr	r3, [r7, #4]
	}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000f94 	.word	0x20000f94
 8005228:	20000fb0 	.word	0x20000fb0

0800522c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005236:	4b29      	ldr	r3, [pc, #164]	@ (80052dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800523c:	4b28      	ldr	r3, [pc, #160]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f92a 	bl	800449c <uxListRemove>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	2201      	movs	r2, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	4b21      	ldr	r3, [pc, #132]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4013      	ands	r3, r2
 8005262:	4a20      	ldr	r2, [pc, #128]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005264:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d10a      	bne.n	8005284 <prvAddCurrentTaskToDelayedList+0x58>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005274:	4b1a      	ldr	r3, [pc, #104]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	481a      	ldr	r0, [pc, #104]	@ (80052e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800527e:	f7ff f8b0 	bl	80043e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005282:	e026      	b.n	80052d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800528c:	4b14      	ldr	r3, [pc, #80]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	429a      	cmp	r2, r3
 800529a:	d209      	bcs.n	80052b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529c:	4b13      	ldr	r3, [pc, #76]	@ (80052ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b0f      	ldr	r3, [pc, #60]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7ff f8be 	bl	800442a <vListInsert>
}
 80052ae:	e010      	b.n	80052d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b0:	4b0f      	ldr	r3, [pc, #60]	@ (80052f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7ff f8b4 	bl	800442a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052c2:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d202      	bcs.n	80052d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052cc:	4a09      	ldr	r2, [pc, #36]	@ (80052f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6013      	str	r3, [r2, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000f8c 	.word	0x20000f8c
 80052e0:	20000e88 	.word	0x20000e88
 80052e4:	20000f90 	.word	0x20000f90
 80052e8:	20000f74 	.word	0x20000f74
 80052ec:	20000f44 	.word	0x20000f44
 80052f0:	20000f40 	.word	0x20000f40
 80052f4:	20000fa8 	.word	0x20000fa8

080052f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b04      	subs	r3, #4
 8005308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005328:	4a0c      	ldr	r2, [pc, #48]	@ (800535c <pxPortInitialiseStack+0x64>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b14      	subs	r3, #20
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b04      	subs	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f06f 0202 	mvn.w	r2, #2
 8005346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b20      	subs	r3, #32
 800534c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	08005361 	.word	0x08005361

08005360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800536a:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <prvTaskExitError+0x58>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d00b      	beq.n	800538c <prvTaskExitError+0x2c>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <prvTaskExitError+0x28>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	60bb      	str	r3, [r7, #8]
}
 800539e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053a0:	bf00      	nop
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0fc      	beq.n	80053a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	00000000 	.word	0x00000000

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	20000e88 	.word	0x20000e88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	@ (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	bf00      	nop
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005416:	4b47      	ldr	r3, [pc, #284]	@ (8005534 <xPortStartScheduler+0x124>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a47      	ldr	r2, [pc, #284]	@ (8005538 <xPortStartScheduler+0x128>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10b      	bne.n	8005438 <xPortStartScheduler+0x28>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005438:	4b3e      	ldr	r3, [pc, #248]	@ (8005534 <xPortStartScheduler+0x124>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3f      	ldr	r2, [pc, #252]	@ (800553c <xPortStartScheduler+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10b      	bne.n	800545a <xPortStartScheduler+0x4a>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	613b      	str	r3, [r7, #16]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800545a:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <xPortStartScheduler+0x130>)
 800545c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	22ff      	movs	r2, #255	@ 0xff
 800546a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <xPortStartScheduler+0x134>)
 8005480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <xPortStartScheduler+0x138>)
 8005484:	2207      	movs	r2, #7
 8005486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005488:	e009      	b.n	800549e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <xPortStartScheduler+0x138>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	4a2d      	ldr	r2, [pc, #180]	@ (8005548 <xPortStartScheduler+0x138>)
 8005492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d0ef      	beq.n	800548a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <xPortStartScheduler+0x138>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00b      	beq.n	80054ce <xPortStartScheduler+0xbe>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60bb      	str	r3, [r7, #8]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <xPortStartScheduler+0x138>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <xPortStartScheduler+0x138>)
 80054d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <xPortStartScheduler+0x138>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <xPortStartScheduler+0x138>)
 80054e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054ec:	4b17      	ldr	r3, [pc, #92]	@ (800554c <xPortStartScheduler+0x13c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a16      	ldr	r2, [pc, #88]	@ (800554c <xPortStartScheduler+0x13c>)
 80054f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054f8:	4b14      	ldr	r3, [pc, #80]	@ (800554c <xPortStartScheduler+0x13c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a13      	ldr	r2, [pc, #76]	@ (800554c <xPortStartScheduler+0x13c>)
 80054fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005504:	f000 f8da 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <xPortStartScheduler+0x140>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800550e:	f000 f8f9 	bl	8005704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <xPortStartScheduler+0x144>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a0f      	ldr	r2, [pc, #60]	@ (8005554 <xPortStartScheduler+0x144>)
 8005518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800551e:	f7ff ff63 	bl	80053e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005522:	f7ff fccf 	bl	8004ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8005526:	f7ff ff1b 	bl	8005360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	410fc271 	.word	0x410fc271
 800553c:	410fc270 	.word	0x410fc270
 8005540:	e000e400 	.word	0xe000e400
 8005544:	20000fb4 	.word	0x20000fb4
 8005548:	20000fb8 	.word	0x20000fb8
 800554c:	e000ed20 	.word	0xe000ed20
 8005550:	2000000c 	.word	0x2000000c
 8005554:	e000ef34 	.word	0xe000ef34

08005558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <vPortEnterCritical+0x5c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a0e      	ldr	r2, [pc, #56]	@ (80055b4 <vPortEnterCritical+0x5c>)
 800557a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800557c:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <vPortEnterCritical+0x5c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d110      	bne.n	80055a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <vPortEnterCritical+0x60>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <vPortEnterCritical+0x4a>
	}
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	2000000c 	.word	0x2000000c
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055c2:	4b12      	ldr	r3, [pc, #72]	@ (800560c <vPortExitCritical+0x50>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <vPortExitCritical+0x26>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	607b      	str	r3, [r7, #4]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <vPortExitCritical+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	4a08      	ldr	r2, [pc, #32]	@ (800560c <vPortExitCritical+0x50>)
 80055ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <vPortExitCritical+0x50>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <vPortExitCritical+0x44>
 80055f4:	2300      	movs	r3, #0
 80055f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f383 8811 	msr	BASEPRI, r3
}
 80055fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000000c 	.word	0x2000000c

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	@ (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7ff fc40 	bl	8004ec4 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	20000e88 	.word	0x20000e88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7ff fb5d 	bl	8004d50 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <xPortSysTickHandler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	@ (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	@ (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	@ (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000000 	.word	0x20000000
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005712:	bf00      	nop
 8005714:	e000ed88 	.word	0xe000ed88

08005718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800571e:	f3ef 8305 	mrs	r3, IPSR
 8005722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d915      	bls.n	8005756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572a:	4a18      	ldr	r2, [pc, #96]	@ (800578c <vPortValidateInterruptPriority+0x74>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005734:	4b16      	ldr	r3, [pc, #88]	@ (8005790 <vPortValidateInterruptPriority+0x78>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20b      	bcs.n	8005756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005756:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <vPortValidateInterruptPriority+0x7c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800575e:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <vPortValidateInterruptPriority+0x80>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d90b      	bls.n	800577e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vPortValidateInterruptPriority+0x62>
	}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	20000fb4 	.word	0x20000fb4
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	20000fb8 	.word	0x20000fb8

0800579c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	@ 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a8:	f7ff fa26 	bl	8004bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005920 <pvPortMalloc+0x184>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b4:	f000 f924 	bl	8005a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005924 <pvPortMalloc+0x188>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 8095 	bne.w	80058f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057cc:	2208      	movs	r2, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <pvPortMalloc+0x6e>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d06f      	beq.n	80058f0 <pvPortMalloc+0x154>
 8005810:	4b45      	ldr	r3, [pc, #276]	@ (8005928 <pvPortMalloc+0x18c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d86a      	bhi.n	80058f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800581a:	4b44      	ldr	r3, [pc, #272]	@ (800592c <pvPortMalloc+0x190>)
 800581c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800581e:	4b43      	ldr	r3, [pc, #268]	@ (800592c <pvPortMalloc+0x190>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005824:	e004      	b.n	8005830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d903      	bls.n	8005842 <pvPortMalloc+0xa6>
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f1      	bne.n	8005826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005842:	4b37      	ldr	r3, [pc, #220]	@ (8005920 <pvPortMalloc+0x184>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005848:	429a      	cmp	r2, r3
 800584a:	d051      	beq.n	80058f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2208      	movs	r2, #8
 8005852:	4413      	add	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	2308      	movs	r3, #8
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	429a      	cmp	r2, r3
 800586c:	d920      	bls.n	80058b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <pvPortMalloc+0xfc>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	613b      	str	r3, [r7, #16]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f000 f90a 	bl	8005ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <pvPortMalloc+0x18c>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <pvPortMalloc+0x18c>)
 80058bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058be:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <pvPortMalloc+0x18c>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <pvPortMalloc+0x194>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d203      	bcs.n	80058d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ca:	4b17      	ldr	r3, [pc, #92]	@ (8005928 <pvPortMalloc+0x18c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <pvPortMalloc+0x194>)
 80058d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b13      	ldr	r3, [pc, #76]	@ (8005924 <pvPortMalloc+0x188>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	431a      	orrs	r2, r3
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058e6:	4b13      	ldr	r3, [pc, #76]	@ (8005934 <pvPortMalloc+0x198>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a11      	ldr	r2, [pc, #68]	@ (8005934 <pvPortMalloc+0x198>)
 80058ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058f0:	f7ff f990 	bl	8004c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <pvPortMalloc+0x17a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60fb      	str	r3, [r7, #12]
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <pvPortMalloc+0x176>
	return pvReturn;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3728      	adds	r7, #40	@ 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20001b7c 	.word	0x20001b7c
 8005924:	20001b90 	.word	0x20001b90
 8005928:	20001b80 	.word	0x20001b80
 800592c:	20001b74 	.word	0x20001b74
 8005930:	20001b84 	.word	0x20001b84
 8005934:	20001b88 	.word	0x20001b88

08005938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04f      	beq.n	80059ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800594a:	2308      	movs	r3, #8
 800594c:	425b      	negs	r3, r3
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <vPortFree+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <vPortFree+0x46>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60fb      	str	r3, [r7, #12]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <vPortFree+0x66>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60bb      	str	r3, [r7, #8]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <vPortFree+0xbc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01e      	beq.n	80059ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11a      	bne.n	80059ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <vPortFree+0xbc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059c4:	f7ff f918 	bl	8004bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <vPortFree+0xc0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <vPortFree+0xc0>)
 80059d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059d6:	6938      	ldr	r0, [r7, #16]
 80059d8:	f000 f874 	bl	8005ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <vPortFree+0xc4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <vPortFree+0xc4>)
 80059e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059e6:	f7ff f915 	bl	8004c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20001b90 	.word	0x20001b90
 80059f8:	20001b80 	.word	0x20001b80
 80059fc:	20001b8c 	.word	0x20001b8c

08005a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a0c:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <prvHeapInit+0xac>)
 8005a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005aac <prvHeapInit+0xac>)
 8005a30:	4413      	add	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <prvHeapInit+0xb0>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <prvHeapInit+0xb0>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a62:	4b14      	ldr	r3, [pc, #80]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a6a:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <prvHeapInit+0xb4>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <prvHeapInit+0xb8>)
 8005a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a09      	ldr	r2, [pc, #36]	@ (8005abc <prvHeapInit+0xbc>)
 8005a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <prvHeapInit+0xc0>)
 8005a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000fbc 	.word	0x20000fbc
 8005ab0:	20001b74 	.word	0x20001b74
 8005ab4:	20001b7c 	.word	0x20001b7c
 8005ab8:	20001b84 	.word	0x20001b84
 8005abc:	20001b80 	.word	0x20001b80
 8005ac0:	20001b90 	.word	0x20001b90

08005ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005acc:	4b28      	ldr	r3, [pc, #160]	@ (8005b70 <prvInsertBlockIntoFreeList+0xac>)
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e002      	b.n	8005ad8 <prvInsertBlockIntoFreeList+0x14>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d8f7      	bhi.n	8005ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d108      	bne.n	8005b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d118      	bne.n	8005b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <prvInsertBlockIntoFreeList+0xb0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d00d      	beq.n	8005b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e008      	b.n	8005b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <prvInsertBlockIntoFreeList+0xb0>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d002      	beq.n	8005b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20001b74 	.word	0x20001b74
 8005b74:	20001b7c 	.word	0x20001b7c

08005b78 <__cvt>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	ec57 6b10 	vmov	r6, r7, d0
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4619      	mov	r1, r3
 8005b86:	463b      	mov	r3, r7
 8005b88:	bfbb      	ittet	lt
 8005b8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b8e:	461f      	movlt	r7, r3
 8005b90:	2300      	movge	r3, #0
 8005b92:	232d      	movlt	r3, #45	@ 0x2d
 8005b94:	700b      	strb	r3, [r1, #0]
 8005b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b9c:	4691      	mov	r9, r2
 8005b9e:	f023 0820 	bic.w	r8, r3, #32
 8005ba2:	bfbc      	itt	lt
 8005ba4:	4632      	movlt	r2, r6
 8005ba6:	4616      	movlt	r6, r2
 8005ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bac:	d005      	beq.n	8005bba <__cvt+0x42>
 8005bae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bb2:	d100      	bne.n	8005bb6 <__cvt+0x3e>
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	e000      	b.n	8005bbc <__cvt+0x44>
 8005bba:	2103      	movs	r1, #3
 8005bbc:	ab03      	add	r3, sp, #12
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	ab02      	add	r3, sp, #8
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	ec47 6b10 	vmov	d0, r6, r7
 8005bc8:	4653      	mov	r3, sl
 8005bca:	4622      	mov	r2, r4
 8005bcc:	f001 f87c 	bl	8006cc8 <_dtoa_r>
 8005bd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	d119      	bne.n	8005c0c <__cvt+0x94>
 8005bd8:	f019 0f01 	tst.w	r9, #1
 8005bdc:	d00e      	beq.n	8005bfc <__cvt+0x84>
 8005bde:	eb00 0904 	add.w	r9, r0, r4
 8005be2:	2200      	movs	r2, #0
 8005be4:	2300      	movs	r3, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bee:	b108      	cbz	r0, 8005bf4 <__cvt+0x7c>
 8005bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf4:	2230      	movs	r2, #48	@ 0x30
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	454b      	cmp	r3, r9
 8005bfa:	d31e      	bcc.n	8005c3a <__cvt+0xc2>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c00:	1b5b      	subs	r3, r3, r5
 8005c02:	4628      	mov	r0, r5
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	b004      	add	sp, #16
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c10:	eb00 0904 	add.w	r9, r0, r4
 8005c14:	d1e5      	bne.n	8005be2 <__cvt+0x6a>
 8005c16:	7803      	ldrb	r3, [r0, #0]
 8005c18:	2b30      	cmp	r3, #48	@ 0x30
 8005c1a:	d10a      	bne.n	8005c32 <__cvt+0xba>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c28:	b918      	cbnz	r0, 8005c32 <__cvt+0xba>
 8005c2a:	f1c4 0401 	rsb	r4, r4, #1
 8005c2e:	f8ca 4000 	str.w	r4, [sl]
 8005c32:	f8da 3000 	ldr.w	r3, [sl]
 8005c36:	4499      	add	r9, r3
 8005c38:	e7d3      	b.n	8005be2 <__cvt+0x6a>
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	9103      	str	r1, [sp, #12]
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e7d9      	b.n	8005bf6 <__cvt+0x7e>

08005c42 <__exponent>:
 8005c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c44:	2900      	cmp	r1, #0
 8005c46:	bfba      	itte	lt
 8005c48:	4249      	neglt	r1, r1
 8005c4a:	232d      	movlt	r3, #45	@ 0x2d
 8005c4c:	232b      	movge	r3, #43	@ 0x2b
 8005c4e:	2909      	cmp	r1, #9
 8005c50:	7002      	strb	r2, [r0, #0]
 8005c52:	7043      	strb	r3, [r0, #1]
 8005c54:	dd29      	ble.n	8005caa <__exponent+0x68>
 8005c56:	f10d 0307 	add.w	r3, sp, #7
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	270a      	movs	r7, #10
 8005c5e:	461a      	mov	r2, r3
 8005c60:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c64:	fb07 1416 	mls	r4, r7, r6, r1
 8005c68:	3430      	adds	r4, #48	@ 0x30
 8005c6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c6e:	460c      	mov	r4, r1
 8005c70:	2c63      	cmp	r4, #99	@ 0x63
 8005c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c76:	4631      	mov	r1, r6
 8005c78:	dcf1      	bgt.n	8005c5e <__exponent+0x1c>
 8005c7a:	3130      	adds	r1, #48	@ 0x30
 8005c7c:	1e94      	subs	r4, r2, #2
 8005c7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c82:	1c41      	adds	r1, r0, #1
 8005c84:	4623      	mov	r3, r4
 8005c86:	42ab      	cmp	r3, r5
 8005c88:	d30a      	bcc.n	8005ca0 <__exponent+0x5e>
 8005c8a:	f10d 0309 	add.w	r3, sp, #9
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	42ac      	cmp	r4, r5
 8005c92:	bf88      	it	hi
 8005c94:	2300      	movhi	r3, #0
 8005c96:	3302      	adds	r3, #2
 8005c98:	4403      	add	r3, r0
 8005c9a:	1a18      	subs	r0, r3, r0
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ca4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ca8:	e7ed      	b.n	8005c86 <__exponent+0x44>
 8005caa:	2330      	movs	r3, #48	@ 0x30
 8005cac:	3130      	adds	r1, #48	@ 0x30
 8005cae:	7083      	strb	r3, [r0, #2]
 8005cb0:	70c1      	strb	r1, [r0, #3]
 8005cb2:	1d03      	adds	r3, r0, #4
 8005cb4:	e7f1      	b.n	8005c9a <__exponent+0x58>
	...

08005cb8 <_printf_float>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	b08d      	sub	sp, #52	@ 0x34
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	461f      	mov	r7, r3
 8005cc8:	4605      	mov	r5, r0
 8005cca:	f000 fee9 	bl	8006aa0 <_localeconv_r>
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fa facc 	bl	8000270 <strlen>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce0:	9005      	str	r0, [sp, #20]
 8005ce2:	3307      	adds	r3, #7
 8005ce4:	f023 0307 	bic.w	r3, r3, #7
 8005ce8:	f103 0208 	add.w	r2, r3, #8
 8005cec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf0:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf4:	f8c8 2000 	str.w	r2, [r8]
 8005cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8005f80 <_printf_float+0x2c8>)
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	f7fa ff0a 	bl	8000b2c <__aeabi_dcmpun>
 8005d18:	bb70      	cbnz	r0, 8005d78 <_printf_float+0xc0>
 8005d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d1e:	4b98      	ldr	r3, [pc, #608]	@ (8005f80 <_printf_float+0x2c8>)
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	f7fa fee4 	bl	8000af0 <__aeabi_dcmple>
 8005d28:	bb30      	cbnz	r0, 8005d78 <_printf_float+0xc0>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fed3 	bl	8000adc <__aeabi_dcmplt>
 8005d36:	b110      	cbz	r0, 8005d3e <_printf_float+0x86>
 8005d38:	232d      	movs	r3, #45	@ 0x2d
 8005d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d3e:	4a91      	ldr	r2, [pc, #580]	@ (8005f84 <_printf_float+0x2cc>)
 8005d40:	4b91      	ldr	r3, [pc, #580]	@ (8005f88 <_printf_float+0x2d0>)
 8005d42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d46:	bf8c      	ite	hi
 8005d48:	4690      	movhi	r8, r2
 8005d4a:	4698      	movls	r8, r3
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f02b 0304 	bic.w	r3, fp, #4
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	f04f 0900 	mov.w	r9, #0
 8005d5a:	9700      	str	r7, [sp, #0]
 8005d5c:	4633      	mov	r3, r6
 8005d5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f9d2 	bl	800610c <_printf_common>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f040 808d 	bne.w	8005e88 <_printf_float+0x1d0>
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	b00d      	add	sp, #52	@ 0x34
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa fed4 	bl	8000b2c <__aeabi_dcmpun>
 8005d84:	b140      	cbz	r0, 8005d98 <_printf_float+0xe0>
 8005d86:	464b      	mov	r3, r9
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbc      	itt	lt
 8005d8c:	232d      	movlt	r3, #45	@ 0x2d
 8005d8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d92:	4a7e      	ldr	r2, [pc, #504]	@ (8005f8c <_printf_float+0x2d4>)
 8005d94:	4b7e      	ldr	r3, [pc, #504]	@ (8005f90 <_printf_float+0x2d8>)
 8005d96:	e7d4      	b.n	8005d42 <_printf_float+0x8a>
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d9e:	9206      	str	r2, [sp, #24]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	d13b      	bne.n	8005e1c <_printf_float+0x164>
 8005da4:	2306      	movs	r3, #6
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005dac:	2300      	movs	r3, #0
 8005dae:	6022      	str	r2, [r4, #0]
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005db4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005db8:	ab09      	add	r3, sp, #36	@ 0x24
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	ec49 8b10 	vmov	d0, r8, r9
 8005dc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff fed6 	bl	8005b78 <__cvt>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd0:	2b47      	cmp	r3, #71	@ 0x47
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	d129      	bne.n	8005e2a <_printf_float+0x172>
 8005dd6:	1cc8      	adds	r0, r1, #3
 8005dd8:	db02      	blt.n	8005de0 <_printf_float+0x128>
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	dd41      	ble.n	8005e64 <_printf_float+0x1ac>
 8005de0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005de4:	fa5f fa8a 	uxtb.w	sl, sl
 8005de8:	3901      	subs	r1, #1
 8005dea:	4652      	mov	r2, sl
 8005dec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005df0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005df2:	f7ff ff26 	bl	8005c42 <__exponent>
 8005df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005df8:	1813      	adds	r3, r2, r0
 8005dfa:	2a01      	cmp	r2, #1
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	6123      	str	r3, [r4, #16]
 8005e00:	dc02      	bgt.n	8005e08 <_printf_float+0x150>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	07d2      	lsls	r2, r2, #31
 8005e06:	d501      	bpl.n	8005e0c <_printf_float+0x154>
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0a2      	beq.n	8005d5a <_printf_float+0xa2>
 8005e14:	232d      	movs	r3, #45	@ 0x2d
 8005e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e1a:	e79e      	b.n	8005d5a <_printf_float+0xa2>
 8005e1c:	9a06      	ldr	r2, [sp, #24]
 8005e1e:	2a47      	cmp	r2, #71	@ 0x47
 8005e20:	d1c2      	bne.n	8005da8 <_printf_float+0xf0>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1c0      	bne.n	8005da8 <_printf_float+0xf0>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7bd      	b.n	8005da6 <_printf_float+0xee>
 8005e2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e2e:	d9db      	bls.n	8005de8 <_printf_float+0x130>
 8005e30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e34:	d118      	bne.n	8005e68 <_printf_float+0x1b0>
 8005e36:	2900      	cmp	r1, #0
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	dd0b      	ble.n	8005e54 <_printf_float+0x19c>
 8005e3c:	6121      	str	r1, [r4, #16]
 8005e3e:	b913      	cbnz	r3, 8005e46 <_printf_float+0x18e>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	07d0      	lsls	r0, r2, #31
 8005e44:	d502      	bpl.n	8005e4c <_printf_float+0x194>
 8005e46:	3301      	adds	r3, #1
 8005e48:	440b      	add	r3, r1
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e4e:	f04f 0900 	mov.w	r9, #0
 8005e52:	e7db      	b.n	8005e0c <_printf_float+0x154>
 8005e54:	b913      	cbnz	r3, 8005e5c <_printf_float+0x1a4>
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	07d2      	lsls	r2, r2, #31
 8005e5a:	d501      	bpl.n	8005e60 <_printf_float+0x1a8>
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	e7f4      	b.n	8005e4a <_printf_float+0x192>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e7f2      	b.n	8005e4a <_printf_float+0x192>
 8005e64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	db05      	blt.n	8005e7a <_printf_float+0x1c2>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	6121      	str	r1, [r4, #16]
 8005e72:	07d8      	lsls	r0, r3, #31
 8005e74:	d5ea      	bpl.n	8005e4c <_printf_float+0x194>
 8005e76:	1c4b      	adds	r3, r1, #1
 8005e78:	e7e7      	b.n	8005e4a <_printf_float+0x192>
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	bfd4      	ite	le
 8005e7e:	f1c1 0202 	rsble	r2, r1, #2
 8005e82:	2201      	movgt	r2, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	e7e0      	b.n	8005e4a <_printf_float+0x192>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	055a      	lsls	r2, r3, #21
 8005e8c:	d407      	bmi.n	8005e9e <_printf_float+0x1e6>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	4642      	mov	r2, r8
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d12b      	bne.n	8005ef4 <_printf_float+0x23c>
 8005e9c:	e767      	b.n	8005d6e <_printf_float+0xb6>
 8005e9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ea2:	f240 80dd 	bls.w	8006060 <_printf_float+0x3a8>
 8005ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f7fa fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d033      	beq.n	8005f1e <_printf_float+0x266>
 8005eb6:	4a37      	ldr	r2, [pc, #220]	@ (8005f94 <_printf_float+0x2dc>)
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f af54 	beq.w	8005d6e <_printf_float+0xb6>
 8005ec6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005eca:	4543      	cmp	r3, r8
 8005ecc:	db02      	blt.n	8005ed4 <_printf_float+0x21c>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07d8      	lsls	r0, r3, #31
 8005ed2:	d50f      	bpl.n	8005ef4 <_printf_float+0x23c>
 8005ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af45 	beq.w	8005d6e <_printf_float+0xb6>
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eec:	f104 0a1a 	add.w	sl, r4, #26
 8005ef0:	45c8      	cmp	r8, r9
 8005ef2:	dc09      	bgt.n	8005f08 <_printf_float+0x250>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	f100 8103 	bmi.w	8006102 <_printf_float+0x44a>
 8005efc:	68e0      	ldr	r0, [r4, #12]
 8005efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f00:	4298      	cmp	r0, r3
 8005f02:	bfb8      	it	lt
 8005f04:	4618      	movlt	r0, r3
 8005f06:	e734      	b.n	8005d72 <_printf_float+0xba>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af2b 	beq.w	8005d6e <_printf_float+0xb6>
 8005f18:	f109 0901 	add.w	r9, r9, #1
 8005f1c:	e7e8      	b.n	8005ef0 <_printf_float+0x238>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc39      	bgt.n	8005f98 <_printf_float+0x2e0>
 8005f24:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <_printf_float+0x2dc>)
 8005f26:	2301      	movs	r3, #1
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f43f af1d 	beq.w	8005d6e <_printf_float+0xb6>
 8005f34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f38:	ea59 0303 	orrs.w	r3, r9, r3
 8005f3c:	d102      	bne.n	8005f44 <_printf_float+0x28c>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07d9      	lsls	r1, r3, #31
 8005f42:	d5d7      	bpl.n	8005ef4 <_printf_float+0x23c>
 8005f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af0d 	beq.w	8005d6e <_printf_float+0xb6>
 8005f54:	f04f 0a00 	mov.w	sl, #0
 8005f58:	f104 0b1a 	add.w	fp, r4, #26
 8005f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5e:	425b      	negs	r3, r3
 8005f60:	4553      	cmp	r3, sl
 8005f62:	dc01      	bgt.n	8005f68 <_printf_float+0x2b0>
 8005f64:	464b      	mov	r3, r9
 8005f66:	e793      	b.n	8005e90 <_printf_float+0x1d8>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	465a      	mov	r2, fp
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f aefb 	beq.w	8005d6e <_printf_float+0xb6>
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	e7ee      	b.n	8005f5c <_printf_float+0x2a4>
 8005f7e:	bf00      	nop
 8005f80:	7fefffff 	.word	0x7fefffff
 8005f84:	0800a6f0 	.word	0x0800a6f0
 8005f88:	0800a6ec 	.word	0x0800a6ec
 8005f8c:	0800a6f8 	.word	0x0800a6f8
 8005f90:	0800a6f4 	.word	0x0800a6f4
 8005f94:	0800a6fc 	.word	0x0800a6fc
 8005f98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f9e:	4553      	cmp	r3, sl
 8005fa0:	bfa8      	it	ge
 8005fa2:	4653      	movge	r3, sl
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	dc36      	bgt.n	8006018 <_printf_float+0x360>
 8005faa:	f04f 0b00 	mov.w	fp, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 021a 	add.w	r2, r4, #26
 8005fb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fb8:	9306      	str	r3, [sp, #24]
 8005fba:	eba3 0309 	sub.w	r3, r3, r9
 8005fbe:	455b      	cmp	r3, fp
 8005fc0:	dc31      	bgt.n	8006026 <_printf_float+0x36e>
 8005fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc4:	459a      	cmp	sl, r3
 8005fc6:	dc3a      	bgt.n	800603e <_printf_float+0x386>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d437      	bmi.n	800603e <_printf_float+0x386>
 8005fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd0:	ebaa 0903 	sub.w	r9, sl, r3
 8005fd4:	9b06      	ldr	r3, [sp, #24]
 8005fd6:	ebaa 0303 	sub.w	r3, sl, r3
 8005fda:	4599      	cmp	r9, r3
 8005fdc:	bfa8      	it	ge
 8005fde:	4699      	movge	r9, r3
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	dc33      	bgt.n	800604e <_printf_float+0x396>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fee:	f104 0b1a 	add.w	fp, r4, #26
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ff8:	eba3 0309 	sub.w	r3, r3, r9
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	f77f af79 	ble.w	8005ef4 <_printf_float+0x23c>
 8006002:	2301      	movs	r3, #1
 8006004:	465a      	mov	r2, fp
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f aeae 	beq.w	8005d6e <_printf_float+0xb6>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e7ec      	b.n	8005ff2 <_printf_float+0x33a>
 8006018:	4642      	mov	r2, r8
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	d1c2      	bne.n	8005faa <_printf_float+0x2f2>
 8006024:	e6a3      	b.n	8005d6e <_printf_float+0xb6>
 8006026:	2301      	movs	r3, #1
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	9206      	str	r2, [sp, #24]
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae9c 	beq.w	8005d6e <_printf_float+0xb6>
 8006036:	9a06      	ldr	r2, [sp, #24]
 8006038:	f10b 0b01 	add.w	fp, fp, #1
 800603c:	e7bb      	b.n	8005fb6 <_printf_float+0x2fe>
 800603e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	d1c0      	bne.n	8005fce <_printf_float+0x316>
 800604c:	e68f      	b.n	8005d6e <_printf_float+0xb6>
 800604e:	9a06      	ldr	r2, [sp, #24]
 8006050:	464b      	mov	r3, r9
 8006052:	4442      	add	r2, r8
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	d1c3      	bne.n	8005fe6 <_printf_float+0x32e>
 800605e:	e686      	b.n	8005d6e <_printf_float+0xb6>
 8006060:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006064:	f1ba 0f01 	cmp.w	sl, #1
 8006068:	dc01      	bgt.n	800606e <_printf_float+0x3b6>
 800606a:	07db      	lsls	r3, r3, #31
 800606c:	d536      	bpl.n	80060dc <_printf_float+0x424>
 800606e:	2301      	movs	r3, #1
 8006070:	4642      	mov	r2, r8
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae78 	beq.w	8005d6e <_printf_float+0xb6>
 800607e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae70 	beq.w	8005d6e <_printf_float+0xb6>
 800608e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609a:	f7fa fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800609e:	b9c0      	cbnz	r0, 80060d2 <_printf_float+0x41a>
 80060a0:	4653      	mov	r3, sl
 80060a2:	f108 0201 	add.w	r2, r8, #1
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d10c      	bne.n	80060ca <_printf_float+0x412>
 80060b0:	e65d      	b.n	8005d6e <_printf_float+0xb6>
 80060b2:	2301      	movs	r3, #1
 80060b4:	465a      	mov	r2, fp
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae56 	beq.w	8005d6e <_printf_float+0xb6>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	45d0      	cmp	r8, sl
 80060c8:	dbf3      	blt.n	80060b2 <_printf_float+0x3fa>
 80060ca:	464b      	mov	r3, r9
 80060cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060d0:	e6df      	b.n	8005e92 <_printf_float+0x1da>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	f104 0b1a 	add.w	fp, r4, #26
 80060da:	e7f4      	b.n	80060c6 <_printf_float+0x40e>
 80060dc:	2301      	movs	r3, #1
 80060de:	4642      	mov	r2, r8
 80060e0:	e7e1      	b.n	80060a6 <_printf_float+0x3ee>
 80060e2:	2301      	movs	r3, #1
 80060e4:	464a      	mov	r2, r9
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae3e 	beq.w	8005d6e <_printf_float+0xb6>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fa:	1a5b      	subs	r3, r3, r1
 80060fc:	4543      	cmp	r3, r8
 80060fe:	dcf0      	bgt.n	80060e2 <_printf_float+0x42a>
 8006100:	e6fc      	b.n	8005efc <_printf_float+0x244>
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	f104 0919 	add.w	r9, r4, #25
 800610a:	e7f4      	b.n	80060f6 <_printf_float+0x43e>

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4616      	mov	r6, r2
 8006112:	4698      	mov	r8, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800611c:	4293      	cmp	r3, r2
 800611e:	bfb8      	it	lt
 8006120:	4613      	movlt	r3, r2
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006128:	4607      	mov	r7, r0
 800612a:	460c      	mov	r4, r1
 800612c:	b10a      	cbz	r2, 8006132 <_printf_common+0x26>
 800612e:	3301      	adds	r3, #1
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	0699      	lsls	r1, r3, #26
 8006136:	bf42      	ittt	mi
 8006138:	6833      	ldrmi	r3, [r6, #0]
 800613a:	3302      	addmi	r3, #2
 800613c:	6033      	strmi	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	f015 0506 	ands.w	r5, r5, #6
 8006144:	d106      	bne.n	8006154 <_printf_common+0x48>
 8006146:	f104 0a19 	add.w	sl, r4, #25
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	6832      	ldr	r2, [r6, #0]
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	42ab      	cmp	r3, r5
 8006152:	dc26      	bgt.n	80061a2 <_printf_common+0x96>
 8006154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	3b00      	subs	r3, #0
 800615c:	bf18      	it	ne
 800615e:	2301      	movne	r3, #1
 8006160:	0692      	lsls	r2, r2, #26
 8006162:	d42b      	bmi.n	80061bc <_printf_common+0xb0>
 8006164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006168:	4641      	mov	r1, r8
 800616a:	4638      	mov	r0, r7
 800616c:	47c8      	blx	r9
 800616e:	3001      	adds	r0, #1
 8006170:	d01e      	beq.n	80061b0 <_printf_common+0xa4>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	f003 0306 	and.w	r3, r3, #6
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf02      	ittt	eq
 800617e:	68e5      	ldreq	r5, [r4, #12]
 8006180:	6833      	ldreq	r3, [r6, #0]
 8006182:	1aed      	subeq	r5, r5, r3
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	bf0c      	ite	eq
 8006188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800618c:	2500      	movne	r5, #0
 800618e:	4293      	cmp	r3, r2
 8006190:	bfc4      	itt	gt
 8006192:	1a9b      	subgt	r3, r3, r2
 8006194:	18ed      	addgt	r5, r5, r3
 8006196:	2600      	movs	r6, #0
 8006198:	341a      	adds	r4, #26
 800619a:	42b5      	cmp	r5, r6
 800619c:	d11a      	bne.n	80061d4 <_printf_common+0xc8>
 800619e:	2000      	movs	r0, #0
 80061a0:	e008      	b.n	80061b4 <_printf_common+0xa8>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4652      	mov	r2, sl
 80061a6:	4641      	mov	r1, r8
 80061a8:	4638      	mov	r0, r7
 80061aa:	47c8      	blx	r9
 80061ac:	3001      	adds	r0, #1
 80061ae:	d103      	bne.n	80061b8 <_printf_common+0xac>
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	3501      	adds	r5, #1
 80061ba:	e7c6      	b.n	800614a <_printf_common+0x3e>
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	2030      	movs	r0, #48	@ 0x30
 80061c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061c6:	4422      	add	r2, r4
 80061c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d0:	3302      	adds	r3, #2
 80061d2:	e7c7      	b.n	8006164 <_printf_common+0x58>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4622      	mov	r2, r4
 80061d8:	4641      	mov	r1, r8
 80061da:	4638      	mov	r0, r7
 80061dc:	47c8      	blx	r9
 80061de:	3001      	adds	r0, #1
 80061e0:	d0e6      	beq.n	80061b0 <_printf_common+0xa4>
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7d9      	b.n	800619a <_printf_common+0x8e>
	...

080061e8 <_printf_i>:
 80061e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	7e0f      	ldrb	r7, [r1, #24]
 80061ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f0:	2f78      	cmp	r7, #120	@ 0x78
 80061f2:	4691      	mov	r9, r2
 80061f4:	4680      	mov	r8, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	469a      	mov	sl, r3
 80061fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061fe:	d807      	bhi.n	8006210 <_printf_i+0x28>
 8006200:	2f62      	cmp	r7, #98	@ 0x62
 8006202:	d80a      	bhi.n	800621a <_printf_i+0x32>
 8006204:	2f00      	cmp	r7, #0
 8006206:	f000 80d1 	beq.w	80063ac <_printf_i+0x1c4>
 800620a:	2f58      	cmp	r7, #88	@ 0x58
 800620c:	f000 80b8 	beq.w	8006380 <_printf_i+0x198>
 8006210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006218:	e03a      	b.n	8006290 <_printf_i+0xa8>
 800621a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800621e:	2b15      	cmp	r3, #21
 8006220:	d8f6      	bhi.n	8006210 <_printf_i+0x28>
 8006222:	a101      	add	r1, pc, #4	@ (adr r1, 8006228 <_printf_i+0x40>)
 8006224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006228:	08006281 	.word	0x08006281
 800622c:	08006295 	.word	0x08006295
 8006230:	08006211 	.word	0x08006211
 8006234:	08006211 	.word	0x08006211
 8006238:	08006211 	.word	0x08006211
 800623c:	08006211 	.word	0x08006211
 8006240:	08006295 	.word	0x08006295
 8006244:	08006211 	.word	0x08006211
 8006248:	08006211 	.word	0x08006211
 800624c:	08006211 	.word	0x08006211
 8006250:	08006211 	.word	0x08006211
 8006254:	08006393 	.word	0x08006393
 8006258:	080062bf 	.word	0x080062bf
 800625c:	0800634d 	.word	0x0800634d
 8006260:	08006211 	.word	0x08006211
 8006264:	08006211 	.word	0x08006211
 8006268:	080063b5 	.word	0x080063b5
 800626c:	08006211 	.word	0x08006211
 8006270:	080062bf 	.word	0x080062bf
 8006274:	08006211 	.word	0x08006211
 8006278:	08006211 	.word	0x08006211
 800627c:	08006355 	.word	0x08006355
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6032      	str	r2, [r6, #0]
 8006288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800628c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006290:	2301      	movs	r3, #1
 8006292:	e09c      	b.n	80063ce <_printf_i+0x1e6>
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	0606      	lsls	r6, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xbc>
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	e003      	b.n	80062ac <_printf_i+0xc4>
 80062a4:	0645      	lsls	r5, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xb8>
 80062a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	da03      	bge.n	80062b8 <_printf_i+0xd0>
 80062b0:	232d      	movs	r3, #45	@ 0x2d
 80062b2:	426d      	negs	r5, r5
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b8:	4858      	ldr	r0, [pc, #352]	@ (800641c <_printf_i+0x234>)
 80062ba:	230a      	movs	r3, #10
 80062bc:	e011      	b.n	80062e2 <_printf_i+0xfa>
 80062be:	6821      	ldr	r1, [r4, #0]
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	0608      	lsls	r0, r1, #24
 80062c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c8:	d402      	bmi.n	80062d0 <_printf_i+0xe8>
 80062ca:	0649      	lsls	r1, r1, #25
 80062cc:	bf48      	it	mi
 80062ce:	b2ad      	uxthmi	r5, r5
 80062d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80062d2:	4852      	ldr	r0, [pc, #328]	@ (800641c <_printf_i+0x234>)
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	bf14      	ite	ne
 80062d8:	230a      	movne	r3, #10
 80062da:	2308      	moveq	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062e2:	6866      	ldr	r6, [r4, #4]
 80062e4:	60a6      	str	r6, [r4, #8]
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	db05      	blt.n	80062f6 <_printf_i+0x10e>
 80062ea:	6821      	ldr	r1, [r4, #0]
 80062ec:	432e      	orrs	r6, r5
 80062ee:	f021 0104 	bic.w	r1, r1, #4
 80062f2:	6021      	str	r1, [r4, #0]
 80062f4:	d04b      	beq.n	800638e <_printf_i+0x1a6>
 80062f6:	4616      	mov	r6, r2
 80062f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062fc:	fb03 5711 	mls	r7, r3, r1, r5
 8006300:	5dc7      	ldrb	r7, [r0, r7]
 8006302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006306:	462f      	mov	r7, r5
 8006308:	42bb      	cmp	r3, r7
 800630a:	460d      	mov	r5, r1
 800630c:	d9f4      	bls.n	80062f8 <_printf_i+0x110>
 800630e:	2b08      	cmp	r3, #8
 8006310:	d10b      	bne.n	800632a <_printf_i+0x142>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07df      	lsls	r7, r3, #31
 8006316:	d508      	bpl.n	800632a <_printf_i+0x142>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	6861      	ldr	r1, [r4, #4]
 800631c:	4299      	cmp	r1, r3
 800631e:	bfde      	ittt	le
 8006320:	2330      	movle	r3, #48	@ 0x30
 8006322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800632a:	1b92      	subs	r2, r2, r6
 800632c:	6122      	str	r2, [r4, #16]
 800632e:	f8cd a000 	str.w	sl, [sp]
 8006332:	464b      	mov	r3, r9
 8006334:	aa03      	add	r2, sp, #12
 8006336:	4621      	mov	r1, r4
 8006338:	4640      	mov	r0, r8
 800633a:	f7ff fee7 	bl	800610c <_printf_common>
 800633e:	3001      	adds	r0, #1
 8006340:	d14a      	bne.n	80063d8 <_printf_i+0x1f0>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295
 8006346:	b004      	add	sp, #16
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	f043 0320 	orr.w	r3, r3, #32
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	4832      	ldr	r0, [pc, #200]	@ (8006420 <_printf_i+0x238>)
 8006356:	2778      	movs	r7, #120	@ 0x78
 8006358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	6831      	ldr	r1, [r6, #0]
 8006360:	061f      	lsls	r7, r3, #24
 8006362:	f851 5b04 	ldr.w	r5, [r1], #4
 8006366:	d402      	bmi.n	800636e <_printf_i+0x186>
 8006368:	065f      	lsls	r7, r3, #25
 800636a:	bf48      	it	mi
 800636c:	b2ad      	uxthmi	r5, r5
 800636e:	6031      	str	r1, [r6, #0]
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	bf44      	itt	mi
 8006374:	f043 0320 	orrmi.w	r3, r3, #32
 8006378:	6023      	strmi	r3, [r4, #0]
 800637a:	b11d      	cbz	r5, 8006384 <_printf_i+0x19c>
 800637c:	2310      	movs	r3, #16
 800637e:	e7ad      	b.n	80062dc <_printf_i+0xf4>
 8006380:	4826      	ldr	r0, [pc, #152]	@ (800641c <_printf_i+0x234>)
 8006382:	e7e9      	b.n	8006358 <_printf_i+0x170>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	f023 0320 	bic.w	r3, r3, #32
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	e7f6      	b.n	800637c <_printf_i+0x194>
 800638e:	4616      	mov	r6, r2
 8006390:	e7bd      	b.n	800630e <_printf_i+0x126>
 8006392:	6833      	ldr	r3, [r6, #0]
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	6961      	ldr	r1, [r4, #20]
 8006398:	1d18      	adds	r0, r3, #4
 800639a:	6030      	str	r0, [r6, #0]
 800639c:	062e      	lsls	r6, r5, #24
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	d501      	bpl.n	80063a6 <_printf_i+0x1be>
 80063a2:	6019      	str	r1, [r3, #0]
 80063a4:	e002      	b.n	80063ac <_printf_i+0x1c4>
 80063a6:	0668      	lsls	r0, r5, #25
 80063a8:	d5fb      	bpl.n	80063a2 <_printf_i+0x1ba>
 80063aa:	8019      	strh	r1, [r3, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	4616      	mov	r6, r2
 80063b2:	e7bc      	b.n	800632e <_printf_i+0x146>
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	1d1a      	adds	r2, r3, #4
 80063b8:	6032      	str	r2, [r6, #0]
 80063ba:	681e      	ldr	r6, [r3, #0]
 80063bc:	6862      	ldr	r2, [r4, #4]
 80063be:	2100      	movs	r1, #0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7f9 ff05 	bl	80001d0 <memchr>
 80063c6:	b108      	cbz	r0, 80063cc <_printf_i+0x1e4>
 80063c8:	1b80      	subs	r0, r0, r6
 80063ca:	6060      	str	r0, [r4, #4]
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	2300      	movs	r3, #0
 80063d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d6:	e7aa      	b.n	800632e <_printf_i+0x146>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	4632      	mov	r2, r6
 80063dc:	4649      	mov	r1, r9
 80063de:	4640      	mov	r0, r8
 80063e0:	47d0      	blx	sl
 80063e2:	3001      	adds	r0, #1
 80063e4:	d0ad      	beq.n	8006342 <_printf_i+0x15a>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	079b      	lsls	r3, r3, #30
 80063ea:	d413      	bmi.n	8006414 <_printf_i+0x22c>
 80063ec:	68e0      	ldr	r0, [r4, #12]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	4298      	cmp	r0, r3
 80063f2:	bfb8      	it	lt
 80063f4:	4618      	movlt	r0, r3
 80063f6:	e7a6      	b.n	8006346 <_printf_i+0x15e>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4632      	mov	r2, r6
 80063fc:	4649      	mov	r1, r9
 80063fe:	4640      	mov	r0, r8
 8006400:	47d0      	blx	sl
 8006402:	3001      	adds	r0, #1
 8006404:	d09d      	beq.n	8006342 <_printf_i+0x15a>
 8006406:	3501      	adds	r5, #1
 8006408:	68e3      	ldr	r3, [r4, #12]
 800640a:	9903      	ldr	r1, [sp, #12]
 800640c:	1a5b      	subs	r3, r3, r1
 800640e:	42ab      	cmp	r3, r5
 8006410:	dcf2      	bgt.n	80063f8 <_printf_i+0x210>
 8006412:	e7eb      	b.n	80063ec <_printf_i+0x204>
 8006414:	2500      	movs	r5, #0
 8006416:	f104 0619 	add.w	r6, r4, #25
 800641a:	e7f5      	b.n	8006408 <_printf_i+0x220>
 800641c:	0800a6fe 	.word	0x0800a6fe
 8006420:	0800a70f 	.word	0x0800a70f

08006424 <_scanf_float>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	b087      	sub	sp, #28
 800642a:	4691      	mov	r9, r2
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	688b      	ldr	r3, [r1, #8]
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006436:	bf81      	itttt	hi
 8006438:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800643c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006440:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006444:	608b      	strhi	r3, [r1, #8]
 8006446:	680b      	ldr	r3, [r1, #0]
 8006448:	460a      	mov	r2, r1
 800644a:	f04f 0500 	mov.w	r5, #0
 800644e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006452:	f842 3b1c 	str.w	r3, [r2], #28
 8006456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800645a:	4680      	mov	r8, r0
 800645c:	460c      	mov	r4, r1
 800645e:	bf98      	it	ls
 8006460:	f04f 0b00 	movls.w	fp, #0
 8006464:	9201      	str	r2, [sp, #4]
 8006466:	4616      	mov	r6, r2
 8006468:	46aa      	mov	sl, r5
 800646a:	462f      	mov	r7, r5
 800646c:	9502      	str	r5, [sp, #8]
 800646e:	68a2      	ldr	r2, [r4, #8]
 8006470:	b15a      	cbz	r2, 800648a <_scanf_float+0x66>
 8006472:	f8d9 3000 	ldr.w	r3, [r9]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b4e      	cmp	r3, #78	@ 0x4e
 800647a:	d863      	bhi.n	8006544 <_scanf_float+0x120>
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d83b      	bhi.n	80064f8 <_scanf_float+0xd4>
 8006480:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006484:	b2c8      	uxtb	r0, r1
 8006486:	280e      	cmp	r0, #14
 8006488:	d939      	bls.n	80064fe <_scanf_float+0xda>
 800648a:	b11f      	cbz	r7, 8006494 <_scanf_float+0x70>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006498:	f1ba 0f01 	cmp.w	sl, #1
 800649c:	f200 8114 	bhi.w	80066c8 <_scanf_float+0x2a4>
 80064a0:	9b01      	ldr	r3, [sp, #4]
 80064a2:	429e      	cmp	r6, r3
 80064a4:	f200 8105 	bhi.w	80066b2 <_scanf_float+0x28e>
 80064a8:	2001      	movs	r0, #1
 80064aa:	b007      	add	sp, #28
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80064b4:	2a0d      	cmp	r2, #13
 80064b6:	d8e8      	bhi.n	800648a <_scanf_float+0x66>
 80064b8:	a101      	add	r1, pc, #4	@ (adr r1, 80064c0 <_scanf_float+0x9c>)
 80064ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064be:	bf00      	nop
 80064c0:	08006609 	.word	0x08006609
 80064c4:	0800648b 	.word	0x0800648b
 80064c8:	0800648b 	.word	0x0800648b
 80064cc:	0800648b 	.word	0x0800648b
 80064d0:	08006665 	.word	0x08006665
 80064d4:	0800663f 	.word	0x0800663f
 80064d8:	0800648b 	.word	0x0800648b
 80064dc:	0800648b 	.word	0x0800648b
 80064e0:	08006617 	.word	0x08006617
 80064e4:	0800648b 	.word	0x0800648b
 80064e8:	0800648b 	.word	0x0800648b
 80064ec:	0800648b 	.word	0x0800648b
 80064f0:	0800648b 	.word	0x0800648b
 80064f4:	080065d3 	.word	0x080065d3
 80064f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064fc:	e7da      	b.n	80064b4 <_scanf_float+0x90>
 80064fe:	290e      	cmp	r1, #14
 8006500:	d8c3      	bhi.n	800648a <_scanf_float+0x66>
 8006502:	a001      	add	r0, pc, #4	@ (adr r0, 8006508 <_scanf_float+0xe4>)
 8006504:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006508:	080065c3 	.word	0x080065c3
 800650c:	0800648b 	.word	0x0800648b
 8006510:	080065c3 	.word	0x080065c3
 8006514:	08006653 	.word	0x08006653
 8006518:	0800648b 	.word	0x0800648b
 800651c:	08006565 	.word	0x08006565
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	2b6e      	cmp	r3, #110	@ 0x6e
 8006546:	d809      	bhi.n	800655c <_scanf_float+0x138>
 8006548:	2b60      	cmp	r3, #96	@ 0x60
 800654a:	d8b1      	bhi.n	80064b0 <_scanf_float+0x8c>
 800654c:	2b54      	cmp	r3, #84	@ 0x54
 800654e:	d07b      	beq.n	8006648 <_scanf_float+0x224>
 8006550:	2b59      	cmp	r3, #89	@ 0x59
 8006552:	d19a      	bne.n	800648a <_scanf_float+0x66>
 8006554:	2d07      	cmp	r5, #7
 8006556:	d198      	bne.n	800648a <_scanf_float+0x66>
 8006558:	2508      	movs	r5, #8
 800655a:	e02f      	b.n	80065bc <_scanf_float+0x198>
 800655c:	2b74      	cmp	r3, #116	@ 0x74
 800655e:	d073      	beq.n	8006648 <_scanf_float+0x224>
 8006560:	2b79      	cmp	r3, #121	@ 0x79
 8006562:	e7f6      	b.n	8006552 <_scanf_float+0x12e>
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	05c8      	lsls	r0, r1, #23
 8006568:	d51e      	bpl.n	80065a8 <_scanf_float+0x184>
 800656a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800656e:	6021      	str	r1, [r4, #0]
 8006570:	3701      	adds	r7, #1
 8006572:	f1bb 0f00 	cmp.w	fp, #0
 8006576:	d003      	beq.n	8006580 <_scanf_float+0x15c>
 8006578:	3201      	adds	r2, #1
 800657a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800657e:	60a2      	str	r2, [r4, #8]
 8006580:	68a3      	ldr	r3, [r4, #8]
 8006582:	3b01      	subs	r3, #1
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	3301      	adds	r3, #1
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006590:	3b01      	subs	r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	f8c9 3004 	str.w	r3, [r9, #4]
 8006598:	f340 8082 	ble.w	80066a0 <_scanf_float+0x27c>
 800659c:	f8d9 3000 	ldr.w	r3, [r9]
 80065a0:	3301      	adds	r3, #1
 80065a2:	f8c9 3000 	str.w	r3, [r9]
 80065a6:	e762      	b.n	800646e <_scanf_float+0x4a>
 80065a8:	eb1a 0105 	adds.w	r1, sl, r5
 80065ac:	f47f af6d 	bne.w	800648a <_scanf_float+0x66>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	460d      	mov	r5, r1
 80065ba:	468a      	mov	sl, r1
 80065bc:	f806 3b01 	strb.w	r3, [r6], #1
 80065c0:	e7de      	b.n	8006580 <_scanf_float+0x15c>
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	0610      	lsls	r0, r2, #24
 80065c6:	f57f af60 	bpl.w	800648a <_scanf_float+0x66>
 80065ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ce:	6022      	str	r2, [r4, #0]
 80065d0:	e7f4      	b.n	80065bc <_scanf_float+0x198>
 80065d2:	f1ba 0f00 	cmp.w	sl, #0
 80065d6:	d10c      	bne.n	80065f2 <_scanf_float+0x1ce>
 80065d8:	b977      	cbnz	r7, 80065f8 <_scanf_float+0x1d4>
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065e4:	d108      	bne.n	80065f8 <_scanf_float+0x1d4>
 80065e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	f04f 0a01 	mov.w	sl, #1
 80065f0:	e7e4      	b.n	80065bc <_scanf_float+0x198>
 80065f2:	f1ba 0f02 	cmp.w	sl, #2
 80065f6:	d050      	beq.n	800669a <_scanf_float+0x276>
 80065f8:	2d01      	cmp	r5, #1
 80065fa:	d002      	beq.n	8006602 <_scanf_float+0x1de>
 80065fc:	2d04      	cmp	r5, #4
 80065fe:	f47f af44 	bne.w	800648a <_scanf_float+0x66>
 8006602:	3501      	adds	r5, #1
 8006604:	b2ed      	uxtb	r5, r5
 8006606:	e7d9      	b.n	80065bc <_scanf_float+0x198>
 8006608:	f1ba 0f01 	cmp.w	sl, #1
 800660c:	f47f af3d 	bne.w	800648a <_scanf_float+0x66>
 8006610:	f04f 0a02 	mov.w	sl, #2
 8006614:	e7d2      	b.n	80065bc <_scanf_float+0x198>
 8006616:	b975      	cbnz	r5, 8006636 <_scanf_float+0x212>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f47f af37 	bne.w	800648c <_scanf_float+0x68>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006624:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006628:	f040 8103 	bne.w	8006832 <_scanf_float+0x40e>
 800662c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	2501      	movs	r5, #1
 8006634:	e7c2      	b.n	80065bc <_scanf_float+0x198>
 8006636:	2d03      	cmp	r5, #3
 8006638:	d0e3      	beq.n	8006602 <_scanf_float+0x1de>
 800663a:	2d05      	cmp	r5, #5
 800663c:	e7df      	b.n	80065fe <_scanf_float+0x1da>
 800663e:	2d02      	cmp	r5, #2
 8006640:	f47f af23 	bne.w	800648a <_scanf_float+0x66>
 8006644:	2503      	movs	r5, #3
 8006646:	e7b9      	b.n	80065bc <_scanf_float+0x198>
 8006648:	2d06      	cmp	r5, #6
 800664a:	f47f af1e 	bne.w	800648a <_scanf_float+0x66>
 800664e:	2507      	movs	r5, #7
 8006650:	e7b4      	b.n	80065bc <_scanf_float+0x198>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	0591      	lsls	r1, r2, #22
 8006656:	f57f af18 	bpl.w	800648a <_scanf_float+0x66>
 800665a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800665e:	6022      	str	r2, [r4, #0]
 8006660:	9702      	str	r7, [sp, #8]
 8006662:	e7ab      	b.n	80065bc <_scanf_float+0x198>
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800666a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800666e:	d005      	beq.n	800667c <_scanf_float+0x258>
 8006670:	0550      	lsls	r0, r2, #21
 8006672:	f57f af0a 	bpl.w	800648a <_scanf_float+0x66>
 8006676:	2f00      	cmp	r7, #0
 8006678:	f000 80db 	beq.w	8006832 <_scanf_float+0x40e>
 800667c:	0591      	lsls	r1, r2, #22
 800667e:	bf58      	it	pl
 8006680:	9902      	ldrpl	r1, [sp, #8]
 8006682:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006686:	bf58      	it	pl
 8006688:	1a79      	subpl	r1, r7, r1
 800668a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800668e:	bf58      	it	pl
 8006690:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	2700      	movs	r7, #0
 8006698:	e790      	b.n	80065bc <_scanf_float+0x198>
 800669a:	f04f 0a03 	mov.w	sl, #3
 800669e:	e78d      	b.n	80065bc <_scanf_float+0x198>
 80066a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80066a4:	4649      	mov	r1, r9
 80066a6:	4640      	mov	r0, r8
 80066a8:	4798      	blx	r3
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f43f aedf 	beq.w	800646e <_scanf_float+0x4a>
 80066b0:	e6eb      	b.n	800648a <_scanf_float+0x66>
 80066b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066ba:	464a      	mov	r2, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	4798      	blx	r3
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	6123      	str	r3, [r4, #16]
 80066c6:	e6eb      	b.n	80064a0 <_scanf_float+0x7c>
 80066c8:	1e6b      	subs	r3, r5, #1
 80066ca:	2b06      	cmp	r3, #6
 80066cc:	d824      	bhi.n	8006718 <_scanf_float+0x2f4>
 80066ce:	2d02      	cmp	r5, #2
 80066d0:	d836      	bhi.n	8006740 <_scanf_float+0x31c>
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	429e      	cmp	r6, r3
 80066d6:	f67f aee7 	bls.w	80064a8 <_scanf_float+0x84>
 80066da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066e2:	464a      	mov	r2, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	4798      	blx	r3
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	e7f0      	b.n	80066d2 <_scanf_float+0x2ae>
 80066f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066f8:	464a      	mov	r2, r9
 80066fa:	4640      	mov	r0, r8
 80066fc:	4798      	blx	r3
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	3b01      	subs	r3, #1
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006708:	fa5f fa8a 	uxtb.w	sl, sl
 800670c:	f1ba 0f02 	cmp.w	sl, #2
 8006710:	d1ee      	bne.n	80066f0 <_scanf_float+0x2cc>
 8006712:	3d03      	subs	r5, #3
 8006714:	b2ed      	uxtb	r5, r5
 8006716:	1b76      	subs	r6, r6, r5
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	05da      	lsls	r2, r3, #23
 800671c:	d530      	bpl.n	8006780 <_scanf_float+0x35c>
 800671e:	055b      	lsls	r3, r3, #21
 8006720:	d511      	bpl.n	8006746 <_scanf_float+0x322>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	429e      	cmp	r6, r3
 8006726:	f67f aebf 	bls.w	80064a8 <_scanf_float+0x84>
 800672a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800672e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006732:	464a      	mov	r2, r9
 8006734:	4640      	mov	r0, r8
 8006736:	4798      	blx	r3
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	3b01      	subs	r3, #1
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	e7f0      	b.n	8006722 <_scanf_float+0x2fe>
 8006740:	46aa      	mov	sl, r5
 8006742:	46b3      	mov	fp, r6
 8006744:	e7de      	b.n	8006704 <_scanf_float+0x2e0>
 8006746:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	2965      	cmp	r1, #101	@ 0x65
 800674e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006752:	f106 35ff 	add.w	r5, r6, #4294967295
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	d00c      	beq.n	8006774 <_scanf_float+0x350>
 800675a:	2945      	cmp	r1, #69	@ 0x45
 800675c:	d00a      	beq.n	8006774 <_scanf_float+0x350>
 800675e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006762:	464a      	mov	r2, r9
 8006764:	4640      	mov	r0, r8
 8006766:	4798      	blx	r3
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800676e:	3b01      	subs	r3, #1
 8006770:	1eb5      	subs	r5, r6, #2
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006778:	464a      	mov	r2, r9
 800677a:	4640      	mov	r0, r8
 800677c:	4798      	blx	r3
 800677e:	462e      	mov	r6, r5
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	f012 0210 	ands.w	r2, r2, #16
 8006786:	d001      	beq.n	800678c <_scanf_float+0x368>
 8006788:	2000      	movs	r0, #0
 800678a:	e68e      	b.n	80064aa <_scanf_float+0x86>
 800678c:	7032      	strb	r2, [r6, #0]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006798:	d125      	bne.n	80067e6 <_scanf_float+0x3c2>
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	429f      	cmp	r7, r3
 800679e:	d00a      	beq.n	80067b6 <_scanf_float+0x392>
 80067a0:	1bda      	subs	r2, r3, r7
 80067a2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80067a6:	429e      	cmp	r6, r3
 80067a8:	bf28      	it	cs
 80067aa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80067ae:	4922      	ldr	r1, [pc, #136]	@ (8006838 <_scanf_float+0x414>)
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 f907 	bl	80069c4 <siprintf>
 80067b6:	9901      	ldr	r1, [sp, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	4640      	mov	r0, r8
 80067bc:	f002 fc00 	bl	8008fc0 <_strtod_r>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f011 0f02 	tst.w	r1, #2
 80067ca:	ec57 6b10 	vmov	r6, r7, d0
 80067ce:	f103 0204 	add.w	r2, r3, #4
 80067d2:	d015      	beq.n	8006800 <_scanf_float+0x3dc>
 80067d4:	9903      	ldr	r1, [sp, #12]
 80067d6:	600a      	str	r2, [r1, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e9c3 6700 	strd	r6, r7, [r3]
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60e3      	str	r3, [r4, #12]
 80067e4:	e7d0      	b.n	8006788 <_scanf_float+0x364>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0e4      	beq.n	80067b6 <_scanf_float+0x392>
 80067ec:	9905      	ldr	r1, [sp, #20]
 80067ee:	230a      	movs	r3, #10
 80067f0:	3101      	adds	r1, #1
 80067f2:	4640      	mov	r0, r8
 80067f4:	f002 fc64 	bl	80090c0 <_strtol_r>
 80067f8:	9b04      	ldr	r3, [sp, #16]
 80067fa:	9e05      	ldr	r6, [sp, #20]
 80067fc:	1ac2      	subs	r2, r0, r3
 80067fe:	e7d0      	b.n	80067a2 <_scanf_float+0x37e>
 8006800:	f011 0f04 	tst.w	r1, #4
 8006804:	9903      	ldr	r1, [sp, #12]
 8006806:	600a      	str	r2, [r1, #0]
 8006808:	d1e6      	bne.n	80067d8 <_scanf_float+0x3b4>
 800680a:	681d      	ldr	r5, [r3, #0]
 800680c:	4632      	mov	r2, r6
 800680e:	463b      	mov	r3, r7
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7fa f98a 	bl	8000b2c <__aeabi_dcmpun>
 8006818:	b128      	cbz	r0, 8006826 <_scanf_float+0x402>
 800681a:	4808      	ldr	r0, [pc, #32]	@ (800683c <_scanf_float+0x418>)
 800681c:	f000 f9c6 	bl	8006bac <nanf>
 8006820:	ed85 0a00 	vstr	s0, [r5]
 8006824:	e7db      	b.n	80067de <_scanf_float+0x3ba>
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f9dd 	bl	8000be8 <__aeabi_d2f>
 800682e:	6028      	str	r0, [r5, #0]
 8006830:	e7d5      	b.n	80067de <_scanf_float+0x3ba>
 8006832:	2700      	movs	r7, #0
 8006834:	e62e      	b.n	8006494 <_scanf_float+0x70>
 8006836:	bf00      	nop
 8006838:	0800a720 	.word	0x0800a720
 800683c:	0800a861 	.word	0x0800a861

08006840 <std>:
 8006840:	2300      	movs	r3, #0
 8006842:	b510      	push	{r4, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	e9c0 3300 	strd	r3, r3, [r0]
 800684a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800684e:	6083      	str	r3, [r0, #8]
 8006850:	8181      	strh	r1, [r0, #12]
 8006852:	6643      	str	r3, [r0, #100]	@ 0x64
 8006854:	81c2      	strh	r2, [r0, #14]
 8006856:	6183      	str	r3, [r0, #24]
 8006858:	4619      	mov	r1, r3
 800685a:	2208      	movs	r2, #8
 800685c:	305c      	adds	r0, #92	@ 0x5c
 800685e:	f000 f916 	bl	8006a8e <memset>
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <std+0x58>)
 8006864:	6263      	str	r3, [r4, #36]	@ 0x24
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <std+0x5c>)
 8006868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <std+0x60>)
 800686c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <std+0x64>)
 8006870:	6323      	str	r3, [r4, #48]	@ 0x30
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <std+0x68>)
 8006874:	6224      	str	r4, [r4, #32]
 8006876:	429c      	cmp	r4, r3
 8006878:	d006      	beq.n	8006888 <std+0x48>
 800687a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800687e:	4294      	cmp	r4, r2
 8006880:	d002      	beq.n	8006888 <std+0x48>
 8006882:	33d0      	adds	r3, #208	@ 0xd0
 8006884:	429c      	cmp	r4, r3
 8006886:	d105      	bne.n	8006894 <std+0x54>
 8006888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006890:	f000 b97a 	b.w	8006b88 <__retarget_lock_init_recursive>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	bf00      	nop
 8006898:	08006a09 	.word	0x08006a09
 800689c:	08006a2b 	.word	0x08006a2b
 80068a0:	08006a63 	.word	0x08006a63
 80068a4:	08006a87 	.word	0x08006a87
 80068a8:	20001b94 	.word	0x20001b94

080068ac <stdio_exit_handler>:
 80068ac:	4a02      	ldr	r2, [pc, #8]	@ (80068b8 <stdio_exit_handler+0xc>)
 80068ae:	4903      	ldr	r1, [pc, #12]	@ (80068bc <stdio_exit_handler+0x10>)
 80068b0:	4803      	ldr	r0, [pc, #12]	@ (80068c0 <stdio_exit_handler+0x14>)
 80068b2:	f000 b869 	b.w	8006988 <_fwalk_sglue>
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010
 80068bc:	0800947d 	.word	0x0800947d
 80068c0:	20000020 	.word	0x20000020

080068c4 <cleanup_stdio>:
 80068c4:	6841      	ldr	r1, [r0, #4]
 80068c6:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <cleanup_stdio+0x34>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
 80068ce:	d001      	beq.n	80068d4 <cleanup_stdio+0x10>
 80068d0:	f002 fdd4 	bl	800947c <_fflush_r>
 80068d4:	68a1      	ldr	r1, [r4, #8]
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <cleanup_stdio+0x38>)
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <cleanup_stdio+0x1e>
 80068dc:	4620      	mov	r0, r4
 80068de:	f002 fdcd 	bl	800947c <_fflush_r>
 80068e2:	68e1      	ldr	r1, [r4, #12]
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <cleanup_stdio+0x3c>)
 80068e6:	4299      	cmp	r1, r3
 80068e8:	d004      	beq.n	80068f4 <cleanup_stdio+0x30>
 80068ea:	4620      	mov	r0, r4
 80068ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f0:	f002 bdc4 	b.w	800947c <_fflush_r>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	20001b94 	.word	0x20001b94
 80068fc:	20001bfc 	.word	0x20001bfc
 8006900:	20001c64 	.word	0x20001c64

08006904 <global_stdio_init.part.0>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <global_stdio_init.part.0+0x30>)
 8006908:	4c0b      	ldr	r4, [pc, #44]	@ (8006938 <global_stdio_init.part.0+0x34>)
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <global_stdio_init.part.0+0x38>)
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	4620      	mov	r0, r4
 8006910:	2200      	movs	r2, #0
 8006912:	2104      	movs	r1, #4
 8006914:	f7ff ff94 	bl	8006840 <std>
 8006918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800691c:	2201      	movs	r2, #1
 800691e:	2109      	movs	r1, #9
 8006920:	f7ff ff8e 	bl	8006840 <std>
 8006924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006928:	2202      	movs	r2, #2
 800692a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692e:	2112      	movs	r1, #18
 8006930:	f7ff bf86 	b.w	8006840 <std>
 8006934:	20001ccc 	.word	0x20001ccc
 8006938:	20001b94 	.word	0x20001b94
 800693c:	080068ad 	.word	0x080068ad

08006940 <__sfp_lock_acquire>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__sfp_lock_acquire+0x8>)
 8006942:	f000 b922 	b.w	8006b8a <__retarget_lock_acquire_recursive>
 8006946:	bf00      	nop
 8006948:	20001cd5 	.word	0x20001cd5

0800694c <__sfp_lock_release>:
 800694c:	4801      	ldr	r0, [pc, #4]	@ (8006954 <__sfp_lock_release+0x8>)
 800694e:	f000 b91d 	b.w	8006b8c <__retarget_lock_release_recursive>
 8006952:	bf00      	nop
 8006954:	20001cd5 	.word	0x20001cd5

08006958 <__sinit>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	f7ff fff0 	bl	8006940 <__sfp_lock_acquire>
 8006960:	6a23      	ldr	r3, [r4, #32]
 8006962:	b11b      	cbz	r3, 800696c <__sinit+0x14>
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f7ff bff0 	b.w	800694c <__sfp_lock_release>
 800696c:	4b04      	ldr	r3, [pc, #16]	@ (8006980 <__sinit+0x28>)
 800696e:	6223      	str	r3, [r4, #32]
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <__sinit+0x2c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f5      	bne.n	8006964 <__sinit+0xc>
 8006978:	f7ff ffc4 	bl	8006904 <global_stdio_init.part.0>
 800697c:	e7f2      	b.n	8006964 <__sinit+0xc>
 800697e:	bf00      	nop
 8006980:	080068c5 	.word	0x080068c5
 8006984:	20001ccc 	.word	0x20001ccc

08006988 <_fwalk_sglue>:
 8006988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800698c:	4607      	mov	r7, r0
 800698e:	4688      	mov	r8, r1
 8006990:	4614      	mov	r4, r2
 8006992:	2600      	movs	r6, #0
 8006994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006998:	f1b9 0901 	subs.w	r9, r9, #1
 800699c:	d505      	bpl.n	80069aa <_fwalk_sglue+0x22>
 800699e:	6824      	ldr	r4, [r4, #0]
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	d1f7      	bne.n	8006994 <_fwalk_sglue+0xc>
 80069a4:	4630      	mov	r0, r6
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d907      	bls.n	80069c0 <_fwalk_sglue+0x38>
 80069b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b4:	3301      	adds	r3, #1
 80069b6:	d003      	beq.n	80069c0 <_fwalk_sglue+0x38>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	4306      	orrs	r6, r0
 80069c0:	3568      	adds	r5, #104	@ 0x68
 80069c2:	e7e9      	b.n	8006998 <_fwalk_sglue+0x10>

080069c4 <siprintf>:
 80069c4:	b40e      	push	{r1, r2, r3}
 80069c6:	b510      	push	{r4, lr}
 80069c8:	b09d      	sub	sp, #116	@ 0x74
 80069ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069d4:	480a      	ldr	r0, [pc, #40]	@ (8006a00 <siprintf+0x3c>)
 80069d6:	9107      	str	r1, [sp, #28]
 80069d8:	9104      	str	r1, [sp, #16]
 80069da:	490a      	ldr	r1, [pc, #40]	@ (8006a04 <siprintf+0x40>)
 80069dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	2400      	movs	r4, #0
 80069e4:	a902      	add	r1, sp, #8
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069ec:	f002 fbc6 	bl	800917c <_svfiprintf_r>
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	701c      	strb	r4, [r3, #0]
 80069f4:	b01d      	add	sp, #116	@ 0x74
 80069f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fa:	b003      	add	sp, #12
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	2000001c 	.word	0x2000001c
 8006a04:	ffff0208 	.word	0xffff0208

08006a08 <__sread>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a10:	f000 f86c 	bl	8006aec <_read_r>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	bfab      	itete	ge
 8006a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a1c:	181b      	addge	r3, r3, r0
 8006a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a22:	bfac      	ite	ge
 8006a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a26:	81a3      	strhlt	r3, [r4, #12]
 8006a28:	bd10      	pop	{r4, pc}

08006a2a <__swrite>:
 8006a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	461f      	mov	r7, r3
 8006a30:	898b      	ldrh	r3, [r1, #12]
 8006a32:	05db      	lsls	r3, r3, #23
 8006a34:	4605      	mov	r5, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	4616      	mov	r6, r2
 8006a3a:	d505      	bpl.n	8006a48 <__swrite+0x1e>
 8006a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a40:	2302      	movs	r3, #2
 8006a42:	2200      	movs	r2, #0
 8006a44:	f000 f840 	bl	8006ac8 <_lseek_r>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	4632      	mov	r2, r6
 8006a56:	463b      	mov	r3, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	f000 b857 	b.w	8006b10 <_write_r>

08006a62 <__sseek>:
 8006a62:	b510      	push	{r4, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6a:	f000 f82d 	bl	8006ac8 <_lseek_r>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	bf15      	itete	ne
 8006a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a7e:	81a3      	strheq	r3, [r4, #12]
 8006a80:	bf18      	it	ne
 8006a82:	81a3      	strhne	r3, [r4, #12]
 8006a84:	bd10      	pop	{r4, pc}

08006a86 <__sclose>:
 8006a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8a:	f000 b80d 	b.w	8006aa8 <_close_r>

08006a8e <memset>:
 8006a8e:	4402      	add	r2, r0
 8006a90:	4603      	mov	r3, r0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d100      	bne.n	8006a98 <memset+0xa>
 8006a96:	4770      	bx	lr
 8006a98:	f803 1b01 	strb.w	r1, [r3], #1
 8006a9c:	e7f9      	b.n	8006a92 <memset+0x4>
	...

08006aa0 <_localeconv_r>:
 8006aa0:	4800      	ldr	r0, [pc, #0]	@ (8006aa4 <_localeconv_r+0x4>)
 8006aa2:	4770      	bx	lr
 8006aa4:	2000015c 	.word	0x2000015c

08006aa8 <_close_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d06      	ldr	r5, [pc, #24]	@ (8006ac4 <_close_r+0x1c>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	f7fa fef6 	bl	80018a4 <_close>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_close_r+0x1a>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_close_r+0x1a>
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20001cd0 	.word	0x20001cd0

08006ac8 <_lseek_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	@ (8006ae8 <_lseek_r+0x20>)
 8006acc:	4604      	mov	r4, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa ff0b 	bl	80018f2 <_lseek>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_lseek_r+0x1e>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_lseek_r+0x1e>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20001cd0 	.word	0x20001cd0

08006aec <_read_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	@ (8006b0c <_read_r+0x20>)
 8006af0:	4604      	mov	r4, r0
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f7fa fe99 	bl	8001832 <_read>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_read_r+0x1e>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_read_r+0x1e>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20001cd0 	.word	0x20001cd0

08006b10 <_write_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	@ (8006b30 <_write_r+0x20>)
 8006b14:	4604      	mov	r4, r0
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	602a      	str	r2, [r5, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7fa fea4 	bl	800186c <_write>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_write_r+0x1e>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_write_r+0x1e>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20001cd0 	.word	0x20001cd0

08006b34 <__errno>:
 8006b34:	4b01      	ldr	r3, [pc, #4]	@ (8006b3c <__errno+0x8>)
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	2000001c 	.word	0x2000001c

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4d0d      	ldr	r5, [pc, #52]	@ (8006b78 <__libc_init_array+0x38>)
 8006b44:	4c0d      	ldr	r4, [pc, #52]	@ (8006b7c <__libc_init_array+0x3c>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	4d0b      	ldr	r5, [pc, #44]	@ (8006b80 <__libc_init_array+0x40>)
 8006b52:	4c0c      	ldr	r4, [pc, #48]	@ (8006b84 <__libc_init_array+0x44>)
 8006b54:	f003 fb76 	bl	800a244 <_init>
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	0800ab1c 	.word	0x0800ab1c
 8006b7c:	0800ab1c 	.word	0x0800ab1c
 8006b80:	0800ab1c 	.word	0x0800ab1c
 8006b84:	0800ab20 	.word	0x0800ab20

08006b88 <__retarget_lock_init_recursive>:
 8006b88:	4770      	bx	lr

08006b8a <__retarget_lock_acquire_recursive>:
 8006b8a:	4770      	bx	lr

08006b8c <__retarget_lock_release_recursive>:
 8006b8c:	4770      	bx	lr

08006b8e <memcpy>:
 8006b8e:	440a      	add	r2, r1
 8006b90:	4291      	cmp	r1, r2
 8006b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b96:	d100      	bne.n	8006b9a <memcpy+0xc>
 8006b98:	4770      	bx	lr
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba4:	4291      	cmp	r1, r2
 8006ba6:	d1f9      	bne.n	8006b9c <memcpy+0xe>
 8006ba8:	bd10      	pop	{r4, pc}
	...

08006bac <nanf>:
 8006bac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006bb4 <nanf+0x8>
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	7fc00000 	.word	0x7fc00000

08006bb8 <quorem>:
 8006bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	6903      	ldr	r3, [r0, #16]
 8006bbe:	690c      	ldr	r4, [r1, #16]
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	db7e      	blt.n	8006cc4 <quorem+0x10c>
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	f101 0814 	add.w	r8, r1, #20
 8006bcc:	00a3      	lsls	r3, r4, #2
 8006bce:	f100 0514 	add.w	r5, r0, #20
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006be2:	3301      	adds	r3, #1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bea:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bee:	d32e      	bcc.n	8006c4e <quorem+0x96>
 8006bf0:	f04f 0a00 	mov.w	sl, #0
 8006bf4:	46c4      	mov	ip, r8
 8006bf6:	46ae      	mov	lr, r5
 8006bf8:	46d3      	mov	fp, sl
 8006bfa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bfe:	b298      	uxth	r0, r3
 8006c00:	fb06 a000 	mla	r0, r6, r0, sl
 8006c04:	0c02      	lsrs	r2, r0, #16
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	fb06 2303 	mla	r3, r6, r3, r2
 8006c0c:	f8de 2000 	ldr.w	r2, [lr]
 8006c10:	b280      	uxth	r0, r0
 8006c12:	b292      	uxth	r2, r2
 8006c14:	1a12      	subs	r2, r2, r0
 8006c16:	445a      	add	r2, fp
 8006c18:	f8de 0000 	ldr.w	r0, [lr]
 8006c1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c30:	45e1      	cmp	r9, ip
 8006c32:	f84e 2b04 	str.w	r2, [lr], #4
 8006c36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c3a:	d2de      	bcs.n	8006bfa <quorem+0x42>
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	58eb      	ldr	r3, [r5, r3]
 8006c40:	b92b      	cbnz	r3, 8006c4e <quorem+0x96>
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	3b04      	subs	r3, #4
 8006c46:	429d      	cmp	r5, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	d32f      	bcc.n	8006cac <quorem+0xf4>
 8006c4c:	613c      	str	r4, [r7, #16]
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f001 f9c6 	bl	8007fe0 <__mcmp>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	db25      	blt.n	8006ca4 <quorem+0xec>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c60:	f8d1 c000 	ldr.w	ip, [r1]
 8006c64:	fa1f fe82 	uxth.w	lr, r2
 8006c68:	fa1f f38c 	uxth.w	r3, ip
 8006c6c:	eba3 030e 	sub.w	r3, r3, lr
 8006c70:	4403      	add	r3, r0
 8006c72:	0c12      	lsrs	r2, r2, #16
 8006c74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c82:	45c1      	cmp	r9, r8
 8006c84:	f841 3b04 	str.w	r3, [r1], #4
 8006c88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c8c:	d2e6      	bcs.n	8006c5c <quorem+0xa4>
 8006c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c96:	b922      	cbnz	r2, 8006ca2 <quorem+0xea>
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	d30b      	bcc.n	8006cb8 <quorem+0x100>
 8006ca0:	613c      	str	r4, [r7, #16]
 8006ca2:	3601      	adds	r6, #1
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	b003      	add	sp, #12
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	3b04      	subs	r3, #4
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	d1cb      	bne.n	8006c4c <quorem+0x94>
 8006cb4:	3c01      	subs	r4, #1
 8006cb6:	e7c6      	b.n	8006c46 <quorem+0x8e>
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d1ef      	bne.n	8006ca0 <quorem+0xe8>
 8006cc0:	3c01      	subs	r4, #1
 8006cc2:	e7ea      	b.n	8006c9a <quorem+0xe2>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7ee      	b.n	8006ca6 <quorem+0xee>

08006cc8 <_dtoa_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	69c7      	ldr	r7, [r0, #28]
 8006cce:	b097      	sub	sp, #92	@ 0x5c
 8006cd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006cd4:	ec55 4b10 	vmov	r4, r5, d0
 8006cd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006cda:	9107      	str	r1, [sp, #28]
 8006cdc:	4681      	mov	r9, r0
 8006cde:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006ce2:	b97f      	cbnz	r7, 8006d04 <_dtoa_r+0x3c>
 8006ce4:	2010      	movs	r0, #16
 8006ce6:	f000 fe09 	bl	80078fc <malloc>
 8006cea:	4602      	mov	r2, r0
 8006cec:	f8c9 001c 	str.w	r0, [r9, #28]
 8006cf0:	b920      	cbnz	r0, 8006cfc <_dtoa_r+0x34>
 8006cf2:	4ba9      	ldr	r3, [pc, #676]	@ (8006f98 <_dtoa_r+0x2d0>)
 8006cf4:	21ef      	movs	r1, #239	@ 0xef
 8006cf6:	48a9      	ldr	r0, [pc, #676]	@ (8006f9c <_dtoa_r+0x2d4>)
 8006cf8:	f002 fc2e 	bl	8009558 <__assert_func>
 8006cfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d00:	6007      	str	r7, [r0, #0]
 8006d02:	60c7      	str	r7, [r0, #12]
 8006d04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	b159      	cbz	r1, 8006d24 <_dtoa_r+0x5c>
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	604a      	str	r2, [r1, #4]
 8006d10:	2301      	movs	r3, #1
 8006d12:	4093      	lsls	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
 8006d16:	4648      	mov	r0, r9
 8006d18:	f000 fee6 	bl	8007ae8 <_Bfree>
 8006d1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	1e2b      	subs	r3, r5, #0
 8006d26:	bfb9      	ittee	lt
 8006d28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d2c:	9305      	strlt	r3, [sp, #20]
 8006d2e:	2300      	movge	r3, #0
 8006d30:	6033      	strge	r3, [r6, #0]
 8006d32:	9f05      	ldr	r7, [sp, #20]
 8006d34:	4b9a      	ldr	r3, [pc, #616]	@ (8006fa0 <_dtoa_r+0x2d8>)
 8006d36:	bfbc      	itt	lt
 8006d38:	2201      	movlt	r2, #1
 8006d3a:	6032      	strlt	r2, [r6, #0]
 8006d3c:	43bb      	bics	r3, r7
 8006d3e:	d112      	bne.n	8006d66 <_dtoa_r+0x9e>
 8006d40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006d42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d4c:	4323      	orrs	r3, r4
 8006d4e:	f000 855a 	beq.w	8007806 <_dtoa_r+0xb3e>
 8006d52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006fb4 <_dtoa_r+0x2ec>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 855c 	beq.w	8007816 <_dtoa_r+0xb4e>
 8006d5e:	f10a 0303 	add.w	r3, sl, #3
 8006d62:	f000 bd56 	b.w	8007812 <_dtoa_r+0xb4a>
 8006d66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	ec51 0b17 	vmov	r0, r1, d7
 8006d70:	2300      	movs	r3, #0
 8006d72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006d76:	f7f9 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	b158      	cbz	r0, 8006d96 <_dtoa_r+0xce>
 8006d7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006d80:	2301      	movs	r3, #1
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d86:	b113      	cbz	r3, 8006d8e <_dtoa_r+0xc6>
 8006d88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d8a:	4b86      	ldr	r3, [pc, #536]	@ (8006fa4 <_dtoa_r+0x2dc>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006fb8 <_dtoa_r+0x2f0>
 8006d92:	f000 bd40 	b.w	8007816 <_dtoa_r+0xb4e>
 8006d96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006d9a:	aa14      	add	r2, sp, #80	@ 0x50
 8006d9c:	a915      	add	r1, sp, #84	@ 0x54
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f001 fa3e 	bl	8008220 <__d2b>
 8006da4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006da8:	9002      	str	r0, [sp, #8]
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	d078      	beq.n	8006ea0 <_dtoa_r+0x1d8>
 8006dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006db0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006dc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006dc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006dc8:	4619      	mov	r1, r3
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4b76      	ldr	r3, [pc, #472]	@ (8006fa8 <_dtoa_r+0x2e0>)
 8006dce:	f7f9 fa5b 	bl	8000288 <__aeabi_dsub>
 8006dd2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006f80 <_dtoa_r+0x2b8>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006f88 <_dtoa_r+0x2c0>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fa53 	bl	800028c <__adddf3>
 8006de6:	4604      	mov	r4, r0
 8006de8:	4630      	mov	r0, r6
 8006dea:	460d      	mov	r5, r1
 8006dec:	f7f9 fb9a 	bl	8000524 <__aeabi_i2d>
 8006df0:	a367      	add	r3, pc, #412	@ (adr r3, 8006f90 <_dtoa_r+0x2c8>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fbff 	bl	80005f8 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fa43 	bl	800028c <__adddf3>
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	f7f9 fea5 	bl	8000b58 <__aeabi_d2iz>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4607      	mov	r7, r0
 8006e12:	2300      	movs	r3, #0
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fe60 	bl	8000adc <__aeabi_dcmplt>
 8006e1c:	b140      	cbz	r0, 8006e30 <_dtoa_r+0x168>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7f9 fb80 	bl	8000524 <__aeabi_i2d>
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e2c:	b900      	cbnz	r0, 8006e30 <_dtoa_r+0x168>
 8006e2e:	3f01      	subs	r7, #1
 8006e30:	2f16      	cmp	r7, #22
 8006e32:	d852      	bhi.n	8006eda <_dtoa_r+0x212>
 8006e34:	4b5d      	ldr	r3, [pc, #372]	@ (8006fac <_dtoa_r+0x2e4>)
 8006e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e42:	f7f9 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d049      	beq.n	8006ede <_dtoa_r+0x216>
 8006e4a:	3f01      	subs	r7, #1
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e52:	1b9b      	subs	r3, r3, r6
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	bf45      	ittet	mi
 8006e58:	f1c3 0301 	rsbmi	r3, r3, #1
 8006e5c:	9300      	strmi	r3, [sp, #0]
 8006e5e:	2300      	movpl	r3, #0
 8006e60:	2300      	movmi	r3, #0
 8006e62:	9206      	str	r2, [sp, #24]
 8006e64:	bf54      	ite	pl
 8006e66:	9300      	strpl	r3, [sp, #0]
 8006e68:	9306      	strmi	r3, [sp, #24]
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	db39      	blt.n	8006ee2 <_dtoa_r+0x21a>
 8006e6e:	9b06      	ldr	r3, [sp, #24]
 8006e70:	970d      	str	r7, [sp, #52]	@ 0x34
 8006e72:	443b      	add	r3, r7
 8006e74:	9306      	str	r3, [sp, #24]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	9b07      	ldr	r3, [sp, #28]
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	d863      	bhi.n	8006f48 <_dtoa_r+0x280>
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	bfc4      	itt	gt
 8006e84:	3b04      	subgt	r3, #4
 8006e86:	9307      	strgt	r3, [sp, #28]
 8006e88:	9b07      	ldr	r3, [sp, #28]
 8006e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e8e:	bfcc      	ite	gt
 8006e90:	2400      	movgt	r4, #0
 8006e92:	2401      	movle	r4, #1
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d863      	bhi.n	8006f60 <_dtoa_r+0x298>
 8006e98:	e8df f003 	tbb	[pc, r3]
 8006e9c:	2b375452 	.word	0x2b375452
 8006ea0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ea4:	441e      	add	r6, r3
 8006ea6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	bfc1      	itttt	gt
 8006eae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006eb2:	409f      	lslgt	r7, r3
 8006eb4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006eb8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ebc:	bfd6      	itet	le
 8006ebe:	f1c3 0320 	rsble	r3, r3, #32
 8006ec2:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ec6:	fa04 f003 	lslle.w	r0, r4, r3
 8006eca:	f7f9 fb1b 	bl	8000504 <__aeabi_ui2d>
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ed4:	3e01      	subs	r6, #1
 8006ed6:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ed8:	e776      	b.n	8006dc8 <_dtoa_r+0x100>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e7b7      	b.n	8006e4e <_dtoa_r+0x186>
 8006ede:	9010      	str	r0, [sp, #64]	@ 0x40
 8006ee0:	e7b6      	b.n	8006e50 <_dtoa_r+0x188>
 8006ee2:	9b00      	ldr	r3, [sp, #0]
 8006ee4:	1bdb      	subs	r3, r3, r7
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	427b      	negs	r3, r7
 8006eea:	9308      	str	r3, [sp, #32]
 8006eec:	2300      	movs	r3, #0
 8006eee:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ef0:	e7c3      	b.n	8006e7a <_dtoa_r+0x1b2>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ef8:	eb07 0b03 	add.w	fp, r7, r3
 8006efc:	f10b 0301 	add.w	r3, fp, #1
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	9303      	str	r3, [sp, #12]
 8006f04:	bfb8      	it	lt
 8006f06:	2301      	movlt	r3, #1
 8006f08:	e006      	b.n	8006f18 <_dtoa_r+0x250>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	dd28      	ble.n	8006f66 <_dtoa_r+0x29e>
 8006f14:	469b      	mov	fp, r3
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	2204      	movs	r2, #4
 8006f20:	f102 0514 	add.w	r5, r2, #20
 8006f24:	429d      	cmp	r5, r3
 8006f26:	d926      	bls.n	8006f76 <_dtoa_r+0x2ae>
 8006f28:	6041      	str	r1, [r0, #4]
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f000 fd9c 	bl	8007a68 <_Balloc>
 8006f30:	4682      	mov	sl, r0
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d142      	bne.n	8006fbc <_dtoa_r+0x2f4>
 8006f36:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb0 <_dtoa_r+0x2e8>)
 8006f38:	4602      	mov	r2, r0
 8006f3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f3e:	e6da      	b.n	8006cf6 <_dtoa_r+0x2e>
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7e3      	b.n	8006f0c <_dtoa_r+0x244>
 8006f44:	2300      	movs	r3, #0
 8006f46:	e7d5      	b.n	8006ef4 <_dtoa_r+0x22c>
 8006f48:	2401      	movs	r4, #1
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9307      	str	r3, [sp, #28]
 8006f4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006f50:	f04f 3bff 	mov.w	fp, #4294967295
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f5a:	2312      	movs	r3, #18
 8006f5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f5e:	e7db      	b.n	8006f18 <_dtoa_r+0x250>
 8006f60:	2301      	movs	r3, #1
 8006f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f64:	e7f4      	b.n	8006f50 <_dtoa_r+0x288>
 8006f66:	f04f 0b01 	mov.w	fp, #1
 8006f6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f6e:	465b      	mov	r3, fp
 8006f70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006f74:	e7d0      	b.n	8006f18 <_dtoa_r+0x250>
 8006f76:	3101      	adds	r1, #1
 8006f78:	0052      	lsls	r2, r2, #1
 8006f7a:	e7d1      	b.n	8006f20 <_dtoa_r+0x258>
 8006f7c:	f3af 8000 	nop.w
 8006f80:	636f4361 	.word	0x636f4361
 8006f84:	3fd287a7 	.word	0x3fd287a7
 8006f88:	8b60c8b3 	.word	0x8b60c8b3
 8006f8c:	3fc68a28 	.word	0x3fc68a28
 8006f90:	509f79fb 	.word	0x509f79fb
 8006f94:	3fd34413 	.word	0x3fd34413
 8006f98:	0800a732 	.word	0x0800a732
 8006f9c:	0800a749 	.word	0x0800a749
 8006fa0:	7ff00000 	.word	0x7ff00000
 8006fa4:	0800a6fd 	.word	0x0800a6fd
 8006fa8:	3ff80000 	.word	0x3ff80000
 8006fac:	0800a8f8 	.word	0x0800a8f8
 8006fb0:	0800a7a1 	.word	0x0800a7a1
 8006fb4:	0800a72e 	.word	0x0800a72e
 8006fb8:	0800a6fc 	.word	0x0800a6fc
 8006fbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006fc0:	6018      	str	r0, [r3, #0]
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	2b0e      	cmp	r3, #14
 8006fc6:	f200 80a1 	bhi.w	800710c <_dtoa_r+0x444>
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	f000 809e 	beq.w	800710c <_dtoa_r+0x444>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	dd33      	ble.n	800703c <_dtoa_r+0x374>
 8006fd4:	4b9c      	ldr	r3, [pc, #624]	@ (8007248 <_dtoa_r+0x580>)
 8006fd6:	f007 020f 	and.w	r2, r7, #15
 8006fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fde:	ed93 7b00 	vldr	d7, [r3]
 8006fe2:	05f8      	lsls	r0, r7, #23
 8006fe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006fe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fec:	d516      	bpl.n	800701c <_dtoa_r+0x354>
 8006fee:	4b97      	ldr	r3, [pc, #604]	@ (800724c <_dtoa_r+0x584>)
 8006ff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ff8:	f7f9 fc28 	bl	800084c <__aeabi_ddiv>
 8006ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007000:	f004 040f 	and.w	r4, r4, #15
 8007004:	2603      	movs	r6, #3
 8007006:	4d91      	ldr	r5, [pc, #580]	@ (800724c <_dtoa_r+0x584>)
 8007008:	b954      	cbnz	r4, 8007020 <_dtoa_r+0x358>
 800700a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800700e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007012:	f7f9 fc1b 	bl	800084c <__aeabi_ddiv>
 8007016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800701a:	e028      	b.n	800706e <_dtoa_r+0x3a6>
 800701c:	2602      	movs	r6, #2
 800701e:	e7f2      	b.n	8007006 <_dtoa_r+0x33e>
 8007020:	07e1      	lsls	r1, r4, #31
 8007022:	d508      	bpl.n	8007036 <_dtoa_r+0x36e>
 8007024:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007028:	e9d5 2300 	ldrd	r2, r3, [r5]
 800702c:	f7f9 fae4 	bl	80005f8 <__aeabi_dmul>
 8007030:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007034:	3601      	adds	r6, #1
 8007036:	1064      	asrs	r4, r4, #1
 8007038:	3508      	adds	r5, #8
 800703a:	e7e5      	b.n	8007008 <_dtoa_r+0x340>
 800703c:	f000 80af 	beq.w	800719e <_dtoa_r+0x4d6>
 8007040:	427c      	negs	r4, r7
 8007042:	4b81      	ldr	r3, [pc, #516]	@ (8007248 <_dtoa_r+0x580>)
 8007044:	4d81      	ldr	r5, [pc, #516]	@ (800724c <_dtoa_r+0x584>)
 8007046:	f004 020f 	and.w	r2, r4, #15
 800704a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800705e:	1124      	asrs	r4, r4, #4
 8007060:	2300      	movs	r3, #0
 8007062:	2602      	movs	r6, #2
 8007064:	2c00      	cmp	r4, #0
 8007066:	f040 808f 	bne.w	8007188 <_dtoa_r+0x4c0>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1d3      	bne.n	8007016 <_dtoa_r+0x34e>
 800706e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007070:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8094 	beq.w	80071a2 <_dtoa_r+0x4da>
 800707a:	4b75      	ldr	r3, [pc, #468]	@ (8007250 <_dtoa_r+0x588>)
 800707c:	2200      	movs	r2, #0
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fd2b 	bl	8000adc <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	f000 808b 	beq.w	80071a2 <_dtoa_r+0x4da>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8087 	beq.w	80071a2 <_dtoa_r+0x4da>
 8007094:	f1bb 0f00 	cmp.w	fp, #0
 8007098:	dd34      	ble.n	8007104 <_dtoa_r+0x43c>
 800709a:	4620      	mov	r0, r4
 800709c:	4b6d      	ldr	r3, [pc, #436]	@ (8007254 <_dtoa_r+0x58c>)
 800709e:	2200      	movs	r2, #0
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7f9 faa9 	bl	80005f8 <__aeabi_dmul>
 80070a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80070ae:	3601      	adds	r6, #1
 80070b0:	465c      	mov	r4, fp
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7f9 fa36 	bl	8000524 <__aeabi_i2d>
 80070b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	4b65      	ldr	r3, [pc, #404]	@ (8007258 <_dtoa_r+0x590>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 f8e2 	bl	800028c <__adddf3>
 80070c8:	4605      	mov	r5, r0
 80070ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d16a      	bne.n	80071a8 <_dtoa_r+0x4e0>
 80070d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d6:	4b61      	ldr	r3, [pc, #388]	@ (800725c <_dtoa_r+0x594>)
 80070d8:	2200      	movs	r2, #0
 80070da:	f7f9 f8d5 	bl	8000288 <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070e6:	462a      	mov	r2, r5
 80070e8:	4633      	mov	r3, r6
 80070ea:	f7f9 fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f040 8298 	bne.w	8007624 <_dtoa_r+0x95c>
 80070f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f8:	462a      	mov	r2, r5
 80070fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070fe:	f7f9 fced 	bl	8000adc <__aeabi_dcmplt>
 8007102:	bb38      	cbnz	r0, 8007154 <_dtoa_r+0x48c>
 8007104:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007108:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800710c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800710e:	2b00      	cmp	r3, #0
 8007110:	f2c0 8157 	blt.w	80073c2 <_dtoa_r+0x6fa>
 8007114:	2f0e      	cmp	r7, #14
 8007116:	f300 8154 	bgt.w	80073c2 <_dtoa_r+0x6fa>
 800711a:	4b4b      	ldr	r3, [pc, #300]	@ (8007248 <_dtoa_r+0x580>)
 800711c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007120:	ed93 7b00 	vldr	d7, [r3]
 8007124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007126:	2b00      	cmp	r3, #0
 8007128:	ed8d 7b00 	vstr	d7, [sp]
 800712c:	f280 80e5 	bge.w	80072fa <_dtoa_r+0x632>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f300 80e1 	bgt.w	80072fa <_dtoa_r+0x632>
 8007138:	d10c      	bne.n	8007154 <_dtoa_r+0x48c>
 800713a:	4b48      	ldr	r3, [pc, #288]	@ (800725c <_dtoa_r+0x594>)
 800713c:	2200      	movs	r2, #0
 800713e:	ec51 0b17 	vmov	r0, r1, d7
 8007142:	f7f9 fa59 	bl	80005f8 <__aeabi_dmul>
 8007146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714a:	f7f9 fcdb 	bl	8000b04 <__aeabi_dcmpge>
 800714e:	2800      	cmp	r0, #0
 8007150:	f000 8266 	beq.w	8007620 <_dtoa_r+0x958>
 8007154:	2400      	movs	r4, #0
 8007156:	4625      	mov	r5, r4
 8007158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800715a:	4656      	mov	r6, sl
 800715c:	ea6f 0803 	mvn.w	r8, r3
 8007160:	2700      	movs	r7, #0
 8007162:	4621      	mov	r1, r4
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fcbf 	bl	8007ae8 <_Bfree>
 800716a:	2d00      	cmp	r5, #0
 800716c:	f000 80bd 	beq.w	80072ea <_dtoa_r+0x622>
 8007170:	b12f      	cbz	r7, 800717e <_dtoa_r+0x4b6>
 8007172:	42af      	cmp	r7, r5
 8007174:	d003      	beq.n	800717e <_dtoa_r+0x4b6>
 8007176:	4639      	mov	r1, r7
 8007178:	4648      	mov	r0, r9
 800717a:	f000 fcb5 	bl	8007ae8 <_Bfree>
 800717e:	4629      	mov	r1, r5
 8007180:	4648      	mov	r0, r9
 8007182:	f000 fcb1 	bl	8007ae8 <_Bfree>
 8007186:	e0b0      	b.n	80072ea <_dtoa_r+0x622>
 8007188:	07e2      	lsls	r2, r4, #31
 800718a:	d505      	bpl.n	8007198 <_dtoa_r+0x4d0>
 800718c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007190:	f7f9 fa32 	bl	80005f8 <__aeabi_dmul>
 8007194:	3601      	adds	r6, #1
 8007196:	2301      	movs	r3, #1
 8007198:	1064      	asrs	r4, r4, #1
 800719a:	3508      	adds	r5, #8
 800719c:	e762      	b.n	8007064 <_dtoa_r+0x39c>
 800719e:	2602      	movs	r6, #2
 80071a0:	e765      	b.n	800706e <_dtoa_r+0x3a6>
 80071a2:	9c03      	ldr	r4, [sp, #12]
 80071a4:	46b8      	mov	r8, r7
 80071a6:	e784      	b.n	80070b2 <_dtoa_r+0x3ea>
 80071a8:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <_dtoa_r+0x580>)
 80071aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071b4:	4454      	add	r4, sl
 80071b6:	2900      	cmp	r1, #0
 80071b8:	d054      	beq.n	8007264 <_dtoa_r+0x59c>
 80071ba:	4929      	ldr	r1, [pc, #164]	@ (8007260 <_dtoa_r+0x598>)
 80071bc:	2000      	movs	r0, #0
 80071be:	f7f9 fb45 	bl	800084c <__aeabi_ddiv>
 80071c2:	4633      	mov	r3, r6
 80071c4:	462a      	mov	r2, r5
 80071c6:	f7f9 f85f 	bl	8000288 <__aeabi_dsub>
 80071ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071ce:	4656      	mov	r6, sl
 80071d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071d4:	f7f9 fcc0 	bl	8000b58 <__aeabi_d2iz>
 80071d8:	4605      	mov	r5, r0
 80071da:	f7f9 f9a3 	bl	8000524 <__aeabi_i2d>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e6:	f7f9 f84f 	bl	8000288 <__aeabi_dsub>
 80071ea:	3530      	adds	r5, #48	@ 0x30
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071f4:	f806 5b01 	strb.w	r5, [r6], #1
 80071f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071fc:	f7f9 fc6e 	bl	8000adc <__aeabi_dcmplt>
 8007200:	2800      	cmp	r0, #0
 8007202:	d172      	bne.n	80072ea <_dtoa_r+0x622>
 8007204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007208:	4911      	ldr	r1, [pc, #68]	@ (8007250 <_dtoa_r+0x588>)
 800720a:	2000      	movs	r0, #0
 800720c:	f7f9 f83c 	bl	8000288 <__aeabi_dsub>
 8007210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007214:	f7f9 fc62 	bl	8000adc <__aeabi_dcmplt>
 8007218:	2800      	cmp	r0, #0
 800721a:	f040 80b4 	bne.w	8007386 <_dtoa_r+0x6be>
 800721e:	42a6      	cmp	r6, r4
 8007220:	f43f af70 	beq.w	8007104 <_dtoa_r+0x43c>
 8007224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007228:	4b0a      	ldr	r3, [pc, #40]	@ (8007254 <_dtoa_r+0x58c>)
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	4b08      	ldr	r3, [pc, #32]	@ (8007254 <_dtoa_r+0x58c>)
 8007232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007236:	2200      	movs	r2, #0
 8007238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007244:	e7c4      	b.n	80071d0 <_dtoa_r+0x508>
 8007246:	bf00      	nop
 8007248:	0800a8f8 	.word	0x0800a8f8
 800724c:	0800a8d0 	.word	0x0800a8d0
 8007250:	3ff00000 	.word	0x3ff00000
 8007254:	40240000 	.word	0x40240000
 8007258:	401c0000 	.word	0x401c0000
 800725c:	40140000 	.word	0x40140000
 8007260:	3fe00000 	.word	0x3fe00000
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007270:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007272:	4656      	mov	r6, sl
 8007274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007278:	f7f9 fc6e 	bl	8000b58 <__aeabi_d2iz>
 800727c:	4605      	mov	r5, r0
 800727e:	f7f9 f951 	bl	8000524 <__aeabi_i2d>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800728a:	f7f8 fffd 	bl	8000288 <__aeabi_dsub>
 800728e:	3530      	adds	r5, #48	@ 0x30
 8007290:	f806 5b01 	strb.w	r5, [r6], #1
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	42a6      	cmp	r6, r4
 800729a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	d124      	bne.n	80072ee <_dtoa_r+0x626>
 80072a4:	4baf      	ldr	r3, [pc, #700]	@ (8007564 <_dtoa_r+0x89c>)
 80072a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80072aa:	f7f8 ffef 	bl	800028c <__adddf3>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b6:	f7f9 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d163      	bne.n	8007386 <_dtoa_r+0x6be>
 80072be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80072c2:	49a8      	ldr	r1, [pc, #672]	@ (8007564 <_dtoa_r+0x89c>)
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7f8 ffdf 	bl	8000288 <__aeabi_dsub>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072d2:	f7f9 fc03 	bl	8000adc <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f43f af14 	beq.w	8007104 <_dtoa_r+0x43c>
 80072dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80072de:	1e73      	subs	r3, r6, #1
 80072e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072e6:	2b30      	cmp	r3, #48	@ 0x30
 80072e8:	d0f8      	beq.n	80072dc <_dtoa_r+0x614>
 80072ea:	4647      	mov	r7, r8
 80072ec:	e03b      	b.n	8007366 <_dtoa_r+0x69e>
 80072ee:	4b9e      	ldr	r3, [pc, #632]	@ (8007568 <_dtoa_r+0x8a0>)
 80072f0:	f7f9 f982 	bl	80005f8 <__aeabi_dmul>
 80072f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072f8:	e7bc      	b.n	8007274 <_dtoa_r+0x5ac>
 80072fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072fe:	4656      	mov	r6, sl
 8007300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 faa0 	bl	800084c <__aeabi_ddiv>
 800730c:	f7f9 fc24 	bl	8000b58 <__aeabi_d2iz>
 8007310:	4680      	mov	r8, r0
 8007312:	f7f9 f907 	bl	8000524 <__aeabi_i2d>
 8007316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800731a:	f7f9 f96d 	bl	80005f8 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800732a:	f7f8 ffad 	bl	8000288 <__aeabi_dsub>
 800732e:	f806 4b01 	strb.w	r4, [r6], #1
 8007332:	9d03      	ldr	r5, [sp, #12]
 8007334:	eba6 040a 	sub.w	r4, r6, sl
 8007338:	42a5      	cmp	r5, r4
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	d133      	bne.n	80073a8 <_dtoa_r+0x6e0>
 8007340:	f7f8 ffa4 	bl	800028c <__adddf3>
 8007344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
 800734c:	f7f9 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8007350:	b9c0      	cbnz	r0, 8007384 <_dtoa_r+0x6bc>
 8007352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f9 fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800735e:	b110      	cbz	r0, 8007366 <_dtoa_r+0x69e>
 8007360:	f018 0f01 	tst.w	r8, #1
 8007364:	d10e      	bne.n	8007384 <_dtoa_r+0x6bc>
 8007366:	9902      	ldr	r1, [sp, #8]
 8007368:	4648      	mov	r0, r9
 800736a:	f000 fbbd 	bl	8007ae8 <_Bfree>
 800736e:	2300      	movs	r3, #0
 8007370:	7033      	strb	r3, [r6, #0]
 8007372:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007374:	3701      	adds	r7, #1
 8007376:	601f      	str	r7, [r3, #0]
 8007378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 824b 	beq.w	8007816 <_dtoa_r+0xb4e>
 8007380:	601e      	str	r6, [r3, #0]
 8007382:	e248      	b.n	8007816 <_dtoa_r+0xb4e>
 8007384:	46b8      	mov	r8, r7
 8007386:	4633      	mov	r3, r6
 8007388:	461e      	mov	r6, r3
 800738a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800738e:	2a39      	cmp	r2, #57	@ 0x39
 8007390:	d106      	bne.n	80073a0 <_dtoa_r+0x6d8>
 8007392:	459a      	cmp	sl, r3
 8007394:	d1f8      	bne.n	8007388 <_dtoa_r+0x6c0>
 8007396:	2230      	movs	r2, #48	@ 0x30
 8007398:	f108 0801 	add.w	r8, r8, #1
 800739c:	f88a 2000 	strb.w	r2, [sl]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	3201      	adds	r2, #1
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	e7a0      	b.n	80072ea <_dtoa_r+0x622>
 80073a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007568 <_dtoa_r+0x8a0>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f9 f924 	bl	80005f8 <__aeabi_dmul>
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	4604      	mov	r4, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	f7f9 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d09f      	beq.n	8007300 <_dtoa_r+0x638>
 80073c0:	e7d1      	b.n	8007366 <_dtoa_r+0x69e>
 80073c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	f000 80ea 	beq.w	800759e <_dtoa_r+0x8d6>
 80073ca:	9a07      	ldr	r2, [sp, #28]
 80073cc:	2a01      	cmp	r2, #1
 80073ce:	f300 80cd 	bgt.w	800756c <_dtoa_r+0x8a4>
 80073d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	f000 80c1 	beq.w	800755c <_dtoa_r+0x894>
 80073da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073de:	9c08      	ldr	r4, [sp, #32]
 80073e0:	9e00      	ldr	r6, [sp, #0]
 80073e2:	9a00      	ldr	r2, [sp, #0]
 80073e4:	441a      	add	r2, r3
 80073e6:	9200      	str	r2, [sp, #0]
 80073e8:	9a06      	ldr	r2, [sp, #24]
 80073ea:	2101      	movs	r1, #1
 80073ec:	441a      	add	r2, r3
 80073ee:	4648      	mov	r0, r9
 80073f0:	9206      	str	r2, [sp, #24]
 80073f2:	f000 fc77 	bl	8007ce4 <__i2b>
 80073f6:	4605      	mov	r5, r0
 80073f8:	b166      	cbz	r6, 8007414 <_dtoa_r+0x74c>
 80073fa:	9b06      	ldr	r3, [sp, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd09      	ble.n	8007414 <_dtoa_r+0x74c>
 8007400:	42b3      	cmp	r3, r6
 8007402:	9a00      	ldr	r2, [sp, #0]
 8007404:	bfa8      	it	ge
 8007406:	4633      	movge	r3, r6
 8007408:	1ad2      	subs	r2, r2, r3
 800740a:	9200      	str	r2, [sp, #0]
 800740c:	9a06      	ldr	r2, [sp, #24]
 800740e:	1af6      	subs	r6, r6, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	9306      	str	r3, [sp, #24]
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	b30b      	cbz	r3, 800745c <_dtoa_r+0x794>
 8007418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80c6 	beq.w	80075ac <_dtoa_r+0x8e4>
 8007420:	2c00      	cmp	r4, #0
 8007422:	f000 80c0 	beq.w	80075a6 <_dtoa_r+0x8de>
 8007426:	4629      	mov	r1, r5
 8007428:	4622      	mov	r2, r4
 800742a:	4648      	mov	r0, r9
 800742c:	f000 fd12 	bl	8007e54 <__pow5mult>
 8007430:	9a02      	ldr	r2, [sp, #8]
 8007432:	4601      	mov	r1, r0
 8007434:	4605      	mov	r5, r0
 8007436:	4648      	mov	r0, r9
 8007438:	f000 fc6a 	bl	8007d10 <__multiply>
 800743c:	9902      	ldr	r1, [sp, #8]
 800743e:	4680      	mov	r8, r0
 8007440:	4648      	mov	r0, r9
 8007442:	f000 fb51 	bl	8007ae8 <_Bfree>
 8007446:	9b08      	ldr	r3, [sp, #32]
 8007448:	1b1b      	subs	r3, r3, r4
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	f000 80b1 	beq.w	80075b2 <_dtoa_r+0x8ea>
 8007450:	9a08      	ldr	r2, [sp, #32]
 8007452:	4641      	mov	r1, r8
 8007454:	4648      	mov	r0, r9
 8007456:	f000 fcfd 	bl	8007e54 <__pow5mult>
 800745a:	9002      	str	r0, [sp, #8]
 800745c:	2101      	movs	r1, #1
 800745e:	4648      	mov	r0, r9
 8007460:	f000 fc40 	bl	8007ce4 <__i2b>
 8007464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007466:	4604      	mov	r4, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 81d8 	beq.w	800781e <_dtoa_r+0xb56>
 800746e:	461a      	mov	r2, r3
 8007470:	4601      	mov	r1, r0
 8007472:	4648      	mov	r0, r9
 8007474:	f000 fcee 	bl	8007e54 <__pow5mult>
 8007478:	9b07      	ldr	r3, [sp, #28]
 800747a:	2b01      	cmp	r3, #1
 800747c:	4604      	mov	r4, r0
 800747e:	f300 809f 	bgt.w	80075c0 <_dtoa_r+0x8f8>
 8007482:	9b04      	ldr	r3, [sp, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 8097 	bne.w	80075b8 <_dtoa_r+0x8f0>
 800748a:	9b05      	ldr	r3, [sp, #20]
 800748c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007490:	2b00      	cmp	r3, #0
 8007492:	f040 8093 	bne.w	80075bc <_dtoa_r+0x8f4>
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800749c:	0d1b      	lsrs	r3, r3, #20
 800749e:	051b      	lsls	r3, r3, #20
 80074a0:	b133      	cbz	r3, 80074b0 <_dtoa_r+0x7e8>
 80074a2:	9b00      	ldr	r3, [sp, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	9b06      	ldr	r3, [sp, #24]
 80074aa:	3301      	adds	r3, #1
 80074ac:	9306      	str	r3, [sp, #24]
 80074ae:	2301      	movs	r3, #1
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 81b8 	beq.w	800782a <_dtoa_r+0xb62>
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074c0:	6918      	ldr	r0, [r3, #16]
 80074c2:	f000 fbc3 	bl	8007c4c <__hi0bits>
 80074c6:	f1c0 0020 	rsb	r0, r0, #32
 80074ca:	9b06      	ldr	r3, [sp, #24]
 80074cc:	4418      	add	r0, r3
 80074ce:	f010 001f 	ands.w	r0, r0, #31
 80074d2:	f000 8082 	beq.w	80075da <_dtoa_r+0x912>
 80074d6:	f1c0 0320 	rsb	r3, r0, #32
 80074da:	2b04      	cmp	r3, #4
 80074dc:	dd73      	ble.n	80075c6 <_dtoa_r+0x8fe>
 80074de:	9b00      	ldr	r3, [sp, #0]
 80074e0:	f1c0 001c 	rsb	r0, r0, #28
 80074e4:	4403      	add	r3, r0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	9b06      	ldr	r3, [sp, #24]
 80074ea:	4403      	add	r3, r0
 80074ec:	4406      	add	r6, r0
 80074ee:	9306      	str	r3, [sp, #24]
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd05      	ble.n	8007502 <_dtoa_r+0x83a>
 80074f6:	9902      	ldr	r1, [sp, #8]
 80074f8:	461a      	mov	r2, r3
 80074fa:	4648      	mov	r0, r9
 80074fc:	f000 fd04 	bl	8007f08 <__lshift>
 8007500:	9002      	str	r0, [sp, #8]
 8007502:	9b06      	ldr	r3, [sp, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dd05      	ble.n	8007514 <_dtoa_r+0x84c>
 8007508:	4621      	mov	r1, r4
 800750a:	461a      	mov	r2, r3
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fcfb 	bl	8007f08 <__lshift>
 8007512:	4604      	mov	r4, r0
 8007514:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d061      	beq.n	80075de <_dtoa_r+0x916>
 800751a:	9802      	ldr	r0, [sp, #8]
 800751c:	4621      	mov	r1, r4
 800751e:	f000 fd5f 	bl	8007fe0 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	da5b      	bge.n	80075de <_dtoa_r+0x916>
 8007526:	2300      	movs	r3, #0
 8007528:	9902      	ldr	r1, [sp, #8]
 800752a:	220a      	movs	r2, #10
 800752c:	4648      	mov	r0, r9
 800752e:	f000 fafd 	bl	8007b2c <__multadd>
 8007532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	f107 38ff 	add.w	r8, r7, #4294967295
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8177 	beq.w	800782e <_dtoa_r+0xb66>
 8007540:	4629      	mov	r1, r5
 8007542:	2300      	movs	r3, #0
 8007544:	220a      	movs	r2, #10
 8007546:	4648      	mov	r0, r9
 8007548:	f000 faf0 	bl	8007b2c <__multadd>
 800754c:	f1bb 0f00 	cmp.w	fp, #0
 8007550:	4605      	mov	r5, r0
 8007552:	dc6f      	bgt.n	8007634 <_dtoa_r+0x96c>
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	2b02      	cmp	r3, #2
 8007558:	dc49      	bgt.n	80075ee <_dtoa_r+0x926>
 800755a:	e06b      	b.n	8007634 <_dtoa_r+0x96c>
 800755c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800755e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007562:	e73c      	b.n	80073de <_dtoa_r+0x716>
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	40240000 	.word	0x40240000
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	1e5c      	subs	r4, r3, #1
 8007570:	9b08      	ldr	r3, [sp, #32]
 8007572:	42a3      	cmp	r3, r4
 8007574:	db09      	blt.n	800758a <_dtoa_r+0x8c2>
 8007576:	1b1c      	subs	r4, r3, r4
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f6bf af30 	bge.w	80073e0 <_dtoa_r+0x718>
 8007580:	9b00      	ldr	r3, [sp, #0]
 8007582:	9a03      	ldr	r2, [sp, #12]
 8007584:	1a9e      	subs	r6, r3, r2
 8007586:	2300      	movs	r3, #0
 8007588:	e72b      	b.n	80073e2 <_dtoa_r+0x71a>
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800758e:	9408      	str	r4, [sp, #32]
 8007590:	1ae3      	subs	r3, r4, r3
 8007592:	441a      	add	r2, r3
 8007594:	9e00      	ldr	r6, [sp, #0]
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	920d      	str	r2, [sp, #52]	@ 0x34
 800759a:	2400      	movs	r4, #0
 800759c:	e721      	b.n	80073e2 <_dtoa_r+0x71a>
 800759e:	9c08      	ldr	r4, [sp, #32]
 80075a0:	9e00      	ldr	r6, [sp, #0]
 80075a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80075a4:	e728      	b.n	80073f8 <_dtoa_r+0x730>
 80075a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80075aa:	e751      	b.n	8007450 <_dtoa_r+0x788>
 80075ac:	9a08      	ldr	r2, [sp, #32]
 80075ae:	9902      	ldr	r1, [sp, #8]
 80075b0:	e750      	b.n	8007454 <_dtoa_r+0x78c>
 80075b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80075b6:	e751      	b.n	800745c <_dtoa_r+0x794>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e779      	b.n	80074b0 <_dtoa_r+0x7e8>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	e777      	b.n	80074b0 <_dtoa_r+0x7e8>
 80075c0:	2300      	movs	r3, #0
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	e779      	b.n	80074ba <_dtoa_r+0x7f2>
 80075c6:	d093      	beq.n	80074f0 <_dtoa_r+0x828>
 80075c8:	9a00      	ldr	r2, [sp, #0]
 80075ca:	331c      	adds	r3, #28
 80075cc:	441a      	add	r2, r3
 80075ce:	9200      	str	r2, [sp, #0]
 80075d0:	9a06      	ldr	r2, [sp, #24]
 80075d2:	441a      	add	r2, r3
 80075d4:	441e      	add	r6, r3
 80075d6:	9206      	str	r2, [sp, #24]
 80075d8:	e78a      	b.n	80074f0 <_dtoa_r+0x828>
 80075da:	4603      	mov	r3, r0
 80075dc:	e7f4      	b.n	80075c8 <_dtoa_r+0x900>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	46b8      	mov	r8, r7
 80075e4:	dc20      	bgt.n	8007628 <_dtoa_r+0x960>
 80075e6:	469b      	mov	fp, r3
 80075e8:	9b07      	ldr	r3, [sp, #28]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	dd1e      	ble.n	800762c <_dtoa_r+0x964>
 80075ee:	f1bb 0f00 	cmp.w	fp, #0
 80075f2:	f47f adb1 	bne.w	8007158 <_dtoa_r+0x490>
 80075f6:	4621      	mov	r1, r4
 80075f8:	465b      	mov	r3, fp
 80075fa:	2205      	movs	r2, #5
 80075fc:	4648      	mov	r0, r9
 80075fe:	f000 fa95 	bl	8007b2c <__multadd>
 8007602:	4601      	mov	r1, r0
 8007604:	4604      	mov	r4, r0
 8007606:	9802      	ldr	r0, [sp, #8]
 8007608:	f000 fcea 	bl	8007fe0 <__mcmp>
 800760c:	2800      	cmp	r0, #0
 800760e:	f77f ada3 	ble.w	8007158 <_dtoa_r+0x490>
 8007612:	4656      	mov	r6, sl
 8007614:	2331      	movs	r3, #49	@ 0x31
 8007616:	f806 3b01 	strb.w	r3, [r6], #1
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	e59f      	b.n	8007160 <_dtoa_r+0x498>
 8007620:	9c03      	ldr	r4, [sp, #12]
 8007622:	46b8      	mov	r8, r7
 8007624:	4625      	mov	r5, r4
 8007626:	e7f4      	b.n	8007612 <_dtoa_r+0x94a>
 8007628:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800762c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8101 	beq.w	8007836 <_dtoa_r+0xb6e>
 8007634:	2e00      	cmp	r6, #0
 8007636:	dd05      	ble.n	8007644 <_dtoa_r+0x97c>
 8007638:	4629      	mov	r1, r5
 800763a:	4632      	mov	r2, r6
 800763c:	4648      	mov	r0, r9
 800763e:	f000 fc63 	bl	8007f08 <__lshift>
 8007642:	4605      	mov	r5, r0
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d05c      	beq.n	8007704 <_dtoa_r+0xa3c>
 800764a:	6869      	ldr	r1, [r5, #4]
 800764c:	4648      	mov	r0, r9
 800764e:	f000 fa0b 	bl	8007a68 <_Balloc>
 8007652:	4606      	mov	r6, r0
 8007654:	b928      	cbnz	r0, 8007662 <_dtoa_r+0x99a>
 8007656:	4b82      	ldr	r3, [pc, #520]	@ (8007860 <_dtoa_r+0xb98>)
 8007658:	4602      	mov	r2, r0
 800765a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800765e:	f7ff bb4a 	b.w	8006cf6 <_dtoa_r+0x2e>
 8007662:	692a      	ldr	r2, [r5, #16]
 8007664:	3202      	adds	r2, #2
 8007666:	0092      	lsls	r2, r2, #2
 8007668:	f105 010c 	add.w	r1, r5, #12
 800766c:	300c      	adds	r0, #12
 800766e:	f7ff fa8e 	bl	8006b8e <memcpy>
 8007672:	2201      	movs	r2, #1
 8007674:	4631      	mov	r1, r6
 8007676:	4648      	mov	r0, r9
 8007678:	f000 fc46 	bl	8007f08 <__lshift>
 800767c:	f10a 0301 	add.w	r3, sl, #1
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	eb0a 030b 	add.w	r3, sl, fp
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	462f      	mov	r7, r5
 8007690:	9306      	str	r3, [sp, #24]
 8007692:	4605      	mov	r5, r0
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	9802      	ldr	r0, [sp, #8]
 8007698:	4621      	mov	r1, r4
 800769a:	f103 3bff 	add.w	fp, r3, #4294967295
 800769e:	f7ff fa8b 	bl	8006bb8 <quorem>
 80076a2:	4603      	mov	r3, r0
 80076a4:	3330      	adds	r3, #48	@ 0x30
 80076a6:	9003      	str	r0, [sp, #12]
 80076a8:	4639      	mov	r1, r7
 80076aa:	9802      	ldr	r0, [sp, #8]
 80076ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ae:	f000 fc97 	bl	8007fe0 <__mcmp>
 80076b2:	462a      	mov	r2, r5
 80076b4:	9004      	str	r0, [sp, #16]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4648      	mov	r0, r9
 80076ba:	f000 fcad 	bl	8008018 <__mdiff>
 80076be:	68c2      	ldr	r2, [r0, #12]
 80076c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c2:	4606      	mov	r6, r0
 80076c4:	bb02      	cbnz	r2, 8007708 <_dtoa_r+0xa40>
 80076c6:	4601      	mov	r1, r0
 80076c8:	9802      	ldr	r0, [sp, #8]
 80076ca:	f000 fc89 	bl	8007fe0 <__mcmp>
 80076ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d0:	4602      	mov	r2, r0
 80076d2:	4631      	mov	r1, r6
 80076d4:	4648      	mov	r0, r9
 80076d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80076d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076da:	f000 fa05 	bl	8007ae8 <_Bfree>
 80076de:	9b07      	ldr	r3, [sp, #28]
 80076e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076e2:	9e00      	ldr	r6, [sp, #0]
 80076e4:	ea42 0103 	orr.w	r1, r2, r3
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	4319      	orrs	r1, r3
 80076ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ee:	d10d      	bne.n	800770c <_dtoa_r+0xa44>
 80076f0:	2b39      	cmp	r3, #57	@ 0x39
 80076f2:	d027      	beq.n	8007744 <_dtoa_r+0xa7c>
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	dd01      	ble.n	80076fe <_dtoa_r+0xa36>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	3331      	adds	r3, #49	@ 0x31
 80076fe:	f88b 3000 	strb.w	r3, [fp]
 8007702:	e52e      	b.n	8007162 <_dtoa_r+0x49a>
 8007704:	4628      	mov	r0, r5
 8007706:	e7b9      	b.n	800767c <_dtoa_r+0x9b4>
 8007708:	2201      	movs	r2, #1
 800770a:	e7e2      	b.n	80076d2 <_dtoa_r+0xa0a>
 800770c:	9904      	ldr	r1, [sp, #16]
 800770e:	2900      	cmp	r1, #0
 8007710:	db04      	blt.n	800771c <_dtoa_r+0xa54>
 8007712:	9807      	ldr	r0, [sp, #28]
 8007714:	4301      	orrs	r1, r0
 8007716:	9806      	ldr	r0, [sp, #24]
 8007718:	4301      	orrs	r1, r0
 800771a:	d120      	bne.n	800775e <_dtoa_r+0xa96>
 800771c:	2a00      	cmp	r2, #0
 800771e:	ddee      	ble.n	80076fe <_dtoa_r+0xa36>
 8007720:	9902      	ldr	r1, [sp, #8]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	4648      	mov	r0, r9
 8007728:	f000 fbee 	bl	8007f08 <__lshift>
 800772c:	4621      	mov	r1, r4
 800772e:	9002      	str	r0, [sp, #8]
 8007730:	f000 fc56 	bl	8007fe0 <__mcmp>
 8007734:	2800      	cmp	r0, #0
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	dc02      	bgt.n	8007740 <_dtoa_r+0xa78>
 800773a:	d1e0      	bne.n	80076fe <_dtoa_r+0xa36>
 800773c:	07da      	lsls	r2, r3, #31
 800773e:	d5de      	bpl.n	80076fe <_dtoa_r+0xa36>
 8007740:	2b39      	cmp	r3, #57	@ 0x39
 8007742:	d1da      	bne.n	80076fa <_dtoa_r+0xa32>
 8007744:	2339      	movs	r3, #57	@ 0x39
 8007746:	f88b 3000 	strb.w	r3, [fp]
 800774a:	4633      	mov	r3, r6
 800774c:	461e      	mov	r6, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007754:	2a39      	cmp	r2, #57	@ 0x39
 8007756:	d04e      	beq.n	80077f6 <_dtoa_r+0xb2e>
 8007758:	3201      	adds	r2, #1
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	e501      	b.n	8007162 <_dtoa_r+0x49a>
 800775e:	2a00      	cmp	r2, #0
 8007760:	dd03      	ble.n	800776a <_dtoa_r+0xaa2>
 8007762:	2b39      	cmp	r3, #57	@ 0x39
 8007764:	d0ee      	beq.n	8007744 <_dtoa_r+0xa7c>
 8007766:	3301      	adds	r3, #1
 8007768:	e7c9      	b.n	80076fe <_dtoa_r+0xa36>
 800776a:	9a00      	ldr	r2, [sp, #0]
 800776c:	9908      	ldr	r1, [sp, #32]
 800776e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007772:	428a      	cmp	r2, r1
 8007774:	d028      	beq.n	80077c8 <_dtoa_r+0xb00>
 8007776:	9902      	ldr	r1, [sp, #8]
 8007778:	2300      	movs	r3, #0
 800777a:	220a      	movs	r2, #10
 800777c:	4648      	mov	r0, r9
 800777e:	f000 f9d5 	bl	8007b2c <__multadd>
 8007782:	42af      	cmp	r7, r5
 8007784:	9002      	str	r0, [sp, #8]
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	f04f 020a 	mov.w	r2, #10
 800778e:	4639      	mov	r1, r7
 8007790:	4648      	mov	r0, r9
 8007792:	d107      	bne.n	80077a4 <_dtoa_r+0xadc>
 8007794:	f000 f9ca 	bl	8007b2c <__multadd>
 8007798:	4607      	mov	r7, r0
 800779a:	4605      	mov	r5, r0
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	e777      	b.n	8007694 <_dtoa_r+0x9cc>
 80077a4:	f000 f9c2 	bl	8007b2c <__multadd>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4607      	mov	r7, r0
 80077ac:	2300      	movs	r3, #0
 80077ae:	220a      	movs	r2, #10
 80077b0:	4648      	mov	r0, r9
 80077b2:	f000 f9bb 	bl	8007b2c <__multadd>
 80077b6:	4605      	mov	r5, r0
 80077b8:	e7f0      	b.n	800779c <_dtoa_r+0xad4>
 80077ba:	f1bb 0f00 	cmp.w	fp, #0
 80077be:	bfcc      	ite	gt
 80077c0:	465e      	movgt	r6, fp
 80077c2:	2601      	movle	r6, #1
 80077c4:	4456      	add	r6, sl
 80077c6:	2700      	movs	r7, #0
 80077c8:	9902      	ldr	r1, [sp, #8]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2201      	movs	r2, #1
 80077ce:	4648      	mov	r0, r9
 80077d0:	f000 fb9a 	bl	8007f08 <__lshift>
 80077d4:	4621      	mov	r1, r4
 80077d6:	9002      	str	r0, [sp, #8]
 80077d8:	f000 fc02 	bl	8007fe0 <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dcb4      	bgt.n	800774a <_dtoa_r+0xa82>
 80077e0:	d102      	bne.n	80077e8 <_dtoa_r+0xb20>
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d4b0      	bmi.n	800774a <_dtoa_r+0xa82>
 80077e8:	4633      	mov	r3, r6
 80077ea:	461e      	mov	r6, r3
 80077ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077f0:	2a30      	cmp	r2, #48	@ 0x30
 80077f2:	d0fa      	beq.n	80077ea <_dtoa_r+0xb22>
 80077f4:	e4b5      	b.n	8007162 <_dtoa_r+0x49a>
 80077f6:	459a      	cmp	sl, r3
 80077f8:	d1a8      	bne.n	800774c <_dtoa_r+0xa84>
 80077fa:	2331      	movs	r3, #49	@ 0x31
 80077fc:	f108 0801 	add.w	r8, r8, #1
 8007800:	f88a 3000 	strb.w	r3, [sl]
 8007804:	e4ad      	b.n	8007162 <_dtoa_r+0x49a>
 8007806:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007808:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007864 <_dtoa_r+0xb9c>
 800780c:	b11b      	cbz	r3, 8007816 <_dtoa_r+0xb4e>
 800780e:	f10a 0308 	add.w	r3, sl, #8
 8007812:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4650      	mov	r0, sl
 8007818:	b017      	add	sp, #92	@ 0x5c
 800781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	2b01      	cmp	r3, #1
 8007822:	f77f ae2e 	ble.w	8007482 <_dtoa_r+0x7ba>
 8007826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007828:	9308      	str	r3, [sp, #32]
 800782a:	2001      	movs	r0, #1
 800782c:	e64d      	b.n	80074ca <_dtoa_r+0x802>
 800782e:	f1bb 0f00 	cmp.w	fp, #0
 8007832:	f77f aed9 	ble.w	80075e8 <_dtoa_r+0x920>
 8007836:	4656      	mov	r6, sl
 8007838:	9802      	ldr	r0, [sp, #8]
 800783a:	4621      	mov	r1, r4
 800783c:	f7ff f9bc 	bl	8006bb8 <quorem>
 8007840:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007844:	f806 3b01 	strb.w	r3, [r6], #1
 8007848:	eba6 020a 	sub.w	r2, r6, sl
 800784c:	4593      	cmp	fp, r2
 800784e:	ddb4      	ble.n	80077ba <_dtoa_r+0xaf2>
 8007850:	9902      	ldr	r1, [sp, #8]
 8007852:	2300      	movs	r3, #0
 8007854:	220a      	movs	r2, #10
 8007856:	4648      	mov	r0, r9
 8007858:	f000 f968 	bl	8007b2c <__multadd>
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	e7eb      	b.n	8007838 <_dtoa_r+0xb70>
 8007860:	0800a7a1 	.word	0x0800a7a1
 8007864:	0800a725 	.word	0x0800a725

08007868 <_free_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4605      	mov	r5, r0
 800786c:	2900      	cmp	r1, #0
 800786e:	d041      	beq.n	80078f4 <_free_r+0x8c>
 8007870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007874:	1f0c      	subs	r4, r1, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfb8      	it	lt
 800787a:	18e4      	addlt	r4, r4, r3
 800787c:	f000 f8e8 	bl	8007a50 <__malloc_lock>
 8007880:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <_free_r+0x90>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	b933      	cbnz	r3, 8007894 <_free_r+0x2c>
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6014      	str	r4, [r2, #0]
 800788a:	4628      	mov	r0, r5
 800788c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007890:	f000 b8e4 	b.w	8007a5c <__malloc_unlock>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d908      	bls.n	80078aa <_free_r+0x42>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	1821      	adds	r1, r4, r0
 800789c:	428b      	cmp	r3, r1
 800789e:	bf01      	itttt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	1809      	addeq	r1, r1, r0
 80078a6:	6021      	streq	r1, [r4, #0]
 80078a8:	e7ed      	b.n	8007886 <_free_r+0x1e>
 80078aa:	461a      	mov	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b10b      	cbz	r3, 80078b4 <_free_r+0x4c>
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d9fa      	bls.n	80078aa <_free_r+0x42>
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	1850      	adds	r0, r2, r1
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d10b      	bne.n	80078d4 <_free_r+0x6c>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	4401      	add	r1, r0
 80078c0:	1850      	adds	r0, r2, r1
 80078c2:	4283      	cmp	r3, r0
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	d1e0      	bne.n	800788a <_free_r+0x22>
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	6053      	str	r3, [r2, #4]
 80078ce:	4408      	add	r0, r1
 80078d0:	6010      	str	r0, [r2, #0]
 80078d2:	e7da      	b.n	800788a <_free_r+0x22>
 80078d4:	d902      	bls.n	80078dc <_free_r+0x74>
 80078d6:	230c      	movs	r3, #12
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	e7d6      	b.n	800788a <_free_r+0x22>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	1821      	adds	r1, r4, r0
 80078e0:	428b      	cmp	r3, r1
 80078e2:	bf04      	itt	eq
 80078e4:	6819      	ldreq	r1, [r3, #0]
 80078e6:	685b      	ldreq	r3, [r3, #4]
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	bf04      	itt	eq
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	6054      	str	r4, [r2, #4]
 80078f2:	e7ca      	b.n	800788a <_free_r+0x22>
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	bf00      	nop
 80078f8:	20001cdc 	.word	0x20001cdc

080078fc <malloc>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	@ (8007908 <malloc+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f000 b825 	b.w	8007950 <_malloc_r>
 8007906:	bf00      	nop
 8007908:	2000001c 	.word	0x2000001c

0800790c <sbrk_aligned>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0f      	ldr	r6, [pc, #60]	@ (800794c <sbrk_aligned+0x40>)
 8007910:	460c      	mov	r4, r1
 8007912:	6831      	ldr	r1, [r6, #0]
 8007914:	4605      	mov	r5, r0
 8007916:	b911      	cbnz	r1, 800791e <sbrk_aligned+0x12>
 8007918:	f001 fe04 	bl	8009524 <_sbrk_r>
 800791c:	6030      	str	r0, [r6, #0]
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f001 fdff 	bl	8009524 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d103      	bne.n	8007932 <sbrk_aligned+0x26>
 800792a:	f04f 34ff 	mov.w	r4, #4294967295
 800792e:	4620      	mov	r0, r4
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	1cc4      	adds	r4, r0, #3
 8007934:	f024 0403 	bic.w	r4, r4, #3
 8007938:	42a0      	cmp	r0, r4
 800793a:	d0f8      	beq.n	800792e <sbrk_aligned+0x22>
 800793c:	1a21      	subs	r1, r4, r0
 800793e:	4628      	mov	r0, r5
 8007940:	f001 fdf0 	bl	8009524 <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d1f2      	bne.n	800792e <sbrk_aligned+0x22>
 8007948:	e7ef      	b.n	800792a <sbrk_aligned+0x1e>
 800794a:	bf00      	nop
 800794c:	20001cd8 	.word	0x20001cd8

08007950 <_malloc_r>:
 8007950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	f025 0503 	bic.w	r5, r5, #3
 800795a:	3508      	adds	r5, #8
 800795c:	2d0c      	cmp	r5, #12
 800795e:	bf38      	it	cc
 8007960:	250c      	movcc	r5, #12
 8007962:	2d00      	cmp	r5, #0
 8007964:	4606      	mov	r6, r0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d904      	bls.n	8007976 <_malloc_r+0x26>
 800796c:	230c      	movs	r3, #12
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a4c <_malloc_r+0xfc>
 800797a:	f000 f869 	bl	8007a50 <__malloc_lock>
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	461c      	mov	r4, r3
 8007984:	bb44      	cbnz	r4, 80079d8 <_malloc_r+0x88>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffbf 	bl	800790c <sbrk_aligned>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	4604      	mov	r4, r0
 8007992:	d158      	bne.n	8007a46 <_malloc_r+0xf6>
 8007994:	f8d8 4000 	ldr.w	r4, [r8]
 8007998:	4627      	mov	r7, r4
 800799a:	2f00      	cmp	r7, #0
 800799c:	d143      	bne.n	8007a26 <_malloc_r+0xd6>
 800799e:	2c00      	cmp	r4, #0
 80079a0:	d04b      	beq.n	8007a3a <_malloc_r+0xea>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4639      	mov	r1, r7
 80079a6:	4630      	mov	r0, r6
 80079a8:	eb04 0903 	add.w	r9, r4, r3
 80079ac:	f001 fdba 	bl	8009524 <_sbrk_r>
 80079b0:	4581      	cmp	r9, r0
 80079b2:	d142      	bne.n	8007a3a <_malloc_r+0xea>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	1a6d      	subs	r5, r5, r1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ffa6 	bl	800790c <sbrk_aligned>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d03a      	beq.n	8007a3a <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	442b      	add	r3, r5
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	bb62      	cbnz	r2, 8007a2c <_malloc_r+0xdc>
 80079d2:	f8c8 7000 	str.w	r7, [r8]
 80079d6:	e00f      	b.n	80079f8 <_malloc_r+0xa8>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	d420      	bmi.n	8007a20 <_malloc_r+0xd0>
 80079de:	2a0b      	cmp	r2, #11
 80079e0:	d917      	bls.n	8007a12 <_malloc_r+0xc2>
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	6059      	strne	r1, [r3, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	bf08      	it	eq
 80079f0:	f8c8 1000 	streq.w	r1, [r8]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 f82f 	bl	8007a5c <__malloc_unlock>
 80079fe:	f104 000b 	add.w	r0, r4, #11
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	f020 0007 	bic.w	r0, r0, #7
 8007a08:	1ac2      	subs	r2, r0, r3
 8007a0a:	bf1c      	itt	ne
 8007a0c:	1a1b      	subne	r3, r3, r0
 8007a0e:	50a3      	strne	r3, [r4, r2]
 8007a10:	e7af      	b.n	8007972 <_malloc_r+0x22>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	bf0c      	ite	eq
 8007a18:	f8c8 2000 	streq.w	r2, [r8]
 8007a1c:	605a      	strne	r2, [r3, #4]
 8007a1e:	e7eb      	b.n	80079f8 <_malloc_r+0xa8>
 8007a20:	4623      	mov	r3, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7ae      	b.n	8007984 <_malloc_r+0x34>
 8007a26:	463c      	mov	r4, r7
 8007a28:	687f      	ldr	r7, [r7, #4]
 8007a2a:	e7b6      	b.n	800799a <_malloc_r+0x4a>
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d1fb      	bne.n	8007a2c <_malloc_r+0xdc>
 8007a34:	2300      	movs	r3, #0
 8007a36:	6053      	str	r3, [r2, #4]
 8007a38:	e7de      	b.n	80079f8 <_malloc_r+0xa8>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f80c 	bl	8007a5c <__malloc_unlock>
 8007a44:	e794      	b.n	8007970 <_malloc_r+0x20>
 8007a46:	6005      	str	r5, [r0, #0]
 8007a48:	e7d6      	b.n	80079f8 <_malloc_r+0xa8>
 8007a4a:	bf00      	nop
 8007a4c:	20001cdc 	.word	0x20001cdc

08007a50 <__malloc_lock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_lock+0x8>)
 8007a52:	f7ff b89a 	b.w	8006b8a <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	20001cd4 	.word	0x20001cd4

08007a5c <__malloc_unlock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__malloc_unlock+0x8>)
 8007a5e:	f7ff b895 	b.w	8006b8c <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	20001cd4 	.word	0x20001cd4

08007a68 <_Balloc>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	69c6      	ldr	r6, [r0, #28]
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	460d      	mov	r5, r1
 8007a70:	b976      	cbnz	r6, 8007a90 <_Balloc+0x28>
 8007a72:	2010      	movs	r0, #16
 8007a74:	f7ff ff42 	bl	80078fc <malloc>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	61e0      	str	r0, [r4, #28]
 8007a7c:	b920      	cbnz	r0, 8007a88 <_Balloc+0x20>
 8007a7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <_Balloc+0x78>)
 8007a80:	4818      	ldr	r0, [pc, #96]	@ (8007ae4 <_Balloc+0x7c>)
 8007a82:	216b      	movs	r1, #107	@ 0x6b
 8007a84:	f001 fd68 	bl	8009558 <__assert_func>
 8007a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a8c:	6006      	str	r6, [r0, #0]
 8007a8e:	60c6      	str	r6, [r0, #12]
 8007a90:	69e6      	ldr	r6, [r4, #28]
 8007a92:	68f3      	ldr	r3, [r6, #12]
 8007a94:	b183      	cbz	r3, 8007ab8 <_Balloc+0x50>
 8007a96:	69e3      	ldr	r3, [r4, #28]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a9e:	b9b8      	cbnz	r0, 8007ad0 <_Balloc+0x68>
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	fa01 f605 	lsl.w	r6, r1, r5
 8007aa6:	1d72      	adds	r2, r6, #5
 8007aa8:	0092      	lsls	r2, r2, #2
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f001 fd72 	bl	8009594 <_calloc_r>
 8007ab0:	b160      	cbz	r0, 8007acc <_Balloc+0x64>
 8007ab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ab6:	e00e      	b.n	8007ad6 <_Balloc+0x6e>
 8007ab8:	2221      	movs	r2, #33	@ 0x21
 8007aba:	2104      	movs	r1, #4
 8007abc:	4620      	mov	r0, r4
 8007abe:	f001 fd69 	bl	8009594 <_calloc_r>
 8007ac2:	69e3      	ldr	r3, [r4, #28]
 8007ac4:	60f0      	str	r0, [r6, #12]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e4      	bne.n	8007a96 <_Balloc+0x2e>
 8007acc:	2000      	movs	r0, #0
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	6802      	ldr	r2, [r0, #0]
 8007ad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007adc:	e7f7      	b.n	8007ace <_Balloc+0x66>
 8007ade:	bf00      	nop
 8007ae0:	0800a732 	.word	0x0800a732
 8007ae4:	0800a7b2 	.word	0x0800a7b2

08007ae8 <_Bfree>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	69c6      	ldr	r6, [r0, #28]
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b976      	cbnz	r6, 8007b10 <_Bfree+0x28>
 8007af2:	2010      	movs	r0, #16
 8007af4:	f7ff ff02 	bl	80078fc <malloc>
 8007af8:	4602      	mov	r2, r0
 8007afa:	61e8      	str	r0, [r5, #28]
 8007afc:	b920      	cbnz	r0, 8007b08 <_Bfree+0x20>
 8007afe:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <_Bfree+0x3c>)
 8007b00:	4809      	ldr	r0, [pc, #36]	@ (8007b28 <_Bfree+0x40>)
 8007b02:	218f      	movs	r1, #143	@ 0x8f
 8007b04:	f001 fd28 	bl	8009558 <__assert_func>
 8007b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b0c:	6006      	str	r6, [r0, #0]
 8007b0e:	60c6      	str	r6, [r0, #12]
 8007b10:	b13c      	cbz	r4, 8007b22 <_Bfree+0x3a>
 8007b12:	69eb      	ldr	r3, [r5, #28]
 8007b14:	6862      	ldr	r2, [r4, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b1c:	6021      	str	r1, [r4, #0]
 8007b1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	0800a732 	.word	0x0800a732
 8007b28:	0800a7b2 	.word	0x0800a7b2

08007b2c <__multadd>:
 8007b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b30:	690d      	ldr	r5, [r1, #16]
 8007b32:	4607      	mov	r7, r0
 8007b34:	460c      	mov	r4, r1
 8007b36:	461e      	mov	r6, r3
 8007b38:	f101 0c14 	add.w	ip, r1, #20
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b42:	b299      	uxth	r1, r3
 8007b44:	fb02 6101 	mla	r1, r2, r1, r6
 8007b48:	0c1e      	lsrs	r6, r3, #16
 8007b4a:	0c0b      	lsrs	r3, r1, #16
 8007b4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b50:	b289      	uxth	r1, r1
 8007b52:	3001      	adds	r0, #1
 8007b54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b58:	4285      	cmp	r5, r0
 8007b5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b62:	dcec      	bgt.n	8007b3e <__multadd+0x12>
 8007b64:	b30e      	cbz	r6, 8007baa <__multadd+0x7e>
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	dc19      	bgt.n	8007ba0 <__multadd+0x74>
 8007b6c:	6861      	ldr	r1, [r4, #4]
 8007b6e:	4638      	mov	r0, r7
 8007b70:	3101      	adds	r1, #1
 8007b72:	f7ff ff79 	bl	8007a68 <_Balloc>
 8007b76:	4680      	mov	r8, r0
 8007b78:	b928      	cbnz	r0, 8007b86 <__multadd+0x5a>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <__multadd+0x84>)
 8007b7e:	480d      	ldr	r0, [pc, #52]	@ (8007bb4 <__multadd+0x88>)
 8007b80:	21ba      	movs	r1, #186	@ 0xba
 8007b82:	f001 fce9 	bl	8009558 <__assert_func>
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	3202      	adds	r2, #2
 8007b8a:	f104 010c 	add.w	r1, r4, #12
 8007b8e:	0092      	lsls	r2, r2, #2
 8007b90:	300c      	adds	r0, #12
 8007b92:	f7fe fffc 	bl	8006b8e <memcpy>
 8007b96:	4621      	mov	r1, r4
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ffa5 	bl	8007ae8 <_Bfree>
 8007b9e:	4644      	mov	r4, r8
 8007ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	615e      	str	r6, [r3, #20]
 8007ba8:	6125      	str	r5, [r4, #16]
 8007baa:	4620      	mov	r0, r4
 8007bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb0:	0800a7a1 	.word	0x0800a7a1
 8007bb4:	0800a7b2 	.word	0x0800a7b2

08007bb8 <__s2b>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	4615      	mov	r5, r2
 8007bc0:	461f      	mov	r7, r3
 8007bc2:	2209      	movs	r2, #9
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2201      	movs	r2, #1
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	db09      	blt.n	8007be8 <__s2b+0x30>
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff ff47 	bl	8007a68 <_Balloc>
 8007bda:	b940      	cbnz	r0, 8007bee <__s2b+0x36>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <__s2b+0x8c>)
 8007be0:	4819      	ldr	r0, [pc, #100]	@ (8007c48 <__s2b+0x90>)
 8007be2:	21d3      	movs	r1, #211	@ 0xd3
 8007be4:	f001 fcb8 	bl	8009558 <__assert_func>
 8007be8:	0052      	lsls	r2, r2, #1
 8007bea:	3101      	adds	r1, #1
 8007bec:	e7f0      	b.n	8007bd0 <__s2b+0x18>
 8007bee:	9b08      	ldr	r3, [sp, #32]
 8007bf0:	6143      	str	r3, [r0, #20]
 8007bf2:	2d09      	cmp	r5, #9
 8007bf4:	f04f 0301 	mov.w	r3, #1
 8007bf8:	6103      	str	r3, [r0, #16]
 8007bfa:	dd16      	ble.n	8007c2a <__s2b+0x72>
 8007bfc:	f104 0909 	add.w	r9, r4, #9
 8007c00:	46c8      	mov	r8, r9
 8007c02:	442c      	add	r4, r5
 8007c04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c08:	4601      	mov	r1, r0
 8007c0a:	3b30      	subs	r3, #48	@ 0x30
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ff8c 	bl	8007b2c <__multadd>
 8007c14:	45a0      	cmp	r8, r4
 8007c16:	d1f5      	bne.n	8007c04 <__s2b+0x4c>
 8007c18:	f1a5 0408 	sub.w	r4, r5, #8
 8007c1c:	444c      	add	r4, r9
 8007c1e:	1b2d      	subs	r5, r5, r4
 8007c20:	1963      	adds	r3, r4, r5
 8007c22:	42bb      	cmp	r3, r7
 8007c24:	db04      	blt.n	8007c30 <__s2b+0x78>
 8007c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2a:	340a      	adds	r4, #10
 8007c2c:	2509      	movs	r5, #9
 8007c2e:	e7f6      	b.n	8007c1e <__s2b+0x66>
 8007c30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c34:	4601      	mov	r1, r0
 8007c36:	3b30      	subs	r3, #48	@ 0x30
 8007c38:	220a      	movs	r2, #10
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7ff ff76 	bl	8007b2c <__multadd>
 8007c40:	e7ee      	b.n	8007c20 <__s2b+0x68>
 8007c42:	bf00      	nop
 8007c44:	0800a7a1 	.word	0x0800a7a1
 8007c48:	0800a7b2 	.word	0x0800a7b2

08007c4c <__hi0bits>:
 8007c4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c50:	4603      	mov	r3, r0
 8007c52:	bf36      	itet	cc
 8007c54:	0403      	lslcc	r3, r0, #16
 8007c56:	2000      	movcs	r0, #0
 8007c58:	2010      	movcc	r0, #16
 8007c5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c5e:	bf3c      	itt	cc
 8007c60:	021b      	lslcc	r3, r3, #8
 8007c62:	3008      	addcc	r0, #8
 8007c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c68:	bf3c      	itt	cc
 8007c6a:	011b      	lslcc	r3, r3, #4
 8007c6c:	3004      	addcc	r0, #4
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	bf3c      	itt	cc
 8007c74:	009b      	lslcc	r3, r3, #2
 8007c76:	3002      	addcc	r0, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db05      	blt.n	8007c88 <__hi0bits+0x3c>
 8007c7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c80:	f100 0001 	add.w	r0, r0, #1
 8007c84:	bf08      	it	eq
 8007c86:	2020      	moveq	r0, #32
 8007c88:	4770      	bx	lr

08007c8a <__lo0bits>:
 8007c8a:	6803      	ldr	r3, [r0, #0]
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	f013 0007 	ands.w	r0, r3, #7
 8007c92:	d00b      	beq.n	8007cac <__lo0bits+0x22>
 8007c94:	07d9      	lsls	r1, r3, #31
 8007c96:	d421      	bmi.n	8007cdc <__lo0bits+0x52>
 8007c98:	0798      	lsls	r0, r3, #30
 8007c9a:	bf49      	itett	mi
 8007c9c:	085b      	lsrmi	r3, r3, #1
 8007c9e:	089b      	lsrpl	r3, r3, #2
 8007ca0:	2001      	movmi	r0, #1
 8007ca2:	6013      	strmi	r3, [r2, #0]
 8007ca4:	bf5c      	itt	pl
 8007ca6:	6013      	strpl	r3, [r2, #0]
 8007ca8:	2002      	movpl	r0, #2
 8007caa:	4770      	bx	lr
 8007cac:	b299      	uxth	r1, r3
 8007cae:	b909      	cbnz	r1, 8007cb4 <__lo0bits+0x2a>
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	2010      	movs	r0, #16
 8007cb4:	b2d9      	uxtb	r1, r3
 8007cb6:	b909      	cbnz	r1, 8007cbc <__lo0bits+0x32>
 8007cb8:	3008      	adds	r0, #8
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	0719      	lsls	r1, r3, #28
 8007cbe:	bf04      	itt	eq
 8007cc0:	091b      	lsreq	r3, r3, #4
 8007cc2:	3004      	addeq	r0, #4
 8007cc4:	0799      	lsls	r1, r3, #30
 8007cc6:	bf04      	itt	eq
 8007cc8:	089b      	lsreq	r3, r3, #2
 8007cca:	3002      	addeq	r0, #2
 8007ccc:	07d9      	lsls	r1, r3, #31
 8007cce:	d403      	bmi.n	8007cd8 <__lo0bits+0x4e>
 8007cd0:	085b      	lsrs	r3, r3, #1
 8007cd2:	f100 0001 	add.w	r0, r0, #1
 8007cd6:	d003      	beq.n	8007ce0 <__lo0bits+0x56>
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	4770      	bx	lr
 8007cdc:	2000      	movs	r0, #0
 8007cde:	4770      	bx	lr
 8007ce0:	2020      	movs	r0, #32
 8007ce2:	4770      	bx	lr

08007ce4 <__i2b>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	2101      	movs	r1, #1
 8007cea:	f7ff febd 	bl	8007a68 <_Balloc>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <__i2b+0x1a>
 8007cf2:	4b05      	ldr	r3, [pc, #20]	@ (8007d08 <__i2b+0x24>)
 8007cf4:	4805      	ldr	r0, [pc, #20]	@ (8007d0c <__i2b+0x28>)
 8007cf6:	f240 1145 	movw	r1, #325	@ 0x145
 8007cfa:	f001 fc2d 	bl	8009558 <__assert_func>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	6144      	str	r4, [r0, #20]
 8007d02:	6103      	str	r3, [r0, #16]
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	0800a7a1 	.word	0x0800a7a1
 8007d0c:	0800a7b2 	.word	0x0800a7b2

08007d10 <__multiply>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4617      	mov	r7, r2
 8007d16:	690a      	ldr	r2, [r1, #16]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	bfa8      	it	ge
 8007d1e:	463b      	movge	r3, r7
 8007d20:	4689      	mov	r9, r1
 8007d22:	bfa4      	itt	ge
 8007d24:	460f      	movge	r7, r1
 8007d26:	4699      	movge	r9, r3
 8007d28:	693d      	ldr	r5, [r7, #16]
 8007d2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	eb05 060a 	add.w	r6, r5, sl
 8007d36:	42b3      	cmp	r3, r6
 8007d38:	b085      	sub	sp, #20
 8007d3a:	bfb8      	it	lt
 8007d3c:	3101      	addlt	r1, #1
 8007d3e:	f7ff fe93 	bl	8007a68 <_Balloc>
 8007d42:	b930      	cbnz	r0, 8007d52 <__multiply+0x42>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b41      	ldr	r3, [pc, #260]	@ (8007e4c <__multiply+0x13c>)
 8007d48:	4841      	ldr	r0, [pc, #260]	@ (8007e50 <__multiply+0x140>)
 8007d4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d4e:	f001 fc03 	bl	8009558 <__assert_func>
 8007d52:	f100 0414 	add.w	r4, r0, #20
 8007d56:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4573      	cmp	r3, lr
 8007d60:	d320      	bcc.n	8007da4 <__multiply+0x94>
 8007d62:	f107 0814 	add.w	r8, r7, #20
 8007d66:	f109 0114 	add.w	r1, r9, #20
 8007d6a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d6e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	1beb      	subs	r3, r5, r7
 8007d76:	3b15      	subs	r3, #21
 8007d78:	f023 0303 	bic.w	r3, r3, #3
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	3715      	adds	r7, #21
 8007d80:	42bd      	cmp	r5, r7
 8007d82:	bf38      	it	cc
 8007d84:	2304      	movcc	r3, #4
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	9103      	str	r1, [sp, #12]
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	d80c      	bhi.n	8007daa <__multiply+0x9a>
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	dd03      	ble.n	8007d9c <__multiply+0x8c>
 8007d94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d055      	beq.n	8007e48 <__multiply+0x138>
 8007d9c:	6106      	str	r6, [r0, #16]
 8007d9e:	b005      	add	sp, #20
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	f843 2b04 	str.w	r2, [r3], #4
 8007da8:	e7d9      	b.n	8007d5e <__multiply+0x4e>
 8007daa:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dae:	f1ba 0f00 	cmp.w	sl, #0
 8007db2:	d01f      	beq.n	8007df4 <__multiply+0xe4>
 8007db4:	46c4      	mov	ip, r8
 8007db6:	46a1      	mov	r9, r4
 8007db8:	2700      	movs	r7, #0
 8007dba:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dbe:	f8d9 3000 	ldr.w	r3, [r9]
 8007dc2:	fa1f fb82 	uxth.w	fp, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007dcc:	443b      	add	r3, r7
 8007dce:	f8d9 7000 	ldr.w	r7, [r9]
 8007dd2:	0c12      	lsrs	r2, r2, #16
 8007dd4:	0c3f      	lsrs	r7, r7, #16
 8007dd6:	fb0a 7202 	mla	r2, sl, r2, r7
 8007dda:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de4:	4565      	cmp	r5, ip
 8007de6:	f849 3b04 	str.w	r3, [r9], #4
 8007dea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007dee:	d8e4      	bhi.n	8007dba <__multiply+0xaa>
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	50e7      	str	r7, [r4, r3]
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dfa:	3104      	adds	r1, #4
 8007dfc:	f1b9 0f00 	cmp.w	r9, #0
 8007e00:	d020      	beq.n	8007e44 <__multiply+0x134>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	4647      	mov	r7, r8
 8007e06:	46a4      	mov	ip, r4
 8007e08:	f04f 0a00 	mov.w	sl, #0
 8007e0c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007e10:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007e14:	fb09 220b 	mla	r2, r9, fp, r2
 8007e18:	4452      	add	r2, sl
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e20:	f84c 3b04 	str.w	r3, [ip], #4
 8007e24:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e2c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e30:	fb09 330a 	mla	r3, r9, sl, r3
 8007e34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e38:	42bd      	cmp	r5, r7
 8007e3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e3e:	d8e5      	bhi.n	8007e0c <__multiply+0xfc>
 8007e40:	9a01      	ldr	r2, [sp, #4]
 8007e42:	50a3      	str	r3, [r4, r2]
 8007e44:	3404      	adds	r4, #4
 8007e46:	e79f      	b.n	8007d88 <__multiply+0x78>
 8007e48:	3e01      	subs	r6, #1
 8007e4a:	e7a1      	b.n	8007d90 <__multiply+0x80>
 8007e4c:	0800a7a1 	.word	0x0800a7a1
 8007e50:	0800a7b2 	.word	0x0800a7b2

08007e54 <__pow5mult>:
 8007e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4615      	mov	r5, r2
 8007e5a:	f012 0203 	ands.w	r2, r2, #3
 8007e5e:	4607      	mov	r7, r0
 8007e60:	460e      	mov	r6, r1
 8007e62:	d007      	beq.n	8007e74 <__pow5mult+0x20>
 8007e64:	4c25      	ldr	r4, [pc, #148]	@ (8007efc <__pow5mult+0xa8>)
 8007e66:	3a01      	subs	r2, #1
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6e:	f7ff fe5d 	bl	8007b2c <__multadd>
 8007e72:	4606      	mov	r6, r0
 8007e74:	10ad      	asrs	r5, r5, #2
 8007e76:	d03d      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007e78:	69fc      	ldr	r4, [r7, #28]
 8007e7a:	b97c      	cbnz	r4, 8007e9c <__pow5mult+0x48>
 8007e7c:	2010      	movs	r0, #16
 8007e7e:	f7ff fd3d 	bl	80078fc <malloc>
 8007e82:	4602      	mov	r2, r0
 8007e84:	61f8      	str	r0, [r7, #28]
 8007e86:	b928      	cbnz	r0, 8007e94 <__pow5mult+0x40>
 8007e88:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <__pow5mult+0xac>)
 8007e8a:	481e      	ldr	r0, [pc, #120]	@ (8007f04 <__pow5mult+0xb0>)
 8007e8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e90:	f001 fb62 	bl	8009558 <__assert_func>
 8007e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e98:	6004      	str	r4, [r0, #0]
 8007e9a:	60c4      	str	r4, [r0, #12]
 8007e9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea4:	b94c      	cbnz	r4, 8007eba <__pow5mult+0x66>
 8007ea6:	f240 2171 	movw	r1, #625	@ 0x271
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ff1a 	bl	8007ce4 <__i2b>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	07eb      	lsls	r3, r5, #31
 8007ec0:	d50a      	bpl.n	8007ed8 <__pow5mult+0x84>
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ff22 	bl	8007d10 <__multiply>
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f7ff fe09 	bl	8007ae8 <_Bfree>
 8007ed6:	4646      	mov	r6, r8
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	d00b      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	b938      	cbnz	r0, 8007ef0 <__pow5mult+0x9c>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff ff13 	bl	8007d10 <__multiply>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	f8c0 9000 	str.w	r9, [r0]
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	e7e4      	b.n	8007ebe <__pow5mult+0x6a>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	bf00      	nop
 8007efc:	0800a8c4 	.word	0x0800a8c4
 8007f00:	0800a732 	.word	0x0800a732
 8007f04:	0800a7b2 	.word	0x0800a7b2

08007f08 <__lshift>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6849      	ldr	r1, [r1, #4]
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	4607      	mov	r7, r0
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f20:	f108 0601 	add.w	r6, r8, #1
 8007f24:	42b3      	cmp	r3, r6
 8007f26:	db0b      	blt.n	8007f40 <__lshift+0x38>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fd9d 	bl	8007a68 <_Balloc>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b948      	cbnz	r0, 8007f46 <__lshift+0x3e>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b28      	ldr	r3, [pc, #160]	@ (8007fd8 <__lshift+0xd0>)
 8007f36:	4829      	ldr	r0, [pc, #164]	@ (8007fdc <__lshift+0xd4>)
 8007f38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f3c:	f001 fb0c 	bl	8009558 <__assert_func>
 8007f40:	3101      	adds	r1, #1
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	e7ee      	b.n	8007f24 <__lshift+0x1c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f100 0114 	add.w	r1, r0, #20
 8007f4c:	f100 0210 	add.w	r2, r0, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	4553      	cmp	r3, sl
 8007f54:	db33      	blt.n	8007fbe <__lshift+0xb6>
 8007f56:	6920      	ldr	r0, [r4, #16]
 8007f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f5c:	f104 0314 	add.w	r3, r4, #20
 8007f60:	f019 091f 	ands.w	r9, r9, #31
 8007f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f6c:	d02b      	beq.n	8007fc6 <__lshift+0xbe>
 8007f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f72:	468a      	mov	sl, r1
 8007f74:	2200      	movs	r2, #0
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	fa00 f009 	lsl.w	r0, r0, r9
 8007f7c:	4310      	orrs	r0, r2
 8007f7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	459c      	cmp	ip, r3
 8007f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f8c:	d8f3      	bhi.n	8007f76 <__lshift+0x6e>
 8007f8e:	ebac 0304 	sub.w	r3, ip, r4
 8007f92:	3b15      	subs	r3, #21
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	3304      	adds	r3, #4
 8007f9a:	f104 0015 	add.w	r0, r4, #21
 8007f9e:	4560      	cmp	r0, ip
 8007fa0:	bf88      	it	hi
 8007fa2:	2304      	movhi	r3, #4
 8007fa4:	50ca      	str	r2, [r1, r3]
 8007fa6:	b10a      	cbz	r2, 8007fac <__lshift+0xa4>
 8007fa8:	f108 0602 	add.w	r6, r8, #2
 8007fac:	3e01      	subs	r6, #1
 8007fae:	4638      	mov	r0, r7
 8007fb0:	612e      	str	r6, [r5, #16]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	f7ff fd98 	bl	8007ae8 <_Bfree>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	e7c5      	b.n	8007f52 <__lshift+0x4a>
 8007fc6:	3904      	subs	r1, #4
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd0:	459c      	cmp	ip, r3
 8007fd2:	d8f9      	bhi.n	8007fc8 <__lshift+0xc0>
 8007fd4:	e7ea      	b.n	8007fac <__lshift+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	0800a7a1 	.word	0x0800a7a1
 8007fdc:	0800a7b2 	.word	0x0800a7b2

08007fe0 <__mcmp>:
 8007fe0:	690a      	ldr	r2, [r1, #16]
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6900      	ldr	r0, [r0, #16]
 8007fe6:	1a80      	subs	r0, r0, r2
 8007fe8:	b530      	push	{r4, r5, lr}
 8007fea:	d10e      	bne.n	800800a <__mcmp+0x2a>
 8007fec:	3314      	adds	r3, #20
 8007fee:	3114      	adds	r1, #20
 8007ff0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ff4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ff8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ffc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008000:	4295      	cmp	r5, r2
 8008002:	d003      	beq.n	800800c <__mcmp+0x2c>
 8008004:	d205      	bcs.n	8008012 <__mcmp+0x32>
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	bd30      	pop	{r4, r5, pc}
 800800c:	42a3      	cmp	r3, r4
 800800e:	d3f3      	bcc.n	8007ff8 <__mcmp+0x18>
 8008010:	e7fb      	b.n	800800a <__mcmp+0x2a>
 8008012:	2001      	movs	r0, #1
 8008014:	e7f9      	b.n	800800a <__mcmp+0x2a>
	...

08008018 <__mdiff>:
 8008018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4689      	mov	r9, r1
 800801e:	4606      	mov	r6, r0
 8008020:	4611      	mov	r1, r2
 8008022:	4648      	mov	r0, r9
 8008024:	4614      	mov	r4, r2
 8008026:	f7ff ffdb 	bl	8007fe0 <__mcmp>
 800802a:	1e05      	subs	r5, r0, #0
 800802c:	d112      	bne.n	8008054 <__mdiff+0x3c>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fd19 	bl	8007a68 <_Balloc>
 8008036:	4602      	mov	r2, r0
 8008038:	b928      	cbnz	r0, 8008046 <__mdiff+0x2e>
 800803a:	4b3f      	ldr	r3, [pc, #252]	@ (8008138 <__mdiff+0x120>)
 800803c:	f240 2137 	movw	r1, #567	@ 0x237
 8008040:	483e      	ldr	r0, [pc, #248]	@ (800813c <__mdiff+0x124>)
 8008042:	f001 fa89 	bl	8009558 <__assert_func>
 8008046:	2301      	movs	r3, #1
 8008048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800804c:	4610      	mov	r0, r2
 800804e:	b003      	add	sp, #12
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	bfbc      	itt	lt
 8008056:	464b      	movlt	r3, r9
 8008058:	46a1      	movlt	r9, r4
 800805a:	4630      	mov	r0, r6
 800805c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008060:	bfba      	itte	lt
 8008062:	461c      	movlt	r4, r3
 8008064:	2501      	movlt	r5, #1
 8008066:	2500      	movge	r5, #0
 8008068:	f7ff fcfe 	bl	8007a68 <_Balloc>
 800806c:	4602      	mov	r2, r0
 800806e:	b918      	cbnz	r0, 8008078 <__mdiff+0x60>
 8008070:	4b31      	ldr	r3, [pc, #196]	@ (8008138 <__mdiff+0x120>)
 8008072:	f240 2145 	movw	r1, #581	@ 0x245
 8008076:	e7e3      	b.n	8008040 <__mdiff+0x28>
 8008078:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800807c:	6926      	ldr	r6, [r4, #16]
 800807e:	60c5      	str	r5, [r0, #12]
 8008080:	f109 0310 	add.w	r3, r9, #16
 8008084:	f109 0514 	add.w	r5, r9, #20
 8008088:	f104 0e14 	add.w	lr, r4, #20
 800808c:	f100 0b14 	add.w	fp, r0, #20
 8008090:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008094:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	46d9      	mov	r9, fp
 800809c:	f04f 0c00 	mov.w	ip, #0
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	fa1f f38a 	uxth.w	r3, sl
 80080b0:	4619      	mov	r1, r3
 80080b2:	b283      	uxth	r3, r0
 80080b4:	1acb      	subs	r3, r1, r3
 80080b6:	0c00      	lsrs	r0, r0, #16
 80080b8:	4463      	add	r3, ip
 80080ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080c8:	4576      	cmp	r6, lr
 80080ca:	f849 3b04 	str.w	r3, [r9], #4
 80080ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080d2:	d8e5      	bhi.n	80080a0 <__mdiff+0x88>
 80080d4:	1b33      	subs	r3, r6, r4
 80080d6:	3b15      	subs	r3, #21
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	3415      	adds	r4, #21
 80080de:	3304      	adds	r3, #4
 80080e0:	42a6      	cmp	r6, r4
 80080e2:	bf38      	it	cc
 80080e4:	2304      	movcc	r3, #4
 80080e6:	441d      	add	r5, r3
 80080e8:	445b      	add	r3, fp
 80080ea:	461e      	mov	r6, r3
 80080ec:	462c      	mov	r4, r5
 80080ee:	4544      	cmp	r4, r8
 80080f0:	d30e      	bcc.n	8008110 <__mdiff+0xf8>
 80080f2:	f108 0103 	add.w	r1, r8, #3
 80080f6:	1b49      	subs	r1, r1, r5
 80080f8:	f021 0103 	bic.w	r1, r1, #3
 80080fc:	3d03      	subs	r5, #3
 80080fe:	45a8      	cmp	r8, r5
 8008100:	bf38      	it	cc
 8008102:	2100      	movcc	r1, #0
 8008104:	440b      	add	r3, r1
 8008106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800810a:	b191      	cbz	r1, 8008132 <__mdiff+0x11a>
 800810c:	6117      	str	r7, [r2, #16]
 800810e:	e79d      	b.n	800804c <__mdiff+0x34>
 8008110:	f854 1b04 	ldr.w	r1, [r4], #4
 8008114:	46e6      	mov	lr, ip
 8008116:	0c08      	lsrs	r0, r1, #16
 8008118:	fa1c fc81 	uxtah	ip, ip, r1
 800811c:	4471      	add	r1, lr
 800811e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008122:	b289      	uxth	r1, r1
 8008124:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008128:	f846 1b04 	str.w	r1, [r6], #4
 800812c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008130:	e7dd      	b.n	80080ee <__mdiff+0xd6>
 8008132:	3f01      	subs	r7, #1
 8008134:	e7e7      	b.n	8008106 <__mdiff+0xee>
 8008136:	bf00      	nop
 8008138:	0800a7a1 	.word	0x0800a7a1
 800813c:	0800a7b2 	.word	0x0800a7b2

08008140 <__ulp>:
 8008140:	b082      	sub	sp, #8
 8008142:	ed8d 0b00 	vstr	d0, [sp]
 8008146:	9a01      	ldr	r2, [sp, #4]
 8008148:	4b0f      	ldr	r3, [pc, #60]	@ (8008188 <__ulp+0x48>)
 800814a:	4013      	ands	r3, r2
 800814c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc08      	bgt.n	8008166 <__ulp+0x26>
 8008154:	425b      	negs	r3, r3
 8008156:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800815a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800815e:	da04      	bge.n	800816a <__ulp+0x2a>
 8008160:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008164:	4113      	asrs	r3, r2
 8008166:	2200      	movs	r2, #0
 8008168:	e008      	b.n	800817c <__ulp+0x3c>
 800816a:	f1a2 0314 	sub.w	r3, r2, #20
 800816e:	2b1e      	cmp	r3, #30
 8008170:	bfda      	itte	le
 8008172:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008176:	40da      	lsrle	r2, r3
 8008178:	2201      	movgt	r2, #1
 800817a:	2300      	movs	r3, #0
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	ec41 0b10 	vmov	d0, r0, r1
 8008184:	b002      	add	sp, #8
 8008186:	4770      	bx	lr
 8008188:	7ff00000 	.word	0x7ff00000

0800818c <__b2d>:
 800818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008190:	6906      	ldr	r6, [r0, #16]
 8008192:	f100 0814 	add.w	r8, r0, #20
 8008196:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800819a:	1f37      	subs	r7, r6, #4
 800819c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081a0:	4610      	mov	r0, r2
 80081a2:	f7ff fd53 	bl	8007c4c <__hi0bits>
 80081a6:	f1c0 0320 	rsb	r3, r0, #32
 80081aa:	280a      	cmp	r0, #10
 80081ac:	600b      	str	r3, [r1, #0]
 80081ae:	491b      	ldr	r1, [pc, #108]	@ (800821c <__b2d+0x90>)
 80081b0:	dc15      	bgt.n	80081de <__b2d+0x52>
 80081b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80081b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80081ba:	45b8      	cmp	r8, r7
 80081bc:	ea43 0501 	orr.w	r5, r3, r1
 80081c0:	bf34      	ite	cc
 80081c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081c6:	2300      	movcs	r3, #0
 80081c8:	3015      	adds	r0, #21
 80081ca:	fa02 f000 	lsl.w	r0, r2, r0
 80081ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80081d2:	4303      	orrs	r3, r0
 80081d4:	461c      	mov	r4, r3
 80081d6:	ec45 4b10 	vmov	d0, r4, r5
 80081da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081de:	45b8      	cmp	r8, r7
 80081e0:	bf3a      	itte	cc
 80081e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80081ea:	2300      	movcs	r3, #0
 80081ec:	380b      	subs	r0, #11
 80081ee:	d012      	beq.n	8008216 <__b2d+0x8a>
 80081f0:	f1c0 0120 	rsb	r1, r0, #32
 80081f4:	fa23 f401 	lsr.w	r4, r3, r1
 80081f8:	4082      	lsls	r2, r0
 80081fa:	4322      	orrs	r2, r4
 80081fc:	4547      	cmp	r7, r8
 80081fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008202:	bf8c      	ite	hi
 8008204:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008208:	2200      	movls	r2, #0
 800820a:	4083      	lsls	r3, r0
 800820c:	40ca      	lsrs	r2, r1
 800820e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008212:	4313      	orrs	r3, r2
 8008214:	e7de      	b.n	80081d4 <__b2d+0x48>
 8008216:	ea42 0501 	orr.w	r5, r2, r1
 800821a:	e7db      	b.n	80081d4 <__b2d+0x48>
 800821c:	3ff00000 	.word	0x3ff00000

08008220 <__d2b>:
 8008220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008224:	460f      	mov	r7, r1
 8008226:	2101      	movs	r1, #1
 8008228:	ec59 8b10 	vmov	r8, r9, d0
 800822c:	4616      	mov	r6, r2
 800822e:	f7ff fc1b 	bl	8007a68 <_Balloc>
 8008232:	4604      	mov	r4, r0
 8008234:	b930      	cbnz	r0, 8008244 <__d2b+0x24>
 8008236:	4602      	mov	r2, r0
 8008238:	4b23      	ldr	r3, [pc, #140]	@ (80082c8 <__d2b+0xa8>)
 800823a:	4824      	ldr	r0, [pc, #144]	@ (80082cc <__d2b+0xac>)
 800823c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008240:	f001 f98a 	bl	8009558 <__assert_func>
 8008244:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800824c:	b10d      	cbz	r5, 8008252 <__d2b+0x32>
 800824e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	f1b8 0300 	subs.w	r3, r8, #0
 8008258:	d023      	beq.n	80082a2 <__d2b+0x82>
 800825a:	4668      	mov	r0, sp
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	f7ff fd14 	bl	8007c8a <__lo0bits>
 8008262:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008266:	b1d0      	cbz	r0, 800829e <__d2b+0x7e>
 8008268:	f1c0 0320 	rsb	r3, r0, #32
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	430b      	orrs	r3, r1
 8008272:	40c2      	lsrs	r2, r0
 8008274:	6163      	str	r3, [r4, #20]
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	61a3      	str	r3, [r4, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	bf0c      	ite	eq
 8008280:	2201      	moveq	r2, #1
 8008282:	2202      	movne	r2, #2
 8008284:	6122      	str	r2, [r4, #16]
 8008286:	b1a5      	cbz	r5, 80082b2 <__d2b+0x92>
 8008288:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800828c:	4405      	add	r5, r0
 800828e:	603d      	str	r5, [r7, #0]
 8008290:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008294:	6030      	str	r0, [r6, #0]
 8008296:	4620      	mov	r0, r4
 8008298:	b003      	add	sp, #12
 800829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829e:	6161      	str	r1, [r4, #20]
 80082a0:	e7ea      	b.n	8008278 <__d2b+0x58>
 80082a2:	a801      	add	r0, sp, #4
 80082a4:	f7ff fcf1 	bl	8007c8a <__lo0bits>
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	6163      	str	r3, [r4, #20]
 80082ac:	3020      	adds	r0, #32
 80082ae:	2201      	movs	r2, #1
 80082b0:	e7e8      	b.n	8008284 <__d2b+0x64>
 80082b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082ba:	6038      	str	r0, [r7, #0]
 80082bc:	6918      	ldr	r0, [r3, #16]
 80082be:	f7ff fcc5 	bl	8007c4c <__hi0bits>
 80082c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082c6:	e7e5      	b.n	8008294 <__d2b+0x74>
 80082c8:	0800a7a1 	.word	0x0800a7a1
 80082cc:	0800a7b2 	.word	0x0800a7b2

080082d0 <__ratio>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b085      	sub	sp, #20
 80082d6:	e9cd 1000 	strd	r1, r0, [sp]
 80082da:	a902      	add	r1, sp, #8
 80082dc:	f7ff ff56 	bl	800818c <__b2d>
 80082e0:	9800      	ldr	r0, [sp, #0]
 80082e2:	a903      	add	r1, sp, #12
 80082e4:	ec55 4b10 	vmov	r4, r5, d0
 80082e8:	f7ff ff50 	bl	800818c <__b2d>
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	6919      	ldr	r1, [r3, #16]
 80082f0:	9b00      	ldr	r3, [sp, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	1ac9      	subs	r1, r1, r3
 80082f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	ec5b ab10 	vmov	sl, fp, d0
 8008300:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfce      	itee	gt
 8008308:	462a      	movgt	r2, r5
 800830a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800830e:	465a      	movle	r2, fp
 8008310:	462f      	mov	r7, r5
 8008312:	46d9      	mov	r9, fp
 8008314:	bfcc      	ite	gt
 8008316:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800831a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800831e:	464b      	mov	r3, r9
 8008320:	4652      	mov	r2, sl
 8008322:	4620      	mov	r0, r4
 8008324:	4639      	mov	r1, r7
 8008326:	f7f8 fa91 	bl	800084c <__aeabi_ddiv>
 800832a:	ec41 0b10 	vmov	d0, r0, r1
 800832e:	b005      	add	sp, #20
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008334 <__copybits>:
 8008334:	3901      	subs	r1, #1
 8008336:	b570      	push	{r4, r5, r6, lr}
 8008338:	1149      	asrs	r1, r1, #5
 800833a:	6914      	ldr	r4, [r2, #16]
 800833c:	3101      	adds	r1, #1
 800833e:	f102 0314 	add.w	r3, r2, #20
 8008342:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008346:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800834a:	1f05      	subs	r5, r0, #4
 800834c:	42a3      	cmp	r3, r4
 800834e:	d30c      	bcc.n	800836a <__copybits+0x36>
 8008350:	1aa3      	subs	r3, r4, r2
 8008352:	3b11      	subs	r3, #17
 8008354:	f023 0303 	bic.w	r3, r3, #3
 8008358:	3211      	adds	r2, #17
 800835a:	42a2      	cmp	r2, r4
 800835c:	bf88      	it	hi
 800835e:	2300      	movhi	r3, #0
 8008360:	4418      	add	r0, r3
 8008362:	2300      	movs	r3, #0
 8008364:	4288      	cmp	r0, r1
 8008366:	d305      	bcc.n	8008374 <__copybits+0x40>
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	f853 6b04 	ldr.w	r6, [r3], #4
 800836e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008372:	e7eb      	b.n	800834c <__copybits+0x18>
 8008374:	f840 3b04 	str.w	r3, [r0], #4
 8008378:	e7f4      	b.n	8008364 <__copybits+0x30>

0800837a <__any_on>:
 800837a:	f100 0214 	add.w	r2, r0, #20
 800837e:	6900      	ldr	r0, [r0, #16]
 8008380:	114b      	asrs	r3, r1, #5
 8008382:	4298      	cmp	r0, r3
 8008384:	b510      	push	{r4, lr}
 8008386:	db11      	blt.n	80083ac <__any_on+0x32>
 8008388:	dd0a      	ble.n	80083a0 <__any_on+0x26>
 800838a:	f011 011f 	ands.w	r1, r1, #31
 800838e:	d007      	beq.n	80083a0 <__any_on+0x26>
 8008390:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008394:	fa24 f001 	lsr.w	r0, r4, r1
 8008398:	fa00 f101 	lsl.w	r1, r0, r1
 800839c:	428c      	cmp	r4, r1
 800839e:	d10b      	bne.n	80083b8 <__any_on+0x3e>
 80083a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d803      	bhi.n	80083b0 <__any_on+0x36>
 80083a8:	2000      	movs	r0, #0
 80083aa:	bd10      	pop	{r4, pc}
 80083ac:	4603      	mov	r3, r0
 80083ae:	e7f7      	b.n	80083a0 <__any_on+0x26>
 80083b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d0f5      	beq.n	80083a4 <__any_on+0x2a>
 80083b8:	2001      	movs	r0, #1
 80083ba:	e7f6      	b.n	80083aa <__any_on+0x30>

080083bc <sulp>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	4604      	mov	r4, r0
 80083c0:	460d      	mov	r5, r1
 80083c2:	ec45 4b10 	vmov	d0, r4, r5
 80083c6:	4616      	mov	r6, r2
 80083c8:	f7ff feba 	bl	8008140 <__ulp>
 80083cc:	ec51 0b10 	vmov	r0, r1, d0
 80083d0:	b17e      	cbz	r6, 80083f2 <sulp+0x36>
 80083d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dd09      	ble.n	80083f2 <sulp+0x36>
 80083de:	051b      	lsls	r3, r3, #20
 80083e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80083e4:	2400      	movs	r4, #0
 80083e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083ea:	4622      	mov	r2, r4
 80083ec:	462b      	mov	r3, r5
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	ec41 0b10 	vmov	d0, r0, r1
 80083f6:	bd70      	pop	{r4, r5, r6, pc}

080083f8 <_strtod_l>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	b09f      	sub	sp, #124	@ 0x7c
 80083fe:	460c      	mov	r4, r1
 8008400:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008402:	2200      	movs	r2, #0
 8008404:	921a      	str	r2, [sp, #104]	@ 0x68
 8008406:	9005      	str	r0, [sp, #20]
 8008408:	f04f 0a00 	mov.w	sl, #0
 800840c:	f04f 0b00 	mov.w	fp, #0
 8008410:	460a      	mov	r2, r1
 8008412:	9219      	str	r2, [sp, #100]	@ 0x64
 8008414:	7811      	ldrb	r1, [r2, #0]
 8008416:	292b      	cmp	r1, #43	@ 0x2b
 8008418:	d04a      	beq.n	80084b0 <_strtod_l+0xb8>
 800841a:	d838      	bhi.n	800848e <_strtod_l+0x96>
 800841c:	290d      	cmp	r1, #13
 800841e:	d832      	bhi.n	8008486 <_strtod_l+0x8e>
 8008420:	2908      	cmp	r1, #8
 8008422:	d832      	bhi.n	800848a <_strtod_l+0x92>
 8008424:	2900      	cmp	r1, #0
 8008426:	d03b      	beq.n	80084a0 <_strtod_l+0xa8>
 8008428:	2200      	movs	r2, #0
 800842a:	920e      	str	r2, [sp, #56]	@ 0x38
 800842c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800842e:	782a      	ldrb	r2, [r5, #0]
 8008430:	2a30      	cmp	r2, #48	@ 0x30
 8008432:	f040 80b2 	bne.w	800859a <_strtod_l+0x1a2>
 8008436:	786a      	ldrb	r2, [r5, #1]
 8008438:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800843c:	2a58      	cmp	r2, #88	@ 0x58
 800843e:	d16e      	bne.n	800851e <_strtod_l+0x126>
 8008440:	9302      	str	r3, [sp, #8]
 8008442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	ab1a      	add	r3, sp, #104	@ 0x68
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4a8f      	ldr	r2, [pc, #572]	@ (8008688 <_strtod_l+0x290>)
 800844c:	9805      	ldr	r0, [sp, #20]
 800844e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008450:	a919      	add	r1, sp, #100	@ 0x64
 8008452:	f001 f91b 	bl	800968c <__gethex>
 8008456:	f010 060f 	ands.w	r6, r0, #15
 800845a:	4604      	mov	r4, r0
 800845c:	d005      	beq.n	800846a <_strtod_l+0x72>
 800845e:	2e06      	cmp	r6, #6
 8008460:	d128      	bne.n	80084b4 <_strtod_l+0xbc>
 8008462:	3501      	adds	r5, #1
 8008464:	2300      	movs	r3, #0
 8008466:	9519      	str	r5, [sp, #100]	@ 0x64
 8008468:	930e      	str	r3, [sp, #56]	@ 0x38
 800846a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 858e 	bne.w	8008f8e <_strtod_l+0xb96>
 8008472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008474:	b1cb      	cbz	r3, 80084aa <_strtod_l+0xb2>
 8008476:	4652      	mov	r2, sl
 8008478:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800847c:	ec43 2b10 	vmov	d0, r2, r3
 8008480:	b01f      	add	sp, #124	@ 0x7c
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	2920      	cmp	r1, #32
 8008488:	d1ce      	bne.n	8008428 <_strtod_l+0x30>
 800848a:	3201      	adds	r2, #1
 800848c:	e7c1      	b.n	8008412 <_strtod_l+0x1a>
 800848e:	292d      	cmp	r1, #45	@ 0x2d
 8008490:	d1ca      	bne.n	8008428 <_strtod_l+0x30>
 8008492:	2101      	movs	r1, #1
 8008494:	910e      	str	r1, [sp, #56]	@ 0x38
 8008496:	1c51      	adds	r1, r2, #1
 8008498:	9119      	str	r1, [sp, #100]	@ 0x64
 800849a:	7852      	ldrb	r2, [r2, #1]
 800849c:	2a00      	cmp	r2, #0
 800849e:	d1c5      	bne.n	800842c <_strtod_l+0x34>
 80084a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8570 	bne.w	8008f8a <_strtod_l+0xb92>
 80084aa:	4652      	mov	r2, sl
 80084ac:	465b      	mov	r3, fp
 80084ae:	e7e5      	b.n	800847c <_strtod_l+0x84>
 80084b0:	2100      	movs	r1, #0
 80084b2:	e7ef      	b.n	8008494 <_strtod_l+0x9c>
 80084b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084b6:	b13a      	cbz	r2, 80084c8 <_strtod_l+0xd0>
 80084b8:	2135      	movs	r1, #53	@ 0x35
 80084ba:	a81c      	add	r0, sp, #112	@ 0x70
 80084bc:	f7ff ff3a 	bl	8008334 <__copybits>
 80084c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084c2:	9805      	ldr	r0, [sp, #20]
 80084c4:	f7ff fb10 	bl	8007ae8 <_Bfree>
 80084c8:	3e01      	subs	r6, #1
 80084ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084cc:	2e04      	cmp	r6, #4
 80084ce:	d806      	bhi.n	80084de <_strtod_l+0xe6>
 80084d0:	e8df f006 	tbb	[pc, r6]
 80084d4:	201d0314 	.word	0x201d0314
 80084d8:	14          	.byte	0x14
 80084d9:	00          	.byte	0x00
 80084da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80084de:	05e1      	lsls	r1, r4, #23
 80084e0:	bf48      	it	mi
 80084e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084ea:	0d1b      	lsrs	r3, r3, #20
 80084ec:	051b      	lsls	r3, r3, #20
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1bb      	bne.n	800846a <_strtod_l+0x72>
 80084f2:	f7fe fb1f 	bl	8006b34 <__errno>
 80084f6:	2322      	movs	r3, #34	@ 0x22
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	e7b6      	b.n	800846a <_strtod_l+0x72>
 80084fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008504:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008508:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800850c:	e7e7      	b.n	80084de <_strtod_l+0xe6>
 800850e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008690 <_strtod_l+0x298>
 8008512:	e7e4      	b.n	80084de <_strtod_l+0xe6>
 8008514:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008518:	f04f 3aff 	mov.w	sl, #4294967295
 800851c:	e7df      	b.n	80084de <_strtod_l+0xe6>
 800851e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	9219      	str	r2, [sp, #100]	@ 0x64
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b30      	cmp	r3, #48	@ 0x30
 8008528:	d0f9      	beq.n	800851e <_strtod_l+0x126>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d09d      	beq.n	800846a <_strtod_l+0x72>
 800852e:	2301      	movs	r3, #1
 8008530:	2700      	movs	r7, #0
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008536:	930c      	str	r3, [sp, #48]	@ 0x30
 8008538:	970b      	str	r7, [sp, #44]	@ 0x2c
 800853a:	46b9      	mov	r9, r7
 800853c:	220a      	movs	r2, #10
 800853e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008540:	7805      	ldrb	r5, [r0, #0]
 8008542:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008546:	b2d9      	uxtb	r1, r3
 8008548:	2909      	cmp	r1, #9
 800854a:	d928      	bls.n	800859e <_strtod_l+0x1a6>
 800854c:	494f      	ldr	r1, [pc, #316]	@ (800868c <_strtod_l+0x294>)
 800854e:	2201      	movs	r2, #1
 8008550:	f000 ffd6 	bl	8009500 <strncmp>
 8008554:	2800      	cmp	r0, #0
 8008556:	d032      	beq.n	80085be <_strtod_l+0x1c6>
 8008558:	2000      	movs	r0, #0
 800855a:	462a      	mov	r2, r5
 800855c:	900a      	str	r0, [sp, #40]	@ 0x28
 800855e:	464d      	mov	r5, r9
 8008560:	4603      	mov	r3, r0
 8008562:	2a65      	cmp	r2, #101	@ 0x65
 8008564:	d001      	beq.n	800856a <_strtod_l+0x172>
 8008566:	2a45      	cmp	r2, #69	@ 0x45
 8008568:	d114      	bne.n	8008594 <_strtod_l+0x19c>
 800856a:	b91d      	cbnz	r5, 8008574 <_strtod_l+0x17c>
 800856c:	9a08      	ldr	r2, [sp, #32]
 800856e:	4302      	orrs	r2, r0
 8008570:	d096      	beq.n	80084a0 <_strtod_l+0xa8>
 8008572:	2500      	movs	r5, #0
 8008574:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008576:	1c62      	adds	r2, r4, #1
 8008578:	9219      	str	r2, [sp, #100]	@ 0x64
 800857a:	7862      	ldrb	r2, [r4, #1]
 800857c:	2a2b      	cmp	r2, #43	@ 0x2b
 800857e:	d07a      	beq.n	8008676 <_strtod_l+0x27e>
 8008580:	2a2d      	cmp	r2, #45	@ 0x2d
 8008582:	d07e      	beq.n	8008682 <_strtod_l+0x28a>
 8008584:	f04f 0c00 	mov.w	ip, #0
 8008588:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800858c:	2909      	cmp	r1, #9
 800858e:	f240 8085 	bls.w	800869c <_strtod_l+0x2a4>
 8008592:	9419      	str	r4, [sp, #100]	@ 0x64
 8008594:	f04f 0800 	mov.w	r8, #0
 8008598:	e0a5      	b.n	80086e6 <_strtod_l+0x2ee>
 800859a:	2300      	movs	r3, #0
 800859c:	e7c8      	b.n	8008530 <_strtod_l+0x138>
 800859e:	f1b9 0f08 	cmp.w	r9, #8
 80085a2:	bfd8      	it	le
 80085a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80085a6:	f100 0001 	add.w	r0, r0, #1
 80085aa:	bfda      	itte	le
 80085ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80085b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80085b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80085b6:	f109 0901 	add.w	r9, r9, #1
 80085ba:	9019      	str	r0, [sp, #100]	@ 0x64
 80085bc:	e7bf      	b.n	800853e <_strtod_l+0x146>
 80085be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80085c4:	785a      	ldrb	r2, [r3, #1]
 80085c6:	f1b9 0f00 	cmp.w	r9, #0
 80085ca:	d03b      	beq.n	8008644 <_strtod_l+0x24c>
 80085cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80085ce:	464d      	mov	r5, r9
 80085d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d912      	bls.n	80085fe <_strtod_l+0x206>
 80085d8:	2301      	movs	r3, #1
 80085da:	e7c2      	b.n	8008562 <_strtod_l+0x16a>
 80085dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	3001      	adds	r0, #1
 80085e6:	2a30      	cmp	r2, #48	@ 0x30
 80085e8:	d0f8      	beq.n	80085dc <_strtod_l+0x1e4>
 80085ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	f200 84d2 	bhi.w	8008f98 <_strtod_l+0xba0>
 80085f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80085f8:	2000      	movs	r0, #0
 80085fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80085fc:	4605      	mov	r5, r0
 80085fe:	3a30      	subs	r2, #48	@ 0x30
 8008600:	f100 0301 	add.w	r3, r0, #1
 8008604:	d018      	beq.n	8008638 <_strtod_l+0x240>
 8008606:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008608:	4419      	add	r1, r3
 800860a:	910a      	str	r1, [sp, #40]	@ 0x28
 800860c:	462e      	mov	r6, r5
 800860e:	f04f 0e0a 	mov.w	lr, #10
 8008612:	1c71      	adds	r1, r6, #1
 8008614:	eba1 0c05 	sub.w	ip, r1, r5
 8008618:	4563      	cmp	r3, ip
 800861a:	dc15      	bgt.n	8008648 <_strtod_l+0x250>
 800861c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008620:	182b      	adds	r3, r5, r0
 8008622:	2b08      	cmp	r3, #8
 8008624:	f105 0501 	add.w	r5, r5, #1
 8008628:	4405      	add	r5, r0
 800862a:	dc1a      	bgt.n	8008662 <_strtod_l+0x26a>
 800862c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800862e:	230a      	movs	r3, #10
 8008630:	fb03 2301 	mla	r3, r3, r1, r2
 8008634:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008636:	2300      	movs	r3, #0
 8008638:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800863a:	1c51      	adds	r1, r2, #1
 800863c:	9119      	str	r1, [sp, #100]	@ 0x64
 800863e:	7852      	ldrb	r2, [r2, #1]
 8008640:	4618      	mov	r0, r3
 8008642:	e7c5      	b.n	80085d0 <_strtod_l+0x1d8>
 8008644:	4648      	mov	r0, r9
 8008646:	e7ce      	b.n	80085e6 <_strtod_l+0x1ee>
 8008648:	2e08      	cmp	r6, #8
 800864a:	dc05      	bgt.n	8008658 <_strtod_l+0x260>
 800864c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800864e:	fb0e f606 	mul.w	r6, lr, r6
 8008652:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008654:	460e      	mov	r6, r1
 8008656:	e7dc      	b.n	8008612 <_strtod_l+0x21a>
 8008658:	2910      	cmp	r1, #16
 800865a:	bfd8      	it	le
 800865c:	fb0e f707 	mulle.w	r7, lr, r7
 8008660:	e7f8      	b.n	8008654 <_strtod_l+0x25c>
 8008662:	2b0f      	cmp	r3, #15
 8008664:	bfdc      	itt	le
 8008666:	230a      	movle	r3, #10
 8008668:	fb03 2707 	mlale	r7, r3, r7, r2
 800866c:	e7e3      	b.n	8008636 <_strtod_l+0x23e>
 800866e:	2300      	movs	r3, #0
 8008670:	930a      	str	r3, [sp, #40]	@ 0x28
 8008672:	2301      	movs	r3, #1
 8008674:	e77a      	b.n	800856c <_strtod_l+0x174>
 8008676:	f04f 0c00 	mov.w	ip, #0
 800867a:	1ca2      	adds	r2, r4, #2
 800867c:	9219      	str	r2, [sp, #100]	@ 0x64
 800867e:	78a2      	ldrb	r2, [r4, #2]
 8008680:	e782      	b.n	8008588 <_strtod_l+0x190>
 8008682:	f04f 0c01 	mov.w	ip, #1
 8008686:	e7f8      	b.n	800867a <_strtod_l+0x282>
 8008688:	0800a9d4 	.word	0x0800a9d4
 800868c:	0800a80b 	.word	0x0800a80b
 8008690:	7ff00000 	.word	0x7ff00000
 8008694:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008696:	1c51      	adds	r1, r2, #1
 8008698:	9119      	str	r1, [sp, #100]	@ 0x64
 800869a:	7852      	ldrb	r2, [r2, #1]
 800869c:	2a30      	cmp	r2, #48	@ 0x30
 800869e:	d0f9      	beq.n	8008694 <_strtod_l+0x29c>
 80086a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086a4:	2908      	cmp	r1, #8
 80086a6:	f63f af75 	bhi.w	8008594 <_strtod_l+0x19c>
 80086aa:	3a30      	subs	r2, #48	@ 0x30
 80086ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80086ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086b2:	f04f 080a 	mov.w	r8, #10
 80086b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b8:	1c56      	adds	r6, r2, #1
 80086ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80086bc:	7852      	ldrb	r2, [r2, #1]
 80086be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086c2:	f1be 0f09 	cmp.w	lr, #9
 80086c6:	d939      	bls.n	800873c <_strtod_l+0x344>
 80086c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086ca:	1a76      	subs	r6, r6, r1
 80086cc:	2e08      	cmp	r6, #8
 80086ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80086d2:	dc03      	bgt.n	80086dc <_strtod_l+0x2e4>
 80086d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086d6:	4588      	cmp	r8, r1
 80086d8:	bfa8      	it	ge
 80086da:	4688      	movge	r8, r1
 80086dc:	f1bc 0f00 	cmp.w	ip, #0
 80086e0:	d001      	beq.n	80086e6 <_strtod_l+0x2ee>
 80086e2:	f1c8 0800 	rsb	r8, r8, #0
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	d14e      	bne.n	8008788 <_strtod_l+0x390>
 80086ea:	9908      	ldr	r1, [sp, #32]
 80086ec:	4308      	orrs	r0, r1
 80086ee:	f47f aebc 	bne.w	800846a <_strtod_l+0x72>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f47f aed4 	bne.w	80084a0 <_strtod_l+0xa8>
 80086f8:	2a69      	cmp	r2, #105	@ 0x69
 80086fa:	d028      	beq.n	800874e <_strtod_l+0x356>
 80086fc:	dc25      	bgt.n	800874a <_strtod_l+0x352>
 80086fe:	2a49      	cmp	r2, #73	@ 0x49
 8008700:	d025      	beq.n	800874e <_strtod_l+0x356>
 8008702:	2a4e      	cmp	r2, #78	@ 0x4e
 8008704:	f47f aecc 	bne.w	80084a0 <_strtod_l+0xa8>
 8008708:	499a      	ldr	r1, [pc, #616]	@ (8008974 <_strtod_l+0x57c>)
 800870a:	a819      	add	r0, sp, #100	@ 0x64
 800870c:	f001 f9e0 	bl	8009ad0 <__match>
 8008710:	2800      	cmp	r0, #0
 8008712:	f43f aec5 	beq.w	80084a0 <_strtod_l+0xa8>
 8008716:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b28      	cmp	r3, #40	@ 0x28
 800871c:	d12e      	bne.n	800877c <_strtod_l+0x384>
 800871e:	4996      	ldr	r1, [pc, #600]	@ (8008978 <_strtod_l+0x580>)
 8008720:	aa1c      	add	r2, sp, #112	@ 0x70
 8008722:	a819      	add	r0, sp, #100	@ 0x64
 8008724:	f001 f9e8 	bl	8009af8 <__hexnan>
 8008728:	2805      	cmp	r0, #5
 800872a:	d127      	bne.n	800877c <_strtod_l+0x384>
 800872c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800872e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008732:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008736:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800873a:	e696      	b.n	800846a <_strtod_l+0x72>
 800873c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800873e:	fb08 2101 	mla	r1, r8, r1, r2
 8008742:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008746:	9209      	str	r2, [sp, #36]	@ 0x24
 8008748:	e7b5      	b.n	80086b6 <_strtod_l+0x2be>
 800874a:	2a6e      	cmp	r2, #110	@ 0x6e
 800874c:	e7da      	b.n	8008704 <_strtod_l+0x30c>
 800874e:	498b      	ldr	r1, [pc, #556]	@ (800897c <_strtod_l+0x584>)
 8008750:	a819      	add	r0, sp, #100	@ 0x64
 8008752:	f001 f9bd 	bl	8009ad0 <__match>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aea2 	beq.w	80084a0 <_strtod_l+0xa8>
 800875c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800875e:	4988      	ldr	r1, [pc, #544]	@ (8008980 <_strtod_l+0x588>)
 8008760:	3b01      	subs	r3, #1
 8008762:	a819      	add	r0, sp, #100	@ 0x64
 8008764:	9319      	str	r3, [sp, #100]	@ 0x64
 8008766:	f001 f9b3 	bl	8009ad0 <__match>
 800876a:	b910      	cbnz	r0, 8008772 <_strtod_l+0x37a>
 800876c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800876e:	3301      	adds	r3, #1
 8008770:	9319      	str	r3, [sp, #100]	@ 0x64
 8008772:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008990 <_strtod_l+0x598>
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	e676      	b.n	800846a <_strtod_l+0x72>
 800877c:	4881      	ldr	r0, [pc, #516]	@ (8008984 <_strtod_l+0x58c>)
 800877e:	f000 fee3 	bl	8009548 <nan>
 8008782:	ec5b ab10 	vmov	sl, fp, d0
 8008786:	e670      	b.n	800846a <_strtod_l+0x72>
 8008788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800878c:	eba8 0303 	sub.w	r3, r8, r3
 8008790:	f1b9 0f00 	cmp.w	r9, #0
 8008794:	bf08      	it	eq
 8008796:	46a9      	moveq	r9, r5
 8008798:	2d10      	cmp	r5, #16
 800879a:	9309      	str	r3, [sp, #36]	@ 0x24
 800879c:	462c      	mov	r4, r5
 800879e:	bfa8      	it	ge
 80087a0:	2410      	movge	r4, #16
 80087a2:	f7f7 feaf 	bl	8000504 <__aeabi_ui2d>
 80087a6:	2d09      	cmp	r5, #9
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	dc13      	bgt.n	80087d6 <_strtod_l+0x3de>
 80087ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f43f ae5a 	beq.w	800846a <_strtod_l+0x72>
 80087b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b8:	dd78      	ble.n	80088ac <_strtod_l+0x4b4>
 80087ba:	2b16      	cmp	r3, #22
 80087bc:	dc5f      	bgt.n	800887e <_strtod_l+0x486>
 80087be:	4972      	ldr	r1, [pc, #456]	@ (8008988 <_strtod_l+0x590>)
 80087c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c8:	4652      	mov	r2, sl
 80087ca:	465b      	mov	r3, fp
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	e649      	b.n	800846a <_strtod_l+0x72>
 80087d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008988 <_strtod_l+0x590>)
 80087d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80087e0:	f7f7 ff0a 	bl	80005f8 <__aeabi_dmul>
 80087e4:	4682      	mov	sl, r0
 80087e6:	4638      	mov	r0, r7
 80087e8:	468b      	mov	fp, r1
 80087ea:	f7f7 fe8b 	bl	8000504 <__aeabi_ui2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4650      	mov	r0, sl
 80087f4:	4659      	mov	r1, fp
 80087f6:	f7f7 fd49 	bl	800028c <__adddf3>
 80087fa:	2d0f      	cmp	r5, #15
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	ddd5      	ble.n	80087ae <_strtod_l+0x3b6>
 8008802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008804:	1b2c      	subs	r4, r5, r4
 8008806:	441c      	add	r4, r3
 8008808:	2c00      	cmp	r4, #0
 800880a:	f340 8093 	ble.w	8008934 <_strtod_l+0x53c>
 800880e:	f014 030f 	ands.w	r3, r4, #15
 8008812:	d00a      	beq.n	800882a <_strtod_l+0x432>
 8008814:	495c      	ldr	r1, [pc, #368]	@ (8008988 <_strtod_l+0x590>)
 8008816:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	f034 040f 	bics.w	r4, r4, #15
 800882e:	d073      	beq.n	8008918 <_strtod_l+0x520>
 8008830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008834:	dd49      	ble.n	80088ca <_strtod_l+0x4d2>
 8008836:	2400      	movs	r4, #0
 8008838:	46a0      	mov	r8, r4
 800883a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800883c:	46a1      	mov	r9, r4
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008990 <_strtod_l+0x598>
 8008844:	2322      	movs	r3, #34	@ 0x22
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	f43f ae0b 	beq.w	800846a <_strtod_l+0x72>
 8008854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f7ff f946 	bl	8007ae8 <_Bfree>
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	4649      	mov	r1, r9
 8008860:	f7ff f942 	bl	8007ae8 <_Bfree>
 8008864:	9805      	ldr	r0, [sp, #20]
 8008866:	4641      	mov	r1, r8
 8008868:	f7ff f93e 	bl	8007ae8 <_Bfree>
 800886c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800886e:	9805      	ldr	r0, [sp, #20]
 8008870:	f7ff f93a 	bl	8007ae8 <_Bfree>
 8008874:	9805      	ldr	r0, [sp, #20]
 8008876:	4621      	mov	r1, r4
 8008878:	f7ff f936 	bl	8007ae8 <_Bfree>
 800887c:	e5f5      	b.n	800846a <_strtod_l+0x72>
 800887e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008884:	4293      	cmp	r3, r2
 8008886:	dbbc      	blt.n	8008802 <_strtod_l+0x40a>
 8008888:	4c3f      	ldr	r4, [pc, #252]	@ (8008988 <_strtod_l+0x590>)
 800888a:	f1c5 050f 	rsb	r5, r5, #15
 800888e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008892:	4652      	mov	r2, sl
 8008894:	465b      	mov	r3, fp
 8008896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889a:	f7f7 fead 	bl	80005f8 <__aeabi_dmul>
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	1b5d      	subs	r5, r3, r5
 80088a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088aa:	e78f      	b.n	80087cc <_strtod_l+0x3d4>
 80088ac:	3316      	adds	r3, #22
 80088ae:	dba8      	blt.n	8008802 <_strtod_l+0x40a>
 80088b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b2:	eba3 0808 	sub.w	r8, r3, r8
 80088b6:	4b34      	ldr	r3, [pc, #208]	@ (8008988 <_strtod_l+0x590>)
 80088b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088c0:	4650      	mov	r0, sl
 80088c2:	4659      	mov	r1, fp
 80088c4:	f7f7 ffc2 	bl	800084c <__aeabi_ddiv>
 80088c8:	e782      	b.n	80087d0 <_strtod_l+0x3d8>
 80088ca:	2300      	movs	r3, #0
 80088cc:	4f2f      	ldr	r7, [pc, #188]	@ (800898c <_strtod_l+0x594>)
 80088ce:	1124      	asrs	r4, r4, #4
 80088d0:	4650      	mov	r0, sl
 80088d2:	4659      	mov	r1, fp
 80088d4:	461e      	mov	r6, r3
 80088d6:	2c01      	cmp	r4, #1
 80088d8:	dc21      	bgt.n	800891e <_strtod_l+0x526>
 80088da:	b10b      	cbz	r3, 80088e0 <_strtod_l+0x4e8>
 80088dc:	4682      	mov	sl, r0
 80088de:	468b      	mov	fp, r1
 80088e0:	492a      	ldr	r1, [pc, #168]	@ (800898c <_strtod_l+0x594>)
 80088e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80088e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088ea:	4652      	mov	r2, sl
 80088ec:	465b      	mov	r3, fp
 80088ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	4b26      	ldr	r3, [pc, #152]	@ (8008990 <_strtod_l+0x598>)
 80088f8:	460a      	mov	r2, r1
 80088fa:	400b      	ands	r3, r1
 80088fc:	4925      	ldr	r1, [pc, #148]	@ (8008994 <_strtod_l+0x59c>)
 80088fe:	428b      	cmp	r3, r1
 8008900:	4682      	mov	sl, r0
 8008902:	d898      	bhi.n	8008836 <_strtod_l+0x43e>
 8008904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008908:	428b      	cmp	r3, r1
 800890a:	bf86      	itte	hi
 800890c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008998 <_strtod_l+0x5a0>
 8008910:	f04f 3aff 	movhi.w	sl, #4294967295
 8008914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008918:	2300      	movs	r3, #0
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	e076      	b.n	8008a0c <_strtod_l+0x614>
 800891e:	07e2      	lsls	r2, r4, #31
 8008920:	d504      	bpl.n	800892c <_strtod_l+0x534>
 8008922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	2301      	movs	r3, #1
 800892c:	3601      	adds	r6, #1
 800892e:	1064      	asrs	r4, r4, #1
 8008930:	3708      	adds	r7, #8
 8008932:	e7d0      	b.n	80088d6 <_strtod_l+0x4de>
 8008934:	d0f0      	beq.n	8008918 <_strtod_l+0x520>
 8008936:	4264      	negs	r4, r4
 8008938:	f014 020f 	ands.w	r2, r4, #15
 800893c:	d00a      	beq.n	8008954 <_strtod_l+0x55c>
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <_strtod_l+0x590>)
 8008940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008944:	4650      	mov	r0, sl
 8008946:	4659      	mov	r1, fp
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f7 ff7e 	bl	800084c <__aeabi_ddiv>
 8008950:	4682      	mov	sl, r0
 8008952:	468b      	mov	fp, r1
 8008954:	1124      	asrs	r4, r4, #4
 8008956:	d0df      	beq.n	8008918 <_strtod_l+0x520>
 8008958:	2c1f      	cmp	r4, #31
 800895a:	dd1f      	ble.n	800899c <_strtod_l+0x5a4>
 800895c:	2400      	movs	r4, #0
 800895e:	46a0      	mov	r8, r4
 8008960:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008962:	46a1      	mov	r9, r4
 8008964:	9a05      	ldr	r2, [sp, #20]
 8008966:	2322      	movs	r3, #34	@ 0x22
 8008968:	f04f 0a00 	mov.w	sl, #0
 800896c:	f04f 0b00 	mov.w	fp, #0
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e76b      	b.n	800884c <_strtod_l+0x454>
 8008974:	0800a6f9 	.word	0x0800a6f9
 8008978:	0800a9c0 	.word	0x0800a9c0
 800897c:	0800a6f1 	.word	0x0800a6f1
 8008980:	0800a728 	.word	0x0800a728
 8008984:	0800a861 	.word	0x0800a861
 8008988:	0800a8f8 	.word	0x0800a8f8
 800898c:	0800a8d0 	.word	0x0800a8d0
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	7ca00000 	.word	0x7ca00000
 8008998:	7fefffff 	.word	0x7fefffff
 800899c:	f014 0310 	ands.w	r3, r4, #16
 80089a0:	bf18      	it	ne
 80089a2:	236a      	movne	r3, #106	@ 0x6a
 80089a4:	4ea9      	ldr	r6, [pc, #676]	@ (8008c4c <_strtod_l+0x854>)
 80089a6:	9308      	str	r3, [sp, #32]
 80089a8:	4650      	mov	r0, sl
 80089aa:	4659      	mov	r1, fp
 80089ac:	2300      	movs	r3, #0
 80089ae:	07e7      	lsls	r7, r4, #31
 80089b0:	d504      	bpl.n	80089bc <_strtod_l+0x5c4>
 80089b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089b6:	f7f7 fe1f 	bl	80005f8 <__aeabi_dmul>
 80089ba:	2301      	movs	r3, #1
 80089bc:	1064      	asrs	r4, r4, #1
 80089be:	f106 0608 	add.w	r6, r6, #8
 80089c2:	d1f4      	bne.n	80089ae <_strtod_l+0x5b6>
 80089c4:	b10b      	cbz	r3, 80089ca <_strtod_l+0x5d2>
 80089c6:	4682      	mov	sl, r0
 80089c8:	468b      	mov	fp, r1
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	b1b3      	cbz	r3, 80089fc <_strtod_l+0x604>
 80089ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	4659      	mov	r1, fp
 80089da:	dd0f      	ble.n	80089fc <_strtod_l+0x604>
 80089dc:	2b1f      	cmp	r3, #31
 80089de:	dd56      	ble.n	8008a8e <_strtod_l+0x696>
 80089e0:	2b34      	cmp	r3, #52	@ 0x34
 80089e2:	bfde      	ittt	le
 80089e4:	f04f 33ff 	movle.w	r3, #4294967295
 80089e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089ec:	4093      	lslle	r3, r2
 80089ee:	f04f 0a00 	mov.w	sl, #0
 80089f2:	bfcc      	ite	gt
 80089f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089f8:	ea03 0b01 	andle.w	fp, r3, r1
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	f7f8 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1a7      	bne.n	800895c <_strtod_l+0x564>
 8008a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a12:	9805      	ldr	r0, [sp, #20]
 8008a14:	462b      	mov	r3, r5
 8008a16:	464a      	mov	r2, r9
 8008a18:	f7ff f8ce 	bl	8007bb8 <__s2b>
 8008a1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f43f af09 	beq.w	8008836 <_strtod_l+0x43e>
 8008a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	eba3 0308 	sub.w	r3, r3, r8
 8008a2e:	bfa8      	it	ge
 8008a30:	2300      	movge	r3, #0
 8008a32:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a34:	2400      	movs	r4, #0
 8008a36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a3c:	46a0      	mov	r8, r4
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a40:	9805      	ldr	r0, [sp, #20]
 8008a42:	6859      	ldr	r1, [r3, #4]
 8008a44:	f7ff f810 	bl	8007a68 <_Balloc>
 8008a48:	4681      	mov	r9, r0
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f43f aef7 	beq.w	800883e <_strtod_l+0x446>
 8008a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	3202      	adds	r2, #2
 8008a56:	f103 010c 	add.w	r1, r3, #12
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	300c      	adds	r0, #12
 8008a5e:	f7fe f896 	bl	8006b8e <memcpy>
 8008a62:	ec4b ab10 	vmov	d0, sl, fp
 8008a66:	9805      	ldr	r0, [sp, #20]
 8008a68:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a6a:	a91b      	add	r1, sp, #108	@ 0x6c
 8008a6c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a70:	f7ff fbd6 	bl	8008220 <__d2b>
 8008a74:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aee1 	beq.w	800883e <_strtod_l+0x446>
 8008a7c:	9805      	ldr	r0, [sp, #20]
 8008a7e:	2101      	movs	r1, #1
 8008a80:	f7ff f930 	bl	8007ce4 <__i2b>
 8008a84:	4680      	mov	r8, r0
 8008a86:	b948      	cbnz	r0, 8008a9c <_strtod_l+0x6a4>
 8008a88:	f04f 0800 	mov.w	r8, #0
 8008a8c:	e6d7      	b.n	800883e <_strtod_l+0x446>
 8008a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	ea03 0a0a 	and.w	sl, r3, sl
 8008a9a:	e7af      	b.n	80089fc <_strtod_l+0x604>
 8008a9c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a9e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	bfab      	itete	ge
 8008aa4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008aa6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008aa8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008aaa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008aac:	bfac      	ite	ge
 8008aae:	18ef      	addge	r7, r5, r3
 8008ab0:	1b5e      	sublt	r6, r3, r5
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	1aed      	subs	r5, r5, r3
 8008ab6:	4415      	add	r5, r2
 8008ab8:	4b65      	ldr	r3, [pc, #404]	@ (8008c50 <_strtod_l+0x858>)
 8008aba:	3d01      	subs	r5, #1
 8008abc:	429d      	cmp	r5, r3
 8008abe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ac2:	da50      	bge.n	8008b66 <_strtod_l+0x76e>
 8008ac4:	1b5b      	subs	r3, r3, r5
 8008ac6:	2b1f      	cmp	r3, #31
 8008ac8:	eba2 0203 	sub.w	r2, r2, r3
 8008acc:	f04f 0101 	mov.w	r1, #1
 8008ad0:	dc3d      	bgt.n	8008b4e <_strtod_l+0x756>
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9310      	str	r3, [sp, #64]	@ 0x40
 8008adc:	18bd      	adds	r5, r7, r2
 8008ade:	9b08      	ldr	r3, [sp, #32]
 8008ae0:	42af      	cmp	r7, r5
 8008ae2:	4416      	add	r6, r2
 8008ae4:	441e      	add	r6, r3
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	bfa8      	it	ge
 8008aea:	462b      	movge	r3, r5
 8008aec:	42b3      	cmp	r3, r6
 8008aee:	bfa8      	it	ge
 8008af0:	4633      	movge	r3, r6
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bfc2      	ittt	gt
 8008af6:	1aed      	subgt	r5, r5, r3
 8008af8:	1af6      	subgt	r6, r6, r3
 8008afa:	1aff      	subgt	r7, r7, r3
 8008afc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd16      	ble.n	8008b30 <_strtod_l+0x738>
 8008b02:	4641      	mov	r1, r8
 8008b04:	9805      	ldr	r0, [sp, #20]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7ff f9a4 	bl	8007e54 <__pow5mult>
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0ba      	beq.n	8008a88 <_strtod_l+0x690>
 8008b12:	4601      	mov	r1, r0
 8008b14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b16:	9805      	ldr	r0, [sp, #20]
 8008b18:	f7ff f8fa 	bl	8007d10 <__multiply>
 8008b1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f43f ae8d 	beq.w	800883e <_strtod_l+0x446>
 8008b24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b26:	9805      	ldr	r0, [sp, #20]
 8008b28:	f7fe ffde 	bl	8007ae8 <_Bfree>
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	dc1d      	bgt.n	8008b70 <_strtod_l+0x778>
 8008b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd23      	ble.n	8008b82 <_strtod_l+0x78a>
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b3e:	9805      	ldr	r0, [sp, #20]
 8008b40:	f7ff f988 	bl	8007e54 <__pow5mult>
 8008b44:	4681      	mov	r9, r0
 8008b46:	b9e0      	cbnz	r0, 8008b82 <_strtod_l+0x78a>
 8008b48:	f04f 0900 	mov.w	r9, #0
 8008b4c:	e677      	b.n	800883e <_strtod_l+0x446>
 8008b4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b5a:	35e2      	adds	r5, #226	@ 0xe2
 8008b5c:	fa01 f305 	lsl.w	r3, r1, r5
 8008b60:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b64:	e7ba      	b.n	8008adc <_strtod_l+0x6e4>
 8008b66:	2300      	movs	r3, #0
 8008b68:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b6e:	e7b5      	b.n	8008adc <_strtod_l+0x6e4>
 8008b70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b72:	9805      	ldr	r0, [sp, #20]
 8008b74:	462a      	mov	r2, r5
 8008b76:	f7ff f9c7 	bl	8007f08 <__lshift>
 8008b7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1d9      	bne.n	8008b34 <_strtod_l+0x73c>
 8008b80:	e65d      	b.n	800883e <_strtod_l+0x446>
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	dd07      	ble.n	8008b96 <_strtod_l+0x79e>
 8008b86:	4649      	mov	r1, r9
 8008b88:	9805      	ldr	r0, [sp, #20]
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	f7ff f9bc 	bl	8007f08 <__lshift>
 8008b90:	4681      	mov	r9, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0d8      	beq.n	8008b48 <_strtod_l+0x750>
 8008b96:	2f00      	cmp	r7, #0
 8008b98:	dd08      	ble.n	8008bac <_strtod_l+0x7b4>
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	9805      	ldr	r0, [sp, #20]
 8008b9e:	463a      	mov	r2, r7
 8008ba0:	f7ff f9b2 	bl	8007f08 <__lshift>
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f ae49 	beq.w	800883e <_strtod_l+0x446>
 8008bac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bae:	9805      	ldr	r0, [sp, #20]
 8008bb0:	464a      	mov	r2, r9
 8008bb2:	f7ff fa31 	bl	8008018 <__mdiff>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f43f ae40 	beq.w	800883e <_strtod_l+0x446>
 8008bbe:	68c3      	ldr	r3, [r0, #12]
 8008bc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60c3      	str	r3, [r0, #12]
 8008bc6:	4641      	mov	r1, r8
 8008bc8:	f7ff fa0a 	bl	8007fe0 <__mcmp>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	da45      	bge.n	8008c5c <_strtod_l+0x864>
 8008bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bd2:	ea53 030a 	orrs.w	r3, r3, sl
 8008bd6:	d16b      	bne.n	8008cb0 <_strtod_l+0x8b8>
 8008bd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d167      	bne.n	8008cb0 <_strtod_l+0x8b8>
 8008be0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008be4:	0d1b      	lsrs	r3, r3, #20
 8008be6:	051b      	lsls	r3, r3, #20
 8008be8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bec:	d960      	bls.n	8008cb0 <_strtod_l+0x8b8>
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_strtod_l+0x800>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	dd5b      	ble.n	8008cb0 <_strtod_l+0x8b8>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	f7ff f983 	bl	8007f08 <__lshift>
 8008c02:	4641      	mov	r1, r8
 8008c04:	4604      	mov	r4, r0
 8008c06:	f7ff f9eb 	bl	8007fe0 <__mcmp>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	dd50      	ble.n	8008cb0 <_strtod_l+0x8b8>
 8008c0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c12:	9a08      	ldr	r2, [sp, #32]
 8008c14:	0d1b      	lsrs	r3, r3, #20
 8008c16:	051b      	lsls	r3, r3, #20
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d06a      	beq.n	8008cf2 <_strtod_l+0x8fa>
 8008c1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c20:	d867      	bhi.n	8008cf2 <_strtod_l+0x8fa>
 8008c22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c26:	f67f ae9d 	bls.w	8008964 <_strtod_l+0x56c>
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c54 <_strtod_l+0x85c>)
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	4659      	mov	r1, fp
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <_strtod_l+0x860>)
 8008c38:	400b      	ands	r3, r1
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f47f ae08 	bne.w	8008854 <_strtod_l+0x45c>
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	2322      	movs	r3, #34	@ 0x22
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e603      	b.n	8008854 <_strtod_l+0x45c>
 8008c4c:	0800a9e8 	.word	0x0800a9e8
 8008c50:	fffffc02 	.word	0xfffffc02
 8008c54:	39500000 	.word	0x39500000
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c60:	d165      	bne.n	8008d2e <_strtod_l+0x936>
 8008c62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c68:	b35a      	cbz	r2, 8008cc2 <_strtod_l+0x8ca>
 8008c6a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ee8 <_strtod_l+0xaf0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d12b      	bne.n	8008cc8 <_strtod_l+0x8d0>
 8008c70:	9b08      	ldr	r3, [sp, #32]
 8008c72:	4651      	mov	r1, sl
 8008c74:	b303      	cbz	r3, 8008cb8 <_strtod_l+0x8c0>
 8008c76:	4b9d      	ldr	r3, [pc, #628]	@ (8008eec <_strtod_l+0xaf4>)
 8008c78:	465a      	mov	r2, fp
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	d81b      	bhi.n	8008cbe <_strtod_l+0x8c6>
 8008c86:	0d1b      	lsrs	r3, r3, #20
 8008c88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	4299      	cmp	r1, r3
 8008c92:	d119      	bne.n	8008cc8 <_strtod_l+0x8d0>
 8008c94:	4b96      	ldr	r3, [pc, #600]	@ (8008ef0 <_strtod_l+0xaf8>)
 8008c96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d102      	bne.n	8008ca2 <_strtod_l+0x8aa>
 8008c9c:	3101      	adds	r1, #1
 8008c9e:	f43f adce 	beq.w	800883e <_strtod_l+0x446>
 8008ca2:	4b92      	ldr	r3, [pc, #584]	@ (8008eec <_strtod_l+0xaf4>)
 8008ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008cac:	f04f 0a00 	mov.w	sl, #0
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1b9      	bne.n	8008c2a <_strtod_l+0x832>
 8008cb6:	e5cd      	b.n	8008854 <_strtod_l+0x45c>
 8008cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbc:	e7e8      	b.n	8008c90 <_strtod_l+0x898>
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	e7e6      	b.n	8008c90 <_strtod_l+0x898>
 8008cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8008cc6:	d0a2      	beq.n	8008c0e <_strtod_l+0x816>
 8008cc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cca:	b1db      	cbz	r3, 8008d04 <_strtod_l+0x90c>
 8008ccc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cce:	4213      	tst	r3, r2
 8008cd0:	d0ee      	beq.n	8008cb0 <_strtod_l+0x8b8>
 8008cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd4:	9a08      	ldr	r2, [sp, #32]
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	4659      	mov	r1, fp
 8008cda:	b1bb      	cbz	r3, 8008d0c <_strtod_l+0x914>
 8008cdc:	f7ff fb6e 	bl	80083bc <sulp>
 8008ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ce4:	ec53 2b10 	vmov	r2, r3, d0
 8008ce8:	f7f7 fad0 	bl	800028c <__adddf3>
 8008cec:	4682      	mov	sl, r0
 8008cee:	468b      	mov	fp, r1
 8008cf0:	e7de      	b.n	8008cb0 <_strtod_l+0x8b8>
 8008cf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cfe:	f04f 3aff 	mov.w	sl, #4294967295
 8008d02:	e7d5      	b.n	8008cb0 <_strtod_l+0x8b8>
 8008d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d06:	ea13 0f0a 	tst.w	r3, sl
 8008d0a:	e7e1      	b.n	8008cd0 <_strtod_l+0x8d8>
 8008d0c:	f7ff fb56 	bl	80083bc <sulp>
 8008d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d14:	ec53 2b10 	vmov	r2, r3, d0
 8008d18:	f7f7 fab6 	bl	8000288 <__aeabi_dsub>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4682      	mov	sl, r0
 8008d22:	468b      	mov	fp, r1
 8008d24:	f7f7 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d0c1      	beq.n	8008cb0 <_strtod_l+0x8b8>
 8008d2c:	e61a      	b.n	8008964 <_strtod_l+0x56c>
 8008d2e:	4641      	mov	r1, r8
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7ff facd 	bl	80082d0 <__ratio>
 8008d36:	ec57 6b10 	vmov	r6, r7, d0
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 fed4 	bl	8000af0 <__aeabi_dcmple>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d06f      	beq.n	8008e2c <_strtod_l+0xa34>
 8008d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d17a      	bne.n	8008e48 <_strtod_l+0xa50>
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	d158      	bne.n	8008e0a <_strtod_l+0xa12>
 8008d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d15a      	bne.n	8008e18 <_strtod_l+0xa20>
 8008d62:	4b64      	ldr	r3, [pc, #400]	@ (8008ef4 <_strtod_l+0xafc>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 feb7 	bl	8000adc <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d159      	bne.n	8008e26 <_strtod_l+0xa2e>
 8008d72:	4630      	mov	r0, r6
 8008d74:	4639      	mov	r1, r7
 8008d76:	4b60      	ldr	r3, [pc, #384]	@ (8008ef8 <_strtod_l+0xb00>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460f      	mov	r7, r1
 8008d82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d86:	9606      	str	r6, [sp, #24]
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d8e:	4d57      	ldr	r5, [pc, #348]	@ (8008eec <_strtod_l+0xaf4>)
 8008d90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d96:	401d      	ands	r5, r3
 8008d98:	4b58      	ldr	r3, [pc, #352]	@ (8008efc <_strtod_l+0xb04>)
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	f040 80b2 	bne.w	8008f04 <_strtod_l+0xb0c>
 8008da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008da6:	ec4b ab10 	vmov	d0, sl, fp
 8008daa:	f7ff f9c9 	bl	8008140 <__ulp>
 8008dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008db2:	ec51 0b10 	vmov	r0, r1, d0
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	4652      	mov	r2, sl
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	f7f7 fa65 	bl	800028c <__adddf3>
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4949      	ldr	r1, [pc, #292]	@ (8008eec <_strtod_l+0xaf4>)
 8008dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8008f00 <_strtod_l+0xb08>)
 8008dc8:	4019      	ands	r1, r3
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	4682      	mov	sl, r0
 8008dce:	d942      	bls.n	8008e56 <_strtod_l+0xa5e>
 8008dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dd2:	4b47      	ldr	r3, [pc, #284]	@ (8008ef0 <_strtod_l+0xaf8>)
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d103      	bne.n	8008de0 <_strtod_l+0x9e8>
 8008dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f43f ad2f 	beq.w	800883e <_strtod_l+0x446>
 8008de0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ef0 <_strtod_l+0xaf8>
 8008de4:	f04f 3aff 	mov.w	sl, #4294967295
 8008de8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dea:	9805      	ldr	r0, [sp, #20]
 8008dec:	f7fe fe7c 	bl	8007ae8 <_Bfree>
 8008df0:	9805      	ldr	r0, [sp, #20]
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7fe fe78 	bl	8007ae8 <_Bfree>
 8008df8:	9805      	ldr	r0, [sp, #20]
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	f7fe fe74 	bl	8007ae8 <_Bfree>
 8008e00:	9805      	ldr	r0, [sp, #20]
 8008e02:	4621      	mov	r1, r4
 8008e04:	f7fe fe70 	bl	8007ae8 <_Bfree>
 8008e08:	e619      	b.n	8008a3e <_strtod_l+0x646>
 8008e0a:	f1ba 0f01 	cmp.w	sl, #1
 8008e0e:	d103      	bne.n	8008e18 <_strtod_l+0xa20>
 8008e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f43f ada6 	beq.w	8008964 <_strtod_l+0x56c>
 8008e18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ec8 <_strtod_l+0xad0>
 8008e1c:	4f35      	ldr	r7, [pc, #212]	@ (8008ef4 <_strtod_l+0xafc>)
 8008e1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e22:	2600      	movs	r6, #0
 8008e24:	e7b1      	b.n	8008d8a <_strtod_l+0x992>
 8008e26:	4f34      	ldr	r7, [pc, #208]	@ (8008ef8 <_strtod_l+0xb00>)
 8008e28:	2600      	movs	r6, #0
 8008e2a:	e7aa      	b.n	8008d82 <_strtod_l+0x98a>
 8008e2c:	4b32      	ldr	r3, [pc, #200]	@ (8008ef8 <_strtod_l+0xb00>)
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fbe0 	bl	80005f8 <__aeabi_dmul>
 8008e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d09f      	beq.n	8008d82 <_strtod_l+0x98a>
 8008e42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e46:	e7a0      	b.n	8008d8a <_strtod_l+0x992>
 8008e48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ed0 <_strtod_l+0xad8>
 8008e4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e50:	ec57 6b17 	vmov	r6, r7, d7
 8008e54:	e799      	b.n	8008d8a <_strtod_l+0x992>
 8008e56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c1      	bne.n	8008de8 <_strtod_l+0x9f0>
 8008e64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e68:	0d1b      	lsrs	r3, r3, #20
 8008e6a:	051b      	lsls	r3, r3, #20
 8008e6c:	429d      	cmp	r5, r3
 8008e6e:	d1bb      	bne.n	8008de8 <_strtod_l+0x9f0>
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 ff20 	bl	8000cb8 <__aeabi_d2lz>
 8008e78:	f7f7 fb90 	bl	800059c <__aeabi_l2d>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fa00 	bl	8000288 <__aeabi_dsub>
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e96:	ea46 060a 	orr.w	r6, r6, sl
 8008e9a:	431e      	orrs	r6, r3
 8008e9c:	d06f      	beq.n	8008f7e <_strtod_l+0xb86>
 8008e9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ed8 <_strtod_l+0xae0>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fe1a 	bl	8000adc <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f47f acd3 	bne.w	8008854 <_strtod_l+0x45c>
 8008eae:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ee0 <_strtod_l+0xae8>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eb8:	f7f7 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d093      	beq.n	8008de8 <_strtod_l+0x9f0>
 8008ec0:	e4c8      	b.n	8008854 <_strtod_l+0x45c>
 8008ec2:	bf00      	nop
 8008ec4:	f3af 8000 	nop.w
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	bff00000 	.word	0xbff00000
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	94a03595 	.word	0x94a03595
 8008edc:	3fdfffff 	.word	0x3fdfffff
 8008ee0:	35afe535 	.word	0x35afe535
 8008ee4:	3fe00000 	.word	0x3fe00000
 8008ee8:	000fffff 	.word	0x000fffff
 8008eec:	7ff00000 	.word	0x7ff00000
 8008ef0:	7fefffff 	.word	0x7fefffff
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	3fe00000 	.word	0x3fe00000
 8008efc:	7fe00000 	.word	0x7fe00000
 8008f00:	7c9fffff 	.word	0x7c9fffff
 8008f04:	9b08      	ldr	r3, [sp, #32]
 8008f06:	b323      	cbz	r3, 8008f52 <_strtod_l+0xb5a>
 8008f08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f0c:	d821      	bhi.n	8008f52 <_strtod_l+0xb5a>
 8008f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8008fb0 <_strtod_l+0xbb8>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fdea 	bl	8000af0 <__aeabi_dcmple>
 8008f1c:	b1a0      	cbz	r0, 8008f48 <_strtod_l+0xb50>
 8008f1e:	4639      	mov	r1, r7
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7f7 fe41 	bl	8000ba8 <__aeabi_d2uiz>
 8008f26:	2801      	cmp	r0, #1
 8008f28:	bf38      	it	cc
 8008f2a:	2001      	movcc	r0, #1
 8008f2c:	f7f7 faea 	bl	8000504 <__aeabi_ui2d>
 8008f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	b9fb      	cbnz	r3, 8008f78 <_strtod_l+0xb80>
 8008f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f4e:	1b5b      	subs	r3, r3, r5
 8008f50:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f5a:	f7ff f8f1 	bl	8008140 <__ulp>
 8008f5e:	4650      	mov	r0, sl
 8008f60:	ec53 2b10 	vmov	r2, r3, d0
 8008f64:	4659      	mov	r1, fp
 8008f66:	f7f7 fb47 	bl	80005f8 <__aeabi_dmul>
 8008f6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f6e:	f7f7 f98d 	bl	800028c <__adddf3>
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	e770      	b.n	8008e5a <_strtod_l+0xa62>
 8008f78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f7c:	e7e0      	b.n	8008f40 <_strtod_l+0xb48>
 8008f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fb8 <_strtod_l+0xbc0>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f7f7 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8008f88:	e798      	b.n	8008ebc <_strtod_l+0xac4>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	f7ff ba6d 	b.w	8008472 <_strtod_l+0x7a>
 8008f98:	2a65      	cmp	r2, #101	@ 0x65
 8008f9a:	f43f ab68 	beq.w	800866e <_strtod_l+0x276>
 8008f9e:	2a45      	cmp	r2, #69	@ 0x45
 8008fa0:	f43f ab65 	beq.w	800866e <_strtod_l+0x276>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f7ff bba0 	b.w	80086ea <_strtod_l+0x2f2>
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w
 8008fb0:	ffc00000 	.word	0xffc00000
 8008fb4:	41dfffff 	.word	0x41dfffff
 8008fb8:	94a03595 	.word	0x94a03595
 8008fbc:	3fcfffff 	.word	0x3fcfffff

08008fc0 <_strtod_r>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	@ (8008fc8 <_strtod_r+0x8>)
 8008fc2:	f7ff ba19 	b.w	80083f8 <_strtod_l>
 8008fc6:	bf00      	nop
 8008fc8:	2000006c 	.word	0x2000006c

08008fcc <_strtol_l.isra.0>:
 8008fcc:	2b24      	cmp	r3, #36	@ 0x24
 8008fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd2:	4686      	mov	lr, r0
 8008fd4:	4690      	mov	r8, r2
 8008fd6:	d801      	bhi.n	8008fdc <_strtol_l.isra.0+0x10>
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d106      	bne.n	8008fea <_strtol_l.isra.0+0x1e>
 8008fdc:	f7fd fdaa 	bl	8006b34 <__errno>
 8008fe0:	2316      	movs	r3, #22
 8008fe2:	6003      	str	r3, [r0, #0]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	4834      	ldr	r0, [pc, #208]	@ (80090bc <_strtol_l.isra.0+0xf0>)
 8008fec:	460d      	mov	r5, r1
 8008fee:	462a      	mov	r2, r5
 8008ff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ff4:	5d06      	ldrb	r6, [r0, r4]
 8008ff6:	f016 0608 	ands.w	r6, r6, #8
 8008ffa:	d1f8      	bne.n	8008fee <_strtol_l.isra.0+0x22>
 8008ffc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ffe:	d110      	bne.n	8009022 <_strtol_l.isra.0+0x56>
 8009000:	782c      	ldrb	r4, [r5, #0]
 8009002:	2601      	movs	r6, #1
 8009004:	1c95      	adds	r5, r2, #2
 8009006:	f033 0210 	bics.w	r2, r3, #16
 800900a:	d115      	bne.n	8009038 <_strtol_l.isra.0+0x6c>
 800900c:	2c30      	cmp	r4, #48	@ 0x30
 800900e:	d10d      	bne.n	800902c <_strtol_l.isra.0+0x60>
 8009010:	782a      	ldrb	r2, [r5, #0]
 8009012:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009016:	2a58      	cmp	r2, #88	@ 0x58
 8009018:	d108      	bne.n	800902c <_strtol_l.isra.0+0x60>
 800901a:	786c      	ldrb	r4, [r5, #1]
 800901c:	3502      	adds	r5, #2
 800901e:	2310      	movs	r3, #16
 8009020:	e00a      	b.n	8009038 <_strtol_l.isra.0+0x6c>
 8009022:	2c2b      	cmp	r4, #43	@ 0x2b
 8009024:	bf04      	itt	eq
 8009026:	782c      	ldrbeq	r4, [r5, #0]
 8009028:	1c95      	addeq	r5, r2, #2
 800902a:	e7ec      	b.n	8009006 <_strtol_l.isra.0+0x3a>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1f6      	bne.n	800901e <_strtol_l.isra.0+0x52>
 8009030:	2c30      	cmp	r4, #48	@ 0x30
 8009032:	bf14      	ite	ne
 8009034:	230a      	movne	r3, #10
 8009036:	2308      	moveq	r3, #8
 8009038:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800903c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009040:	2200      	movs	r2, #0
 8009042:	fbbc f9f3 	udiv	r9, ip, r3
 8009046:	4610      	mov	r0, r2
 8009048:	fb03 ca19 	mls	sl, r3, r9, ip
 800904c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009050:	2f09      	cmp	r7, #9
 8009052:	d80f      	bhi.n	8009074 <_strtol_l.isra.0+0xa8>
 8009054:	463c      	mov	r4, r7
 8009056:	42a3      	cmp	r3, r4
 8009058:	dd1b      	ble.n	8009092 <_strtol_l.isra.0+0xc6>
 800905a:	1c57      	adds	r7, r2, #1
 800905c:	d007      	beq.n	800906e <_strtol_l.isra.0+0xa2>
 800905e:	4581      	cmp	r9, r0
 8009060:	d314      	bcc.n	800908c <_strtol_l.isra.0+0xc0>
 8009062:	d101      	bne.n	8009068 <_strtol_l.isra.0+0x9c>
 8009064:	45a2      	cmp	sl, r4
 8009066:	db11      	blt.n	800908c <_strtol_l.isra.0+0xc0>
 8009068:	fb00 4003 	mla	r0, r0, r3, r4
 800906c:	2201      	movs	r2, #1
 800906e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009072:	e7eb      	b.n	800904c <_strtol_l.isra.0+0x80>
 8009074:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009078:	2f19      	cmp	r7, #25
 800907a:	d801      	bhi.n	8009080 <_strtol_l.isra.0+0xb4>
 800907c:	3c37      	subs	r4, #55	@ 0x37
 800907e:	e7ea      	b.n	8009056 <_strtol_l.isra.0+0x8a>
 8009080:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009084:	2f19      	cmp	r7, #25
 8009086:	d804      	bhi.n	8009092 <_strtol_l.isra.0+0xc6>
 8009088:	3c57      	subs	r4, #87	@ 0x57
 800908a:	e7e4      	b.n	8009056 <_strtol_l.isra.0+0x8a>
 800908c:	f04f 32ff 	mov.w	r2, #4294967295
 8009090:	e7ed      	b.n	800906e <_strtol_l.isra.0+0xa2>
 8009092:	1c53      	adds	r3, r2, #1
 8009094:	d108      	bne.n	80090a8 <_strtol_l.isra.0+0xdc>
 8009096:	2322      	movs	r3, #34	@ 0x22
 8009098:	f8ce 3000 	str.w	r3, [lr]
 800909c:	4660      	mov	r0, ip
 800909e:	f1b8 0f00 	cmp.w	r8, #0
 80090a2:	d0a0      	beq.n	8008fe6 <_strtol_l.isra.0+0x1a>
 80090a4:	1e69      	subs	r1, r5, #1
 80090a6:	e006      	b.n	80090b6 <_strtol_l.isra.0+0xea>
 80090a8:	b106      	cbz	r6, 80090ac <_strtol_l.isra.0+0xe0>
 80090aa:	4240      	negs	r0, r0
 80090ac:	f1b8 0f00 	cmp.w	r8, #0
 80090b0:	d099      	beq.n	8008fe6 <_strtol_l.isra.0+0x1a>
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	d1f6      	bne.n	80090a4 <_strtol_l.isra.0+0xd8>
 80090b6:	f8c8 1000 	str.w	r1, [r8]
 80090ba:	e794      	b.n	8008fe6 <_strtol_l.isra.0+0x1a>
 80090bc:	0800aa11 	.word	0x0800aa11

080090c0 <_strtol_r>:
 80090c0:	f7ff bf84 	b.w	8008fcc <_strtol_l.isra.0>

080090c4 <__ssputs_r>:
 80090c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	688e      	ldr	r6, [r1, #8]
 80090ca:	461f      	mov	r7, r3
 80090cc:	42be      	cmp	r6, r7
 80090ce:	680b      	ldr	r3, [r1, #0]
 80090d0:	4682      	mov	sl, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	4690      	mov	r8, r2
 80090d6:	d82d      	bhi.n	8009134 <__ssputs_r+0x70>
 80090d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090e0:	d026      	beq.n	8009130 <__ssputs_r+0x6c>
 80090e2:	6965      	ldr	r5, [r4, #20]
 80090e4:	6909      	ldr	r1, [r1, #16]
 80090e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090ea:	eba3 0901 	sub.w	r9, r3, r1
 80090ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090f2:	1c7b      	adds	r3, r7, #1
 80090f4:	444b      	add	r3, r9
 80090f6:	106d      	asrs	r5, r5, #1
 80090f8:	429d      	cmp	r5, r3
 80090fa:	bf38      	it	cc
 80090fc:	461d      	movcc	r5, r3
 80090fe:	0553      	lsls	r3, r2, #21
 8009100:	d527      	bpl.n	8009152 <__ssputs_r+0x8e>
 8009102:	4629      	mov	r1, r5
 8009104:	f7fe fc24 	bl	8007950 <_malloc_r>
 8009108:	4606      	mov	r6, r0
 800910a:	b360      	cbz	r0, 8009166 <__ssputs_r+0xa2>
 800910c:	6921      	ldr	r1, [r4, #16]
 800910e:	464a      	mov	r2, r9
 8009110:	f7fd fd3d 	bl	8006b8e <memcpy>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800911a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	6126      	str	r6, [r4, #16]
 8009122:	6165      	str	r5, [r4, #20]
 8009124:	444e      	add	r6, r9
 8009126:	eba5 0509 	sub.w	r5, r5, r9
 800912a:	6026      	str	r6, [r4, #0]
 800912c:	60a5      	str	r5, [r4, #8]
 800912e:	463e      	mov	r6, r7
 8009130:	42be      	cmp	r6, r7
 8009132:	d900      	bls.n	8009136 <__ssputs_r+0x72>
 8009134:	463e      	mov	r6, r7
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	4632      	mov	r2, r6
 800913a:	4641      	mov	r1, r8
 800913c:	f000 f9c6 	bl	80094cc <memmove>
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	1b9b      	subs	r3, r3, r6
 8009144:	60a3      	str	r3, [r4, #8]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	4433      	add	r3, r6
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009152:	462a      	mov	r2, r5
 8009154:	f000 fd7d 	bl	8009c52 <_realloc_r>
 8009158:	4606      	mov	r6, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d1e0      	bne.n	8009120 <__ssputs_r+0x5c>
 800915e:	6921      	ldr	r1, [r4, #16]
 8009160:	4650      	mov	r0, sl
 8009162:	f7fe fb81 	bl	8007868 <_free_r>
 8009166:	230c      	movs	r3, #12
 8009168:	f8ca 3000 	str.w	r3, [sl]
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e7e9      	b.n	800914e <__ssputs_r+0x8a>
	...

0800917c <_svfiprintf_r>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	4698      	mov	r8, r3
 8009182:	898b      	ldrh	r3, [r1, #12]
 8009184:	061b      	lsls	r3, r3, #24
 8009186:	b09d      	sub	sp, #116	@ 0x74
 8009188:	4607      	mov	r7, r0
 800918a:	460d      	mov	r5, r1
 800918c:	4614      	mov	r4, r2
 800918e:	d510      	bpl.n	80091b2 <_svfiprintf_r+0x36>
 8009190:	690b      	ldr	r3, [r1, #16]
 8009192:	b973      	cbnz	r3, 80091b2 <_svfiprintf_r+0x36>
 8009194:	2140      	movs	r1, #64	@ 0x40
 8009196:	f7fe fbdb 	bl	8007950 <_malloc_r>
 800919a:	6028      	str	r0, [r5, #0]
 800919c:	6128      	str	r0, [r5, #16]
 800919e:	b930      	cbnz	r0, 80091ae <_svfiprintf_r+0x32>
 80091a0:	230c      	movs	r3, #12
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	b01d      	add	sp, #116	@ 0x74
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	2340      	movs	r3, #64	@ 0x40
 80091b0:	616b      	str	r3, [r5, #20]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b6:	2320      	movs	r3, #32
 80091b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c0:	2330      	movs	r3, #48	@ 0x30
 80091c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009360 <_svfiprintf_r+0x1e4>
 80091c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ca:	f04f 0901 	mov.w	r9, #1
 80091ce:	4623      	mov	r3, r4
 80091d0:	469a      	mov	sl, r3
 80091d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d6:	b10a      	cbz	r2, 80091dc <_svfiprintf_r+0x60>
 80091d8:	2a25      	cmp	r2, #37	@ 0x25
 80091da:	d1f9      	bne.n	80091d0 <_svfiprintf_r+0x54>
 80091dc:	ebba 0b04 	subs.w	fp, sl, r4
 80091e0:	d00b      	beq.n	80091fa <_svfiprintf_r+0x7e>
 80091e2:	465b      	mov	r3, fp
 80091e4:	4622      	mov	r2, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ff6b 	bl	80090c4 <__ssputs_r>
 80091ee:	3001      	adds	r0, #1
 80091f0:	f000 80a7 	beq.w	8009342 <_svfiprintf_r+0x1c6>
 80091f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f6:	445a      	add	r2, fp
 80091f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091fa:	f89a 3000 	ldrb.w	r3, [sl]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 809f 	beq.w	8009342 <_svfiprintf_r+0x1c6>
 8009204:	2300      	movs	r3, #0
 8009206:	f04f 32ff 	mov.w	r2, #4294967295
 800920a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920e:	f10a 0a01 	add.w	sl, sl, #1
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800921a:	931a      	str	r3, [sp, #104]	@ 0x68
 800921c:	4654      	mov	r4, sl
 800921e:	2205      	movs	r2, #5
 8009220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009224:	484e      	ldr	r0, [pc, #312]	@ (8009360 <_svfiprintf_r+0x1e4>)
 8009226:	f7f6 ffd3 	bl	80001d0 <memchr>
 800922a:	9a04      	ldr	r2, [sp, #16]
 800922c:	b9d8      	cbnz	r0, 8009266 <_svfiprintf_r+0xea>
 800922e:	06d0      	lsls	r0, r2, #27
 8009230:	bf44      	itt	mi
 8009232:	2320      	movmi	r3, #32
 8009234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009238:	0711      	lsls	r1, r2, #28
 800923a:	bf44      	itt	mi
 800923c:	232b      	movmi	r3, #43	@ 0x2b
 800923e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009242:	f89a 3000 	ldrb.w	r3, [sl]
 8009246:	2b2a      	cmp	r3, #42	@ 0x2a
 8009248:	d015      	beq.n	8009276 <_svfiprintf_r+0xfa>
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	4654      	mov	r4, sl
 800924e:	2000      	movs	r0, #0
 8009250:	f04f 0c0a 	mov.w	ip, #10
 8009254:	4621      	mov	r1, r4
 8009256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800925a:	3b30      	subs	r3, #48	@ 0x30
 800925c:	2b09      	cmp	r3, #9
 800925e:	d94b      	bls.n	80092f8 <_svfiprintf_r+0x17c>
 8009260:	b1b0      	cbz	r0, 8009290 <_svfiprintf_r+0x114>
 8009262:	9207      	str	r2, [sp, #28]
 8009264:	e014      	b.n	8009290 <_svfiprintf_r+0x114>
 8009266:	eba0 0308 	sub.w	r3, r0, r8
 800926a:	fa09 f303 	lsl.w	r3, r9, r3
 800926e:	4313      	orrs	r3, r2
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	46a2      	mov	sl, r4
 8009274:	e7d2      	b.n	800921c <_svfiprintf_r+0xa0>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	1d19      	adds	r1, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	9103      	str	r1, [sp, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfbb      	ittet	lt
 8009282:	425b      	neglt	r3, r3
 8009284:	f042 0202 	orrlt.w	r2, r2, #2
 8009288:	9307      	strge	r3, [sp, #28]
 800928a:	9307      	strlt	r3, [sp, #28]
 800928c:	bfb8      	it	lt
 800928e:	9204      	strlt	r2, [sp, #16]
 8009290:	7823      	ldrb	r3, [r4, #0]
 8009292:	2b2e      	cmp	r3, #46	@ 0x2e
 8009294:	d10a      	bne.n	80092ac <_svfiprintf_r+0x130>
 8009296:	7863      	ldrb	r3, [r4, #1]
 8009298:	2b2a      	cmp	r3, #42	@ 0x2a
 800929a:	d132      	bne.n	8009302 <_svfiprintf_r+0x186>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9203      	str	r2, [sp, #12]
 80092a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092a8:	3402      	adds	r4, #2
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009370 <_svfiprintf_r+0x1f4>
 80092b0:	7821      	ldrb	r1, [r4, #0]
 80092b2:	2203      	movs	r2, #3
 80092b4:	4650      	mov	r0, sl
 80092b6:	f7f6 ff8b 	bl	80001d0 <memchr>
 80092ba:	b138      	cbz	r0, 80092cc <_svfiprintf_r+0x150>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	eba0 000a 	sub.w	r0, r0, sl
 80092c2:	2240      	movs	r2, #64	@ 0x40
 80092c4:	4082      	lsls	r2, r0
 80092c6:	4313      	orrs	r3, r2
 80092c8:	3401      	adds	r4, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	4824      	ldr	r0, [pc, #144]	@ (8009364 <_svfiprintf_r+0x1e8>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092d6:	2206      	movs	r2, #6
 80092d8:	f7f6 ff7a 	bl	80001d0 <memchr>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d036      	beq.n	800934e <_svfiprintf_r+0x1d2>
 80092e0:	4b21      	ldr	r3, [pc, #132]	@ (8009368 <_svfiprintf_r+0x1ec>)
 80092e2:	bb1b      	cbnz	r3, 800932c <_svfiprintf_r+0x1b0>
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	3307      	adds	r3, #7
 80092e8:	f023 0307 	bic.w	r3, r3, #7
 80092ec:	3308      	adds	r3, #8
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f2:	4433      	add	r3, r6
 80092f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f6:	e76a      	b.n	80091ce <_svfiprintf_r+0x52>
 80092f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fc:	460c      	mov	r4, r1
 80092fe:	2001      	movs	r0, #1
 8009300:	e7a8      	b.n	8009254 <_svfiprintf_r+0xd8>
 8009302:	2300      	movs	r3, #0
 8009304:	3401      	adds	r4, #1
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	4619      	mov	r1, r3
 800930a:	f04f 0c0a 	mov.w	ip, #10
 800930e:	4620      	mov	r0, r4
 8009310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009314:	3a30      	subs	r2, #48	@ 0x30
 8009316:	2a09      	cmp	r2, #9
 8009318:	d903      	bls.n	8009322 <_svfiprintf_r+0x1a6>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0c6      	beq.n	80092ac <_svfiprintf_r+0x130>
 800931e:	9105      	str	r1, [sp, #20]
 8009320:	e7c4      	b.n	80092ac <_svfiprintf_r+0x130>
 8009322:	fb0c 2101 	mla	r1, ip, r1, r2
 8009326:	4604      	mov	r4, r0
 8009328:	2301      	movs	r3, #1
 800932a:	e7f0      	b.n	800930e <_svfiprintf_r+0x192>
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b0e      	ldr	r3, [pc, #56]	@ (800936c <_svfiprintf_r+0x1f0>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4638      	mov	r0, r7
 8009338:	f7fc fcbe 	bl	8005cb8 <_printf_float>
 800933c:	1c42      	adds	r2, r0, #1
 800933e:	4606      	mov	r6, r0
 8009340:	d1d6      	bne.n	80092f0 <_svfiprintf_r+0x174>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	065b      	lsls	r3, r3, #25
 8009346:	f53f af2d 	bmi.w	80091a4 <_svfiprintf_r+0x28>
 800934a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800934c:	e72c      	b.n	80091a8 <_svfiprintf_r+0x2c>
 800934e:	ab03      	add	r3, sp, #12
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	462a      	mov	r2, r5
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <_svfiprintf_r+0x1f0>)
 8009356:	a904      	add	r1, sp, #16
 8009358:	4638      	mov	r0, r7
 800935a:	f7fc ff45 	bl	80061e8 <_printf_i>
 800935e:	e7ed      	b.n	800933c <_svfiprintf_r+0x1c0>
 8009360:	0800a80d 	.word	0x0800a80d
 8009364:	0800a817 	.word	0x0800a817
 8009368:	08005cb9 	.word	0x08005cb9
 800936c:	080090c5 	.word	0x080090c5
 8009370:	0800a813 	.word	0x0800a813

08009374 <__sflush_r>:
 8009374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937c:	0716      	lsls	r6, r2, #28
 800937e:	4605      	mov	r5, r0
 8009380:	460c      	mov	r4, r1
 8009382:	d454      	bmi.n	800942e <__sflush_r+0xba>
 8009384:	684b      	ldr	r3, [r1, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dc02      	bgt.n	8009390 <__sflush_r+0x1c>
 800938a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	dd48      	ble.n	8009422 <__sflush_r+0xae>
 8009390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009392:	2e00      	cmp	r6, #0
 8009394:	d045      	beq.n	8009422 <__sflush_r+0xae>
 8009396:	2300      	movs	r3, #0
 8009398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800939c:	682f      	ldr	r7, [r5, #0]
 800939e:	6a21      	ldr	r1, [r4, #32]
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	d030      	beq.n	8009406 <__sflush_r+0x92>
 80093a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	0759      	lsls	r1, r3, #29
 80093aa:	d505      	bpl.n	80093b8 <__sflush_r+0x44>
 80093ac:	6863      	ldr	r3, [r4, #4]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093b2:	b10b      	cbz	r3, 80093b8 <__sflush_r+0x44>
 80093b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	2300      	movs	r3, #0
 80093ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093bc:	6a21      	ldr	r1, [r4, #32]
 80093be:	4628      	mov	r0, r5
 80093c0:	47b0      	blx	r6
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	d106      	bne.n	80093d6 <__sflush_r+0x62>
 80093c8:	6829      	ldr	r1, [r5, #0]
 80093ca:	291d      	cmp	r1, #29
 80093cc:	d82b      	bhi.n	8009426 <__sflush_r+0xb2>
 80093ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009478 <__sflush_r+0x104>)
 80093d0:	40ca      	lsrs	r2, r1
 80093d2:	07d6      	lsls	r6, r2, #31
 80093d4:	d527      	bpl.n	8009426 <__sflush_r+0xb2>
 80093d6:	2200      	movs	r2, #0
 80093d8:	6062      	str	r2, [r4, #4]
 80093da:	04d9      	lsls	r1, r3, #19
 80093dc:	6922      	ldr	r2, [r4, #16]
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	d504      	bpl.n	80093ec <__sflush_r+0x78>
 80093e2:	1c42      	adds	r2, r0, #1
 80093e4:	d101      	bne.n	80093ea <__sflush_r+0x76>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	b903      	cbnz	r3, 80093ec <__sflush_r+0x78>
 80093ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80093ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093ee:	602f      	str	r7, [r5, #0]
 80093f0:	b1b9      	cbz	r1, 8009422 <__sflush_r+0xae>
 80093f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093f6:	4299      	cmp	r1, r3
 80093f8:	d002      	beq.n	8009400 <__sflush_r+0x8c>
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7fe fa34 	bl	8007868 <_free_r>
 8009400:	2300      	movs	r3, #0
 8009402:	6363      	str	r3, [r4, #52]	@ 0x34
 8009404:	e00d      	b.n	8009422 <__sflush_r+0xae>
 8009406:	2301      	movs	r3, #1
 8009408:	4628      	mov	r0, r5
 800940a:	47b0      	blx	r6
 800940c:	4602      	mov	r2, r0
 800940e:	1c50      	adds	r0, r2, #1
 8009410:	d1c9      	bne.n	80093a6 <__sflush_r+0x32>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0c6      	beq.n	80093a6 <__sflush_r+0x32>
 8009418:	2b1d      	cmp	r3, #29
 800941a:	d001      	beq.n	8009420 <__sflush_r+0xac>
 800941c:	2b16      	cmp	r3, #22
 800941e:	d11e      	bne.n	800945e <__sflush_r+0xea>
 8009420:	602f      	str	r7, [r5, #0]
 8009422:	2000      	movs	r0, #0
 8009424:	e022      	b.n	800946c <__sflush_r+0xf8>
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	b21b      	sxth	r3, r3
 800942c:	e01b      	b.n	8009466 <__sflush_r+0xf2>
 800942e:	690f      	ldr	r7, [r1, #16]
 8009430:	2f00      	cmp	r7, #0
 8009432:	d0f6      	beq.n	8009422 <__sflush_r+0xae>
 8009434:	0793      	lsls	r3, r2, #30
 8009436:	680e      	ldr	r6, [r1, #0]
 8009438:	bf08      	it	eq
 800943a:	694b      	ldreq	r3, [r1, #20]
 800943c:	600f      	str	r7, [r1, #0]
 800943e:	bf18      	it	ne
 8009440:	2300      	movne	r3, #0
 8009442:	eba6 0807 	sub.w	r8, r6, r7
 8009446:	608b      	str	r3, [r1, #8]
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	dde9      	ble.n	8009422 <__sflush_r+0xae>
 800944e:	6a21      	ldr	r1, [r4, #32]
 8009450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009452:	4643      	mov	r3, r8
 8009454:	463a      	mov	r2, r7
 8009456:	4628      	mov	r0, r5
 8009458:	47b0      	blx	r6
 800945a:	2800      	cmp	r0, #0
 800945c:	dc08      	bgt.n	8009470 <__sflush_r+0xfc>
 800945e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	4407      	add	r7, r0
 8009472:	eba8 0800 	sub.w	r8, r8, r0
 8009476:	e7e7      	b.n	8009448 <__sflush_r+0xd4>
 8009478:	20400001 	.word	0x20400001

0800947c <_fflush_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	690b      	ldr	r3, [r1, #16]
 8009480:	4605      	mov	r5, r0
 8009482:	460c      	mov	r4, r1
 8009484:	b913      	cbnz	r3, 800948c <_fflush_r+0x10>
 8009486:	2500      	movs	r5, #0
 8009488:	4628      	mov	r0, r5
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	b118      	cbz	r0, 8009496 <_fflush_r+0x1a>
 800948e:	6a03      	ldr	r3, [r0, #32]
 8009490:	b90b      	cbnz	r3, 8009496 <_fflush_r+0x1a>
 8009492:	f7fd fa61 	bl	8006958 <__sinit>
 8009496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0f3      	beq.n	8009486 <_fflush_r+0xa>
 800949e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094a0:	07d0      	lsls	r0, r2, #31
 80094a2:	d404      	bmi.n	80094ae <_fflush_r+0x32>
 80094a4:	0599      	lsls	r1, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_fflush_r+0x32>
 80094a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094aa:	f7fd fb6e 	bl	8006b8a <__retarget_lock_acquire_recursive>
 80094ae:	4628      	mov	r0, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	f7ff ff5f 	bl	8009374 <__sflush_r>
 80094b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094b8:	07da      	lsls	r2, r3, #31
 80094ba:	4605      	mov	r5, r0
 80094bc:	d4e4      	bmi.n	8009488 <_fflush_r+0xc>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	059b      	lsls	r3, r3, #22
 80094c2:	d4e1      	bmi.n	8009488 <_fflush_r+0xc>
 80094c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094c6:	f7fd fb61 	bl	8006b8c <__retarget_lock_release_recursive>
 80094ca:	e7dd      	b.n	8009488 <_fflush_r+0xc>

080094cc <memmove>:
 80094cc:	4288      	cmp	r0, r1
 80094ce:	b510      	push	{r4, lr}
 80094d0:	eb01 0402 	add.w	r4, r1, r2
 80094d4:	d902      	bls.n	80094dc <memmove+0x10>
 80094d6:	4284      	cmp	r4, r0
 80094d8:	4623      	mov	r3, r4
 80094da:	d807      	bhi.n	80094ec <memmove+0x20>
 80094dc:	1e43      	subs	r3, r0, #1
 80094de:	42a1      	cmp	r1, r4
 80094e0:	d008      	beq.n	80094f4 <memmove+0x28>
 80094e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ea:	e7f8      	b.n	80094de <memmove+0x12>
 80094ec:	4402      	add	r2, r0
 80094ee:	4601      	mov	r1, r0
 80094f0:	428a      	cmp	r2, r1
 80094f2:	d100      	bne.n	80094f6 <memmove+0x2a>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094fe:	e7f7      	b.n	80094f0 <memmove+0x24>

08009500 <strncmp>:
 8009500:	b510      	push	{r4, lr}
 8009502:	b16a      	cbz	r2, 8009520 <strncmp+0x20>
 8009504:	3901      	subs	r1, #1
 8009506:	1884      	adds	r4, r0, r2
 8009508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800950c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009510:	429a      	cmp	r2, r3
 8009512:	d103      	bne.n	800951c <strncmp+0x1c>
 8009514:	42a0      	cmp	r0, r4
 8009516:	d001      	beq.n	800951c <strncmp+0x1c>
 8009518:	2a00      	cmp	r2, #0
 800951a:	d1f5      	bne.n	8009508 <strncmp+0x8>
 800951c:	1ad0      	subs	r0, r2, r3
 800951e:	bd10      	pop	{r4, pc}
 8009520:	4610      	mov	r0, r2
 8009522:	e7fc      	b.n	800951e <strncmp+0x1e>

08009524 <_sbrk_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d06      	ldr	r5, [pc, #24]	@ (8009540 <_sbrk_r+0x1c>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	f7f8 f9ec 	bl	800190c <_sbrk>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_sbrk_r+0x1a>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_sbrk_r+0x1a>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20001cd0 	.word	0x20001cd0
 8009544:	00000000 	.word	0x00000000

08009548 <nan>:
 8009548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009550 <nan+0x8>
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	00000000 	.word	0x00000000
 8009554:	7ff80000 	.word	0x7ff80000

08009558 <__assert_func>:
 8009558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800955a:	4614      	mov	r4, r2
 800955c:	461a      	mov	r2, r3
 800955e:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <__assert_func+0x2c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4605      	mov	r5, r0
 8009564:	68d8      	ldr	r0, [r3, #12]
 8009566:	b14c      	cbz	r4, 800957c <__assert_func+0x24>
 8009568:	4b07      	ldr	r3, [pc, #28]	@ (8009588 <__assert_func+0x30>)
 800956a:	9100      	str	r1, [sp, #0]
 800956c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009570:	4906      	ldr	r1, [pc, #24]	@ (800958c <__assert_func+0x34>)
 8009572:	462b      	mov	r3, r5
 8009574:	f000 fba8 	bl	8009cc8 <fiprintf>
 8009578:	f000 fbb8 	bl	8009cec <abort>
 800957c:	4b04      	ldr	r3, [pc, #16]	@ (8009590 <__assert_func+0x38>)
 800957e:	461c      	mov	r4, r3
 8009580:	e7f3      	b.n	800956a <__assert_func+0x12>
 8009582:	bf00      	nop
 8009584:	2000001c 	.word	0x2000001c
 8009588:	0800a826 	.word	0x0800a826
 800958c:	0800a833 	.word	0x0800a833
 8009590:	0800a861 	.word	0x0800a861

08009594 <_calloc_r>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	fba1 5402 	umull	r5, r4, r1, r2
 800959a:	b934      	cbnz	r4, 80095aa <_calloc_r+0x16>
 800959c:	4629      	mov	r1, r5
 800959e:	f7fe f9d7 	bl	8007950 <_malloc_r>
 80095a2:	4606      	mov	r6, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <_calloc_r+0x1e>
 80095a6:	4630      	mov	r0, r6
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	220c      	movs	r2, #12
 80095ac:	6002      	str	r2, [r0, #0]
 80095ae:	2600      	movs	r6, #0
 80095b0:	e7f9      	b.n	80095a6 <_calloc_r+0x12>
 80095b2:	462a      	mov	r2, r5
 80095b4:	4621      	mov	r1, r4
 80095b6:	f7fd fa6a 	bl	8006a8e <memset>
 80095ba:	e7f4      	b.n	80095a6 <_calloc_r+0x12>

080095bc <rshift>:
 80095bc:	6903      	ldr	r3, [r0, #16]
 80095be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095ca:	f100 0414 	add.w	r4, r0, #20
 80095ce:	dd45      	ble.n	800965c <rshift+0xa0>
 80095d0:	f011 011f 	ands.w	r1, r1, #31
 80095d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095dc:	d10c      	bne.n	80095f8 <rshift+0x3c>
 80095de:	f100 0710 	add.w	r7, r0, #16
 80095e2:	4629      	mov	r1, r5
 80095e4:	42b1      	cmp	r1, r6
 80095e6:	d334      	bcc.n	8009652 <rshift+0x96>
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	1eea      	subs	r2, r5, #3
 80095ee:	4296      	cmp	r6, r2
 80095f0:	bf38      	it	cc
 80095f2:	2300      	movcc	r3, #0
 80095f4:	4423      	add	r3, r4
 80095f6:	e015      	b.n	8009624 <rshift+0x68>
 80095f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095fc:	f1c1 0820 	rsb	r8, r1, #32
 8009600:	40cf      	lsrs	r7, r1
 8009602:	f105 0e04 	add.w	lr, r5, #4
 8009606:	46a1      	mov	r9, r4
 8009608:	4576      	cmp	r6, lr
 800960a:	46f4      	mov	ip, lr
 800960c:	d815      	bhi.n	800963a <rshift+0x7e>
 800960e:	1a9a      	subs	r2, r3, r2
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	3a04      	subs	r2, #4
 8009614:	3501      	adds	r5, #1
 8009616:	42ae      	cmp	r6, r5
 8009618:	bf38      	it	cc
 800961a:	2200      	movcc	r2, #0
 800961c:	18a3      	adds	r3, r4, r2
 800961e:	50a7      	str	r7, [r4, r2]
 8009620:	b107      	cbz	r7, 8009624 <rshift+0x68>
 8009622:	3304      	adds	r3, #4
 8009624:	1b1a      	subs	r2, r3, r4
 8009626:	42a3      	cmp	r3, r4
 8009628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800962c:	bf08      	it	eq
 800962e:	2300      	moveq	r3, #0
 8009630:	6102      	str	r2, [r0, #16]
 8009632:	bf08      	it	eq
 8009634:	6143      	streq	r3, [r0, #20]
 8009636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800963a:	f8dc c000 	ldr.w	ip, [ip]
 800963e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009642:	ea4c 0707 	orr.w	r7, ip, r7
 8009646:	f849 7b04 	str.w	r7, [r9], #4
 800964a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800964e:	40cf      	lsrs	r7, r1
 8009650:	e7da      	b.n	8009608 <rshift+0x4c>
 8009652:	f851 cb04 	ldr.w	ip, [r1], #4
 8009656:	f847 cf04 	str.w	ip, [r7, #4]!
 800965a:	e7c3      	b.n	80095e4 <rshift+0x28>
 800965c:	4623      	mov	r3, r4
 800965e:	e7e1      	b.n	8009624 <rshift+0x68>

08009660 <__hexdig_fun>:
 8009660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009664:	2b09      	cmp	r3, #9
 8009666:	d802      	bhi.n	800966e <__hexdig_fun+0xe>
 8009668:	3820      	subs	r0, #32
 800966a:	b2c0      	uxtb	r0, r0
 800966c:	4770      	bx	lr
 800966e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009672:	2b05      	cmp	r3, #5
 8009674:	d801      	bhi.n	800967a <__hexdig_fun+0x1a>
 8009676:	3847      	subs	r0, #71	@ 0x47
 8009678:	e7f7      	b.n	800966a <__hexdig_fun+0xa>
 800967a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800967e:	2b05      	cmp	r3, #5
 8009680:	d801      	bhi.n	8009686 <__hexdig_fun+0x26>
 8009682:	3827      	subs	r0, #39	@ 0x27
 8009684:	e7f1      	b.n	800966a <__hexdig_fun+0xa>
 8009686:	2000      	movs	r0, #0
 8009688:	4770      	bx	lr
	...

0800968c <__gethex>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b085      	sub	sp, #20
 8009692:	468a      	mov	sl, r1
 8009694:	9302      	str	r3, [sp, #8]
 8009696:	680b      	ldr	r3, [r1, #0]
 8009698:	9001      	str	r0, [sp, #4]
 800969a:	4690      	mov	r8, r2
 800969c:	1c9c      	adds	r4, r3, #2
 800969e:	46a1      	mov	r9, r4
 80096a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80096a4:	2830      	cmp	r0, #48	@ 0x30
 80096a6:	d0fa      	beq.n	800969e <__gethex+0x12>
 80096a8:	eba9 0303 	sub.w	r3, r9, r3
 80096ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80096b0:	f7ff ffd6 	bl	8009660 <__hexdig_fun>
 80096b4:	4605      	mov	r5, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d168      	bne.n	800978c <__gethex+0x100>
 80096ba:	49a0      	ldr	r1, [pc, #640]	@ (800993c <__gethex+0x2b0>)
 80096bc:	2201      	movs	r2, #1
 80096be:	4648      	mov	r0, r9
 80096c0:	f7ff ff1e 	bl	8009500 <strncmp>
 80096c4:	4607      	mov	r7, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d167      	bne.n	800979a <__gethex+0x10e>
 80096ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096ce:	4626      	mov	r6, r4
 80096d0:	f7ff ffc6 	bl	8009660 <__hexdig_fun>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d062      	beq.n	800979e <__gethex+0x112>
 80096d8:	4623      	mov	r3, r4
 80096da:	7818      	ldrb	r0, [r3, #0]
 80096dc:	2830      	cmp	r0, #48	@ 0x30
 80096de:	4699      	mov	r9, r3
 80096e0:	f103 0301 	add.w	r3, r3, #1
 80096e4:	d0f9      	beq.n	80096da <__gethex+0x4e>
 80096e6:	f7ff ffbb 	bl	8009660 <__hexdig_fun>
 80096ea:	fab0 f580 	clz	r5, r0
 80096ee:	096d      	lsrs	r5, r5, #5
 80096f0:	f04f 0b01 	mov.w	fp, #1
 80096f4:	464a      	mov	r2, r9
 80096f6:	4616      	mov	r6, r2
 80096f8:	3201      	adds	r2, #1
 80096fa:	7830      	ldrb	r0, [r6, #0]
 80096fc:	f7ff ffb0 	bl	8009660 <__hexdig_fun>
 8009700:	2800      	cmp	r0, #0
 8009702:	d1f8      	bne.n	80096f6 <__gethex+0x6a>
 8009704:	498d      	ldr	r1, [pc, #564]	@ (800993c <__gethex+0x2b0>)
 8009706:	2201      	movs	r2, #1
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff fef9 	bl	8009500 <strncmp>
 800970e:	2800      	cmp	r0, #0
 8009710:	d13f      	bne.n	8009792 <__gethex+0x106>
 8009712:	b944      	cbnz	r4, 8009726 <__gethex+0x9a>
 8009714:	1c74      	adds	r4, r6, #1
 8009716:	4622      	mov	r2, r4
 8009718:	4616      	mov	r6, r2
 800971a:	3201      	adds	r2, #1
 800971c:	7830      	ldrb	r0, [r6, #0]
 800971e:	f7ff ff9f 	bl	8009660 <__hexdig_fun>
 8009722:	2800      	cmp	r0, #0
 8009724:	d1f8      	bne.n	8009718 <__gethex+0x8c>
 8009726:	1ba4      	subs	r4, r4, r6
 8009728:	00a7      	lsls	r7, r4, #2
 800972a:	7833      	ldrb	r3, [r6, #0]
 800972c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009730:	2b50      	cmp	r3, #80	@ 0x50
 8009732:	d13e      	bne.n	80097b2 <__gethex+0x126>
 8009734:	7873      	ldrb	r3, [r6, #1]
 8009736:	2b2b      	cmp	r3, #43	@ 0x2b
 8009738:	d033      	beq.n	80097a2 <__gethex+0x116>
 800973a:	2b2d      	cmp	r3, #45	@ 0x2d
 800973c:	d034      	beq.n	80097a8 <__gethex+0x11c>
 800973e:	1c71      	adds	r1, r6, #1
 8009740:	2400      	movs	r4, #0
 8009742:	7808      	ldrb	r0, [r1, #0]
 8009744:	f7ff ff8c 	bl	8009660 <__hexdig_fun>
 8009748:	1e43      	subs	r3, r0, #1
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b18      	cmp	r3, #24
 800974e:	d830      	bhi.n	80097b2 <__gethex+0x126>
 8009750:	f1a0 0210 	sub.w	r2, r0, #16
 8009754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009758:	f7ff ff82 	bl	8009660 <__hexdig_fun>
 800975c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009760:	fa5f fc8c 	uxtb.w	ip, ip
 8009764:	f1bc 0f18 	cmp.w	ip, #24
 8009768:	f04f 030a 	mov.w	r3, #10
 800976c:	d91e      	bls.n	80097ac <__gethex+0x120>
 800976e:	b104      	cbz	r4, 8009772 <__gethex+0xe6>
 8009770:	4252      	negs	r2, r2
 8009772:	4417      	add	r7, r2
 8009774:	f8ca 1000 	str.w	r1, [sl]
 8009778:	b1ed      	cbz	r5, 80097b6 <__gethex+0x12a>
 800977a:	f1bb 0f00 	cmp.w	fp, #0
 800977e:	bf0c      	ite	eq
 8009780:	2506      	moveq	r5, #6
 8009782:	2500      	movne	r5, #0
 8009784:	4628      	mov	r0, r5
 8009786:	b005      	add	sp, #20
 8009788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978c:	2500      	movs	r5, #0
 800978e:	462c      	mov	r4, r5
 8009790:	e7b0      	b.n	80096f4 <__gethex+0x68>
 8009792:	2c00      	cmp	r4, #0
 8009794:	d1c7      	bne.n	8009726 <__gethex+0x9a>
 8009796:	4627      	mov	r7, r4
 8009798:	e7c7      	b.n	800972a <__gethex+0x9e>
 800979a:	464e      	mov	r6, r9
 800979c:	462f      	mov	r7, r5
 800979e:	2501      	movs	r5, #1
 80097a0:	e7c3      	b.n	800972a <__gethex+0x9e>
 80097a2:	2400      	movs	r4, #0
 80097a4:	1cb1      	adds	r1, r6, #2
 80097a6:	e7cc      	b.n	8009742 <__gethex+0xb6>
 80097a8:	2401      	movs	r4, #1
 80097aa:	e7fb      	b.n	80097a4 <__gethex+0x118>
 80097ac:	fb03 0002 	mla	r0, r3, r2, r0
 80097b0:	e7ce      	b.n	8009750 <__gethex+0xc4>
 80097b2:	4631      	mov	r1, r6
 80097b4:	e7de      	b.n	8009774 <__gethex+0xe8>
 80097b6:	eba6 0309 	sub.w	r3, r6, r9
 80097ba:	3b01      	subs	r3, #1
 80097bc:	4629      	mov	r1, r5
 80097be:	2b07      	cmp	r3, #7
 80097c0:	dc0a      	bgt.n	80097d8 <__gethex+0x14c>
 80097c2:	9801      	ldr	r0, [sp, #4]
 80097c4:	f7fe f950 	bl	8007a68 <_Balloc>
 80097c8:	4604      	mov	r4, r0
 80097ca:	b940      	cbnz	r0, 80097de <__gethex+0x152>
 80097cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009940 <__gethex+0x2b4>)
 80097ce:	4602      	mov	r2, r0
 80097d0:	21e4      	movs	r1, #228	@ 0xe4
 80097d2:	485c      	ldr	r0, [pc, #368]	@ (8009944 <__gethex+0x2b8>)
 80097d4:	f7ff fec0 	bl	8009558 <__assert_func>
 80097d8:	3101      	adds	r1, #1
 80097da:	105b      	asrs	r3, r3, #1
 80097dc:	e7ef      	b.n	80097be <__gethex+0x132>
 80097de:	f100 0a14 	add.w	sl, r0, #20
 80097e2:	2300      	movs	r3, #0
 80097e4:	4655      	mov	r5, sl
 80097e6:	469b      	mov	fp, r3
 80097e8:	45b1      	cmp	r9, r6
 80097ea:	d337      	bcc.n	800985c <__gethex+0x1d0>
 80097ec:	f845 bb04 	str.w	fp, [r5], #4
 80097f0:	eba5 050a 	sub.w	r5, r5, sl
 80097f4:	10ad      	asrs	r5, r5, #2
 80097f6:	6125      	str	r5, [r4, #16]
 80097f8:	4658      	mov	r0, fp
 80097fa:	f7fe fa27 	bl	8007c4c <__hi0bits>
 80097fe:	016d      	lsls	r5, r5, #5
 8009800:	f8d8 6000 	ldr.w	r6, [r8]
 8009804:	1a2d      	subs	r5, r5, r0
 8009806:	42b5      	cmp	r5, r6
 8009808:	dd54      	ble.n	80098b4 <__gethex+0x228>
 800980a:	1bad      	subs	r5, r5, r6
 800980c:	4629      	mov	r1, r5
 800980e:	4620      	mov	r0, r4
 8009810:	f7fe fdb3 	bl	800837a <__any_on>
 8009814:	4681      	mov	r9, r0
 8009816:	b178      	cbz	r0, 8009838 <__gethex+0x1ac>
 8009818:	1e6b      	subs	r3, r5, #1
 800981a:	1159      	asrs	r1, r3, #5
 800981c:	f003 021f 	and.w	r2, r3, #31
 8009820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	fa09 f202 	lsl.w	r2, r9, r2
 800982c:	420a      	tst	r2, r1
 800982e:	d003      	beq.n	8009838 <__gethex+0x1ac>
 8009830:	454b      	cmp	r3, r9
 8009832:	dc36      	bgt.n	80098a2 <__gethex+0x216>
 8009834:	f04f 0902 	mov.w	r9, #2
 8009838:	4629      	mov	r1, r5
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff febe 	bl	80095bc <rshift>
 8009840:	442f      	add	r7, r5
 8009842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009846:	42bb      	cmp	r3, r7
 8009848:	da42      	bge.n	80098d0 <__gethex+0x244>
 800984a:	9801      	ldr	r0, [sp, #4]
 800984c:	4621      	mov	r1, r4
 800984e:	f7fe f94b 	bl	8007ae8 <_Bfree>
 8009852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009854:	2300      	movs	r3, #0
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	25a3      	movs	r5, #163	@ 0xa3
 800985a:	e793      	b.n	8009784 <__gethex+0xf8>
 800985c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009860:	2a2e      	cmp	r2, #46	@ 0x2e
 8009862:	d012      	beq.n	800988a <__gethex+0x1fe>
 8009864:	2b20      	cmp	r3, #32
 8009866:	d104      	bne.n	8009872 <__gethex+0x1e6>
 8009868:	f845 bb04 	str.w	fp, [r5], #4
 800986c:	f04f 0b00 	mov.w	fp, #0
 8009870:	465b      	mov	r3, fp
 8009872:	7830      	ldrb	r0, [r6, #0]
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	f7ff fef3 	bl	8009660 <__hexdig_fun>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	f000 000f 	and.w	r0, r0, #15
 8009880:	4098      	lsls	r0, r3
 8009882:	ea4b 0b00 	orr.w	fp, fp, r0
 8009886:	3304      	adds	r3, #4
 8009888:	e7ae      	b.n	80097e8 <__gethex+0x15c>
 800988a:	45b1      	cmp	r9, r6
 800988c:	d8ea      	bhi.n	8009864 <__gethex+0x1d8>
 800988e:	492b      	ldr	r1, [pc, #172]	@ (800993c <__gethex+0x2b0>)
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	2201      	movs	r2, #1
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff fe33 	bl	8009500 <strncmp>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	2800      	cmp	r0, #0
 800989e:	d1e1      	bne.n	8009864 <__gethex+0x1d8>
 80098a0:	e7a2      	b.n	80097e8 <__gethex+0x15c>
 80098a2:	1ea9      	subs	r1, r5, #2
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7fe fd68 	bl	800837a <__any_on>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d0c2      	beq.n	8009834 <__gethex+0x1a8>
 80098ae:	f04f 0903 	mov.w	r9, #3
 80098b2:	e7c1      	b.n	8009838 <__gethex+0x1ac>
 80098b4:	da09      	bge.n	80098ca <__gethex+0x23e>
 80098b6:	1b75      	subs	r5, r6, r5
 80098b8:	4621      	mov	r1, r4
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	462a      	mov	r2, r5
 80098be:	f7fe fb23 	bl	8007f08 <__lshift>
 80098c2:	1b7f      	subs	r7, r7, r5
 80098c4:	4604      	mov	r4, r0
 80098c6:	f100 0a14 	add.w	sl, r0, #20
 80098ca:	f04f 0900 	mov.w	r9, #0
 80098ce:	e7b8      	b.n	8009842 <__gethex+0x1b6>
 80098d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098d4:	42bd      	cmp	r5, r7
 80098d6:	dd6f      	ble.n	80099b8 <__gethex+0x32c>
 80098d8:	1bed      	subs	r5, r5, r7
 80098da:	42ae      	cmp	r6, r5
 80098dc:	dc34      	bgt.n	8009948 <__gethex+0x2bc>
 80098de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d022      	beq.n	800992c <__gethex+0x2a0>
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d024      	beq.n	8009934 <__gethex+0x2a8>
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d115      	bne.n	800991a <__gethex+0x28e>
 80098ee:	42ae      	cmp	r6, r5
 80098f0:	d113      	bne.n	800991a <__gethex+0x28e>
 80098f2:	2e01      	cmp	r6, #1
 80098f4:	d10b      	bne.n	800990e <__gethex+0x282>
 80098f6:	9a02      	ldr	r2, [sp, #8]
 80098f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	2301      	movs	r3, #1
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	f8ca 3000 	str.w	r3, [sl]
 8009906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009908:	2562      	movs	r5, #98	@ 0x62
 800990a:	601c      	str	r4, [r3, #0]
 800990c:	e73a      	b.n	8009784 <__gethex+0xf8>
 800990e:	1e71      	subs	r1, r6, #1
 8009910:	4620      	mov	r0, r4
 8009912:	f7fe fd32 	bl	800837a <__any_on>
 8009916:	2800      	cmp	r0, #0
 8009918:	d1ed      	bne.n	80098f6 <__gethex+0x26a>
 800991a:	9801      	ldr	r0, [sp, #4]
 800991c:	4621      	mov	r1, r4
 800991e:	f7fe f8e3 	bl	8007ae8 <_Bfree>
 8009922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009924:	2300      	movs	r3, #0
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	2550      	movs	r5, #80	@ 0x50
 800992a:	e72b      	b.n	8009784 <__gethex+0xf8>
 800992c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f3      	bne.n	800991a <__gethex+0x28e>
 8009932:	e7e0      	b.n	80098f6 <__gethex+0x26a>
 8009934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1dd      	bne.n	80098f6 <__gethex+0x26a>
 800993a:	e7ee      	b.n	800991a <__gethex+0x28e>
 800993c:	0800a80b 	.word	0x0800a80b
 8009940:	0800a7a1 	.word	0x0800a7a1
 8009944:	0800a862 	.word	0x0800a862
 8009948:	1e6f      	subs	r7, r5, #1
 800994a:	f1b9 0f00 	cmp.w	r9, #0
 800994e:	d130      	bne.n	80099b2 <__gethex+0x326>
 8009950:	b127      	cbz	r7, 800995c <__gethex+0x2d0>
 8009952:	4639      	mov	r1, r7
 8009954:	4620      	mov	r0, r4
 8009956:	f7fe fd10 	bl	800837a <__any_on>
 800995a:	4681      	mov	r9, r0
 800995c:	117a      	asrs	r2, r7, #5
 800995e:	2301      	movs	r3, #1
 8009960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009964:	f007 071f 	and.w	r7, r7, #31
 8009968:	40bb      	lsls	r3, r7
 800996a:	4213      	tst	r3, r2
 800996c:	4629      	mov	r1, r5
 800996e:	4620      	mov	r0, r4
 8009970:	bf18      	it	ne
 8009972:	f049 0902 	orrne.w	r9, r9, #2
 8009976:	f7ff fe21 	bl	80095bc <rshift>
 800997a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800997e:	1b76      	subs	r6, r6, r5
 8009980:	2502      	movs	r5, #2
 8009982:	f1b9 0f00 	cmp.w	r9, #0
 8009986:	d047      	beq.n	8009a18 <__gethex+0x38c>
 8009988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d015      	beq.n	80099bc <__gethex+0x330>
 8009990:	2b03      	cmp	r3, #3
 8009992:	d017      	beq.n	80099c4 <__gethex+0x338>
 8009994:	2b01      	cmp	r3, #1
 8009996:	d109      	bne.n	80099ac <__gethex+0x320>
 8009998:	f019 0f02 	tst.w	r9, #2
 800999c:	d006      	beq.n	80099ac <__gethex+0x320>
 800999e:	f8da 3000 	ldr.w	r3, [sl]
 80099a2:	ea49 0903 	orr.w	r9, r9, r3
 80099a6:	f019 0f01 	tst.w	r9, #1
 80099aa:	d10e      	bne.n	80099ca <__gethex+0x33e>
 80099ac:	f045 0510 	orr.w	r5, r5, #16
 80099b0:	e032      	b.n	8009a18 <__gethex+0x38c>
 80099b2:	f04f 0901 	mov.w	r9, #1
 80099b6:	e7d1      	b.n	800995c <__gethex+0x2d0>
 80099b8:	2501      	movs	r5, #1
 80099ba:	e7e2      	b.n	8009982 <__gethex+0x2f6>
 80099bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099be:	f1c3 0301 	rsb	r3, r3, #1
 80099c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0f0      	beq.n	80099ac <__gethex+0x320>
 80099ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099ce:	f104 0314 	add.w	r3, r4, #20
 80099d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099da:	f04f 0c00 	mov.w	ip, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099e8:	d01b      	beq.n	8009a22 <__gethex+0x396>
 80099ea:	3201      	adds	r2, #1
 80099ec:	6002      	str	r2, [r0, #0]
 80099ee:	2d02      	cmp	r5, #2
 80099f0:	f104 0314 	add.w	r3, r4, #20
 80099f4:	d13c      	bne.n	8009a70 <__gethex+0x3e4>
 80099f6:	f8d8 2000 	ldr.w	r2, [r8]
 80099fa:	3a01      	subs	r2, #1
 80099fc:	42b2      	cmp	r2, r6
 80099fe:	d109      	bne.n	8009a14 <__gethex+0x388>
 8009a00:	1171      	asrs	r1, r6, #5
 8009a02:	2201      	movs	r2, #1
 8009a04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a08:	f006 061f 	and.w	r6, r6, #31
 8009a0c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a10:	421e      	tst	r6, r3
 8009a12:	d13a      	bne.n	8009a8a <__gethex+0x3fe>
 8009a14:	f045 0520 	orr.w	r5, r5, #32
 8009a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a1a:	601c      	str	r4, [r3, #0]
 8009a1c:	9b02      	ldr	r3, [sp, #8]
 8009a1e:	601f      	str	r7, [r3, #0]
 8009a20:	e6b0      	b.n	8009784 <__gethex+0xf8>
 8009a22:	4299      	cmp	r1, r3
 8009a24:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a28:	d8d9      	bhi.n	80099de <__gethex+0x352>
 8009a2a:	68a3      	ldr	r3, [r4, #8]
 8009a2c:	459b      	cmp	fp, r3
 8009a2e:	db17      	blt.n	8009a60 <__gethex+0x3d4>
 8009a30:	6861      	ldr	r1, [r4, #4]
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	3101      	adds	r1, #1
 8009a36:	f7fe f817 	bl	8007a68 <_Balloc>
 8009a3a:	4681      	mov	r9, r0
 8009a3c:	b918      	cbnz	r0, 8009a46 <__gethex+0x3ba>
 8009a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa8 <__gethex+0x41c>)
 8009a40:	4602      	mov	r2, r0
 8009a42:	2184      	movs	r1, #132	@ 0x84
 8009a44:	e6c5      	b.n	80097d2 <__gethex+0x146>
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	3202      	adds	r2, #2
 8009a4a:	f104 010c 	add.w	r1, r4, #12
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	300c      	adds	r0, #12
 8009a52:	f7fd f89c 	bl	8006b8e <memcpy>
 8009a56:	4621      	mov	r1, r4
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	f7fe f845 	bl	8007ae8 <_Bfree>
 8009a5e:	464c      	mov	r4, r9
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a68:	6122      	str	r2, [r4, #16]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	615a      	str	r2, [r3, #20]
 8009a6e:	e7be      	b.n	80099ee <__gethex+0x362>
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	455a      	cmp	r2, fp
 8009a74:	dd0b      	ble.n	8009a8e <__gethex+0x402>
 8009a76:	2101      	movs	r1, #1
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7ff fd9f 	bl	80095bc <rshift>
 8009a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a82:	3701      	adds	r7, #1
 8009a84:	42bb      	cmp	r3, r7
 8009a86:	f6ff aee0 	blt.w	800984a <__gethex+0x1be>
 8009a8a:	2501      	movs	r5, #1
 8009a8c:	e7c2      	b.n	8009a14 <__gethex+0x388>
 8009a8e:	f016 061f 	ands.w	r6, r6, #31
 8009a92:	d0fa      	beq.n	8009a8a <__gethex+0x3fe>
 8009a94:	4453      	add	r3, sl
 8009a96:	f1c6 0620 	rsb	r6, r6, #32
 8009a9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a9e:	f7fe f8d5 	bl	8007c4c <__hi0bits>
 8009aa2:	42b0      	cmp	r0, r6
 8009aa4:	dbe7      	blt.n	8009a76 <__gethex+0x3ea>
 8009aa6:	e7f0      	b.n	8009a8a <__gethex+0x3fe>
 8009aa8:	0800a7a1 	.word	0x0800a7a1

08009aac <L_shift>:
 8009aac:	f1c2 0208 	rsb	r2, r2, #8
 8009ab0:	0092      	lsls	r2, r2, #2
 8009ab2:	b570      	push	{r4, r5, r6, lr}
 8009ab4:	f1c2 0620 	rsb	r6, r2, #32
 8009ab8:	6843      	ldr	r3, [r0, #4]
 8009aba:	6804      	ldr	r4, [r0, #0]
 8009abc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ac0:	432c      	orrs	r4, r5
 8009ac2:	40d3      	lsrs	r3, r2
 8009ac4:	6004      	str	r4, [r0, #0]
 8009ac6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009aca:	4288      	cmp	r0, r1
 8009acc:	d3f4      	bcc.n	8009ab8 <L_shift+0xc>
 8009ace:	bd70      	pop	{r4, r5, r6, pc}

08009ad0 <__match>:
 8009ad0:	b530      	push	{r4, r5, lr}
 8009ad2:	6803      	ldr	r3, [r0, #0]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ada:	b914      	cbnz	r4, 8009ae2 <__match+0x12>
 8009adc:	6003      	str	r3, [r0, #0]
 8009ade:	2001      	movs	r0, #1
 8009ae0:	bd30      	pop	{r4, r5, pc}
 8009ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009aea:	2d19      	cmp	r5, #25
 8009aec:	bf98      	it	ls
 8009aee:	3220      	addls	r2, #32
 8009af0:	42a2      	cmp	r2, r4
 8009af2:	d0f0      	beq.n	8009ad6 <__match+0x6>
 8009af4:	2000      	movs	r0, #0
 8009af6:	e7f3      	b.n	8009ae0 <__match+0x10>

08009af8 <__hexnan>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	680b      	ldr	r3, [r1, #0]
 8009afe:	6801      	ldr	r1, [r0, #0]
 8009b00:	115e      	asrs	r6, r3, #5
 8009b02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b06:	f013 031f 	ands.w	r3, r3, #31
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	bf18      	it	ne
 8009b0e:	3604      	addne	r6, #4
 8009b10:	2500      	movs	r5, #0
 8009b12:	1f37      	subs	r7, r6, #4
 8009b14:	4682      	mov	sl, r0
 8009b16:	4690      	mov	r8, r2
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b1e:	46b9      	mov	r9, r7
 8009b20:	463c      	mov	r4, r7
 8009b22:	9502      	str	r5, [sp, #8]
 8009b24:	46ab      	mov	fp, r5
 8009b26:	784a      	ldrb	r2, [r1, #1]
 8009b28:	1c4b      	adds	r3, r1, #1
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	b342      	cbz	r2, 8009b80 <__hexnan+0x88>
 8009b2e:	4610      	mov	r0, r2
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	9204      	str	r2, [sp, #16]
 8009b34:	f7ff fd94 	bl	8009660 <__hexdig_fun>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d151      	bne.n	8009be0 <__hexnan+0xe8>
 8009b3c:	9a04      	ldr	r2, [sp, #16]
 8009b3e:	9905      	ldr	r1, [sp, #20]
 8009b40:	2a20      	cmp	r2, #32
 8009b42:	d818      	bhi.n	8009b76 <__hexnan+0x7e>
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	459b      	cmp	fp, r3
 8009b48:	dd13      	ble.n	8009b72 <__hexnan+0x7a>
 8009b4a:	454c      	cmp	r4, r9
 8009b4c:	d206      	bcs.n	8009b5c <__hexnan+0x64>
 8009b4e:	2d07      	cmp	r5, #7
 8009b50:	dc04      	bgt.n	8009b5c <__hexnan+0x64>
 8009b52:	462a      	mov	r2, r5
 8009b54:	4649      	mov	r1, r9
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff ffa8 	bl	8009aac <L_shift>
 8009b5c:	4544      	cmp	r4, r8
 8009b5e:	d952      	bls.n	8009c06 <__hexnan+0x10e>
 8009b60:	2300      	movs	r3, #0
 8009b62:	f1a4 0904 	sub.w	r9, r4, #4
 8009b66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b6a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b6e:	464c      	mov	r4, r9
 8009b70:	461d      	mov	r5, r3
 8009b72:	9903      	ldr	r1, [sp, #12]
 8009b74:	e7d7      	b.n	8009b26 <__hexnan+0x2e>
 8009b76:	2a29      	cmp	r2, #41	@ 0x29
 8009b78:	d157      	bne.n	8009c2a <__hexnan+0x132>
 8009b7a:	3102      	adds	r1, #2
 8009b7c:	f8ca 1000 	str.w	r1, [sl]
 8009b80:	f1bb 0f00 	cmp.w	fp, #0
 8009b84:	d051      	beq.n	8009c2a <__hexnan+0x132>
 8009b86:	454c      	cmp	r4, r9
 8009b88:	d206      	bcs.n	8009b98 <__hexnan+0xa0>
 8009b8a:	2d07      	cmp	r5, #7
 8009b8c:	dc04      	bgt.n	8009b98 <__hexnan+0xa0>
 8009b8e:	462a      	mov	r2, r5
 8009b90:	4649      	mov	r1, r9
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff ff8a 	bl	8009aac <L_shift>
 8009b98:	4544      	cmp	r4, r8
 8009b9a:	d936      	bls.n	8009c0a <__hexnan+0x112>
 8009b9c:	f1a8 0204 	sub.w	r2, r8, #4
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ba6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009baa:	429f      	cmp	r7, r3
 8009bac:	d2f9      	bcs.n	8009ba2 <__hexnan+0xaa>
 8009bae:	1b3b      	subs	r3, r7, r4
 8009bb0:	f023 0303 	bic.w	r3, r3, #3
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	3401      	adds	r4, #1
 8009bb8:	3e03      	subs	r6, #3
 8009bba:	42b4      	cmp	r4, r6
 8009bbc:	bf88      	it	hi
 8009bbe:	2304      	movhi	r3, #4
 8009bc0:	4443      	add	r3, r8
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f843 2b04 	str.w	r2, [r3], #4
 8009bc8:	429f      	cmp	r7, r3
 8009bca:	d2fb      	bcs.n	8009bc4 <__hexnan+0xcc>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	b91b      	cbnz	r3, 8009bd8 <__hexnan+0xe0>
 8009bd0:	4547      	cmp	r7, r8
 8009bd2:	d128      	bne.n	8009c26 <__hexnan+0x12e>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	2005      	movs	r0, #5
 8009bda:	b007      	add	sp, #28
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	3501      	adds	r5, #1
 8009be2:	2d08      	cmp	r5, #8
 8009be4:	f10b 0b01 	add.w	fp, fp, #1
 8009be8:	dd06      	ble.n	8009bf8 <__hexnan+0x100>
 8009bea:	4544      	cmp	r4, r8
 8009bec:	d9c1      	bls.n	8009b72 <__hexnan+0x7a>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bf4:	2501      	movs	r5, #1
 8009bf6:	3c04      	subs	r4, #4
 8009bf8:	6822      	ldr	r2, [r4, #0]
 8009bfa:	f000 000f 	and.w	r0, r0, #15
 8009bfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c02:	6020      	str	r0, [r4, #0]
 8009c04:	e7b5      	b.n	8009b72 <__hexnan+0x7a>
 8009c06:	2508      	movs	r5, #8
 8009c08:	e7b3      	b.n	8009b72 <__hexnan+0x7a>
 8009c0a:	9b01      	ldr	r3, [sp, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0dd      	beq.n	8009bcc <__hexnan+0xd4>
 8009c10:	f1c3 0320 	rsb	r3, r3, #32
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	40da      	lsrs	r2, r3
 8009c1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c1e:	4013      	ands	r3, r2
 8009c20:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c24:	e7d2      	b.n	8009bcc <__hexnan+0xd4>
 8009c26:	3f04      	subs	r7, #4
 8009c28:	e7d0      	b.n	8009bcc <__hexnan+0xd4>
 8009c2a:	2004      	movs	r0, #4
 8009c2c:	e7d5      	b.n	8009bda <__hexnan+0xe2>

08009c2e <__ascii_mbtowc>:
 8009c2e:	b082      	sub	sp, #8
 8009c30:	b901      	cbnz	r1, 8009c34 <__ascii_mbtowc+0x6>
 8009c32:	a901      	add	r1, sp, #4
 8009c34:	b142      	cbz	r2, 8009c48 <__ascii_mbtowc+0x1a>
 8009c36:	b14b      	cbz	r3, 8009c4c <__ascii_mbtowc+0x1e>
 8009c38:	7813      	ldrb	r3, [r2, #0]
 8009c3a:	600b      	str	r3, [r1, #0]
 8009c3c:	7812      	ldrb	r2, [r2, #0]
 8009c3e:	1e10      	subs	r0, r2, #0
 8009c40:	bf18      	it	ne
 8009c42:	2001      	movne	r0, #1
 8009c44:	b002      	add	sp, #8
 8009c46:	4770      	bx	lr
 8009c48:	4610      	mov	r0, r2
 8009c4a:	e7fb      	b.n	8009c44 <__ascii_mbtowc+0x16>
 8009c4c:	f06f 0001 	mvn.w	r0, #1
 8009c50:	e7f8      	b.n	8009c44 <__ascii_mbtowc+0x16>

08009c52 <_realloc_r>:
 8009c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	4607      	mov	r7, r0
 8009c58:	4614      	mov	r4, r2
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	b921      	cbnz	r1, 8009c68 <_realloc_r+0x16>
 8009c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c62:	4611      	mov	r1, r2
 8009c64:	f7fd be74 	b.w	8007950 <_malloc_r>
 8009c68:	b92a      	cbnz	r2, 8009c76 <_realloc_r+0x24>
 8009c6a:	f7fd fdfd 	bl	8007868 <_free_r>
 8009c6e:	4625      	mov	r5, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c76:	f000 f840 	bl	8009cfa <_malloc_usable_size_r>
 8009c7a:	4284      	cmp	r4, r0
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	d802      	bhi.n	8009c86 <_realloc_r+0x34>
 8009c80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c84:	d8f4      	bhi.n	8009c70 <_realloc_r+0x1e>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7fd fe61 	bl	8007950 <_malloc_r>
 8009c8e:	4680      	mov	r8, r0
 8009c90:	b908      	cbnz	r0, 8009c96 <_realloc_r+0x44>
 8009c92:	4645      	mov	r5, r8
 8009c94:	e7ec      	b.n	8009c70 <_realloc_r+0x1e>
 8009c96:	42b4      	cmp	r4, r6
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	bf28      	it	cs
 8009c9e:	4632      	movcs	r2, r6
 8009ca0:	f7fc ff75 	bl	8006b8e <memcpy>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f7fd fdde 	bl	8007868 <_free_r>
 8009cac:	e7f1      	b.n	8009c92 <_realloc_r+0x40>

08009cae <__ascii_wctomb>:
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	b141      	cbz	r1, 8009cc6 <__ascii_wctomb+0x18>
 8009cb4:	2aff      	cmp	r2, #255	@ 0xff
 8009cb6:	d904      	bls.n	8009cc2 <__ascii_wctomb+0x14>
 8009cb8:	228a      	movs	r2, #138	@ 0x8a
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	4770      	bx	lr
 8009cc2:	700a      	strb	r2, [r1, #0]
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	4770      	bx	lr

08009cc8 <fiprintf>:
 8009cc8:	b40e      	push	{r1, r2, r3}
 8009cca:	b503      	push	{r0, r1, lr}
 8009ccc:	4601      	mov	r1, r0
 8009cce:	ab03      	add	r3, sp, #12
 8009cd0:	4805      	ldr	r0, [pc, #20]	@ (8009ce8 <fiprintf+0x20>)
 8009cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f000 f83f 	bl	8009d5c <_vfiprintf_r>
 8009cde:	b002      	add	sp, #8
 8009ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce4:	b003      	add	sp, #12
 8009ce6:	4770      	bx	lr
 8009ce8:	2000001c 	.word	0x2000001c

08009cec <abort>:
 8009cec:	b508      	push	{r3, lr}
 8009cee:	2006      	movs	r0, #6
 8009cf0:	f000 fa08 	bl	800a104 <raise>
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	f7f7 fd91 	bl	800181c <_exit>

08009cfa <_malloc_usable_size_r>:
 8009cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfe:	1f18      	subs	r0, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfbc      	itt	lt
 8009d04:	580b      	ldrlt	r3, [r1, r0]
 8009d06:	18c0      	addlt	r0, r0, r3
 8009d08:	4770      	bx	lr

08009d0a <__sfputc_r>:
 8009d0a:	6893      	ldr	r3, [r2, #8]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	b410      	push	{r4}
 8009d12:	6093      	str	r3, [r2, #8]
 8009d14:	da08      	bge.n	8009d28 <__sfputc_r+0x1e>
 8009d16:	6994      	ldr	r4, [r2, #24]
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	db01      	blt.n	8009d20 <__sfputc_r+0x16>
 8009d1c:	290a      	cmp	r1, #10
 8009d1e:	d103      	bne.n	8009d28 <__sfputc_r+0x1e>
 8009d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d24:	f000 b932 	b.w	8009f8c <__swbuf_r>
 8009d28:	6813      	ldr	r3, [r2, #0]
 8009d2a:	1c58      	adds	r0, r3, #1
 8009d2c:	6010      	str	r0, [r2, #0]
 8009d2e:	7019      	strb	r1, [r3, #0]
 8009d30:	4608      	mov	r0, r1
 8009d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <__sfputs_r>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	4614      	mov	r4, r2
 8009d40:	18d5      	adds	r5, r2, r3
 8009d42:	42ac      	cmp	r4, r5
 8009d44:	d101      	bne.n	8009d4a <__sfputs_r+0x12>
 8009d46:	2000      	movs	r0, #0
 8009d48:	e007      	b.n	8009d5a <__sfputs_r+0x22>
 8009d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4e:	463a      	mov	r2, r7
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff ffda 	bl	8009d0a <__sfputc_r>
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	d1f3      	bne.n	8009d42 <__sfputs_r+0xa>
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d5c <_vfiprintf_r>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	460d      	mov	r5, r1
 8009d62:	b09d      	sub	sp, #116	@ 0x74
 8009d64:	4614      	mov	r4, r2
 8009d66:	4698      	mov	r8, r3
 8009d68:	4606      	mov	r6, r0
 8009d6a:	b118      	cbz	r0, 8009d74 <_vfiprintf_r+0x18>
 8009d6c:	6a03      	ldr	r3, [r0, #32]
 8009d6e:	b90b      	cbnz	r3, 8009d74 <_vfiprintf_r+0x18>
 8009d70:	f7fc fdf2 	bl	8006958 <__sinit>
 8009d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	d405      	bmi.n	8009d86 <_vfiprintf_r+0x2a>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	059a      	lsls	r2, r3, #22
 8009d7e:	d402      	bmi.n	8009d86 <_vfiprintf_r+0x2a>
 8009d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d82:	f7fc ff02 	bl	8006b8a <__retarget_lock_acquire_recursive>
 8009d86:	89ab      	ldrh	r3, [r5, #12]
 8009d88:	071b      	lsls	r3, r3, #28
 8009d8a:	d501      	bpl.n	8009d90 <_vfiprintf_r+0x34>
 8009d8c:	692b      	ldr	r3, [r5, #16]
 8009d8e:	b99b      	cbnz	r3, 8009db8 <_vfiprintf_r+0x5c>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 f938 	bl	800a008 <__swsetup_r>
 8009d98:	b170      	cbz	r0, 8009db8 <_vfiprintf_r+0x5c>
 8009d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d9c:	07dc      	lsls	r4, r3, #31
 8009d9e:	d504      	bpl.n	8009daa <_vfiprintf_r+0x4e>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b01d      	add	sp, #116	@ 0x74
 8009da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	0598      	lsls	r0, r3, #22
 8009dae:	d4f7      	bmi.n	8009da0 <_vfiprintf_r+0x44>
 8009db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009db2:	f7fc feeb 	bl	8006b8c <__retarget_lock_release_recursive>
 8009db6:	e7f3      	b.n	8009da0 <_vfiprintf_r+0x44>
 8009db8:	2300      	movs	r3, #0
 8009dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc6:	2330      	movs	r3, #48	@ 0x30
 8009dc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f78 <_vfiprintf_r+0x21c>
 8009dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dd0:	f04f 0901 	mov.w	r9, #1
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	469a      	mov	sl, r3
 8009dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ddc:	b10a      	cbz	r2, 8009de2 <_vfiprintf_r+0x86>
 8009dde:	2a25      	cmp	r2, #37	@ 0x25
 8009de0:	d1f9      	bne.n	8009dd6 <_vfiprintf_r+0x7a>
 8009de2:	ebba 0b04 	subs.w	fp, sl, r4
 8009de6:	d00b      	beq.n	8009e00 <_vfiprintf_r+0xa4>
 8009de8:	465b      	mov	r3, fp
 8009dea:	4622      	mov	r2, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ffa2 	bl	8009d38 <__sfputs_r>
 8009df4:	3001      	adds	r0, #1
 8009df6:	f000 80a7 	beq.w	8009f48 <_vfiprintf_r+0x1ec>
 8009dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dfc:	445a      	add	r2, fp
 8009dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e00:	f89a 3000 	ldrb.w	r3, [sl]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 809f 	beq.w	8009f48 <_vfiprintf_r+0x1ec>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e14:	f10a 0a01 	add.w	sl, sl, #1
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	9307      	str	r3, [sp, #28]
 8009e1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e22:	4654      	mov	r4, sl
 8009e24:	2205      	movs	r2, #5
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	4853      	ldr	r0, [pc, #332]	@ (8009f78 <_vfiprintf_r+0x21c>)
 8009e2c:	f7f6 f9d0 	bl	80001d0 <memchr>
 8009e30:	9a04      	ldr	r2, [sp, #16]
 8009e32:	b9d8      	cbnz	r0, 8009e6c <_vfiprintf_r+0x110>
 8009e34:	06d1      	lsls	r1, r2, #27
 8009e36:	bf44      	itt	mi
 8009e38:	2320      	movmi	r3, #32
 8009e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3e:	0713      	lsls	r3, r2, #28
 8009e40:	bf44      	itt	mi
 8009e42:	232b      	movmi	r3, #43	@ 0x2b
 8009e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e48:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e4e:	d015      	beq.n	8009e7c <_vfiprintf_r+0x120>
 8009e50:	9a07      	ldr	r2, [sp, #28]
 8009e52:	4654      	mov	r4, sl
 8009e54:	2000      	movs	r0, #0
 8009e56:	f04f 0c0a 	mov.w	ip, #10
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e60:	3b30      	subs	r3, #48	@ 0x30
 8009e62:	2b09      	cmp	r3, #9
 8009e64:	d94b      	bls.n	8009efe <_vfiprintf_r+0x1a2>
 8009e66:	b1b0      	cbz	r0, 8009e96 <_vfiprintf_r+0x13a>
 8009e68:	9207      	str	r2, [sp, #28]
 8009e6a:	e014      	b.n	8009e96 <_vfiprintf_r+0x13a>
 8009e6c:	eba0 0308 	sub.w	r3, r0, r8
 8009e70:	fa09 f303 	lsl.w	r3, r9, r3
 8009e74:	4313      	orrs	r3, r2
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	46a2      	mov	sl, r4
 8009e7a:	e7d2      	b.n	8009e22 <_vfiprintf_r+0xc6>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	1d19      	adds	r1, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9103      	str	r1, [sp, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfbb      	ittet	lt
 8009e88:	425b      	neglt	r3, r3
 8009e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e8e:	9307      	strge	r3, [sp, #28]
 8009e90:	9307      	strlt	r3, [sp, #28]
 8009e92:	bfb8      	it	lt
 8009e94:	9204      	strlt	r2, [sp, #16]
 8009e96:	7823      	ldrb	r3, [r4, #0]
 8009e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e9a:	d10a      	bne.n	8009eb2 <_vfiprintf_r+0x156>
 8009e9c:	7863      	ldrb	r3, [r4, #1]
 8009e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea0:	d132      	bne.n	8009f08 <_vfiprintf_r+0x1ac>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	1d1a      	adds	r2, r3, #4
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	9203      	str	r2, [sp, #12]
 8009eaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eae:	3402      	adds	r4, #2
 8009eb0:	9305      	str	r3, [sp, #20]
 8009eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f88 <_vfiprintf_r+0x22c>
 8009eb6:	7821      	ldrb	r1, [r4, #0]
 8009eb8:	2203      	movs	r2, #3
 8009eba:	4650      	mov	r0, sl
 8009ebc:	f7f6 f988 	bl	80001d0 <memchr>
 8009ec0:	b138      	cbz	r0, 8009ed2 <_vfiprintf_r+0x176>
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	eba0 000a 	sub.w	r0, r0, sl
 8009ec8:	2240      	movs	r2, #64	@ 0x40
 8009eca:	4082      	lsls	r2, r0
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	3401      	adds	r4, #1
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed6:	4829      	ldr	r0, [pc, #164]	@ (8009f7c <_vfiprintf_r+0x220>)
 8009ed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009edc:	2206      	movs	r2, #6
 8009ede:	f7f6 f977 	bl	80001d0 <memchr>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d03f      	beq.n	8009f66 <_vfiprintf_r+0x20a>
 8009ee6:	4b26      	ldr	r3, [pc, #152]	@ (8009f80 <_vfiprintf_r+0x224>)
 8009ee8:	bb1b      	cbnz	r3, 8009f32 <_vfiprintf_r+0x1d6>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	3307      	adds	r3, #7
 8009eee:	f023 0307 	bic.w	r3, r3, #7
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	9303      	str	r3, [sp, #12]
 8009ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef8:	443b      	add	r3, r7
 8009efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009efc:	e76a      	b.n	8009dd4 <_vfiprintf_r+0x78>
 8009efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f02:	460c      	mov	r4, r1
 8009f04:	2001      	movs	r0, #1
 8009f06:	e7a8      	b.n	8009e5a <_vfiprintf_r+0xfe>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	3401      	adds	r4, #1
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	f04f 0c0a 	mov.w	ip, #10
 8009f14:	4620      	mov	r0, r4
 8009f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f1a:	3a30      	subs	r2, #48	@ 0x30
 8009f1c:	2a09      	cmp	r2, #9
 8009f1e:	d903      	bls.n	8009f28 <_vfiprintf_r+0x1cc>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0c6      	beq.n	8009eb2 <_vfiprintf_r+0x156>
 8009f24:	9105      	str	r1, [sp, #20]
 8009f26:	e7c4      	b.n	8009eb2 <_vfiprintf_r+0x156>
 8009f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e7f0      	b.n	8009f14 <_vfiprintf_r+0x1b8>
 8009f32:	ab03      	add	r3, sp, #12
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	462a      	mov	r2, r5
 8009f38:	4b12      	ldr	r3, [pc, #72]	@ (8009f84 <_vfiprintf_r+0x228>)
 8009f3a:	a904      	add	r1, sp, #16
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7fb febb 	bl	8005cb8 <_printf_float>
 8009f42:	4607      	mov	r7, r0
 8009f44:	1c78      	adds	r0, r7, #1
 8009f46:	d1d6      	bne.n	8009ef6 <_vfiprintf_r+0x19a>
 8009f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f4a:	07d9      	lsls	r1, r3, #31
 8009f4c:	d405      	bmi.n	8009f5a <_vfiprintf_r+0x1fe>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	059a      	lsls	r2, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <_vfiprintf_r+0x1fe>
 8009f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f56:	f7fc fe19 	bl	8006b8c <__retarget_lock_release_recursive>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	065b      	lsls	r3, r3, #25
 8009f5e:	f53f af1f 	bmi.w	8009da0 <_vfiprintf_r+0x44>
 8009f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f64:	e71e      	b.n	8009da4 <_vfiprintf_r+0x48>
 8009f66:	ab03      	add	r3, sp, #12
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <_vfiprintf_r+0x228>)
 8009f6e:	a904      	add	r1, sp, #16
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fc f939 	bl	80061e8 <_printf_i>
 8009f76:	e7e4      	b.n	8009f42 <_vfiprintf_r+0x1e6>
 8009f78:	0800a80d 	.word	0x0800a80d
 8009f7c:	0800a817 	.word	0x0800a817
 8009f80:	08005cb9 	.word	0x08005cb9
 8009f84:	08009d39 	.word	0x08009d39
 8009f88:	0800a813 	.word	0x0800a813

08009f8c <__swbuf_r>:
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	460e      	mov	r6, r1
 8009f90:	4614      	mov	r4, r2
 8009f92:	4605      	mov	r5, r0
 8009f94:	b118      	cbz	r0, 8009f9e <__swbuf_r+0x12>
 8009f96:	6a03      	ldr	r3, [r0, #32]
 8009f98:	b90b      	cbnz	r3, 8009f9e <__swbuf_r+0x12>
 8009f9a:	f7fc fcdd 	bl	8006958 <__sinit>
 8009f9e:	69a3      	ldr	r3, [r4, #24]
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	071a      	lsls	r2, r3, #28
 8009fa6:	d501      	bpl.n	8009fac <__swbuf_r+0x20>
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	b943      	cbnz	r3, 8009fbe <__swbuf_r+0x32>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f82a 	bl	800a008 <__swsetup_r>
 8009fb4:	b118      	cbz	r0, 8009fbe <__swbuf_r+0x32>
 8009fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8009fba:	4638      	mov	r0, r7
 8009fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	1a98      	subs	r0, r3, r2
 8009fc4:	6963      	ldr	r3, [r4, #20]
 8009fc6:	b2f6      	uxtb	r6, r6
 8009fc8:	4283      	cmp	r3, r0
 8009fca:	4637      	mov	r7, r6
 8009fcc:	dc05      	bgt.n	8009fda <__swbuf_r+0x4e>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f7ff fa53 	bl	800947c <_fflush_r>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d1ed      	bne.n	8009fb6 <__swbuf_r+0x2a>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	701e      	strb	r6, [r3, #0]
 8009fe8:	6962      	ldr	r2, [r4, #20]
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d004      	beq.n	8009ffa <__swbuf_r+0x6e>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	07db      	lsls	r3, r3, #31
 8009ff4:	d5e1      	bpl.n	8009fba <__swbuf_r+0x2e>
 8009ff6:	2e0a      	cmp	r6, #10
 8009ff8:	d1df      	bne.n	8009fba <__swbuf_r+0x2e>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f7ff fa3d 	bl	800947c <_fflush_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	d0d9      	beq.n	8009fba <__swbuf_r+0x2e>
 800a006:	e7d6      	b.n	8009fb6 <__swbuf_r+0x2a>

0800a008 <__swsetup_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4b29      	ldr	r3, [pc, #164]	@ (800a0b0 <__swsetup_r+0xa8>)
 800a00c:	4605      	mov	r5, r0
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	460c      	mov	r4, r1
 800a012:	b118      	cbz	r0, 800a01c <__swsetup_r+0x14>
 800a014:	6a03      	ldr	r3, [r0, #32]
 800a016:	b90b      	cbnz	r3, 800a01c <__swsetup_r+0x14>
 800a018:	f7fc fc9e 	bl	8006958 <__sinit>
 800a01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a020:	0719      	lsls	r1, r3, #28
 800a022:	d422      	bmi.n	800a06a <__swsetup_r+0x62>
 800a024:	06da      	lsls	r2, r3, #27
 800a026:	d407      	bmi.n	800a038 <__swsetup_r+0x30>
 800a028:	2209      	movs	r2, #9
 800a02a:	602a      	str	r2, [r5, #0]
 800a02c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	f04f 30ff 	mov.w	r0, #4294967295
 800a036:	e033      	b.n	800a0a0 <__swsetup_r+0x98>
 800a038:	0758      	lsls	r0, r3, #29
 800a03a:	d512      	bpl.n	800a062 <__swsetup_r+0x5a>
 800a03c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a03e:	b141      	cbz	r1, 800a052 <__swsetup_r+0x4a>
 800a040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a044:	4299      	cmp	r1, r3
 800a046:	d002      	beq.n	800a04e <__swsetup_r+0x46>
 800a048:	4628      	mov	r0, r5
 800a04a:	f7fd fc0d 	bl	8007868 <_free_r>
 800a04e:	2300      	movs	r3, #0
 800a050:	6363      	str	r3, [r4, #52]	@ 0x34
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	2300      	movs	r3, #0
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	6923      	ldr	r3, [r4, #16]
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f043 0308 	orr.w	r3, r3, #8
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	b94b      	cbnz	r3, 800a082 <__swsetup_r+0x7a>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a078:	d003      	beq.n	800a082 <__swsetup_r+0x7a>
 800a07a:	4621      	mov	r1, r4
 800a07c:	4628      	mov	r0, r5
 800a07e:	f000 f883 	bl	800a188 <__smakebuf_r>
 800a082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a086:	f013 0201 	ands.w	r2, r3, #1
 800a08a:	d00a      	beq.n	800a0a2 <__swsetup_r+0x9a>
 800a08c:	2200      	movs	r2, #0
 800a08e:	60a2      	str	r2, [r4, #8]
 800a090:	6962      	ldr	r2, [r4, #20]
 800a092:	4252      	negs	r2, r2
 800a094:	61a2      	str	r2, [r4, #24]
 800a096:	6922      	ldr	r2, [r4, #16]
 800a098:	b942      	cbnz	r2, 800a0ac <__swsetup_r+0xa4>
 800a09a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a09e:	d1c5      	bne.n	800a02c <__swsetup_r+0x24>
 800a0a0:	bd38      	pop	{r3, r4, r5, pc}
 800a0a2:	0799      	lsls	r1, r3, #30
 800a0a4:	bf58      	it	pl
 800a0a6:	6962      	ldrpl	r2, [r4, #20]
 800a0a8:	60a2      	str	r2, [r4, #8]
 800a0aa:	e7f4      	b.n	800a096 <__swsetup_r+0x8e>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e7f7      	b.n	800a0a0 <__swsetup_r+0x98>
 800a0b0:	2000001c 	.word	0x2000001c

0800a0b4 <_raise_r>:
 800a0b4:	291f      	cmp	r1, #31
 800a0b6:	b538      	push	{r3, r4, r5, lr}
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	d904      	bls.n	800a0c8 <_raise_r+0x14>
 800a0be:	2316      	movs	r3, #22
 800a0c0:	6003      	str	r3, [r0, #0]
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0ca:	b112      	cbz	r2, 800a0d2 <_raise_r+0x1e>
 800a0cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0d0:	b94b      	cbnz	r3, 800a0e6 <_raise_r+0x32>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f830 	bl	800a138 <_getpid_r>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	4601      	mov	r1, r0
 800a0dc:	4628      	mov	r0, r5
 800a0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0e2:	f000 b817 	b.w	800a114 <_kill_r>
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d00a      	beq.n	800a100 <_raise_r+0x4c>
 800a0ea:	1c59      	adds	r1, r3, #1
 800a0ec:	d103      	bne.n	800a0f6 <_raise_r+0x42>
 800a0ee:	2316      	movs	r3, #22
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	e7e7      	b.n	800a0c6 <_raise_r+0x12>
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4798      	blx	r3
 800a100:	2000      	movs	r0, #0
 800a102:	e7e0      	b.n	800a0c6 <_raise_r+0x12>

0800a104 <raise>:
 800a104:	4b02      	ldr	r3, [pc, #8]	@ (800a110 <raise+0xc>)
 800a106:	4601      	mov	r1, r0
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f7ff bfd3 	b.w	800a0b4 <_raise_r>
 800a10e:	bf00      	nop
 800a110:	2000001c 	.word	0x2000001c

0800a114 <_kill_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d07      	ldr	r5, [pc, #28]	@ (800a134 <_kill_r+0x20>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	4611      	mov	r1, r2
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	f7f7 fb6b 	bl	80017fc <_kill>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	d102      	bne.n	800a130 <_kill_r+0x1c>
 800a12a:	682b      	ldr	r3, [r5, #0]
 800a12c:	b103      	cbz	r3, 800a130 <_kill_r+0x1c>
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	20001cd0 	.word	0x20001cd0

0800a138 <_getpid_r>:
 800a138:	f7f7 bb58 	b.w	80017ec <_getpid>

0800a13c <__swhatbuf_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	460c      	mov	r4, r1
 800a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a144:	2900      	cmp	r1, #0
 800a146:	b096      	sub	sp, #88	@ 0x58
 800a148:	4615      	mov	r5, r2
 800a14a:	461e      	mov	r6, r3
 800a14c:	da0d      	bge.n	800a16a <__swhatbuf_r+0x2e>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a154:	f04f 0100 	mov.w	r1, #0
 800a158:	bf14      	ite	ne
 800a15a:	2340      	movne	r3, #64	@ 0x40
 800a15c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a160:	2000      	movs	r0, #0
 800a162:	6031      	str	r1, [r6, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	b016      	add	sp, #88	@ 0x58
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	466a      	mov	r2, sp
 800a16c:	f000 f848 	bl	800a200 <_fstat_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	dbec      	blt.n	800a14e <__swhatbuf_r+0x12>
 800a174:	9901      	ldr	r1, [sp, #4]
 800a176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a17a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a17e:	4259      	negs	r1, r3
 800a180:	4159      	adcs	r1, r3
 800a182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a186:	e7eb      	b.n	800a160 <__swhatbuf_r+0x24>

0800a188 <__smakebuf_r>:
 800a188:	898b      	ldrh	r3, [r1, #12]
 800a18a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a18c:	079d      	lsls	r5, r3, #30
 800a18e:	4606      	mov	r6, r0
 800a190:	460c      	mov	r4, r1
 800a192:	d507      	bpl.n	800a1a4 <__smakebuf_r+0x1c>
 800a194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2301      	movs	r3, #1
 800a19e:	6163      	str	r3, [r4, #20]
 800a1a0:	b003      	add	sp, #12
 800a1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a4:	ab01      	add	r3, sp, #4
 800a1a6:	466a      	mov	r2, sp
 800a1a8:	f7ff ffc8 	bl	800a13c <__swhatbuf_r>
 800a1ac:	9f00      	ldr	r7, [sp, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7fd fbcc 	bl	8007950 <_malloc_r>
 800a1b8:	b948      	cbnz	r0, 800a1ce <__smakebuf_r+0x46>
 800a1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1be:	059a      	lsls	r2, r3, #22
 800a1c0:	d4ee      	bmi.n	800a1a0 <__smakebuf_r+0x18>
 800a1c2:	f023 0303 	bic.w	r3, r3, #3
 800a1c6:	f043 0302 	orr.w	r3, r3, #2
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	e7e2      	b.n	800a194 <__smakebuf_r+0xc>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	6020      	str	r0, [r4, #0]
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1de:	b15b      	cbz	r3, 800a1f8 <__smakebuf_r+0x70>
 800a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 f81d 	bl	800a224 <_isatty_r>
 800a1ea:	b128      	cbz	r0, 800a1f8 <__smakebuf_r+0x70>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	431d      	orrs	r5, r3
 800a1fc:	81a5      	strh	r5, [r4, #12]
 800a1fe:	e7cf      	b.n	800a1a0 <__smakebuf_r+0x18>

0800a200 <_fstat_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	@ (800a220 <_fstat_r+0x20>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	f7f7 fb55 	bl	80018bc <_fstat>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d102      	bne.n	800a21c <_fstat_r+0x1c>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b103      	cbz	r3, 800a21c <_fstat_r+0x1c>
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	bf00      	nop
 800a220:	20001cd0 	.word	0x20001cd0

0800a224 <_isatty_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d06      	ldr	r5, [pc, #24]	@ (800a240 <_isatty_r+0x1c>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f7 fb54 	bl	80018dc <_isatty>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_isatty_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_isatty_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20001cd0 	.word	0x20001cd0

0800a244 <_init>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr

0800a250 <_fini>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr
