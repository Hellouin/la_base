
UART_RTCM_datacollection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f60  08003f60  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f64  08003f64  00004f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003f74  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003f74  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf83  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce4  00000000  00000000  00010fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000771  00000000  00000000  00013660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd6  00000000  00000000  00013dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbbf  00000000  00000000  00038da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40c1  00000000  00000000  00044966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d8  00000000  00000000  00128a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012b144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ef8 	.word	0x08003ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ef8 	.word	0x08003ef8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa60 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f822 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8a2 	bl	8000648 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f870 	bl	80005e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	490b      	ldr	r1, [pc, #44]	@ (8000538 <main+0x44>)
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <main+0x48>)
 800050e:	f002 f9b5 	bl	800287c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (rx_index > 0) {
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <main+0x4c>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0fa      	beq.n	8000512 <main+0x1e>
	  	    HAL_Delay(100); // allume la LED pendant 100 ms
 800051c:	2064      	movs	r0, #100	@ 0x64
 800051e:	f000 fac9 	bl	8000ab4 <HAL_Delay>
	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f000 fe21 	bl	8001170 <HAL_GPIO_WritePin>
	  	    rx_index = 0;
 800052e:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <main+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]
	  if (rx_index > 0) {
 8000534:	e7ed      	b.n	8000512 <main+0x1e>
 8000536:	bf00      	nop
 8000538:	200000f0 	.word	0x200000f0
 800053c:	20000028 	.word	0x20000028
 8000540:	200000f2 	.word	0x200000f2

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	@ 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fca4 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056a:	f000 fe27 	bl	80011bc <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 f91c 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000580:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2310      	movs	r3, #16
 8000584:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000592:	230a      	movs	r3, #10
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fe5e 	bl	8001268 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b2:	f000 f8fd 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fa26 	bl	8001a20 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005da:	f000 f8e9 	bl	80007b0 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3758      	adds	r7, #88	@ 0x58
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	@ (8000644 <MX_USART1_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART1_UART_Init+0x58>)
 800062c:	f002 f8d8 	bl	80027e0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f8bb 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40013800 	.word	0x40013800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a2d      	ldr	r2, [pc, #180]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_GPIO_Init+0xe8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <MX_GPIO_Init+0xe8>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_GPIO_Init+0xe8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f000 fd53 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4814      	ldr	r0, [pc, #80]	@ (8000734 <MX_GPIO_Init+0xec>)
 80006e2:	f000 fb9b 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006e6:	230c      	movs	r3, #12
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006f6:	2307      	movs	r3, #7
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000704:	f000 fb8a 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000722:	f000 fb7b 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	48000800 	.word	0x48000800

08000738 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Check which UART triggered callback
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a15      	ldr	r2, [pc, #84]	@ (800079c <HAL_UART_RxCpltCallback+0x64>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d124      	bne.n	8000794 <HAL_UART_RxCpltCallback+0x5c>
    {
        rx_buffer[rx_index++] = rx_byte;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_UART_RxCpltCallback+0x68>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	b291      	uxth	r1, r2
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <HAL_UART_RxCpltCallback+0x68>)
 8000756:	8011      	strh	r1, [r2, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_UART_RxCpltCallback+0x6c>)
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_UART_RxCpltCallback+0x70>)
 8000760:	5499      	strb	r1, [r3, r2]

        // Wrap around if buffer is full (you could implement a circular buffer)
        if (rx_index >= RX_BUFFER_SIZE)
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_UART_RxCpltCallback+0x68>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	2b3f      	cmp	r3, #63	@ 0x3f
 800076a:	d908      	bls.n	800077e <HAL_UART_RxCpltCallback+0x46>
        {
            rx_index = 0;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_UART_RxCpltCallback+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f000 fcf9 	bl	8001170 <HAL_GPIO_WritePin>
        }

        // Restart UART reception in interrupt mode for next byte
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	4908      	ldr	r1, [pc, #32]	@ (80007a4 <HAL_UART_RxCpltCallback+0x6c>)
 8000782:	480a      	ldr	r0, [pc, #40]	@ (80007ac <HAL_UART_RxCpltCallback+0x74>)
 8000784:	f002 f87a 	bl	800287c <HAL_UART_Receive_IT>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2120      	movs	r1, #32
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f000 fcee 	bl	8001170 <HAL_GPIO_WritePin>

    }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40013800 	.word	0x40013800
 80007a0:	200000f2 	.word	0x200000f2
 80007a4:	200000f0 	.word	0x200000f0
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	20000028 	.word	0x20000028

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ac      	sub	sp, #176	@ 0xb0
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2288      	movs	r2, #136	@ 0x88
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fb3b 	bl	8003ea0 <memset>
  if(huart->Instance==USART1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a26      	ldr	r2, [pc, #152]	@ (80008c8 <HAL_UART_MspInit+0xc4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d144      	bne.n	80008be <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000838:	2300      	movs	r3, #0
 800083a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fb11 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800084c:	f7ff ffb0 	bl	80007b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 8000852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000854:	4a1d      	ldr	r2, [pc, #116]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6613      	str	r3, [r2, #96]	@ 0x60
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 800085e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_UART_MspInit+0xc8>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000880:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800089a:	2307      	movs	r3, #7
 800089c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008aa:	f000 fab7 	bl	8000e1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2025      	movs	r0, #37	@ 0x25
 80008b4:	f000 f9fd 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b8:	2025      	movs	r0, #37	@ 0x25
 80008ba:	f000 fa16 	bl	8000cea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008be:	bf00      	nop
 80008c0:	37b0      	adds	r7, #176	@ 0xb0
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013800 	.word	0x40013800
 80008cc:	40021000 	.word	0x40021000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f8a5 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <USART1_IRQHandler+0x10>)
 8000936:	f001 ffed 	bl	8002914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000028 	.word	0x20000028

08000944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff ffea 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f003 fa8b 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099a:	f7ff fdab 	bl	80004f4 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ac:	08003f68 	.word	0x08003f68
  ldr r2, =_sbss
 80009b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b4:	200000f8 	.word	0x200000f8

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_Init+0x3c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_Init+0x3c>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f000 f962 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f80f 	bl	80009fc <HAL_InitTick>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	e001      	b.n	80009ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ea:	f7ff fee7 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_InitTick+0x6c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d023      	beq.n	8000a58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_InitTick+0x70>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f96d 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10f      	bne.n	8000a52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d809      	bhi.n	8000a4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f937 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a44:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_InitTick+0x74>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e007      	b.n	8000a5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e004      	b.n	8000a5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e001      	b.n	8000a5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200000f4 	.word	0x200000f4

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000f4 	.word	0x200000f4

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d008      	beq.n	8000d48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e022      	b.n	8000d8e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020e 	bic.w	r2, r2, #14
 8000d56:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	f003 021c 	and.w	r2, r3, #28
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d005      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2204      	movs	r2, #4
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e029      	b.n	8000e12 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 020e 	bic.w	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f003 021c 	and.w	r2, r3, #28
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
    }
  }
  return status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e17f      	b.n	800112c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8171 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d118      	bne.n	8000efc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ac 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b5f      	ldr	r3, [pc, #380]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fda:	4b5c      	ldr	r3, [pc, #368]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x242>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x22a>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4937      	ldr	r1, [pc, #220]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010cc:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f6:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae78 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	48001000 	.word	0x48001000
 8001164:	48001400 	.word	0x48001400
 8001168:	48001800 	.word	0x48001800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40007000 	.word	0x40007000

080011bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ca:	d130      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011d8:	d038      	beq.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011e2:	4a1e      	ldr	r2, [pc, #120]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2232      	movs	r2, #50	@ 0x32
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	0c9b      	lsrs	r3, r3, #18
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001200:	e002      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001214:	d102      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f2      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001228:	d110      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e00f      	b.n	800124e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123a:	d007      	beq.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001244:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800124a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40007000 	.word	0x40007000
 8001260:	20000000 	.word	0x20000000
 8001264:	431bde83 	.word	0x431bde83

08001268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e3ca      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4b97      	ldr	r3, [pc, #604]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001284:	4b94      	ldr	r3, [pc, #592]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80e4 	beq.w	8001464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	f040 808b 	bne.w	80013c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 8087 	bne.w	80013c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x62>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3a2      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_RCC_OscConfig+0x7c>
 80012da:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012e2:	e005      	b.n	80012f0 <HAL_RCC_OscConfig+0x88>
 80012e4:	4b7c      	ldr	r3, [pc, #496]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d223      	bcs.n	800133c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd55 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e383      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001308:	4b73      	ldr	r3, [pc, #460]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a72      	ldr	r2, [pc, #456]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b70      	ldr	r3, [pc, #448]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	496d      	ldr	r1, [pc, #436]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001326:	4b6c      	ldr	r3, [pc, #432]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	4968      	ldr	r1, [pc, #416]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
 800133a:	e025      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133c:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a65      	ldr	r2, [pc, #404]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4960      	ldr	r1, [pc, #384]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135a:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	495b      	ldr	r1, [pc, #364]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd15 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e343      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001388:	f000 fc4a 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b52      	ldr	r3, [pc, #328]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4950      	ldr	r1, [pc, #320]	@ (80014dc <HAL_RCC_OscConfig+0x274>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	4a4e      	ldr	r2, [pc, #312]	@ (80014e0 <HAL_RCC_OscConfig+0x278>)
 80013a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a8:	4b4e      	ldr	r3, [pc, #312]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb25 	bl	80009fc <HAL_InitTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d052      	beq.n	8001462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	e327      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d032      	beq.n	800142e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a42      	ldr	r2, [pc, #264]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb62 	bl	8000a9c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fb5e 	bl	8000a9c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e310      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a36      	ldr	r2, [pc, #216]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4931      	ldr	r1, [pc, #196]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001418:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	492c      	ldr	r1, [pc, #176]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	e01a      	b.n	8001464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800143a:	f7ff fb2f 	bl	8000a9c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001442:	f7ff fb2b 	bl	8000a9c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e2dd      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x1da>
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d074      	beq.n	800155a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x21a>
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d10e      	bne.n	800149a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d064      	beq.n	8001558 <HAL_RCC_OscConfig+0x2f0>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d160      	bne.n	8001558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e2ba      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x24a>
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e026      	b.n	8001500 <HAL_RCC_OscConfig+0x298>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ba:	d115      	bne.n	80014e8 <HAL_RCC_OscConfig+0x280>
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a02      	ldr	r2, [pc, #8]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x298>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08003f10 	.word	0x08003f10
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004
 80014e8:	4ba0      	ldr	r3, [pc, #640]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a9f      	ldr	r2, [pc, #636]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b9d      	ldr	r3, [pc, #628]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a9c      	ldr	r2, [pc, #624]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fac8 	bl	8000a9c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fac4 	bl	8000a9c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e276      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001522:	4b92      	ldr	r3, [pc, #584]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x2a8>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fab4 	bl	8000a9c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fab0 	bl	8000a9c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e262      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	4b88      	ldr	r3, [pc, #544]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x2d0>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d060      	beq.n	8001628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x310>
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d116      	bne.n	80015a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	4b7c      	ldr	r3, [pc, #496]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x328>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e23f      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b76      	ldr	r3, [pc, #472]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	4973      	ldr	r1, [pc, #460]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a4:	e040      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d023      	beq.n	80015f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ae:	4b6f      	ldr	r3, [pc, #444]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fa6f 	bl	8000a9c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fa6b 	bl	8000a9c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e21d      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b62      	ldr	r3, [pc, #392]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	495f      	ldr	r1, [pc, #380]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e018      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5c      	ldr	r2, [pc, #368]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80015fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff fa4b 	bl	8000a9c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fa47 	bl	8000a9c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1f9      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d03c      	beq.n	80016ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01c      	beq.n	8001676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163c:	4b4b      	ldr	r3, [pc, #300]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001642:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fa26 	bl	8000a9c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fa22 	bl	8000a9c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1d4      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x3ec>
 8001674:	e01b      	b.n	80016ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167c:	4a3b      	ldr	r2, [pc, #236]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fa09 	bl	8000a9c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fa05 	bl	8000a9c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1b7      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ef      	bne.n	800168e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80a6 	beq.w	8001808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	4a26      	ldr	r2, [pc, #152]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_RCC_OscConfig+0x508>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d118      	bne.n	8001726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <HAL_RCC_OscConfig+0x508>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <HAL_RCC_OscConfig+0x508>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001700:	f7ff f9cc 	bl	8000a9c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff f9c8 	bl	8000a9c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e17a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_RCC_OscConfig+0x508>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_RCC_OscConfig+0x4d8>
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800173e:	e029      	b.n	8001794 <HAL_RCC_OscConfig+0x52c>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d115      	bne.n	8001774 <HAL_RCC_OscConfig+0x50c>
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174e:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a03      	ldr	r2, [pc, #12]	@ (800176c <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x52c>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	4b9c      	ldr	r3, [pc, #624]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a9b      	ldr	r2, [pc, #620]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001784:	4b98      	ldr	r3, [pc, #608]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	4a97      	ldr	r2, [pc, #604]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d016      	beq.n	80017ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff f97e 	bl	8000a9c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff f97a 	bl	8000a9c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e12a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	4b8b      	ldr	r3, [pc, #556]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ed      	beq.n	80017a4 <HAL_RCC_OscConfig+0x53c>
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff f967 	bl	8000a9c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f963 	bl	8000a9c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e113      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e8:	4b7f      	ldr	r3, [pc, #508]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ed      	bne.n	80017d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b7a      	ldr	r3, [pc, #488]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	4a79      	ldr	r2, [pc, #484]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fe 	beq.w	8001a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	2b02      	cmp	r3, #2
 8001818:	f040 80d0 	bne.w	80019bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800181c:	4b72      	ldr	r3, [pc, #456]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	429a      	cmp	r2, r3
 800182e:	d130      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	3b01      	subs	r3, #1
 800183c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d127      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11f      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800185c:	2a07      	cmp	r2, #7
 800185e:	bf14      	ite	ne
 8001860:	2201      	movne	r2, #1
 8001862:	2200      	moveq	r2, #0
 8001864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	4293      	cmp	r3, r2
 8001868:	d113      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d06e      	beq.n	8001970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d069      	beq.n	800196c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018a4:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0ad      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018b4:	4b4c      	ldr	r3, [pc, #304]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4b      	ldr	r2, [pc, #300]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c0:	f7ff f8ec 	bl	8000a9c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f8e8 	bl	8000a9c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e09a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e6:	4b40      	ldr	r3, [pc, #256]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	4b40      	ldr	r3, [pc, #256]	@ (80019ec <HAL_RCC_OscConfig+0x784>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001900:	0212      	lsls	r2, r2, #8
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001908:	0852      	lsrs	r2, r2, #1
 800190a:	3a01      	subs	r2, #1
 800190c:	0552      	lsls	r2, r2, #21
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001914:	0852      	lsrs	r2, r2, #1
 8001916:	3a01      	subs	r2, #1
 8001918:	0652      	lsls	r2, r2, #25
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001920:	0912      	lsrs	r2, r2, #4
 8001922:	0452      	lsls	r2, r2, #17
 8001924:	430a      	orrs	r2, r1
 8001926:	4930      	ldr	r1, [pc, #192]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800192c:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2d      	ldr	r2, [pc, #180]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f8aa 	bl	8000a9c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f8a6 	bl	8000a9c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e058      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196a:	e050      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e04f      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d148      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a16      	ldr	r2, [pc, #88]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001994:	f7ff f882 	bl	8000a9c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f87e 	bl	8000a9c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e030      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x734>
 80019ba:	e028      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d023      	beq.n	8001a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f865 	bl	8000a9c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e00c      	b.n	80019f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f861 	bl	8000a9c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d905      	bls.n	80019f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4905      	ldr	r1, [pc, #20]	@ (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x7b4>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e001      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	feeefffc 	.word	0xfeeefffc

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0e7      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b75      	ldr	r3, [pc, #468]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b72      	ldr	r3, [pc, #456]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4970      	ldr	r1, [pc, #448]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cf      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d908      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4960      	ldr	r1, [pc, #384]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04c      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d121      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0a6      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	4b54      	ldr	r3, [pc, #336]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09a      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e08e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e086      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b46      	ldr	r3, [pc, #280]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4943      	ldr	r1, [pc, #268]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7fe ffc8 	bl	8000a9c <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7fe ffc4 	bl	8000a9c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e06e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d208      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	492b      	ldr	r1, [pc, #172]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d210      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0207 	bic.w	r2, r3, #7
 8001b7c:	4923      	ldr	r1, [pc, #140]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e036      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4910      	ldr	r1, [pc, #64]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd4:	f000 f824 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	490b      	ldr	r1, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x1f4>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_ClockConfig+0x1fc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe feff 	bl	80009fc <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08003f10 	.word	0x08003f10
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b3b      	ldr	r3, [pc, #236]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	4b34      	ldr	r3, [pc, #208]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c60:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d134      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xac>
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	617b      	str	r3, [r7, #20]
      break;
 8001cd0:	e002      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	0e5b      	lsrs	r3, r3, #25
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d18:	69bb      	ldr	r3, [r7, #24]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003f28 	.word	0x08003f28
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4904      	ldr	r1, [pc, #16]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08003f20 	.word	0x08003f20

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d80:	f7ff ffda 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08003f20 	.word	0x08003f20

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc0:	f7ff f9ee 	bl	80011a0 <HAL_PWREx_GetVoltageRange>
 8001dc4:	6178      	str	r0, [r7, #20]
 8001dc6:	e014      	b.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd4:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de0:	f7ff f9de 	bl	80011a0 <HAL_PWREx_GetVoltageRange>
 8001de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001df8:	d10b      	bne.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	@ 0x80
 8001dfe:	d919      	bls.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e04:	d902      	bls.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e013      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e010      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b80      	cmp	r3, #128	@ 0x80
 8001e16:	d902      	bls.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e18:	2303      	movs	r3, #3
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e00a      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	@ 0x80
 8001e22:	d102      	bne.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e004      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b70      	cmp	r3, #112	@ 0x70
 8001e2e:	d101      	bne.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4909      	ldr	r1, [pc, #36]	@ (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d041      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e8c:	d02a      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e92:	d824      	bhi.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e98:	d008      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e9e:	d81e      	bhi.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eaa:	e018      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eac:	4b86      	ldr	r3, [pc, #536]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a85      	ldr	r2, [pc, #532]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fabb 	bl	800243c <RCCEx_PLLSAI1_Config>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eca:	e00c      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fba6 	bl	8002624 <RCCEx_PLLSAI2_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001edc:	e003      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eec:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efa:	4973      	ldr	r1, [pc, #460]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f02:	e001      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d041      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f1c:	d02a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f22:	d824      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f2e:	d81e      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f38:	d010      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f3c:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a61      	ldr	r2, [pc, #388]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f48:	e015      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fa73 	bl	800243c <RCCEx_PLLSAI1_Config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5a:	e00c      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3320      	adds	r3, #32
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fb5e 	bl	8002624 <RCCEx_PLLSAI2_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6c:	e003      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	74fb      	strb	r3, [r7, #19]
      break;
 8001f72:	e000      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f7c:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f8a:	494f      	ldr	r1, [pc, #316]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f92:	e001      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a0 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	4a40      	ldr	r2, [pc, #256]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fd58 	bl	8000a9c <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fd54 	bl	8000a9c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d902      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	74fb      	strb	r3, [r7, #19]
        break;
 8002002:	e005      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002004:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d15c      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002016:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01f      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	d019      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002040:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a20      	ldr	r2, [pc, #128]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7fe fd13 	bl	8000a9c <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	e00b      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe fd0f 	bl	8000a9c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d902      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	74fb      	strb	r3, [r7, #19]
            break;
 8002090:	e006      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ec      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b6:	4904      	ldr	r1, [pc, #16]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	7c7b      	ldrb	r3, [r7, #17]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b9e      	ldr	r3, [pc, #632]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	4a9d      	ldr	r2, [pc, #628]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b98      	ldr	r3, [pc, #608]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f023 0203 	bic.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002100:	4994      	ldr	r1, [pc, #592]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002114:	4b8f      	ldr	r3, [pc, #572]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f023 020c 	bic.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002122:	498c      	ldr	r1, [pc, #560]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002136:	4b87      	ldr	r3, [pc, #540]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4983      	ldr	r1, [pc, #524]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002158:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	497b      	ldr	r1, [pc, #492]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800217a:	4b76      	ldr	r3, [pc, #472]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002188:	4972      	ldr	r1, [pc, #456]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800219c:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	496a      	ldr	r1, [pc, #424]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021be:	4b65      	ldr	r3, [pc, #404]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	4961      	ldr	r1, [pc, #388]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ee:	4959      	ldr	r1, [pc, #356]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002202:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002210:	4950      	ldr	r1, [pc, #320]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002224:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	4948      	ldr	r1, [pc, #288]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002246:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	493f      	ldr	r1, [pc, #252]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d028      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002268:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002276:	4937      	ldr	r1, [pc, #220]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002286:	d106      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
 8002294:	e011      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800229a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800229e:	d10c      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f8c8 	bl	800243c <RCCEx_PLLSAI1_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d028      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022c6:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	491f      	ldr	r1, [pc, #124]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f0:	60d3      	str	r3, [r2, #12]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f899 	bl	800243c <RCCEx_PLLSAI1_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002342:	d109      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a02      	ldr	r2, [pc, #8]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
 8002350:	e014      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f867 	bl	800243c <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02f      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002388:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002396:	4928      	ldr	r1, [pc, #160]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f844 	bl	800243c <RCCEx_PLLSAI1_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d014      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	74bb      	strb	r3, [r7, #18]
 80023c2:	e011      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3320      	adds	r3, #32
 80023d2:	2102      	movs	r1, #2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f925 	bl	8002624 <RCCEx_PLLSAI2_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002426:	4904      	ldr	r1, [pc, #16]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800242e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000

0800243c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244a:	4b75      	ldr	r3, [pc, #468]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d018      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002456:	4b72      	ldr	r3, [pc, #456]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d10d      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
       ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800246e:	4b6c      	ldr	r3, [pc, #432]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
       ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d047      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e044      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d018      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x86>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d825      	bhi.n	80024e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <RCCEx_PLLSAI1_Config+0x62>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d009      	beq.n	80024b0 <RCCEx_PLLSAI1_Config+0x74>
 800249c:	e020      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e01a      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e013      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c2:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ce:	4b54      	ldr	r3, [pc, #336]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024de:	e006      	b.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e004      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	430b      	orrs	r3, r1
 800250c:	4944      	ldr	r1, [pc, #272]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d17d      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002518:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a40      	ldr	r2, [pc, #256]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe faba 	bl	8000a9c <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252a:	e009      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800252c:	f7fe fab6 	bl	8000a9c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	73fb      	strb	r3, [r7, #15]
        break;
 800253e:	e005      	b.n	800254c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002540:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d160      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002558:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	0912      	lsrs	r2, r2, #4
 8002570:	0452      	lsls	r2, r2, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	492a      	ldr	r1, [pc, #168]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	610b      	str	r3, [r1, #16]
 800257a:	e027      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d112      	bne.n	80025a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002582:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800258a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6892      	ldr	r2, [r2, #8]
 8002592:	0211      	lsls	r1, r2, #8
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6912      	ldr	r2, [r2, #16]
 8002598:	0852      	lsrs	r2, r2, #1
 800259a:	3a01      	subs	r2, #1
 800259c:	0552      	lsls	r2, r2, #21
 800259e:	430a      	orrs	r2, r1
 80025a0:	491f      	ldr	r1, [pc, #124]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]
 80025a6:	e011      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	0211      	lsls	r1, r2, #8
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6952      	ldr	r2, [r2, #20]
 80025be:	0852      	lsrs	r2, r2, #1
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0652      	lsls	r2, r2, #25
 80025c4:	430a      	orrs	r2, r1
 80025c6:	4916      	ldr	r1, [pc, #88]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fa60 	bl	8000a9c <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025de:	e009      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e0:	f7fe fa5c 	bl	8000a9c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	73fb      	strb	r3, [r7, #15]
          break;
 80025f2:	e005      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ef      	beq.n	80025e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4904      	ldr	r1, [pc, #16]	@ (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002632:	4b6a      	ldr	r3, [pc, #424]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800263e:	4b67      	ldr	r3, [pc, #412]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10d      	bne.n	800266a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
       ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002656:	4b61      	ldr	r3, [pc, #388]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
       ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d047      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d018      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x86>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCCEx_PLLSAI2_Config+0xa4>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <RCCEx_PLLSAI2_Config+0x62>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d009      	beq.n	8002698 <RCCEx_PLLSAI2_Config+0x74>
 8002684:	e020      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002686:	4b55      	ldr	r3, [pc, #340]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e01a      	b.n	80026ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e013      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026aa:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b6:	4b49      	ldr	r3, [pc, #292]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c6:	e006      	b.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e004      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	430b      	orrs	r3, r1
 80026f4:	4939      	ldr	r1, [pc, #228]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d167      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002700:	4b36      	ldr	r3, [pc, #216]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7fe f9c6 	bl	8000a9c <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002714:	f7fe f9c2 	bl	8000a9c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
        break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ef      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d14a      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002740:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	0912      	lsrs	r2, r2, #4
 8002758:	0452      	lsls	r2, r2, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	491f      	ldr	r1, [pc, #124]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	614b      	str	r3, [r1, #20]
 8002762:	e011      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800276c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	0211      	lsls	r1, r2, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6912      	ldr	r2, [r2, #16]
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	430a      	orrs	r2, r1
 8002782:	4916      	ldr	r1, [pc, #88]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe f982 	bl	8000a9c <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279a:	e009      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800279c:	f7fe f97e 	bl	8000a9c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	73fb      	strb	r3, [r7, #15]
          break;
 80027ae:	e005      	b.n	80027bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ef      	beq.n	800279c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4904      	ldr	r1, [pc, #16]	@ (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e040      	b.n	8002874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd fffe 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	@ 0x24
 800280c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fe52 	bl	80034d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fb97 	bl	8002f60 <UART_SetConfig>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e01b      	b.n	8002874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800284a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800285a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fed1 	bl	8003614 <UART_CheckIdleState>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002890:	2b20      	cmp	r3, #32
 8002892:	d137      	bne.n	8002904 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Receive_IT+0x24>
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e030      	b.n	8002906 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a18      	ldr	r2, [pc, #96]	@ (8002910 <HAL_UART_Receive_IT+0x94>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d01f      	beq.n	80028f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d018      	beq.n	80028f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	613b      	str	r3, [r7, #16]
   return(result);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	69f9      	ldr	r1, [r7, #28]
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e6      	bne.n	80028c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 ffa0 	bl	8003840 <UART_Start_Receive_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	e000      	b.n	8002906 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3728      	adds	r7, #40	@ 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40008000 	.word	0x40008000

08002914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0ba      	sub	sp, #232	@ 0xe8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800293a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800293e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002942:	4013      	ands	r3, r2
 8002944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00f      	beq.n	800297c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 82ca 	beq.w	8002f06 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
      }
      return;
 800297a:	e2c4      	b.n	8002f06 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800297c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8117 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002996:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_UART_IRQHandler+0x298>)
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 810a 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d011      	beq.n	80029d0 <HAL_UART_IRQHandler+0xbc>
 80029ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2201      	movs	r2, #1
 80029be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d011      	beq.n	8002a00 <HAL_UART_IRQHandler+0xec>
 80029dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2202      	movs	r2, #2
 80029ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d011      	beq.n	8002a30 <HAL_UART_IRQHandler+0x11c>
 8002a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a62:	f043 0208 	orr.w	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_UART_IRQHandler+0x18a>
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8230 	beq.w	8002f0a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d04f      	beq.n	8002b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 ff68 	bl	80039cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b40      	cmp	r3, #64	@ 0x40
 8002b08:	d141      	bne.n	8002b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1d9      	bne.n	8002b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d013      	beq.n	8002b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <HAL_UART_IRQHandler+0x29c>)
 8002b64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f915 	bl	8000d9a <HAL_DMA_Abort_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b80:	4610      	mov	r0, r2
 8002b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e00f      	b.n	8002ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9d4 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e00b      	b.n	8002ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9d0 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e007      	b.n	8002ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9cc 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ba4:	e1b1      	b.n	8002f0a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba6:	bf00      	nop
    return;
 8002ba8:	e1af      	b.n	8002f0a <HAL_UART_IRQHandler+0x5f6>
 8002baa:	bf00      	nop
 8002bac:	04000120 	.word	0x04000120
 8002bb0:	08003a95 	.word	0x08003a95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 816a 	bne.w	8002e92 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8163 	beq.w	8002e92 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 815c 	beq.w	8002e92 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bec:	2b40      	cmp	r3, #64	@ 0x40
 8002bee:	f040 80d4 	bne.w	8002d9a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80ad 	beq.w	8002d62 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c12:	429a      	cmp	r2, r3
 8002c14:	f080 80a5 	bcs.w	8002d62 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8086 	bne.w	8002d40 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c6e:	e841 2300 	strex	r3, r2, [r1]
 8002c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1da      	bne.n	8002c34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3308      	adds	r3, #8
 8002c84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ca2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e1      	bne.n	8002c7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e3      	bne.n	8002cba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d10:	f023 0310 	bic.w	r3, r3, #16
 8002d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e4      	bne.n	8002d00 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ffef 	bl	8000d1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8f4 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d60:	e0d5      	b.n	8002f0e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 80ce 	bne.w	8002f0e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	f040 80c5 	bne.w	8002f0e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8d8 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
      return;
 8002d98:	e0b9      	b.n	8002f0e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80ab 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a6 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e4      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e20:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e3      	bne.n	8002dfc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0310 	bic.w	r3, r3, #16
 8002e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	617b      	str	r3, [r7, #20]
   return(result);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e4      	bne.n	8002e48 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f85c 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_UART_IRQHandler+0x5a8>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 ffe9 	bl	8003e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eba:	e02d      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
    }
    return;
 8002ee4:	e017      	b.n	8002f16 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_UART_IRQHandler+0x604>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fdde 	bl	8003ac0 <UART_EndTransmit_IT>
    return;
 8002f04:	e008      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
      return;
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
    return;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
      return;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_UART_IRQHandler+0x604>
    return;
 8002f16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f18:	37e8      	adds	r7, #232	@ 0xe8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b08a      	sub	sp, #40	@ 0x28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4ba4      	ldr	r3, [pc, #656]	@ (8003220 <UART_SetConfig+0x2c0>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a99      	ldr	r2, [pc, #612]	@ (8003224 <UART_SetConfig+0x2c4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a90      	ldr	r2, [pc, #576]	@ (8003228 <UART_SetConfig+0x2c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d126      	bne.n	8003038 <UART_SetConfig+0xd8>
 8002fea:	4b90      	ldr	r3, [pc, #576]	@ (800322c <UART_SetConfig+0x2cc>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d81b      	bhi.n	8003030 <UART_SetConfig+0xd0>
 8002ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <UART_SetConfig+0xa0>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003011 	.word	0x08003011
 8003004:	08003021 	.word	0x08003021
 8003008:	08003019 	.word	0x08003019
 800300c:	08003029 	.word	0x08003029
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e116      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003018:	2302      	movs	r3, #2
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e112      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003020:	2304      	movs	r3, #4
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e10e      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003028:	2308      	movs	r3, #8
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e10a      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003030:	2310      	movs	r3, #16
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e106      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7c      	ldr	r2, [pc, #496]	@ (8003230 <UART_SetConfig+0x2d0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d138      	bne.n	80030b4 <UART_SetConfig+0x154>
 8003042:	4b7a      	ldr	r3, [pc, #488]	@ (800322c <UART_SetConfig+0x2cc>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d82d      	bhi.n	80030ac <UART_SetConfig+0x14c>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0xf8>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	0800308d 	.word	0x0800308d
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ad 	.word	0x080030ad
 8003064:	080030ad 	.word	0x080030ad
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	08003095 	.word	0x08003095
 800307c:	080030ad 	.word	0x080030ad
 8003080:	080030ad 	.word	0x080030ad
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030a5 	.word	0x080030a5
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003092:	e0d8      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309a:	e0d4      	b.n	8003246 <UART_SetConfig+0x2e6>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a2:	e0d0      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030aa:	e0cc      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e0c8      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003234 <UART_SetConfig+0x2d4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d125      	bne.n	800310a <UART_SetConfig+0x1aa>
 80030be:	4b5b      	ldr	r3, [pc, #364]	@ (800322c <UART_SetConfig+0x2cc>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030c8:	2b30      	cmp	r3, #48	@ 0x30
 80030ca:	d016      	beq.n	80030fa <UART_SetConfig+0x19a>
 80030cc:	2b30      	cmp	r3, #48	@ 0x30
 80030ce:	d818      	bhi.n	8003102 <UART_SetConfig+0x1a2>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d00a      	beq.n	80030ea <UART_SetConfig+0x18a>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d814      	bhi.n	8003102 <UART_SetConfig+0x1a2>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <UART_SetConfig+0x182>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d008      	beq.n	80030f2 <UART_SetConfig+0x192>
 80030e0:	e00f      	b.n	8003102 <UART_SetConfig+0x1a2>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e8:	e0ad      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030ea:	2302      	movs	r3, #2
 80030ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f0:	e0a9      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030f2:	2304      	movs	r3, #4
 80030f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f8:	e0a5      	b.n	8003246 <UART_SetConfig+0x2e6>
 80030fa:	2308      	movs	r3, #8
 80030fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003100:	e0a1      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003102:	2310      	movs	r3, #16
 8003104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003108:	e09d      	b.n	8003246 <UART_SetConfig+0x2e6>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <UART_SetConfig+0x2d8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d125      	bne.n	8003160 <UART_SetConfig+0x200>
 8003114:	4b45      	ldr	r3, [pc, #276]	@ (800322c <UART_SetConfig+0x2cc>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800311e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003120:	d016      	beq.n	8003150 <UART_SetConfig+0x1f0>
 8003122:	2bc0      	cmp	r3, #192	@ 0xc0
 8003124:	d818      	bhi.n	8003158 <UART_SetConfig+0x1f8>
 8003126:	2b80      	cmp	r3, #128	@ 0x80
 8003128:	d00a      	beq.n	8003140 <UART_SetConfig+0x1e0>
 800312a:	2b80      	cmp	r3, #128	@ 0x80
 800312c:	d814      	bhi.n	8003158 <UART_SetConfig+0x1f8>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <UART_SetConfig+0x1d8>
 8003132:	2b40      	cmp	r3, #64	@ 0x40
 8003134:	d008      	beq.n	8003148 <UART_SetConfig+0x1e8>
 8003136:	e00f      	b.n	8003158 <UART_SetConfig+0x1f8>
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313e:	e082      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003140:	2302      	movs	r3, #2
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003146:	e07e      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003148:	2304      	movs	r3, #4
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314e:	e07a      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003150:	2308      	movs	r3, #8
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003156:	e076      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003158:	2310      	movs	r3, #16
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e072      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a35      	ldr	r2, [pc, #212]	@ (800323c <UART_SetConfig+0x2dc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d12a      	bne.n	80031c0 <UART_SetConfig+0x260>
 800316a:	4b30      	ldr	r3, [pc, #192]	@ (800322c <UART_SetConfig+0x2cc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003170:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003178:	d01a      	beq.n	80031b0 <UART_SetConfig+0x250>
 800317a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800317e:	d81b      	bhi.n	80031b8 <UART_SetConfig+0x258>
 8003180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003184:	d00c      	beq.n	80031a0 <UART_SetConfig+0x240>
 8003186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318a:	d815      	bhi.n	80031b8 <UART_SetConfig+0x258>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <UART_SetConfig+0x238>
 8003190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003194:	d008      	beq.n	80031a8 <UART_SetConfig+0x248>
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x258>
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e052      	b.n	8003246 <UART_SetConfig+0x2e6>
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e04e      	b.n	8003246 <UART_SetConfig+0x2e6>
 80031a8:	2304      	movs	r3, #4
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ae:	e04a      	b.n	8003246 <UART_SetConfig+0x2e6>
 80031b0:	2308      	movs	r3, #8
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b6:	e046      	b.n	8003246 <UART_SetConfig+0x2e6>
 80031b8:	2310      	movs	r3, #16
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031be:	e042      	b.n	8003246 <UART_SetConfig+0x2e6>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <UART_SetConfig+0x2c4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d13a      	bne.n	8003240 <UART_SetConfig+0x2e0>
 80031ca:	4b18      	ldr	r3, [pc, #96]	@ (800322c <UART_SetConfig+0x2cc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031d8:	d01a      	beq.n	8003210 <UART_SetConfig+0x2b0>
 80031da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031de:	d81b      	bhi.n	8003218 <UART_SetConfig+0x2b8>
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e4:	d00c      	beq.n	8003200 <UART_SetConfig+0x2a0>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ea:	d815      	bhi.n	8003218 <UART_SetConfig+0x2b8>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <UART_SetConfig+0x298>
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f4:	d008      	beq.n	8003208 <UART_SetConfig+0x2a8>
 80031f6:	e00f      	b.n	8003218 <UART_SetConfig+0x2b8>
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e022      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003200:	2302      	movs	r3, #2
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e01e      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003208:	2304      	movs	r3, #4
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e01a      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003210:	2308      	movs	r3, #8
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e016      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003218:	2310      	movs	r3, #16
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e012      	b.n	8003246 <UART_SetConfig+0x2e6>
 8003220:	efff69f3 	.word	0xefff69f3
 8003224:	40008000 	.word	0x40008000
 8003228:	40013800 	.word	0x40013800
 800322c:	40021000 	.word	0x40021000
 8003230:	40004400 	.word	0x40004400
 8003234:	40004800 	.word	0x40004800
 8003238:	40004c00 	.word	0x40004c00
 800323c:	40005000 	.word	0x40005000
 8003240:	2310      	movs	r3, #16
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a9f      	ldr	r2, [pc, #636]	@ (80034c8 <UART_SetConfig+0x568>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d17a      	bne.n	8003346 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003250:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003254:	2b08      	cmp	r3, #8
 8003256:	d824      	bhi.n	80032a2 <UART_SetConfig+0x342>
 8003258:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <UART_SetConfig+0x300>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003285 	.word	0x08003285
 8003264:	080032a3 	.word	0x080032a3
 8003268:	0800328d 	.word	0x0800328d
 800326c:	080032a3 	.word	0x080032a3
 8003270:	08003293 	.word	0x08003293
 8003274:	080032a3 	.word	0x080032a3
 8003278:	080032a3 	.word	0x080032a3
 800327c:	080032a3 	.word	0x080032a3
 8003280:	0800329b 	.word	0x0800329b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7fe fd64 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003288:	61f8      	str	r0, [r7, #28]
        break;
 800328a:	e010      	b.n	80032ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800328c:	4b8f      	ldr	r3, [pc, #572]	@ (80034cc <UART_SetConfig+0x56c>)
 800328e:	61fb      	str	r3, [r7, #28]
        break;
 8003290:	e00d      	b.n	80032ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003292:	f7fe fcc5 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003296:	61f8      	str	r0, [r7, #28]
        break;
 8003298:	e009      	b.n	80032ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329e:	61fb      	str	r3, [r7, #28]
        break;
 80032a0:	e005      	b.n	80032ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80fb 	beq.w	80034ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d305      	bcc.n	80032d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d903      	bls.n	80032da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032d8:	e0e8      	b.n	80034ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2200      	movs	r2, #0
 80032de:	461c      	mov	r4, r3
 80032e0:	4615      	mov	r5, r2
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	022b      	lsls	r3, r5, #8
 80032ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032f0:	0222      	lsls	r2, r4, #8
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	6849      	ldr	r1, [r1, #4]
 80032f6:	0849      	lsrs	r1, r1, #1
 80032f8:	2000      	movs	r0, #0
 80032fa:	4688      	mov	r8, r1
 80032fc:	4681      	mov	r9, r0
 80032fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003302:	eb43 0b09 	adc.w	fp, r3, r9
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003314:	4650      	mov	r0, sl
 8003316:	4659      	mov	r1, fp
 8003318:	f7fc ff56 	bl	80001c8 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800332a:	d308      	bcc.n	800333e <UART_SetConfig+0x3de>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003332:	d204      	bcs.n	800333e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e0b6      	b.n	80034ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003344:	e0b2      	b.n	80034ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800334e:	d15e      	bne.n	800340e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003350:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003354:	2b08      	cmp	r3, #8
 8003356:	d828      	bhi.n	80033aa <UART_SetConfig+0x44a>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <UART_SetConfig+0x400>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003385 	.word	0x08003385
 8003364:	0800338d 	.word	0x0800338d
 8003368:	08003395 	.word	0x08003395
 800336c:	080033ab 	.word	0x080033ab
 8003370:	0800339b 	.word	0x0800339b
 8003374:	080033ab 	.word	0x080033ab
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033ab 	.word	0x080033ab
 8003380:	080033a3 	.word	0x080033a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe fce4 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003388:	61f8      	str	r0, [r7, #28]
        break;
 800338a:	e014      	b.n	80033b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7fe fcf6 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003390:	61f8      	str	r0, [r7, #28]
        break;
 8003392:	e010      	b.n	80033b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003394:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <UART_SetConfig+0x56c>)
 8003396:	61fb      	str	r3, [r7, #28]
        break;
 8003398:	e00d      	b.n	80033b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7fe fc41 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800339e:	61f8      	str	r0, [r7, #28]
        break;
 80033a0:	e009      	b.n	80033b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a6:	61fb      	str	r3, [r7, #28]
        break;
 80033a8:	e005      	b.n	80033b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d077      	beq.n	80034ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005a      	lsls	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d916      	bls.n	8003406 <UART_SetConfig+0x4a6>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033de:	d212      	bcs.n	8003406 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f023 030f 	bic.w	r3, r3, #15
 80033e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	8afa      	ldrh	r2, [r7, #22]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e052      	b.n	80034ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800340c:	e04e      	b.n	80034ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800340e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003412:	2b08      	cmp	r3, #8
 8003414:	d827      	bhi.n	8003466 <UART_SetConfig+0x506>
 8003416:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <UART_SetConfig+0x4bc>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fc86 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003444:	61f8      	str	r0, [r7, #28]
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe fc98 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 800344c:	61f8      	str	r0, [r7, #28]
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <UART_SetConfig+0x56c>)
 8003452:	61fb      	str	r3, [r7, #28]
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7fe fbe3 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800345a:	61f8      	str	r0, [r7, #28]
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003470:	bf00      	nop
    }

    if (pclk != 0U)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	085a      	lsrs	r2, r3, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	d909      	bls.n	80034a6 <UART_SetConfig+0x546>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003498:	d205      	bcs.n	80034a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e002      	b.n	80034ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3728      	adds	r7, #40	@ 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c6:	bf00      	nop
 80034c8:	40008000 	.word	0x40008000
 80034cc:	00f42400 	.word	0x00f42400

080034d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01a      	beq.n	80035e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ce:	d10a      	bne.n	80035e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b098      	sub	sp, #96	@ 0x60
 8003618:	af02      	add	r7, sp, #8
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003624:	f7fd fa3a 	bl	8000a9c <HAL_GetTick>
 8003628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b08      	cmp	r3, #8
 8003636:	d12e      	bne.n	8003696 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003640:	2200      	movs	r2, #0
 8003642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f88c 	bl	8003764 <UART_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d021      	beq.n	8003696 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003666:	653b      	str	r3, [r7, #80]	@ 0x50
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003670:	647b      	str	r3, [r7, #68]	@ 0x44
 8003672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e6      	bne.n	8003652 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e062      	b.n	800375c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d149      	bne.n	8003738 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	2200      	movs	r2, #0
 80036ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f856 	bl	8003764 <UART_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03c      	beq.n	8003738 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	623b      	str	r3, [r7, #32]
   return(result);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e6      	bne.n	80036be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003710:	61fa      	str	r2, [r7, #28]
 8003712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	617b      	str	r3, [r7, #20]
   return(result);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e011      	b.n	800375c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3758      	adds	r7, #88	@ 0x58
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	e04f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d04b      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd f98d 	bl	8000a9c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <UART_WaitOnFlagUntilTimeout+0x30>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e04e      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d037      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b80      	cmp	r3, #128	@ 0x80
 80037aa:	d034      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b40      	cmp	r3, #64	@ 0x40
 80037b0:	d031      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d110      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2208      	movs	r2, #8
 80037c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8ff 	bl	80039cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2208      	movs	r2, #8
 80037d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e029      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f0:	d111      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f8e5 	bl	80039cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d0a0      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003840:	b480      	push	{r7}
 8003842:	b097      	sub	sp, #92	@ 0x5c
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003872:	d10e      	bne.n	8003892 <UART_Start_Receive_IT+0x52>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <UART_Start_Receive_IT+0x48>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003882:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003886:	e02d      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	22ff      	movs	r2, #255	@ 0xff
 800388c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003890:	e028      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <UART_Start_Receive_IT+0x76>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <UART_Start_Receive_IT+0x6c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	22ff      	movs	r2, #255	@ 0xff
 80038a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038aa:	e01b      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	227f      	movs	r2, #127	@ 0x7f
 80038b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038b4:	e016      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038be:	d10d      	bne.n	80038dc <UART_Start_Receive_IT+0x9c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <UART_Start_Receive_IT+0x92>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	227f      	movs	r2, #127	@ 0x7f
 80038cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038d0:	e008      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	223f      	movs	r2, #63	@ 0x3f
 80038d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038da:	e003      	b.n	80038e4 <UART_Start_Receive_IT+0xa4>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2222      	movs	r2, #34	@ 0x22
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3308      	adds	r3, #8
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	657b      	str	r3, [r7, #84]	@ 0x54
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003914:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003916:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800391a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003930:	d107      	bne.n	8003942 <UART_Start_Receive_IT+0x102>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a21      	ldr	r2, [pc, #132]	@ (80039c4 <UART_Start_Receive_IT+0x184>)
 800393e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003940:	e002      	b.n	8003948 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a20      	ldr	r2, [pc, #128]	@ (80039c8 <UART_Start_Receive_IT+0x188>)
 8003946:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003970:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e6      	bne.n	8003950 <UART_Start_Receive_IT+0x110>
 8003982:	e018      	b.n	80039b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	613b      	str	r3, [r7, #16]
   return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f043 0320 	orr.w	r3, r3, #32
 8003998:	653b      	str	r3, [r7, #80]	@ 0x50
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69f9      	ldr	r1, [r7, #28]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e6      	bne.n	8003984 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	375c      	adds	r7, #92	@ 0x5c
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	08003cd1 	.word	0x08003cd1
 80039c8:	08003b15 	.word	0x08003b15

080039cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b095      	sub	sp, #84	@ 0x54
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e6      	bne.n	80039d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d118      	bne.n	8003a74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 0310 	bic.w	r3, r3, #16
 8003a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a88:	bf00      	nop
 8003a8a:	3754      	adds	r7, #84	@ 0x54
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fa3e 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	613b      	str	r3, [r7, #16]
   return(result);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fa0a 	bl	8002f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0c:	bf00      	nop
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b09c      	sub	sp, #112	@ 0x70
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b2c:	2b22      	cmp	r3, #34	@ 0x22
 8003b2e:	f040 80be 	bne.w	8003cae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003b40:	b2d9      	uxtb	r1, r3
 8003b42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 80a3 	bne.w	8003cc2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e6      	bne.n	8003b7c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ccc <UART_RxISR_8BIT+0x1b8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01f      	beq.n	8003c40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e6      	bne.n	8003c0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d12e      	bne.n	8003ca6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d103      	bne.n	8003c96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2210      	movs	r2, #16
 8003c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff f952 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ca4:	e00d      	b.n	8003cc2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fc fd46 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 8003cac:	e009      	b.n	8003cc2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	8b1b      	ldrh	r3, [r3, #24]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	831a      	strh	r2, [r3, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	3770      	adds	r7, #112	@ 0x70
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40008000 	.word	0x40008000

08003cd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b09c      	sub	sp, #112	@ 0x70
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003cde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce8:	2b22      	cmp	r3, #34	@ 0x22
 8003cea:	f040 80be 	bne.w	8003e6a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003cf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cfe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80a3 	bne.w	8003e7e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d56:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d58:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e6      	bne.n	8003d38 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a34      	ldr	r2, [pc, #208]	@ (8003e88 <UART_RxISR_16BIT+0x1b8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01f      	beq.n	8003dfc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e6      	bne.n	8003dca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d12e      	bne.n	8003e62 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	613b      	str	r3, [r7, #16]
   return(result);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e6      	bne.n	8003e0a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d103      	bne.n	8003e52 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff f874 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e60:	e00d      	b.n	8003e7e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fc68 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 8003e68:	e009      	b.n	8003e7e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	8b1b      	ldrh	r3, [r3, #24]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0208 	orr.w	r2, r2, #8
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	831a      	strh	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	3770      	adds	r7, #112	@ 0x70
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40008000 	.word	0x40008000

08003e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <memset>:
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2600      	movs	r6, #0
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f000 f818 	bl	8003ef8 <_init>
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2600      	movs	r6, #0
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08003f60 	.word	0x08003f60
 8003eec:	08003f60 	.word	0x08003f60
 8003ef0:	08003f60 	.word	0x08003f60
 8003ef4:	08003f64 	.word	0x08003f64

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
