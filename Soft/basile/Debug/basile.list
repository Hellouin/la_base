
basile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007cf0  0801b444  0801b444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023134  08023134  00025088  2**0
                  CONTENTS
  4 .ARM          00000008  08023134  08023134  00024134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802313c  0802313c  00025088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802313c  0802313c  0002413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023140  08023140  00024140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08023144  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000178c8  20000088  080231cc  00025088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017950  080231cc  00025950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035493  00000000  00000000  000250b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000090ae  00000000  00000000  0005a54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002928  00000000  00000000  00063600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002061  00000000  00000000  00065f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003757f  00000000  00000000  00067f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003abff  00000000  00000000  0009f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011516f  00000000  00000000  000da107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ef276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b378  00000000  00000000  001ef2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001fa634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b42c 	.word	0x0801b42c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801b42c 	.word	0x0801b42c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SPIx_TxRx>:
#define SPIx_DS   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

extern SPI_HandleTypeDef hspi2;

static uint8_t SPIx_TxRx(uint8_t cmd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80005d6:	2017      	movs	r0, #23
 80005d8:	f001 fff4 	bl	80025c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80005dc:	2028      	movs	r0, #40	@ 0x28
 80005de:	f001 fff1 	bl	80025c4 <HAL_NVIC_DisableIRQ>

	HAL_SPI_TransmitReceive(&hspi2, &cmd, &cmd, 1, SPIx_TIMEOUT);
 80005e2:	1dfa      	adds	r2, r7, #7
 80005e4:	1df9      	adds	r1, r7, #7
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <SPIx_TxRx+0x3c>)
 80005ee:	f004 f90e 	bl	800480e <HAL_SPI_TransmitReceive>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005f2:	2017      	movs	r0, #23
 80005f4:	f001 ffd8 	bl	80025a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f8:	2028      	movs	r0, #40	@ 0x28
 80005fa:	f001 ffd5 	bl	80025a8 <HAL_NVIC_EnableIRQ>
  return cmd;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20001d3c 	.word	0x20001d3c

0800060c <SPIx_TxBuf>:
// m2s → master 2 slave, etc
static void SPIx_TxBuf(uint8_t *m2s, uint8_t *s2m, uint16_t bufflen)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800061a:	2017      	movs	r0, #23
 800061c:	f001 ffd2 	bl	80025c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000620:	2028      	movs	r0, #40	@ 0x28
 8000622:	f001 ffcf 	bl	80025c4 <HAL_NVIC_DisableIRQ>

  SPIx_CS;
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	4818      	ldr	r0, [pc, #96]	@ (800068c <SPIx_TxBuf+0x80>)
 800062c:	f002 fa02 	bl	8002a34 <HAL_GPIO_WritePin>

  if((s2m == NULL) && (m2s != NULL))
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d109      	bne.n	800064a <SPIx_TxBuf+0x3e>
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d006      	beq.n	800064a <SPIx_TxBuf+0x3e>
  {
    HAL_SPI_Transmit(&hspi2, m2s, bufflen, SPIx_TIMEOUT);
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	230a      	movs	r3, #10
 8000640:	68f9      	ldr	r1, [r7, #12]
 8000642:	4813      	ldr	r0, [pc, #76]	@ (8000690 <SPIx_TxBuf+0x84>)
 8000644:	f003 fe35 	bl	80042b2 <HAL_SPI_Transmit>
 8000648:	e011      	b.n	800066e <SPIx_TxBuf+0x62>
  }
  else if(m2s == NULL)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d106      	bne.n	800065e <SPIx_TxBuf+0x52>
  {
    HAL_SPI_Receive(&hspi2, s2m, bufflen, SPIx_TIMEOUT);
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	230a      	movs	r3, #10
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <SPIx_TxBuf+0x84>)
 8000658:	f003 ffa1 	bl	800459e <HAL_SPI_Receive>
 800065c:	e007      	b.n	800066e <SPIx_TxBuf+0x62>
  }
  else
  {
    HAL_SPI_TransmitReceive(&hspi2, m2s, s2m, bufflen, SPIx_TIMEOUT);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	220a      	movs	r2, #10
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <SPIx_TxBuf+0x84>)
 800066a:	f004 f8d0 	bl	800480e <HAL_SPI_TransmitReceive>
  }

  SPIx_DS;
 800066e:	2201      	movs	r2, #1
 8000670:	2101      	movs	r1, #1
 8000672:	4806      	ldr	r0, [pc, #24]	@ (800068c <SPIx_TxBuf+0x80>)
 8000674:	f002 f9de 	bl	8002a34 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000678:	2017      	movs	r0, #23
 800067a:	f001 ff95 	bl	80025a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067e:	2028      	movs	r0, #40	@ 0x28
 8000680:	f001 ff92 	bl	80025a8 <HAL_NVIC_EnableIRQ>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	48000400 	.word	0x48000400
 8000690:	20001d3c 	.word	0x20001d3c

08000694 <init_udelay>:

/* Initialize STM32 watchdog timer */
static void init_udelay(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <init_udelay+0x4c>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a10      	ldr	r2, [pc, #64]	@ (80006e0 <init_udelay+0x4c>)
 800069e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006a2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <init_udelay+0x4c>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <init_udelay+0x4c>)
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ae:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <init_udelay+0x50>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <init_udelay+0x50>)
 80006b6:	f023 0301 	bic.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <init_udelay+0x50>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <init_udelay+0x50>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <init_udelay+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80006ce:	bf00      	nop
  __ASM volatile ("NOP");
 80006d0:	bf00      	nop
  __ASM volatile ("NOP");
 80006d2:	bf00      	nop

}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000edf0 	.word	0xe000edf0
 80006e4:	e0001000 	.word	0xe0001000

080006e8 <udelay>:

/* Software delay in us */
void udelay(uint32_t us)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <udelay+0x44>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <udelay+0x48>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	0c9a      	lsrs	r2, r3, #18
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <udelay+0x4c>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800070a:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <udelay+0x4c>)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	429a      	cmp	r2, r3
 800071a:	d8f6      	bhi.n	800070a <udelay+0x22>

}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	371c      	adds	r7, #28
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	431bde83 	.word	0x431bde83
 8000734:	e0001000 	.word	0xe0001000

08000738 <enc_reset>:
static void enc_rdbuffer(void *buffer, int16_t buflen);
static void enc_linkstatus(ENC_HandleTypeDef *handle);

/* Send the single byte system reset command (SRC). */
void enc_reset(ENC_HandleTypeDef *handle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Send the system reset command. */

  SPIx_CS;
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <enc_reset+0x38>)
 8000746:	f002 f975 	bl	8002a34 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_SRC);
 800074a:	20ff      	movs	r0, #255	@ 0xff
 800074c:	f7ff ff3e 	bl	80005cc <SPIx_TxRx>
  SPIx_DS;
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	4806      	ldr	r0, [pc, #24]	@ (8000770 <enc_reset+0x38>)
 8000756:	f002 f96d 	bl	8002a34 <HAL_GPIO_WritePin>

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
  udelay(2);
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff ffc1 	bl	80006e8 <udelay>
  //HAL_Delay(2); /* >1000 us, conforms to errata #2 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	48000400 	.word	0x48000400

08000774 <enc_start>:

/* Initialize the enc28j60 and configure the needed hardware resources */
bool enc_start(ENC_HandleTypeDef *handle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint8_t regval;

  /* Initialize watchdog timer */
  init_udelay();
 800077c:	f7ff ff8a 	bl	8000694 <init_udelay>

  /* System reset */
  enc_reset(handle);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ffd9 	bl	8000738 <enc_reset>

  /* Use bank 0 */
  enc_setbank(handle, 0);
 8000786:	2100      	movs	r1, #0
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 fab3 	bl	8000cf4 <enc_setbank>

  /* Check if we are actually communicating with the ENC28J60. */
  regval = enc_rdbreg(handle, ENC_EREVID);
 800078e:	2172      	movs	r1, #114	@ 0x72
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 fb5e 	bl	8000e52 <enc_rdbreg>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
  if(regval == 0x00 || regval == 0xff)
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <enc_start+0x32>
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2bff      	cmp	r3, #255	@ 0xff
 80007a4:	d101      	bne.n	80007aa <enc_start+0x36>
  {
    return false;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e0cc      	b.n	8000944 <enc_start+0x1d0>
  }

  /* Initialize ECON2: Enable address auto increment. */
  enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	205e      	movs	r0, #94	@ 0x5e
 80007ae:	f000 fad3 	bl	8000d58 <enc_wrgreg2>

  /* Initialize receive buffer. */
  handle->nextpkt = PKTMEM_RX_START;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	829a      	strh	r2, [r3, #20]
  enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2108      	movs	r1, #8
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 fb76 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2109      	movs	r1, #9
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 fb71 	bl	8000eae <enc_wrbreg>

  /* Set the receive data pointer */
  /* Errata 14 */
  enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 80007cc:	22ff      	movs	r2, #255	@ 0xff
 80007ce:	210c      	movs	r1, #12
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 fb6c 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 80007d6:	2219      	movs	r2, #25
 80007d8:	210d      	movs	r1, #13
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fb67 	bl	8000eae <enc_wrbreg>

  /* Set the receive buffer end. */
  enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 80007e0:	22ff      	movs	r2, #255	@ 0xff
 80007e2:	210a      	movs	r1, #10
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 fb62 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 80007ea:	2219      	movs	r2, #25
 80007ec:	210b      	movs	r1, #11
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 fb5d 	bl	8000eae <enc_wrbreg>

  /* Set transmit buffer start. */
  handle->transmitLength = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	831a      	strh	r2, [r3, #24]
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2104      	movs	r1, #4
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 fb55 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8000804:	221a      	movs	r2, #26
 8000806:	2105      	movs	r1, #5
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 fb50 	bl	8000eae <enc_wrbreg>

  /* Set filter mode: unicast OR broadcast AND crc valid */
  enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 800080e:	22a1      	movs	r2, #161	@ 0xa1
 8000810:	2138      	movs	r1, #56	@ 0x38
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 fb4b 	bl	8000eae <enc_wrbreg>

  do
  {
	udelay(10); //HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 8000818:	200a      	movs	r0, #10
 800081a:	f7ff ff65 	bl	80006e8 <udelay>
    regval = enc_rdbreg(handle, ENC_ESTAT);
 800081e:	211d      	movs	r1, #29
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 fb16 	bl	8000e52 <enc_rdbreg>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
  }while((regval & ESTAT_CLKRDY) == 0);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f1      	beq.n	8000818 <enc_start+0xa4>

  /* Enable MAC receive */
  enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 8000834:	220d      	movs	r2, #13
 8000836:	21c0      	movs	r1, #192	@ 0xc0
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fb38 	bl	8000eae <enc_wrbreg>

  /* Enable automatic padding and CRC operations */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d120      	bne.n	8000888 <enc_start+0x114>
  {
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <enc_start+0xde>
 800084e:	2332      	movs	r3, #50	@ 0x32
 8000850:	e000      	b.n	8000854 <enc_start+0xe0>
 8000852:	2302      	movs	r3, #2
 8000854:	461a      	mov	r2, r3
 8000856:	21c2      	movs	r1, #194	@ 0xc2
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 fb28 	bl	8000eae <enc_wrbreg>
    enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER); /* Defer transmission enable */
 800085e:	2240      	movs	r2, #64	@ 0x40
 8000860:	21c3      	movs	r1, #195	@ 0xc3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 fb23 	bl	8000eae <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000868:	2212      	movs	r2, #18
 800086a:	21c6      	movs	r1, #198	@ 0xc6
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 fb1e 	bl	8000eae <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 8000872:	220c      	movs	r2, #12
 8000874:	21c7      	movs	r1, #199	@ 0xc7
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 fb19 	bl	8000eae <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 800087c:	2212      	movs	r2, #18
 800087e:	21c4      	movs	r1, #196	@ 0xc4
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 fb14 	bl	8000eae <enc_wrbreg>
 8000886:	e015      	b.n	80008b4 <enc_start+0x140>
  }
  else
  {
    /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN | MACON3_FULDPX);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <enc_start+0x120>
 8000890:	2333      	movs	r3, #51	@ 0x33
 8000892:	e000      	b.n	8000896 <enc_start+0x122>
 8000894:	2303      	movs	r3, #3
 8000896:	461a      	mov	r2, r3
 8000898:	21c2      	movs	r1, #194	@ 0xc2
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 fb07 	bl	8000eae <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 80008a0:	2212      	movs	r2, #18
 80008a2:	21c6      	movs	r1, #198	@ 0xc6
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 fb02 	bl	8000eae <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 80008aa:	2215      	movs	r2, #21
 80008ac:	21c4      	movs	r1, #196	@ 0xc4
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fafd 	bl	8000eae <enc_wrbreg>
  }

  /* Set the maximum packet size which the controller will accept */
  enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU + 18) & 0xff);
 80008b4:	2204      	movs	r2, #4
 80008b6:	21ca      	movs	r1, #202	@ 0xca
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 faf8 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU + 18) >> 8);
 80008be:	2206      	movs	r2, #6
 80008c0:	21cb      	movs	r1, #203	@ 0xcb
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 faf3 	bl	8000eae <enc_wrbreg>

  /* Setup up PHCON1 & 2 */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10b      	bne.n	80008e8 <enc_start+0x174>
  {
    enc_wrphy(handle, ENC_PHCON1, 0x00);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fb83 	bl	8000fe0 <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 80008da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008de:	2110      	movs	r1, #16
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 fb7d 	bl	8000fe0 <enc_wrphy>
 80008e6:	e00a      	b.n	80008fe <enc_start+0x18a>
  }
  else
  {
    enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 80008e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ec:	2100      	movs	r1, #0
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fb76 	bl	8000fe0 <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, 0x00);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2110      	movs	r1, #16
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fb71 	bl	8000fe0 <enc_wrphy>
  }

  /* Process interrupt settings */
  if(handle->Init.InterruptEnableBits & EIE_LINKIE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7b1b      	ldrb	r3, [r3, #12]
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <enc_start+0x1a0>
  {
    /* Enable link change interrupt in PHY module */
    enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 800090a:	2212      	movs	r2, #18
 800090c:	2112      	movs	r1, #18
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 fb66 	bl	8000fe0 <enc_wrphy>
  }

  /* Reset all interrupt flags */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000914:	213b      	movs	r1, #59	@ 0x3b
 8000916:	20bc      	movs	r0, #188	@ 0xbc
 8000918:	f000 fa1e 	bl	8000d58 <enc_wrgreg2>

  regval = handle->Init.InterruptEnableBits;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7b1b      	ldrb	r3, [r3, #12]
 8000920:	73fb      	strb	r3, [r7, #15]
  if(regval)
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <enc_start+0x1bc>
  {
    /* Ensure INTIE is set when at least an interruption is selected */
    regval |= EIE_INTIE;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800092e:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable selected interrupts in ethernet controller module */
  enc_bfsgreg(ENC_EIE, regval);
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	4619      	mov	r1, r3
 8000934:	209b      	movs	r0, #155	@ 0x9b
 8000936:	f000 fa0f 	bl	8000d58 <enc_wrgreg2>

  /* Enable the receiver */
  enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 800093a:	2104      	movs	r1, #4
 800093c:	209f      	movs	r0, #159	@ 0x9f
 800093e:	f000 fa0b 	bl	8000d58 <enc_wrgreg2>

  return true;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <enc_set_MAC>:

/* Set the MAC address to the configured value. */
void enc_set_MAC(ENC_HandleTypeDef *handle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	21e4      	movs	r1, #228	@ 0xe4
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 faa5 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	3301      	adds	r3, #1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	21e5      	movs	r1, #229	@ 0xe5
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa9c 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	3302      	adds	r3, #2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	21e2      	movs	r1, #226	@ 0xe2
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fa93 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	3303      	adds	r3, #3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	21e3      	movs	r1, #227	@ 0xe3
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 fa8a 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	3304      	adds	r3, #4
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	21e0      	movs	r1, #224	@ 0xe0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 fa81 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	3305      	adds	r3, #5
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	21e1      	movs	r1, #225	@ 0xe1
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 fa78 	bl	8000eae <enc_wrbreg>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <enc_prepare_txbuffer>:

/* Prepare TX buffer */
int8_t enc_prepare_txbuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if(!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0))
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	201f      	movs	r0, #31
 80009d8:	f000 f9d5 	bl	8000d86 <enc_waitgreg>
 80009dc:	4603      	mov	r3, r0
 80009de:	f083 0301 	eor.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <enc_prepare_txbuffer+0x28>
  {
    return ERR_TIMEOUT;
 80009e8:	f06f 0302 	mvn.w	r3, #2
 80009ec:	e03c      	b.n	8000a68 <enc_prepare_txbuffer+0xa2>
  }

  /* Set transmit buffer start (is this necessary?). */
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2104      	movs	r1, #4
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 fa5b 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 80009f8:	221a      	movs	r2, #26
 80009fa:	2105      	movs	r1, #5
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 fa56 	bl	8000eae <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */
  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 fa51 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 8000a0c:	221a      	movs	r2, #26
 8000a0e:	2103      	movs	r1, #3
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 fa4c 	bl	8000eae <enc_wrbreg>

  txend = PKTMEM_TX_START + len;
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000a1c:	81fb      	strh	r3, [r7, #14]

  if(txend + 8 > PKTMEM_TX_ENDP1)
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d902      	bls.n	8000a2e <enc_prepare_txbuffer+0x68>
  {
    return ERR_MEM;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	e01c      	b.n	8000a68 <enc_prepare_txbuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2106      	movs	r1, #6
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fa39 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	2107      	movs	r1, #7
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 fa30 	bl	8000eae <enc_wrbreg>

  control_write[0] = ENC_WBM;
 8000a4e:	237a      	movs	r3, #122	@ 0x7a
 8000a50:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 8000a52:	230e      	movs	r3, #14
 8000a54:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(control_write, control_write, 2);
 8000a56:	f107 010c 	add.w	r1, r7, #12
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fdd3 	bl	800060c <SPIx_TxBuf>

  return ERR_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <enc_wrbuffer>:

/* Write a buffer of data. */
void enc_wrbuffer(void *buffer, uint16_t buflen)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]

  SPIx_CS;
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <enc_wrbuffer+0x30>)
 8000a82:	f001 ffd7 	bl	8002a34 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_WBM);
 8000a86:	207a      	movs	r0, #122	@ 0x7a
 8000a88:	f7ff fda0 	bl	80005cc <SPIx_TxRx>
  SPIx_TxBuf(buffer, NULL, buflen);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fdba 	bl	800060c <SPIx_TxBuf>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	48000400 	.word	0x48000400

08000aa4 <enc_transmit>:

/* Start hardware transmission. */
void enc_transmit(ENC_HandleTypeDef *handle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(handle->transmitLength != 0)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8b1b      	ldrh	r3, [r3, #24]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d04a      	beq.n	8000b4a <enc_transmit+0xa6>
  {
    handle->retries = 16;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2210      	movs	r2, #16
 8000ab8:	849a      	strh	r2, [r3, #36]	@ 0x24
    do
    {
      enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8000aba:	2180      	movs	r1, #128	@ 0x80
 8000abc:	209f      	movs	r0, #159	@ 0x9f
 8000abe:	f000 f94b 	bl	8000d58 <enc_wrgreg2>
      enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	20bf      	movs	r0, #191	@ 0xbf
 8000ac6:	f000 f947 	bl	8000d58 <enc_wrgreg2>
      enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000aca:	210a      	movs	r1, #10
 8000acc:	20bc      	movs	r0, #188	@ 0xbc
 8000ace:	f000 f943 	bl	8000d58 <enc_wrgreg2>

      /* Start transmission */
      enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	209f      	movs	r0, #159	@ 0x9f
 8000ad6:	f000 f93f 	bl	8000d58 <enc_wrgreg2>

      /* Wait for end of transmission */
      enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210a      	movs	r1, #10
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 f984 	bl	8000dec <enc_waitwhilegreg>

      /* Stop transmission */
      enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	20bf      	movs	r0, #191	@ 0xbf
 8000ae8:	f000 f936 	bl	8000d58 <enc_wrgreg2>
      {
        uint16_t addtTsv4;
        uint8_t tsv4, regval, *pTsvEntier;

        /* read tsv */
        addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	8b1b      	ldrh	r3, [r3, #24]
 8000af0:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000af4:	3301      	adds	r3, #1
 8000af6:	81fb      	strh	r3, [r7, #14]

        enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f9d4 	bl	8000eae <enc_wrbreg>
        enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2101      	movs	r1, #1
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f9cb 	bl	8000eae <enc_wrbreg>

        regval = enc_rdgreg(ENC_EIR);
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f000 f909 	bl	8000d30 <enc_rdgreg2>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	737b      	strb	r3, [r7, #13]
        if(!(regval & EIR_TXERIF) 	)//|| !(tsv4 & TSV_LATECOL))
 8000b22:	7b7b      	ldrb	r3, [r7, #13]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00a      	beq.n	8000b42 <enc_transmit+0x9e>
        {
          break;
        }
      }
      handle->retries--;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	849a      	strh	r2, [r3, #36]	@ 0x24
    }while(handle->retries > 0);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1bc      	bne.n	8000aba <enc_transmit+0x16>
 8000b40:	e000      	b.n	8000b44 <enc_transmit+0xa0>
          break;
 8000b42:	bf00      	nop
    handle->transmitLength = 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	831a      	strh	r2, [r3, #24]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <enc_get_received_frame>:

/* Check if we have received packet, and if so, retrieve them. */
bool enc_get_received_frame(ENC_HandleTypeDef *handle)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  uint8_t rsv[6];
  uint16_t pktlen;
  uint16_t rxstat;
  uint8_t pktcnt;

  bool result = true;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	757b      	strb	r3, [r7, #21]

  pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 8000b5e:	2139      	movs	r1, #57	@ 0x39
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f976 	bl	8000e52 <enc_rdbreg>
 8000b66:	4603      	mov	r3, r0
 8000b68:	753b      	strb	r3, [r7, #20]
  if(pktcnt == 0)
 8000b6a:	7d3b      	ldrb	r3, [r7, #20]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <enc_get_received_frame+0x22>
  {
    return false;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e07c      	b.n	8000c6e <enc_get_received_frame+0x11c>
  };

  /* Set the read pointer to the start of the received packet (ERDPT) */
  enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f995 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	8a9b      	ldrh	r3, [r3, #20]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2101      	movs	r1, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f98b 	bl	8000eae <enc_wrbreg>
  enc_rdbuffer(rsv, 6);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2106      	movs	r1, #6
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fa4a 	bl	8001038 <enc_rdbuffer>

  handle->nextpkt = (uint16_t) rsv[1] << 8 | (uint16_t) rsv[0];
 8000ba4:	7b7b      	ldrb	r3, [r7, #13]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	829a      	strh	r2, [r3, #20]
  pktlen = (uint16_t) rsv[3] << 8 | (uint16_t) rsv[2];
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	827b      	strh	r3, [r7, #18]
  rxstat = (uint16_t) rsv[5] << 8 | (uint16_t) rsv[4];
 8000bcc:	7c7b      	ldrb	r3, [r7, #17]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	7c3b      	ldrb	r3, [r7, #16]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */
  if((rxstat & RXSTAT_OK) == 0)
 8000bde:	8afb      	ldrh	r3, [r7, #22]
 8000be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <enc_get_received_frame+0x9c>
  {
    result = false;
 8000be8:	2300      	movs	r3, #0
 8000bea:	757b      	strb	r3, [r7, #21]
 8000bec:	e019      	b.n	8000c22 <enc_get_received_frame+0xd0>
  }
  else
  { /* Check for a usable packet length (4 added for the CRC) */
    if(pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4))
 8000bee:	8a7b      	ldrh	r3, [r7, #18]
 8000bf0:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d802      	bhi.n	8000bfe <enc_get_received_frame+0xac>
 8000bf8:	8a7b      	ldrh	r3, [r7, #18]
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d802      	bhi.n	8000c04 <enc_get_received_frame+0xb2>
    {
      result = false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	757b      	strb	r3, [r7, #21]
 8000c02:	e00e      	b.n	8000c22 <enc_get_received_frame+0xd0>
    }
    else
    {
      handle->RxFrameInfos.length = pktlen - 4;
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	3b04      	subs	r3, #4
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
      enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f000 fa0b 	bl	8001038 <enc_rdbuffer>
    }
  }

  /* Errata 14 (on se sert de rxstat comme variable temporaire */
  rxstat = handle->nextpkt;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8a9b      	ldrh	r3, [r3, #20]
 8000c26:	82fb      	strh	r3, [r7, #22]
  if(rxstat == PKTMEM_RX_START)
 8000c28:	8afb      	ldrh	r3, [r7, #22]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d103      	bne.n	8000c36 <enc_get_received_frame+0xe4>
  {
    rxstat = PKTMEM_RX_END;
 8000c2e:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 8000c32:	82fb      	strh	r3, [r7, #22]
 8000c34:	e002      	b.n	8000c3c <enc_get_received_frame+0xea>
  }
  else
  {
    rxstat--;
 8000c36:	8afb      	ldrh	r3, [r7, #22]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	82fb      	strh	r3, [r7, #22]
  }
  enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8000c3c:	8afb      	ldrh	r3, [r7, #22]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf14      	ite	ne
 8000c42:	2301      	movne	r3, #1
 8000c44:	2300      	moveq	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f92e 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8000c52:	8afb      	ldrh	r3, [r7, #22]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	210d      	movs	r1, #13
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f925 	bl	8000eae <enc_wrbreg>

  /* Decrement the packet counter indicate we are done with this packet */
  enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 8000c64:	2140      	movs	r1, #64	@ 0x40
 8000c66:	209e      	movs	r0, #158	@ 0x9e
 8000c68:	f000 f876 	bl	8000d58 <enc_wrgreg2>

  return result;
 8000c6c:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <enc_enable_interrupts>:

/* Enable individual ENC28J60 interrupts */
void enc_enable_interrupts(uint8_t bits)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  enc_bfsgreg(ENC_EIE, bits);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4619      	mov	r1, r3
 8000c84:	209b      	movs	r0, #155	@ 0x9b
 8000c86:	f000 f867 	bl	8000d58 <enc_wrgreg2>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <enc_irq_handler>:

/* Perform interrupt handling logic outside of the interrupt handler */
void enc_irq_handler(ENC_HandleTypeDef *handle)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  uint8_t eir;

  enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	20bb      	movs	r0, #187	@ 0xbb
 8000c9e:	f000 f85b 	bl	8000d58 <enc_wrgreg2>

  /* Read EIR for interrupt flags */
  eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8000ca2:	201c      	movs	r0, #28
 8000ca4:	f000 f844 	bl	8000d30 <enc_rdgreg2>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* PKTIF is not reliable, check PKCNT instead */
  if(enc_rdbreg(handle, ENC_EPKTCNT) != 0)
 8000cb0:	2139      	movs	r1, #57	@ 0x39
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f8cd 	bl	8000e52 <enc_rdbreg>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <enc_irq_handler+0x34>
  {
    /* Manage EIR_PKTIF by software */
    eir |= EIR_PKTIF;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Store interrupt flags in handle */
  handle->interruptFlags = eir;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	745a      	strb	r2, [r3, #17]

  /* If link status has changed, read it */
  if((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <enc_irq_handler+0x52>
  {
    enc_linkstatus(handle); /* Get current link status */
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f9c8 	bl	800106c <enc_linkstatus>
    enc_rdphy(handle, ENC_PHIR); /* Clear the LINKIF interrupt */
 8000cdc:	2113      	movs	r1, #19
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f943 	bl	8000f6a <enc_rdphy>
  }

  /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000ce4:	213b      	movs	r1, #59	@ 0x3b
 8000ce6:	20bc      	movs	r0, #188	@ 0xbc
 8000ce8:	f000 f836 	bl	8000d58 <enc_wrgreg2>

  /* Enable Ethernet interrupts */
  /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <enc_setbank>:

/* Set the bank for these next control register access. */
static void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
  if(bank != handle->bank)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7c1b      	ldrb	r3, [r3, #16]
 8000d04:	78fa      	ldrb	r2, [r7, #3]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d00e      	beq.n	8000d28 <enc_setbank+0x34>
  {
    /* Select bank 0 (just so that all of the bits are cleared) */
    enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	20bf      	movs	r0, #191	@ 0xbf
 8000d0e:	f000 f823 	bl	8000d58 <enc_wrgreg2>

    if(bank != 0)
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <enc_setbank+0x2e>
    {
      enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	209f      	movs	r0, #159	@ 0x9f
 8000d1e:	f000 f81b 	bl	8000d58 <enc_wrgreg2>
    }

    handle->bank = bank;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	741a      	strb	r2, [r3, #16]
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <enc_rdgreg2>:

/* Read a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(cmdpdata, cmdpdata, 2);
 8000d3e:	f107 010c 	add.w	r1, r7, #12
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2202      	movs	r2, #2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fc5f 	bl	800060c <SPIx_TxBuf>

  return cmdpdata[1];
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <enc_wrgreg2>:

/* Write to a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	733b      	strb	r3, [r7, #12]
  cmdpdata[1] = wrdata;
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(cmdpdata, NULL, 2);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2202      	movs	r2, #2
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fc47 	bl	800060c <SPIx_TxBuf>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <enc_waitgreg>:

/* Wait until grouped register bit(s) take a specific value */
static bool enc_waitgreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	460b      	mov	r3, r1
 8000d92:	71bb      	strb	r3, [r7, #6]
 8000d94:	4613      	mov	r3, r2
 8000d96:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d98:	f001 fb02 	bl	80023a0 <HAL_GetTick>
 8000d9c:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffc2 	bl	8000d30 <enc_rdgreg2>
 8000dac:	4603      	mov	r3, r0
 8000dae:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000db0:	f001 faf6 	bl	80023a0 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000dbc:	7cfa      	ldrb	r2, [r7, #19]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	797a      	ldrb	r2, [r7, #5]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d002      	beq.n	8000dd0 <enc_waitgreg+0x4a>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b31      	cmp	r3, #49	@ 0x31
 8000dce:	d9e6      	bls.n	8000d9e <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000dd0:	7cfa      	ldrb	r2, [r7, #19]
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	797a      	ldrb	r2, [r7, #5]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	bf0c      	ite	eq
 8000dde:	2301      	moveq	r3, #1
 8000de0:	2300      	movne	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <enc_waitwhilegreg>:

/* Wait while grouped register bit(s) have a specific value */
static bool enc_waitwhilegreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	460b      	mov	r3, r1
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000dfe:	f001 facf 	bl	80023a0 <HAL_GetTick>
 8000e02:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff8f 	bl	8000d30 <enc_rdgreg2>
 8000e12:	4603      	mov	r3, r0
 8000e14:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000e16:	f001 fac3 	bl	80023a0 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000e22:	7cfa      	ldrb	r2, [r7, #19]
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	4013      	ands	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	797a      	ldrb	r2, [r7, #5]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d102      	bne.n	8000e36 <enc_waitwhilegreg+0x4a>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b31      	cmp	r3, #49	@ 0x31
 8000e34:	d9e6      	bls.n	8000e04 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8000e36:	7cfa      	ldrb	r2, [r7, #19]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	797a      	ldrb	r2, [r7, #5]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <enc_rdbreg>:

/* Read from a banked control register using the RCR command. */
static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  enc_setbank(handle, GETBANK(ctrlreg));
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff41 	bl	8000cf4 <enc_setbank>
  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(data, data, (ISPHYMAC(ctrlreg)) ? 3 : 2);
 8000e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da01      	bge.n	8000e88 <enc_rdbreg+0x36>
 8000e84:	2203      	movs	r2, #3
 8000e86:	e000      	b.n	8000e8a <enc_rdbreg+0x38>
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f107 010c 	add.w	r1, r7, #12
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fbba 	bl	800060c <SPIx_TxBuf>
  return (ISPHYMAC(ctrlreg)) ? data[2] : data[1];
 8000e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da01      	bge.n	8000ea4 <enc_rdbreg+0x52>
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	e000      	b.n	8000ea6 <enc_rdbreg+0x54>
 8000ea4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <enc_wrbreg>:

/* Write to a banked control register using the WCR command. */
static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t wrdata)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];
  enc_setbank(handle, GETBANK(ctrlreg));
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	095b      	lsrs	r3, r3, #5
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff11 	bl	8000cf4 <enc_setbank>
  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8000ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8000ee6:	78bb      	ldrb	r3, [r7, #2]
 8000ee8:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(data, NULL, 2);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2202      	movs	r2, #2
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb8a 	bl	800060c <SPIx_TxBuf>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <enc_waitbreg>:

/* Wait until banked register bit(s) take a specific value */
static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	70fb      	strb	r3, [r7, #3]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70bb      	strb	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8000f1a:	f001 fa41 	bl	80023a0 <HAL_GetTick>
 8000f1e:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdbreg(handle, ctrlreg);
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff94 	bl	8000e52 <enc_rdbreg>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000f2e:	f001 fa37 	bl	80023a0 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000f3a:	7cfa      	ldrb	r2, [r7, #19]
 8000f3c:	78bb      	ldrb	r3, [r7, #2]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	787a      	ldrb	r2, [r7, #1]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d002      	beq.n	8000f4e <enc_waitbreg+0x4e>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b31      	cmp	r3, #49	@ 0x31
 8000f4c:	d9e8      	bls.n	8000f20 <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8000f4e:	7cfa      	ldrb	r2, [r7, #19]
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	4013      	ands	r3, r2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	787a      	ldrb	r2, [r7, #1]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <enc_rdphy>:

/* Read 16-bits of PHY data. */
static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	81fb      	strh	r3, [r7, #14]

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	21d4      	movs	r1, #212	@ 0xd4
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff94 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8000f86:	2201      	movs	r2, #1
 8000f88:	21d2      	movs	r1, #210	@ 0xd2
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff8f 	bl	8000eae <enc_wrbreg>
  udelay(12);
 8000f90:	200c      	movs	r0, #12
 8000f92:	f7ff fba9 	bl	80006e8 <udelay>

  if(enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8000f96:	2300      	movs	r3, #0
 8000f98:	2201      	movs	r2, #1
 8000f9a:	21ea      	movs	r1, #234	@ 0xea
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffaf 	bl	8000f00 <enc_waitbreg>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d016      	beq.n	8000fd6 <enc_rdphy+0x6c>
  {
    enc_wrbreg(handle, ENC_MICMD, 0x00);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	21d2      	movs	r1, #210	@ 0xd2
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff7e 	bl	8000eae <enc_wrbreg>
    data = (uint16_t) enc_rdbreg(handle, ENC_MIRDL);
 8000fb2:	21d8      	movs	r1, #216	@ 0xd8
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff4c 	bl	8000e52 <enc_rdbreg>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t) enc_rdbreg(handle, ENC_MIRDH) << 8;
 8000fbe:	21d9      	movs	r1, #217	@ 0xd9
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff46 	bl	8000e52 <enc_rdbreg>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	81fb      	strh	r3, [r7, #14]
  }

  return data;
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <enc_wrphy>:

/* write 16-bits of PHY data. */
static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr, uint16_t phydata)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	803b      	strh	r3, [r7, #0]
  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	21d4      	movs	r1, #212	@ 0xd4
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff59 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	21d6      	movs	r1, #214	@ 0xd6
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff52 	bl	8000eae <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 800100a:	883b      	ldrh	r3, [r7, #0]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	21d7      	movs	r1, #215	@ 0xd7
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff49 	bl	8000eae <enc_wrbreg>
  udelay(12);
 800101c:	200c      	movs	r0, #12
 800101e:	f7ff fb63 	bl	80006e8 <udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8001022:	2300      	movs	r3, #0
 8001024:	2201      	movs	r2, #1
 8001026:	21ea      	movs	r1, #234	@ 0xea
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff69 	bl	8000f00 <enc_waitbreg>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <enc_rdbuffer>:

/* Read a buffer of data. */
static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <enc_rdbuffer+0x30>)
 800104a:	f001 fcf3 	bl	8002a34 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_RBM);
 800104e:	203a      	movs	r0, #58	@ 0x3a
 8001050:	f7ff fabc 	bl	80005cc <SPIx_TxRx>
  SPIx_TxBuf(NULL, buffer, buflen);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	461a      	mov	r2, r3
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fad6 	bl	800060c <SPIx_TxBuf>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	48000400 	.word	0x48000400

0800106c <enc_linkstatus>:

/* The current link status can be obtained from the PHSTAT1.LLSTAT or PHSTAT2.LSTAT.*/
static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8001074:	2111      	movs	r1, #17
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff77 	bl	8000f6a <enc_rdphy>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	82da      	strh	r2, [r3, #22]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <IsRtcmTypeAccepted>:
rtcmMsg_t RtcmMsgTab[RTCM_MSG_TAB]={0}; // up to 6 Rtcm msg should be acquired  by one time
uint8_t write_index = 0;
uint8_t readIndex = 0;

status_t IsRtcmTypeAccepted(uint16_t type)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < RTCM_MSG_TYPE_READ; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e00b      	b.n	80010b4 <IsRtcmTypeAccepted+0x28>
        if (type == RtcmMsgTypeRead[i])
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <IsRtcmTypeAccepted+0x3c>)
 80010a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a4:	88fa      	ldrh	r2, [r7, #6]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d101      	bne.n	80010ae <IsRtcmTypeAccepted+0x22>
            return kStatus_Success;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e006      	b.n	80010bc <IsRtcmTypeAccepted+0x30>
    for (uint8_t i = 0; i < RTCM_MSG_TYPE_READ; i++) {
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	3301      	adds	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d9f0      	bls.n	800109c <IsRtcmTypeAccepted+0x10>
    }
    return kStatus_Fail;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <F9p_DataReceive>:
  * @brief  function to handle data from F9P
  * @param  None
  * @retval None
 */
status_t F9p_DataReceive(rtcmMsg_t *LocalRtcmMsgTab, uint8_t *RtcmMsgCountParam)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    uint8_t RtcmMsgCount = *RtcmMsgCountParam;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	74fb      	strb	r3, [r7, #19]
    uint8_t byte = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	72fb      	strb	r3, [r7, #11]
    uint16_t payloadLen = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	823b      	strh	r3, [r7, #16]
    rtcmMsg_t *currentMsg = &LocalRtcmMsgTab[RtcmMsgCount];
 80010e4:	7cfa      	ldrb	r2, [r7, #19]
 80010e6:	4613      	mov	r3, r2
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    uint16_t index = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	83fb      	strh	r3, [r7, #30]

    // // verify if it was really RTCM data msg (0xD3)
    do {
        if (xQueueReceive(rtcmQueue, &byte, portMAX_DELAY) != pdTRUE)
 80010fa:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <F9p_DataReceive+0x18c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f107 010b 	add.w	r1, r7, #11
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	4618      	mov	r0, r3
 8001108:	f007 f94c 	bl	80083a4 <xQueueReceive>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <F9p_DataReceive+0x4a>
            return kStatus_Fail;
 8001112:	2301      	movs	r3, #1
 8001114:	e09b      	b.n	800124e <F9p_DataReceive+0x182>
    } while (byte != 0xD3);
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	2bd3      	cmp	r3, #211	@ 0xd3
 800111a:	d1ee      	bne.n	80010fa <F9p_DataReceive+0x2e>

    currentMsg->pcRtcmData[index++] = byte;
 800111c:	8bfb      	ldrh	r3, [r7, #30]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	83fa      	strh	r2, [r7, #30]
 8001122:	4619      	mov	r1, r3
 8001124:	7afa      	ldrb	r2, [r7, #11]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	440b      	add	r3, r1
 800112a:	709a      	strb	r2, [r3, #2]

    // get len
    for (int i = 0; i < 2; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	e018      	b.n	8001164 <F9p_DataReceive+0x98>
        if (xQueueReceive(rtcmQueue, &byte, portMAX_DELAY) != pdTRUE)
 8001132:	4b49      	ldr	r3, [pc, #292]	@ (8001258 <F9p_DataReceive+0x18c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f107 010b 	add.w	r1, r7, #11
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	4618      	mov	r0, r3
 8001140:	f007 f930 	bl	80083a4 <xQueueReceive>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <F9p_DataReceive+0x82>
            return kStatus_Fail;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <F9p_DataReceive+0x182>
        currentMsg->pcRtcmData[index++] = byte;
 800114e:	8bfb      	ldrh	r3, [r7, #30]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	83fa      	strh	r2, [r7, #30]
 8001154:	4619      	mov	r1, r3
 8001156:	7afa      	ldrb	r2, [r7, #11]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	440b      	add	r3, r1
 800115c:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 2; i++) {
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	3301      	adds	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b01      	cmp	r3, #1
 8001168:	dde3      	ble.n	8001132 <F9p_DataReceive+0x66>
    }

    payloadLen = ((currentMsg->pcRtcmData[1] & 0x03) << 8) | currentMsg->pcRtcmData[2];
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	78db      	ldrb	r3, [r3, #3]
 800116e:	b21b      	sxth	r3, r3
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001178:	b21a      	sxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	823b      	strh	r3, [r7, #16]

    if (payloadLen > RTCM_MSG_MAX_LEN)
 8001186:	8a3b      	ldrh	r3, [r7, #16]
 8001188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118c:	d301      	bcc.n	8001192 <F9p_DataReceive+0xc6>
    	return kStatus_Fail;
 800118e:	2301      	movs	r3, #1
 8001190:	e05d      	b.n	800124e <F9p_DataReceive+0x182>

    // read payload (+ 3 CRC byte)
    for (int i = 0; i < payloadLen + 3; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e018      	b.n	80011ca <F9p_DataReceive+0xfe>
        if (xQueueReceive(rtcmQueue, &byte, portMAX_DELAY) != pdTRUE)
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <F9p_DataReceive+0x18c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f107 010b 	add.w	r1, r7, #11
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 f8fd 	bl	80083a4 <xQueueReceive>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d001      	beq.n	80011b4 <F9p_DataReceive+0xe8>
            return kStatus_Fail;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e04c      	b.n	800124e <F9p_DataReceive+0x182>
        currentMsg->pcRtcmData[index++] = byte;
 80011b4:	8bfb      	ldrh	r3, [r7, #30]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	83fa      	strh	r2, [r7, #30]
 80011ba:	4619      	mov	r1, r3
 80011bc:	7afa      	ldrb	r2, [r7, #11]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	440b      	add	r3, r1
 80011c2:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < payloadLen + 3; i++) {
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	8a3b      	ldrh	r3, [r7, #16]
 80011cc:	3302      	adds	r3, #2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dde1      	ble.n	8001198 <F9p_DataReceive+0xcc>
    }

    currentMsg->wRtcmLen = payloadLen;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8a3a      	ldrh	r2, [r7, #16]
 80011d8:	801a      	strh	r2, [r3, #0]

    // prevent reading error
    currentMsg->wRtcmType = ((RtcmMsgTab[readIndex].pcRtcmData[3] << 4) | (RtcmMsgTab[readIndex].pcRtcmData[4] >> 4));
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <F9p_DataReceive+0x190>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001260 <F9p_DataReceive+0x194>)
 80011e2:	460b      	mov	r3, r1
 80011e4:	01db      	lsls	r3, r3, #7
 80011e6:	440b      	add	r3, r1
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	3305      	adds	r3, #5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <F9p_DataReceive+0x190>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	4918      	ldr	r1, [pc, #96]	@ (8001260 <F9p_DataReceive+0x194>)
 80011fe:	4603      	mov	r3, r0
 8001200:	01db      	lsls	r3, r3, #7
 8001202:	4403      	add	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	3306      	adds	r3, #6
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21b      	sxth	r3, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
    if (IsRtcmTypeAccepted(currentMsg->wRtcmType))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <IsRtcmTypeAccepted>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <F9p_DataReceive+0x168>
        return kStatus_Fail;
 8001230:	2301      	movs	r3, #1
 8001232:	e00c      	b.n	800124e <F9p_DataReceive+0x182>

    // RtcmMsgCount +1 (circular buffer)
    RtcmMsgCount = (RtcmMsgCount >= RTCM_MSG_TAB - 1) ? 0 : RtcmMsgCount + 1;
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d803      	bhi.n	8001242 <F9p_DataReceive+0x176>
 800123a:	7cfb      	ldrb	r3, [r7, #19]
 800123c:	3301      	adds	r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	e000      	b.n	8001244 <F9p_DataReceive+0x178>
 8001242:	2300      	movs	r3, #0
 8001244:	74fb      	strb	r3, [r7, #19]
    *RtcmMsgCountParam = RtcmMsgCount;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	7cfa      	ldrb	r2, [r7, #19]
 800124a:	701a      	strb	r2, [r3, #0]

    return kStatus_Success;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20002368 	.word	0x20002368
 800125c:	200018d4 	.word	0x200018d4
 8001260:	200000a4 	.word	0x200000a4

08001264 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <vApplicationGetIdleTaskMemory+0x2c>)
 8001274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <vApplicationGetIdleTaskMemory+0x30>)
 800127a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001282:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	200018d8 	.word	0x200018d8
 8001294:	2000193c 	.word	0x2000193c

08001298 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn) 
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;
  
  /* Read the data from the port, blocking if nothing yet there. 
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 80012a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f009 fc70 	bl	800ab8c <netconn_recv>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (recv_err == ERR_OK)
 80012b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d15d      	bne.n	8001376 <http_server_serve+0xde>
  {
    if (netconn_err(conn) == ERR_OK) 
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f009 fdef 	bl	800ae9e <netconn_err>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d157      	bne.n	8001376 <http_server_serve+0xde>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 80012c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c8:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80012cc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00b fb45 	bl	800c960 <netbuf_data>
    
      // Is this an HTTP GET command? (only check the first 5 chars, since  there are other formats for GET, and we're keeping it very simple )
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 80012d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d94c      	bls.n	8001376 <http_server_serve+0xde>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	2205      	movs	r2, #5
 80012e0:	492a      	ldr	r1, [pc, #168]	@ (800138c <http_server_serve+0xf4>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f019 f8e8 	bl	801a4b8 <strncmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d143      	bne.n	8001376 <http_server_serve+0xde>
      {
    	  // it's default page
    	  if( strncmp(buf, "GET / ", 6) == 0 )
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	2206      	movs	r2, #6
 80012f2:	4927      	ldr	r1, [pc, #156]	@ (8001390 <http_server_serve+0xf8>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f019 f8df 	bl	801a4b8 <strncmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d118      	bne.n	8001332 <http_server_serve+0x9a>
    	  {
    		  taskENTER_CRITICAL();
 8001300:	f008 feb2 	bl	800a068 <vPortEnterCritical>
    		  //fs_open(&file, "/index.html");
    		  fs_open(&file, "/fichier_mais_tres_long.html");
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4922      	ldr	r1, [pc, #136]	@ (8001394 <http_server_serve+0xfc>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00b fd50 	bl	800cdb0 <fs_open>
    		  netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	461a      	mov	r2, r3
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f009 fcaf 	bl	800ac80 <netconn_write_partly>
    		  fs_close(&file);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4618      	mov	r0, r3
 8001328:	f00b fd80 	bl	800ce2c <fs_close>
    		  taskEXIT_CRITICAL();
 800132c:	f008 fece 	bl	800a0cc <vPortExitCritical>
 8001330:	e021      	b.n	8001376 <http_server_serve+0xde>
    	  }
    	  // else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)
    	  else if (strncmp((char const *)buf,"GET /img/enzo_snap.jpg", 22) == 0)
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	2216      	movs	r2, #22
 8001336:	4918      	ldr	r1, [pc, #96]	@ (8001398 <http_server_serve+0x100>)
 8001338:	4618      	mov	r0, r3
 800133a:	f019 f8bd 	bl	801a4b8 <strncmp>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d104      	bne.n	800134e <http_server_serve+0xb6>
    	  {
    		  taskENTER_CRITICAL();
 8001344:	f008 fe90 	bl	800a068 <vPortEnterCritical>
    		  //fs_open(&file, "/img/enzo_snap.jpg");
    		  //netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
    		  //fs_close(&file);
    		  taskEXIT_CRITICAL();
 8001348:	f008 fec0 	bl	800a0cc <vPortExitCritical>
 800134c:	e013      	b.n	8001376 <http_server_serve+0xde>
    	  }
    	  else
    	  {
    		  // Load Error page
    		  fs_open(&file, "/404.html");
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4912      	ldr	r1, [pc, #72]	@ (800139c <http_server_serve+0x104>)
 8001354:	4618      	mov	r0, r3
 8001356:	f00b fd2b 	bl	800cdb0 <fs_open>
    		  netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	461a      	mov	r2, r3
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f009 fc8a 	bl	800ac80 <netconn_write_partly>
    		  fs_close(&file);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4618      	mov	r0, r3
 8001372:	f00b fd5b 	bl	800ce2c <fs_close>
      }      
    }
  }

  // Close the connection (server closes in HTTP)
  netconn_close(conn);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f009 fd84 	bl	800ae84 <netconn_close>
  
  // Delete the buffer (netconn_recv gives us ownership,so we have to make sure to deallocate the buffer)
  netbuf_delete(inbuf);
 800137c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137e:	4618      	mov	r0, r3
 8001380:	f00b face 	bl	800c920 <netbuf_delete>
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	@ 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0801b444 	.word	0x0801b444
 8001390:	0801b44c 	.word	0x0801b44c
 8001394:	0801b454 	.word	0x0801b454
 8001398:	0801b474 	.word	0x0801b474
 800139c:	0801b48c 	.word	0x0801b48c

080013a0 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2010      	movs	r0, #16
 80013ae:	f009 f88f 	bl	800a4d0 <netconn_new_with_proto_and_callback>
 80013b2:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d023      	beq.n	8001402 <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 80013ba:	2250      	movs	r2, #80	@ 0x50
 80013bc:	2100      	movs	r1, #0
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f009 f940 	bl	800a644 <netconn_bind>
 80013c4:	4603      	mov	r3, r0
 80013c6:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 80013c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d118      	bne.n	8001402 <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 80013d0:	21ff      	movs	r1, #255	@ 0xff
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f009 f9a6 	bl	800a724 <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f009 f9cc 	bl	800a77c <netconn_accept>
 80013e4:	4603      	mov	r3, r0
 80013e6:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 80013e8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f3      	bne.n	80013d8 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff50 	bl	8001298 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 f906 	bl	800a60c <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8001400:	e7ea      	b.n	80013d8 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL,2048/* DEFAULT_THREAD_STACKSIZE*/, WEBSERVER_THREAD_PRIO);
 8001412:	2301      	movs	r3, #1
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800141a:	2200      	movs	r2, #0
 800141c:	4903      	ldr	r1, [pc, #12]	@ (800142c <http_server_netconn_init+0x20>)
 800141e:	4804      	ldr	r0, [pc, #16]	@ (8001430 <http_server_netconn_init+0x24>)
 8001420:	f018 fd34 	bl	8019e8c <sys_thread_new>
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	080013a1 	.word	0x080013a1
 8001430:	0801b498 	.word	0x0801b498

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 ff7d 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f84f 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 f93d 	bl	80016c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001446:	f000 f90b 	bl	8001660 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800144a:	f000 f89b 	bl	8001584 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800144e:	f000 f8d7 	bl	8001600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001452:	2025      	movs	r0, #37	@ 0x25
 8001454:	f001 f8b6 	bl	80025c4 <HAL_NVIC_DisableIRQ>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <main+0x90>)
 800145a:	1d3c      	adds	r4, r7, #4
 800145c:	461d      	mov	r5, r3
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f005 ffd2 	bl	8007418 <osThreadCreate>
 8001474:	4603      	mov	r3, r0
 8001476:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <main+0x94>)
 8001478:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Semaphore to signal Ethernet Link state update */
  xRxUartReceive = xSemaphoreCreateBinary();
 800147a:	2203      	movs	r2, #3
 800147c:	2100      	movs	r1, #0
 800147e:	2001      	movs	r0, #1
 8001480:	f006 fc4b 	bl	8007d1a <xQueueGenericCreate>
 8001484:	4603      	mov	r3, r0
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <main+0x98>)
 8001488:	6013      	str	r3, [r2, #0]
  rtcmQueue = xQueueCreate(1, sizeof(uint8_t));
 800148a:	2200      	movs	r2, #0
 800148c:	2101      	movs	r1, #1
 800148e:	2001      	movs	r0, #1
 8001490:	f006 fc43 	bl	8007d1a <xQueueGenericCreate>
 8001494:	4603      	mov	r3, r0
 8001496:	4a0e      	ldr	r2, [pc, #56]	@ (80014d0 <main+0x9c>)
 8001498:	6013      	str	r3, [r2, #0]
  rtcmDataQueue = xQueueCreate(1, sizeof(rtcmMsg_t));
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80014a0:	2001      	movs	r0, #1
 80014a2:	f006 fc3a 	bl	8007d1a <xQueueGenericCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <main+0xa0>)
 80014aa:	6013      	str	r3, [r2, #0]
  //uint8_t *text = "lancement de l'OS temps réèl\r\n";
  printf("basile.fw\r\n");
 80014ac:	480a      	ldr	r0, [pc, #40]	@ (80014d8 <main+0xa4>)
 80014ae:	f018 fe99 	bl	801a1e4 <puts>
  printf("lancement de l'OS temps reel\r\n");
 80014b2:	480a      	ldr	r0, [pc, #40]	@ (80014dc <main+0xa8>)
 80014b4:	f018 fe96 	bl	801a1e4 <puts>
 // HAL_UART_Transmit(&huart2, text, 10, 1000);
  initRTOS();
 80014b8:	f000 fa76 	bl	80019a8 <initRTOS>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014bc:	f005 ff95 	bl	80073ea <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <main+0x8c>
 80014c4:	0801b5bc 	.word	0x0801b5bc
 80014c8:	20001eb0 	.word	0x20001eb0
 80014cc:	20002364 	.word	0x20002364
 80014d0:	20002368 	.word	0x20002368
 80014d4:	2000236c 	.word	0x2000236c
 80014d8:	0801b584 	.word	0x0801b584
 80014dc:	0801b590 	.word	0x0801b590

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b096      	sub	sp, #88	@ 0x58
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2244      	movs	r2, #68	@ 0x44
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f018 ffda 	bl	801a4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001502:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001506:	f001 faed 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001510:	f000 fa44 	bl	800199c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001514:	2302      	movs	r3, #2
 8001516:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800151c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151e:	2310      	movs	r3, #16
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001526:	2302      	movs	r3, #2
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800152e:	230a      	movs	r3, #10
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001532:	2307      	movs	r3, #7
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fb24 	bl	8002b90 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800154e:	f000 fa25 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2303      	movs	r3, #3
 8001558:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2104      	movs	r1, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f001 feec 	bl	8003348 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001576:	f000 fa11 	bl	800199c <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	@ 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <MX_SPI2_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <MX_SPI2_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_SPI2_Init+0x74>)
 8001590:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <MX_SPI2_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_SPI2_Init+0x74>)
 800159e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015ba:	2230      	movs	r2, #48	@ 0x30
 80015bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015de:	2208      	movs	r2, #8
 80015e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_SPI2_Init+0x74>)
 80015e4:	f002 fdc2 	bl	800416c <HAL_SPI_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f9d5 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20001d3c 	.word	0x20001d3c
 80015fc:	40003800 	.word	0x40003800

08001600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <MX_USART1_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001644:	f003 ff84 	bl	8005550 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f000 f9a5 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20001da0 	.word	0x20001da0
 800165c:	40013800 	.word	0x40013800

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <MX_USART2_UART_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_USART2_UART_Init+0x58>)
 80016a4:	f003 ff54 	bl	8005550 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 f975 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20001e28 	.word	0x20001e28
 80016bc:	40004400 	.word	0x40004400

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a43      	ldr	r2, [pc, #268]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	4a3d      	ldr	r2, [pc, #244]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <MX_GPIO_Init+0x128>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <MX_GPIO_Init+0x128>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a37      	ldr	r2, [pc, #220]	@ (80017e8 <MX_GPIO_Init+0x128>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <MX_GPIO_Init+0x128>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <MX_GPIO_Init+0x128>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	4a31      	ldr	r2, [pc, #196]	@ (80017e8 <MX_GPIO_Init+0x128>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172a:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <MX_GPIO_Init+0x128>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2120      	movs	r1, #32
 800173a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173e:	f001 f979 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2101      	movs	r1, #1
 8001746:	4829      	ldr	r0, [pc, #164]	@ (80017ec <MX_GPIO_Init+0x12c>)
 8001748:	f001 f974 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4823      	ldr	r0, [pc, #140]	@ (80017f0 <MX_GPIO_Init+0x130>)
 8001764:	f000 ffbc 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001768:	2320      	movs	r3, #32
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f000 ffad 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4813      	ldr	r0, [pc, #76]	@ (80017ec <MX_GPIO_Init+0x12c>)
 800179e:	f000 ff9f 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017bc:	f000 ff90 	bl	80026e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2106      	movs	r1, #6
 80017c4:	2017      	movs	r0, #23
 80017c6:	f000 fed3 	bl	8002570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017ca:	2017      	movs	r0, #23
 80017cc:	f000 feec 	bl	80025a8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2106      	movs	r1, #6
 80017d4:	2028      	movs	r0, #40	@ 0x28
 80017d6:	f000 fecb 	bl	8002570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017da:	2028      	movs	r0, #40	@ 0x28
 80017dc:	f000 fee4 	bl	80025a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800

080017f4 <StartTask03>:
  * @param  None
  * @retval None
  */

void StartTask03(void const * argument)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();	//disable IRQ
 80017fc:	f008 fc34 	bl	800a068 <vPortEnterCritical>
	 printf("task 3 start\r\n");
 8001800:	4810      	ldr	r0, [pc, #64]	@ (8001844 <StartTask03+0x50>)
 8001802:	f018 fcef 	bl	801a1e4 <puts>
	xSemaphore = xSemaphoreCreateBinaryStatic(&xSemaphoreBuffer);
 8001806:	2303      	movs	r3, #3
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <StartTask03+0x54>)
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2001      	movs	r0, #1
 8001812:	f006 fa05 	bl	8007c20 <xQueueGenericCreateStatic>
 8001816:	4603      	mov	r3, r0
 8001818:	4a0c      	ldr	r2, [pc, #48]	@ (800184c <StartTask03+0x58>)
 800181a:	6013      	str	r3, [r2, #0]


	/* Create tcp_ip stack thread */
	tcpip_init(NULL, NULL);
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f00b fa7c 	bl	800cd1c <tcpip_init>

	/* Initialize the LwIP stack */
	Netif_Config();
 8001824:	f005 fb78 	bl	8006f18 <Netif_Config>

	/* Initialize tcp client (send rtcm data)*/
	tcpclient_init();
 8001828:	f000 fd36 	bl	8002298 <tcpclient_init>

	/* Initialize webserver */
	http_server_netconn_init();
 800182c:	f7ff fdee 	bl	800140c <http_server_netconn_init>

	/*F9p starting */
	taskEXIT_CRITICAL();
 8001830:	f008 fc4c 	bl	800a0cc <vPortExitCritical>


	/* infinite loop but pas trop quand même */
	for(;;)
	{
		printf("task 3 kill\r\n");
 8001834:	4806      	ldr	r0, [pc, #24]	@ (8001850 <StartTask03+0x5c>)
 8001836:	f018 fcd5 	bl	801a1e4 <puts>
		osThreadTerminate(NULL);
 800183a:	2000      	movs	r0, #0
 800183c:	f005 fe38 	bl	80074b0 <osThreadTerminate>
		printf("task 3 kill\r\n");
 8001840:	bf00      	nop
 8001842:	e7f7      	b.n	8001834 <StartTask03+0x40>
 8001844:	0801b5d8 	.word	0x0801b5d8
 8001848:	2000231c 	.word	0x2000231c
 800184c:	20002318 	.word	0x20002318
 8001850:	0801b5e8 	.word	0x0801b5e8

08001854 <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == 256)// pin PA8
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001864:	d109      	bne.n	800187a <HAL_GPIO_EXTI_Callback+0x26>
  {
	  if (ethernetTaskHandleGlobal!=NULL)
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <HAL_GPIO_EXTI_Callback+0x30>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_GPIO_EXTI_Callback+0x26>
		  xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_GPIO_EXTI_Callback+0x34>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4906      	ldr	r1, [pc, #24]	@ (800188c <HAL_GPIO_EXTI_Callback+0x38>)
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fd05 	bl	8008284 <xQueueGiveFromISR>
  }
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20002374 	.word	0x20002374
 8001888:	20002318 	.word	0x20002318
 800188c:	20002378 	.word	0x20002378

08001890 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    printf("Stack overflow in task: %s\n", pcTaskName);
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <vApplicationStackOverflowHook+0x18>)
 800189e:	f018 fc39 	bl	801a114 <iprintf>
    while (1);  // Bloque l'exécution si débordement détecté
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <vApplicationStackOverflowHook+0x12>
 80018a6:	bf00      	nop
 80018a8:	0801b5f8 	.word	0x0801b5f8

080018ac <__io_putchar>:
}
PUTCHAR_PROTOTYPE
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80018b4:	1d39      	adds	r1, r7, #4
 80018b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018ba:	2201      	movs	r2, #1
 80018bc:	4803      	ldr	r0, [pc, #12]	@ (80018cc <__io_putchar+0x20>)
 80018be:	f003 fe95 	bl	80055ec <HAL_UART_Transmit>

  return ch;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20001e28 	.word	0x20001e28

080018d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
    if (huart->Instance == USART1){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <HAL_UART_RxCpltCallback+0x64>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d117      	bne.n	8001916 <HAL_UART_RxCpltCallback+0x46>
    	 xQueueSendFromISR(rtcmQueue, &rx_byte, &xHigherPriorityTaskWoken);
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HAL_UART_RxCpltCallback+0x68>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	2300      	movs	r3, #0
 80018f0:	4912      	ldr	r1, [pc, #72]	@ (800193c <HAL_UART_RxCpltCallback+0x6c>)
 80018f2:	f006 fc29 	bl	8008148 <xQueueGenericSendFromISR>
    	 HAL_UART_Receive_IT(&huart1, &rx_byte, 1); // Relancer la réception
 80018f6:	2201      	movs	r2, #1
 80018f8:	4910      	ldr	r1, [pc, #64]	@ (800193c <HAL_UART_RxCpltCallback+0x6c>)
 80018fa:	4811      	ldr	r0, [pc, #68]	@ (8001940 <HAL_UART_RxCpltCallback+0x70>)
 80018fc:	f003 ff00 	bl	8005700 <HAL_UART_Receive_IT>
    	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_UART_RxCpltCallback+0x46>
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_UART_RxCpltCallback+0x74>)
 8001908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	f3bf 8f6f 	isb	sy
    }

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_UART_RxCpltCallback+0x5c>
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_UART_RxCpltCallback+0x74>)
 800191e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	f3bf 8f6f 	isb	sy
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013800 	.word	0x40013800
 8001938:	20002368 	.word	0x20002368
 800193c:	20002370 	.word	0x20002370
 8001940:	20001da0 	.word	0x20001da0
 8001944:	e000ed04 	.word	0xe000ed04

08001948 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int i=0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  i++;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800195a:	2120      	movs	r1, #32
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f001 f880 	bl	8002a64 <HAL_GPIO_TogglePin>
	  vTaskDelay(500);
 8001964:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001968:	f007 fb9e 	bl	80090a8 <vTaskDelay>
	  //HAL_UART_Transmit(&huart2, &i, sizeof(i), 1000);
    osDelay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f005 fdab 	bl	80074c8 <osDelay>
	  i++;
 8001972:	bf00      	nop
 8001974:	e7ee      	b.n	8001954 <StartDefaultTask+0xc>
	...

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800198a:	f000 fcf5 	bl	8002378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40001000 	.word	0x40001000

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <initRTOS>:
 * param : nop
 *
 * return: kStatus_Success
 */
status_t initRTOS()
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b08e      	sub	sp, #56	@ 0x38
 80019ac:	af00      	add	r7, sp, #0
	/* definition and creation of tache_bacasable */
	//osThreadDef(tache_UartDebug, StartTask02, osPriorityLow, 0, 128);
	//UartDebug_Handle = osThreadCreate( osThread(tache_UartDebug) , NULL );

	/* definition and creation of tache_bacasable */
	osThreadDef(tache_F9pTask, StartTask02, osPriorityNormal, 0, 1024);
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <initRTOS+0x58>)
 80019b0:	f107 041c 	add.w	r4, r7, #28
 80019b4:	461d      	mov	r5, r3
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	F9pTask_Handle = osThreadCreate( osThread(tache_F9pTask) , NULL );
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f005 fd25 	bl	8007418 <osThreadCreate>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <initRTOS+0x5c>)
 80019d2:	6013      	str	r3, [r2, #0]

	osThreadDef(tache_StartThread, StartTask03, osPriorityHigh, 0, 512);
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <initRTOS+0x60>)
 80019d6:	463c      	mov	r4, r7
 80019d8:	461d      	mov	r5, r3
 80019da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	StartThread_Handle = osThreadCreate( osThread(tache_StartThread) , NULL );
 80019e6:	463b      	mov	r3, r7
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fd14 	bl	8007418 <osThreadCreate>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <initRTOS+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]


	return kStatus_Success;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3738      	adds	r7, #56	@ 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001a00:	0801b624 	.word	0x0801b624
 8001a04:	20002380 	.word	0x20002380
 8001a08:	0801b654 	.word	0x0801b654
 8001a0c:	2000237c 	.word	0x2000237c

08001a10 <StartTask02>:
  * @param  None
  * @retval None
 */
 uint8_t *foo  = "miaou";
void StartTask02(void const * argument)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b097      	sub	sp, #92	@ 0x5c
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	6078      	str	r0, [r7, #4]
	uint8_t F9pRawData2[3] = {0};
 8001a18:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	460a      	mov	r2, r1
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	460a      	mov	r2, r1
 8001a24:	709a      	strb	r2, [r3, #2]
	static uint8_t writeIndex = 0;
	static uint8_t readIndex = 0;
#ifdef DEBUG_LOG_CSL
	uint16_t cRtcmMsgType = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char uartMsg[64];
	printf("task 2 start\r\n");
 8001a2c:	4836      	ldr	r0, [pc, #216]	@ (8001b08 <StartTask02+0xf8>)
 8001a2e:	f018 fbd9 	bl	801a1e4 <puts>
#endif
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4935      	ldr	r1, [pc, #212]	@ (8001b0c <StartTask02+0xfc>)
 8001a36:	4836      	ldr	r0, [pc, #216]	@ (8001b10 <StartTask02+0x100>)
 8001a38:	f003 fe62 	bl	8005700 <HAL_UART_Receive_IT>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a3c:	2025      	movs	r0, #37	@ 0x25
 8001a3e:	f000 fdb3 	bl	80025a8 <HAL_NVIC_EnableIRQ>

	for(;;)
	{
		// if rtcm is receive
		if (F9p_DataReceive(RtcmMsgTab, &writeIndex) == kStatus_Success)
 8001a42:	4934      	ldr	r1, [pc, #208]	@ (8001b14 <StartTask02+0x104>)
 8001a44:	4834      	ldr	r0, [pc, #208]	@ (8001b18 <StartTask02+0x108>)
 8001a46:	f7ff fb41 	bl	80010cc <F9p_DataReceive>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d157      	bne.n	8001b00 <StartTask02+0xf0>
		{
		    while (readIndex != writeIndex)
 8001a50:	e050      	b.n	8001af4 <StartTask02+0xe4>
		    {
#ifdef DEBUG_LOG_CSL

		    	snprintf(uartMsg, sizeof(uartMsg), "RTCM recu: %d ; Len = %d, index = %d\r\n", RtcmMsgTab[readIndex].wRtcmType, RtcmMsgTab[readIndex].wRtcmLen, readIndex);
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <StartTask02+0x10c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <StartTask02+0x108>)
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	01db      	lsls	r3, r3, #7
 8001a5e:	440b      	add	r3, r1
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b1c <StartTask02+0x10c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <StartTask02+0x108>)
 8001a74:	460b      	mov	r3, r1
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	440b      	add	r3, r1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <StartTask02+0x10c>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f107 0008 	add.w	r0, r7, #8
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	4623      	mov	r3, r4
 8001a90:	4a23      	ldr	r2, [pc, #140]	@ (8001b20 <StartTask02+0x110>)
 8001a92:	2140      	movs	r1, #64	@ 0x40
 8001a94:	f018 fbae 	bl	801a1f4 <sniprintf>
		    	HAL_UART_Transmit(&huart2, (uint8_t *)uartMsg, strlen(uartMsg), 1000);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fba1 	bl	80001e4 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f107 0108 	add.w	r1, r7, #8
 8001aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aae:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <StartTask02+0x114>)
 8001ab0:	f003 fd9c 	bl	80055ec <HAL_UART_Transmit>
#endif
		    	// send to tcp client
		    	//memcpy(&RtcmMsgTab[readIndex].pcRtcmData, foo, 5);
		    	xQueueSend(rtcmDataQueue, &RtcmMsgTab[readIndex], portMAX_DELAY);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <StartTask02+0x118>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <StartTask02+0x10c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <StartTask02+0x108>)
 8001ac8:	1899      	adds	r1, r3, r2
 8001aca:	2300      	movs	r3, #0
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	f006 fa38 	bl	8007f44 <xQueueGenericSend>

		    	// buffer managment
		    	readIndex = (readIndex + 1) % RTCM_MSG_TAB;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <StartTask02+0x10c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <StartTask02+0x11c>)
 8001adc:	fb83 3102 	smull	r3, r1, r3, r2
 8001ae0:	17d3      	asrs	r3, r2, #31
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	440b      	add	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	1ad1      	subs	r1, r2, r3
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <StartTask02+0x10c>)
 8001af2:	701a      	strb	r2, [r3, #0]
		    while (readIndex != writeIndex)
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <StartTask02+0x10c>)
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <StartTask02+0x104>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1a8      	bne.n	8001a52 <StartTask02+0x42>
		    }
		}
		osDelay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f005 fce1 	bl	80074c8 <osDelay>
		if (F9p_DataReceive(RtcmMsgTab, &writeIndex) == kStatus_Success)
 8001b06:	e79c      	b.n	8001a42 <StartTask02+0x32>
 8001b08:	0801b678 	.word	0x0801b678
 8001b0c:	20002370 	.word	0x20002370
 8001b10:	20001da0 	.word	0x20001da0
 8001b14:	20002384 	.word	0x20002384
 8001b18:	200000a4 	.word	0x200000a4
 8001b1c:	20002385 	.word	0x20002385
 8001b20:	0801b688 	.word	0x0801b688
 8001b24:	20001e28 	.word	0x20001e28
 8001b28:	2000236c 	.word	0x2000236c
 8001b2c:	2aaaaaab 	.word	0x2aaaaaab

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	f06f 0001 	mvn.w	r0, #1
 8001b6e:	f000 fcff 	bl	8002570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <HAL_SPI_MspInit+0xb4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d144      	bne.n	8001c2c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ba2:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_SPI_MspInit+0xb8>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bea:	230c      	movs	r3, #12
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <HAL_SPI_MspInit+0xbc>)
 8001c06:	f000 fd6b 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <HAL_SPI_MspInit+0xc0>)
 8001c28:	f000 fd5a 	bl	80026e0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	@ 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40003800 	.word	0x40003800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000400 	.word	0x48000400

08001c44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ae      	sub	sp, #184	@ 0xb8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	2288      	movs	r2, #136	@ 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f018 fc1f 	bl	801a4a8 <memset>
  if(huart->Instance==USART1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_UART_MspInit+0x148>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d145      	bne.n	8001d00 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fdb7 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff fe86 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c90:	4b3f      	ldr	r3, [pc, #252]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c94:	4a3e      	ldr	r2, [pc, #248]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a38      	ldr	r2, [pc, #224]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cda:	2307      	movs	r3, #7
 8001cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cea:	f000 fcf9 	bl	80026e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2025      	movs	r0, #37	@ 0x25
 8001cf4:	f000 fc3c 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf8:	2025      	movs	r0, #37	@ 0x25
 8001cfa:	f000 fc55 	bl	80025a8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfe:	e040      	b.n	8001d82 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <HAL_UART_MspInit+0x150>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d13b      	bne.n	8001d82 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fd6c 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001d22:	f7ff fe3b 	bl	800199c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d56:	230c      	movs	r3, #12
 8001d58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7e:	f000 fcaf 	bl	80026e0 <HAL_GPIO_Init>
}
 8001d82:	bf00      	nop
 8001d84:	37b8      	adds	r7, #184	@ 0xb8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40004400 	.word	0x40004400

08001d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	@ 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da6:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_InitTick+0xe0>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	4a33      	ldr	r2, [pc, #204]	@ (8001e78 <HAL_InitTick+0xe0>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db2:	4b31      	ldr	r3, [pc, #196]	@ (8001e78 <HAL_InitTick+0xe0>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dbe:	f107 0210 	add.w	r2, r7, #16
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 fc81 	bl	80036d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f001 fc4e 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dde:	e004      	b.n	8001dea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001de0:	f001 fc4a 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8001de4:	4603      	mov	r3, r0
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <HAL_InitTick+0xe4>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	3b01      	subs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001dfa:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_InitTick+0xec>)
 8001dfc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e06:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e1e:	4818      	ldr	r0, [pc, #96]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e20:	f003 f8d0 	bl	8004fc4 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11b      	bne.n	8001e6a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e32:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <HAL_InitTick+0xe8>)
 8001e34:	f003 f928 	bl	8005088 <HAL_TIM_Base_Start_IT>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d111      	bne.n	8001e6a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e46:	2036      	movs	r0, #54	@ 0x36
 8001e48:	f000 fbae 	bl	80025a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d808      	bhi.n	8001e64 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e52:	2200      	movs	r2, #0
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	2036      	movs	r0, #54	@ 0x36
 8001e58:	f000 fb8a 	bl	8002570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_InitTick+0xf0>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e002      	b.n	8001e6a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3738      	adds	r7, #56	@ 0x38
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	20002388 	.word	0x20002388
 8001e84:	40001000 	.word	0x40001000
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <NMI_Handler+0x4>

08001e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ec6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001eca:	f000 fde5 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <USART1_IRQHandler+0x10>)
 8001eda:	f003 fc5d 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20001da0 	.word	0x20001da0

08001ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001eec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ef0:	f000 fdd2 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM6_DAC_IRQHandler+0x10>)
 8001efe:	f003 f933 	bl	8005168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20002388 	.word	0x20002388

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <_kill+0x20>)
 8001f28:	2216      	movs	r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20017800 	.word	0x20017800

08001f40 <_exit>:

void _exit (int status)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffe5 	bl	8001f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <_exit+0x12>

08001f56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e00a      	b.n	8001f7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f68:	f3af 8000 	nop.w
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	60ba      	str	r2, [r7, #8]
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dbf0      	blt.n	8001f68 <_read+0x12>
  }

  return len;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e009      	b.n	8001fb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	60ba      	str	r2, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fc7e 	bl	80018ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf1      	blt.n	8001fa2 <_write+0x12>
  }
  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_close>:

int _close(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_isatty>:

int _isatty(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d205      	bcs.n	800206c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <_sbrk+0x6c>)
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a06      	ldr	r2, [pc, #24]	@ (8002094 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20018000 	.word	0x20018000
 8002090:	00000400 	.word	0x00000400
 8002094:	200023d4 	.word	0x200023d4
 8002098:	20017950 	.word	0x20017950
 800209c:	20017800 	.word	0x20017800

080020a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <SystemInit+0x20>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <SystemInit+0x20>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <tcpinit_thread>:

// Structure pour un message RTCM


static void tcpinit_thread(void *arg)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2010      	movs	r0, #16
 80020d2:	f008 f9fd 	bl	800a4d0 <netconn_new_with_proto_and_callback>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a41      	ldr	r2, [pc, #260]	@ (80021e0 <tcpinit_thread+0x11c>)
 80020da:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 80020dc:	4b40      	ldr	r3, [pc, #256]	@ (80021e0 <tcpinit_thread+0x11c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d079      	beq.n	80021d8 <tcpinit_thread+0x114>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 80020e4:	4b3e      	ldr	r3, [pc, #248]	@ (80021e0 <tcpinit_thread+0x11c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2207      	movs	r2, #7
 80020ea:	493e      	ldr	r1, [pc, #248]	@ (80021e4 <tcpinit_thread+0x120>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f008 faa9 	bl	800a644 <netconn_bind>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d167      	bne.n	80021ce <tcpinit_thread+0x10a>
		{
			/* The desination IP adress of the computer = 169.254.168.110 */

			IP_ADDR4(&dest_addr, 169, 254, 168, 110);
 80020fe:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <tcpinit_thread+0x124>)
 8002100:	4a3a      	ldr	r2, [pc, #232]	@ (80021ec <tcpinit_thread+0x128>)
 8002102:	601a      	str	r2, [r3, #0]
			dest_port = 2101;  // server port
 8002104:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <tcpinit_thread+0x12c>)
 8002106:	f640 0235 	movw	r2, #2101	@ 0x835
 800210a:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 800210c:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <tcpinit_thread+0x11c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <tcpinit_thread+0x12c>)
 8002112:	8812      	ldrh	r2, [r2, #0]
 8002114:	4934      	ldr	r1, [pc, #208]	@ (80021e8 <tcpinit_thread+0x124>)
 8002116:	4618      	mov	r0, r3
 8002118:	f008 facc 	bl	800a6b4 <netconn_connect>
 800211c:	4603      	mov	r3, r0
 800211e:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8002120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d147      	bne.n	80021b8 <tcpinit_thread+0xf4>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8002128:	4832      	ldr	r0, [pc, #200]	@ (80021f4 <tcpinit_thread+0x130>)
 800212a:	f017 fe31 	bl	8019d90 <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 800212e:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <tcpinit_thread+0x11c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4931      	ldr	r1, [pc, #196]	@ (80021f8 <tcpinit_thread+0x134>)
 8002134:	4618      	mov	r0, r3
 8002136:	f008 fd29 	bl	800ab8c <netconn_recv>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f6      	bne.n	800212e <tcpinit_thread+0x6a>
					{
						/* Extract the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <tcpinit_thread+0x134>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3308      	adds	r3, #8
 8002146:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <tcpinit_thread+0x138>)
 8002148:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 800214a:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <tcpinit_thread+0x134>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	899a      	ldrh	r2, [r3, #12]
 8002150:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <tcpinit_thread+0x13c>)
 8002152:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8002154:	4b28      	ldr	r3, [pc, #160]	@ (80021f8 <tcpinit_thread+0x134>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <tcpinit_thread+0x134>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	895b      	ldrh	r3, [r3, #10]
 8002164:	461a      	mov	r2, r3
 8002166:	4827      	ldr	r0, [pc, #156]	@ (8002204 <tcpinit_thread+0x140>)
 8002168:	f018 f9b8 	bl	801a4dc <strncpy>

							// Or modify the message received, so that we can send it back to the server
							sprintf (smsgc, "\"%s\" was sent by the Server\n", msgc);
 800216c:	4a25      	ldr	r2, [pc, #148]	@ (8002204 <tcpinit_thread+0x140>)
 800216e:	4926      	ldr	r1, [pc, #152]	@ (8002208 <tcpinit_thread+0x144>)
 8002170:	4826      	ldr	r0, [pc, #152]	@ (800220c <tcpinit_thread+0x148>)
 8002172:	f018 f875 	bl	801a260 <siprintf>

							// semaphore must be taken before accessing the tcpsend function
							sys_arch_sem_wait(&tcpsem, 500);
 8002176:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800217a:	481e      	ldr	r0, [pc, #120]	@ (80021f4 <tcpinit_thread+0x130>)
 800217c:	f017 fdd7 	bl	8019d2e <sys_arch_sem_wait>

							// send the data to the TCP Server
							tcpsend((uint8_t *)smsgc, strlen(smsgc));
 8002180:	4822      	ldr	r0, [pc, #136]	@ (800220c <tcpinit_thread+0x148>)
 8002182:	f7fe f82f 	bl	80001e4 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	481f      	ldr	r0, [pc, #124]	@ (800220c <tcpinit_thread+0x148>)
 800218e:	f000 f83f 	bl	8002210 <tcpsend>

							memset (msgc, '\0', 100);  // clear the buffer
 8002192:	2264      	movs	r2, #100	@ 0x64
 8002194:	2100      	movs	r1, #0
 8002196:	481b      	ldr	r0, [pc, #108]	@ (8002204 <tcpinit_thread+0x140>)
 8002198:	f018 f986 	bl	801a4a8 <memset>
						}
						while (netbuf_next(buf) >0);
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <tcpinit_thread+0x134>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00a fc27 	bl	800c9f4 <netbuf_next>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dcd3      	bgt.n	8002154 <tcpinit_thread+0x90>

						netbuf_delete(buf);
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <tcpinit_thread+0x134>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a fbb5 	bl	800c920 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 80021b6:	e7ba      	b.n	800212e <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <tcpinit_thread+0x11c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f008 fe61 	bl	800ae84 <netconn_close>
				netconn_delete(conn);
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <tcpinit_thread+0x11c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 fa20 	bl	800a60c <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 80021cc:	e004      	b.n	80021d8 <tcpinit_thread+0x114>
			netconn_delete(conn);
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <tcpinit_thread+0x11c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f008 fa1a 	bl	800a60c <netconn_delete>
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200023d8 	.word	0x200023d8
 80021e4:	08023034 	.word	0x08023034
 80021e8:	200023e4 	.word	0x200023e4
 80021ec:	6ea8fea9 	.word	0x6ea8fea9
 80021f0:	200023ea 	.word	0x200023ea
 80021f4:	20002518 	.word	0x20002518
 80021f8:	200023dc 	.word	0x200023dc
 80021fc:	200023e0 	.word	0x200023e0
 8002200:	200023e8 	.word	0x200023e8
 8002204:	200023ec 	.word	0x200023ec
 8002208:	0801b6b0 	.word	0x0801b6b0
 800220c:	20002450 	.word	0x20002450

08002210 <tcpsend>:

void tcpsend(uint8_t *data, uint8_t len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
	// send the data to the connected connection
	netconn_write(conn, data, len, NETCONN_COPY);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <tcpsend+0x2c>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	f008 fd29 	bl	800ac80 <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 800222e:	4804      	ldr	r0, [pc, #16]	@ (8002240 <tcpsend+0x30>)
 8002230:	f017 fdae 	bl	8019d90 <sys_sem_signal>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200023d8 	.word	0x200023d8
 8002240:	20002518 	.word	0x20002518

08002244 <tcpsend_thread>:

rtcmMsg_t TcpRtcmMsgTab = {0};
extern UART_HandleTypeDef huart2;

static void tcpsend_thread (void *arg)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		// waiting data from queue
		xQueueReceive(rtcmDataQueue, &TcpRtcmMsgTab, portMAX_DELAY);
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <tcpsend_thread+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <tcpsend_thread+0x44>)
 8002256:	4618      	mov	r0, r3
 8002258:	f006 f8a4 	bl	80083a4 <xQueueReceive>

		// send the data to the server
		sys_arch_sem_wait(&tcpsem, 500);
 800225c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002260:	480a      	ldr	r0, [pc, #40]	@ (800228c <tcpsend_thread+0x48>)
 8002262:	f017 fd64 	bl	8019d2e <sys_arch_sem_wait>
		tcpsend(&TcpRtcmMsgTab.pcRtcmData[0], TcpRtcmMsgTab.wRtcmLen + 6 ); // +6 → header (3byte) + CRC (3byte)
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <tcpsend_thread+0x44>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3306      	adds	r3, #6
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	@ (8002290 <tcpsend_thread+0x4c>)
 8002274:	f7ff ffcc 	bl	8002210 <tcpsend>

		// ptit printf parce qu'on est pas des bêtes
		printf("Tcp data send\r\n");
 8002278:	4806      	ldr	r0, [pc, #24]	@ (8002294 <tcpsend_thread+0x50>)
 800227a:	f017 ffb3 	bl	801a1e4 <puts>
		xQueueReceive(rtcmDataQueue, &TcpRtcmMsgTab, portMAX_DELAY);
 800227e:	bf00      	nop
 8002280:	e7e4      	b.n	800224c <tcpsend_thread+0x8>
 8002282:	bf00      	nop
 8002284:	2000236c 	.word	0x2000236c
 8002288:	2000251c 	.word	0x2000251c
 800228c:	20002518 	.word	0x20002518
 8002290:	2000251e 	.word	0x2000251e
 8002294:	0801b6d0 	.word	0x0801b6d0

08002298 <tcpclient_init>:




void tcpclient_init (void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af02      	add	r7, sp, #8
	sys_sem_new(&tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 800229e:	2100      	movs	r1, #0
 80022a0:	480b      	ldr	r0, [pc, #44]	@ (80022d0 <tcpclient_init+0x38>)
 80022a2:	f017 fd1c 	bl	8019cde <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022ae:	2200      	movs	r2, #0
 80022b0:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <tcpclient_init+0x3c>)
 80022b2:	4809      	ldr	r0, [pc, #36]	@ (80022d8 <tcpclient_init+0x40>)
 80022b4:	f017 fdea 	bl	8019e8c <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80022b8:	2300      	movs	r3, #0
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022c0:	2200      	movs	r2, #0
 80022c2:	4906      	ldr	r1, [pc, #24]	@ (80022dc <tcpclient_init+0x44>)
 80022c4:	4806      	ldr	r0, [pc, #24]	@ (80022e0 <tcpclient_init+0x48>)
 80022c6:	f017 fde1 	bl	8019e8c <sys_thread_new>
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20002518 	.word	0x20002518
 80022d4:	080020c5 	.word	0x080020c5
 80022d8:	0801b6e0 	.word	0x0801b6e0
 80022dc:	08002245 	.word	0x08002245
 80022e0:	0801b6f0 	.word	0x0801b6f0

080022e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800231c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e8:	f7ff feda 	bl	80020a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	@ (8002324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <LoopForever+0xe>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	@ (8002330 <LoopForever+0x16>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002312:	f018 f93d 	bl	801a590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002316:	f7ff f88d 	bl	8001434 <main>

0800231a <LoopForever>:

LoopForever:
    b LoopForever
 800231a:	e7fe      	b.n	800231a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800231c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002328:	08023144 	.word	0x08023144
  ldr r2, =_sbss
 800232c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002330:	20017950 	.word	0x20017950

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <HAL_Init+0x3c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_Init+0x3c>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
 8002350:	f000 f903 	bl	800255a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002354:	200f      	movs	r0, #15
 8002356:	f7ff fd1f 	bl	8001d98 <HAL_InitTick>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	e001      	b.n	800236a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002366:	f7ff fbe3 	bl	8001b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800236a:	79fb      	ldrb	r3, [r7, #7]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000010 	.word	0x20000010
 800239c:	20002924 	.word	0x20002924

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20002924 	.word	0x20002924

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db12      	blt.n	8002490 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	490a      	ldr	r1, [pc, #40]	@ (800249c <__NVIC_DisableIRQ+0x44>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	3320      	adds	r3, #32
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002484:	f3bf 8f4f 	dsb	sy
}
 8002488:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800248a:	f3bf 8f6f 	isb	sy
}
 800248e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff28 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002582:	f7ff ff3d 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002586:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f7ff ffb1 	bl	80024f4 <NVIC_EncodePriority>
 8002592:	4602      	mov	r2, r0
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff80 	bl	80024a0 <__NVIC_SetPriority>
}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff30 	bl	800241c <__NVIC_EnableIRQ>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff40 	bl	8002458 <__NVIC_DisableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 020e 	bic.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f003 021c 	and.w	r2, r3, #28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d005      	beq.n	8002680 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e029      	b.n	80026d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020e 	bic.w	r2, r2, #14
 800268e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a4:	f003 021c 	and.w	r2, r3, #28
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f202 	lsl.w	r2, r1, r2
 80026b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
    }
  }
  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	e17f      	b.n	80029f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8171 	beq.w	80029ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d005      	beq.n	8002720 <HAL_GPIO_Init+0x40>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d130      	bne.n	8002782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002756:	2201      	movs	r2, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0201 	and.w	r2, r3, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b03      	cmp	r3, #3
 800278c:	d118      	bne.n	80027c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002794:	2201      	movs	r2, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f003 0201 	and.w	r2, r3, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d017      	beq.n	80027fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80ac 	beq.w	80029ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b5f      	ldr	r3, [pc, #380]	@ (8002a10 <HAL_GPIO_Init+0x330>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002896:	4a5e      	ldr	r2, [pc, #376]	@ (8002a10 <HAL_GPIO_Init+0x330>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6613      	str	r3, [r2, #96]	@ 0x60
 800289e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a10 <HAL_GPIO_Init+0x330>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x242>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a18 <HAL_GPIO_Init+0x338>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x23e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a1c <HAL_GPIO_Init+0x33c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x23a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002a20 <HAL_GPIO_Init+0x340>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x236>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a24 <HAL_GPIO_Init+0x344>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x232>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a28 <HAL_GPIO_Init+0x348>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x22e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <HAL_GPIO_Init+0x34c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x22a>
 8002906:	2306      	movs	r3, #6
 8002908:	e00c      	b.n	8002924 <HAL_GPIO_Init+0x244>
 800290a:	2307      	movs	r3, #7
 800290c:	e00a      	b.n	8002924 <HAL_GPIO_Init+0x244>
 800290e:	2305      	movs	r3, #5
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x244>
 8002912:	2304      	movs	r3, #4
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x244>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x244>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x244>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x244>
 8002922:	2300      	movs	r3, #0
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002934:	4937      	ldr	r1, [pc, #220]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002966:	4a32      	ldr	r2, [pc, #200]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002990:	4a27      	ldr	r2, [pc, #156]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <HAL_GPIO_Init+0x350>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f47f ae78 	bne.w	80026f0 <HAL_GPIO_Init+0x10>
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	48000c00 	.word	0x48000c00
 8002a24:	48001000 	.word	0x48001000
 8002a28:	48001400 	.word	0x48001400
 8002a2c:	48001800 	.word	0x48001800
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43d9      	mvns	r1, r3
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	400b      	ands	r3, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aa2:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aae:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fecc 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af2:	d130      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b00:	d038      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b02:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2232      	movs	r2, #50	@ 0x32
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b28:	e002      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3c:	d102      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f2      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b50:	d110      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d007      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b64:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b6c:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e3ca      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b97      	ldr	r3, [pc, #604]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b94      	ldr	r3, [pc, #592]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80e4 	beq.w	8002d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x4a>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f040 808b 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 8087 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e3a2      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_RCC_OscConfig+0x7c>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_OscConfig+0x88>
 8002c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d223      	bcs.n	8002c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd87 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e383      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c30:	4b73      	ldr	r3, [pc, #460]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a72      	ldr	r2, [pc, #456]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b70      	ldr	r3, [pc, #448]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	496d      	ldr	r1, [pc, #436]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4968      	ldr	r1, [pc, #416]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
 8002c62:	e025      	b.n	8002cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a65      	ldr	r2, [pc, #404]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4960      	ldr	r1, [pc, #384]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c82:	4b5f      	ldr	r3, [pc, #380]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	495b      	ldr	r1, [pc, #364]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd47 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e343      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb0:	f000 fc4a 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4950      	ldr	r1, [pc, #320]	@ (8002e04 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8002e08 <HAL_RCC_OscConfig+0x278>)
 8002cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f85f 	bl	8001d98 <HAL_InitTick>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d052      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	e327      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d032      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf0:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a42      	ldr	r2, [pc, #264]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fb50 	bl	80023a0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d04:	f7ff fb4c 	bl	80023a0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e310      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4931      	ldr	r1, [pc, #196]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	492c      	ldr	r1, [pc, #176]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e01a      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d56:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d62:	f7ff fb1d 	bl	80023a0 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fb19 	bl	80023a0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e2dd      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7c:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1da>
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d074      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x21a>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d10e      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d064      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d160      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e2ba      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x24a>
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e026      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_OscConfig+0x280>
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a02      	ldr	r2, [pc, #8]	@ (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	0801f038 	.word	0x0801f038
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	2000000c 	.word	0x2000000c
 8002e10:	4ba0      	ldr	r3, [pc, #640]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a9f      	ldr	r2, [pc, #636]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9c      	ldr	r2, [pc, #624]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7ff fab6 	bl	80023a0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7ff fab2 	bl	80023a0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e276      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b92      	ldr	r3, [pc, #584]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7ff faa2 	bl	80023a0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7ff fa9e 	bl	80023a0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e262      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d0>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x310>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x328>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e23f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b76      	ldr	r3, [pc, #472]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4973      	ldr	r1, [pc, #460]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e040      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7ff fa5d 	bl	80023a0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eea:	f7ff fa59 	bl	80023a0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e21d      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b65      	ldr	r3, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b62      	ldr	r3, [pc, #392]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	495f      	ldr	r1, [pc, #380]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5c      	ldr	r2, [pc, #368]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fa39 	bl	80023a0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f32:	f7ff fa35 	bl	80023a0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1f9      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b4b      	ldr	r3, [pc, #300]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7ff fa14 	bl	80023a0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7ff fa10 	bl	80023a0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1d4      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
 8002f9c:	e01b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7ff f9f7 	bl	80023a0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7ff f9f3 	bl	80023a0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1b7      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a6 	beq.w	8003130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003000:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003028:	f7ff f9ba 	bl	80023a0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7ff f9b6 	bl	80023a0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e17a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_RCC_OscConfig+0x508>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d8>
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003066:	e029      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d115      	bne.n	800309c <HAL_RCC_OscConfig+0x50c>
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	4a03      	ldr	r2, [pc, #12]	@ (8003094 <HAL_RCC_OscConfig+0x504>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	4b9c      	ldr	r3, [pc, #624]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	4a9b      	ldr	r2, [pc, #620]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ac:	4b98      	ldr	r3, [pc, #608]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	4a97      	ldr	r2, [pc, #604]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d016      	beq.n	80030f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7ff f96c 	bl	80023a0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7ff f968 	bl	80023a0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e12a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ed      	beq.n	80030cc <HAL_RCC_OscConfig+0x53c>
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7ff f955 	bl	80023a0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7ff f951 	bl	80023a0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e113      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ed      	bne.n	80030fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b7a      	ldr	r3, [pc, #488]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	4a79      	ldr	r2, [pc, #484]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80fe 	beq.w	8003336 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 80d0 	bne.w	80032e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003144:	4b72      	ldr	r3, [pc, #456]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d130      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	3b01      	subs	r3, #1
 8003164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d127      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11f      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003184:	2a07      	cmp	r2, #7
 8003186:	bf14      	ite	ne
 8003188:	2201      	movne	r2, #1
 800318a:	2200      	moveq	r2, #0
 800318c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	4293      	cmp	r3, r2
 8003190:	d113      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d06e      	beq.n	8003298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d069      	beq.n	8003294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031cc:	4b50      	ldr	r3, [pc, #320]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ad      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e8:	f7ff f8da 	bl	80023a0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7ff f8d6 	bl	80023a0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e09a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003202:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320e:	4b40      	ldr	r3, [pc, #256]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <HAL_RCC_OscConfig+0x784>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800321e:	3a01      	subs	r2, #1
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003228:	0212      	lsls	r2, r2, #8
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800323c:	0852      	lsrs	r2, r2, #1
 800323e:	3a01      	subs	r2, #1
 8003240:	0652      	lsls	r2, r2, #25
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003248:	0912      	lsrs	r2, r2, #4
 800324a:	0452      	lsls	r2, r2, #17
 800324c:	430a      	orrs	r2, r1
 800324e:	4930      	ldr	r1, [pc, #192]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003254:	4b2e      	ldr	r3, [pc, #184]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003260:	4b2b      	ldr	r3, [pc, #172]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800326a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800326c:	f7ff f898 	bl	80023a0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7ff f894 	bl	80023a0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e058      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	4b22      	ldr	r3, [pc, #136]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003292:	e050      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e04f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d148      	bne.n	8003336 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032bc:	f7ff f870 	bl	80023a0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7ff f86c 	bl	80023a0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e030      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x734>
 80032e2:	e028      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d023      	beq.n	8003332 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <HAL_RCC_OscConfig+0x780>)
 80032f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7ff f853 	bl	80023a0 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7ff f84f 	bl	80023a0 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d905      	bls.n	8003318 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
 8003310:	40021000 	.word	0x40021000
 8003314:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ec      	bne.n	80032fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4905      	ldr	r1, [pc, #20]	@ (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_RCC_OscConfig+0x7b4>)
 800332c:	4013      	ands	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
 8003330:	e001      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	feeefffc 	.word	0xfeeefffc

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0e7      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b75      	ldr	r3, [pc, #468]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d910      	bls.n	800338c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b72      	ldr	r3, [pc, #456]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	4970      	ldr	r1, [pc, #448]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b6e      	ldr	r3, [pc, #440]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cf      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4960      	ldr	r1, [pc, #384]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d121      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0a6      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b54      	ldr	r3, [pc, #336]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d115      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e09a      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e08e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340e:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e086      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4943      	ldr	r1, [pc, #268]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7fe ffb6 	bl	80023a0 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe ffb2 	bl	80023a0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e06e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	492b      	ldr	r1, [pc, #172]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348e:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d210      	bcs.n	80034be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0207 	bic.w	r2, r3, #7
 80034a4:	4923      	ldr	r1, [pc, #140]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ac:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d001      	beq.n	80034be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e036      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4918      	ldr	r1, [pc, #96]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4910      	ldr	r1, [pc, #64]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034fc:	f000 f824 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	490b      	ldr	r1, [pc, #44]	@ (800353c <HAL_RCC_ClockConfig+0x1f4>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_ClockConfig+0x1fc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fc39 	bl	8001d98 <HAL_InitTick>
 8003526:	4603      	mov	r3, r0
 8003528:	72fb      	strb	r3, [r7, #11]

  return status;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	0801f038 	.word	0x0801f038
 8003540:	20000008 	.word	0x20000008
 8003544:	2000000c 	.word	0x2000000c

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x34>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d121      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11e      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800357c:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003588:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e004      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d134      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0xa6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0xac>
 80035ec:	e005      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035f0:	617b      	str	r3, [r7, #20]
      break;
 80035f2:	e005      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035f6:	617b      	str	r3, [r7, #20]
      break;
 80035f8:	e002      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003600:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	fb03 f202 	mul.w	r2, r3, r2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0e5b      	lsrs	r3, r3, #25
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	3301      	adds	r3, #1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003640:	69bb      	ldr	r3, [r7, #24]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	0801f050 	.word	0x0801f050
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000008 	.word	0x20000008

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	0801f048 	.word	0x0801f048

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036a8:	f7ff ffda 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	0801f048 	.word	0x0801f048

080036d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	220f      	movs	r2, #15
 80036de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_GetClockConfig+0x5c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003712:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <HAL_RCC_GetClockConfig+0x60>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0207 	and.w	r2, r3, #7
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40022000 	.word	0x40022000

08003734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003740:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800374c:	f7ff f9bc 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 8003750:	6178      	str	r0, [r7, #20]
 8003752:	e014      	b.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	4a24      	ldr	r2, [pc, #144]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003760:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800376c:	f7ff f9ac 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 8003770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003784:	d10b      	bne.n	800379e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b80      	cmp	r3, #128	@ 0x80
 800378a:	d919      	bls.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003790:	d902      	bls.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003792:	2302      	movs	r3, #2
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e013      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e010      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b80      	cmp	r3, #128	@ 0x80
 80037a2:	d902      	bls.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037a4:	2303      	movs	r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e00a      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b80      	cmp	r3, #128	@ 0x80
 80037ae:	d102      	bne.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037b0:	2302      	movs	r3, #2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e004      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b70      	cmp	r3, #112	@ 0x70
 80037ba:	d101      	bne.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0207 	bic.w	r2, r3, #7
 80037c8:	4909      	ldr	r1, [pc, #36]	@ (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d0:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003800:	2300      	movs	r3, #0
 8003802:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d041      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003814:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003818:	d02a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800381a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800381e:	d824      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003826:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800382a:	d81e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003834:	d010      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003836:	e018      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003838:	4b86      	ldr	r3, [pc, #536]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a85      	ldr	r2, [pc, #532]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003842:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003844:	e015      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fabb 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003856:	e00c      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3320      	adds	r3, #32
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fba6 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	74fb      	strb	r3, [r7, #19]
      break;
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003878:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003886:	4973      	ldr	r1, [pc, #460]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d041      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038a8:	d02a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ae:	d824      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ba:	d81e      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c4:	d010      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038c6:	e018      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038c8:	4b62      	ldr	r3, [pc, #392]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a61      	ldr	r2, [pc, #388]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038d4:	e015      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fa73 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e6:	e00c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3320      	adds	r3, #32
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fb5e 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	74fb      	strb	r3, [r7, #19]
      break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003908:	4b52      	ldr	r3, [pc, #328]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003916:	494f      	ldr	r1, [pc, #316]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a0 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003936:	4b47      	ldr	r3, [pc, #284]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b41      	ldr	r3, [pc, #260]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	4a40      	ldr	r2, [pc, #256]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	@ 0x58
 8003958:	4b3e      	ldr	r3, [pc, #248]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b3b      	ldr	r3, [pc, #236]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003974:	f7fe fd14 	bl	80023a0 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe fd10 	bl	80023a0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003990:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d019      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c0:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b21      	ldr	r3, [pc, #132]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a20      	ldr	r2, [pc, #128]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ec:	4a19      	ldr	r2, [pc, #100]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fe fccf 	bl	80023a0 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	e00b      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe fccb 	bl	80023a0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d902      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ec      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	4b08      	ldr	r3, [pc, #32]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a42:	4904      	ldr	r1, [pc, #16]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a4a:	e009      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a60:	7c7b      	ldrb	r3, [r7, #17]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b9e      	ldr	r3, [pc, #632]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	4a9d      	ldr	r2, [pc, #628]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a7e:	4b98      	ldr	r3, [pc, #608]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f023 0203 	bic.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	4994      	ldr	r1, [pc, #592]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa6:	f023 020c 	bic.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aae:	498c      	ldr	r1, [pc, #560]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac2:	4b87      	ldr	r3, [pc, #540]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	4983      	ldr	r1, [pc, #524]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	497b      	ldr	r1, [pc, #492]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b06:	4b76      	ldr	r3, [pc, #472]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b14:	4972      	ldr	r1, [pc, #456]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b28:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	496a      	ldr	r1, [pc, #424]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	4961      	ldr	r1, [pc, #388]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7a:	4959      	ldr	r1, [pc, #356]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8e:	4b54      	ldr	r3, [pc, #336]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9c:	4950      	ldr	r1, [pc, #320]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	4948      	ldr	r1, [pc, #288]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd2:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	493f      	ldr	r1, [pc, #252]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c02:	4937      	ldr	r1, [pc, #220]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c12:	d106      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c14:	4b32      	ldr	r3, [pc, #200]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a31      	ldr	r2, [pc, #196]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	e011      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f8c8 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c52:	4b23      	ldr	r3, [pc, #140]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	491f      	ldr	r1, [pc, #124]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c7c:	60d3      	str	r3, [r2, #12]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f899 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbe:	4908      	ldr	r1, [pc, #32]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd0:	4b03      	ldr	r3, [pc, #12]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a02      	ldr	r2, [pc, #8]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cda:	60d3      	str	r3, [r2, #12]
 8003cdc:	e014      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f867 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d14:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d22:	4928      	ldr	r1, [pc, #160]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f844 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
 8003d4e:	e011      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f925 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d80:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d8e:	490d      	ldr	r1, [pc, #52]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da2:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db2:	4904      	ldr	r1, [pc, #16]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd6:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de2:	4b72      	ldr	r3, [pc, #456]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
       ||
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfa:	4b6c      	ldr	r3, [pc, #432]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d047      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e044      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d018      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x86>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d825      	bhi.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x62>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d009      	beq.n	8003e3c <RCCEx_PLLSAI1_Config+0x74>
 8003e28:	e020      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2a:	4b60      	ldr	r3, [pc, #384]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e01a      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e013      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4e:	4b57      	ldr	r3, [pc, #348]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	4b54      	ldr	r3, [pc, #336]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6a:	e006      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	430b      	orrs	r3, r1
 8003e98:	4944      	ldr	r1, [pc, #272]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17d      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea4:	4b41      	ldr	r3, [pc, #260]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a40      	ldr	r2, [pc, #256]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fa76 	bl	80023a0 <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fe fa72 	bl	80023a0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d160      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee4:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	0211      	lsls	r1, r2, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	0912      	lsrs	r2, r2, #4
 8003efc:	0452      	lsls	r2, r2, #17
 8003efe:	430a      	orrs	r2, r1
 8003f00:	492a      	ldr	r1, [pc, #168]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
 8003f06:	e027      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d112      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0e:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	0211      	lsls	r1, r2, #8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6912      	ldr	r2, [r2, #16]
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0552      	lsls	r2, r2, #21
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	491f      	ldr	r1, [pc, #124]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
 8003f32:	e011      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6952      	ldr	r2, [r2, #20]
 8003f4a:	0852      	lsrs	r2, r2, #1
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	0652      	lsls	r2, r2, #25
 8003f50:	430a      	orrs	r2, r1
 8003f52:	4916      	ldr	r1, [pc, #88]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe fa1c 	bl	80023a0 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f6a:	e009      	b.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6c:	f7fe fa18 	bl	80023a0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7e:	e005      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ef      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4904      	ldr	r1, [pc, #16]	@ (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000

08003fb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fca:	4b67      	ldr	r3, [pc, #412]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10d      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fe2:	4b61      	ldr	r3, [pc, #388]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d047      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e044      	b.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d018      	beq.n	8004036 <RCCEx_PLLSAI2_Config+0x86>
 8004004:	2b03      	cmp	r3, #3
 8004006:	d825      	bhi.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0x62>
 800400c:	2b02      	cmp	r3, #2
 800400e:	d009      	beq.n	8004024 <RCCEx_PLLSAI2_Config+0x74>
 8004010:	e020      	b.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004012:	4b55      	ldr	r3, [pc, #340]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e01a      	b.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004024:	4b50      	ldr	r3, [pc, #320]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e013      	b.n	800405e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004036:	4b4c      	ldr	r3, [pc, #304]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004042:	4b49      	ldr	r3, [pc, #292]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004052:	e006      	b.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e004      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004062:	bf00      	nop
    }

    if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800406a:	4b3f      	ldr	r3, [pc, #252]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	430b      	orrs	r3, r1
 8004080:	4939      	ldr	r1, [pc, #228]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d167      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800408c:	4b36      	ldr	r3, [pc, #216]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a35      	ldr	r2, [pc, #212]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe f982 	bl	80023a0 <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a0:	f7fe f97e 	bl	80023a0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ef      	bne.n	80040a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d14a      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040cc:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0912      	lsrs	r2, r2, #4
 80040e4:	0452      	lsls	r2, r2, #17
 80040e6:	430a      	orrs	r2, r1
 80040e8:	491f      	ldr	r1, [pc, #124]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	614b      	str	r3, [r1, #20]
 80040ee:	e011      	b.n	8004114 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	0211      	lsls	r1, r2, #8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6912      	ldr	r2, [r2, #16]
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	430a      	orrs	r2, r1
 800410e:	4916      	ldr	r1, [pc, #88]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004114:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a13      	ldr	r2, [pc, #76]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fe f93e 	bl	80023a0 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004128:	f7fe f93a 	bl	80023a0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
          break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800413c:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4904      	ldr	r1, [pc, #16]	@ (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	4313      	orrs	r3, r2
 800415a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e095      	b.n	80042aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800418e:	d009      	beq.n	80041a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
 8004196:	e005      	b.n	80041a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fcde 	bl	8001b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e4:	d902      	bls.n	80041ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e002      	b.n	80041f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041fa:	d007      	beq.n	800420c <HAL_SPI_Init+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004204:	d002      	beq.n	800420c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	ea42 0103 	orr.w	r1, r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 0204 	and.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004288:	ea42 0103 	orr.w	r1, r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c2:	f7fe f86d 	bl	80023a0 <HAL_GetTick>
 80042c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d001      	beq.n	80042dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	e15c      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_Transmit+0x36>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e154      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Transmit+0x48>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e14d      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800434c:	d10f      	bne.n	800436e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800435c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d007      	beq.n	800438c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004394:	d952      	bls.n	800443c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_Transmit+0xf2>
 800439e:	8b7b      	ldrh	r3, [r7, #26]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d145      	bne.n	8004430 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043c8:	e032      	b.n	8004430 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d112      	bne.n	80043fe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043fc:	e018      	b.n	8004430 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fe:	f7fd ffcf 	bl	80023a0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_Transmit+0x164>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_Transmit+0x16a>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0b2      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1c7      	bne.n	80043ca <HAL_SPI_Transmit+0x118>
 800443a:	e083      	b.n	8004544 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_Transmit+0x198>
 8004444:	8b7b      	ldrh	r3, [r7, #26]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d177      	bne.n	800453a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d912      	bls.n	800447a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b02      	subs	r3, #2
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004478:	e05f      	b.n	800453a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044a0:	e04b      	b.n	800453a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d12b      	bne.n	8004508 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d912      	bls.n	80044e0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b02      	subs	r3, #2
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044de:	e02c      	b.n	800453a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004506:	e018      	b.n	800453a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004508:	f7fd ff4a 	bl	80023a0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d803      	bhi.n	8004520 <HAL_SPI_Transmit+0x26e>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Transmit+0x274>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e02d      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ae      	bne.n	80044a2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fcf5 	bl	8004f38 <SPI_EndRxTxTransaction>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b088      	sub	sp, #32
 80045a2:	af02      	add	r7, sp, #8
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
 80045bc:	e123      	b.n	8004806 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c6:	d112      	bne.n	80045ee <HAL_SPI_Receive+0x50>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10e      	bne.n	80045ee <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f912 	bl	800480e <HAL_SPI_TransmitReceive>
 80045ea:	4603      	mov	r3, r0
 80045ec:	e10b      	b.n	8004806 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ee:	f7fd fed7 	bl	80023a0 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Receive+0x62>
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e100      	b.n	8004806 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Receive+0x74>
 800460e:	2302      	movs	r3, #2
 8004610:	e0f9      	b.n	8004806 <HAL_SPI_Receive+0x268>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2204      	movs	r2, #4
 800461e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004664:	d908      	bls.n	8004678 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	e007      	b.n	8004688 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004690:	d10f      	bne.n	80046b2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d007      	beq.n	80046d0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046d8:	d875      	bhi.n	80047c6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046da:	e037      	b.n	800474c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d117      	bne.n	800471a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f103 020c 	add.w	r2, r3, #12
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	7812      	ldrb	r2, [r2, #0]
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004718:	e018      	b.n	800474c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471a:	f7fd fe41 	bl	80023a0 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d803      	bhi.n	8004732 <HAL_SPI_Receive+0x194>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d102      	bne.n	8004738 <HAL_SPI_Receive+0x19a>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e05c      	b.n	8004806 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1c1      	bne.n	80046dc <HAL_SPI_Receive+0x13e>
 8004758:	e03b      	b.n	80047d2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d115      	bne.n	8004794 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	b292      	uxth	r2, r2
 8004774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004792:	e018      	b.n	80047c6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004794:	f7fd fe04 	bl	80023a0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d803      	bhi.n	80047ac <HAL_SPI_Receive+0x20e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d102      	bne.n	80047b2 <HAL_SPI_Receive+0x214>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01f      	b.n	8004806 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1c3      	bne.n	800475a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb56 	bl	8004e88 <SPI_EndRxTransaction>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004804:	2300      	movs	r3, #0
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b08a      	sub	sp, #40	@ 0x28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800481c:	2301      	movs	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004820:	f7fd fdbe 	bl	80023a0 <HAL_GetTick>
 8004824:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800482c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004834:	887b      	ldrh	r3, [r7, #2]
 8004836:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004838:	887b      	ldrh	r3, [r7, #2]
 800483a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800483c:	7ffb      	ldrb	r3, [r7, #31]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d00c      	beq.n	800485c <HAL_SPI_TransmitReceive+0x4e>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004848:	d106      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x4a>
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d001      	beq.n	800485c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
 800485a:	e1f3      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_SPI_TransmitReceive+0x60>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_TransmitReceive+0x60>
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1e8      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x72>
 800487c:	2302      	movs	r3, #2
 800487e:	e1e1      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b04      	cmp	r3, #4
 8004892:	d003      	beq.n	800489c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2205      	movs	r2, #5
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	887a      	ldrh	r2, [r7, #2]
 80048b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	887a      	ldrh	r2, [r7, #2]
 80048c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048de:	d802      	bhi.n	80048e6 <HAL_SPI_TransmitReceive+0xd8>
 80048e0:	8abb      	ldrh	r3, [r7, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d908      	bls.n	80048f8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e007      	b.n	8004908 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b40      	cmp	r3, #64	@ 0x40
 8004914:	d007      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800492e:	f240 8083 	bls.w	8004a38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x132>
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d16f      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004964:	e05c      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d11b      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x19e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x19e>
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	2b01      	cmp	r3, #1
 8004982:	d113      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d11c      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x1e6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	b292      	uxth	r2, r2
 80049d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f0:	2301      	movs	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049f4:	f7fd fcd4 	bl	80023a0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d80d      	bhi.n	8004a20 <HAL_SPI_TransmitReceive+0x212>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d009      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e111      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d19d      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x158>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d197      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x158>
 8004a36:	e0e5      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x23a>
 8004a40:	8afb      	ldrh	r3, [r7, #22]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f040 80d1 	bne.w	8004bea <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d912      	bls.n	8004a78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b02      	subs	r3, #2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a76:	e0b8      	b.n	8004bea <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	7812      	ldrb	r2, [r2, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9e:	e0a4      	b.n	8004bea <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d134      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x30a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02f      	beq.n	8004b18 <HAL_SPI_TransmitReceive+0x30a>
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d12c      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d912      	bls.n	8004aee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	1c9a      	adds	r2, r3, #2
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b02      	subs	r3, #2
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aec:	e012      	b.n	8004b14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d148      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x3aa>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d042      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d923      	bls.n	8004b86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d81f      	bhi.n	8004bb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	e016      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f103 020c 	add.w	r2, r3, #12
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bb8:	f7fd fbf2 	bl	80023a0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d803      	bhi.n	8004bd0 <HAL_SPI_TransmitReceive+0x3c2>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x3c8>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e02c      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af55 	bne.w	8004aa0 <HAL_SPI_TransmitReceive+0x292>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f47f af4e 	bne.w	8004aa0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f995 	bl	8004f38 <SPI_EndRxTxTransaction>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e00e      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3728      	adds	r7, #40	@ 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c5c:	f7fd fba0 	bl	80023a0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	4413      	add	r3, r2
 8004c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c6c:	f7fd fb98 	bl	80023a0 <HAL_GetTick>
 8004c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c72:	4b39      	ldr	r3, [pc, #228]	@ (8004d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	015b      	lsls	r3, r3, #5
 8004c78:	0d1b      	lsrs	r3, r3, #20
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	e054      	b.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d050      	beq.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8c:	f7fd fb88 	bl	80023a0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d902      	bls.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d13d      	bne.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d111      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc4:	d004      	beq.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cce:	d107      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce8:	d10f      	bne.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e017      	b.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d19b      	bne.n	8004c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000008 	.word	0x20000008

08004d5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d6e:	f7fd fb17 	bl	80023a0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d7e:	f7fd fb0f 	bl	80023a0 <HAL_GetTick>
 8004d82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	00da      	lsls	r2, r3, #3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	0d1b      	lsrs	r3, r3, #20
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004da4:	e060      	b.n	8004e68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004dac:	d107      	bne.n	8004dbe <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d050      	beq.n	8004e68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dc6:	f7fd faeb 	bl	80023a0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d902      	bls.n	8004ddc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13d      	bne.n	8004e58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df4:	d111      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfe:	d004      	beq.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e08:	d107      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e22:	d10f      	bne.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e010      	b.n	8004e7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d196      	bne.n	8004da6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3728      	adds	r7, #40	@ 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000008 	.word	0x20000008

08004e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9c:	d111      	bne.n	8004ec2 <SPI_EndRxTransaction+0x3a>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea6:	d004      	beq.n	8004eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb0:	d107      	bne.n	8004ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff febd 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e023      	b.n	8004f30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef0:	d11d      	bne.n	8004f2e <SPI_EndRxTransaction+0xa6>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004efa:	d004      	beq.n	8004f06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f04:	d113      	bne.n	8004f2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff ff22 	bl	8004d5c <SPI_WaitFifoStateUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e000      	b.n	8004f30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff ff03 	bl	8004d5c <SPI_WaitFifoStateUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e027      	b.n	8004fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	2180      	movs	r1, #128	@ 0x80
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fe68 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e014      	b.n	8004fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fedc 	bl	8004d5c <SPI_WaitFifoStateUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e000      	b.n	8004fbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e049      	b.n	800506a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f841 	bl	8005072 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 f9e0 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e04f      	b.n	8005140 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a23      	ldr	r2, [pc, #140]	@ (800514c <HAL_TIM_Base_Start_IT+0xc4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d018      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <HAL_TIM_Base_Start_IT+0xc8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1e      	ldr	r2, [pc, #120]	@ (8005154 <HAL_TIM_Base_Start_IT+0xcc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <HAL_TIM_Base_Start_IT+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <HAL_TIM_Base_Start_IT+0xd4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0x76>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <HAL_TIM_Base_Start_IT+0xd8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d115      	bne.n	800512a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <HAL_TIM_Base_Start_IT+0xdc>)
 8005106:	4013      	ands	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d015      	beq.n	800513c <HAL_TIM_Base_Start_IT+0xb4>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005116:	d011      	beq.n	800513c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	e008      	b.n	800513c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e000      	b.n	800513e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	00010007 	.word	0x00010007

08005168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8e9 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8db 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8ec 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0204 	mvn.w	r2, #4
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8c3 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8b5 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8c6 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f89d 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f88f 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8a0 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	d020      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2208      	movs	r2, #8
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f877 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f869 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f87a 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0201 	mvn.w	r2, #1
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc fb52 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f913 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f90b 	bl	800553c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f834 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0220 	mvn.w	r2, #32
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8d3 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a43      	ldr	r2, [pc, #268]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a42      	ldr	r2, [pc, #264]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a41      	ldr	r2, [pc, #260]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a40      	ldr	r2, [pc, #256]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01f      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a32      	ldr	r2, [pc, #200]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a31      	ldr	r2, [pc, #196]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a30      	ldr	r2, [pc, #192]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2e      	ldr	r2, [pc, #184]	@ (8005508 <TIM_Base_SetConfig+0x140>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2d      	ldr	r2, [pc, #180]	@ (800550c <TIM_Base_SetConfig+0x144>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2c      	ldr	r2, [pc, #176]	@ (8005510 <TIM_Base_SetConfig+0x148>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00f      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <TIM_Base_SetConfig+0x140>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a16      	ldr	r2, [pc, #88]	@ (800550c <TIM_Base_SetConfig+0x144>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <TIM_Base_SetConfig+0x148>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d105      	bne.n	80054e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]
  }
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e040      	b.n	80055e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fb66 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	@ 0x24
 800557c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fedc 	bl	8006354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fc21 	bl	8005de4 <UART_SetConfig>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e01b      	b.n	80055e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 ff5b 	bl	8006498 <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005600:	2b20      	cmp	r3, #32
 8005602:	d177      	bne.n	80056f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x24>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e070      	b.n	80056f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2221      	movs	r2, #33	@ 0x21
 8005620:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc febd 	bl	80023a0 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x68>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e02f      	b.n	80056be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	2180      	movs	r1, #128	@ 0x80
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 ffbd 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e03b      	b.n	80056f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	b292      	uxth	r2, r2
 8005692:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e007      	b.n	80056ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1c9      	bne.n	800565e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2140      	movs	r1, #64	@ 0x40
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 ff87 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e005      	b.n	80056f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005714:	2b20      	cmp	r3, #32
 8005716:	d137      	bne.n	8005788 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Receive_IT+0x24>
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e030      	b.n	800578a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a18      	ldr	r2, [pc, #96]	@ (8005794 <HAL_UART_Receive_IT+0x94>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01f      	beq.n	8005778 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	61bb      	str	r3, [r7, #24]
   return(result);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	461a      	mov	r2, r3
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 ffa0 	bl	80066c4 <UART_Start_Receive_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	e000      	b.n	800578a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	@ 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40008000 	.word	0x40008000

08005798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b0ba      	sub	sp, #232	@ 0xe8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057c6:	4013      	ands	r3, r2
 80057c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d115      	bne.n	8005800 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00f      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 82ca 	beq.w	8005d8a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
      }
      return;
 80057fe:	e2c4      	b.n	8005d8a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8117 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800581a:	4b85      	ldr	r3, [pc, #532]	@ (8005a30 <HAL_UART_IRQHandler+0x298>)
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 810a 	beq.w	8005a38 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2201      	movs	r2, #1
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2202      	movs	r2, #2
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587a:	f043 0204 	orr.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2204      	movs	r2, #4
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2208      	movs	r2, #8
 80058de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8230 	beq.w	8005d8e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b40      	cmp	r3, #64	@ 0x40
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 ff68 	bl	8006850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598a:	2b40      	cmp	r3, #64	@ 0x40
 800598c:	d141      	bne.n	8005a12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1d9      	bne.n	800598e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <HAL_UART_IRQHandler+0x29c>)
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fe34 	bl	800265c <HAL_DMA_Abort_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e00f      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9d4 	bl	8005db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	e00b      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9d0 	bl	8005db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	e007      	b.n	8005a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9cc 	bl	8005db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a28:	e1b1      	b.n	8005d8e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2a:	bf00      	nop
    return;
 8005a2c:	e1af      	b.n	8005d8e <HAL_UART_IRQHandler+0x5f6>
 8005a2e:	bf00      	nop
 8005a30:	04000120 	.word	0x04000120
 8005a34:	08006919 	.word	0x08006919

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 816a 	bne.w	8005d16 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8163 	beq.w	8005d16 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 815c 	beq.w	8005d16 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2210      	movs	r2, #16
 8005a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	f040 80d4 	bne.w	8005c1e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80ad 	beq.w	8005be6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f080 80a5 	bcs.w	8005be6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8086 	bne.w	8005bc4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ae6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1da      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e1      	bne.n	8005b02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ba8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e4      	bne.n	8005b84 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fc fd0e 	bl	80025e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8f4 	bl	8005dcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005be4:	e0d5      	b.n	8005d92 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	f040 80ce 	bne.w	8005d92 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	f040 80c5 	bne.w	8005d92 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f8d8 	bl	8005dcc <HAL_UARTEx_RxEventCallback>
      return;
 8005c1c:	e0b9      	b.n	8005d92 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80ab 	beq.w	8005d96 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a6 	beq.w	8005d96 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e4      	bne.n	8005c4a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ca4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e3      	bne.n	8005c80 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f023 0310 	bic.w	r3, r3, #16
 8005ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e4      	bne.n	8005ccc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f85c 	bl	8005dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d14:	e03f      	b.n	8005d96 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00e      	beq.n	8005d40 <HAL_UART_IRQHandler+0x5a8>
 8005d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 ffe9 	bl	8006d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d3e:	e02d      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01c      	beq.n	8005d9a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
    }
    return;
 8005d68:	e017      	b.n	8005d9a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <HAL_UART_IRQHandler+0x604>
 8005d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fdde 	bl	8006944 <UART_EndTransmit_IT>
    return;
 8005d88:	e008      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
      return;
 8005d8a:	bf00      	nop
 8005d8c:	e006      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
    return;
 8005d8e:	bf00      	nop
 8005d90:	e004      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
      return;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
      return;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_UART_IRQHandler+0x604>
    return;
 8005d9a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d9c:	37e8      	adds	r7, #232	@ 0xe8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop

08005da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b08a      	sub	sp, #40	@ 0x28
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4ba4      	ldr	r3, [pc, #656]	@ (80060a4 <UART_SetConfig+0x2c0>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a99      	ldr	r2, [pc, #612]	@ (80060a8 <UART_SetConfig+0x2c4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a90      	ldr	r2, [pc, #576]	@ (80060ac <UART_SetConfig+0x2c8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d126      	bne.n	8005ebc <UART_SetConfig+0xd8>
 8005e6e:	4b90      	ldr	r3, [pc, #576]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d81b      	bhi.n	8005eb4 <UART_SetConfig+0xd0>
 8005e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <UART_SetConfig+0xa0>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9a:	e116      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea2:	e112      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e10e      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e10a      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eba:	e106      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80060b4 <UART_SetConfig+0x2d0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d138      	bne.n	8005f38 <UART_SetConfig+0x154>
 8005ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	f003 030c 	and.w	r3, r3, #12
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d82d      	bhi.n	8005f30 <UART_SetConfig+0x14c>
 8005ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0xf8>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005f11 	.word	0x08005f11
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	08005f31 	.word	0x08005f31
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e0d8      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	e0d4      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f20:	2304      	movs	r3, #4
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f26:	e0d0      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f28:	2308      	movs	r3, #8
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2e:	e0cc      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f30:	2310      	movs	r3, #16
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f36:	e0c8      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d125      	bne.n	8005f8e <UART_SetConfig+0x1aa>
 8005f42:	4b5b      	ldr	r3, [pc, #364]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f4c:	2b30      	cmp	r3, #48	@ 0x30
 8005f4e:	d016      	beq.n	8005f7e <UART_SetConfig+0x19a>
 8005f50:	2b30      	cmp	r3, #48	@ 0x30
 8005f52:	d818      	bhi.n	8005f86 <UART_SetConfig+0x1a2>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d00a      	beq.n	8005f6e <UART_SetConfig+0x18a>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d814      	bhi.n	8005f86 <UART_SetConfig+0x1a2>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <UART_SetConfig+0x182>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d008      	beq.n	8005f76 <UART_SetConfig+0x192>
 8005f64:	e00f      	b.n	8005f86 <UART_SetConfig+0x1a2>
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6c:	e0ad      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f74:	e0a9      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f76:	2304      	movs	r3, #4
 8005f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f7c:	e0a5      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f84:	e0a1      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f86:	2310      	movs	r3, #16
 8005f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8c:	e09d      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a4a      	ldr	r2, [pc, #296]	@ (80060bc <UART_SetConfig+0x2d8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d125      	bne.n	8005fe4 <UART_SetConfig+0x200>
 8005f98:	4b45      	ldr	r3, [pc, #276]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fa4:	d016      	beq.n	8005fd4 <UART_SetConfig+0x1f0>
 8005fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fa8:	d818      	bhi.n	8005fdc <UART_SetConfig+0x1f8>
 8005faa:	2b80      	cmp	r3, #128	@ 0x80
 8005fac:	d00a      	beq.n	8005fc4 <UART_SetConfig+0x1e0>
 8005fae:	2b80      	cmp	r3, #128	@ 0x80
 8005fb0:	d814      	bhi.n	8005fdc <UART_SetConfig+0x1f8>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <UART_SetConfig+0x1d8>
 8005fb6:	2b40      	cmp	r3, #64	@ 0x40
 8005fb8:	d008      	beq.n	8005fcc <UART_SetConfig+0x1e8>
 8005fba:	e00f      	b.n	8005fdc <UART_SetConfig+0x1f8>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc2:	e082      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fca:	e07e      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd2:	e07a      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fda:	e076      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe2:	e072      	b.n	80060ca <UART_SetConfig+0x2e6>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <UART_SetConfig+0x2dc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d12a      	bne.n	8006044 <UART_SetConfig+0x260>
 8005fee:	4b30      	ldr	r3, [pc, #192]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ffc:	d01a      	beq.n	8006034 <UART_SetConfig+0x250>
 8005ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006002:	d81b      	bhi.n	800603c <UART_SetConfig+0x258>
 8006004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006008:	d00c      	beq.n	8006024 <UART_SetConfig+0x240>
 800600a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800600e:	d815      	bhi.n	800603c <UART_SetConfig+0x258>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <UART_SetConfig+0x238>
 8006014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006018:	d008      	beq.n	800602c <UART_SetConfig+0x248>
 800601a:	e00f      	b.n	800603c <UART_SetConfig+0x258>
 800601c:	2300      	movs	r3, #0
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006022:	e052      	b.n	80060ca <UART_SetConfig+0x2e6>
 8006024:	2302      	movs	r3, #2
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602a:	e04e      	b.n	80060ca <UART_SetConfig+0x2e6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006032:	e04a      	b.n	80060ca <UART_SetConfig+0x2e6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603a:	e046      	b.n	80060ca <UART_SetConfig+0x2e6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006042:	e042      	b.n	80060ca <UART_SetConfig+0x2e6>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <UART_SetConfig+0x2c4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d13a      	bne.n	80060c4 <UART_SetConfig+0x2e0>
 800604e:	4b18      	ldr	r3, [pc, #96]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800605c:	d01a      	beq.n	8006094 <UART_SetConfig+0x2b0>
 800605e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006062:	d81b      	bhi.n	800609c <UART_SetConfig+0x2b8>
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006068:	d00c      	beq.n	8006084 <UART_SetConfig+0x2a0>
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800606e:	d815      	bhi.n	800609c <UART_SetConfig+0x2b8>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <UART_SetConfig+0x298>
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006078:	d008      	beq.n	800608c <UART_SetConfig+0x2a8>
 800607a:	e00f      	b.n	800609c <UART_SetConfig+0x2b8>
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006082:	e022      	b.n	80060ca <UART_SetConfig+0x2e6>
 8006084:	2302      	movs	r3, #2
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800608a:	e01e      	b.n	80060ca <UART_SetConfig+0x2e6>
 800608c:	2304      	movs	r3, #4
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006092:	e01a      	b.n	80060ca <UART_SetConfig+0x2e6>
 8006094:	2308      	movs	r3, #8
 8006096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800609a:	e016      	b.n	80060ca <UART_SetConfig+0x2e6>
 800609c:	2310      	movs	r3, #16
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060a2:	e012      	b.n	80060ca <UART_SetConfig+0x2e6>
 80060a4:	efff69f3 	.word	0xefff69f3
 80060a8:	40008000 	.word	0x40008000
 80060ac:	40013800 	.word	0x40013800
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40004400 	.word	0x40004400
 80060b8:	40004800 	.word	0x40004800
 80060bc:	40004c00 	.word	0x40004c00
 80060c0:	40005000 	.word	0x40005000
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a9f      	ldr	r2, [pc, #636]	@ (800634c <UART_SetConfig+0x568>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d17a      	bne.n	80061ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d824      	bhi.n	8006126 <UART_SetConfig+0x342>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x300>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006127 	.word	0x08006127
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006127 	.word	0x08006127
 80060f4:	08006117 	.word	0x08006117
 80060f8:	08006127 	.word	0x08006127
 80060fc:	08006127 	.word	0x08006127
 8006100:	08006127 	.word	0x08006127
 8006104:	0800611f 	.word	0x0800611f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fd fab6 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800610c:	61f8      	str	r0, [r7, #28]
        break;
 800610e:	e010      	b.n	8006132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006110:	4b8f      	ldr	r3, [pc, #572]	@ (8006350 <UART_SetConfig+0x56c>)
 8006112:	61fb      	str	r3, [r7, #28]
        break;
 8006114:	e00d      	b.n	8006132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006116:	f7fd fa17 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 800611a:	61f8      	str	r0, [r7, #28]
        break;
 800611c:	e009      	b.n	8006132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006122:	61fb      	str	r3, [r7, #28]
        break;
 8006124:	e005      	b.n	8006132 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80fb 	beq.w	8006330 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	429a      	cmp	r2, r3
 8006148:	d305      	bcc.n	8006156 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	429a      	cmp	r2, r3
 8006154:	d903      	bls.n	800615e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800615c:	e0e8      	b.n	8006330 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2200      	movs	r2, #0
 8006162:	461c      	mov	r4, r3
 8006164:	4615      	mov	r5, r2
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	022b      	lsls	r3, r5, #8
 8006170:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006174:	0222      	lsls	r2, r4, #8
 8006176:	68f9      	ldr	r1, [r7, #12]
 8006178:	6849      	ldr	r1, [r1, #4]
 800617a:	0849      	lsrs	r1, r1, #1
 800617c:	2000      	movs	r0, #0
 800617e:	4688      	mov	r8, r1
 8006180:	4681      	mov	r9, r0
 8006182:	eb12 0a08 	adds.w	sl, r2, r8
 8006186:	eb43 0b09 	adc.w	fp, r3, r9
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	4650      	mov	r0, sl
 800619a:	4659      	mov	r1, fp
 800619c:	f7fa f880 	bl	80002a0 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4613      	mov	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ae:	d308      	bcc.n	80061c2 <UART_SetConfig+0x3de>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b6:	d204      	bcs.n	80061c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	e0b6      	b.n	8006330 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061c8:	e0b2      	b.n	8006330 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d2:	d15e      	bne.n	8006292 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d828      	bhi.n	800622e <UART_SetConfig+0x44a>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <UART_SetConfig+0x400>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	0800621f 	.word	0x0800621f
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fd fa36 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800620c:	61f8      	str	r0, [r7, #28]
        break;
 800620e:	e014      	b.n	800623a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fd fa48 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e010      	b.n	800623a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b4d      	ldr	r3, [pc, #308]	@ (8006350 <UART_SetConfig+0x56c>)
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e00d      	b.n	800623a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7fd f993 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8006222:	61f8      	str	r0, [r7, #28]
        break;
 8006224:	e009      	b.n	800623a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e005      	b.n	800623a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d077      	beq.n	8006330 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	005a      	lsls	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b0f      	cmp	r3, #15
 800625a:	d916      	bls.n	800628a <UART_SetConfig+0x4a6>
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006262:	d212      	bcs.n	800628a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f023 030f 	bic.w	r3, r3, #15
 800626c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	b29b      	uxth	r3, r3
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	b29a      	uxth	r2, r3
 800627a:	8afb      	ldrh	r3, [r7, #22]
 800627c:	4313      	orrs	r3, r2
 800627e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	8afa      	ldrh	r2, [r7, #22]
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	e052      	b.n	8006330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006290:	e04e      	b.n	8006330 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006292:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006296:	2b08      	cmp	r3, #8
 8006298:	d827      	bhi.n	80062ea <UART_SetConfig+0x506>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x4bc>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	080062eb 	.word	0x080062eb
 80062b0:	080062db 	.word	0x080062db
 80062b4:	080062eb 	.word	0x080062eb
 80062b8:	080062eb 	.word	0x080062eb
 80062bc:	080062eb 	.word	0x080062eb
 80062c0:	080062e3 	.word	0x080062e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7fd f9d8 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80062c8:	61f8      	str	r0, [r7, #28]
        break;
 80062ca:	e014      	b.n	80062f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fd f9ea 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 80062d0:	61f8      	str	r0, [r7, #28]
        break;
 80062d2:	e010      	b.n	80062f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006350 <UART_SetConfig+0x56c>)
 80062d6:	61fb      	str	r3, [r7, #28]
        break;
 80062d8:	e00d      	b.n	80062f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062da:	f7fd f935 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 80062de:	61f8      	str	r0, [r7, #28]
        break;
 80062e0:	e009      	b.n	80062f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062e6:	61fb      	str	r3, [r7, #28]
        break;
 80062e8:	e005      	b.n	80062f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062f4:	bf00      	nop
    }

    if (pclk != 0U)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d019      	beq.n	8006330 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	085a      	lsrs	r2, r3, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d909      	bls.n	800632a <UART_SetConfig+0x546>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800631c:	d205      	bcs.n	800632a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	e002      	b.n	8006330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800633c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006340:	4618      	mov	r0, r3
 8006342:	3728      	adds	r7, #40	@ 0x28
 8006344:	46bd      	mov	sp, r7
 8006346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800634a:	bf00      	nop
 800634c:	40008000 	.word	0x40008000
 8006350:	00f42400 	.word	0x00f42400

08006354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01a      	beq.n	800646a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006452:	d10a      	bne.n	800646a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b098      	sub	sp, #96	@ 0x60
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064a8:	f7fb ff7a 	bl	80023a0 <HAL_GetTick>
 80064ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d12e      	bne.n	800651a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f88c 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d021      	beq.n	800651a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e062      	b.n	80065e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d149      	bne.n	80065bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f856 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d03c      	beq.n	80065bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	623b      	str	r3, [r7, #32]
   return(result);
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006560:	633b      	str	r3, [r7, #48]	@ 0x30
 8006562:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60fb      	str	r3, [r7, #12]
   return(result);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006594:	61fa      	str	r2, [r7, #28]
 8006596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	617b      	str	r3, [r7, #20]
   return(result);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e011      	b.n	80065e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3758      	adds	r7, #88	@ 0x58
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f8:	e04f      	b.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d04b      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fb fecd 	bl	80023a0 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <UART_WaitOnFlagUntilTimeout+0x30>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e04e      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d037      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d034      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b40      	cmp	r3, #64	@ 0x40
 8006634:	d031      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b08      	cmp	r3, #8
 8006642:	d110      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2208      	movs	r2, #8
 800664a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f8ff 	bl	8006850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2208      	movs	r2, #8
 8006656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e029      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006674:	d111      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800667e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f8e5 	bl	8006850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e00f      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d0a0      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b097      	sub	sp, #92	@ 0x5c
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	88fa      	ldrh	r2, [r7, #6]
 80066e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f6:	d10e      	bne.n	8006716 <UART_Start_Receive_IT+0x52>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <UART_Start_Receive_IT+0x48>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800670a:	e02d      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	22ff      	movs	r2, #255	@ 0xff
 8006710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006714:	e028      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10d      	bne.n	800673a <UART_Start_Receive_IT+0x76>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <UART_Start_Receive_IT+0x6c>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800672e:	e01b      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	227f      	movs	r2, #127	@ 0x7f
 8006734:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006738:	e016      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006742:	d10d      	bne.n	8006760 <UART_Start_Receive_IT+0x9c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <UART_Start_Receive_IT+0x92>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	227f      	movs	r2, #127	@ 0x7f
 8006750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006754:	e008      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	223f      	movs	r2, #63	@ 0x3f
 800675a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800675e:	e003      	b.n	8006768 <UART_Start_Receive_IT+0xa4>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2222      	movs	r2, #34	@ 0x22
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	f043 0301 	orr.w	r3, r3, #1
 800678e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006798:	64ba      	str	r2, [r7, #72]	@ 0x48
 800679a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800679e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e5      	bne.n	8006778 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b4:	d107      	bne.n	80067c6 <UART_Start_Receive_IT+0x102>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4a21      	ldr	r2, [pc, #132]	@ (8006848 <UART_Start_Receive_IT+0x184>)
 80067c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80067c4:	e002      	b.n	80067cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a20      	ldr	r2, [pc, #128]	@ (800684c <UART_Start_Receive_IT+0x188>)
 80067ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d019      	beq.n	8006808 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80067e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e6      	bne.n	80067d4 <UART_Start_Receive_IT+0x110>
 8006806:	e018      	b.n	800683a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	613b      	str	r3, [r7, #16]
   return(result);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f043 0320 	orr.w	r3, r3, #32
 800681c:	653b      	str	r3, [r7, #80]	@ 0x50
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	69f9      	ldr	r1, [r7, #28]
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	61bb      	str	r3, [r7, #24]
   return(result);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	375c      	adds	r7, #92	@ 0x5c
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	08006b55 	.word	0x08006b55
 800684c:	08006999 	.word	0x08006999

08006850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b095      	sub	sp, #84	@ 0x54
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800686c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006876:	643b      	str	r3, [r7, #64]	@ 0x40
 8006878:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800687c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	61fb      	str	r3, [r7, #28]
   return(result);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d118      	bne.n	80068f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	647b      	str	r3, [r7, #68]	@ 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800690c:	bf00      	nop
 800690e:	3754      	adds	r7, #84	@ 0x54
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fa3e 	bl	8005db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	60bb      	str	r3, [r7, #8]
   return(result);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6979      	ldr	r1, [r7, #20]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	613b      	str	r3, [r7, #16]
   return(result);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e6      	bne.n	800694c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff fa0a 	bl	8005da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b09c      	sub	sp, #112	@ 0x70
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b0:	2b22      	cmp	r3, #34	@ 0x22
 80069b2:	f040 80be 	bne.w	8006b32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069c4:	b2d9      	uxtb	r1, r3
 80069c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d0:	400a      	ands	r2, r1
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 80a3 	bne.w	8006b46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e6      	bne.n	8006a00 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3308      	adds	r3, #8
 8006a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a34      	ldr	r2, [pc, #208]	@ (8006b50 <UART_RxISR_8BIT+0x1b8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01f      	beq.n	8006ac4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d018      	beq.n	8006ac4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e6      	bne.n	8006a92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d12e      	bne.n	8006b2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	617b      	str	r3, [r7, #20]
   return(result);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e6      	bne.n	8006ad2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d103      	bne.n	8006b1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2210      	movs	r2, #16
 8006b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff f952 	bl	8005dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b28:	e00d      	b.n	8006b46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fa fed0 	bl	80018d0 <HAL_UART_RxCpltCallback>
}
 8006b30:	e009      	b.n	8006b46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	8b1b      	ldrh	r3, [r3, #24]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0208 	orr.w	r2, r2, #8
 8006b42:	b292      	uxth	r2, r2
 8006b44:	831a      	strh	r2, [r3, #24]
}
 8006b46:	bf00      	nop
 8006b48:	3770      	adds	r7, #112	@ 0x70
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40008000 	.word	0x40008000

08006b54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b09c      	sub	sp, #112	@ 0x70
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b6c:	2b22      	cmp	r3, #34	@ 0x22
 8006b6e:	f040 80be 	bne.w	8006cee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	1c9a      	adds	r2, r3, #2
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 80a3 	bne.w	8006d02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bdc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006be0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a34      	ldr	r2, [pc, #208]	@ (8006d0c <UART_RxISR_16BIT+0x1b8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01f      	beq.n	8006c80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d018      	beq.n	8006c80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12e      	bne.n	8006ce6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	2b10      	cmp	r3, #16
 8006ccc:	d103      	bne.n	8006cd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff f874 	bl	8005dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce4:	e00d      	b.n	8006d02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa fdf2 	bl	80018d0 <HAL_UART_RxCpltCallback>
}
 8006cec:	e009      	b.n	8006d02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	8b1b      	ldrh	r3, [r3, #24]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	b292      	uxth	r2, r2
 8006d00:	831a      	strh	r2, [r3, #24]
}
 8006d02:	bf00      	nop
 8006d04:	3770      	adds	r7, #112	@ 0x70
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40008000 	.word	0x40008000

08006d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d32:	089b      	lsrs	r3, r3, #2
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80d9 	beq.w	8006ef2 <ethernetif_notify_conn_changed+0x1ce>
  {
#ifndef USE_DHCP
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006d40:	4b6f      	ldr	r3, [pc, #444]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	061a      	lsls	r2, r3, #24
 8006d46:	4b6e      	ldr	r3, [pc, #440]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d50:	789b      	ldrb	r3, [r3, #2]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4313      	orrs	r3, r2
 8006d56:	4a6a      	ldr	r2, [pc, #424]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d58:	78d2      	ldrb	r2, [r2, #3]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	061a      	lsls	r2, r3, #24
 8006d5e:	4b68      	ldr	r3, [pc, #416]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	0619      	lsls	r1, r3, #24
 8006d64:	4b66      	ldr	r3, [pc, #408]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	4319      	orrs	r1, r3
 8006d6c:	4b64      	ldr	r3, [pc, #400]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d6e:	789b      	ldrb	r3, [r3, #2]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	430b      	orrs	r3, r1
 8006d74:	4962      	ldr	r1, [pc, #392]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d76:	78c9      	ldrb	r1, [r1, #3]
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d80:	431a      	orrs	r2, r3
 8006d82:	4b5f      	ldr	r3, [pc, #380]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	0619      	lsls	r1, r3, #24
 8006d88:	4b5d      	ldr	r3, [pc, #372]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	4319      	orrs	r1, r3
 8006d90:	4b5b      	ldr	r3, [pc, #364]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	430b      	orrs	r3, r1
 8006d98:	4959      	ldr	r1, [pc, #356]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006d9a:	78c9      	ldrb	r1, [r1, #3]
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006da4:	431a      	orrs	r2, r3
 8006da6:	4b56      	ldr	r3, [pc, #344]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	0619      	lsls	r1, r3, #24
 8006dac:	4b54      	ldr	r3, [pc, #336]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	4319      	orrs	r1, r3
 8006db4:	4b52      	ldr	r3, [pc, #328]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006db6:	789b      	ldrb	r3, [r3, #2]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	4950      	ldr	r1, [pc, #320]	@ (8006f00 <ethernetif_notify_conn_changed+0x1dc>)
 8006dbe:	78c9      	ldrb	r1, [r1, #3]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	0e1b      	lsrs	r3, r3, #24
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8006f04 <ethernetif_notify_conn_changed+0x1e0>)
 8006dc8:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006dca:	4b4f      	ldr	r3, [pc, #316]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	061a      	lsls	r2, r3, #24
 8006dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	4313      	orrs	r3, r2
 8006de0:	4a49      	ldr	r2, [pc, #292]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006de2:	78d2      	ldrb	r2, [r2, #3]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	061a      	lsls	r2, r3, #24
 8006de8:	4b47      	ldr	r3, [pc, #284]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	0619      	lsls	r1, r3, #24
 8006dee:	4b46      	ldr	r3, [pc, #280]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	4319      	orrs	r1, r3
 8006df6:	4b44      	ldr	r3, [pc, #272]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006df8:	789b      	ldrb	r3, [r3, #2]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	4942      	ldr	r1, [pc, #264]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e00:	78c9      	ldrb	r1, [r1, #3]
 8006e02:	430b      	orrs	r3, r1
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	0619      	lsls	r1, r3, #24
 8006e12:	4b3d      	ldr	r3, [pc, #244]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	4319      	orrs	r1, r3
 8006e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e1c:	789b      	ldrb	r3, [r3, #2]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	430b      	orrs	r3, r1
 8006e22:	4939      	ldr	r1, [pc, #228]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e24:	78c9      	ldrb	r1, [r1, #3]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	0619      	lsls	r1, r3, #24
 8006e36:	4b34      	ldr	r3, [pc, #208]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	4319      	orrs	r1, r3
 8006e3e:	4b32      	ldr	r3, [pc, #200]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e40:	789b      	ldrb	r3, [r3, #2]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	430b      	orrs	r3, r1
 8006e46:	4930      	ldr	r1, [pc, #192]	@ (8006f08 <ethernetif_notify_conn_changed+0x1e4>)
 8006e48:	78c9      	ldrb	r1, [r1, #3]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	0e1b      	lsrs	r3, r3, #24
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	4a2e      	ldr	r2, [pc, #184]	@ (8006f0c <ethernetif_notify_conn_changed+0x1e8>)
 8006e52:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006e54:	4b2e      	ldr	r3, [pc, #184]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	061a      	lsls	r2, r3, #24
 8006e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	431a      	orrs	r2, r3
 8006e62:	4b2b      	ldr	r3, [pc, #172]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	4a29      	ldr	r2, [pc, #164]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e6c:	78d2      	ldrb	r2, [r2, #3]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	061a      	lsls	r2, r3, #24
 8006e72:	4b27      	ldr	r3, [pc, #156]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	0619      	lsls	r1, r3, #24
 8006e78:	4b25      	ldr	r3, [pc, #148]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	4319      	orrs	r1, r3
 8006e80:	4b23      	ldr	r3, [pc, #140]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	430b      	orrs	r3, r1
 8006e88:	4921      	ldr	r1, [pc, #132]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e8a:	78c9      	ldrb	r1, [r1, #3]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e94:	431a      	orrs	r2, r3
 8006e96:	4b1e      	ldr	r3, [pc, #120]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	0619      	lsls	r1, r3, #24
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	4319      	orrs	r1, r3
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006ea6:	789b      	ldrb	r3, [r3, #2]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	4918      	ldr	r1, [pc, #96]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006eae:	78c9      	ldrb	r1, [r1, #3]
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	4b15      	ldr	r3, [pc, #84]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	0619      	lsls	r1, r3, #24
 8006ec0:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	4319      	orrs	r1, r3
 8006ec8:	4b11      	ldr	r3, [pc, #68]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006eca:	789b      	ldrb	r3, [r3, #2]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	490f      	ldr	r1, [pc, #60]	@ (8006f10 <ethernetif_notify_conn_changed+0x1ec>)
 8006ed2:	78c9      	ldrb	r1, [r1, #3]
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	0e1b      	lsrs	r3, r3, #24
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	4a0e      	ldr	r2, [pc, #56]	@ (8006f14 <ethernetif_notify_conn_changed+0x1f0>)
 8006edc:	6013      	str	r3, [r2, #0]
#endif
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 8006ede:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <ethernetif_notify_conn_changed+0x1f0>)
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f0c <ethernetif_notify_conn_changed+0x1e8>)
 8006ee2:	4908      	ldr	r1, [pc, #32]	@ (8006f04 <ethernetif_notify_conn_changed+0x1e0>)
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f006 ffcf 	bl	800de88 <netif_set_addr>

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f007 f826 	bl	800df3c <netif_set_up>
    netif_set_down(netif);

    /* led off */
   // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  }
}
 8006ef0:	e002      	b.n	8006ef8 <ethernetif_notify_conn_changed+0x1d4>
    netif_set_down(netif);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f007 f88e 	bl	800e014 <netif_set_down>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20002974 	.word	0x20002974
 8006f04:	20002968 	.word	0x20002968
 8006f08:	20002978 	.word	0x20002978
 8006f0c:	2000296c 	.word	0x2000296c
 8006f10:	2000297c 	.word	0x2000297c
 8006f14:	20002970 	.word	0x20002970

08006f18 <Netif_Config>:

/* USER CODE END 2 */

/* find appropriate file for this on day */
void Netif_Config(void)
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	b08e      	sub	sp, #56	@ 0x38
 8006f1c:	af04      	add	r7, sp, #16
#ifdef USE_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8006f1e:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <Netif_Config+0xa4>)
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8006f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f26:	623b      	str	r3, [r7, #32]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8006f28:	4b25      	ldr	r3, [pc, #148]	@ (8006fc0 <Netif_Config+0xa8>)
 8006f2a:	61fb      	str	r3, [r7, #28]
#endif /* USE_DHCP */


  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006f2c:	f107 031c 	add.w	r3, r7, #28
 8006f30:	f107 0220 	add.w	r2, r7, #32
 8006f34:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006f38:	4822      	ldr	r0, [pc, #136]	@ (8006fc4 <Netif_Config+0xac>)
 8006f3a:	9002      	str	r0, [sp, #8]
 8006f3c:	4822      	ldr	r0, [pc, #136]	@ (8006fc8 <Netif_Config+0xb0>)
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2000      	movs	r0, #0
 8006f42:	9000      	str	r0, [sp, #0]
 8006f44:	4821      	ldr	r0, [pc, #132]	@ (8006fcc <Netif_Config+0xb4>)
 8006f46:	f006 fe2f 	bl	800dba8 <netif_add>

  /* create a binary semaphore used for informing ethernetif of frame reception */

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8006f4a:	4820      	ldr	r0, [pc, #128]	@ (8006fcc <Netif_Config+0xb4>)
 8006f4c:	f006 ffe6 	bl	800df1c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006f50:	4b1e      	ldr	r3, [pc, #120]	@ (8006fcc <Netif_Config+0xb4>)
 8006f52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <Netif_Config+0x52>
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8006f62:	481a      	ldr	r0, [pc, #104]	@ (8006fcc <Netif_Config+0xb4>)
 8006f64:	f006 ffea 	bl	800df3c <netif_set_up>
 8006f68:	e002      	b.n	8006f70 <Netif_Config+0x58>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006f6a:	4818      	ldr	r0, [pc, #96]	@ (8006fcc <Netif_Config+0xb4>)
 8006f6c:	f007 f852 	bl	800e014 <netif_set_down>
  }
  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006f70:	4917      	ldr	r1, [pc, #92]	@ (8006fd0 <Netif_Config+0xb8>)
 8006f72:	4816      	ldr	r0, [pc, #88]	@ (8006fcc <Netif_Config+0xb4>)
 8006f74:	f007 f8e8 	bl	800e148 <netif_set_link_callback>

  /* Create the Ethernet IRQ handler thread */
  vQueueAddToRegistry(xSemaphore, "osSemaphore"); // permet le debug via l'interface dedié
 8006f78:	4b16      	ldr	r3, [pc, #88]	@ (8006fd4 <Netif_Config+0xbc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4916      	ldr	r1, [pc, #88]	@ (8006fd8 <Netif_Config+0xc0>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fe0e 	bl	8008ba0 <vQueueAddToRegistry>
  irq_arg.netif = &gnetif;
 8006f84:	4b15      	ldr	r3, [pc, #84]	@ (8006fdc <Netif_Config+0xc4>)
 8006f86:	4a11      	ldr	r2, [pc, #68]	@ (8006fcc <Netif_Config+0xb4>)
 8006f88:	601a      	str	r2, [r3, #0]
  irq_arg.semaphore = xSemaphore;
 8006f8a:	4b12      	ldr	r3, [pc, #72]	@ (8006fd4 <Netif_Config+0xbc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <Netif_Config+0xc4>)
 8006f90:	6053      	str	r3, [r2, #4]

  osThreadDef(EthernetTsk, ethernetif_process_irq, osPriorityRealtime, 0, 1000/*configMINIMAL_STACK_SIZE *2*/);
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <Netif_Config+0xc8>)
 8006f94:	463c      	mov	r4, r7
 8006f96:	461d      	mov	r5, r3
 8006f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandleGlobal = osThreadCreate (osThread(EthernetTsk), &irq_arg);
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	490d      	ldr	r1, [pc, #52]	@ (8006fdc <Netif_Config+0xc4>)
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa35 	bl	8007418 <osThreadCreate>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe4 <Netif_Config+0xcc>)
 8006fb2:	6013      	str	r3, [r2, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	3728      	adds	r7, #40	@ 0x28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbc:	64a8fea9 	.word	0x64a8fea9
 8006fc0:	46a8fea9 	.word	0x46a8fea9
 8006fc4:	0800cc41 	.word	0x0800cc41
 8006fc8:	08007265 	.word	0x08007265
 8006fcc:	20002930 	.word	0x20002930
 8006fd0:	08007369 	.word	0x08007369
 8006fd4:	20002318 	.word	0x20002318
 8006fd8:	0801b700 	.word	0x0801b700
 8006fdc:	20002928 	.word	0x20002928
 8006fe0:	0801b718 	.word	0x0801b718
 8006fe4:	20002374 	.word	0x20002374

08006fe8 <ENC_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void ENC_MspInit(ENC_HandleTypeDef* encHandle)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff0:	4b12      	ldr	r3, [pc, #72]	@ (800703c <ENC_MspInit+0x54>)
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff4:	4a11      	ldr	r2, [pc, #68]	@ (800703c <ENC_MspInit+0x54>)
 8006ff6:	f043 0302 	orr.w	r3, r3, #2
 8006ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800703c <ENC_MspInit+0x54>)
 8006ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]

  /* ENC28J60_CS ----------------------> PB12 */
  /*Configure GPIO pins : PB12 */
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8007008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800700c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800700e:	2301      	movs	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8007016:	2301      	movs	r3, #1
 8007018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800701a:	f107 030c 	add.w	r3, r7, #12
 800701e:	4619      	mov	r1, r3
 8007020:	4807      	ldr	r0, [pc, #28]	@ (8007040 <ENC_MspInit+0x58>)
 8007022:	f7fb fb5d 	bl	80026e0 <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8007026:	2201      	movs	r2, #1
 8007028:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800702c:	4804      	ldr	r0, [pc, #16]	@ (8007040 <ENC_MspInit+0x58>)
 800702e:	f7fb fd01 	bl	8002a34 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
}
 8007032:	bf00      	nop
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40021000 	.word	0x40021000
 8007040:	48000400 	.word	0x48000400

08007044 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2206      	movs	r2, #6
 8007050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC address */
  netif->hwaddr[0] = 0x00;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] = 0x80;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2280      	movs	r2, #128	@ 0x80
 8007060:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] = 0xE1;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22e1      	movs	r2, #225	@ 0xe1
 8007068:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] = 0x00;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] = 0x00;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] = 0x00;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  EncHandle.Init.MACAddr = netif->hwaddr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	332a      	adds	r3, #42	@ 0x2a
 8007088:	4a18      	ldr	r2, [pc, #96]	@ (80070ec <low_level_init+0xa8>)
 800708a:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <low_level_init+0xa8>)
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007092:	4b16      	ldr	r3, [pc, #88]	@ (80070ec <low_level_init+0xa8>)
 8007094:	2200      	movs	r2, #0
 8007096:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits = EIE_LINKIE | EIE_PKTIE;
 8007098:	4b14      	ldr	r3, [pc, #80]	@ (80070ec <low_level_init+0xa8>)
 800709a:	2250      	movs	r2, #80	@ 0x50
 800709c:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MspInit(&EncHandle);
 800709e:	4813      	ldr	r0, [pc, #76]	@ (80070ec <low_level_init+0xa8>)
 80070a0:	f7ff ffa2 	bl	8006fe8 <ENC_MspInit>

  /* maximum transfer unit */
  netif->mtu = 1500;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80070aa:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070b2:	f043 030a 	orr.w	r3, r3, #10
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Start the EN28J60 module */
  if(enc_start(&EncHandle))
 80070be:	480b      	ldr	r0, [pc, #44]	@ (80070ec <low_level_init+0xa8>)
 80070c0:	f7f9 fb58 	bl	8000774 <enc_start>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <low_level_init+0x9e>
  {
    /* Set the MAC address */
    enc_set_MAC(&EncHandle);
 80070ca:	4808      	ldr	r0, [pc, #32]	@ (80070ec <low_level_init+0xa8>)
 80070cc:	f7f9 fc3e 	bl	800094c <enc_set_MAC>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070d6:	f043 0304 	orr.w	r3, r3, #4
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20002980 	.word	0x20002980

080070f0 <low_level_output>:

  return ERR_OK;
}
*/
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]

  if (EncHandle.transmitLength != 0) {
 80070fe:	4b23      	ldr	r3, [pc, #140]	@ (800718c <low_level_output+0x9c>)
 8007100:	8b1b      	ldrh	r3, [r3, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <low_level_output+0x24>
     while (PT_SCHEDULE(enc_transmit(&transmit_pt, &EncHandle))) {
         /* Wait for end of previous transmission */
     }
#else
     do {
         enc_transmit(&EncHandle);
 8007106:	4821      	ldr	r0, [pc, #132]	@ (800718c <low_level_output+0x9c>)
 8007108:	f7f9 fccc 	bl	8000aa4 <enc_transmit>
     } while (EncHandle.transmitLength != 0);
 800710c:	4b1f      	ldr	r3, [pc, #124]	@ (800718c <low_level_output+0x9c>)
 800710e:	8b1b      	ldrh	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f8      	bne.n	8007106 <low_level_output+0x16>
#endif
  }

  /* Prepare ENC28J60 Tx buffer */
  errval = enc_prepare_txbuffer(&EncHandle, p->tot_len);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	891b      	ldrh	r3, [r3, #8]
 8007118:	4619      	mov	r1, r3
 800711a:	481c      	ldr	r0, [pc, #112]	@ (800718c <low_level_output+0x9c>)
 800711c:	f7f9 fc53 	bl	80009c6 <enc_prepare_txbuffer>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 8007124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <low_level_output+0x42>
      return errval;
 800712c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007130:	e027      	b.n	8007182 <low_level_output+0x92>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	e010      	b.n	800715a <low_level_output+0x6a>
    enc_wrbuffer(q->payload, q->len);
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7f9 fc94 	bl	8000a70 <enc_wrbuffer>
    framelength += q->len;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	895b      	ldrh	r3, [r3, #10]
 800714c:	461a      	mov	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1eb      	bne.n	8007138 <low_level_output+0x48>
  }

  if (framelength != p->tot_len) {
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	891b      	ldrh	r3, [r3, #8]
 8007164:	461a      	mov	r2, r3
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4293      	cmp	r3, r2
 800716a:	d002      	beq.n	8007172 <low_level_output+0x82>
     return ERR_BUF;
 800716c:	f06f 0301 	mvn.w	r3, #1
 8007170:	e007      	b.n	8007182 <low_level_output+0x92>
  }

  EncHandle.transmitLength = p->tot_len;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	891a      	ldrh	r2, [r3, #8]
 8007176:	4b05      	ldr	r3, [pc, #20]	@ (800718c <low_level_output+0x9c>)
 8007178:	831a      	strh	r2, [r3, #24]

  /* If PROTOTHREADS are use, actual transmission is triggered in main loop */
#ifndef USE_PROTOTHREADS
    enc_transmit(&EncHandle);
 800717a:	4804      	ldr	r0, [pc, #16]	@ (800718c <low_level_output+0x9c>)
 800717c:	f7f9 fc92 	bl	8000aa4 <enc_transmit>
#endif

  return ERR_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20002980 	.word	0x20002980

08007190 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

  if(!enc_get_received_frame(&EncHandle))
 80071a0:	481e      	ldr	r0, [pc, #120]	@ (800721c <low_level_input+0x8c>)
 80071a2:	f7f9 fcd6 	bl	8000b52 <enc_get_received_frame>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f083 0301 	eor.w	r3, r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <low_level_input+0x26>
  {
    return NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e02e      	b.n	8007214 <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 80071b6:	4b19      	ldr	r3, [pc, #100]	@ (800721c <low_level_input+0x8c>)
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t*) EncHandle.RxFrameInfos.buffer;
 80071bc:	4b18      	ldr	r3, [pc, #96]	@ (8007220 <low_level_input+0x90>)
 80071be:	60fb      	str	r3, [r7, #12]

  if(len > 0)
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80071c6:	8a7b      	ldrh	r3, [r7, #18]
 80071c8:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80071cc:	4619      	mov	r1, r3
 80071ce:	2000      	movs	r0, #0
 80071d0:	f007 f82a 	bl	800e228 <pbuf_alloc>
 80071d4:	61f8      	str	r0, [r7, #28]
  }

  if(p != NULL)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01a      	beq.n	8007212 <low_level_input+0x82>
  {
    bufferoffset = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]

    for(q = p;q != NULL;q = q->next)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e012      	b.n	800720c <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy((uint8_t*) ((uint8_t*) q->payload), (uint8_t*) ((uint8_t*) buffer + bufferoffset), q->len);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	6858      	ldr	r0, [r3, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	18d1      	adds	r1, r2, r3
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	895b      	ldrh	r3, [r3, #10]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f013 f9f2 	bl	801a5de <memcpy>
      bufferoffset = bufferoffset + q->len;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	895b      	ldrh	r3, [r3, #10]
 80071fe:	461a      	mov	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
    for(q = p;q != NULL;q = q->next)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e9      	bne.n	80071e6 <low_level_input+0x56>
    }
  }

  return p;
 8007212:	69fb      	ldr	r3, [r7, #28]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20002980 	.word	0x20002980
 8007220:	200029ac 	.word	0x200029ac

08007224 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ffaf 	bl	8007190 <low_level_input>
 8007232:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if(p == NULL)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <ethernetif_input+0x38>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	4798      	blx	r3
 8007244:	4603      	mov	r3, r0
 8007246:	72fb      	strb	r3, [r7, #11]

  if(err != ERR_OK)
 8007248:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f007 facd 	bl	800e7f0 <pbuf_free>
    p = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e000      	b.n	800725e <ethernetif_input+0x3a>
    return;
 800725c:	bf00      	nop
  }
}
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <ethernetif_init+0x1c>
 8007272:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <ethernetif_init+0x48>)
 8007274:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007278:	490d      	ldr	r1, [pc, #52]	@ (80072b0 <ethernetif_init+0x4c>)
 800727a:	480e      	ldr	r0, [pc, #56]	@ (80072b4 <ethernetif_init+0x50>)
 800727c:	f012 ff4a 	bl	801a114 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2265      	movs	r2, #101	@ 0x65
 8007284:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	226e      	movs	r2, #110	@ 0x6e
 800728c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a09      	ldr	r2, [pc, #36]	@ (80072b8 <ethernetif_init+0x54>)
 8007294:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a08      	ldr	r2, [pc, #32]	@ (80072bc <ethernetif_init+0x58>)
 800729a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fed1 	bl	8007044 <low_level_init>

  return ERR_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	0801b734 	.word	0x0801b734
 80072b0:	0801b750 	.word	0x0801b750
 80072b4:	0801b760 	.word	0x0801b760
 80072b8:	08017c85 	.word	0x08017c85
 80072bc:	080070f1 	.word	0x080070f1

080072c0 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80072c4:	f7fb f86c 	bl	80023a0 <HAL_GetTick>
 80072c8:	4603      	mov	r3, r0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <ethernetif_process_irq_do>:
  * @brief  This function actually process pending IRQs.
  * @param  handler: Reference to the driver state structure
  * @retval None
  */
void ethernetif_process_irq_do(void const *argument)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60fb      	str	r3, [r7, #12]

    /* Handle ENC28J60 interrupt */
    enc_irq_handler(&EncHandle);
 80072dc:	4815      	ldr	r0, [pc, #84]	@ (8007334 <ethernetif_process_irq_do+0x64>)
 80072de:	f7f9 fcd8 	bl	8000c92 <enc_irq_handler>

    /* Check whether the link is up or down*/
    if ((EncHandle.interruptFlags & EIE_LINKIE) != 0) {
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <ethernetif_process_irq_do+0x64>)
 80072e4:	7c5b      	ldrb	r3, [r3, #17]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d010      	beq.n	8007310 <ethernetif_process_irq_do+0x40>
        if((EncHandle.LinkStatus & PHSTAT2_LSTAT)!= 0) {
 80072ee:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <ethernetif_process_irq_do+0x64>)
 80072f0:	8adb      	ldrh	r3, [r3, #22]
 80072f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <ethernetif_process_irq_do+0x36>
            netif_set_link_up(irq_arg->netif);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f006 feba 	bl	800e078 <netif_set_link_up>
 8007304:	e004      	b.n	8007310 <ethernetif_process_irq_do+0x40>
        } else {
            netif_set_link_down(irq_arg->netif);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4618      	mov	r0, r3
 800730c:	f006 feec 	bl	800e0e8 <netif_set_link_down>
        }
    }

    /* Check whether we have received a packet */
    if((EncHandle.interruptFlags & EIR_PKTIF) != 0) {
 8007310:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <ethernetif_process_irq_do+0x64>)
 8007312:	7c5b      	ldrb	r3, [r3, #17]
 8007314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <ethernetif_process_irq_do+0x56>
        ethernetif_input(irq_arg->netif);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff ff7f 	bl	8007224 <ethernetif_input>
    }

    /* Renable global interrupts */
    enc_enable_interrupts(EIE_INTIE);
 8007326:	2080      	movs	r0, #128	@ 0x80
 8007328:	f7f9 fca5 	bl	8000c76 <enc_enable_interrupts>
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20002980 	.word	0x20002980

08007338 <ethernetif_process_irq>:
  * @brief  This function triggers the interrupt service callback.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_process_irq(void const *argument)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	//if (xSemaphoreTake( xSemaphore, ( TickType_t )portMAX_DELAY ) == pdTRUE)
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f04f 31ff 	mov.w	r1, #4294967295
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f9ab 	bl	80076a8 <osSemaphoreWait>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f5      	bne.n	8007344 <ethernetif_process_irq+0xc>
	  {
    	/* Handle ENC28J60 interrupt */
    	tcpip_callback((tcpip_callback_fn) ethernetif_process_irq_do, (void *) argument);
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4802      	ldr	r0, [pc, #8]	@ (8007364 <ethernetif_process_irq+0x2c>)
 800735c:	f005 fc92 	bl	800cc84 <tcpip_callback>
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8007360:	e7f0      	b.n	8007344 <ethernetif_process_irq+0xc>
 8007362:	bf00      	nop
 8007364:	080072d1 	.word	0x080072d1

08007368 <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007376:	089b      	lsrs	r3, r3, #2
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <ethernetif_update_config+0x20>
  {
    /* Restart the EN28J60 module */
    low_level_init(netif);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff fe5e 	bl	8007044 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fccb 	bl	8006d24 <ethernetif_notify_conn_changed>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	4603      	mov	r3, r0
 800739e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073a8:	2b84      	cmp	r3, #132	@ 0x84
 80073aa:	d005      	beq.n	80073b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	3303      	adds	r3, #3
 80073b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073cc:	f3ef 8305 	mrs	r3, IPSR
 80073d0:	607b      	str	r3, [r7, #4]
  return(result);
 80073d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073ee:	f001 fe91 	bl	8009114 <vTaskStartScheduler>
  
  return osOK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80073fc:	f7ff ffe3 	bl	80073c6 <inHandlerMode>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007406:	f001 ffa3 	bl	8009350 <xTaskGetTickCountFromISR>
 800740a:	4603      	mov	r3, r0
 800740c:	e002      	b.n	8007414 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800740e:	f001 ff8f 	bl	8009330 <xTaskGetTickCount>
 8007412:	4603      	mov	r3, r0
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}

08007418 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b089      	sub	sp, #36	@ 0x24
 800741c:	af04      	add	r7, sp, #16
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d020      	beq.n	800746c <osThreadCreate+0x54>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d01c      	beq.n	800746c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685c      	ldr	r4, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691e      	ldr	r6, [r3, #16]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff ffa6 	bl	8007396 <makeFreeRtosPriority>
 800744a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007454:	9202      	str	r2, [sp, #8]
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9100      	str	r1, [sp, #0]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	4632      	mov	r2, r6
 800745e:	4629      	mov	r1, r5
 8007460:	4620      	mov	r0, r4
 8007462:	f001 fbf1 	bl	8008c48 <xTaskCreateStatic>
 8007466:	4603      	mov	r3, r0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e01c      	b.n	80074a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685c      	ldr	r4, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007478:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff88 	bl	8007396 <makeFreeRtosPriority>
 8007486:	4602      	mov	r2, r0
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	9200      	str	r2, [sp, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	4632      	mov	r2, r6
 8007494:	4629      	mov	r1, r5
 8007496:	4620      	mov	r0, r4
 8007498:	f001 fc36 	bl	8008d08 <xTaskCreate>
 800749c:	4603      	mov	r3, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e000      	b.n	80074a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b0 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fd65 	bl	8008f88 <vTaskDelete>
  return osOK;
 80074be:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <osDelay+0x16>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e000      	b.n	80074e0 <osDelay+0x18>
 80074de:	2301      	movs	r3, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fde1 	bl	80090a8 <vTaskDelay>
  
  return osOK;
 80074e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4619      	mov	r1, r3
 8007506:	2001      	movs	r0, #1
 8007508:	f000 fc93 	bl	8007e32 <xQueueCreateMutexStatic>
 800750c:	4603      	mov	r3, r0
 800750e:	e003      	b.n	8007518 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007510:	2001      	movs	r0, #1
 8007512:	f000 fc76 	bl	8007e02 <xQueueCreateMutex>
 8007516:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800752a:	2300      	movs	r3, #0
 800752c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <osMutexWait+0x18>
    return osErrorParameter;
 8007534:	2380      	movs	r3, #128	@ 0x80
 8007536:	e03a      	b.n	80075ae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d103      	bne.n	800754c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	e009      	b.n	8007560 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <osMutexWait+0x40>
      ticks = 1;
 800755c:	2301      	movs	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007560:	f7ff ff31 	bl	80073c6 <inHandlerMode>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d017      	beq.n	800759a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	461a      	mov	r2, r3
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f908 	bl	8008788 <xQueueReceiveFromISR>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d001      	beq.n	8007582 <osMutexWait+0x62>
      return osErrorOS;
 800757e:	23ff      	movs	r3, #255	@ 0xff
 8007580:	e015      	b.n	80075ae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d011      	beq.n	80075ac <osMutexWait+0x8c>
 8007588:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <osMutexWait+0x98>)
 800758a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	e008      	b.n	80075ac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 ffe3 	bl	8008568 <xQueueSemaphoreTake>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d001      	beq.n	80075ac <osMutexWait+0x8c>
    return osErrorOS;
 80075a8:	23ff      	movs	r3, #255	@ 0xff
 80075aa:	e000      	b.n	80075ae <osMutexWait+0x8e>
  }
  
  return osOK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80075cc:	f7ff fefb 	bl	80073c6 <inHandlerMode>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fe51 	bl	8008284 <xQueueGiveFromISR>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d001      	beq.n	80075ec <osMutexRelease+0x30>
      return osErrorOS;
 80075e8:	23ff      	movs	r3, #255	@ 0xff
 80075ea:	e017      	b.n	800761c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d013      	beq.n	800761a <osMutexRelease+0x5e>
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <osMutexRelease+0x68>)
 80075f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	e00a      	b.n	800761a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007604:	2300      	movs	r3, #0
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fc9a 	bl	8007f44 <xQueueGenericSend>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d001      	beq.n	800761a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007616:	23ff      	movs	r3, #255	@ 0xff
 8007618:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800761a:	68fb      	ldr	r3, [r7, #12]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10a      	bne.n	8007656 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2203      	movs	r2, #3
 8007646:	9200      	str	r2, [sp, #0]
 8007648:	2200      	movs	r2, #0
 800764a:	2100      	movs	r1, #0
 800764c:	2001      	movs	r0, #1
 800764e:	f000 fae7 	bl	8007c20 <xQueueGenericCreateStatic>
 8007652:	4603      	mov	r3, r0
 8007654:	e023      	b.n	800769e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8007656:	6838      	ldr	r0, [r7, #0]
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	f000 fc02 	bl	8007e68 <xQueueCreateCountingSemaphoreStatic>
 8007664:	4603      	mov	r3, r0
 8007666:	e01a      	b.n	800769e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d110      	bne.n	8007690 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800766e:	2203      	movs	r2, #3
 8007670:	2100      	movs	r1, #0
 8007672:	2001      	movs	r0, #1
 8007674:	f000 fb51 	bl	8007d1a <xQueueGenericCreate>
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <osSemaphoreCreate+0x64>
 8007680:	2300      	movs	r3, #0
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fc5c 	bl	8007f44 <xQueueGenericSend>
      return sema;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e006      	b.n	800769e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fc1f 	bl	8007eda <xQueueCreateCountingSemaphore>
 800769c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80076bc:	2380      	movs	r3, #128	@ 0x80
 80076be:	e03a      	b.n	8007736 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d103      	bne.n	80076d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e009      	b.n	80076e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d006      	beq.n	80076e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80076e8:	f7ff fe6d 	bl	80073c6 <inHandlerMode>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d017      	beq.n	8007722 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	461a      	mov	r2, r3
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f844 	bl	8008788 <xQueueReceiveFromISR>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d001      	beq.n	800770a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007706:	23ff      	movs	r3, #255	@ 0xff
 8007708:	e015      	b.n	8007736 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d011      	beq.n	8007734 <osSemaphoreWait+0x8c>
 8007710:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <osSemaphoreWait+0x98>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	e008      	b.n	8007734 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 ff1f 	bl	8008568 <xQueueSemaphoreTake>
 800772a:	4603      	mov	r3, r0
 800772c:	2b01      	cmp	r3, #1
 800772e:	d001      	beq.n	8007734 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007730:	23ff      	movs	r3, #255	@ 0xff
 8007732:	e000      	b.n	8007736 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007754:	f7ff fe37 	bl	80073c6 <inHandlerMode>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d016      	beq.n	800778c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fd8d 	bl	8008284 <xQueueGiveFromISR>
 800776a:	4603      	mov	r3, r0
 800776c:	2b01      	cmp	r3, #1
 800776e:	d001      	beq.n	8007774 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007770:	23ff      	movs	r3, #255	@ 0xff
 8007772:	e017      	b.n	80077a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d013      	beq.n	80077a2 <osSemaphoreRelease+0x5e>
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <osSemaphoreRelease+0x68>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	e00a      	b.n	80077a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800778c:	2300      	movs	r3, #0
 800778e:	2200      	movs	r2, #0
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbd6 	bl	8007f44 <xQueueGenericSend>
 8007798:	4603      	mov	r3, r0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d001      	beq.n	80077a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800779e:	23ff      	movs	r3, #255	@ 0xff
 80077a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80077b8:	f7ff fe05 	bl	80073c6 <inHandlerMode>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80077c2:	2382      	movs	r3, #130	@ 0x82
 80077c4:	e003      	b.n	80077ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f89e 	bl	8008908 <vQueueDelete>

  return osOK; 
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80077d6:	b590      	push	{r4, r7, lr}
 80077d8:	b085      	sub	sp, #20
 80077da:	af02      	add	r7, sp, #8
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d011      	beq.n	800780c <osMessageCreate+0x36>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6859      	ldr	r1, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2400      	movs	r4, #0
 8007802:	9400      	str	r4, [sp, #0]
 8007804:	f000 fa0c 	bl	8007c20 <xQueueGenericCreateStatic>
 8007808:	4603      	mov	r3, r0
 800780a:	e008      	b.n	800781e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	4619      	mov	r1, r3
 8007818:	f000 fa7f 	bl	8007d1a <xQueueGenericCreate>
 800781c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bd90      	pop	{r4, r7, pc}
	...

08007828 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <osMessagePut+0x1e>
    ticks = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007846:	f7ff fdbe 	bl	80073c6 <inHandlerMode>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d018      	beq.n	8007882 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007850:	f107 0210 	add.w	r2, r7, #16
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	2300      	movs	r3, #0
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fc74 	bl	8008148 <xQueueGenericSendFromISR>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d001      	beq.n	800786a <osMessagePut+0x42>
      return osErrorOS;
 8007866:	23ff      	movs	r3, #255	@ 0xff
 8007868:	e018      	b.n	800789c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d014      	beq.n	800789a <osMessagePut+0x72>
 8007870:	4b0c      	ldr	r3, [pc, #48]	@ (80078a4 <osMessagePut+0x7c>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	e00b      	b.n	800789a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007882:	f107 0108 	add.w	r1, r7, #8
 8007886:	2300      	movs	r3, #0
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fb5a 	bl	8007f44 <xQueueGenericSend>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d001      	beq.n	800789a <osMessagePut+0x72>
      return osErrorOS;
 8007896:	23ff      	movs	r3, #255	@ 0xff
 8007898:	e000      	b.n	800789c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b08b      	sub	sp, #44	@ 0x2c
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	617b      	str	r3, [r7, #20]
    return event;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	461c      	mov	r4, r3
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078d6:	e054      	b.n	8007982 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80078d8:	2300      	movs	r3, #0
 80078da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d103      	bne.n	80078f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ee:	e009      	b.n	8007904 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <osMessageGet+0x5c>
      ticks = 1;
 8007900:	2301      	movs	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007904:	f7ff fd5f 	bl	80073c6 <inHandlerMode>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01c      	beq.n	8007948 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800790e:	f107 0220 	add.w	r2, r7, #32
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	3304      	adds	r3, #4
 8007918:	4619      	mov	r1, r3
 800791a:	68b8      	ldr	r0, [r7, #8]
 800791c:	f000 ff34 	bl	8008788 <xQueueReceiveFromISR>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d102      	bne.n	800792c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007926:	2310      	movs	r3, #16
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e001      	b.n	8007930 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01d      	beq.n	8007972 <osMessageGet+0xca>
 8007936:	4b15      	ldr	r3, [pc, #84]	@ (800798c <osMessageGet+0xe4>)
 8007938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	e014      	b.n	8007972 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	3304      	adds	r3, #4
 800794e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007950:	4619      	mov	r1, r3
 8007952:	68b8      	ldr	r0, [r7, #8]
 8007954:	f000 fd26 	bl	80083a4 <xQueueReceive>
 8007958:	4603      	mov	r3, r0
 800795a:	2b01      	cmp	r3, #1
 800795c:	d102      	bne.n	8007964 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800795e:	2310      	movs	r3, #16
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e006      	b.n	8007972 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <osMessageGet+0xc6>
 800796a:	2300      	movs	r3, #0
 800796c:	e000      	b.n	8007970 <osMessageGet+0xc8>
 800796e:	2340      	movs	r3, #64	@ 0x40
 8007970:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	461c      	mov	r4, r3
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800797e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	372c      	adds	r7, #44	@ 0x2c
 8007986:	46bd      	mov	sp, r7
 8007988:	bd90      	pop	{r4, r7, pc}
 800798a:	bf00      	nop
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007998:	f7ff fd15 	bl	80073c6 <inHandlerMode>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 ff91 	bl	80088ca <uxQueueMessagesWaitingFromISR>
 80079a8:	4603      	mov	r3, r0
 80079aa:	e003      	b.n	80079b4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 ff6d 	bl	800888c <uxQueueMessagesWaiting>
 80079b2:	4603      	mov	r3, r0
  }
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80079c4:	f7ff fcff 	bl	80073c6 <inHandlerMode>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <osMessageDelete+0x16>
    return osErrorISR;
 80079ce:	2382      	movs	r3, #130	@ 0x82
 80079d0:	e003      	b.n	80079da <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 ff98 	bl	8008908 <vQueueDelete>

  return osOK; 
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f103 0208 	add.w	r2, r3, #8
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295
 80079fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f103 0208 	add.w	r2, r3, #8
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f103 0208 	add.w	r2, r3, #8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d103      	bne.n	8007aa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e00c      	b.n	8007abe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	e002      	b.n	8007ab2 <vListInsert+0x2e>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d2f6      	bcs.n	8007aac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6892      	ldr	r2, [r2, #8]
 8007b0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6852      	ldr	r2, [r2, #4]
 8007b16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d103      	bne.n	8007b2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	1e5a      	subs	r2, r3, #1
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b78:	f002 fa76 	bl	800a068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	68f9      	ldr	r1, [r7, #12]
 8007b86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	22ff      	movs	r2, #255	@ 0xff
 8007bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	22ff      	movs	r2, #255	@ 0xff
 8007bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d114      	bne.n	8007bf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01a      	beq.n	8007c0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fd2c 	bl	8009638 <xTaskRemoveFromEventList>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d012      	beq.n	8007c0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007be6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <xQueueGenericReset+0xd0>)
 8007be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	e009      	b.n	8007c0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff fef0 	bl	80079e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff feeb 	bl	80079e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c0c:	f002 fa5e 	bl	800a0cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c10:	2301      	movs	r3, #1
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08e      	sub	sp, #56	@ 0x38
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10b      	bne.n	8007c4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	e7fd      	b.n	8007c48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <xQueueGenericCreateStatic+0x56>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <xQueueGenericCreateStatic+0x5a>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericCreateStatic+0x5c>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <xQueueGenericCreateStatic+0x84>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <xQueueGenericCreateStatic+0x88>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <xQueueGenericCreateStatic+0x8a>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61fb      	str	r3, [r7, #28]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cc6:	2348      	movs	r3, #72	@ 0x48
 8007cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b48      	cmp	r3, #72	@ 0x48
 8007cce:	d00b      	beq.n	8007ce8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	61bb      	str	r3, [r7, #24]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ce8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	4613      	mov	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f840 	bl	8007d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3730      	adds	r7, #48	@ 0x30
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b08a      	sub	sp, #40	@ 0x28
 8007d1e:	af02      	add	r7, sp, #8
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	4613      	mov	r3, r2
 8007d26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	613b      	str	r3, [r7, #16]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3348      	adds	r3, #72	@ 0x48
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 faa9 	bl	800a2ac <pvPortMalloc>
 8007d5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d011      	beq.n	8007d86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	3348      	adds	r3, #72	@ 0x48
 8007d6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d74:	79fa      	ldrb	r2, [r7, #7]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f805 	bl	8007d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d86:	69bb      	ldr	r3, [r7, #24]
	}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e002      	b.n	8007db2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	69b8      	ldr	r0, [r7, #24]
 8007dc2:	f7ff fec3 	bl	8007b4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00e      	beq.n	8007dfa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007dee:	2300      	movs	r3, #0
 8007df0:	2200      	movs	r2, #0
 8007df2:	2100      	movs	r1, #0
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8a5 	bl	8007f44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6939      	ldr	r1, [r7, #16]
 8007e1a:	6978      	ldr	r0, [r7, #20]
 8007e1c:	f7ff ff7d 	bl	8007d1a <xQueueGenericCreate>
 8007e20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ffd3 	bl	8007dce <prvInitialiseMutex>

		return xNewQueue;
 8007e28:	68fb      	ldr	r3, [r7, #12]
	}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b088      	sub	sp, #32
 8007e36:	af02      	add	r7, sp, #8
 8007e38:	4603      	mov	r3, r0
 8007e3a:	6039      	str	r1, [r7, #0]
 8007e3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	6939      	ldr	r1, [r7, #16]
 8007e50:	6978      	ldr	r0, [r7, #20]
 8007e52:	f7ff fee5 	bl	8007c20 <xQueueGenericCreateStatic>
 8007e56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff ffb8 	bl	8007dce <prvInitialiseMutex>

		return xNewQueue;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	@ 0x28
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	61bb      	str	r3, [r7, #24]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d90b      	bls.n	8007eb2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	617b      	str	r3, [r7, #20]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff feaf 	bl	8007c20 <xQueueGenericCreateStatic>
 8007ec2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
	}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10b      	bne.n	8007f02 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	613b      	str	r3, [r7, #16]
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	e7fd      	b.n	8007efe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d90b      	bls.n	8007f22 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60fb      	str	r3, [r7, #12]
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	e7fd      	b.n	8007f1e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f22:	2202      	movs	r2, #2
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fef7 	bl	8007d1a <xQueueGenericCreate>
 8007f2c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f3a:	697b      	ldr	r3, [r7, #20]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08e      	sub	sp, #56	@ 0x38
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f52:	2300      	movs	r3, #0
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <xQueueGenericSend+0x34>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <xQueueGenericSend+0x42>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueGenericSend+0x46>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xQueueGenericSend+0x48>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <xQueueGenericSend+0x64>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d103      	bne.n	8007fb6 <xQueueGenericSend+0x72>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <xQueueGenericSend+0x76>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <xQueueGenericSend+0x78>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <xQueueGenericSend+0x94>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	623b      	str	r3, [r7, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd8:	f001 fcee 	bl	80099b8 <xTaskGetSchedulerState>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <xQueueGenericSend+0xa4>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <xQueueGenericSend+0xa8>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <xQueueGenericSend+0xaa>
 8007fec:	2300      	movs	r3, #0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <xQueueGenericSend+0xc6>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	61fb      	str	r3, [r7, #28]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800800a:	f002 f82d 	bl	800a068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <xQueueGenericSend+0xdc>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d129      	bne.n	8008074 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008026:	f000 fcab 	bl	8008980 <prvCopyDataToQueue>
 800802a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d010      	beq.n	8008056 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	3324      	adds	r3, #36	@ 0x24
 8008038:	4618      	mov	r0, r3
 800803a:	f001 fafd 	bl	8009638 <xTaskRemoveFromEventList>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d013      	beq.n	800806c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008044:	4b3f      	ldr	r3, [pc, #252]	@ (8008144 <xQueueGenericSend+0x200>)
 8008046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	e00a      	b.n	800806c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d007      	beq.n	800806c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800805c:	4b39      	ldr	r3, [pc, #228]	@ (8008144 <xQueueGenericSend+0x200>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800806c:	f002 f82e 	bl	800a0cc <vPortExitCritical>
				return pdPASS;
 8008070:	2301      	movs	r3, #1
 8008072:	e063      	b.n	800813c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800807a:	f002 f827 	bl	800a0cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800807e:	2300      	movs	r3, #0
 8008080:	e05c      	b.n	800813c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008088:	f107 0314 	add.w	r3, r7, #20
 800808c:	4618      	mov	r0, r3
 800808e:	f001 fb37 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008092:	2301      	movs	r3, #1
 8008094:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008096:	f002 f819 	bl	800a0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800809a:	f001 f89d 	bl	80091d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800809e:	f001 ffe3 	bl	800a068 <vPortEnterCritical>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080a8:	b25b      	sxtb	r3, r3
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d103      	bne.n	80080b8 <xQueueGenericSend+0x174>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d103      	bne.n	80080ce <xQueueGenericSend+0x18a>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ce:	f001 fffd 	bl	800a0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080d2:	1d3a      	adds	r2, r7, #4
 80080d4:	f107 0314 	add.w	r3, r7, #20
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 fb26 	bl	800972c <xTaskCheckForTimeOut>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d124      	bne.n	8008130 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e8:	f000 fd42 	bl	8008b70 <prvIsQueueFull>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d018      	beq.n	8008124 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	3310      	adds	r3, #16
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	4611      	mov	r1, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fa76 	bl	80095ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008102:	f000 fccd 	bl	8008aa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008106:	f001 f875 	bl	80091f4 <xTaskResumeAll>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	f47f af7c 	bne.w	800800a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008112:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <xQueueGenericSend+0x200>)
 8008114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	e772      	b.n	800800a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008126:	f000 fcbb 	bl	8008aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800812a:	f001 f863 	bl	80091f4 <xTaskResumeAll>
 800812e:	e76c      	b.n	800800a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008132:	f000 fcb5 	bl	8008aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008136:	f001 f85d 	bl	80091f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800813a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800813c:	4618      	mov	r0, r3
 800813e:	3738      	adds	r7, #56	@ 0x38
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b090      	sub	sp, #64	@ 0x40
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <xQueueGenericSendFromISR+0x3e>
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <xQueueGenericSendFromISR+0x42>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <xQueueGenericSendFromISR+0x44>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d103      	bne.n	80081b6 <xQueueGenericSendFromISR+0x6e>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <xQueueGenericSendFromISR+0x72>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericSendFromISR+0x74>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10b      	bne.n	80081d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	623b      	str	r3, [r7, #32]
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081d8:	f002 f826 	bl	800a228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081dc:	f3ef 8211 	mrs	r2, BASEPRI
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61fa      	str	r2, [r7, #28]
 80081f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	429a      	cmp	r2, r3
 8008202:	d302      	bcc.n	800820a <xQueueGenericSendFromISR+0xc2>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d12f      	bne.n	800826a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008210:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008218:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008220:	f000 fbae 	bl	8008980 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008224:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d112      	bne.n	8008254 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008238:	3324      	adds	r3, #36	@ 0x24
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f9fc 	bl	8009638 <xTaskRemoveFromEventList>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e007      	b.n	8008264 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008258:	3301      	adds	r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	b25a      	sxtb	r2, r3
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008264:	2301      	movs	r3, #1
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008268:	e001      	b.n	800826e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800826e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008270:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008278:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800827c:	4618      	mov	r0, r3
 800827e:	3740      	adds	r7, #64	@ 0x40
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	@ 0x38
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	623b      	str	r3, [r7, #32]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61fb      	str	r3, [r7, #28]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <xQueueGiveFromISR+0x5c>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <xQueueGiveFromISR+0x60>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <xQueueGiveFromISR+0x62>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	61bb      	str	r3, [r7, #24]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008302:	f001 ff91 	bl	800a228 <vPortValidateInterruptPriority>
	__asm volatile
 8008306:	f3ef 8211 	mrs	r2, BASEPRI
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	617a      	str	r2, [r7, #20]
 800831c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800831e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800832e:	429a      	cmp	r2, r3
 8008330:	d22b      	bcs.n	800838a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008344:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d112      	bne.n	8008374 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800834e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008352:	2b00      	cmp	r3, #0
 8008354:	d016      	beq.n	8008384 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	3324      	adds	r3, #36	@ 0x24
 800835a:	4618      	mov	r0, r3
 800835c:	f001 f96c 	bl	8009638 <xTaskRemoveFromEventList>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00e      	beq.n	8008384 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2201      	movs	r2, #1
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e007      	b.n	8008384 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008378:	3301      	adds	r3, #1
 800837a:	b2db      	uxtb	r3, r3
 800837c:	b25a      	sxtb	r2, r3
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008384:	2301      	movs	r3, #1
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
 8008388:	e001      	b.n	800838e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800838a:	2300      	movs	r3, #0
 800838c:	637b      	str	r3, [r7, #52]	@ 0x34
 800838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008390:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f383 8811 	msr	BASEPRI, r3
}
 8008398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800839a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800839c:	4618      	mov	r0, r3
 800839e:	3738      	adds	r7, #56	@ 0x38
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08c      	sub	sp, #48	@ 0x30
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <xQueueReceive+0x32>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	623b      	str	r3, [r7, #32]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <xQueueReceive+0x40>
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <xQueueReceive+0x44>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e000      	b.n	80083ea <xQueueReceive+0x46>
 80083e8:	2300      	movs	r3, #0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10b      	bne.n	8008406 <xQueueReceive+0x62>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61fb      	str	r3, [r7, #28]
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	e7fd      	b.n	8008402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008406:	f001 fad7 	bl	80099b8 <xTaskGetSchedulerState>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <xQueueReceive+0x72>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <xQueueReceive+0x76>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <xQueueReceive+0x78>
 800841a:	2300      	movs	r3, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10b      	bne.n	8008438 <xQueueReceive+0x94>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	61bb      	str	r3, [r7, #24]
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008438:	f001 fe16 	bl	800a068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01f      	beq.n	8008488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800844c:	f000 fb02 	bl	8008a54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00f      	beq.n	8008480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	3310      	adds	r3, #16
 8008464:	4618      	mov	r0, r3
 8008466:	f001 f8e7 	bl	8009638 <xTaskRemoveFromEventList>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008470:	4b3c      	ldr	r3, [pc, #240]	@ (8008564 <xQueueReceive+0x1c0>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008480:	f001 fe24 	bl	800a0cc <vPortExitCritical>
				return pdPASS;
 8008484:	2301      	movs	r3, #1
 8008486:	e069      	b.n	800855c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800848e:	f001 fe1d 	bl	800a0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008492:	2300      	movs	r3, #0
 8008494:	e062      	b.n	800855c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 f92d 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084aa:	f001 fe0f 	bl	800a0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084ae:	f000 fe93 	bl	80091d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084b2:	f001 fdd9 	bl	800a068 <vPortEnterCritical>
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084bc:	b25b      	sxtb	r3, r3
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d103      	bne.n	80084cc <xQueueReceive+0x128>
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d8:	d103      	bne.n	80084e2 <xQueueReceive+0x13e>
 80084da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084e2:	f001 fdf3 	bl	800a0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084e6:	1d3a      	adds	r2, r7, #4
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 f91c 	bl	800972c <xTaskCheckForTimeOut>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d123      	bne.n	8008542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084fc:	f000 fb22 	bl	8008b44 <prvIsQueueEmpty>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d017      	beq.n	8008536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	3324      	adds	r3, #36	@ 0x24
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f001 f86c 	bl	80095ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008516:	f000 fac3 	bl	8008aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800851a:	f000 fe6b 	bl	80091f4 <xTaskResumeAll>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d189      	bne.n	8008438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008524:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <xQueueReceive+0x1c0>)
 8008526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	e780      	b.n	8008438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008538:	f000 fab2 	bl	8008aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800853c:	f000 fe5a 	bl	80091f4 <xTaskResumeAll>
 8008540:	e77a      	b.n	8008438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008544:	f000 faac 	bl	8008aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008548:	f000 fe54 	bl	80091f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800854c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800854e:	f000 faf9 	bl	8008b44 <prvIsQueueEmpty>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	f43f af6f 	beq.w	8008438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800855a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800855c:	4618      	mov	r0, r3
 800855e:	3730      	adds	r7, #48	@ 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08e      	sub	sp, #56	@ 0x38
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10b      	bne.n	800859c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	623b      	str	r3, [r7, #32]
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	61fb      	str	r3, [r7, #28]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085bc:	f001 f9fc 	bl	80099b8 <xTaskGetSchedulerState>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <xQueueSemaphoreTake+0x64>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <xQueueSemaphoreTake+0x68>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <xQueueSemaphoreTake+0x6a>
 80085d0:	2300      	movs	r3, #0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	61bb      	str	r3, [r7, #24]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085ee:	f001 fd3b 	bl	800a068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80085f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d024      	beq.n	8008648 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800860e:	f001 fb7f 	bl	8009d10 <pvTaskIncrementMutexHeldCount>
 8008612:	4602      	mov	r2, r0
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00f      	beq.n	8008640 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008622:	3310      	adds	r3, #16
 8008624:	4618      	mov	r0, r3
 8008626:	f001 f807 	bl	8009638 <xTaskRemoveFromEventList>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b54      	ldr	r3, [pc, #336]	@ (8008784 <xQueueSemaphoreTake+0x21c>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008640:	f001 fd44 	bl	800a0cc <vPortExitCritical>
				return pdPASS;
 8008644:	2301      	movs	r3, #1
 8008646:	e098      	b.n	800877a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d112      	bne.n	8008674 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	617b      	str	r3, [r7, #20]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800866c:	f001 fd2e 	bl	800a0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008670:	2300      	movs	r3, #0
 8008672:	e082      	b.n	800877a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800867a:	f107 030c 	add.w	r3, r7, #12
 800867e:	4618      	mov	r0, r3
 8008680:	f001 f83e 	bl	8009700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008688:	f001 fd20 	bl	800a0cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800868c:	f000 fda4 	bl	80091d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008690:	f001 fcea 	bl	800a068 <vPortEnterCritical>
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800869a:	b25b      	sxtb	r3, r3
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d103      	bne.n	80086aa <xQueueSemaphoreTake+0x142>
 80086a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b0:	b25b      	sxtb	r3, r3
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d103      	bne.n	80086c0 <xQueueSemaphoreTake+0x158>
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c0:	f001 fd04 	bl	800a0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086c4:	463a      	mov	r2, r7
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f82d 	bl	800972c <xTaskCheckForTimeOut>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d132      	bne.n	800873e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086da:	f000 fa33 	bl	8008b44 <prvIsQueueEmpty>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d026      	beq.n	8008732 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d109      	bne.n	8008700 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80086ec:	f001 fcbc 	bl	800a068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 f97d 	bl	80099f4 <xTaskPriorityInherit>
 80086fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80086fc:	f001 fce6 	bl	800a0cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	3324      	adds	r3, #36	@ 0x24
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f000 ff6f 	bl	80095ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800870e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008710:	f000 f9c6 	bl	8008aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008714:	f000 fd6e 	bl	80091f4 <xTaskResumeAll>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	f47f af67 	bne.w	80085ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008720:	4b18      	ldr	r3, [pc, #96]	@ (8008784 <xQueueSemaphoreTake+0x21c>)
 8008722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	e75d      	b.n	80085ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008734:	f000 f9b4 	bl	8008aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008738:	f000 fd5c 	bl	80091f4 <xTaskResumeAll>
 800873c:	e757      	b.n	80085ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800873e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008740:	f000 f9ae 	bl	8008aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008744:	f000 fd56 	bl	80091f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800874a:	f000 f9fb 	bl	8008b44 <prvIsQueueEmpty>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	f43f af4c 	beq.w	80085ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00d      	beq.n	8008778 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800875c:	f001 fc84 	bl	800a068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008762:	f000 f8f5 	bl	8008950 <prvGetDisinheritPriorityAfterTimeout>
 8008766:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fa3e 	bl	8009bf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008774:	f001 fcaa 	bl	800a0cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800877a:	4618      	mov	r0, r3
 800877c:	3738      	adds	r7, #56	@ 0x38
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	@ 0x38
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	623b      	str	r3, [r7, #32]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <xQueueReceiveFromISR+0x3c>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <xQueueReceiveFromISR+0x40>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <xQueueReceiveFromISR+0x42>
 80087c8:	2300      	movs	r3, #0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10b      	bne.n	80087e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	61fb      	str	r3, [r7, #28]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087e6:	f001 fd1f 	bl	800a228 <vPortValidateInterruptPriority>
	__asm volatile
 80087ea:	f3ef 8211 	mrs	r2, BASEPRI
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	61ba      	str	r2, [r7, #24]
 8008800:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008802:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02f      	beq.n	8008872 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008820:	f000 f918 	bl	8008a54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	1e5a      	subs	r2, r3, #1
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800882c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d112      	bne.n	800885c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d016      	beq.n	800886c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	3310      	adds	r3, #16
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fef8 	bl	8009638 <xTaskRemoveFromEventList>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00e      	beq.n	800886c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e007      	b.n	800886c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800885c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008860:	3301      	adds	r3, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	b25a      	sxtb	r2, r3
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800886c:	2301      	movs	r3, #1
 800886e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008870:	e001      	b.n	8008876 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008872:	2300      	movs	r3, #0
 8008874:	637b      	str	r3, [r7, #52]	@ 0x34
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	613b      	str	r3, [r7, #16]
	__asm volatile
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f383 8811 	msr	BASEPRI, r3
}
 8008880:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008884:	4618      	mov	r0, r3
 8008886:	3738      	adds	r7, #56	@ 0x38
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60bb      	str	r3, [r7, #8]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80088b2:	f001 fbd9 	bl	800a068 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ba:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80088bc:	f001 fc06 	bl	800a0cc <vPortExitCritical>

	return uxReturn;
 80088c0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10b      	bne.n	80088f4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60fb      	str	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	e7fd      	b.n	80088f0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80088fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80088fc:	4618      	mov	r0, r3
 80088fe:	371c      	adds	r7, #28
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <vQueueDelete+0x2a>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60bb      	str	r3, [r7, #8]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 f95e 	bl	8008bf4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f001 fd40 	bl	800a3c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d006      	beq.n	800896e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f1c3 0307 	rsb	r3, r3, #7
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e001      	b.n	8008972 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008972:	68fb      	ldr	r3, [r7, #12]
	}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008994:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10d      	bne.n	80089ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d14d      	bne.n	8008a42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 f898 	bl	8009ae0 <xTaskPriorityDisinherit>
 80089b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	e043      	b.n	8008a42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d119      	bne.n	80089f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6858      	ldr	r0, [r3, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c8:	461a      	mov	r2, r3
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	f011 fe07 	bl	801a5de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d8:	441a      	add	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d32b      	bcc.n	8008a42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e026      	b.n	8008a42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68d8      	ldr	r0, [r3, #12]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	461a      	mov	r2, r3
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	f011 fded 	bl	801a5de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	441a      	add	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d207      	bcs.n	8008a30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a28:	425b      	negs	r3, r3
 8008a2a:	441a      	add	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d105      	bne.n	8008a42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a4a:	697b      	ldr	r3, [r7, #20]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d018      	beq.n	8008a98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	441a      	add	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d303      	bcc.n	8008a88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68d9      	ldr	r1, [r3, #12]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a90:	461a      	mov	r2, r3
 8008a92:	6838      	ldr	r0, [r7, #0]
 8008a94:	f011 fda3 	bl	801a5de <memcpy>
	}
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008aa8:	f001 fade 	bl	800a068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ab2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ab4:	e011      	b.n	8008ada <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d012      	beq.n	8008ae4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3324      	adds	r3, #36	@ 0x24
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fdb8 	bl	8009638 <xTaskRemoveFromEventList>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ace:	f000 fe91 	bl	80097f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dce9      	bgt.n	8008ab6 <prvUnlockQueue+0x16>
 8008ae2:	e000      	b.n	8008ae6 <prvUnlockQueue+0x46>
					break;
 8008ae4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	22ff      	movs	r2, #255	@ 0xff
 8008aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008aee:	f001 faed 	bl	800a0cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008af2:	f001 fab9 	bl	800a068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008afc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008afe:	e011      	b.n	8008b24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d012      	beq.n	8008b2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3310      	adds	r3, #16
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fd93 	bl	8009638 <xTaskRemoveFromEventList>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b18:	f000 fe6c 	bl	80097f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dce9      	bgt.n	8008b00 <prvUnlockQueue+0x60>
 8008b2c:	e000      	b.n	8008b30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	22ff      	movs	r2, #255	@ 0xff
 8008b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b38:	f001 fac8 	bl	800a0cc <vPortExitCritical>
}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b4c:	f001 fa8c 	bl	800a068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e001      	b.n	8008b62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b62:	f001 fab3 	bl	800a0cc <vPortExitCritical>

	return xReturn;
 8008b66:	68fb      	ldr	r3, [r7, #12]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b78:	f001 fa76 	bl	800a068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d102      	bne.n	8008b8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	e001      	b.n	8008b92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b92:	f001 fa9b 	bl	800a0cc <vPortExitCritical>

	return xReturn;
 8008b96:	68fb      	ldr	r3, [r7, #12]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	e014      	b.n	8008bda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf0 <vQueueAddToRegistry+0x50>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bbc:	490c      	ldr	r1, [pc, #48]	@ (8008bf0 <vQueueAddToRegistry+0x50>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf0 <vQueueAddToRegistry+0x50>)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4413      	add	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bd2:	e006      	b.n	8008be2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	d9e7      	bls.n	8008bb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20002fb0 	.word	0x20002fb0

08008bf4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e016      	b.n	8008c30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c02:	4a10      	ldr	r2, [pc, #64]	@ (8008c44 <vQueueUnregisterQueue+0x50>)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4413      	add	r3, r2
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d10b      	bne.n	8008c2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c12:	4a0c      	ldr	r2, [pc, #48]	@ (8008c44 <vQueueUnregisterQueue+0x50>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2100      	movs	r1, #0
 8008c18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c1c:	4a09      	ldr	r2, [pc, #36]	@ (8008c44 <vQueueUnregisterQueue+0x50>)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4413      	add	r3, r2
 8008c24:	2200      	movs	r2, #0
 8008c26:	605a      	str	r2, [r3, #4]
				break;
 8008c28:	e006      	b.n	8008c38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b07      	cmp	r3, #7
 8008c34:	d9e5      	bls.n	8008c02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	20002fb0 	.word	0x20002fb0

08008c48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08e      	sub	sp, #56	@ 0x38
 8008c4c:	af04      	add	r7, sp, #16
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10b      	bne.n	8008c74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	623b      	str	r3, [r7, #32]
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	e7fd      	b.n	8008c70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61fb      	str	r3, [r7, #28]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c92:	2364      	movs	r3, #100	@ 0x64
 8008c94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b64      	cmp	r3, #100	@ 0x64
 8008c9a:	d00b      	beq.n	8008cb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	61bb      	str	r3, [r7, #24]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01e      	beq.n	8008cfa <xTaskCreateStatic+0xb2>
 8008cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01b      	beq.n	8008cfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f850 	bl	8008d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008cf4:	f000 f8de 	bl	8008eb4 <prvAddNewTaskToReadyList>
 8008cf8:	e001      	b.n	8008cfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cfe:	697b      	ldr	r3, [r7, #20]
	}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3728      	adds	r7, #40	@ 0x28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08c      	sub	sp, #48	@ 0x30
 8008d0c:	af04      	add	r7, sp, #16
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 fac5 	bl	800a2ac <pvPortMalloc>
 8008d22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00e      	beq.n	8008d48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d2a:	2064      	movs	r0, #100	@ 0x64
 8008d2c:	f001 fabe 	bl	800a2ac <pvPortMalloc>
 8008d30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d3e:	e005      	b.n	8008d4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f001 fb41 	bl	800a3c8 <vPortFree>
 8008d46:	e001      	b.n	8008d4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d017      	beq.n	8008d82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d5a:	88fa      	ldrh	r2, [r7, #6]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f80e 	bl	8008d92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d76:	69f8      	ldr	r0, [r7, #28]
 8008d78:	f000 f89c 	bl	8008eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	e002      	b.n	8008d88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295
 8008d86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d88:	69bb      	ldr	r3, [r7, #24]
	}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	461a      	mov	r2, r3
 8008daa:	21a5      	movs	r1, #165	@ 0xa5
 8008dac:	f011 fb7c 	bl	801a4a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f023 0307 	bic.w	r3, r3, #7
 8008dc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	617b      	str	r3, [r7, #20]
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01f      	beq.n	8008e32 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	e012      	b.n	8008e1e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	7819      	ldrb	r1, [r3, #0]
 8008e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	4413      	add	r3, r2
 8008e06:	3334      	adds	r3, #52	@ 0x34
 8008e08:	460a      	mov	r2, r1
 8008e0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d006      	beq.n	8008e26 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2b1f      	cmp	r3, #31
 8008e22:	d9e9      	bls.n	8008df8 <prvInitialiseNewTask+0x66>
 8008e24:	e000      	b.n	8008e28 <prvInitialiseNewTask+0x96>
			{
				break;
 8008e26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008e30:	e003      	b.n	8008e3a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	2b06      	cmp	r3, #6
 8008e3e:	d901      	bls.n	8008e44 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e40:	2306      	movs	r3, #6
 8008e42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	2200      	movs	r2, #0
 8008e54:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e58:	3304      	adds	r3, #4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fde1 	bl	8007a22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	3318      	adds	r3, #24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fddc 	bl	8007a22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e72:	f1c3 0207 	rsb	r2, r3, #7
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	2200      	movs	r2, #0
 8008e84:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	68f9      	ldr	r1, [r7, #12]
 8008e92:	69b8      	ldr	r0, [r7, #24]
 8008e94:	f000 ffb6 	bl	8009e04 <pxPortInitialiseStack>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ebc:	f001 f8d4 	bl	800a068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8008f6c <prvAddNewTaskToReadyList+0xb8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	4a29      	ldr	r2, [pc, #164]	@ (8008f6c <prvAddNewTaskToReadyList+0xb8>)
 8008ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eca:	4b29      	ldr	r3, [pc, #164]	@ (8008f70 <prvAddNewTaskToReadyList+0xbc>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ed2:	4a27      	ldr	r2, [pc, #156]	@ (8008f70 <prvAddNewTaskToReadyList+0xbc>)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ed8:	4b24      	ldr	r3, [pc, #144]	@ (8008f6c <prvAddNewTaskToReadyList+0xb8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d110      	bne.n	8008f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ee0:	f000 fcac 	bl	800983c <prvInitialiseTaskLists>
 8008ee4:	e00d      	b.n	8008f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ee6:	4b23      	ldr	r3, [pc, #140]	@ (8008f74 <prvAddNewTaskToReadyList+0xc0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eee:	4b20      	ldr	r3, [pc, #128]	@ (8008f70 <prvAddNewTaskToReadyList+0xbc>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d802      	bhi.n	8008f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008efc:	4a1c      	ldr	r2, [pc, #112]	@ (8008f70 <prvAddNewTaskToReadyList+0xbc>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f02:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <prvAddNewTaskToReadyList+0xc4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <prvAddNewTaskToReadyList+0xc4>)
 8008f0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	2201      	movs	r2, #1
 8008f12:	409a      	lsls	r2, r3
 8008f14:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <prvAddNewTaskToReadyList+0xc8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	4a18      	ldr	r2, [pc, #96]	@ (8008f7c <prvAddNewTaskToReadyList+0xc8>)
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4a15      	ldr	r2, [pc, #84]	@ (8008f80 <prvAddNewTaskToReadyList+0xcc>)
 8008f2c:	441a      	add	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3304      	adds	r3, #4
 8008f32:	4619      	mov	r1, r3
 8008f34:	4610      	mov	r0, r2
 8008f36:	f7fe fd81 	bl	8007a3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f3a:	f001 f8c7 	bl	800a0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <prvAddNewTaskToReadyList+0xc0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00e      	beq.n	8008f64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f46:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <prvAddNewTaskToReadyList+0xbc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d207      	bcs.n	8008f64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f54:	4b0b      	ldr	r3, [pc, #44]	@ (8008f84 <prvAddNewTaskToReadyList+0xd0>)
 8008f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	200030f0 	.word	0x200030f0
 8008f70:	20002ff0 	.word	0x20002ff0
 8008f74:	200030fc 	.word	0x200030fc
 8008f78:	2000310c 	.word	0x2000310c
 8008f7c:	200030f8 	.word	0x200030f8
 8008f80:	20002ff4 	.word	0x20002ff4
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f90:	f001 f86a 	bl	800a068 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <vTaskDelete+0x18>
 8008f9a:	4b39      	ldr	r3, [pc, #228]	@ (8009080 <vTaskDelete+0xf8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	e000      	b.n	8008fa2 <vTaskDelete+0x1a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fda4 	bl	8007af6 <uxListRemove>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d115      	bne.n	8008fe0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb8:	4932      	ldr	r1, [pc, #200]	@ (8009084 <vTaskDelete+0xfc>)
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <vTaskDelete+0x58>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	2201      	movs	r2, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	43da      	mvns	r2, r3
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009088 <vTaskDelete+0x100>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8009088 <vTaskDelete+0x100>)
 8008fde:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3318      	adds	r3, #24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fd82 	bl	8007af6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008ff2:	4b26      	ldr	r3, [pc, #152]	@ (800908c <vTaskDelete+0x104>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	4a24      	ldr	r2, [pc, #144]	@ (800908c <vTaskDelete+0x104>)
 8008ffa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008ffc:	4b20      	ldr	r3, [pc, #128]	@ (8009080 <vTaskDelete+0xf8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d10b      	bne.n	800901e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	4619      	mov	r1, r3
 800900c:	4820      	ldr	r0, [pc, #128]	@ (8009090 <vTaskDelete+0x108>)
 800900e:	f7fe fd15 	bl	8007a3c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009012:	4b20      	ldr	r3, [pc, #128]	@ (8009094 <vTaskDelete+0x10c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <vTaskDelete+0x10c>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	e009      	b.n	8009032 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800901e:	4b1e      	ldr	r3, [pc, #120]	@ (8009098 <vTaskDelete+0x110>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <vTaskDelete+0x110>)
 8009026:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fc75 	bl	8009918 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800902e:	f000 fca3 	bl	8009978 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009032:	f001 f84b 	bl	800a0cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009036:	4b19      	ldr	r3, [pc, #100]	@ (800909c <vTaskDelete+0x114>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01c      	beq.n	8009078 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800903e:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <vTaskDelete+0xf8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d117      	bne.n	8009078 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009048:	4b15      	ldr	r3, [pc, #84]	@ (80090a0 <vTaskDelete+0x118>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <vTaskDelete+0xe0>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60bb      	str	r3, [r7, #8]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8009068:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <vTaskDelete+0x11c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20002ff0 	.word	0x20002ff0
 8009084:	20002ff4 	.word	0x20002ff4
 8009088:	200030f8 	.word	0x200030f8
 800908c:	2000310c 	.word	0x2000310c
 8009090:	200030c4 	.word	0x200030c4
 8009094:	200030d8 	.word	0x200030d8
 8009098:	200030f0 	.word	0x200030f0
 800909c:	200030fc 	.word	0x200030fc
 80090a0:	20003118 	.word	0x20003118
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090ba:	4b14      	ldr	r3, [pc, #80]	@ (800910c <vTaskDelay+0x64>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <vTaskDelay+0x32>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60bb      	str	r3, [r7, #8]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090da:	f000 f87d 	bl	80091d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fe29 	bl	8009d38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090e6:	f000 f885 	bl	80091f4 <xTaskResumeAll>
 80090ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090f2:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <vTaskDelay+0x68>)
 80090f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20003118 	.word	0x20003118
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	@ 0x28
 8009118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009122:	463a      	mov	r2, r7
 8009124:	1d39      	adds	r1, r7, #4
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4618      	mov	r0, r3
 800912c:	f7f8 f89a 	bl	8001264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	9202      	str	r2, [sp, #8]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	2300      	movs	r3, #0
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2300      	movs	r3, #0
 8009140:	460a      	mov	r2, r1
 8009142:	491f      	ldr	r1, [pc, #124]	@ (80091c0 <vTaskStartScheduler+0xac>)
 8009144:	481f      	ldr	r0, [pc, #124]	@ (80091c4 <vTaskStartScheduler+0xb0>)
 8009146:	f7ff fd7f 	bl	8008c48 <xTaskCreateStatic>
 800914a:	4603      	mov	r3, r0
 800914c:	4a1e      	ldr	r2, [pc, #120]	@ (80091c8 <vTaskStartScheduler+0xb4>)
 800914e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <vTaskStartScheduler+0xb4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e001      	b.n	8009162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d116      	bne.n	8009196 <vTaskStartScheduler+0x82>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	613b      	str	r3, [r7, #16]
}
 800917a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800917c:	4b13      	ldr	r3, [pc, #76]	@ (80091cc <vTaskStartScheduler+0xb8>)
 800917e:	f04f 32ff 	mov.w	r2, #4294967295
 8009182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009184:	4b12      	ldr	r3, [pc, #72]	@ (80091d0 <vTaskStartScheduler+0xbc>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800918a:	4b12      	ldr	r3, [pc, #72]	@ (80091d4 <vTaskStartScheduler+0xc0>)
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009190:	f000 fec6 	bl	8009f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009194:	e00f      	b.n	80091b6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d10b      	bne.n	80091b6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <vTaskStartScheduler+0x9e>
}
 80091b6:	bf00      	nop
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	0801b788 	.word	0x0801b788
 80091c4:	0800980d 	.word	0x0800980d
 80091c8:	20003114 	.word	0x20003114
 80091cc:	20003110 	.word	0x20003110
 80091d0:	200030fc 	.word	0x200030fc
 80091d4:	200030f4 	.word	0x200030f4

080091d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091dc:	4b04      	ldr	r3, [pc, #16]	@ (80091f0 <vTaskSuspendAll+0x18>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a03      	ldr	r2, [pc, #12]	@ (80091f0 <vTaskSuspendAll+0x18>)
 80091e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091e6:	bf00      	nop
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	20003118 	.word	0x20003118

080091f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091fe:	2300      	movs	r3, #0
 8009200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009202:	4b42      	ldr	r3, [pc, #264]	@ (800930c <xTaskResumeAll+0x118>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10b      	bne.n	8009222 <xTaskResumeAll+0x2e>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	603b      	str	r3, [r7, #0]
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	e7fd      	b.n	800921e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009222:	f000 ff21 	bl	800a068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009226:	4b39      	ldr	r3, [pc, #228]	@ (800930c <xTaskResumeAll+0x118>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	4a37      	ldr	r2, [pc, #220]	@ (800930c <xTaskResumeAll+0x118>)
 800922e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009230:	4b36      	ldr	r3, [pc, #216]	@ (800930c <xTaskResumeAll+0x118>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d161      	bne.n	80092fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009238:	4b35      	ldr	r3, [pc, #212]	@ (8009310 <xTaskResumeAll+0x11c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d05d      	beq.n	80092fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009240:	e02e      	b.n	80092a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009242:	4b34      	ldr	r3, [pc, #208]	@ (8009314 <xTaskResumeAll+0x120>)
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3318      	adds	r3, #24
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fc51 	bl	8007af6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3304      	adds	r3, #4
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe fc4c 	bl	8007af6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	2201      	movs	r2, #1
 8009264:	409a      	lsls	r2, r3
 8009266:	4b2c      	ldr	r3, [pc, #176]	@ (8009318 <xTaskResumeAll+0x124>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4313      	orrs	r3, r2
 800926c:	4a2a      	ldr	r2, [pc, #168]	@ (8009318 <xTaskResumeAll+0x124>)
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4a27      	ldr	r2, [pc, #156]	@ (800931c <xTaskResumeAll+0x128>)
 800927e:	441a      	add	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3304      	adds	r3, #4
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7fe fbd8 	bl	8007a3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009290:	4b23      	ldr	r3, [pc, #140]	@ (8009320 <xTaskResumeAll+0x12c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	429a      	cmp	r2, r3
 8009298:	d302      	bcc.n	80092a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800929a:	4b22      	ldr	r3, [pc, #136]	@ (8009324 <xTaskResumeAll+0x130>)
 800929c:	2201      	movs	r2, #1
 800929e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a0:	4b1c      	ldr	r3, [pc, #112]	@ (8009314 <xTaskResumeAll+0x120>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1cc      	bne.n	8009242 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092ae:	f000 fb63 	bl	8009978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009328 <xTaskResumeAll+0x134>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d010      	beq.n	80092e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092be:	f000 f859 	bl	8009374 <xTaskIncrementTick>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092c8:	4b16      	ldr	r3, [pc, #88]	@ (8009324 <xTaskResumeAll+0x130>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1f1      	bne.n	80092be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092da:	4b13      	ldr	r3, [pc, #76]	@ (8009328 <xTaskResumeAll+0x134>)
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092e0:	4b10      	ldr	r3, [pc, #64]	@ (8009324 <xTaskResumeAll+0x130>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d009      	beq.n	80092fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092ec:	4b0f      	ldr	r3, [pc, #60]	@ (800932c <xTaskResumeAll+0x138>)
 80092ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092fc:	f000 fee6 	bl	800a0cc <vPortExitCritical>

	return xAlreadyYielded;
 8009300:	68bb      	ldr	r3, [r7, #8]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20003118 	.word	0x20003118
 8009310:	200030f0 	.word	0x200030f0
 8009314:	200030b0 	.word	0x200030b0
 8009318:	200030f8 	.word	0x200030f8
 800931c:	20002ff4 	.word	0x20002ff4
 8009320:	20002ff0 	.word	0x20002ff0
 8009324:	20003104 	.word	0x20003104
 8009328:	20003100 	.word	0x20003100
 800932c:	e000ed04 	.word	0xe000ed04

08009330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009336:	4b05      	ldr	r3, [pc, #20]	@ (800934c <xTaskGetTickCount+0x1c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800933c:	687b      	ldr	r3, [r7, #4]
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	200030f4 	.word	0x200030f4

08009350 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009356:	f000 ff67 	bl	800a228 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800935a:	2300      	movs	r3, #0
 800935c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <xTaskGetTickCountFromISR+0x20>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009364:	683b      	ldr	r3, [r7, #0]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200030f4 	.word	0x200030f4

08009374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937e:	4b4f      	ldr	r3, [pc, #316]	@ (80094bc <xTaskIncrementTick+0x148>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 808f 	bne.w	80094a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009388:	4b4d      	ldr	r3, [pc, #308]	@ (80094c0 <xTaskIncrementTick+0x14c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009390:	4a4b      	ldr	r2, [pc, #300]	@ (80094c0 <xTaskIncrementTick+0x14c>)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d121      	bne.n	80093e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800939c:	4b49      	ldr	r3, [pc, #292]	@ (80094c4 <xTaskIncrementTick+0x150>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <xTaskIncrementTick+0x4a>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	603b      	str	r3, [r7, #0]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <xTaskIncrementTick+0x46>
 80093be:	4b41      	ldr	r3, [pc, #260]	@ (80094c4 <xTaskIncrementTick+0x150>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	4b40      	ldr	r3, [pc, #256]	@ (80094c8 <xTaskIncrementTick+0x154>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a3e      	ldr	r2, [pc, #248]	@ (80094c4 <xTaskIncrementTick+0x150>)
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	4a3e      	ldr	r2, [pc, #248]	@ (80094c8 <xTaskIncrementTick+0x154>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	4b3e      	ldr	r3, [pc, #248]	@ (80094cc <xTaskIncrementTick+0x158>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	4a3c      	ldr	r2, [pc, #240]	@ (80094cc <xTaskIncrementTick+0x158>)
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	f000 facc 	bl	8009978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093e0:	4b3b      	ldr	r3, [pc, #236]	@ (80094d0 <xTaskIncrementTick+0x15c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d348      	bcc.n	800947c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093ea:	4b36      	ldr	r3, [pc, #216]	@ (80094c4 <xTaskIncrementTick+0x150>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d104      	bne.n	80093fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f4:	4b36      	ldr	r3, [pc, #216]	@ (80094d0 <xTaskIncrementTick+0x15c>)
 80093f6:	f04f 32ff 	mov.w	r2, #4294967295
 80093fa:	601a      	str	r2, [r3, #0]
					break;
 80093fc:	e03e      	b.n	800947c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fe:	4b31      	ldr	r3, [pc, #196]	@ (80094c4 <xTaskIncrementTick+0x150>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d203      	bcs.n	800941e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009416:	4a2e      	ldr	r2, [pc, #184]	@ (80094d0 <xTaskIncrementTick+0x15c>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800941c:	e02e      	b.n	800947c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3304      	adds	r3, #4
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fb67 	bl	8007af6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3318      	adds	r3, #24
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fb5e 	bl	8007af6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	2201      	movs	r2, #1
 8009440:	409a      	lsls	r2, r3
 8009442:	4b24      	ldr	r3, [pc, #144]	@ (80094d4 <xTaskIncrementTick+0x160>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4313      	orrs	r3, r2
 8009448:	4a22      	ldr	r2, [pc, #136]	@ (80094d4 <xTaskIncrementTick+0x160>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4a1f      	ldr	r2, [pc, #124]	@ (80094d8 <xTaskIncrementTick+0x164>)
 800945a:	441a      	add	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7fe faea 	bl	8007a3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4b1b      	ldr	r3, [pc, #108]	@ (80094dc <xTaskIncrementTick+0x168>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	429a      	cmp	r2, r3
 8009474:	d3b9      	bcc.n	80093ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800947a:	e7b6      	b.n	80093ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800947c:	4b17      	ldr	r3, [pc, #92]	@ (80094dc <xTaskIncrementTick+0x168>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009482:	4915      	ldr	r1, [pc, #84]	@ (80094d8 <xTaskIncrementTick+0x164>)
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d901      	bls.n	8009498 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009498:	4b11      	ldr	r3, [pc, #68]	@ (80094e0 <xTaskIncrementTick+0x16c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e004      	b.n	80094b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094a6:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <xTaskIncrementTick+0x170>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	4a0d      	ldr	r2, [pc, #52]	@ (80094e4 <xTaskIncrementTick+0x170>)
 80094ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094b0:	697b      	ldr	r3, [r7, #20]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20003118 	.word	0x20003118
 80094c0:	200030f4 	.word	0x200030f4
 80094c4:	200030a8 	.word	0x200030a8
 80094c8:	200030ac 	.word	0x200030ac
 80094cc:	20003108 	.word	0x20003108
 80094d0:	20003110 	.word	0x20003110
 80094d4:	200030f8 	.word	0x200030f8
 80094d8:	20002ff4 	.word	0x20002ff4
 80094dc:	20002ff0 	.word	0x20002ff0
 80094e0:	20003104 	.word	0x20003104
 80094e4:	20003100 	.word	0x20003100

080094e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ee:	4b3a      	ldr	r3, [pc, #232]	@ (80095d8 <vTaskSwitchContext+0xf0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094f6:	4b39      	ldr	r3, [pc, #228]	@ (80095dc <vTaskSwitchContext+0xf4>)
 80094f8:	2201      	movs	r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094fc:	e067      	b.n	80095ce <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80094fe:	4b37      	ldr	r3, [pc, #220]	@ (80095dc <vTaskSwitchContext+0xf4>)
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009504:	4b36      	ldr	r3, [pc, #216]	@ (80095e0 <vTaskSwitchContext+0xf8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	429a      	cmp	r2, r3
 800951a:	d111      	bne.n	8009540 <vTaskSwitchContext+0x58>
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	3304      	adds	r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d10b      	bne.n	8009540 <vTaskSwitchContext+0x58>
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	3308      	adds	r3, #8
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	429a      	cmp	r2, r3
 8009532:	d105      	bne.n	8009540 <vTaskSwitchContext+0x58>
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	330c      	adds	r3, #12
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	429a      	cmp	r2, r3
 800953e:	d008      	beq.n	8009552 <vTaskSwitchContext+0x6a>
 8009540:	4b27      	ldr	r3, [pc, #156]	@ (80095e0 <vTaskSwitchContext+0xf8>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b26      	ldr	r3, [pc, #152]	@ (80095e0 <vTaskSwitchContext+0xf8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3334      	adds	r3, #52	@ 0x34
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7f8 f99f 	bl	8001890 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009552:	4b24      	ldr	r3, [pc, #144]	@ (80095e4 <vTaskSwitchContext+0xfc>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	fab3 f383 	clz	r3, r3
 800955e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	f1c3 031f 	rsb	r3, r3, #31
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	491f      	ldr	r1, [pc, #124]	@ (80095e8 <vTaskSwitchContext+0x100>)
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <vTaskSwitchContext+0xac>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	607b      	str	r3, [r7, #4]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <vTaskSwitchContext+0xa8>
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4a12      	ldr	r2, [pc, #72]	@ (80095e8 <vTaskSwitchContext+0x100>)
 80095a0:	4413      	add	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3308      	adds	r3, #8
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d104      	bne.n	80095c4 <vTaskSwitchContext+0xdc>
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	4a05      	ldr	r2, [pc, #20]	@ (80095e0 <vTaskSwitchContext+0xf8>)
 80095cc:	6013      	str	r3, [r2, #0]
}
 80095ce:	bf00      	nop
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20003118 	.word	0x20003118
 80095dc:	20003104 	.word	0x20003104
 80095e0:	20002ff0 	.word	0x20002ff0
 80095e4:	200030f8 	.word	0x200030f8
 80095e8:	20002ff4 	.word	0x20002ff4

080095ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60fb      	str	r3, [r7, #12]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009614:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <vTaskPlaceOnEventList+0x48>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3318      	adds	r3, #24
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fe fa31 	bl	8007a84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009622:	2101      	movs	r1, #1
 8009624:	6838      	ldr	r0, [r7, #0]
 8009626:	f000 fb87 	bl	8009d38 <prvAddCurrentTaskToDelayedList>
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20002ff0 	.word	0x20002ff0

08009638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	60fb      	str	r3, [r7, #12]
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	e7fd      	b.n	8009662 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	3318      	adds	r3, #24
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fa43 	bl	8007af6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009670:	4b1d      	ldr	r3, [pc, #116]	@ (80096e8 <xTaskRemoveFromEventList+0xb0>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11c      	bne.n	80096b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3304      	adds	r3, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fa3a 	bl	8007af6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	2201      	movs	r2, #1
 8009688:	409a      	lsls	r2, r3
 800968a:	4b18      	ldr	r3, [pc, #96]	@ (80096ec <xTaskRemoveFromEventList+0xb4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4313      	orrs	r3, r2
 8009690:	4a16      	ldr	r2, [pc, #88]	@ (80096ec <xTaskRemoveFromEventList+0xb4>)
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4a13      	ldr	r2, [pc, #76]	@ (80096f0 <xTaskRemoveFromEventList+0xb8>)
 80096a2:	441a      	add	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe f9c6 	bl	8007a3c <vListInsertEnd>
 80096b0:	e005      	b.n	80096be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	3318      	adds	r3, #24
 80096b6:	4619      	mov	r1, r3
 80096b8:	480e      	ldr	r0, [pc, #56]	@ (80096f4 <xTaskRemoveFromEventList+0xbc>)
 80096ba:	f7fe f9bf 	bl	8007a3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c2:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <xTaskRemoveFromEventList+0xc0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d905      	bls.n	80096d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096d0:	4b0a      	ldr	r3, [pc, #40]	@ (80096fc <xTaskRemoveFromEventList+0xc4>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	e001      	b.n	80096dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096dc:	697b      	ldr	r3, [r7, #20]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20003118 	.word	0x20003118
 80096ec:	200030f8 	.word	0x200030f8
 80096f0:	20002ff4 	.word	0x20002ff4
 80096f4:	200030b0 	.word	0x200030b0
 80096f8:	20002ff0 	.word	0x20002ff0
 80096fc:	20003104 	.word	0x20003104

08009700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009708:	4b06      	ldr	r3, [pc, #24]	@ (8009724 <vTaskInternalSetTimeOutState+0x24>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009710:	4b05      	ldr	r3, [pc, #20]	@ (8009728 <vTaskInternalSetTimeOutState+0x28>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20003108 	.word	0x20003108
 8009728:	200030f4 	.word	0x200030f4

0800972c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10b      	bne.n	8009754 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	613b      	str	r3, [r7, #16]
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	e7fd      	b.n	8009750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10b      	bne.n	8009772 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	60fb      	str	r3, [r7, #12]
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	e7fd      	b.n	800976e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009772:	f000 fc79 	bl	800a068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009776:	4b1d      	ldr	r3, [pc, #116]	@ (80097ec <xTaskCheckForTimeOut+0xc0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d102      	bne.n	8009796 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	e023      	b.n	80097de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <xTaskCheckForTimeOut+0xc4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d007      	beq.n	80097b2 <xTaskCheckForTimeOut+0x86>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d302      	bcc.n	80097b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	61fb      	str	r3, [r7, #28]
 80097b0:	e015      	b.n	80097de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d20b      	bcs.n	80097d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff ff99 	bl	8009700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	e004      	b.n	80097de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097da:	2301      	movs	r3, #1
 80097dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097de:	f000 fc75 	bl	800a0cc <vPortExitCritical>

	return xReturn;
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200030f4 	.word	0x200030f4
 80097f0:	20003108 	.word	0x20003108

080097f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097f8:	4b03      	ldr	r3, [pc, #12]	@ (8009808 <vTaskMissedYield+0x14>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	20003104 	.word	0x20003104

0800980c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009814:	f000 f852 	bl	80098bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009818:	4b06      	ldr	r3, [pc, #24]	@ (8009834 <prvIdleTask+0x28>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d9f9      	bls.n	8009814 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009820:	4b05      	ldr	r3, [pc, #20]	@ (8009838 <prvIdleTask+0x2c>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009830:	e7f0      	b.n	8009814 <prvIdleTask+0x8>
 8009832:	bf00      	nop
 8009834:	20002ff4 	.word	0x20002ff4
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009842:	2300      	movs	r3, #0
 8009844:	607b      	str	r3, [r7, #4]
 8009846:	e00c      	b.n	8009862 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4a12      	ldr	r2, [pc, #72]	@ (800989c <prvInitialiseTaskLists+0x60>)
 8009854:	4413      	add	r3, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe f8c3 	bl	80079e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3301      	adds	r3, #1
 8009860:	607b      	str	r3, [r7, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b06      	cmp	r3, #6
 8009866:	d9ef      	bls.n	8009848 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009868:	480d      	ldr	r0, [pc, #52]	@ (80098a0 <prvInitialiseTaskLists+0x64>)
 800986a:	f7fe f8ba 	bl	80079e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800986e:	480d      	ldr	r0, [pc, #52]	@ (80098a4 <prvInitialiseTaskLists+0x68>)
 8009870:	f7fe f8b7 	bl	80079e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009874:	480c      	ldr	r0, [pc, #48]	@ (80098a8 <prvInitialiseTaskLists+0x6c>)
 8009876:	f7fe f8b4 	bl	80079e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800987a:	480c      	ldr	r0, [pc, #48]	@ (80098ac <prvInitialiseTaskLists+0x70>)
 800987c:	f7fe f8b1 	bl	80079e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009880:	480b      	ldr	r0, [pc, #44]	@ (80098b0 <prvInitialiseTaskLists+0x74>)
 8009882:	f7fe f8ae 	bl	80079e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009886:	4b0b      	ldr	r3, [pc, #44]	@ (80098b4 <prvInitialiseTaskLists+0x78>)
 8009888:	4a05      	ldr	r2, [pc, #20]	@ (80098a0 <prvInitialiseTaskLists+0x64>)
 800988a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800988c:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <prvInitialiseTaskLists+0x7c>)
 800988e:	4a05      	ldr	r2, [pc, #20]	@ (80098a4 <prvInitialiseTaskLists+0x68>)
 8009890:	601a      	str	r2, [r3, #0]
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20002ff4 	.word	0x20002ff4
 80098a0:	20003080 	.word	0x20003080
 80098a4:	20003094 	.word	0x20003094
 80098a8:	200030b0 	.word	0x200030b0
 80098ac:	200030c4 	.word	0x200030c4
 80098b0:	200030dc 	.word	0x200030dc
 80098b4:	200030a8 	.word	0x200030a8
 80098b8:	200030ac 	.word	0x200030ac

080098bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c2:	e019      	b.n	80098f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098c4:	f000 fbd0 	bl	800a068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c8:	4b10      	ldr	r3, [pc, #64]	@ (800990c <prvCheckTasksWaitingTermination+0x50>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe f90e 	bl	8007af6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <prvCheckTasksWaitingTermination+0x54>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3b01      	subs	r3, #1
 80098e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009910 <prvCheckTasksWaitingTermination+0x54>)
 80098e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ee:	f000 fbed 	bl	800a0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f810 	bl	8009918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098f8:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e1      	bne.n	80098c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009900:	bf00      	nop
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	200030c4 	.word	0x200030c4
 8009910:	200030f0 	.word	0x200030f0
 8009914:	200030d8 	.word	0x200030d8

08009918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009926:	2b00      	cmp	r3, #0
 8009928:	d108      	bne.n	800993c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fd4a 	bl	800a3c8 <vPortFree>
				vPortFree( pxTCB );
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd47 	bl	800a3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800993a:	e019      	b.n	8009970 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009942:	2b01      	cmp	r3, #1
 8009944:	d103      	bne.n	800994e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fd3e 	bl	800a3c8 <vPortFree>
	}
 800994c:	e010      	b.n	8009970 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009954:	2b02      	cmp	r3, #2
 8009956:	d00b      	beq.n	8009970 <prvDeleteTCB+0x58>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	60fb      	str	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	e7fd      	b.n	800996c <prvDeleteTCB+0x54>
	}
 8009970:	bf00      	nop
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800997e:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <prvResetNextTaskUnblockTime+0x38>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <prvResetNextTaskUnblockTime+0x3c>)
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009990:	e008      	b.n	80099a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009992:	4b07      	ldr	r3, [pc, #28]	@ (80099b0 <prvResetNextTaskUnblockTime+0x38>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a04      	ldr	r2, [pc, #16]	@ (80099b4 <prvResetNextTaskUnblockTime+0x3c>)
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	200030a8 	.word	0x200030a8
 80099b4:	20003110 	.word	0x20003110

080099b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099be:	4b0b      	ldr	r3, [pc, #44]	@ (80099ec <xTaskGetSchedulerState+0x34>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d102      	bne.n	80099cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099c6:	2301      	movs	r3, #1
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	e008      	b.n	80099de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099cc:	4b08      	ldr	r3, [pc, #32]	@ (80099f0 <xTaskGetSchedulerState+0x38>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099d4:	2302      	movs	r3, #2
 80099d6:	607b      	str	r3, [r7, #4]
 80099d8:	e001      	b.n	80099de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099da:	2300      	movs	r3, #0
 80099dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099de:	687b      	ldr	r3, [r7, #4]
	}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	200030fc 	.word	0x200030fc
 80099f0:	20003118 	.word	0x20003118

080099f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d05e      	beq.n	8009ac8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0e:	4b31      	ldr	r3, [pc, #196]	@ (8009ad4 <xTaskPriorityInherit+0xe0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d24e      	bcs.n	8009ab6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db06      	blt.n	8009a2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a20:	4b2c      	ldr	r3, [pc, #176]	@ (8009ad4 <xTaskPriorityInherit+0xe0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	f1c3 0207 	rsb	r2, r3, #7
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6959      	ldr	r1, [r3, #20]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4a26      	ldr	r2, [pc, #152]	@ (8009ad8 <xTaskPriorityInherit+0xe4>)
 8009a40:	4413      	add	r3, r2
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d12f      	bne.n	8009aa6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe f853 	bl	8007af6 <uxListRemove>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a60:	43da      	mvns	r2, r3
 8009a62:	4b1e      	ldr	r3, [pc, #120]	@ (8009adc <xTaskPriorityInherit+0xe8>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4013      	ands	r3, r2
 8009a68:	4a1c      	ldr	r2, [pc, #112]	@ (8009adc <xTaskPriorityInherit+0xe8>)
 8009a6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a6c:	4b19      	ldr	r3, [pc, #100]	@ (8009ad4 <xTaskPriorityInherit+0xe0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	4b17      	ldr	r3, [pc, #92]	@ (8009adc <xTaskPriorityInherit+0xe8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	4a15      	ldr	r2, [pc, #84]	@ (8009adc <xTaskPriorityInherit+0xe8>)
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4a10      	ldr	r2, [pc, #64]	@ (8009ad8 <xTaskPriorityInherit+0xe4>)
 8009a96:	441a      	add	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7fd ffcc 	bl	8007a3c <vListInsertEnd>
 8009aa4:	e004      	b.n	8009ab0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <xTaskPriorityInherit+0xe0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e008      	b.n	8009ac8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aba:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <xTaskPriorityInherit+0xe0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d201      	bcs.n	8009ac8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
	}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20002ff0 	.word	0x20002ff0
 8009ad8:	20002ff4 	.word	0x20002ff4
 8009adc:	200030f8 	.word	0x200030f8

08009ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d070      	beq.n	8009bd8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009af6:	4b3b      	ldr	r3, [pc, #236]	@ (8009be4 <xTaskPriorityDisinherit+0x104>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d00b      	beq.n	8009b18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60fb      	str	r3, [r7, #12]
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10b      	bne.n	8009b38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	60bb      	str	r3, [r7, #8]
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	e7fd      	b.n	8009b34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3c:	1e5a      	subs	r2, r3, #1
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d044      	beq.n	8009bd8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d140      	bne.n	8009bd8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd ffcb 	bl	8007af6 <uxListRemove>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d115      	bne.n	8009b92 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6a:	491f      	ldr	r1, [pc, #124]	@ (8009be8 <xTaskPriorityDisinherit+0x108>)
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xTaskPriorityDisinherit+0xb2>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b80:	2201      	movs	r2, #1
 8009b82:	fa02 f303 	lsl.w	r3, r2, r3
 8009b86:	43da      	mvns	r2, r3
 8009b88:	4b18      	ldr	r3, [pc, #96]	@ (8009bec <xTaskPriorityDisinherit+0x10c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	4a17      	ldr	r2, [pc, #92]	@ (8009bec <xTaskPriorityDisinherit+0x10c>)
 8009b90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9e:	f1c3 0207 	rsb	r2, r3, #7
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009baa:	2201      	movs	r2, #1
 8009bac:	409a      	lsls	r2, r3
 8009bae:	4b0f      	ldr	r3, [pc, #60]	@ (8009bec <xTaskPriorityDisinherit+0x10c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8009bec <xTaskPriorityDisinherit+0x10c>)
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4a08      	ldr	r2, [pc, #32]	@ (8009be8 <xTaskPriorityDisinherit+0x108>)
 8009bc6:	441a      	add	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fd ff34 	bl	8007a3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd8:	697b      	ldr	r3, [r7, #20]
	}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20002ff0 	.word	0x20002ff0
 8009be8:	20002ff4 	.word	0x20002ff4
 8009bec:	200030f8 	.word	0x200030f8

08009bf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d079      	beq.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d902      	bls.n	8009c38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	e002      	b.n	8009c3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d059      	beq.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d154      	bne.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c52:	4b2c      	ldr	r3, [pc, #176]	@ (8009d04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d10b      	bne.n	8009c74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60bb      	str	r3, [r7, #8]
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	69fa      	ldr	r2, [r7, #28]
 8009c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	db04      	blt.n	8009c92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f1c3 0207 	rsb	r2, r3, #7
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	6959      	ldr	r1, [r3, #20]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4a19      	ldr	r2, [pc, #100]	@ (8009d08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ca2:	4413      	add	r3, r2
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	d129      	bne.n	8009cfc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fd ff22 	bl	8007af6 <uxListRemove>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc2:	43da      	mvns	r2, r3
 8009cc4:	4b11      	ldr	r3, [pc, #68]	@ (8009d0c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	4a10      	ldr	r2, [pc, #64]	@ (8009d0c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009ccc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	409a      	lsls	r2, r3
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8009d0c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4a06      	ldr	r2, [pc, #24]	@ (8009d08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009cee:	441a      	add	r2, r3
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fd fea0 	bl	8007a3c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cfc:	bf00      	nop
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20002ff0 	.word	0x20002ff0
 8009d08:	20002ff4 	.word	0x20002ff4
 8009d0c:	200030f8 	.word	0x200030f8

08009d10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d10:	b480      	push	{r7}
 8009d12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d14:	4b07      	ldr	r3, [pc, #28]	@ (8009d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d004      	beq.n	8009d26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d1c:	4b05      	ldr	r3, [pc, #20]	@ (8009d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d22:	3201      	adds	r2, #1
 8009d24:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		return pxCurrentTCB;
 8009d26:	4b03      	ldr	r3, [pc, #12]	@ (8009d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d28:	681b      	ldr	r3, [r3, #0]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	20002ff0 	.word	0x20002ff0

08009d38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d42:	4b29      	ldr	r3, [pc, #164]	@ (8009de8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d48:	4b28      	ldr	r3, [pc, #160]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd fed1 	bl	8007af6 <uxListRemove>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d5a:	4b24      	ldr	r3, [pc, #144]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	2201      	movs	r2, #1
 8009d62:	fa02 f303 	lsl.w	r3, r2, r3
 8009d66:	43da      	mvns	r2, r3
 8009d68:	4b21      	ldr	r3, [pc, #132]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	4a20      	ldr	r2, [pc, #128]	@ (8009df0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d10a      	bne.n	8009d90 <prvAddCurrentTaskToDelayedList+0x58>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d80:	4b1a      	ldr	r3, [pc, #104]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	481a      	ldr	r0, [pc, #104]	@ (8009df4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d8a:	f7fd fe57 	bl	8007a3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d8e:	e026      	b.n	8009dde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d98:	4b14      	ldr	r3, [pc, #80]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d209      	bcs.n	8009dbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009da8:	4b13      	ldr	r3, [pc, #76]	@ (8009df8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	4b0f      	ldr	r3, [pc, #60]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fd fe65 	bl	8007a84 <vListInsert>
}
 8009dba:	e010      	b.n	8009dde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fd fe5b 	bl	8007a84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dce:	4b0c      	ldr	r3, [pc, #48]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d202      	bcs.n	8009dde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009dd8:	4a09      	ldr	r2, [pc, #36]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6013      	str	r3, [r2, #0]
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200030f4 	.word	0x200030f4
 8009dec:	20002ff0 	.word	0x20002ff0
 8009df0:	200030f8 	.word	0x200030f8
 8009df4:	200030dc 	.word	0x200030dc
 8009df8:	200030ac 	.word	0x200030ac
 8009dfc:	200030a8 	.word	0x200030a8
 8009e00:	20003110 	.word	0x20003110

08009e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3b04      	subs	r3, #4
 8009e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3b04      	subs	r3, #4
 8009e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f023 0201 	bic.w	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3b04      	subs	r3, #4
 8009e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e34:	4a0c      	ldr	r2, [pc, #48]	@ (8009e68 <pxPortInitialiseStack+0x64>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3b14      	subs	r3, #20
 8009e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f06f 0202 	mvn.w	r2, #2
 8009e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3b20      	subs	r3, #32
 8009e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	08009e6d 	.word	0x08009e6d

08009e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e76:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <prvTaskExitError+0x58>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d00b      	beq.n	8009e98 <prvTaskExitError+0x2c>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <prvTaskExitError+0x28>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	60bb      	str	r3, [r7, #8]
}
 8009eaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009eac:	bf00      	nop
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0fc      	beq.n	8009eae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000014 	.word	0x20000014
	...

08009ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ed0:	4b07      	ldr	r3, [pc, #28]	@ (8009ef0 <pxCurrentTCBConst2>)
 8009ed2:	6819      	ldr	r1, [r3, #0]
 8009ed4:	6808      	ldr	r0, [r1, #0]
 8009ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eda:	f380 8809 	msr	PSP, r0
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f04f 0000 	mov.w	r0, #0
 8009ee6:	f380 8811 	msr	BASEPRI, r0
 8009eea:	4770      	bx	lr
 8009eec:	f3af 8000 	nop.w

08009ef0 <pxCurrentTCBConst2>:
 8009ef0:	20002ff0 	.word	0x20002ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop

08009ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ef8:	4808      	ldr	r0, [pc, #32]	@ (8009f1c <prvPortStartFirstTask+0x24>)
 8009efa:	6800      	ldr	r0, [r0, #0]
 8009efc:	6800      	ldr	r0, [r0, #0]
 8009efe:	f380 8808 	msr	MSP, r0
 8009f02:	f04f 0000 	mov.w	r0, #0
 8009f06:	f380 8814 	msr	CONTROL, r0
 8009f0a:	b662      	cpsie	i
 8009f0c:	b661      	cpsie	f
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	df00      	svc	0
 8009f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f1a:	bf00      	nop
 8009f1c:	e000ed08 	.word	0xe000ed08

08009f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f26:	4b47      	ldr	r3, [pc, #284]	@ (800a044 <xPortStartScheduler+0x124>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a47      	ldr	r2, [pc, #284]	@ (800a048 <xPortStartScheduler+0x128>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d10b      	bne.n	8009f48 <xPortStartScheduler+0x28>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	60fb      	str	r3, [r7, #12]
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	e7fd      	b.n	8009f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f48:	4b3e      	ldr	r3, [pc, #248]	@ (800a044 <xPortStartScheduler+0x124>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800a04c <xPortStartScheduler+0x12c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d10b      	bne.n	8009f6a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	613b      	str	r3, [r7, #16]
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	e7fd      	b.n	8009f66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f6a:	4b39      	ldr	r3, [pc, #228]	@ (800a050 <xPortStartScheduler+0x130>)
 8009f6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	22ff      	movs	r2, #255	@ 0xff
 8009f7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	4b31      	ldr	r3, [pc, #196]	@ (800a054 <xPortStartScheduler+0x134>)
 8009f90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f92:	4b31      	ldr	r3, [pc, #196]	@ (800a058 <xPortStartScheduler+0x138>)
 8009f94:	2207      	movs	r2, #7
 8009f96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f98:	e009      	b.n	8009fae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f9a:	4b2f      	ldr	r3, [pc, #188]	@ (800a058 <xPortStartScheduler+0x138>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	4a2d      	ldr	r2, [pc, #180]	@ (800a058 <xPortStartScheduler+0x138>)
 8009fa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb6:	2b80      	cmp	r3, #128	@ 0x80
 8009fb8:	d0ef      	beq.n	8009f9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fba:	4b27      	ldr	r3, [pc, #156]	@ (800a058 <xPortStartScheduler+0x138>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f1c3 0307 	rsb	r3, r3, #7
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d00b      	beq.n	8009fde <xPortStartScheduler+0xbe>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	60bb      	str	r3, [r7, #8]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fde:	4b1e      	ldr	r3, [pc, #120]	@ (800a058 <xPortStartScheduler+0x138>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	4a1c      	ldr	r2, [pc, #112]	@ (800a058 <xPortStartScheduler+0x138>)
 8009fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fe8:	4b1b      	ldr	r3, [pc, #108]	@ (800a058 <xPortStartScheduler+0x138>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ff0:	4a19      	ldr	r2, [pc, #100]	@ (800a058 <xPortStartScheduler+0x138>)
 8009ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ffc:	4b17      	ldr	r3, [pc, #92]	@ (800a05c <xPortStartScheduler+0x13c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a16      	ldr	r2, [pc, #88]	@ (800a05c <xPortStartScheduler+0x13c>)
 800a002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a008:	4b14      	ldr	r3, [pc, #80]	@ (800a05c <xPortStartScheduler+0x13c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a13      	ldr	r2, [pc, #76]	@ (800a05c <xPortStartScheduler+0x13c>)
 800a00e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a014:	f000 f8da 	bl	800a1cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a018:	4b11      	ldr	r3, [pc, #68]	@ (800a060 <xPortStartScheduler+0x140>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a01e:	f000 f8f9 	bl	800a214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a022:	4b10      	ldr	r3, [pc, #64]	@ (800a064 <xPortStartScheduler+0x144>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a0f      	ldr	r2, [pc, #60]	@ (800a064 <xPortStartScheduler+0x144>)
 800a028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a02c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a02e:	f7ff ff63 	bl	8009ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a032:	f7ff fa59 	bl	80094e8 <vTaskSwitchContext>
	prvTaskExitError();
 800a036:	f7ff ff19 	bl	8009e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	e000ed00 	.word	0xe000ed00
 800a048:	410fc271 	.word	0x410fc271
 800a04c:	410fc270 	.word	0x410fc270
 800a050:	e000e400 	.word	0xe000e400
 800a054:	2000311c 	.word	0x2000311c
 800a058:	20003120 	.word	0x20003120
 800a05c:	e000ed20 	.word	0xe000ed20
 800a060:	20000014 	.word	0x20000014
 800a064:	e000ef34 	.word	0xe000ef34

0800a068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
}
 800a080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a082:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <vPortEnterCritical+0x5c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3301      	adds	r3, #1
 800a088:	4a0e      	ldr	r2, [pc, #56]	@ (800a0c4 <vPortEnterCritical+0x5c>)
 800a08a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a08c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c4 <vPortEnterCritical+0x5c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d110      	bne.n	800a0b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a094:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c8 <vPortEnterCritical+0x60>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	603b      	str	r3, [r7, #0]
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	e7fd      	b.n	800a0b2 <vPortEnterCritical+0x4a>
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000014 	.word	0x20000014
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0d2:	4b12      	ldr	r3, [pc, #72]	@ (800a11c <vPortExitCritical+0x50>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <vPortExitCritical+0x26>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	607b      	str	r3, [r7, #4]
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	e7fd      	b.n	800a0ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <vPortExitCritical+0x50>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	4a08      	ldr	r2, [pc, #32]	@ (800a11c <vPortExitCritical+0x50>)
 800a0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0fc:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <vPortExitCritical+0x50>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <vPortExitCritical+0x44>
 800a104:	2300      	movs	r3, #0
 800a106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f383 8811 	msr	BASEPRI, r3
}
 800a10e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20000014 	.word	0x20000014

0800a120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a120:	f3ef 8009 	mrs	r0, PSP
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4b15      	ldr	r3, [pc, #84]	@ (800a180 <pxCurrentTCBConst>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	f01e 0f10 	tst.w	lr, #16
 800a130:	bf08      	it	eq
 800a132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13a:	6010      	str	r0, [r2, #0]
 800a13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a144:	f380 8811 	msr	BASEPRI, r0
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f7ff f9ca 	bl	80094e8 <vTaskSwitchContext>
 800a154:	f04f 0000 	mov.w	r0, #0
 800a158:	f380 8811 	msr	BASEPRI, r0
 800a15c:	bc09      	pop	{r0, r3}
 800a15e:	6819      	ldr	r1, [r3, #0]
 800a160:	6808      	ldr	r0, [r1, #0]
 800a162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a166:	f01e 0f10 	tst.w	lr, #16
 800a16a:	bf08      	it	eq
 800a16c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a170:	f380 8809 	msr	PSP, r0
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	f3af 8000 	nop.w

0800a180 <pxCurrentTCBConst>:
 800a180:	20002ff0 	.word	0x20002ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop

0800a188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
}
 800a1a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1a2:	f7ff f8e7 	bl	8009374 <xTaskIncrementTick>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ac:	4b06      	ldr	r3, [pc, #24]	@ (800a1c8 <SysTick_Handler+0x40>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f383 8811 	msr	BASEPRI, r3
}
 800a1be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a200 <vPortSetupTimerInterrupt+0x34>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a204 <vPortSetupTimerInterrupt+0x38>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a208 <vPortSetupTimerInterrupt+0x3c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a20c <vPortSetupTimerInterrupt+0x40>)
 800a1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e6:	099b      	lsrs	r3, r3, #6
 800a1e8:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <vPortSetupTimerInterrupt+0x44>)
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ee:	4b04      	ldr	r3, [pc, #16]	@ (800a200 <vPortSetupTimerInterrupt+0x34>)
 800a1f0:	2207      	movs	r2, #7
 800a1f2:	601a      	str	r2, [r3, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	e000e010 	.word	0xe000e010
 800a204:	e000e018 	.word	0xe000e018
 800a208:	20000008 	.word	0x20000008
 800a20c:	10624dd3 	.word	0x10624dd3
 800a210:	e000e014 	.word	0xe000e014

0800a214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a224 <vPortEnableVFP+0x10>
 800a218:	6801      	ldr	r1, [r0, #0]
 800a21a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a21e:	6001      	str	r1, [r0, #0]
 800a220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a222:	bf00      	nop
 800a224:	e000ed88 	.word	0xe000ed88

0800a228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a22e:	f3ef 8305 	mrs	r3, IPSR
 800a232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b0f      	cmp	r3, #15
 800a238:	d915      	bls.n	800a266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a23a:	4a18      	ldr	r2, [pc, #96]	@ (800a29c <vPortValidateInterruptPriority+0x74>)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4413      	add	r3, r2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a244:	4b16      	ldr	r3, [pc, #88]	@ (800a2a0 <vPortValidateInterruptPriority+0x78>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	7afa      	ldrb	r2, [r7, #11]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d20b      	bcs.n	800a266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	607b      	str	r3, [r7, #4]
}
 800a260:	bf00      	nop
 800a262:	bf00      	nop
 800a264:	e7fd      	b.n	800a262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a266:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <vPortValidateInterruptPriority+0x7c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a26e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a8 <vPortValidateInterruptPriority+0x80>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d90b      	bls.n	800a28e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	603b      	str	r3, [r7, #0]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <vPortValidateInterruptPriority+0x62>
	}
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	e000e3f0 	.word	0xe000e3f0
 800a2a0:	2000311c 	.word	0x2000311c
 800a2a4:	e000ed0c 	.word	0xe000ed0c
 800a2a8:	20003120 	.word	0x20003120

0800a2ac <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800a2b8:	f7fe ff8e 	bl	80091d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800a2bc:	4b3e      	ldr	r3, [pc, #248]	@ (800a3b8 <pvPortMalloc+0x10c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800a2c4:	f000 f8ba 	bl	800a43c <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800a2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800a3b8 <pvPortMalloc+0x10c>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00e      	beq.n	800a2f2 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4413      	add	r3, r2
 800a2dc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d057      	beq.n	800a3a8 <pvPortMalloc+0xfc>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f647 72f7 	movw	r2, #32759	@ 0x7ff7
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d852      	bhi.n	800a3a8 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800a302:	4b2e      	ldr	r3, [pc, #184]	@ (800a3bc <pvPortMalloc+0x110>)
 800a304:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800a306:	4b2d      	ldr	r3, [pc, #180]	@ (800a3bc <pvPortMalloc+0x110>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a30c:	e004      	b.n	800a318 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d903      	bls.n	800a32a <pvPortMalloc+0x7e>
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1f1      	bne.n	800a30e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	4a24      	ldr	r2, [pc, #144]	@ (800a3c0 <pvPortMalloc+0x114>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d03a      	beq.n	800a3a8 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2208      	movs	r2, #8
 800a338:	4413      	add	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2208      	movs	r2, #8
 800a34e:	0052      	lsls	r2, r2, #1
 800a350:	4293      	cmp	r3, r2
 800a352:	d922      	bls.n	800a39a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a354:	69fa      	ldr	r2, [r7, #28]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	4b11      	ldr	r3, [pc, #68]	@ (800a3bc <pvPortMalloc+0x110>)
 800a376:	613b      	str	r3, [r7, #16]
 800a378:	e002      	b.n	800a380 <pvPortMalloc+0xd4>
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d8f6      	bhi.n	800a37a <pvPortMalloc+0xce>
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a39a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c4 <pvPortMalloc+0x118>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	4a07      	ldr	r2, [pc, #28]	@ (800a3c4 <pvPortMalloc+0x118>)
 800a3a6:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3a8:	f7fe ff24 	bl	80091f4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a3ac:	697b      	ldr	r3, [r7, #20]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	2000b134 	.word	0x2000b134
 800a3bc:	2000b124 	.word	0x2000b124
 800a3c0:	2000b12c 	.word	0x2000b12c
 800a3c4:	20000018 	.word	0x20000018

0800a3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d027      	beq.n	800a42a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800a3da:	2308      	movs	r3, #8
 800a3dc:	425b      	negs	r3, r3
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800a3e8:	f7fe fef6 	bl	80091d8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	60bb      	str	r3, [r7, #8]
 800a3f2:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <vPortFree+0x6c>)
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	e002      	b.n	800a3fe <vPortFree+0x36>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	429a      	cmp	r2, r3
 800a408:	d8f6      	bhi.n	800a3f8 <vPortFree+0x30>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <vPortFree+0x70>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4413      	add	r3, r2
 800a422:	4a05      	ldr	r2, [pc, #20]	@ (800a438 <vPortFree+0x70>)
 800a424:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800a426:	f7fe fee5 	bl	80091f4 <xTaskResumeAll>
	}
}
 800a42a:	bf00      	nop
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	2000b124 	.word	0x2000b124
 800a438:	20000018 	.word	0x20000018

0800a43c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a442:	4b10      	ldr	r3, [pc, #64]	@ (800a484 <prvHeapInit+0x48>)
 800a444:	f023 0307 	bic.w	r3, r3, #7
 800a448:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a44a:	4a0f      	ldr	r2, [pc, #60]	@ (800a488 <prvHeapInit+0x4c>)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a450:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <prvHeapInit+0x4c>)
 800a452:	2200      	movs	r2, #0
 800a454:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800a456:	4b0d      	ldr	r3, [pc, #52]	@ (800a48c <prvHeapInit+0x50>)
 800a458:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800a45c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800a45e:	4b0b      	ldr	r3, [pc, #44]	@ (800a48c <prvHeapInit+0x50>)
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800a46e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	4a06      	ldr	r2, [pc, #24]	@ (800a48c <prvHeapInit+0x50>)
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	2000312c 	.word	0x2000312c
 800a488:	2000b124 	.word	0x2000b124
 800a48c:	2000b12c 	.word	0x2000b12c

0800a490 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	22fa      	movs	r2, #250	@ 0xfa
 800a49e:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f002 fc20 	bl	800ccf0 <tcpip_send_msg_wait_sem>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d103      	bne.n	800a4c4 <netconn_apimsg+0x34>
    return apimsg->err;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a4c2:	e001      	b.n	800a4c8 <netconn_apimsg+0x38>
  }
  return err;
 800a4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08c      	sub	sp, #48	@ 0x30
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	603a      	str	r2, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 f95f 	bl	800b7a8 <netconn_alloc>
 800a4ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d054      	beq.n	800a59c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a4f2:	79bb      	ldrb	r3, [r7, #6]
 800a4f4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	4619      	mov	r1, r3
 800a500:	4829      	ldr	r0, [pc, #164]	@ (800a5a8 <netconn_new_with_proto_and_callback+0xd8>)
 800a502:	f7ff ffc5 	bl	800a490 <netconn_apimsg>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800a50c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a510:	2b00      	cmp	r3, #0
 800a512:	d043      	beq.n	800a59c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d005      	beq.n	800a528 <netconn_new_with_proto_and_callback+0x58>
 800a51c:	4b23      	ldr	r3, [pc, #140]	@ (800a5ac <netconn_new_with_proto_and_callback+0xdc>)
 800a51e:	22a3      	movs	r2, #163	@ 0xa3
 800a520:	4923      	ldr	r1, [pc, #140]	@ (800a5b0 <netconn_new_with_proto_and_callback+0xe0>)
 800a522:	4824      	ldr	r0, [pc, #144]	@ (800a5b4 <netconn_new_with_proto_and_callback+0xe4>)
 800a524:	f00f fdf6 	bl	801a114 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a52a:	3310      	adds	r3, #16
 800a52c:	4618      	mov	r0, r3
 800a52e:	f00f fbb8 	bl	8019ca2 <sys_mbox_valid>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d105      	bne.n	800a544 <netconn_new_with_proto_and_callback+0x74>
 800a538:	4b1c      	ldr	r3, [pc, #112]	@ (800a5ac <netconn_new_with_proto_and_callback+0xdc>)
 800a53a:	22a4      	movs	r2, #164	@ 0xa4
 800a53c:	491e      	ldr	r1, [pc, #120]	@ (800a5b8 <netconn_new_with_proto_and_callback+0xe8>)
 800a53e:	481d      	ldr	r0, [pc, #116]	@ (800a5b4 <netconn_new_with_proto_and_callback+0xe4>)
 800a540:	f00f fde8 	bl	801a114 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	3314      	adds	r3, #20
 800a548:	4618      	mov	r0, r3
 800a54a:	f00f fbaa 	bl	8019ca2 <sys_mbox_valid>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <netconn_new_with_proto_and_callback+0x90>
 800a554:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <netconn_new_with_proto_and_callback+0xdc>)
 800a556:	22a6      	movs	r2, #166	@ 0xa6
 800a558:	4918      	ldr	r1, [pc, #96]	@ (800a5bc <netconn_new_with_proto_and_callback+0xec>)
 800a55a:	4816      	ldr	r0, [pc, #88]	@ (800a5b4 <netconn_new_with_proto_and_callback+0xe4>)
 800a55c:	f00f fdda 	bl	801a114 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a562:	330c      	adds	r3, #12
 800a564:	4618      	mov	r0, r3
 800a566:	f00f fc2d 	bl	8019dc4 <sys_sem_valid>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d105      	bne.n	800a57c <netconn_new_with_proto_and_callback+0xac>
 800a570:	4b0e      	ldr	r3, [pc, #56]	@ (800a5ac <netconn_new_with_proto_and_callback+0xdc>)
 800a572:	22a9      	movs	r2, #169	@ 0xa9
 800a574:	4912      	ldr	r1, [pc, #72]	@ (800a5c0 <netconn_new_with_proto_and_callback+0xf0>)
 800a576:	480f      	ldr	r0, [pc, #60]	@ (800a5b4 <netconn_new_with_proto_and_callback+0xe4>)
 800a578:	f00f fdcc 	bl	801a114 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57e:	330c      	adds	r3, #12
 800a580:	4618      	mov	r0, r3
 800a582:	f00f fc12 	bl	8019daa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	3310      	adds	r3, #16
 800a58a:	4618      	mov	r0, r3
 800a58c:	f00f faec 	bl	8019b68 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a592:	2007      	movs	r0, #7
 800a594:	f003 fad6 	bl	800db44 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	e000      	b.n	800a59e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3730      	adds	r7, #48	@ 0x30
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	0800b77d 	.word	0x0800b77d
 800a5ac:	0801b790 	.word	0x0801b790
 800a5b0:	0801b7c4 	.word	0x0801b7c4
 800a5b4:	0801b7e8 	.word	0x0801b7e8
 800a5b8:	0801b810 	.word	0x0801b810
 800a5bc:	0801b828 	.word	0x0801b828
 800a5c0:	0801b84c 	.word	0x0801b84c

0800a5c4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08c      	sub	sp, #48	@ 0x30
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e014      	b.n	800a600 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a5da:	2329      	movs	r3, #41	@ 0x29
 800a5dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a5de:	f107 030c 	add.w	r3, r7, #12
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4808      	ldr	r0, [pc, #32]	@ (800a608 <netconn_prepare_delete+0x44>)
 800a5e6:	f7ff ff53 	bl	800a490 <netconn_apimsg>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a5f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <netconn_prepare_delete+0x3a>
    return err;
 800a5f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5fc:	e000      	b.n	800a600 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3730      	adds	r7, #48	@ 0x30
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	0800bce1 	.word	0x0800bce1

0800a60c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <netconn_delete+0x12>
    return ERR_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e00d      	b.n	800a63a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff ffd0 	bl	800a5c4 <netconn_prepare_delete>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <netconn_delete+0x2a>
    netconn_free(conn);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 f923 	bl	800b87c <netconn_free>
  }
  return err;
 800a636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08e      	sub	sp, #56	@ 0x38
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d109      	bne.n	800a66c <netconn_bind+0x28>
 800a658:	4b11      	ldr	r3, [pc, #68]	@ (800a6a0 <netconn_bind+0x5c>)
 800a65a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a65e:	4911      	ldr	r1, [pc, #68]	@ (800a6a4 <netconn_bind+0x60>)
 800a660:	4811      	ldr	r0, [pc, #68]	@ (800a6a8 <netconn_bind+0x64>)
 800a662:	f00f fd57 	bl	801a114 <iprintf>
 800a666:	f06f 030f 	mvn.w	r3, #15
 800a66a:	e015      	b.n	800a698 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a672:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ac <netconn_bind+0x68>)
 800a674:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a682:	f107 0314 	add.w	r3, r7, #20
 800a686:	4619      	mov	r1, r3
 800a688:	4809      	ldr	r0, [pc, #36]	@ (800a6b0 <netconn_bind+0x6c>)
 800a68a:	f7ff ff01 	bl	800a490 <netconn_apimsg>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a694:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3738      	adds	r7, #56	@ 0x38
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	0801b790 	.word	0x0801b790
 800a6a4:	0801b8c8 	.word	0x0801b8c8
 800a6a8:	0801b7e8 	.word	0x0801b7e8
 800a6ac:	08023034 	.word	0x08023034
 800a6b0:	0800bea9 	.word	0x0800bea9

0800a6b4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08e      	sub	sp, #56	@ 0x38
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <netconn_connect+0x28>
 800a6c8:	4b11      	ldr	r3, [pc, #68]	@ (800a710 <netconn_connect+0x5c>)
 800a6ca:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800a6ce:	4911      	ldr	r1, [pc, #68]	@ (800a714 <netconn_connect+0x60>)
 800a6d0:	4811      	ldr	r0, [pc, #68]	@ (800a718 <netconn_connect+0x64>)
 800a6d2:	f00f fd1f 	bl	801a114 <iprintf>
 800a6d6:	f06f 030f 	mvn.w	r3, #15
 800a6da:	e015      	b.n	800a708 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800a6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a71c <netconn_connect+0x68>)
 800a6e4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800a6f2:	f107 0314 	add.w	r3, r7, #20
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4809      	ldr	r0, [pc, #36]	@ (800a720 <netconn_connect+0x6c>)
 800a6fa:	f7ff fec9 	bl	800a490 <netconn_apimsg>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a704:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3738      	adds	r7, #56	@ 0x38
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	0801b790 	.word	0x0801b790
 800a714:	0801b904 	.word	0x0801b904
 800a718:	0801b7e8 	.word	0x0801b7e8
 800a71c:	08023034 	.word	0x08023034
 800a720:	0800c03d 	.word	0x0800c03d

0800a724 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08c      	sub	sp, #48	@ 0x30
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <netconn_listen_with_backlog+0x26>
 800a736:	4b0d      	ldr	r3, [pc, #52]	@ (800a76c <netconn_listen_with_backlog+0x48>)
 800a738:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800a73c:	490c      	ldr	r1, [pc, #48]	@ (800a770 <netconn_listen_with_backlog+0x4c>)
 800a73e:	480d      	ldr	r0, [pc, #52]	@ (800a774 <netconn_listen_with_backlog+0x50>)
 800a740:	f00f fce8 	bl	801a114 <iprintf>
 800a744:	f06f 030f 	mvn.w	r3, #15
 800a748:	e00c      	b.n	800a764 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	4619      	mov	r1, r3
 800a754:	4808      	ldr	r0, [pc, #32]	@ (800a778 <netconn_listen_with_backlog+0x54>)
 800a756:	f7ff fe9b 	bl	800a490 <netconn_apimsg>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a760:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a764:	4618      	mov	r0, r3
 800a766:	3730      	adds	r7, #48	@ 0x30
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	0801b790 	.word	0x0801b790
 800a770:	0801b948 	.word	0x0801b948
 800a774:	0801b7e8 	.word	0x0801b7e8
 800a778:	0800c1b9 	.word	0x0800c1b9

0800a77c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <netconn_accept+0x24>
 800a78c:	4b3d      	ldr	r3, [pc, #244]	@ (800a884 <netconn_accept+0x108>)
 800a78e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a792:	493d      	ldr	r1, [pc, #244]	@ (800a888 <netconn_accept+0x10c>)
 800a794:	483d      	ldr	r0, [pc, #244]	@ (800a88c <netconn_accept+0x110>)
 800a796:	f00f fcbd 	bl	801a114 <iprintf>
 800a79a:	f06f 030f 	mvn.w	r3, #15
 800a79e:	e06c      	b.n	800a87a <netconn_accept+0xfe>
  *new_conn = NULL;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <netconn_accept+0x44>
 800a7ac:	4b35      	ldr	r3, [pc, #212]	@ (800a884 <netconn_accept+0x108>)
 800a7ae:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800a7b2:	4937      	ldr	r1, [pc, #220]	@ (800a890 <netconn_accept+0x114>)
 800a7b4:	4835      	ldr	r0, [pc, #212]	@ (800a88c <netconn_accept+0x110>)
 800a7b6:	f00f fcad 	bl	801a114 <iprintf>
 800a7ba:	f06f 030f 	mvn.w	r3, #15
 800a7be:	e05c      	b.n	800a87a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fb6c 	bl	800ae9e <netconn_err>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a7ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a7d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7d6:	e050      	b.n	800a87a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3314      	adds	r3, #20
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f00f fa60 	bl	8019ca2 <sys_mbox_valid>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <netconn_accept+0x78>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7e1b      	ldrb	r3, [r3, #24]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a7f4:	f06f 030e 	mvn.w	r3, #14
 800a7f8:	e03f      	b.n	800a87a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	7e1b      	ldrb	r3, [r3, #24]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00e      	beq.n	800a824 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	3314      	adds	r3, #20
 800a80a:	f107 020c 	add.w	r2, r7, #12
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f00f fa2a 	bl	8019c6a <sys_arch_mbox_tryfetch>
 800a816:	4603      	mov	r3, r0
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d10a      	bne.n	800a834 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a81e:	f06f 0306 	mvn.w	r3, #6
 800a822:	e02a      	b.n	800a87a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3314      	adds	r3, #20
 800a828:	f107 010c 	add.w	r1, r7, #12
 800a82c:	2200      	movs	r2, #0
 800a82e:	4618      	mov	r0, r3
 800a830:	f00f f9dc 	bl	8019bec <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <netconn_accept+0xcc>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	2200      	movs	r2, #0
 800a842:	2101      	movs	r1, #1
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f107 0213 	add.w	r2, r7, #19
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f000 fb75 	bl	800af40 <lwip_netconn_is_err_msg>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a85c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a860:	e00b      	b.n	800a87a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a868:	f06f 030e 	mvn.w	r3, #14
 800a86c:	e005      	b.n	800a87a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a878:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	0801b790 	.word	0x0801b790
 800a888:	0801b968 	.word	0x0801b968
 800a88c:	0801b7e8 	.word	0x0801b7e8
 800a890:	0801b988 	.word	0x0801b988

0800a894 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <netconn_recv_data+0x2c>
 800a8ac:	4b58      	ldr	r3, [pc, #352]	@ (800aa10 <netconn_recv_data+0x17c>)
 800a8ae:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800a8b2:	4958      	ldr	r1, [pc, #352]	@ (800aa14 <netconn_recv_data+0x180>)
 800a8b4:	4858      	ldr	r0, [pc, #352]	@ (800aa18 <netconn_recv_data+0x184>)
 800a8b6:	f00f fc2d 	bl	801a114 <iprintf>
 800a8ba:	f06f 030f 	mvn.w	r3, #15
 800a8be:	e0a2      	b.n	800aa06 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d109      	bne.n	800a8e0 <netconn_recv_data+0x4c>
 800a8cc:	4b50      	ldr	r3, [pc, #320]	@ (800aa10 <netconn_recv_data+0x17c>)
 800a8ce:	f240 224a 	movw	r2, #586	@ 0x24a
 800a8d2:	4952      	ldr	r1, [pc, #328]	@ (800aa1c <netconn_recv_data+0x188>)
 800a8d4:	4850      	ldr	r0, [pc, #320]	@ (800aa18 <netconn_recv_data+0x184>)
 800a8d6:	f00f fc1d 	bl	801a114 <iprintf>
 800a8da:	f06f 030f 	mvn.w	r3, #15
 800a8de:	e092      	b.n	800aa06 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3310      	adds	r3, #16
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f00f f9dc 	bl	8019ca2 <sys_mbox_valid>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10e      	bne.n	800a90e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fad4 	bl	800ae9e <netconn_err>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a8fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a902:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a906:	e07e      	b.n	800aa06 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a908:	f06f 030a 	mvn.w	r3, #10
 800a90c:	e07b      	b.n	800aa06 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	7e1b      	ldrb	r3, [r3, #24]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10f      	bne.n	800a93a <netconn_recv_data+0xa6>
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	7e1b      	ldrb	r3, [r3, #24]
 800a928:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d104      	bne.n	800a93a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d023      	beq.n	800a982 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3310      	adds	r3, #16
 800a93e:	f107 0218 	add.w	r2, r7, #24
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f00f f990 	bl	8019c6a <sys_arch_mbox_tryfetch>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d11f      	bne.n	800a992 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 faa3 	bl	800ae9e <netconn_err>
 800a958:	4603      	mov	r3, r0
 800a95a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a95c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a964:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a968:	e04d      	b.n	800aa06 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	7e1b      	ldrb	r3, [r3, #24]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a976:	f06f 030a 	mvn.w	r3, #10
 800a97a:	e044      	b.n	800aa06 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a97c:	f06f 0306 	mvn.w	r3, #6
 800a980:	e041      	b.n	800aa06 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3310      	adds	r3, #16
 800a986:	f107 0118 	add.w	r1, r7, #24
 800a98a:	2200      	movs	r2, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f00f f92d 	bl	8019bec <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a99a:	2b10      	cmp	r3, #16
 800a99c:	d117      	bne.n	800a9ce <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	f107 0217 	add.w	r2, r7, #23
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 faca 	bl	800af40 <lwip_netconn_is_err_msg>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b6:	f113 0f0f 	cmn.w	r3, #15
 800a9ba:	d101      	bne.n	800a9c0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	e022      	b.n	800aa06 <netconn_recv_data+0x172>
      }
      return err;
 800a9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9c4:	e01f      	b.n	800aa06 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	891b      	ldrh	r3, [r3, #8]
 800a9ca:	83fb      	strh	r3, [r7, #30]
 800a9cc:	e00d      	b.n	800a9ea <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d106      	bne.n	800a9e2 <netconn_recv_data+0x14e>
 800a9d4:	4b0e      	ldr	r3, [pc, #56]	@ (800aa10 <netconn_recv_data+0x17c>)
 800a9d6:	f240 2291 	movw	r2, #657	@ 0x291
 800a9da:	4911      	ldr	r1, [pc, #68]	@ (800aa20 <netconn_recv_data+0x18c>)
 800a9dc:	480e      	ldr	r0, [pc, #56]	@ (800aa18 <netconn_recv_data+0x184>)
 800a9de:	f00f fb99 	bl	801a114 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d005      	beq.n	800a9fe <netconn_recv_data+0x16a>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	8bfa      	ldrh	r2, [r7, #30]
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3720      	adds	r7, #32
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	0801b790 	.word	0x0801b790
 800aa14:	0801b9a8 	.word	0x0801b9a8
 800aa18:	0801b7e8 	.word	0x0801b7e8
 800aa1c:	0801b9c8 	.word	0x0801b9c8
 800aa20:	0801b9e4 	.word	0x0801b9e4

0800aa24 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <netconn_tcp_recvd_msg+0x1e>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa3e:	2b10      	cmp	r3, #16
 800aa40:	d009      	beq.n	800aa56 <netconn_tcp_recvd_msg+0x32>
 800aa42:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <netconn_tcp_recvd_msg+0x50>)
 800aa44:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800aa48:	490b      	ldr	r1, [pc, #44]	@ (800aa78 <netconn_tcp_recvd_msg+0x54>)
 800aa4a:	480c      	ldr	r0, [pc, #48]	@ (800aa7c <netconn_tcp_recvd_msg+0x58>)
 800aa4c:	f00f fb62 	bl	801a114 <iprintf>
 800aa50:	f06f 030f 	mvn.w	r3, #15
 800aa54:	e00a      	b.n	800aa6c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	4806      	ldr	r0, [pc, #24]	@ (800aa80 <netconn_tcp_recvd_msg+0x5c>)
 800aa66:	f7ff fd13 	bl	800a490 <netconn_apimsg>
 800aa6a:	4603      	mov	r3, r0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	0801b790 	.word	0x0801b790
 800aa78:	0801b9f0 	.word	0x0801b9f0
 800aa7c:	0801b7e8 	.word	0x0801b7e8
 800aa80:	0800c2e9 	.word	0x0800c2e9

0800aa84 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b090      	sub	sp, #64	@ 0x40
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3310      	adds	r3, #16
 800aa96:	4618      	mov	r0, r3
 800aa98:	f00f f903 	bl	8019ca2 <sys_mbox_valid>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800aaa2:	f06f 030a 	mvn.w	r3, #10
 800aaa6:	e06d      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	7e1b      	ldrb	r3, [r3, #24]
 800aaac:	b25b      	sxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	da07      	bge.n	800aac2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	7e1b      	ldrb	r3, [r3, #24]
 800aab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	761a      	strb	r2, [r3, #24]
    goto handle_fin;
 800aac0:	e039      	b.n	800ab36 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	461a      	mov	r2, r3
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fee3 	bl	800a894 <netconn_recv_data>
 800aace:	4603      	mov	r3, r0
 800aad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800aad4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800aadc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800aae0:	e050      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10e      	bne.n	800ab10 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <netconn_recv_data_tcp+0x7a>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	891b      	ldrh	r3, [r3, #8]
 800aafc:	e000      	b.n	800ab00 <netconn_recv_data_tcp+0x7c>
 800aafe:	2301      	movs	r3, #1
 800ab00:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ab02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab04:	f107 0214 	add.w	r2, r7, #20
 800ab08:	4619      	mov	r1, r3
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff ff8a 	bl	800aa24 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d134      	bne.n	800ab80 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	7e1b      	ldrb	r3, [r3, #24]
 800ab24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	761a      	strb	r2, [r3, #24]
      return ERR_WOULDBLOCK;
 800ab2e:	f06f 0306 	mvn.w	r3, #6
 800ab32:	e027      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ab34:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <netconn_recv_data_tcp+0xc6>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	2200      	movs	r2, #0
 800ab44:	2101      	movs	r1, #1
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10f      	bne.n	800ab72 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f000 f9a3 	bl	800ae9e <netconn_err>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800ab5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <netconn_recv_data_tcp+0xe8>
          return err;
 800ab66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ab6a:	e00b      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ab6c:	f06f 030d 	mvn.w	r3, #13
 800ab70:	e008      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ab72:	2101      	movs	r1, #1
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f955 	bl	800ae24 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ab7a:	f06f 030e 	mvn.w	r3, #14
 800ab7e:	e001      	b.n	800ab84 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ab80:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3740      	adds	r7, #64	@ 0x40
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d109      	bne.n	800abb4 <netconn_recv+0x28>
 800aba0:	4b32      	ldr	r3, [pc, #200]	@ (800ac6c <netconn_recv+0xe0>)
 800aba2:	f240 3263 	movw	r2, #867	@ 0x363
 800aba6:	4932      	ldr	r1, [pc, #200]	@ (800ac70 <netconn_recv+0xe4>)
 800aba8:	4832      	ldr	r0, [pc, #200]	@ (800ac74 <netconn_recv+0xe8>)
 800abaa:	f00f fab3 	bl	801a114 <iprintf>
 800abae:	f06f 030f 	mvn.w	r3, #15
 800abb2:	e056      	b.n	800ac62 <netconn_recv+0xd6>
  *new_buf = NULL;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <netconn_recv+0x48>
 800abc0:	4b2a      	ldr	r3, [pc, #168]	@ (800ac6c <netconn_recv+0xe0>)
 800abc2:	f240 3265 	movw	r2, #869	@ 0x365
 800abc6:	492c      	ldr	r1, [pc, #176]	@ (800ac78 <netconn_recv+0xec>)
 800abc8:	482a      	ldr	r0, [pc, #168]	@ (800ac74 <netconn_recv+0xe8>)
 800abca:	f00f faa3 	bl	801a114 <iprintf>
 800abce:	f06f 030f 	mvn.w	r3, #15
 800abd2:	e046      	b.n	800ac62 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d13a      	bne.n	800ac56 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800abe4:	2006      	movs	r0, #6
 800abe6:	f002 ff5b 	bl	800daa0 <memp_malloc>
 800abea:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <netconn_recv+0x6c>
      return ERR_MEM;
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295
 800abf6:	e034      	b.n	800ac62 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800abf8:	f107 030c 	add.w	r3, r7, #12
 800abfc:	2200      	movs	r2, #0
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff ff3f 	bl	800aa84 <netconn_recv_data_tcp>
 800ac06:	4603      	mov	r3, r0
 800ac08:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ac0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d006      	beq.n	800ac20 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	2006      	movs	r0, #6
 800ac16:	f002 ff95 	bl	800db44 <memp_free>
      return err;
 800ac1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac1e:	e020      	b.n	800ac62 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <netconn_recv+0xa8>
 800ac26:	4b11      	ldr	r3, [pc, #68]	@ (800ac6c <netconn_recv+0xe0>)
 800ac28:	f240 3279 	movw	r2, #889	@ 0x379
 800ac2c:	4913      	ldr	r1, [pc, #76]	@ (800ac7c <netconn_recv+0xf0>)
 800ac2e:	4811      	ldr	r0, [pc, #68]	@ (800ac74 <netconn_recv+0xe8>)
 800ac30:	f00f fa70 	bl	801a114 <iprintf>

    buf->p = p;
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2200      	movs	r2, #0
 800ac44:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e005      	b.n	800ac62 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fe1a 	bl	800a894 <netconn_recv_data>
 800ac60:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0801b790 	.word	0x0801b790
 800ac70:	0801b9a8 	.word	0x0801b9a8
 800ac74:	0801b7e8 	.word	0x0801b7e8
 800ac78:	0801b9c8 	.word	0x0801b9c8
 800ac7c:	0801ba40 	.word	0x0801ba40

0800ac80 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	f107 0110 	add.w	r1, r7, #16
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	4613      	mov	r3, r2
 800aca2:	2201      	movs	r2, #1
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f805 	bl	800acb4 <netconn_write_vectors_partly>
 800acaa:	4603      	mov	r3, r0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b092      	sub	sp, #72	@ 0x48
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4611      	mov	r1, r2
 800acc0:	461a      	mov	r2, r3
 800acc2:	460b      	mov	r3, r1
 800acc4:	80fb      	strh	r3, [r7, #6]
 800acc6:	4613      	mov	r3, r2
 800acc8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d109      	bne.n	800ace4 <netconn_write_vectors_partly+0x30>
 800acd0:	4b4e      	ldr	r3, [pc, #312]	@ (800ae0c <netconn_write_vectors_partly+0x158>)
 800acd2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800acd6:	494e      	ldr	r1, [pc, #312]	@ (800ae10 <netconn_write_vectors_partly+0x15c>)
 800acd8:	484e      	ldr	r0, [pc, #312]	@ (800ae14 <netconn_write_vectors_partly+0x160>)
 800acda:	f00f fa1b 	bl	801a114 <iprintf>
 800acde:	f06f 030f 	mvn.w	r3, #15
 800ace2:	e08e      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acec:	2b10      	cmp	r3, #16
 800acee:	d009      	beq.n	800ad04 <netconn_write_vectors_partly+0x50>
 800acf0:	4b46      	ldr	r3, [pc, #280]	@ (800ae0c <netconn_write_vectors_partly+0x158>)
 800acf2:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800acf6:	4948      	ldr	r1, [pc, #288]	@ (800ae18 <netconn_write_vectors_partly+0x164>)
 800acf8:	4846      	ldr	r0, [pc, #280]	@ (800ae14 <netconn_write_vectors_partly+0x160>)
 800acfa:	f00f fa0b 	bl	801a114 <iprintf>
 800acfe:	f06f 0305 	mvn.w	r3, #5
 800ad02:	e07e      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	7e1b      	ldrb	r3, [r3, #24]
 800ad08:	f003 0302 	and.w	r3, r3, #2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <netconn_write_vectors_partly+0x66>
 800ad10:	797b      	ldrb	r3, [r7, #5]
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <netconn_write_vectors_partly+0x6a>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <netconn_write_vectors_partly+0x6c>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ad24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <netconn_write_vectors_partly+0x84>
 800ad2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ad32:	f06f 0305 	mvn.w	r3, #5
 800ad36:	e064      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad40:	e015      	b.n	800ad6e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ad42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4413      	add	r3, r2
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad4e:	4413      	add	r3, r2
 800ad50:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	4413      	add	r3, r2
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d202      	bcs.n	800ad68 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ad62:	f06f 0305 	mvn.w	r3, #5
 800ad66:	e04c      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ad68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad6e:	88fb      	ldrh	r3, [r7, #6]
 800ad70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad72:	429a      	cmp	r2, r3
 800ad74:	dbe5      	blt.n	800ad42 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ad76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e040      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ad80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	da0a      	bge.n	800ad9c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ad86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ad8c:	f06f 0305 	mvn.w	r3, #5
 800ad90:	e037      	b.n	800ae02 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ad92:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ad96:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800ad98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ada4:	88fb      	ldrh	r3, [r7, #6]
 800ada6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800adac:	797b      	ldrb	r3, [r7, #5]
 800adae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800adb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800adba:	f107 0314 	add.w	r3, r7, #20
 800adbe:	4619      	mov	r1, r3
 800adc0:	4816      	ldr	r0, [pc, #88]	@ (800ae1c <netconn_write_vectors_partly+0x168>)
 800adc2:	f7ff fb65 	bl	800a490 <netconn_apimsg>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800adcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800add0:	2b00      	cmp	r3, #0
 800add2:	d114      	bne.n	800adfe <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800add4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800adda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800addc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adde:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ade0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adec:	429a      	cmp	r2, r3
 800adee:	d006      	beq.n	800adfe <netconn_write_vectors_partly+0x14a>
 800adf0:	4b06      	ldr	r3, [pc, #24]	@ (800ae0c <netconn_write_vectors_partly+0x158>)
 800adf2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800adf6:	490a      	ldr	r1, [pc, #40]	@ (800ae20 <netconn_write_vectors_partly+0x16c>)
 800adf8:	4806      	ldr	r0, [pc, #24]	@ (800ae14 <netconn_write_vectors_partly+0x160>)
 800adfa:	f00f f98b 	bl	801a114 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800adfe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3748      	adds	r7, #72	@ 0x48
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	0801b790 	.word	0x0801b790
 800ae10:	0801ba68 	.word	0x0801ba68
 800ae14:	0801b7e8 	.word	0x0801b7e8
 800ae18:	0801ba84 	.word	0x0801ba84
 800ae1c:	0800c6f1 	.word	0x0800c6f1
 800ae20:	0801baa8 	.word	0x0801baa8

0800ae24 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08c      	sub	sp, #48	@ 0x30
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <netconn_close_shutdown+0x26>
 800ae36:	4b0f      	ldr	r3, [pc, #60]	@ (800ae74 <netconn_close_shutdown+0x50>)
 800ae38:	f240 4247 	movw	r2, #1095	@ 0x447
 800ae3c:	490e      	ldr	r1, [pc, #56]	@ (800ae78 <netconn_close_shutdown+0x54>)
 800ae3e:	480f      	ldr	r0, [pc, #60]	@ (800ae7c <netconn_close_shutdown+0x58>)
 800ae40:	f00f f968 	bl	801a114 <iprintf>
 800ae44:	f06f 030f 	mvn.w	r3, #15
 800ae48:	e010      	b.n	800ae6c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ae52:	2329      	movs	r3, #41	@ 0x29
 800ae54:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ae56:	f107 030c 	add.w	r3, r7, #12
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	4808      	ldr	r0, [pc, #32]	@ (800ae80 <netconn_close_shutdown+0x5c>)
 800ae5e:	f7ff fb17 	bl	800a490 <netconn_apimsg>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ae68:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3730      	adds	r7, #48	@ 0x30
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	0801b790 	.word	0x0801b790
 800ae78:	0801bacc 	.word	0x0801bacc
 800ae7c:	0801b7e8 	.word	0x0801b7e8
 800ae80:	0800c809 	.word	0x0800c809

0800ae84 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ae8c:	2103      	movs	r1, #3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff ffc8 	bl	800ae24 <netconn_close_shutdown>
 800ae94:	4603      	mov	r3, r0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <netconn_err+0x12>
    return ERR_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e00d      	b.n	800aecc <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800aeb0:	f00f f812 	bl	8019ed8 <sys_arch_protect>
 800aeb4:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7a1b      	ldrb	r3, [r3, #8]
 800aeba:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f00f f816 	bl	8019ef4 <sys_arch_unprotect>
  return err;
 800aec8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800aede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aee2:	f113 0f0d 	cmn.w	r3, #13
 800aee6:	d009      	beq.n	800aefc <lwip_netconn_err_to_msg+0x28>
 800aee8:	f113 0f0d 	cmn.w	r3, #13
 800aeec:	dc0c      	bgt.n	800af08 <lwip_netconn_err_to_msg+0x34>
 800aeee:	f113 0f0f 	cmn.w	r3, #15
 800aef2:	d007      	beq.n	800af04 <lwip_netconn_err_to_msg+0x30>
 800aef4:	f113 0f0e 	cmn.w	r3, #14
 800aef8:	d002      	beq.n	800af00 <lwip_netconn_err_to_msg+0x2c>
 800aefa:	e005      	b.n	800af08 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800aefc:	4b0a      	ldr	r3, [pc, #40]	@ (800af28 <lwip_netconn_err_to_msg+0x54>)
 800aefe:	e00e      	b.n	800af1e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800af00:	4b0a      	ldr	r3, [pc, #40]	@ (800af2c <lwip_netconn_err_to_msg+0x58>)
 800af02:	e00c      	b.n	800af1e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800af04:	4b0a      	ldr	r3, [pc, #40]	@ (800af30 <lwip_netconn_err_to_msg+0x5c>)
 800af06:	e00a      	b.n	800af1e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800af08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <lwip_netconn_err_to_msg+0x48>
 800af10:	4b08      	ldr	r3, [pc, #32]	@ (800af34 <lwip_netconn_err_to_msg+0x60>)
 800af12:	227d      	movs	r2, #125	@ 0x7d
 800af14:	4908      	ldr	r1, [pc, #32]	@ (800af38 <lwip_netconn_err_to_msg+0x64>)
 800af16:	4809      	ldr	r0, [pc, #36]	@ (800af3c <lwip_netconn_err_to_msg+0x68>)
 800af18:	f00f f8fc 	bl	801a114 <iprintf>
      return NULL;
 800af1c:	2300      	movs	r3, #0
  }
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	0801f080 	.word	0x0801f080
 800af2c:	0801f081 	.word	0x0801f081
 800af30:	0801f082 	.word	0x0801f082
 800af34:	0801bae8 	.word	0x0801bae8
 800af38:	0801bb1c 	.word	0x0801bb1c
 800af3c:	0801bb2c 	.word	0x0801bb2c

0800af40 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d105      	bne.n	800af5c <lwip_netconn_is_err_msg+0x1c>
 800af50:	4b12      	ldr	r3, [pc, #72]	@ (800af9c <lwip_netconn_is_err_msg+0x5c>)
 800af52:	2285      	movs	r2, #133	@ 0x85
 800af54:	4912      	ldr	r1, [pc, #72]	@ (800afa0 <lwip_netconn_is_err_msg+0x60>)
 800af56:	4813      	ldr	r0, [pc, #76]	@ (800afa4 <lwip_netconn_is_err_msg+0x64>)
 800af58:	f00f f8dc 	bl	801a114 <iprintf>

  if (msg == &netconn_aborted) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a12      	ldr	r2, [pc, #72]	@ (800afa8 <lwip_netconn_is_err_msg+0x68>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d104      	bne.n	800af6e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	22f3      	movs	r2, #243	@ 0xf3
 800af68:	701a      	strb	r2, [r3, #0]
    return 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e012      	b.n	800af94 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a0e      	ldr	r2, [pc, #56]	@ (800afac <lwip_netconn_is_err_msg+0x6c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d104      	bne.n	800af80 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	22f2      	movs	r2, #242	@ 0xf2
 800af7a:	701a      	strb	r2, [r3, #0]
    return 1;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e009      	b.n	800af94 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a0b      	ldr	r2, [pc, #44]	@ (800afb0 <lwip_netconn_is_err_msg+0x70>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d104      	bne.n	800af92 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	22f1      	movs	r2, #241	@ 0xf1
 800af8c:	701a      	strb	r2, [r3, #0]
    return 1;
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	0801bae8 	.word	0x0801bae8
 800afa0:	0801bb54 	.word	0x0801bb54
 800afa4:	0801bb2c 	.word	0x0801bb2c
 800afa8:	0801f080 	.word	0x0801f080
 800afac:	0801f081 	.word	0x0801f081
 800afb0:	0801f082 	.word	0x0801f082

0800afb4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d105      	bne.n	800afd4 <recv_udp+0x20>
 800afc8:	4b34      	ldr	r3, [pc, #208]	@ (800b09c <recv_udp+0xe8>)
 800afca:	22e5      	movs	r2, #229	@ 0xe5
 800afcc:	4934      	ldr	r1, [pc, #208]	@ (800b0a0 <recv_udp+0xec>)
 800afce:	4835      	ldr	r0, [pc, #212]	@ (800b0a4 <recv_udp+0xf0>)
 800afd0:	f00f f8a0 	bl	801a114 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d105      	bne.n	800afe6 <recv_udp+0x32>
 800afda:	4b30      	ldr	r3, [pc, #192]	@ (800b09c <recv_udp+0xe8>)
 800afdc:	22e6      	movs	r2, #230	@ 0xe6
 800afde:	4932      	ldr	r1, [pc, #200]	@ (800b0a8 <recv_udp+0xf4>)
 800afe0:	4830      	ldr	r0, [pc, #192]	@ (800b0a4 <recv_udp+0xf0>)
 800afe2:	f00f f897 	bl	801a114 <iprintf>
  conn = (struct netconn *)arg;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d103      	bne.n	800aff8 <recv_udp+0x44>
    pbuf_free(p);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f003 fbfd 	bl	800e7f0 <pbuf_free>
    return;
 800aff6:	e04d      	b.n	800b094 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d005      	beq.n	800b00e <recv_udp+0x5a>
 800b002:	4b26      	ldr	r3, [pc, #152]	@ (800b09c <recv_udp+0xe8>)
 800b004:	22ee      	movs	r2, #238	@ 0xee
 800b006:	4929      	ldr	r1, [pc, #164]	@ (800b0ac <recv_udp+0xf8>)
 800b008:	4826      	ldr	r0, [pc, #152]	@ (800b0a4 <recv_udp+0xf0>)
 800b00a:	f00f f883 	bl	801a114 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	3310      	adds	r3, #16
 800b012:	4618      	mov	r0, r3
 800b014:	f00e fe45 	bl	8019ca2 <sys_mbox_valid>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d103      	bne.n	800b026 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f003 fbe6 	bl	800e7f0 <pbuf_free>
    return;
 800b024:	e036      	b.n	800b094 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b026:	2006      	movs	r0, #6
 800b028:	f002 fd3a 	bl	800daa0 <memp_malloc>
 800b02c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d103      	bne.n	800b03c <recv_udp+0x88>
    pbuf_free(p);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f003 fbdb 	bl	800e7f0 <pbuf_free>
    return;
 800b03a:	e02b      	b.n	800b094 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <recv_udp+0xa0>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	e000      	b.n	800b056 <recv_udp+0xa2>
 800b054:	2300      	movs	r3, #0
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b05e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	891b      	ldrh	r3, [r3, #8]
 800b064:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	3310      	adds	r3, #16
 800b06a:	69b9      	ldr	r1, [r7, #24]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f00e fda3 	bl	8019bb8 <sys_mbox_trypost>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b078:	69b8      	ldr	r0, [r7, #24]
 800b07a:	f001 fc51 	bl	800c920 <netbuf_delete>
    return;
 800b07e:	e009      	b.n	800b094 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <recv_udp+0xe0>
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	8afa      	ldrh	r2, [r7, #22]
 800b08e:	2100      	movs	r1, #0
 800b090:	69f8      	ldr	r0, [r7, #28]
 800b092:	4798      	blx	r3
  }
}
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0801bae8 	.word	0x0801bae8
 800b0a0:	0801bb60 	.word	0x0801bb60
 800b0a4:	0801bb2c 	.word	0x0801bb2c
 800b0a8:	0801bb84 	.word	0x0801bb84
 800b0ac:	0801bba4 	.word	0x0801bba4

0800b0b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <recv_tcp+0x22>
 800b0c4:	4b36      	ldr	r3, [pc, #216]	@ (800b1a0 <recv_tcp+0xf0>)
 800b0c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b0ca:	4936      	ldr	r1, [pc, #216]	@ (800b1a4 <recv_tcp+0xf4>)
 800b0cc:	4836      	ldr	r0, [pc, #216]	@ (800b1a8 <recv_tcp+0xf8>)
 800b0ce:	f00f f821 	bl	801a114 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <recv_tcp+0x36>
 800b0d8:	4b31      	ldr	r3, [pc, #196]	@ (800b1a0 <recv_tcp+0xf0>)
 800b0da:	f240 122d 	movw	r2, #301	@ 0x12d
 800b0de:	4933      	ldr	r1, [pc, #204]	@ (800b1ac <recv_tcp+0xfc>)
 800b0e0:	4831      	ldr	r0, [pc, #196]	@ (800b1a8 <recv_tcp+0xf8>)
 800b0e2:	f00f f817 	bl	801a114 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b0e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <recv_tcp+0x4c>
 800b0ee:	4b2c      	ldr	r3, [pc, #176]	@ (800b1a0 <recv_tcp+0xf0>)
 800b0f0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800b0f4:	492e      	ldr	r1, [pc, #184]	@ (800b1b0 <recv_tcp+0x100>)
 800b0f6:	482c      	ldr	r0, [pc, #176]	@ (800b1a8 <recv_tcp+0xf8>)
 800b0f8:	f00f f80c 	bl	801a114 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <recv_tcp+0x5c>
    return ERR_VAL;
 800b106:	f06f 0305 	mvn.w	r3, #5
 800b10a:	e045      	b.n	800b198 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	429a      	cmp	r2, r3
 800b114:	d006      	beq.n	800b124 <recv_tcp+0x74>
 800b116:	4b22      	ldr	r3, [pc, #136]	@ (800b1a0 <recv_tcp+0xf0>)
 800b118:	f240 1235 	movw	r2, #309	@ 0x135
 800b11c:	4925      	ldr	r1, [pc, #148]	@ (800b1b4 <recv_tcp+0x104>)
 800b11e:	4822      	ldr	r0, [pc, #136]	@ (800b1a8 <recv_tcp+0xf8>)
 800b120:	f00e fff8 	bl	801a114 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	3310      	adds	r3, #16
 800b128:	4618      	mov	r0, r3
 800b12a:	f00e fdba 	bl	8019ca2 <sys_mbox_valid>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10d      	bne.n	800b150 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d008      	beq.n	800b14c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	891b      	ldrh	r3, [r3, #8]
 800b13e:	4619      	mov	r1, r3
 800b140:	68b8      	ldr	r0, [r7, #8]
 800b142:	f004 fb13 	bl	800f76c <tcp_recved>
      pbuf_free(p);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f003 fb52 	bl	800e7f0 <pbuf_free>
    }
    return ERR_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e023      	b.n	800b198 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <recv_tcp+0xb2>
    msg = p;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	891b      	ldrh	r3, [r3, #8]
 800b15e:	83fb      	strh	r3, [r7, #30]
 800b160:	e003      	b.n	800b16a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b162:	4b15      	ldr	r3, [pc, #84]	@ (800b1b8 <recv_tcp+0x108>)
 800b164:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3310      	adds	r3, #16
 800b16e:	69b9      	ldr	r1, [r7, #24]
 800b170:	4618      	mov	r0, r3
 800b172:	f00e fd21 	bl	8019bb8 <sys_mbox_trypost>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295
 800b180:	e00a      	b.n	800b198 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <recv_tcp+0xe6>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	8bfa      	ldrh	r2, [r7, #30]
 800b190:	2100      	movs	r1, #0
 800b192:	6978      	ldr	r0, [r7, #20]
 800b194:	4798      	blx	r3
  }

  return ERR_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	0801bae8 	.word	0x0801bae8
 800b1a4:	0801bbc4 	.word	0x0801bbc4
 800b1a8:	0801bb2c 	.word	0x0801bb2c
 800b1ac:	0801bbe8 	.word	0x0801bbe8
 800b1b0:	0801bc08 	.word	0x0801bc08
 800b1b4:	0801bc20 	.word	0x0801bc20
 800b1b8:	0801f082 	.word	0x0801f082

0800b1bc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <poll_tcp+0x22>
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b27c <poll_tcp+0xc0>)
 800b1d2:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800b1d6:	492a      	ldr	r1, [pc, #168]	@ (800b280 <poll_tcp+0xc4>)
 800b1d8:	482a      	ldr	r0, [pc, #168]	@ (800b284 <poll_tcp+0xc8>)
 800b1da:	f00e ff9b 	bl	801a114 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d104      	bne.n	800b1f0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f001 f8b3 	bl	800c354 <lwip_netconn_do_writemore>
 800b1ee:	e016      	b.n	800b21e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	785b      	ldrb	r3, [r3, #1]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d112      	bne.n	800b21e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00a      	beq.n	800b216 <poll_tcp+0x5a>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	7a5b      	ldrb	r3, [r3, #9]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	7a5a      	ldrb	r2, [r3, #9]
 800b210:	3a01      	subs	r2, #1
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b216:	2101      	movs	r1, #1
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 fbf7 	bl	800ba0c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7e1b      	ldrb	r3, [r3, #24]
 800b222:	f003 0310 	and.w	r3, r3, #16
 800b226:	2b00      	cmp	r3, #0
 800b228:	d022      	beq.n	800b270 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01e      	beq.n	800b270 <poll_tcp+0xb4>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b23a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b23e:	4293      	cmp	r3, r2
 800b240:	d916      	bls.n	800b270 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b24a:	2b07      	cmp	r3, #7
 800b24c:	d810      	bhi.n	800b270 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	7e1b      	ldrb	r3, [r3, #24]
 800b252:	f023 0310 	bic.w	r3, r3, #16
 800b256:	b2da      	uxtb	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d005      	beq.n	800b270 <poll_tcp+0xb4>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	2200      	movs	r2, #0
 800b26a:	2102      	movs	r1, #2
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	0801bae8 	.word	0x0801bae8
 800b280:	0801bc40 	.word	0x0801bc40
 800b284:	0801bb2c 	.word	0x0801bb2c

0800b288 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4613      	mov	r3, r2
 800b294:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <sent_tcp+0x26>
 800b2a0:	4b21      	ldr	r3, [pc, #132]	@ (800b328 <sent_tcp+0xa0>)
 800b2a2:	f240 1293 	movw	r2, #403	@ 0x193
 800b2a6:	4921      	ldr	r1, [pc, #132]	@ (800b32c <sent_tcp+0xa4>)
 800b2a8:	4821      	ldr	r0, [pc, #132]	@ (800b330 <sent_tcp+0xa8>)
 800b2aa:	f00e ff33 	bl	801a114 <iprintf>

  if (conn) {
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d033      	beq.n	800b31c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d104      	bne.n	800b2c6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b2bc:	2101      	movs	r1, #1
 800b2be:	6978      	ldr	r0, [r7, #20]
 800b2c0:	f001 f848 	bl	800c354 <lwip_netconn_do_writemore>
 800b2c4:	e007      	b.n	800b2d6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d103      	bne.n	800b2d6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	6978      	ldr	r0, [r7, #20]
 800b2d2:	f000 fb9b 	bl	800ba0c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01e      	beq.n	800b31c <sent_tcp+0x94>
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b2e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d916      	bls.n	800b31c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b2f6:	2b07      	cmp	r3, #7
 800b2f8:	d810      	bhi.n	800b31c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	7e1b      	ldrb	r3, [r3, #24]
 800b2fe:	f023 0310 	bic.w	r3, r3, #16
 800b302:	b2da      	uxtb	r2, r3
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	6a1b      	ldr	r3, [r3, #32]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <sent_tcp+0x94>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	88fa      	ldrh	r2, [r7, #6]
 800b316:	2102      	movs	r1, #2
 800b318:	6978      	ldr	r0, [r7, #20]
 800b31a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	0801bae8 	.word	0x0801bae8
 800b32c:	0801bc40 	.word	0x0801bc40
 800b330:	0801bb2c 	.word	0x0801bb2c

0800b334 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <err_tcp+0x24>
 800b34a:	4b5f      	ldr	r3, [pc, #380]	@ (800b4c8 <err_tcp+0x194>)
 800b34c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800b350:	495e      	ldr	r1, [pc, #376]	@ (800b4cc <err_tcp+0x198>)
 800b352:	485f      	ldr	r0, [pc, #380]	@ (800b4d0 <err_tcp+0x19c>)
 800b354:	f00e fede 	bl	801a114 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b358:	f00e fdbe 	bl	8019ed8 <sys_arch_protect>
 800b35c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2200      	movs	r2, #0
 800b362:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	7e1b      	ldrb	r3, [r3, #24]
 800b36e:	f043 0301 	orr.w	r3, r3, #1
 800b372:	b2da      	uxtb	r2, r3
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	2200      	movs	r2, #0
 800b382:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b384:	69b8      	ldr	r0, [r7, #24]
 800b386:	f00e fdb5 	bl	8019ef4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <err_tcp+0x6a>
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	2200      	movs	r2, #0
 800b398:	2104      	movs	r1, #4
 800b39a:	69f8      	ldr	r0, [r7, #28]
 800b39c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <err_tcp+0x7e>
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	69f8      	ldr	r0, [r7, #28]
 800b3b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d005      	beq.n	800b3c6 <err_tcp+0x92>
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2102      	movs	r1, #2
 800b3c2:	69f8      	ldr	r0, [r7, #28]
 800b3c4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b3c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fd82 	bl	800aed4 <lwip_netconn_err_to_msg>
 800b3d0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	3310      	adds	r3, #16
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f00e fc63 	bl	8019ca2 <sys_mbox_valid>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	3310      	adds	r3, #16
 800b3e6:	6939      	ldr	r1, [r7, #16]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f00e fbe5 	bl	8019bb8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	3314      	adds	r3, #20
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f00e fc55 	bl	8019ca2 <sys_mbox_valid>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	3314      	adds	r3, #20
 800b402:	6939      	ldr	r1, [r7, #16]
 800b404:	4618      	mov	r0, r3
 800b406:	f00e fbd7 	bl	8019bb8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d005      	beq.n	800b41c <err_tcp+0xe8>
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	2b04      	cmp	r3, #4
 800b414:	d002      	beq.n	800b41c <err_tcp+0xe8>
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d143      	bne.n	800b4a4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	7e1b      	ldrb	r3, [r3, #24]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b00      	cmp	r3, #0
 800b426:	bf14      	ite	ne
 800b428:	2301      	movne	r3, #1
 800b42a:	2300      	moveq	r3, #0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	7e1b      	ldrb	r3, [r3, #24]
 800b434:	f023 0304 	bic.w	r3, r3, #4
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d13b      	bne.n	800b4bc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <err_tcp+0x126>
 800b44c:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c8 <err_tcp+0x194>)
 800b44e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b452:	4920      	ldr	r1, [pc, #128]	@ (800b4d4 <err_tcp+0x1a0>)
 800b454:	481e      	ldr	r0, [pc, #120]	@ (800b4d0 <err_tcp+0x19c>)
 800b456:	f00e fe5d 	bl	801a114 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d104      	bne.n	800b46a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	2200      	movs	r2, #0
 800b466:	711a      	strb	r2, [r3, #4]
 800b468:	e003      	b.n	800b472 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	78fa      	ldrb	r2, [r7, #3]
 800b470:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	330c      	adds	r3, #12
 800b47a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b47c:	68b8      	ldr	r0, [r7, #8]
 800b47e:	f00e fca1 	bl	8019dc4 <sys_sem_valid>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <err_tcp+0x162>
 800b488:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c8 <err_tcp+0x194>)
 800b48a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800b48e:	4912      	ldr	r1, [pc, #72]	@ (800b4d8 <err_tcp+0x1a4>)
 800b490:	480f      	ldr	r0, [pc, #60]	@ (800b4d0 <err_tcp+0x19c>)
 800b492:	f00e fe3f 	bl	801a114 <iprintf>
      conn->current_msg = NULL;
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	2200      	movs	r2, #0
 800b49a:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b49c:	68b8      	ldr	r0, [r7, #8]
 800b49e:	f00e fc77 	bl	8019d90 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b4a2:	e00b      	b.n	800b4bc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d008      	beq.n	800b4be <err_tcp+0x18a>
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <err_tcp+0x194>)
 800b4ae:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800b4b2:	490a      	ldr	r1, [pc, #40]	@ (800b4dc <err_tcp+0x1a8>)
 800b4b4:	4806      	ldr	r0, [pc, #24]	@ (800b4d0 <err_tcp+0x19c>)
 800b4b6:	f00e fe2d 	bl	801a114 <iprintf>
  }
}
 800b4ba:	e000      	b.n	800b4be <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b4bc:	bf00      	nop
}
 800b4be:	bf00      	nop
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	0801bae8 	.word	0x0801bae8
 800b4cc:	0801bc40 	.word	0x0801bc40
 800b4d0:	0801bb2c 	.word	0x0801bb2c
 800b4d4:	0801bc50 	.word	0x0801bc50
 800b4d8:	0801bc6c 	.word	0x0801bc6c
 800b4dc:	0801bc88 	.word	0x0801bc88

0800b4e0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f005 f8dd 	bl	80106b0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b4f6:	490a      	ldr	r1, [pc, #40]	@ (800b520 <setup_tcp+0x40>)
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f005 f8eb 	bl	80106d4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b4fe:	4909      	ldr	r1, [pc, #36]	@ (800b524 <setup_tcp+0x44>)
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f005 f909 	bl	8010718 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b506:	2202      	movs	r2, #2
 800b508:	4907      	ldr	r1, [pc, #28]	@ (800b528 <setup_tcp+0x48>)
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f005 f95e 	bl	80107cc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b510:	4906      	ldr	r1, [pc, #24]	@ (800b52c <setup_tcp+0x4c>)
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f005 f920 	bl	8010758 <tcp_err>
}
 800b518:	bf00      	nop
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	0800b0b1 	.word	0x0800b0b1
 800b524:	0800b289 	.word	0x0800b289
 800b528:	0800b1bd 	.word	0x0800b1bd
 800b52c:	0800b335 	.word	0x0800b335

0800b530 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b089      	sub	sp, #36	@ 0x24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4613      	mov	r3, r2
 800b53c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <accept_function+0x1e>
    return ERR_VAL;
 800b548:	f06f 0305 	mvn.w	r3, #5
 800b54c:	e0a1      	b.n	800b692 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	3314      	adds	r3, #20
 800b552:	4618      	mov	r0, r3
 800b554:	f00e fba5 	bl	8019ca2 <sys_mbox_valid>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b55e:	f06f 0305 	mvn.w	r3, #5
 800b562:	e096      	b.n	800b692 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d11b      	bne.n	800b5a2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	f103 0414 	add.w	r4, r3, #20
 800b570:	f06f 000c 	mvn.w	r0, #12
 800b574:	f7ff fcae 	bl	800aed4 <lwip_netconn_err_to_msg>
 800b578:	4603      	mov	r3, r0
 800b57a:	4619      	mov	r1, r3
 800b57c:	4620      	mov	r0, r4
 800b57e:	f00e fb1b 	bl	8019bb8 <sys_mbox_trypost>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d109      	bne.n	800b59c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <accept_function+0x6c>
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	2200      	movs	r2, #0
 800b596:	2100      	movs	r1, #0
 800b598:	69f8      	ldr	r0, [r7, #28]
 800b59a:	4798      	blx	r3
    }
    return ERR_VAL;
 800b59c:	f06f 0305 	mvn.w	r3, #5
 800b5a0:	e077      	b.n	800b692 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <accept_function+0x88>
 800b5aa:	4b3c      	ldr	r3, [pc, #240]	@ (800b69c <accept_function+0x16c>)
 800b5ac:	f240 222a 	movw	r2, #554	@ 0x22a
 800b5b0:	493b      	ldr	r1, [pc, #236]	@ (800b6a0 <accept_function+0x170>)
 800b5b2:	483c      	ldr	r0, [pc, #240]	@ (800b6a4 <accept_function+0x174>)
 800b5b4:	f00e fdae 	bl	801a114 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f000 f8f0 	bl	800b7a8 <netconn_alloc>
 800b5c8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11b      	bne.n	800b608 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	f103 0414 	add.w	r4, r3, #20
 800b5d6:	f06f 000c 	mvn.w	r0, #12
 800b5da:	f7ff fc7b 	bl	800aed4 <lwip_netconn_err_to_msg>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f00e fae8 	bl	8019bb8 <sys_mbox_trypost>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <accept_function+0xd2>
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	69f8      	ldr	r0, [r7, #28]
 800b600:	4798      	blx	r3
    }
    return ERR_MEM;
 800b602:	f04f 33ff 	mov.w	r3, #4294967295
 800b606:	e044      	b.n	800b692 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b60e:	69b8      	ldr	r0, [r7, #24]
 800b610:	f7ff ff66 	bl	800b4e0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	3314      	adds	r3, #20
 800b618:	69b9      	ldr	r1, [r7, #24]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f00e facc 	bl	8019bb8 <sys_mbox_trypost>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d02a      	beq.n	800b67c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b62c:	2100      	movs	r1, #0
 800b62e:	6978      	ldr	r0, [r7, #20]
 800b630:	f005 f83e 	bl	80106b0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b634:	2100      	movs	r1, #0
 800b636:	6978      	ldr	r0, [r7, #20]
 800b638:	f005 f84c 	bl	80106d4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b63c:	2100      	movs	r1, #0
 800b63e:	6978      	ldr	r0, [r7, #20]
 800b640:	f005 f86a 	bl	8010718 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b644:	2200      	movs	r2, #0
 800b646:	2100      	movs	r1, #0
 800b648:	6978      	ldr	r0, [r7, #20]
 800b64a:	f005 f8bf 	bl	80107cc <tcp_poll>
    tcp_err(pcb, NULL);
 800b64e:	2100      	movs	r1, #0
 800b650:	6978      	ldr	r0, [r7, #20]
 800b652:	f005 f881 	bl	8010758 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	2200      	movs	r2, #0
 800b65a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	3310      	adds	r3, #16
 800b660:	4618      	mov	r0, r3
 800b662:	f00e fa81 	bl	8019b68 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	3310      	adds	r3, #16
 800b66a:	4618      	mov	r0, r3
 800b66c:	f00e fb2a 	bl	8019cc4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b670:	69b8      	ldr	r0, [r7, #24]
 800b672:	f000 f903 	bl	800b87c <netconn_free>
    return ERR_MEM;
 800b676:	f04f 33ff 	mov.w	r3, #4294967295
 800b67a:	e00a      	b.n	800b692 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <accept_function+0x160>
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	2200      	movs	r2, #0
 800b68a:	2100      	movs	r1, #0
 800b68c:	69f8      	ldr	r0, [r7, #28]
 800b68e:	4798      	blx	r3
  }

  return ERR_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3724      	adds	r7, #36	@ 0x24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd90      	pop	{r4, r7, pc}
 800b69a:	bf00      	nop
 800b69c:	0801bae8 	.word	0x0801bae8
 800b6a0:	0801bca4 	.word	0x0801bca4
 800b6a4:	0801bb2c 	.word	0x0801bb2c

0800b6a8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b6a8:	b590      	push	{r4, r7, lr}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <pcb_new+0x24>
 800b6be:	4b2b      	ldr	r3, [pc, #172]	@ (800b76c <pcb_new+0xc4>)
 800b6c0:	f240 2265 	movw	r2, #613	@ 0x265
 800b6c4:	492a      	ldr	r1, [pc, #168]	@ (800b770 <pcb_new+0xc8>)
 800b6c6:	482b      	ldr	r0, [pc, #172]	@ (800b774 <pcb_new+0xcc>)
 800b6c8:	f00e fd24 	bl	801a114 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6d6:	2b10      	cmp	r3, #16
 800b6d8:	d022      	beq.n	800b720 <pcb_new+0x78>
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d133      	bne.n	800b746 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f009 ff7a 	bl	80155de <udp_new_ip_type>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02a      	beq.n	800b74e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b22      	cmp	r3, #34	@ 0x22
 800b700:	d104      	bne.n	800b70c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6858      	ldr	r0, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	4917      	ldr	r1, [pc, #92]	@ (800b778 <pcb_new+0xd0>)
 800b71a:	f009 fee7 	bl	80154ec <udp_recv>
      }
      break;
 800b71e:	e016      	b.n	800b74e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681c      	ldr	r4, [r3, #0]
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	4618      	mov	r0, r3
 800b728:	f004 ffb4 	bl	8010694 <tcp_new_ip_type>
 800b72c:	4603      	mov	r3, r0
 800b72e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00b      	beq.n	800b752 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fece 	bl	800b4e0 <setup_tcp>
      }
      break;
 800b744:	e005      	b.n	800b752 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	22fa      	movs	r2, #250	@ 0xfa
 800b74a:	711a      	strb	r2, [r3, #4]
      return;
 800b74c:	e00a      	b.n	800b764 <pcb_new+0xbc>
      break;
 800b74e:	bf00      	nop
 800b750:	e000      	b.n	800b754 <pcb_new+0xac>
      break;
 800b752:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d102      	bne.n	800b764 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	22ff      	movs	r2, #255	@ 0xff
 800b762:	711a      	strb	r2, [r3, #4]
  }
}
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	bd90      	pop	{r4, r7, pc}
 800b76a:	bf00      	nop
 800b76c:	0801bae8 	.word	0x0801bae8
 800b770:	0801bccc 	.word	0x0801bccc
 800b774:	0801bb2c 	.word	0x0801bb2c
 800b778:	0800afb5 	.word	0x0800afb5

0800b77c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff ff85 	bl	800b6a8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b79e:	bf00      	nop
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b7b8:	2007      	movs	r0, #7
 800b7ba:	f002 f971 	bl	800daa0 <memp_malloc>
 800b7be:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <netconn_alloc+0x22>
    return NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e04e      	b.n	800b868 <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	79fa      	ldrb	r2, [r7, #7]
 800b7d4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	d004      	beq.n	800b7f0 <netconn_alloc+0x48>
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	d105      	bne.n	800b7f6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b7ea:	2306      	movs	r3, #6
 800b7ec:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b7ee:	e00a      	b.n	800b806 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b7f0:	2306      	movs	r3, #6
 800b7f2:	617b      	str	r3, [r7, #20]
      break;
 800b7f4:	e007      	b.n	800b806 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b7f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b870 <netconn_alloc+0xc8>)
 800b7f8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800b7fc:	491d      	ldr	r1, [pc, #116]	@ (800b874 <netconn_alloc+0xcc>)
 800b7fe:	481e      	ldr	r0, [pc, #120]	@ (800b878 <netconn_alloc+0xd0>)
 800b800:	f00e fc88 	bl	801a114 <iprintf>
      goto free_and_return;
 800b804:	e02b      	b.n	800b85e <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3310      	adds	r3, #16
 800b80a:	6979      	ldr	r1, [r7, #20]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f00e f989 	bl	8019b24 <sys_mbox_new>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d121      	bne.n	800b85c <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	330c      	adds	r3, #12
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f00e fa5d 	bl	8019cde <sys_sem_new>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3310      	adds	r3, #16
 800b82e:	4618      	mov	r0, r3
 800b830:	f00e f99a 	bl	8019b68 <sys_mbox_free>
    goto free_and_return;
 800b834:	e013      	b.n	800b85e <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3314      	adds	r3, #20
 800b83a:	4618      	mov	r0, r3
 800b83c:	f00e fa42 	bl	8019cc4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	7cfa      	ldrb	r2, [r7, #19]
 800b856:	761a      	strb	r2, [r3, #24]
  return conn;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	e005      	b.n	800b868 <netconn_alloc+0xc0>
    goto free_and_return;
 800b85c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	2007      	movs	r0, #7
 800b862:	f002 f96f 	bl	800db44 <memp_free>
  return NULL;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	0801bae8 	.word	0x0801bae8
 800b874:	0801bcec 	.word	0x0801bcec
 800b878:	0801bb2c 	.word	0x0801bb2c

0800b87c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d006      	beq.n	800b89a <netconn_free+0x1e>
 800b88c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8fc <netconn_free+0x80>)
 800b88e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b892:	491b      	ldr	r1, [pc, #108]	@ (800b900 <netconn_free+0x84>)
 800b894:	481b      	ldr	r0, [pc, #108]	@ (800b904 <netconn_free+0x88>)
 800b896:	f00e fc3d 	bl	801a114 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3310      	adds	r3, #16
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f00e f9ff 	bl	8019ca2 <sys_mbox_valid>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d006      	beq.n	800b8b8 <netconn_free+0x3c>
 800b8aa:	4b14      	ldr	r3, [pc, #80]	@ (800b8fc <netconn_free+0x80>)
 800b8ac:	f240 3223 	movw	r2, #803	@ 0x323
 800b8b0:	4915      	ldr	r1, [pc, #84]	@ (800b908 <netconn_free+0x8c>)
 800b8b2:	4814      	ldr	r0, [pc, #80]	@ (800b904 <netconn_free+0x88>)
 800b8b4:	f00e fc2e 	bl	801a114 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f00e f9f0 	bl	8019ca2 <sys_mbox_valid>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d006      	beq.n	800b8d6 <netconn_free+0x5a>
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <netconn_free+0x80>)
 800b8ca:	f240 3226 	movw	r2, #806	@ 0x326
 800b8ce:	490f      	ldr	r1, [pc, #60]	@ (800b90c <netconn_free+0x90>)
 800b8d0:	480c      	ldr	r0, [pc, #48]	@ (800b904 <netconn_free+0x88>)
 800b8d2:	f00e fc1f 	bl	801a114 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	330c      	adds	r3, #12
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f00e fa65 	bl	8019daa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	330c      	adds	r3, #12
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f00e fa7e 	bl	8019de6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	2007      	movs	r0, #7
 800b8ee:	f002 f929 	bl	800db44 <memp_free>
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0801bae8 	.word	0x0801bae8
 800b900:	0801bd14 	.word	0x0801bd14
 800b904:	0801bb2c 	.word	0x0801bb2c
 800b908:	0801bd44 	.word	0x0801bd44
 800b90c:	0801bd80 	.word	0x0801bd80

0800b910 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3310      	adds	r3, #16
 800b91c:	4618      	mov	r0, r3
 800b91e:	f00e f9c0 	bl	8019ca2 <sys_mbox_valid>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d02f      	beq.n	800b988 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b928:	e018      	b.n	800b95c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b932:	2b10      	cmp	r3, #16
 800b934:	d10e      	bne.n	800b954 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f107 020f 	add.w	r2, r7, #15
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff fafe 	bl	800af40 <lwip_netconn_is_err_msg>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d108      	bne.n	800b95c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f002 ff4f 	bl	800e7f0 <pbuf_free>
 800b952:	e003      	b.n	800b95c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 ffe2 	bl	800c920 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3310      	adds	r3, #16
 800b960:	f107 0210 	add.w	r2, r7, #16
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f00e f97f 	bl	8019c6a <sys_arch_mbox_tryfetch>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d1da      	bne.n	800b92a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3310      	adds	r3, #16
 800b978:	4618      	mov	r0, r3
 800b97a:	f00e f8f5 	bl	8019b68 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3310      	adds	r3, #16
 800b982:	4618      	mov	r0, r3
 800b984:	f00e f99e 	bl	8019cc4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3314      	adds	r3, #20
 800b98c:	4618      	mov	r0, r3
 800b98e:	f00e f988 	bl	8019ca2 <sys_mbox_valid>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d034      	beq.n	800ba02 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b998:	e01d      	b.n	800b9d6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f107 020e 	add.w	r2, r7, #14
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff facc 	bl	800af40 <lwip_netconn_is_err_msg>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d113      	bne.n	800b9d6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7ff ffac 	bl	800b910 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d007      	beq.n	800b9d0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f003 fd09 	bl	800f3dc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b9d0:	6978      	ldr	r0, [r7, #20]
 800b9d2:	f7ff ff53 	bl	800b87c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3314      	adds	r3, #20
 800b9da:	f107 0210 	add.w	r2, r7, #16
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f00e f942 	bl	8019c6a <sys_arch_mbox_tryfetch>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ec:	d1d5      	bne.n	800b99a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3314      	adds	r3, #20
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f00e f8b8 	bl	8019b68 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f00e f961 	bl	8019cc4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ba02:	bf00      	nop
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d106      	bne.n	800ba30 <lwip_netconn_do_close_internal+0x24>
 800ba22:	4b87      	ldr	r3, [pc, #540]	@ (800bc40 <lwip_netconn_do_close_internal+0x234>)
 800ba24:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800ba28:	4986      	ldr	r1, [pc, #536]	@ (800bc44 <lwip_netconn_do_close_internal+0x238>)
 800ba2a:	4887      	ldr	r0, [pc, #540]	@ (800bc48 <lwip_netconn_do_close_internal+0x23c>)
 800ba2c:	f00e fb72 	bl	801a114 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba38:	2b10      	cmp	r3, #16
 800ba3a:	d006      	beq.n	800ba4a <lwip_netconn_do_close_internal+0x3e>
 800ba3c:	4b80      	ldr	r3, [pc, #512]	@ (800bc40 <lwip_netconn_do_close_internal+0x234>)
 800ba3e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800ba42:	4982      	ldr	r1, [pc, #520]	@ (800bc4c <lwip_netconn_do_close_internal+0x240>)
 800ba44:	4880      	ldr	r0, [pc, #512]	@ (800bc48 <lwip_netconn_do_close_internal+0x23c>)
 800ba46:	f00e fb65 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b04      	cmp	r3, #4
 800ba50:	d006      	beq.n	800ba60 <lwip_netconn_do_close_internal+0x54>
 800ba52:	4b7b      	ldr	r3, [pc, #492]	@ (800bc40 <lwip_netconn_do_close_internal+0x234>)
 800ba54:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800ba58:	497d      	ldr	r1, [pc, #500]	@ (800bc50 <lwip_netconn_do_close_internal+0x244>)
 800ba5a:	487b      	ldr	r0, [pc, #492]	@ (800bc48 <lwip_netconn_do_close_internal+0x23c>)
 800ba5c:	f00e fb5a 	bl	801a114 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <lwip_netconn_do_close_internal+0x6a>
 800ba68:	4b75      	ldr	r3, [pc, #468]	@ (800bc40 <lwip_netconn_do_close_internal+0x234>)
 800ba6a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800ba6e:	4979      	ldr	r1, [pc, #484]	@ (800bc54 <lwip_netconn_do_close_internal+0x248>)
 800ba70:	4875      	ldr	r0, [pc, #468]	@ (800bc48 <lwip_netconn_do_close_internal+0x23c>)
 800ba72:	f00e fb4f 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <lwip_netconn_do_close_internal+0x80>
 800ba7e:	4b70      	ldr	r3, [pc, #448]	@ (800bc40 <lwip_netconn_do_close_internal+0x234>)
 800ba80:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ba84:	4974      	ldr	r1, [pc, #464]	@ (800bc58 <lwip_netconn_do_close_internal+0x24c>)
 800ba86:	4870      	ldr	r0, [pc, #448]	@ (800bc48 <lwip_netconn_do_close_internal+0x23c>)
 800ba88:	f00e fb44 	bl	801a114 <iprintf>

  tpcb = conn->pcb.tcp;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	7a1b      	ldrb	r3, [r3, #8]
 800ba98:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	2b03      	cmp	r3, #3
 800baae:	d102      	bne.n	800bab6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800bab0:	2301      	movs	r3, #1
 800bab2:	75bb      	strb	r3, [r7, #22]
 800bab4:	e01f      	b.n	800baf6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00e      	beq.n	800bada <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800bac0:	2b05      	cmp	r3, #5
 800bac2:	d007      	beq.n	800bad4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d003      	beq.n	800bad4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d102      	bne.n	800bada <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800bad4:	2301      	movs	r3, #1
 800bad6:	75bb      	strb	r3, [r7, #22]
 800bad8:	e00d      	b.n	800baf6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bada:	7b7b      	ldrb	r3, [r7, #13]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d008      	beq.n	800baf2 <lwip_netconn_do_close_internal+0xe6>
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	8b5b      	ldrh	r3, [r3, #26]
 800bae4:	f003 0310 	and.w	r3, r3, #16
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800baec:	2301      	movs	r3, #1
 800baee:	75bb      	strb	r3, [r7, #22]
 800baf0:	e001      	b.n	800baf6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800baf6:	7dbb      	ldrb	r3, [r7, #22]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800bafc:	2100      	movs	r1, #0
 800bafe:	6938      	ldr	r0, [r7, #16]
 800bb00:	f004 fdd6 	bl	80106b0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	7d1b      	ldrb	r3, [r3, #20]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d104      	bne.n	800bb16 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6938      	ldr	r0, [r7, #16]
 800bb10:	f004 fe44 	bl	801079c <tcp_accept>
 800bb14:	e01d      	b.n	800bb52 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d007      	beq.n	800bb2c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f004 fdd8 	bl	80106d4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bb24:	2100      	movs	r1, #0
 800bb26:	6938      	ldr	r0, [r7, #16]
 800bb28:	f004 fe38 	bl	801079c <tcp_accept>
    }
    if (shut_tx) {
 800bb2c:	7b7b      	ldrb	r3, [r7, #13]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800bb32:	2100      	movs	r1, #0
 800bb34:	6938      	ldr	r0, [r7, #16]
 800bb36:	f004 fdef 	bl	8010718 <tcp_sent>
    }
    if (shut_close) {
 800bb3a:	7dbb      	ldrb	r3, [r7, #22]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800bb40:	2200      	movs	r2, #0
 800bb42:	2100      	movs	r1, #0
 800bb44:	6938      	ldr	r0, [r7, #16]
 800bb46:	f004 fe41 	bl	80107cc <tcp_poll>
      tcp_err(tpcb, NULL);
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	6938      	ldr	r0, [r7, #16]
 800bb4e:	f004 fe03 	bl	8010758 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800bb52:	7dbb      	ldrb	r3, [r7, #22]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d005      	beq.n	800bb64 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f003 fb03 	bl	800f164 <tcp_close>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75fb      	strb	r3, [r7, #23]
 800bb62:	e007      	b.n	800bb74 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	7b7a      	ldrb	r2, [r7, #13]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6938      	ldr	r0, [r7, #16]
 800bb6c:	f003 fb26 	bl	800f1bc <tcp_shutdown>
 800bb70:	4603      	mov	r3, r0
 800bb72:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800bb74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d102      	bne.n	800bb82 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	757b      	strb	r3, [r7, #21]
 800bb80:	e016      	b.n	800bbb0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800bb82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8a:	d10f      	bne.n	800bbac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	7a5b      	ldrb	r3, [r3, #9]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10c      	bne.n	800bbb0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800bb96:	2301      	movs	r3, #1
 800bb98:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800bb9a:	7dbb      	ldrb	r3, [r7, #22]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800bba0:	6938      	ldr	r0, [r7, #16]
 800bba2:	f003 fc1b 	bl	800f3dc <tcp_abort>
          err = ERR_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
 800bbaa:	e001      	b.n	800bbb0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bbac:	2301      	movs	r3, #1
 800bbae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bbb0:	7d7b      	ldrb	r3, [r7, #21]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d052      	beq.n	800bc5c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	7dfa      	ldrb	r2, [r7, #23]
 800bbc6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800bbd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d129      	bne.n	800bc30 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bbdc:	7dbb      	ldrb	r3, [r7, #22]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00c      	beq.n	800bbfc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <lwip_netconn_do_close_internal+0x1f0>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2104      	movs	r1, #4
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	4798      	blx	r3
      }
      if (shut_rx) {
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d005      	beq.n	800bc16 <lwip_netconn_do_close_internal+0x20a>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2100      	movs	r1, #0
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
      }
      if (shut_tx) {
 800bc16:	7b7b      	ldrb	r3, [r7, #13]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d009      	beq.n	800bc30 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <lwip_netconn_do_close_internal+0x224>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2102      	movs	r1, #2
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bc36:	68b8      	ldr	r0, [r7, #8]
 800bc38:	f00e f8aa 	bl	8019d90 <sys_sem_signal>
    }
    return ERR_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e03c      	b.n	800bcba <lwip_netconn_do_close_internal+0x2ae>
 800bc40:	0801bae8 	.word	0x0801bae8
 800bc44:	0801bdbc 	.word	0x0801bdbc
 800bc48:	0801bb2c 	.word	0x0801bb2c
 800bc4c:	0801bdcc 	.word	0x0801bdcc
 800bc50:	0801bdec 	.word	0x0801bdec
 800bc54:	0801be10 	.word	0x0801be10
 800bc58:	0801bc50 	.word	0x0801bc50
  }
  if (!close_finished) {
 800bc5c:	7d7b      	ldrb	r3, [r7, #21]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d11e      	bne.n	800bca0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	7d1b      	ldrb	r3, [r3, #20]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d106      	bne.n	800bc78 <lwip_netconn_do_close_internal+0x26c>
 800bc6a:	4b16      	ldr	r3, [pc, #88]	@ (800bcc4 <lwip_netconn_do_close_internal+0x2b8>)
 800bc6c:	f240 4241 	movw	r2, #1089	@ 0x441
 800bc70:	4915      	ldr	r1, [pc, #84]	@ (800bcc8 <lwip_netconn_do_close_internal+0x2bc>)
 800bc72:	4816      	ldr	r0, [pc, #88]	@ (800bccc <lwip_netconn_do_close_internal+0x2c0>)
 800bc74:	f00e fa4e 	bl	801a114 <iprintf>
    if (shut_tx) {
 800bc78:	7b7b      	ldrb	r3, [r7, #13]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800bc7e:	4914      	ldr	r1, [pc, #80]	@ (800bcd0 <lwip_netconn_do_close_internal+0x2c4>)
 800bc80:	6938      	ldr	r0, [r7, #16]
 800bc82:	f004 fd49 	bl	8010718 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bc86:	2201      	movs	r2, #1
 800bc88:	4912      	ldr	r1, [pc, #72]	@ (800bcd4 <lwip_netconn_do_close_internal+0x2c8>)
 800bc8a:	6938      	ldr	r0, [r7, #16]
 800bc8c:	f004 fd9e 	bl	80107cc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bc90:	4911      	ldr	r1, [pc, #68]	@ (800bcd8 <lwip_netconn_do_close_internal+0x2cc>)
 800bc92:	6938      	ldr	r0, [r7, #16]
 800bc94:	f004 fd60 	bl	8010758 <tcp_err>
    tcp_arg(tpcb, conn);
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	6938      	ldr	r0, [r7, #16]
 800bc9c:	f004 fd08 	bl	80106b0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <lwip_netconn_do_close_internal+0x2aa>
 800bca8:	4b06      	ldr	r3, [pc, #24]	@ (800bcc4 <lwip_netconn_do_close_internal+0x2b8>)
 800bcaa:	f240 424d 	movw	r2, #1101	@ 0x44d
 800bcae:	490b      	ldr	r1, [pc, #44]	@ (800bcdc <lwip_netconn_do_close_internal+0x2d0>)
 800bcb0:	4806      	ldr	r0, [pc, #24]	@ (800bccc <lwip_netconn_do_close_internal+0x2c0>)
 800bcb2:	f00e fa2f 	bl	801a114 <iprintf>
  return err;
 800bcb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	0801bae8 	.word	0x0801bae8
 800bcc8:	0801be24 	.word	0x0801be24
 800bccc:	0801bb2c 	.word	0x0801bb2c
 800bcd0:	0800b289 	.word	0x0800b289
 800bcd4:	0800b1bd 	.word	0x0800b1bd
 800bcd8:	0800b335 	.word	0x0800b335
 800bcdc:	0801be48 	.word	0x0801be48

0800bce0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	785b      	ldrb	r3, [r3, #1]
 800bcf2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00d      	beq.n	800bd16 <lwip_netconn_do_delconn+0x36>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd04:	2b10      	cmp	r3, #16
 800bd06:	d006      	beq.n	800bd16 <lwip_netconn_do_delconn+0x36>
 800bd08:	4b60      	ldr	r3, [pc, #384]	@ (800be8c <lwip_netconn_do_delconn+0x1ac>)
 800bd0a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800bd0e:	4960      	ldr	r1, [pc, #384]	@ (800be90 <lwip_netconn_do_delconn+0x1b0>)
 800bd10:	4860      	ldr	r0, [pc, #384]	@ (800be94 <lwip_netconn_do_delconn+0x1b4>)
 800bd12:	f00e f9ff 	bl	801a114 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d005      	beq.n	800bd28 <lwip_netconn_do_delconn+0x48>
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d002      	beq.n	800bd28 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bd22:	7afb      	ldrb	r3, [r7, #11]
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	d109      	bne.n	800bd3c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d10a      	bne.n	800bd44 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	7e1b      	ldrb	r3, [r3, #24]
 800bd34:	f003 0304 	and.w	r3, r3, #4
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	22fb      	movs	r2, #251	@ 0xfb
 800bd40:	711a      	strb	r2, [r3, #4]
 800bd42:	e097      	b.n	800be74 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d10d      	bne.n	800bd66 <lwip_netconn_do_delconn+0x86>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	7e1b      	ldrb	r3, [r3, #24]
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d106      	bne.n	800bd66 <lwip_netconn_do_delconn+0x86>
 800bd58:	4b4c      	ldr	r3, [pc, #304]	@ (800be8c <lwip_netconn_do_delconn+0x1ac>)
 800bd5a:	f240 427a 	movw	r2, #1146	@ 0x47a
 800bd5e:	494e      	ldr	r1, [pc, #312]	@ (800be98 <lwip_netconn_do_delconn+0x1b8>)
 800bd60:	484c      	ldr	r0, [pc, #304]	@ (800be94 <lwip_netconn_do_delconn+0x1b4>)
 800bd62:	f00e f9d7 	bl	801a114 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fdcd 	bl	800b910 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d05f      	beq.n	800be40 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd8a:	2b10      	cmp	r3, #16
 800bd8c:	d00d      	beq.n	800bdaa <lwip_netconn_do_delconn+0xca>
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d151      	bne.n	800be36 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f009 fbc2 	bl	801552c <udp_remove>
          break;
 800bda8:	e046      	b.n	800be38 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	69db      	ldr	r3, [r3, #28]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d006      	beq.n	800bdc2 <lwip_netconn_do_delconn+0xe2>
 800bdb4:	4b35      	ldr	r3, [pc, #212]	@ (800be8c <lwip_netconn_do_delconn+0x1ac>)
 800bdb6:	f240 4294 	movw	r2, #1172	@ 0x494
 800bdba:	4938      	ldr	r1, [pc, #224]	@ (800be9c <lwip_netconn_do_delconn+0x1bc>)
 800bdbc:	4835      	ldr	r0, [pc, #212]	@ (800be94 <lwip_netconn_do_delconn+0x1b4>)
 800bdbe:	f00e f9a9 	bl	801a114 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2204      	movs	r2, #4
 800bdc8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2100      	movs	r1, #0
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fe14 	bl	800ba0c <lwip_netconn_do_close_internal>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d04b      	beq.n	800be82 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d006      	beq.n	800be02 <lwip_netconn_do_delconn+0x122>
 800bdf4:	4b25      	ldr	r3, [pc, #148]	@ (800be8c <lwip_netconn_do_delconn+0x1ac>)
 800bdf6:	f240 429a 	movw	r2, #1178	@ 0x49a
 800bdfa:	4929      	ldr	r1, [pc, #164]	@ (800bea0 <lwip_netconn_do_delconn+0x1c0>)
 800bdfc:	4825      	ldr	r0, [pc, #148]	@ (800be94 <lwip_netconn_do_delconn+0x1b4>)
 800bdfe:	f00e f989 	bl	801a114 <iprintf>
            UNLOCK_TCPIP_CORE();
 800be02:	4828      	ldr	r0, [pc, #160]	@ (800bea4 <lwip_netconn_do_delconn+0x1c4>)
 800be04:	f00e f835 	bl	8019e72 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	330c      	adds	r3, #12
 800be0e:	2100      	movs	r1, #0
 800be10:	4618      	mov	r0, r3
 800be12:	f00d ff8c 	bl	8019d2e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800be16:	4823      	ldr	r0, [pc, #140]	@ (800bea4 <lwip_netconn_do_delconn+0x1c4>)
 800be18:	f00e f81c 	bl	8019e54 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d02d      	beq.n	800be82 <lwip_netconn_do_delconn+0x1a2>
 800be26:	4b19      	ldr	r3, [pc, #100]	@ (800be8c <lwip_netconn_do_delconn+0x1ac>)
 800be28:	f240 429e 	movw	r2, #1182	@ 0x49e
 800be2c:	491c      	ldr	r1, [pc, #112]	@ (800bea0 <lwip_netconn_do_delconn+0x1c0>)
 800be2e:	4819      	ldr	r0, [pc, #100]	@ (800be94 <lwip_netconn_do_delconn+0x1b4>)
 800be30:	f00e f970 	bl	801a114 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800be34:	e025      	b.n	800be82 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800be36:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2200      	movs	r2, #0
 800be3e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d007      	beq.n	800be5a <lwip_netconn_do_delconn+0x17a>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	6810      	ldr	r0, [r2, #0]
 800be54:	2200      	movs	r2, #0
 800be56:	2100      	movs	r1, #0
 800be58:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d007      	beq.n	800be74 <lwip_netconn_do_delconn+0x194>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	6810      	ldr	r0, [r2, #0]
 800be6e:	2200      	movs	r2, #0
 800be70:	2102      	movs	r1, #2
 800be72:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	330c      	adds	r3, #12
 800be7a:	4618      	mov	r0, r3
 800be7c:	f00d ffa2 	bl	8019dc4 <sys_sem_valid>
 800be80:	e000      	b.n	800be84 <lwip_netconn_do_delconn+0x1a4>
          return;
 800be82:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	0801bae8 	.word	0x0801bae8
 800be90:	0801be58 	.word	0x0801be58
 800be94:	0801bb2c 	.word	0x0801bb2c
 800be98:	0801be6c 	.word	0x0801be6c
 800be9c:	0801be8c 	.word	0x0801be8c
 800bea0:	0801bea8 	.word	0x0801bea8
 800bea4:	2000b144 	.word	0x2000b144

0800bea8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d025      	beq.n	800bf0a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bec8:	2b10      	cmp	r3, #16
 800beca:	d00e      	beq.n	800beea <lwip_netconn_do_bind+0x42>
 800becc:	2b20      	cmp	r3, #32
 800bece:	d119      	bne.n	800bf04 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6858      	ldr	r0, [r3, #4]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	6899      	ldr	r1, [r3, #8]
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	899b      	ldrh	r3, [r3, #12]
 800bede:	461a      	mov	r2, r3
 800bee0:	f009 fa0e 	bl	8015300 <udp_bind>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
        break;
 800bee8:	e011      	b.n	800bf0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6858      	ldr	r0, [r3, #4]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6899      	ldr	r1, [r3, #8]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	899b      	ldrh	r3, [r3, #12]
 800bef8:	461a      	mov	r2, r3
 800befa:	f003 fa7b 	bl	800f3f4 <tcp_bind>
 800befe:	4603      	mov	r3, r0
 800bf00:	73fb      	strb	r3, [r7, #15]
        break;
 800bf02:	e004      	b.n	800bf0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800bf04:	23fa      	movs	r3, #250	@ 0xfa
 800bf06:	73fb      	strb	r3, [r7, #15]
        break;
 800bf08:	e001      	b.n	800bf0e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800bf0a:	23fa      	movs	r3, #250	@ 0xfa
 800bf0c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	7bfa      	ldrb	r2, [r7, #15]
 800bf12:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800bf38:	f06f 0305 	mvn.w	r3, #5
 800bf3c:	e070      	b.n	800c020 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d006      	beq.n	800bf54 <lwip_netconn_do_connected+0x38>
 800bf46:	4b38      	ldr	r3, [pc, #224]	@ (800c028 <lwip_netconn_do_connected+0x10c>)
 800bf48:	f240 5223 	movw	r2, #1315	@ 0x523
 800bf4c:	4937      	ldr	r1, [pc, #220]	@ (800c02c <lwip_netconn_do_connected+0x110>)
 800bf4e:	4838      	ldr	r0, [pc, #224]	@ (800c030 <lwip_netconn_do_connected+0x114>)
 800bf50:	f00e f8e0 	bl	801a114 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <lwip_netconn_do_connected+0x5a>
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	7e1b      	ldrb	r3, [r3, #24]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d106      	bne.n	800bf76 <lwip_netconn_do_connected+0x5a>
 800bf68:	4b2f      	ldr	r3, [pc, #188]	@ (800c028 <lwip_netconn_do_connected+0x10c>)
 800bf6a:	f240 5224 	movw	r2, #1316	@ 0x524
 800bf6e:	4931      	ldr	r1, [pc, #196]	@ (800c034 <lwip_netconn_do_connected+0x118>)
 800bf70:	482f      	ldr	r0, [pc, #188]	@ (800c030 <lwip_netconn_do_connected+0x114>)
 800bf72:	f00e f8cf 	bl	801a114 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	79fa      	ldrb	r2, [r7, #7]
 800bf84:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf98:	2b10      	cmp	r3, #16
 800bf9a:	d106      	bne.n	800bfaa <lwip_netconn_do_connected+0x8e>
 800bf9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d102      	bne.n	800bfaa <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800bfa4:	69b8      	ldr	r0, [r7, #24]
 800bfa6:	f7ff fa9b 	bl	800b4e0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	7e1b      	ldrb	r3, [r3, #24]
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	7e1b      	ldrb	r3, [r3, #24]
 800bfc2:	f023 0304 	bic.w	r3, r3, #4
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	761a      	strb	r2, [r3, #24]
  LWIP_ASSERT("blocking connect state error",
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <lwip_netconn_do_connected+0xbc>
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10c      	bne.n	800bff2 <lwip_netconn_do_connected+0xd6>
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <lwip_netconn_do_connected+0xc8>
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d006      	beq.n	800bff2 <lwip_netconn_do_connected+0xd6>
 800bfe4:	4b10      	ldr	r3, [pc, #64]	@ (800c028 <lwip_netconn_do_connected+0x10c>)
 800bfe6:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800bfea:	4913      	ldr	r1, [pc, #76]	@ (800c038 <lwip_netconn_do_connected+0x11c>)
 800bfec:	4810      	ldr	r0, [pc, #64]	@ (800c030 <lwip_netconn_do_connected+0x114>)
 800bfee:	f00e f891 	bl	801a114 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	2200      	movs	r2, #0
 800bff6:	61da      	str	r2, [r3, #28]
  conn->state = NETCONN_NONE;
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	2200      	movs	r2, #0
 800bffc:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <lwip_netconn_do_connected+0xf6>
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	2200      	movs	r2, #0
 800c00c:	2102      	movs	r1, #2
 800c00e:	69b8      	ldr	r0, [r7, #24]
 800c010:	4798      	blx	r3

  if (was_blocking) {
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d002      	beq.n	800c01e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c018:	69f8      	ldr	r0, [r7, #28]
 800c01a:	f00d feb9 	bl	8019d90 <sys_sem_signal>
  }
  return ERR_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	0801bae8 	.word	0x0801bae8
 800c02c:	0801beb0 	.word	0x0801beb0
 800c030:	0801bb2c 	.word	0x0801bb2c
 800c034:	0801bed0 	.word	0x0801bed0
 800c038:	0801bf10 	.word	0x0801bf10

0800c03c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d102      	bne.n	800c058 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c052:	23f1      	movs	r3, #241	@ 0xf1
 800c054:	75fb      	strb	r3, [r7, #23]
 800c056:	e09b      	b.n	800c190 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c062:	2b10      	cmp	r3, #16
 800c064:	d00f      	beq.n	800c086 <lwip_netconn_do_connect+0x4a>
 800c066:	2b20      	cmp	r3, #32
 800c068:	f040 8087 	bne.w	800c17a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6858      	ldr	r0, [r3, #4]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6899      	ldr	r1, [r3, #8]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f009 f9c8 	bl	8015410 <udp_connect>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
        break;
 800c084:	e084      	b.n	800c190 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d102      	bne.n	800c096 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c090:	23f7      	movs	r3, #247	@ 0xf7
 800c092:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c094:	e07b      	b.n	800c18e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	785b      	ldrb	r3, [r3, #1]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c0a0:	23f6      	movs	r3, #246	@ 0xf6
 800c0a2:	75fb      	strb	r3, [r7, #23]
        break;
 800c0a4:	e073      	b.n	800c18e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7ff fa18 	bl	800b4e0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6858      	ldr	r0, [r3, #4]
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	6899      	ldr	r1, [r3, #8]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	899a      	ldrh	r2, [r3, #12]
 800c0be:	4b38      	ldr	r3, [pc, #224]	@ (800c1a0 <lwip_netconn_do_connect+0x164>)
 800c0c0:	f003 fbec 	bl	800f89c <tcp_connect>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c0c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d15e      	bne.n	800c18e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	7e1b      	ldrb	r3, [r3, #24]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bf14      	ite	ne
 800c0de:	2301      	movne	r3, #1
 800c0e0:	2300      	moveq	r3, #0
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2203      	movs	r2, #3
 800c0ec:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d009      	beq.n	800c108 <lwip_netconn_do_connect+0xcc>
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	7e1a      	ldrb	r2, [r3, #24]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0204 	orr.w	r2, r2, #4
 800c102:	b2d2      	uxtb	r2, r2
 800c104:	761a      	strb	r2, [r3, #24]
 800c106:	e008      	b.n	800c11a <lwip_netconn_do_connect+0xde>
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	7e1a      	ldrb	r2, [r3, #24]
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 0204 	bic.w	r2, r2, #4
 800c116:	b2d2      	uxtb	r2, r2
 800c118:	761a      	strb	r2, [r3, #24]
            if (non_blocking) {
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c120:	23fb      	movs	r3, #251	@ 0xfb
 800c122:	75fb      	strb	r3, [r7, #23]
        break;
 800c124:	e033      	b.n	800c18e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	61da      	str	r2, [r3, #28]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	2b03      	cmp	r3, #3
 800c136:	d006      	beq.n	800c146 <lwip_netconn_do_connect+0x10a>
 800c138:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a4 <lwip_netconn_do_connect+0x168>)
 800c13a:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800c13e:	491a      	ldr	r1, [pc, #104]	@ (800c1a8 <lwip_netconn_do_connect+0x16c>)
 800c140:	481a      	ldr	r0, [pc, #104]	@ (800c1ac <lwip_netconn_do_connect+0x170>)
 800c142:	f00d ffe7 	bl	801a114 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c146:	481a      	ldr	r0, [pc, #104]	@ (800c1b0 <lwip_netconn_do_connect+0x174>)
 800c148:	f00d fe93 	bl	8019e72 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	330c      	adds	r3, #12
 800c152:	2100      	movs	r1, #0
 800c154:	4618      	mov	r0, r3
 800c156:	f00d fdea 	bl	8019d2e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c15a:	4815      	ldr	r0, [pc, #84]	@ (800c1b0 <lwip_netconn_do_connect+0x174>)
 800c15c:	f00d fe7a 	bl	8019e54 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	2b03      	cmp	r3, #3
 800c168:	d116      	bne.n	800c198 <lwip_netconn_do_connect+0x15c>
 800c16a:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <lwip_netconn_do_connect+0x168>)
 800c16c:	f240 5274 	movw	r2, #1396	@ 0x574
 800c170:	490d      	ldr	r1, [pc, #52]	@ (800c1a8 <lwip_netconn_do_connect+0x16c>)
 800c172:	480e      	ldr	r0, [pc, #56]	@ (800c1ac <lwip_netconn_do_connect+0x170>)
 800c174:	f00d ffce 	bl	801a114 <iprintf>
              return;
 800c178:	e00e      	b.n	800c198 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c17a:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a4 <lwip_netconn_do_connect+0x168>)
 800c17c:	f240 527d 	movw	r2, #1405	@ 0x57d
 800c180:	490c      	ldr	r1, [pc, #48]	@ (800c1b4 <lwip_netconn_do_connect+0x178>)
 800c182:	480a      	ldr	r0, [pc, #40]	@ (800c1ac <lwip_netconn_do_connect+0x170>)
 800c184:	f00d ffc6 	bl	801a114 <iprintf>
 800c188:	23fa      	movs	r3, #250	@ 0xfa
 800c18a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c18c:	e000      	b.n	800c190 <lwip_netconn_do_connect+0x154>
        break;
 800c18e:	bf00      	nop
    }
  }
  msg->err = err;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	7dfa      	ldrb	r2, [r7, #23]
 800c194:	711a      	strb	r2, [r3, #4]
 800c196:	e000      	b.n	800c19a <lwip_netconn_do_connect+0x15e>
              return;
 800c198:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	0800bf1d 	.word	0x0800bf1d
 800c1a4:	0801bae8 	.word	0x0801bae8
 800c1a8:	0801bea8 	.word	0x0801bea8
 800c1ac:	0801bb2c 	.word	0x0801bb2c
 800c1b0:	2000b144 	.word	0x2000b144
 800c1b4:	0801bf30 	.word	0x0801bf30

0800c1b8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d07f      	beq.n	800c2ce <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1d8:	2b10      	cmp	r3, #16
 800c1da:	d175      	bne.n	800c2c8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	785b      	ldrb	r3, [r3, #1]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d165      	bne.n	800c2b2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	7d1b      	ldrb	r3, [r3, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800c1f2:	23fa      	movs	r3, #250	@ 0xfa
 800c1f4:	72fb      	strb	r3, [r7, #11]
 800c1f6:	e06c      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800c1f8:	23ff      	movs	r3, #255	@ 0xff
 800c1fa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f107 020b 	add.w	r2, r7, #11
 800c206:	7cf9      	ldrb	r1, [r7, #19]
 800c208:	4618      	mov	r0, r3
 800c20a:	f003 f9ab 	bl	800f564 <tcp_listen_with_backlog_and_err>
 800c20e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d05d      	beq.n	800c2d2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3310      	adds	r3, #16
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00d fd40 	bl	8019ca2 <sys_mbox_valid>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00b      	beq.n	800c240 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3310      	adds	r3, #16
 800c22e:	4618      	mov	r0, r3
 800c230:	f00d fc9a 	bl	8019b68 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3310      	adds	r3, #16
 800c23a:	4618      	mov	r0, r3
 800c23c:	f00d fd42 	bl	8019cc4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3314      	adds	r3, #20
 800c24a:	4618      	mov	r0, r3
 800c24c:	f00d fd29 	bl	8019ca2 <sys_mbox_valid>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d108      	bne.n	800c268 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3314      	adds	r3, #20
 800c25c:	2106      	movs	r1, #6
 800c25e:	4618      	mov	r0, r3
 800c260:	f00d fc60 	bl	8019b24 <sys_mbox_new>
 800c264:	4603      	mov	r3, r0
 800c266:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800c268:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d118      	bne.n	800c2a2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2202      	movs	r2, #2
 800c276:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4619      	mov	r1, r3
 800c28c:	4610      	mov	r0, r2
 800c28e:	f004 fa0f 	bl	80106b0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	4912      	ldr	r1, [pc, #72]	@ (800c2e4 <lwip_netconn_do_listen+0x12c>)
 800c29a:	4618      	mov	r0, r3
 800c29c:	f004 fa7e 	bl	801079c <tcp_accept>
 800c2a0:	e017      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f002 ff5e 	bl	800f164 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	605a      	str	r2, [r3, #4]
 800c2b0:	e00f      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	785b      	ldrb	r3, [r3, #1]
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d102      	bne.n	800c2c2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	72fb      	strb	r3, [r7, #11]
 800c2c0:	e007      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800c2c2:	23f5      	movs	r3, #245	@ 0xf5
 800c2c4:	72fb      	strb	r3, [r7, #11]
 800c2c6:	e004      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800c2c8:	23f0      	movs	r3, #240	@ 0xf0
 800c2ca:	72fb      	strb	r3, [r7, #11]
 800c2cc:	e001      	b.n	800c2d2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800c2ce:	23f5      	movs	r3, #245	@ 0xf5
 800c2d0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800c2d2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c2da:	bf00      	nop
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800b531 	.word	0x0800b531

0800c2e8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d022      	beq.n	800c34a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c30e:	2b10      	cmp	r3, #16
 800c310:	d11b      	bne.n	800c34a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c31e:	d202      	bcs.n	800c326 <lwip_netconn_do_recv+0x3e>
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	b29b      	uxth	r3, r3
 800c324:	e001      	b.n	800c32a <lwip_netconn_do_recv+0x42>
 800c326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c32a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	89fa      	ldrh	r2, [r7, #14]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f003 fa18 	bl	800f76c <tcp_recved>
        remaining -= recved;
 800c33c:	89fb      	ldrh	r3, [r7, #14]
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e6      	bne.n	800c318 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c34a:	bf00      	nop
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b088      	sub	sp, #32
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <lwip_netconn_do_writemore+0x24>
 800c36a:	4b96      	ldr	r3, [pc, #600]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c36c:	f240 6273 	movw	r2, #1651	@ 0x673
 800c370:	4995      	ldr	r1, [pc, #596]	@ (800c5c8 <lwip_netconn_do_writemore+0x274>)
 800c372:	4896      	ldr	r0, [pc, #600]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c374:	f00d fece 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	785b      	ldrb	r3, [r3, #1]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d006      	beq.n	800c38e <lwip_netconn_do_writemore+0x3a>
 800c380:	4b90      	ldr	r3, [pc, #576]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c382:	f240 6274 	movw	r2, #1652	@ 0x674
 800c386:	4992      	ldr	r1, [pc, #584]	@ (800c5d0 <lwip_netconn_do_writemore+0x27c>)
 800c388:	4890      	ldr	r0, [pc, #576]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c38a:	f00d fec3 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d106      	bne.n	800c3a4 <lwip_netconn_do_writemore+0x50>
 800c396:	4b8b      	ldr	r3, [pc, #556]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c398:	f240 6275 	movw	r2, #1653	@ 0x675
 800c39c:	498d      	ldr	r1, [pc, #564]	@ (800c5d4 <lwip_netconn_do_writemore+0x280>)
 800c39e:	488b      	ldr	r0, [pc, #556]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c3a0:	f00d feb8 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <lwip_netconn_do_writemore+0x66>
 800c3ac:	4b85      	ldr	r3, [pc, #532]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c3ae:	f240 6276 	movw	r2, #1654	@ 0x676
 800c3b2:	4989      	ldr	r1, [pc, #548]	@ (800c5d8 <lwip_netconn_do_writemore+0x284>)
 800c3b4:	4885      	ldr	r0, [pc, #532]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c3b6:	f00d fead 	bl	801a114 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	699a      	ldr	r2, [r3, #24]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d306      	bcc.n	800c3d8 <lwip_netconn_do_writemore+0x84>
 800c3ca:	4b7e      	ldr	r3, [pc, #504]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c3cc:	f240 6277 	movw	r2, #1655	@ 0x677
 800c3d0:	4982      	ldr	r1, [pc, #520]	@ (800c5dc <lwip_netconn_do_writemore+0x288>)
 800c3d2:	487e      	ldr	r0, [pc, #504]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c3d4:	f00d fe9e 	bl	801a114 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	69db      	ldr	r3, [r3, #28]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <lwip_netconn_do_writemore+0x9c>
 800c3e2:	4b78      	ldr	r3, [pc, #480]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c3e4:	f240 6279 	movw	r2, #1657	@ 0x679
 800c3e8:	497d      	ldr	r1, [pc, #500]	@ (800c5e0 <lwip_netconn_do_writemore+0x28c>)
 800c3ea:	4878      	ldr	r0, [pc, #480]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c3ec:	f00d fe92 	bl	801a114 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	7f1b      	ldrb	r3, [r3, #28]
 800c3f6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7e1b      	ldrb	r3, [r3, #24]
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <lwip_netconn_do_writemore+0xba>
 800c404:	7ebb      	ldrb	r3, [r7, #26]
 800c406:	f003 0304 	and.w	r3, r3, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <lwip_netconn_do_writemore+0xbe>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <lwip_netconn_do_writemore+0xc0>
 800c412:	2300      	movs	r3, #0
 800c414:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	4413      	add	r3, r2
 800c426:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	685a      	ldr	r2, [r3, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	69db      	ldr	r3, [r3, #28]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c440:	d307      	bcc.n	800c452 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c446:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c448:	7ebb      	ldrb	r3, [r7, #26]
 800c44a:	f043 0302 	orr.w	r3, r3, #2
 800c44e:	76bb      	strb	r3, [r7, #26]
 800c450:	e001      	b.n	800c456 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c45e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c460:	89fa      	ldrh	r2, [r7, #14]
 800c462:	8bbb      	ldrh	r3, [r7, #28]
 800c464:	429a      	cmp	r2, r3
 800c466:	d216      	bcs.n	800c496 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c468:	89fb      	ldrh	r3, [r7, #14]
 800c46a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c46c:	7e3b      	ldrb	r3, [r7, #24]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00d      	beq.n	800c48e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c472:	8bbb      	ldrh	r3, [r7, #28]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10e      	bne.n	800c496 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	69db      	ldr	r3, [r3, #28]
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <lwip_netconn_do_writemore+0x134>
 800c482:	f06f 0306 	mvn.w	r3, #6
 800c486:	e000      	b.n	800c48a <lwip_netconn_do_writemore+0x136>
 800c488:	2300      	movs	r3, #0
 800c48a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c48c:	e07d      	b.n	800c58a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c48e:	7ebb      	ldrb	r3, [r7, #26]
 800c490:	f043 0302 	orr.w	r3, r3, #2
 800c494:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	8bbb      	ldrh	r3, [r7, #28]
 800c49e:	441a      	add	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d906      	bls.n	800c4ba <lwip_netconn_do_writemore+0x166>
 800c4ac:	4b45      	ldr	r3, [pc, #276]	@ (800c5c4 <lwip_netconn_do_writemore+0x270>)
 800c4ae:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800c4b2:	494c      	ldr	r1, [pc, #304]	@ (800c5e4 <lwip_netconn_do_writemore+0x290>)
 800c4b4:	4845      	ldr	r0, [pc, #276]	@ (800c5cc <lwip_netconn_do_writemore+0x278>)
 800c4b6:	f00d fe2d 	bl	801a114 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c4ba:	8bbb      	ldrh	r3, [r7, #28]
 800c4bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d103      	bne.n	800c4cc <lwip_netconn_do_writemore+0x178>
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4ca:	d209      	bcs.n	800c4e0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c4d0:	8bba      	ldrh	r2, [r7, #28]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d10b      	bne.n	800c4ee <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d906      	bls.n	800c4ee <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c4e4:	7ebb      	ldrb	r3, [r7, #26]
 800c4e6:	f043 0302 	orr.w	r3, r3, #2
 800c4ea:	76bb      	strb	r3, [r7, #26]
 800c4ec:	e001      	b.n	800c4f2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6858      	ldr	r0, [r3, #4]
 800c4f6:	7ebb      	ldrb	r3, [r7, #26]
 800c4f8:	8bba      	ldrh	r2, [r7, #28]
 800c4fa:	6979      	ldr	r1, [r7, #20]
 800c4fc:	f006 fc4c 	bl	8012d98 <tcp_write>
 800c500:	4603      	mov	r3, r0
 800c502:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c504:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d12c      	bne.n	800c566 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	6999      	ldr	r1, [r3, #24]
 800c512:	8bba      	ldrh	r2, [r7, #28]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	440a      	add	r2, r1
 800c51a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	6919      	ldr	r1, [r3, #16]
 800c522:	8bba      	ldrh	r2, [r7, #28]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	440a      	add	r2, r1
 800c52a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	691a      	ldr	r2, [r3, #16]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	69db      	ldr	r3, [r3, #28]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d113      	bne.n	800c566 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	899a      	ldrh	r2, [r3, #12]
 800c544:	3a01      	subs	r2, #1
 800c546:	b292      	uxth	r2, r2
 800c548:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69db      	ldr	r3, [r3, #28]
 800c54e:	899b      	ldrh	r3, [r3, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d008      	beq.n	800c566 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	3208      	adds	r2, #8
 800c55c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	2200      	movs	r2, #0
 800c564:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c566:	7e7b      	ldrb	r3, [r7, #25]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <lwip_netconn_do_writemore+0x222>
 800c56c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f43f af50 	beq.w	800c416 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c576:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <lwip_netconn_do_writemore+0x234>
 800c57e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c586:	d147      	bne.n	800c618 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800c588:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c58a:	7e3b      	ldrb	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02b      	beq.n	800c5e8 <lwip_netconn_do_writemore+0x294>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	699a      	ldr	r2, [r3, #24]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d223      	bcs.n	800c5e8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <lwip_netconn_do_writemore+0x260>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2103      	movs	r1, #3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7e1b      	ldrb	r3, [r3, #24]
 800c5b8:	f043 0310 	orr.w	r3, r3, #16
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	761a      	strb	r2, [r3, #24]
 800c5c2:	e029      	b.n	800c618 <lwip_netconn_do_writemore+0x2c4>
 800c5c4:	0801bae8 	.word	0x0801bae8
 800c5c8:	0801bc40 	.word	0x0801bc40
 800c5cc:	0801bb2c 	.word	0x0801bb2c
 800c5d0:	0801bf48 	.word	0x0801bf48
 800c5d4:	0801bc50 	.word	0x0801bc50
 800c5d8:	0801bf68 	.word	0x0801bf68
 800c5dc:	0801bf80 	.word	0x0801bf80
 800c5e0:	0801bfc0 	.word	0x0801bfc0
 800c5e4:	0801bfe8 	.word	0x0801bfe8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c5f0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d905      	bls.n	800c604 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c600:	2b07      	cmp	r3, #7
 800c602:	d909      	bls.n	800c618 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d005      	beq.n	800c618 <lwip_netconn_do_writemore+0x2c4>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	2200      	movs	r2, #0
 800c612:	2103      	movs	r1, #3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c618:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d11d      	bne.n	800c65c <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	699a      	ldr	r2, [r3, #24]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d002      	beq.n	800c636 <lwip_netconn_do_writemore+0x2e2>
 800c630:	7e3b      	ldrb	r3, [r7, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c636:	2301      	movs	r3, #1
 800c638:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	f007 f9f2 	bl	8013a28 <tcp_output>
 800c644:	4603      	mov	r3, r0
 800c646:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c648:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c64c:	f113 0f04 	cmn.w	r3, #4
 800c650:	d12c      	bne.n	800c6ac <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c652:	7b3b      	ldrb	r3, [r7, #12]
 800c654:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c656:	2301      	movs	r3, #1
 800c658:	76fb      	strb	r3, [r7, #27]
 800c65a:	e027      	b.n	800c6ac <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800c65c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c664:	d120      	bne.n	800c6a8 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f007 f9dc 	bl	8013a28 <tcp_output>
 800c670:	4603      	mov	r3, r0
 800c672:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c674:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c678:	f113 0f04 	cmn.w	r3, #4
 800c67c:	d104      	bne.n	800c688 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c67e:	7b7b      	ldrb	r3, [r7, #13]
 800c680:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c682:	2301      	movs	r3, #1
 800c684:	76fb      	strb	r3, [r7, #27]
 800c686:	e011      	b.n	800c6ac <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800c688:	7e3b      	ldrb	r3, [r7, #24]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00e      	beq.n	800c6ac <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	69db      	ldr	r3, [r3, #28]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <lwip_netconn_do_writemore+0x34a>
 800c698:	f06f 0306 	mvn.w	r3, #6
 800c69c:	e000      	b.n	800c6a0 <lwip_netconn_do_writemore+0x34c>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	76fb      	strb	r3, [r7, #27]
 800c6a6:	e001      	b.n	800c6ac <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c6ac:	7efb      	ldrb	r3, [r7, #27]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d015      	beq.n	800c6de <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	69db      	ldr	r3, [r3, #28]
 800c6c0:	7ffa      	ldrb	r2, [r7, #31]
 800c6c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c6d0:	78fb      	ldrb	r3, [r7, #3]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d006      	beq.n	800c6e4 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c6d6:	68b8      	ldr	r0, [r7, #8]
 800c6d8:	f00d fb5a 	bl	8019d90 <sys_sem_signal>
 800c6dc:	e002      	b.n	800c6e4 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e2:	e000      	b.n	800c6e6 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3720      	adds	r7, #32
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop

0800c6f0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	f7fe fbcc 	bl	800ae9e <netconn_err>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d166      	bne.n	800c7e0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c71c:	2b10      	cmp	r3, #16
 800c71e:	d15d      	bne.n	800c7dc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	785b      	ldrb	r3, [r3, #1]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c72a:	23fb      	movs	r3, #251	@ 0xfb
 800c72c:	73fb      	strb	r3, [r7, #15]
 800c72e:	e057      	b.n	800c7e0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d04d      	beq.n	800c7d6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2201      	movs	r2, #1
 800c740:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d006      	beq.n	800c75a <lwip_netconn_do_write+0x6a>
 800c74c:	4b28      	ldr	r3, [pc, #160]	@ (800c7f0 <lwip_netconn_do_write+0x100>)
 800c74e:	f240 7223 	movw	r2, #1827	@ 0x723
 800c752:	4928      	ldr	r1, [pc, #160]	@ (800c7f4 <lwip_netconn_do_write+0x104>)
 800c754:	4828      	ldr	r0, [pc, #160]	@ (800c7f8 <lwip_netconn_do_write+0x108>)
 800c756:	f00d fcdd 	bl	801a114 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <lwip_netconn_do_write+0x80>
 800c762:	4b23      	ldr	r3, [pc, #140]	@ (800c7f0 <lwip_netconn_do_write+0x100>)
 800c764:	f240 7224 	movw	r2, #1828	@ 0x724
 800c768:	4924      	ldr	r1, [pc, #144]	@ (800c7fc <lwip_netconn_do_write+0x10c>)
 800c76a:	4823      	ldr	r0, [pc, #140]	@ (800c7f8 <lwip_netconn_do_write+0x108>)
 800c76c:	f00d fcd2 	bl	801a114 <iprintf>
        msg->conn->current_msg = msg;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2100      	movs	r1, #0
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fde8 	bl	800c354 <lwip_netconn_do_writemore>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d02e      	beq.n	800c7e8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d006      	beq.n	800c7a2 <lwip_netconn_do_write+0xb2>
 800c794:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <lwip_netconn_do_write+0x100>)
 800c796:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800c79a:	4919      	ldr	r1, [pc, #100]	@ (800c800 <lwip_netconn_do_write+0x110>)
 800c79c:	4816      	ldr	r0, [pc, #88]	@ (800c7f8 <lwip_netconn_do_write+0x108>)
 800c79e:	f00d fcb9 	bl	801a114 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c7a2:	4818      	ldr	r0, [pc, #96]	@ (800c804 <lwip_netconn_do_write+0x114>)
 800c7a4:	f00d fb65 	bl	8019e72 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f00d fabc 	bl	8019d2e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c7b6:	4813      	ldr	r0, [pc, #76]	@ (800c804 <lwip_netconn_do_write+0x114>)
 800c7b8:	f00d fb4c 	bl	8019e54 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	785b      	ldrb	r3, [r3, #1]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d110      	bne.n	800c7e8 <lwip_netconn_do_write+0xf8>
 800c7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c7f0 <lwip_netconn_do_write+0x100>)
 800c7c8:	f240 722c 	movw	r2, #1836	@ 0x72c
 800c7cc:	490c      	ldr	r1, [pc, #48]	@ (800c800 <lwip_netconn_do_write+0x110>)
 800c7ce:	480a      	ldr	r0, [pc, #40]	@ (800c7f8 <lwip_netconn_do_write+0x108>)
 800c7d0:	f00d fca0 	bl	801a114 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c7d4:	e008      	b.n	800c7e8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c7d6:	23f5      	movs	r3, #245	@ 0xf5
 800c7d8:	73fb      	strb	r3, [r7, #15]
 800c7da:	e001      	b.n	800c7e0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c7dc:	23fa      	movs	r3, #250	@ 0xfa
 800c7de:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	7bfa      	ldrb	r2, [r7, #15]
 800c7e4:	711a      	strb	r2, [r3, #4]
 800c7e6:	e000      	b.n	800c7ea <lwip_netconn_do_write+0xfa>
        return;
 800c7e8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	0801bae8 	.word	0x0801bae8
 800c7f4:	0801be8c 	.word	0x0801be8c
 800c7f8:	0801bb2c 	.word	0x0801bb2c
 800c7fc:	0801c014 	.word	0x0801c014
 800c800:	0801bea8 	.word	0x0801bea8
 800c804:	2000b144 	.word	0x2000b144

0800c808 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	785b      	ldrb	r3, [r3, #1]
 800c81a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d069      	beq.n	800c8fa <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c830:	2b10      	cmp	r3, #16
 800c832:	d162      	bne.n	800c8fa <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d002      	beq.n	800c842 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d05b      	beq.n	800c8fa <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	2b03      	cmp	r3, #3
 800c846:	d103      	bne.n	800c850 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	22f5      	movs	r2, #245	@ 0xf5
 800c84c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c84e:	e059      	b.n	800c904 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c850:	7afb      	ldrb	r3, [r7, #11]
 800c852:	2b01      	cmp	r3, #1
 800c854:	d103      	bne.n	800c85e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	22fb      	movs	r2, #251	@ 0xfb
 800c85a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c85c:	e052      	b.n	800c904 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	7a1b      	ldrb	r3, [r3, #8]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff f84e 	bl	800b910 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d006      	beq.n	800c88c <lwip_netconn_do_close+0x84>
 800c87e:	4b23      	ldr	r3, [pc, #140]	@ (800c90c <lwip_netconn_do_close+0x104>)
 800c880:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800c884:	4922      	ldr	r1, [pc, #136]	@ (800c910 <lwip_netconn_do_close+0x108>)
 800c886:	4823      	ldr	r0, [pc, #140]	@ (800c914 <lwip_netconn_do_close+0x10c>)
 800c888:	f00d fc44 	bl	801a114 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2204      	movs	r2, #4
 800c892:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7ff f8b2 	bl	800ba0c <lwip_netconn_do_close_internal>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d029      	beq.n	800c902 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	d006      	beq.n	800c8c6 <lwip_netconn_do_close+0xbe>
 800c8b8:	4b14      	ldr	r3, [pc, #80]	@ (800c90c <lwip_netconn_do_close+0x104>)
 800c8ba:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800c8be:	4916      	ldr	r1, [pc, #88]	@ (800c918 <lwip_netconn_do_close+0x110>)
 800c8c0:	4814      	ldr	r0, [pc, #80]	@ (800c914 <lwip_netconn_do_close+0x10c>)
 800c8c2:	f00d fc27 	bl	801a114 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c8c6:	4815      	ldr	r0, [pc, #84]	@ (800c91c <lwip_netconn_do_close+0x114>)
 800c8c8:	f00d fad3 	bl	8019e72 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	330c      	adds	r3, #12
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f00d fa2a 	bl	8019d2e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c8da:	4810      	ldr	r0, [pc, #64]	@ (800c91c <lwip_netconn_do_close+0x114>)
 800c8dc:	f00d faba 	bl	8019e54 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00b      	beq.n	800c902 <lwip_netconn_do_close+0xfa>
 800c8ea:	4b08      	ldr	r3, [pc, #32]	@ (800c90c <lwip_netconn_do_close+0x104>)
 800c8ec:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800c8f0:	4909      	ldr	r1, [pc, #36]	@ (800c918 <lwip_netconn_do_close+0x110>)
 800c8f2:	4808      	ldr	r0, [pc, #32]	@ (800c914 <lwip_netconn_do_close+0x10c>)
 800c8f4:	f00d fc0e 	bl	801a114 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c8f8:	e003      	b.n	800c902 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	22f5      	movs	r2, #245	@ 0xf5
 800c8fe:	711a      	strb	r2, [r3, #4]
 800c900:	e000      	b.n	800c904 <lwip_netconn_do_close+0xfc>
      return;
 800c902:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	0801bae8 	.word	0x0801bae8
 800c910:	0801be8c 	.word	0x0801be8c
 800c914:	0801bb2c 	.word	0x0801bb2c
 800c918:	0801bea8 	.word	0x0801bea8
 800c91c:	2000b144 	.word	0x2000b144

0800c920 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d013      	beq.n	800c956 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00b      	beq.n	800c94e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f001 ff58 	bl	800e7f0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	605a      	str	r2, [r3, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	2006      	movs	r0, #6
 800c952:	f001 f8f7 	bl	800db44 <memp_free>
  }
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
	...

0800c960 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d108      	bne.n	800c984 <netbuf_data+0x24>
 800c972:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <netbuf_data+0x80>)
 800c974:	22c6      	movs	r2, #198	@ 0xc6
 800c976:	491b      	ldr	r1, [pc, #108]	@ (800c9e4 <netbuf_data+0x84>)
 800c978:	481b      	ldr	r0, [pc, #108]	@ (800c9e8 <netbuf_data+0x88>)
 800c97a:	f00d fbcb 	bl	801a114 <iprintf>
 800c97e:	f06f 030f 	mvn.w	r3, #15
 800c982:	e029      	b.n	800c9d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d108      	bne.n	800c99c <netbuf_data+0x3c>
 800c98a:	4b15      	ldr	r3, [pc, #84]	@ (800c9e0 <netbuf_data+0x80>)
 800c98c:	22c7      	movs	r2, #199	@ 0xc7
 800c98e:	4917      	ldr	r1, [pc, #92]	@ (800c9ec <netbuf_data+0x8c>)
 800c990:	4815      	ldr	r0, [pc, #84]	@ (800c9e8 <netbuf_data+0x88>)
 800c992:	f00d fbbf 	bl	801a114 <iprintf>
 800c996:	f06f 030f 	mvn.w	r3, #15
 800c99a:	e01d      	b.n	800c9d8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d108      	bne.n	800c9b4 <netbuf_data+0x54>
 800c9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e0 <netbuf_data+0x80>)
 800c9a4:	22c8      	movs	r2, #200	@ 0xc8
 800c9a6:	4912      	ldr	r1, [pc, #72]	@ (800c9f0 <netbuf_data+0x90>)
 800c9a8:	480f      	ldr	r0, [pc, #60]	@ (800c9e8 <netbuf_data+0x88>)
 800c9aa:	f00d fbb3 	bl	801a114 <iprintf>
 800c9ae:	f06f 030f 	mvn.w	r3, #15
 800c9b2:	e011      	b.n	800c9d8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d102      	bne.n	800c9c2 <netbuf_data+0x62>
    return ERR_BUF;
 800c9bc:	f06f 0301 	mvn.w	r3, #1
 800c9c0:	e00a      	b.n	800c9d8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	895a      	ldrh	r2, [r3, #10]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	0801c040 	.word	0x0801c040
 800c9e4:	0801c148 	.word	0x0801c148
 800c9e8:	0801c090 	.word	0x0801c090
 800c9ec:	0801c164 	.word	0x0801c164
 800c9f0:	0801c184 	.word	0x0801c184

0800c9f4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d108      	bne.n	800ca14 <netbuf_next+0x20>
 800ca02:	4b11      	ldr	r3, [pc, #68]	@ (800ca48 <netbuf_next+0x54>)
 800ca04:	22e0      	movs	r2, #224	@ 0xe0
 800ca06:	4911      	ldr	r1, [pc, #68]	@ (800ca4c <netbuf_next+0x58>)
 800ca08:	4811      	ldr	r0, [pc, #68]	@ (800ca50 <netbuf_next+0x5c>)
 800ca0a:	f00d fb83 	bl	801a114 <iprintf>
 800ca0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca12:	e014      	b.n	800ca3e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d102      	bne.n	800ca24 <netbuf_next+0x30>
    return -1;
 800ca1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca22:	e00c      	b.n	800ca3e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <netbuf_next+0x48>
    return 1;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e000      	b.n	800ca3e <netbuf_next+0x4a>
  }
  return 0;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	0801c040 	.word	0x0801c040
 800ca4c:	0801c1a0 	.word	0x0801c1a0
 800ca50:	0801c090 	.word	0x0801c090

0800ca54 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ca5e:	f008 f8c9 	bl	8014bf4 <sys_timeouts_sleeptime>
 800ca62:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d10b      	bne.n	800ca84 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ca6c:	4813      	ldr	r0, [pc, #76]	@ (800cabc <tcpip_timeouts_mbox_fetch+0x68>)
 800ca6e:	f00d fa00 	bl	8019e72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ca72:	2200      	movs	r2, #0
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f00d f8b8 	bl	8019bec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ca7c:	480f      	ldr	r0, [pc, #60]	@ (800cabc <tcpip_timeouts_mbox_fetch+0x68>)
 800ca7e:	f00d f9e9 	bl	8019e54 <sys_mutex_lock>
    return;
 800ca82:	e018      	b.n	800cab6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d102      	bne.n	800ca90 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ca8a:	f008 f879 	bl	8014b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca8e:	e7e6      	b.n	800ca5e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ca90:	480a      	ldr	r0, [pc, #40]	@ (800cabc <tcpip_timeouts_mbox_fetch+0x68>)
 800ca92:	f00d f9ee 	bl	8019e72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f00d f8a6 	bl	8019bec <sys_arch_mbox_fetch>
 800caa0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800caa2:	4806      	ldr	r0, [pc, #24]	@ (800cabc <tcpip_timeouts_mbox_fetch+0x68>)
 800caa4:	f00d f9d6 	bl	8019e54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d102      	bne.n	800cab6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cab0:	f008 f866 	bl	8014b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cab4:	e7d3      	b.n	800ca5e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	2000b144 	.word	0x2000b144

0800cac0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cac8:	4810      	ldr	r0, [pc, #64]	@ (800cb0c <tcpip_thread+0x4c>)
 800caca:	f00d f9c3 	bl	8019e54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cace:	4b10      	ldr	r3, [pc, #64]	@ (800cb10 <tcpip_thread+0x50>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d005      	beq.n	800cae2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cad6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb10 <tcpip_thread+0x50>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a0e      	ldr	r2, [pc, #56]	@ (800cb14 <tcpip_thread+0x54>)
 800cadc:	6812      	ldr	r2, [r2, #0]
 800cade:	4610      	mov	r0, r2
 800cae0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cae2:	f107 030c 	add.w	r3, r7, #12
 800cae6:	4619      	mov	r1, r3
 800cae8:	480b      	ldr	r0, [pc, #44]	@ (800cb18 <tcpip_thread+0x58>)
 800caea:	f7ff ffb3 	bl	800ca54 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d106      	bne.n	800cb02 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800caf4:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <tcpip_thread+0x5c>)
 800caf6:	2291      	movs	r2, #145	@ 0x91
 800caf8:	4909      	ldr	r1, [pc, #36]	@ (800cb20 <tcpip_thread+0x60>)
 800cafa:	480a      	ldr	r0, [pc, #40]	@ (800cb24 <tcpip_thread+0x64>)
 800cafc:	f00d fb0a 	bl	801a114 <iprintf>
      continue;
 800cb00:	e003      	b.n	800cb0a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 f80f 	bl	800cb28 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb0a:	e7ea      	b.n	800cae2 <tcpip_thread+0x22>
 800cb0c:	2000b144 	.word	0x2000b144
 800cb10:	2000b138 	.word	0x2000b138
 800cb14:	2000b13c 	.word	0x2000b13c
 800cb18:	2000b140 	.word	0x2000b140
 800cb1c:	0801c1d8 	.word	0x0801c1d8
 800cb20:	0801c208 	.word	0x0801c208
 800cb24:	0801c228 	.word	0x0801c228

0800cb28 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d026      	beq.n	800cb86 <tcpip_thread_handle_msg+0x5e>
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	dc2b      	bgt.n	800cb94 <tcpip_thread_handle_msg+0x6c>
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <tcpip_thread_handle_msg+0x1e>
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d015      	beq.n	800cb70 <tcpip_thread_handle_msg+0x48>
 800cb44:	e026      	b.n	800cb94 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6850      	ldr	r0, [r2, #4]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	6892      	ldr	r2, [r2, #8]
 800cb52:	4611      	mov	r1, r2
 800cb54:	4798      	blx	r3
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f001 fe45 	bl	800e7f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb66:	6879      	ldr	r1, [r7, #4]
 800cb68:	2009      	movs	r0, #9
 800cb6a:	f000 ffeb 	bl	800db44 <memp_free>
      break;
 800cb6e:	e018      	b.n	800cba2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	6892      	ldr	r2, [r2, #8]
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	2008      	movs	r0, #8
 800cb80:	f000 ffe0 	bl	800db44 <memp_free>
      break;
 800cb84:	e00d      	b.n	800cba2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	6892      	ldr	r2, [r2, #8]
 800cb8e:	4610      	mov	r0, r2
 800cb90:	4798      	blx	r3
      break;
 800cb92:	e006      	b.n	800cba2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb94:	4b05      	ldr	r3, [pc, #20]	@ (800cbac <tcpip_thread_handle_msg+0x84>)
 800cb96:	22cf      	movs	r2, #207	@ 0xcf
 800cb98:	4905      	ldr	r1, [pc, #20]	@ (800cbb0 <tcpip_thread_handle_msg+0x88>)
 800cb9a:	4806      	ldr	r0, [pc, #24]	@ (800cbb4 <tcpip_thread_handle_msg+0x8c>)
 800cb9c:	f00d faba 	bl	801a114 <iprintf>
      break;
 800cba0:	bf00      	nop
  }
}
 800cba2:	bf00      	nop
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	0801c1d8 	.word	0x0801c1d8
 800cbb0:	0801c208 	.word	0x0801c208
 800cbb4:	0801c228 	.word	0x0801c228

0800cbb8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cbc4:	481a      	ldr	r0, [pc, #104]	@ (800cc30 <tcpip_inpkt+0x78>)
 800cbc6:	f00d f86c 	bl	8019ca2 <sys_mbox_valid>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d105      	bne.n	800cbdc <tcpip_inpkt+0x24>
 800cbd0:	4b18      	ldr	r3, [pc, #96]	@ (800cc34 <tcpip_inpkt+0x7c>)
 800cbd2:	22fc      	movs	r2, #252	@ 0xfc
 800cbd4:	4918      	ldr	r1, [pc, #96]	@ (800cc38 <tcpip_inpkt+0x80>)
 800cbd6:	4819      	ldr	r0, [pc, #100]	@ (800cc3c <tcpip_inpkt+0x84>)
 800cbd8:	f00d fa9c 	bl	801a114 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cbdc:	2009      	movs	r0, #9
 800cbde:	f000 ff5f 	bl	800daa0 <memp_malloc>
 800cbe2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295
 800cbee:	e01a      	b.n	800cc26 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc08:	6979      	ldr	r1, [r7, #20]
 800cc0a:	4809      	ldr	r0, [pc, #36]	@ (800cc30 <tcpip_inpkt+0x78>)
 800cc0c:	f00c ffd4 	bl	8019bb8 <sys_mbox_trypost>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d006      	beq.n	800cc24 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc16:	6979      	ldr	r1, [r7, #20]
 800cc18:	2009      	movs	r0, #9
 800cc1a:	f000 ff93 	bl	800db44 <memp_free>
    return ERR_MEM;
 800cc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc22:	e000      	b.n	800cc26 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cc24:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	2000b140 	.word	0x2000b140
 800cc34:	0801c1d8 	.word	0x0801c1d8
 800cc38:	0801c250 	.word	0x0801c250
 800cc3c:	0801c228 	.word	0x0801c228

0800cc40 <tcpip_input>:
 *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cc50:	f003 0318 	and.w	r3, r3, #24
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cc58:	4a08      	ldr	r2, [pc, #32]	@ (800cc7c <tcpip_input+0x3c>)
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff ffab 	bl	800cbb8 <tcpip_inpkt>
 800cc62:	4603      	mov	r3, r0
 800cc64:	e005      	b.n	800cc72 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cc66:	4a06      	ldr	r2, [pc, #24]	@ (800cc80 <tcpip_input+0x40>)
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff ffa4 	bl	800cbb8 <tcpip_inpkt>
 800cc70:	4603      	mov	r3, r0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	08019979 	.word	0x08019979
 800cc80:	0801873d 	.word	0x0801873d

0800cc84 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc8e:	4814      	ldr	r0, [pc, #80]	@ (800cce0 <tcpip_callback+0x5c>)
 800cc90:	f00d f807 	bl	8019ca2 <sys_mbox_valid>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d106      	bne.n	800cca8 <tcpip_callback+0x24>
 800cc9a:	4b12      	ldr	r3, [pc, #72]	@ (800cce4 <tcpip_callback+0x60>)
 800cc9c:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800cca0:	4911      	ldr	r1, [pc, #68]	@ (800cce8 <tcpip_callback+0x64>)
 800cca2:	4812      	ldr	r0, [pc, #72]	@ (800ccec <tcpip_callback+0x68>)
 800cca4:	f00d fa36 	bl	801a114 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cca8:	2008      	movs	r0, #8
 800ccaa:	f000 fef9 	bl	800daa0 <memp_malloc>
 800ccae:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d102      	bne.n	800ccbc <tcpip_callback+0x38>
    return ERR_MEM;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccba:	e00d      	b.n	800ccd8 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	4803      	ldr	r0, [pc, #12]	@ (800cce0 <tcpip_callback+0x5c>)
 800ccd2:	f00c ff5b 	bl	8019b8c <sys_mbox_post>
  return ERR_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	2000b140 	.word	0x2000b140
 800cce4:	0801c1d8 	.word	0x0801c1d8
 800cce8:	0801c250 	.word	0x0801c250
 800ccec:	0801c228 	.word	0x0801c228

0800ccf0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ccfc:	4806      	ldr	r0, [pc, #24]	@ (800cd18 <tcpip_send_msg_wait_sem+0x28>)
 800ccfe:	f00d f8a9 	bl	8019e54 <sys_mutex_lock>
  fn(apimsg);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	68b8      	ldr	r0, [r7, #8]
 800cd06:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cd08:	4803      	ldr	r0, [pc, #12]	@ (800cd18 <tcpip_send_msg_wait_sem+0x28>)
 800cd0a:	f00d f8b2 	bl	8019e72 <sys_mutex_unlock>
  return ERR_OK;
 800cd0e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	2000b144 	.word	0x2000b144

0800cd1c <tcpip_init>:
 *
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cd26:	f000 fa33 	bl	800d190 <lwip_init>

  tcpip_init_done = initfunc;
 800cd2a:	4a17      	ldr	r2, [pc, #92]	@ (800cd88 <tcpip_init+0x6c>)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cd30:	4a16      	ldr	r2, [pc, #88]	@ (800cd8c <tcpip_init+0x70>)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cd36:	2106      	movs	r1, #6
 800cd38:	4815      	ldr	r0, [pc, #84]	@ (800cd90 <tcpip_init+0x74>)
 800cd3a:	f00c fef3 	bl	8019b24 <sys_mbox_new>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d006      	beq.n	800cd52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cd44:	4b13      	ldr	r3, [pc, #76]	@ (800cd94 <tcpip_init+0x78>)
 800cd46:	f240 225f 	movw	r2, #607	@ 0x25f
 800cd4a:	4913      	ldr	r1, [pc, #76]	@ (800cd98 <tcpip_init+0x7c>)
 800cd4c:	4813      	ldr	r0, [pc, #76]	@ (800cd9c <tcpip_init+0x80>)
 800cd4e:	f00d f9e1 	bl	801a114 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cd52:	4813      	ldr	r0, [pc, #76]	@ (800cda0 <tcpip_init+0x84>)
 800cd54:	f00d f862 	bl	8019e1c <sys_mutex_new>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd94 <tcpip_init+0x78>)
 800cd60:	f240 2263 	movw	r2, #611	@ 0x263
 800cd64:	490f      	ldr	r1, [pc, #60]	@ (800cda4 <tcpip_init+0x88>)
 800cd66:	480d      	ldr	r0, [pc, #52]	@ (800cd9c <tcpip_init+0x80>)
 800cd68:	f00d f9d4 	bl	801a114 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cd74:	2200      	movs	r2, #0
 800cd76:	490c      	ldr	r1, [pc, #48]	@ (800cda8 <tcpip_init+0x8c>)
 800cd78:	480c      	ldr	r0, [pc, #48]	@ (800cdac <tcpip_init+0x90>)
 800cd7a:	f00d f887 	bl	8019e8c <sys_thread_new>
}
 800cd7e:	bf00      	nop
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	2000b138 	.word	0x2000b138
 800cd8c:	2000b13c 	.word	0x2000b13c
 800cd90:	2000b140 	.word	0x2000b140
 800cd94:	0801c1d8 	.word	0x0801c1d8
 800cd98:	0801c260 	.word	0x0801c260
 800cd9c:	0801c228 	.word	0x0801c228
 800cda0:	2000b144 	.word	0x2000b144
 800cda4:	0801c284 	.word	0x0801c284
 800cda8:	0800cac1 	.word	0x0800cac1
 800cdac:	0801c2a8 	.word	0x0801c2a8

0800cdb0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <fs_open+0x16>
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d102      	bne.n	800cdcc <fs_open+0x1c>
    return ERR_ARG;
 800cdc6:	f06f 030f 	mvn.w	r3, #15
 800cdca:	e028      	b.n	800ce1e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800cdcc:	4b16      	ldr	r3, [pc, #88]	@ (800ce28 <fs_open+0x78>)
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	e020      	b.n	800ce14 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6838      	ldr	r0, [r7, #0]
 800cdda:	f7f3 f9f9 	bl	80001d0 <strcmp>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d114      	bne.n	800ce0e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	689a      	ldr	r2, [r3, #8]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68da      	ldr	r2, [r3, #12]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68da      	ldr	r2, [r3, #12]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	7c1a      	ldrb	r2, [r3, #16]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e007      	b.n	800ce1e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1db      	bne.n	800cdd2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ce1a:	f06f 0305 	mvn.w	r3, #5
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	08022ecc 	.word	0x08022ecc

0800ce2c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ce4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	b21a      	sxth	r2, r3
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	0a1b      	lsrs	r3, r3, #8
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	b21b      	sxth	r3, r3
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	b21b      	sxth	r3, r3
 800ce5e:	b29b      	uxth	r3, r3
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	061a      	lsls	r2, r3, #24
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	021b      	lsls	r3, r3, #8
 800ce7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce80:	431a      	orrs	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	0a1b      	lsrs	r3, r3, #8
 800ce86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	0e1b      	lsrs	r3, r3, #24
 800ce90:	4313      	orrs	r3, r2
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	370c      	adds	r7, #12
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	b089      	sub	sp, #36	@ 0x24
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00d      	beq.n	800cede <lwip_standard_chksum+0x40>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	dd0a      	ble.n	800cede <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	1c53      	adds	r3, r2, #1
 800cecc:	61fb      	str	r3, [r7, #28]
 800cece:	f107 030e 	add.w	r3, r7, #14
 800ced2:	3301      	adds	r3, #1
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	701a      	strb	r2, [r3, #0]
    len--;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cee2:	e00a      	b.n	800cefa <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	1c9a      	adds	r2, r3, #2
 800cee8:	61ba      	str	r2, [r7, #24]
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	461a      	mov	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	4413      	add	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	3b02      	subs	r3, #2
 800cef8:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	dcf1      	bgt.n	800cee4 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	dd04      	ble.n	800cf10 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cf06:	f107 030e 	add.w	r3, r7, #14
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	7812      	ldrb	r2, [r2, #0]
 800cf0e:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cf10:	89fb      	ldrh	r3, [r7, #14]
 800cf12:	461a      	mov	r2, r3
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	4413      	add	r3, r2
 800cf18:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	0c1a      	lsrs	r2, r3, #16
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	4413      	add	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	0c1a      	lsrs	r2, r3, #16
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	4413      	add	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	b29a      	uxth	r2, r3
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	0a1b      	lsrs	r3, r3, #8
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	4313      	orrs	r3, r2
 800cf46:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	b29b      	uxth	r3, r3
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3724      	adds	r7, #36	@ 0x24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	607b      	str	r3, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	72fb      	strb	r3, [r7, #11]
 800cf66:	4613      	mov	r3, r2
 800cf68:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	e02b      	b.n	800cfcc <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	895b      	ldrh	r3, [r3, #10]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	f7ff ff8d 	bl	800ce9e <lwip_standard_chksum>
 800cf84:	4603      	mov	r3, r0
 800cf86:	461a      	mov	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	0c1a      	lsrs	r2, r3, #16
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	4413      	add	r3, r2
 800cf98:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	895b      	ldrh	r3, [r3, #10]
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00e      	beq.n	800cfc6 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	bf0c      	ite	eq
 800cfae:	2301      	moveq	r3, #1
 800cfb0:	2300      	movne	r3, #0
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	021b      	lsls	r3, r3, #8
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	0a1b      	lsrs	r3, r3, #8
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	617b      	str	r3, [r7, #20]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1d0      	bne.n	800cf74 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	021b      	lsls	r3, r3, #8
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	0a1b      	lsrs	r3, r3, #8
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800cfe8:	7afb      	ldrb	r3, [r7, #11]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7ff ff27 	bl	800ce40 <lwip_htons>
 800cff2:	4603      	mov	r3, r0
 800cff4:	461a      	mov	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800cffc:	893b      	ldrh	r3, [r7, #8]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff ff1e 	bl	800ce40 <lwip_htons>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4413      	add	r3, r2
 800d00c:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	0c1a      	lsrs	r2, r3, #16
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	b29b      	uxth	r3, r3
 800d016:	4413      	add	r3, r2
 800d018:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	0c1a      	lsrs	r2, r3, #16
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	b29b      	uxth	r3, r3
 800d022:	4413      	add	r3, r2
 800d024:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	b29b      	uxth	r3, r3
 800d02a:	43db      	mvns	r3, r3
 800d02c:	b29b      	uxth	r3, r3
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b086      	sub	sp, #24
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	607b      	str	r3, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	72fb      	strb	r3, [r7, #11]
 800d044:	4613      	mov	r3, r2
 800d046:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	b29b      	uxth	r3, r3
 800d052:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	0c1b      	lsrs	r3, r3, #16
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	4413      	add	r3, r2
 800d05c:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	b29b      	uxth	r3, r3
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	4413      	add	r3, r2
 800d06c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	0c1b      	lsrs	r3, r3, #16
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	4413      	add	r3, r2
 800d076:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	0c1a      	lsrs	r2, r3, #16
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4413      	add	r3, r2
 800d082:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	0c1a      	lsrs	r2, r3, #16
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4413      	add	r3, r2
 800d08e:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d090:	893a      	ldrh	r2, [r7, #8]
 800d092:	7af9      	ldrb	r1, [r7, #11]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff ff5e 	bl	800cf58 <inet_cksum_pseudo_base>
 800d09c:	4603      	mov	r3, r0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b086      	sub	sp, #24
 800d0aa:	af02      	add	r7, sp, #8
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	607b      	str	r3, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	72fb      	strb	r3, [r7, #11]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d0b8:	893a      	ldrh	r2, [r7, #8]
 800d0ba:	7af9      	ldrb	r1, [r7, #11]
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7ff ffb7 	bl	800d036 <inet_chksum_pseudo>
 800d0c8:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	460b      	mov	r3, r1
 800d0dc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d0de:	887b      	ldrh	r3, [r7, #2]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff fedb 	bl	800ce9e <lwip_standard_chksum>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	43db      	mvns	r3, r3
 800d0ec:	b29b      	uxth	r3, r3
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b086      	sub	sp, #24
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	613b      	str	r3, [r7, #16]
 800d10a:	e02b      	b.n	800d164 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	895b      	ldrh	r3, [r3, #10]
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f7ff fec1 	bl	800ce9e <lwip_standard_chksum>
 800d11c:	4603      	mov	r3, r0
 800d11e:	461a      	mov	r2, r3
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	4413      	add	r3, r2
 800d124:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	0c1a      	lsrs	r2, r3, #16
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4413      	add	r3, r2
 800d130:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	895b      	ldrh	r3, [r3, #10]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00e      	beq.n	800d15e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b00      	cmp	r3, #0
 800d144:	bf0c      	ite	eq
 800d146:	2301      	moveq	r3, #1
 800d148:	2300      	movne	r3, #0
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	021b      	lsls	r3, r3, #8
 800d152:	b29a      	uxth	r2, r3
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	0a1b      	lsrs	r3, r3, #8
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	4313      	orrs	r3, r2
 800d15c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	613b      	str	r3, [r7, #16]
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1d0      	bne.n	800d10c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d007      	beq.n	800d180 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	021b      	lsls	r3, r3, #8
 800d174:	b29a      	uxth	r2, r3
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	0a1b      	lsrs	r3, r3, #8
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	b29b      	uxth	r3, r3
 800d184:	43db      	mvns	r3, r3
 800d186:	b29b      	uxth	r3, r3
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d19a:	f00c fe31 	bl	8019e00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d19e:	f000 f8d5 	bl	800d34c <mem_init>
  memp_init();
 800d1a2:	f000 fc31 	bl	800da08 <memp_init>
  pbuf_init();
  netif_init();
 800d1a6:	f000 fcf7 	bl	800db98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d1aa:	f007 fd5b 	bl	8014c64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d1ae:	f001 fdc9 	bl	800ed44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d1b2:	f007 fc9d 	bl	8014af0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d1b6:	bf00      	nop
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d1ca:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <ptr_to_mem+0x20>)
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	88fb      	ldrh	r3, [r7, #6]
 800d1d0:	4413      	add	r3, r2
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	370c      	adds	r7, #12
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	20013174 	.word	0x20013174

0800d1e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d1ec:	4b05      	ldr	r3, [pc, #20]	@ (800d204 <mem_to_ptr+0x20>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	b29b      	uxth	r3, r3
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20013174 	.word	0x20013174

0800d208 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d208:	b590      	push	{r4, r7, lr}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d210:	4b45      	ldr	r3, [pc, #276]	@ (800d328 <plug_holes+0x120>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	429a      	cmp	r2, r3
 800d218:	d206      	bcs.n	800d228 <plug_holes+0x20>
 800d21a:	4b44      	ldr	r3, [pc, #272]	@ (800d32c <plug_holes+0x124>)
 800d21c:	f240 12df 	movw	r2, #479	@ 0x1df
 800d220:	4943      	ldr	r1, [pc, #268]	@ (800d330 <plug_holes+0x128>)
 800d222:	4844      	ldr	r0, [pc, #272]	@ (800d334 <plug_holes+0x12c>)
 800d224:	f00c ff76 	bl	801a114 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d228:	4b43      	ldr	r3, [pc, #268]	@ (800d338 <plug_holes+0x130>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d306      	bcc.n	800d240 <plug_holes+0x38>
 800d232:	4b3e      	ldr	r3, [pc, #248]	@ (800d32c <plug_holes+0x124>)
 800d234:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d238:	4940      	ldr	r1, [pc, #256]	@ (800d33c <plug_holes+0x134>)
 800d23a:	483e      	ldr	r0, [pc, #248]	@ (800d334 <plug_holes+0x12c>)
 800d23c:	f00c ff6a 	bl	801a114 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	791b      	ldrb	r3, [r3, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d006      	beq.n	800d256 <plug_holes+0x4e>
 800d248:	4b38      	ldr	r3, [pc, #224]	@ (800d32c <plug_holes+0x124>)
 800d24a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d24e:	493c      	ldr	r1, [pc, #240]	@ (800d340 <plug_holes+0x138>)
 800d250:	4838      	ldr	r0, [pc, #224]	@ (800d334 <plug_holes+0x12c>)
 800d252:	f00c ff5f 	bl	801a114 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d25e:	d906      	bls.n	800d26e <plug_holes+0x66>
 800d260:	4b32      	ldr	r3, [pc, #200]	@ (800d32c <plug_holes+0x124>)
 800d262:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d266:	4937      	ldr	r1, [pc, #220]	@ (800d344 <plug_holes+0x13c>)
 800d268:	4832      	ldr	r0, [pc, #200]	@ (800d334 <plug_holes+0x12c>)
 800d26a:	f00c ff53 	bl	801a114 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff ffa4 	bl	800d1c0 <ptr_to_mem>
 800d278:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d024      	beq.n	800d2cc <plug_holes+0xc4>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	791b      	ldrb	r3, [r3, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d120      	bne.n	800d2cc <plug_holes+0xc4>
 800d28a:	4b2b      	ldr	r3, [pc, #172]	@ (800d338 <plug_holes+0x130>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	429a      	cmp	r2, r3
 800d292:	d01b      	beq.n	800d2cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d294:	4b2c      	ldr	r3, [pc, #176]	@ (800d348 <plug_holes+0x140>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d102      	bne.n	800d2a4 <plug_holes+0x9c>
      lfree = mem;
 800d29e:	4a2a      	ldr	r2, [pc, #168]	@ (800d348 <plug_holes+0x140>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	881a      	ldrh	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2b4:	d00a      	beq.n	800d2cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff ff80 	bl	800d1c0 <ptr_to_mem>
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ff8e 	bl	800d1e4 <mem_to_ptr>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	885b      	ldrh	r3, [r3, #2]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff ff75 	bl	800d1c0 <ptr_to_mem>
 800d2d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d01f      	beq.n	800d320 <plug_holes+0x118>
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	791b      	ldrb	r3, [r3, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11b      	bne.n	800d320 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d2e8:	4b17      	ldr	r3, [pc, #92]	@ (800d348 <plug_holes+0x140>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d102      	bne.n	800d2f8 <plug_holes+0xf0>
      lfree = pmem;
 800d2f2:	4a15      	ldr	r2, [pc, #84]	@ (800d348 <plug_holes+0x140>)
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d308:	d00a      	beq.n	800d320 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff ff56 	bl	800d1c0 <ptr_to_mem>
 800d314:	4604      	mov	r4, r0
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	f7ff ff64 	bl	800d1e4 <mem_to_ptr>
 800d31c:	4603      	mov	r3, r0
 800d31e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	bd90      	pop	{r4, r7, pc}
 800d328:	20013174 	.word	0x20013174
 800d32c:	0801c2bc 	.word	0x0801c2bc
 800d330:	0801c2ec 	.word	0x0801c2ec
 800d334:	0801c304 	.word	0x0801c304
 800d338:	20013178 	.word	0x20013178
 800d33c:	0801c32c 	.word	0x0801c32c
 800d340:	0801c348 	.word	0x0801c348
 800d344:	0801c364 	.word	0x0801c364
 800d348:	20013180 	.word	0x20013180

0800d34c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d352:	4b1f      	ldr	r3, [pc, #124]	@ (800d3d0 <mem_init+0x84>)
 800d354:	3303      	adds	r3, #3
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	461a      	mov	r2, r3
 800d35c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d4 <mem_init+0x88>)
 800d35e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d360:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d4 <mem_init+0x88>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d36c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d37a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d37e:	f7ff ff1f 	bl	800d1c0 <ptr_to_mem>
 800d382:	4603      	mov	r3, r0
 800d384:	4a14      	ldr	r2, [pc, #80]	@ (800d3d8 <mem_init+0x8c>)
 800d386:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d388:	4b13      	ldr	r3, [pc, #76]	@ (800d3d8 <mem_init+0x8c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2201      	movs	r2, #1
 800d38e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d390:	4b11      	ldr	r3, [pc, #68]	@ (800d3d8 <mem_init+0x8c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d398:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d39a:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d8 <mem_init+0x8c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d3a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d3a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d4 <mem_init+0x88>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a0c      	ldr	r2, [pc, #48]	@ (800d3dc <mem_init+0x90>)
 800d3aa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d3ac:	480c      	ldr	r0, [pc, #48]	@ (800d3e0 <mem_init+0x94>)
 800d3ae:	f00c fd35 	bl	8019e1c <sys_mutex_new>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e4 <mem_init+0x98>)
 800d3ba:	f240 221f 	movw	r2, #543	@ 0x21f
 800d3be:	490a      	ldr	r1, [pc, #40]	@ (800d3e8 <mem_init+0x9c>)
 800d3c0:	480a      	ldr	r0, [pc, #40]	@ (800d3ec <mem_init+0xa0>)
 800d3c2:	f00c fea7 	bl	801a114 <iprintf>
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2000b160 	.word	0x2000b160
 800d3d4:	20013174 	.word	0x20013174
 800d3d8:	20013178 	.word	0x20013178
 800d3dc:	20013180 	.word	0x20013180
 800d3e0:	2001317c 	.word	0x2001317c
 800d3e4:	0801c2bc 	.word	0x0801c2bc
 800d3e8:	0801c390 	.word	0x0801c390
 800d3ec:	0801c304 	.word	0x0801c304

0800d3f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fef3 	bl	800d1e4 <mem_to_ptr>
 800d3fe:	4603      	mov	r3, r0
 800d400:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff feda 	bl	800d1c0 <ptr_to_mem>
 800d40c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	885b      	ldrh	r3, [r3, #2]
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fed4 	bl	800d1c0 <ptr_to_mem>
 800d418:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d422:	d818      	bhi.n	800d456 <mem_link_valid+0x66>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	885b      	ldrh	r3, [r3, #2]
 800d428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d42c:	d813      	bhi.n	800d456 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d432:	8afa      	ldrh	r2, [r7, #22]
 800d434:	429a      	cmp	r2, r3
 800d436:	d004      	beq.n	800d442 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	8afa      	ldrh	r2, [r7, #22]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d109      	bne.n	800d456 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d442:	4b08      	ldr	r3, [pc, #32]	@ (800d464 <mem_link_valid+0x74>)
 800d444:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d006      	beq.n	800d45a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	885b      	ldrh	r3, [r3, #2]
 800d450:	8afa      	ldrh	r2, [r7, #22]
 800d452:	429a      	cmp	r2, r3
 800d454:	d001      	beq.n	800d45a <mem_link_valid+0x6a>
    return 0;
 800d456:	2300      	movs	r3, #0
 800d458:	e000      	b.n	800d45c <mem_link_valid+0x6c>
  }
  return 1;
 800d45a:	2301      	movs	r3, #1
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20013178 	.word	0x20013178

0800d468 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d070      	beq.n	800d558 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00d      	beq.n	800d49c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d480:	4b37      	ldr	r3, [pc, #220]	@ (800d560 <mem_free+0xf8>)
 800d482:	f240 2273 	movw	r2, #627	@ 0x273
 800d486:	4937      	ldr	r1, [pc, #220]	@ (800d564 <mem_free+0xfc>)
 800d488:	4837      	ldr	r0, [pc, #220]	@ (800d568 <mem_free+0x100>)
 800d48a:	f00c fe43 	bl	801a114 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d48e:	f00c fd23 	bl	8019ed8 <sys_arch_protect>
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f00c fd2d 	bl	8019ef4 <sys_arch_unprotect>
    return;
 800d49a:	e05e      	b.n	800d55a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3b08      	subs	r3, #8
 800d4a0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d4a2:	4b32      	ldr	r3, [pc, #200]	@ (800d56c <mem_free+0x104>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	69fa      	ldr	r2, [r7, #28]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d306      	bcc.n	800d4ba <mem_free+0x52>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 020c 	add.w	r2, r3, #12
 800d4b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d570 <mem_free+0x108>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90d      	bls.n	800d4d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d4ba:	4b29      	ldr	r3, [pc, #164]	@ (800d560 <mem_free+0xf8>)
 800d4bc:	f240 227f 	movw	r2, #639	@ 0x27f
 800d4c0:	492c      	ldr	r1, [pc, #176]	@ (800d574 <mem_free+0x10c>)
 800d4c2:	4829      	ldr	r0, [pc, #164]	@ (800d568 <mem_free+0x100>)
 800d4c4:	f00c fe26 	bl	801a114 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4c8:	f00c fd06 	bl	8019ed8 <sys_arch_protect>
 800d4cc:	6138      	str	r0, [r7, #16]
 800d4ce:	6938      	ldr	r0, [r7, #16]
 800d4d0:	f00c fd10 	bl	8019ef4 <sys_arch_unprotect>
    return;
 800d4d4:	e041      	b.n	800d55a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d4d6:	4828      	ldr	r0, [pc, #160]	@ (800d578 <mem_free+0x110>)
 800d4d8:	f00c fcbc 	bl	8019e54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	791b      	ldrb	r3, [r3, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d110      	bne.n	800d506 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d4e4:	4b1e      	ldr	r3, [pc, #120]	@ (800d560 <mem_free+0xf8>)
 800d4e6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d4ea:	4924      	ldr	r1, [pc, #144]	@ (800d57c <mem_free+0x114>)
 800d4ec:	481e      	ldr	r0, [pc, #120]	@ (800d568 <mem_free+0x100>)
 800d4ee:	f00c fe11 	bl	801a114 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d4f2:	4821      	ldr	r0, [pc, #132]	@ (800d578 <mem_free+0x110>)
 800d4f4:	f00c fcbd 	bl	8019e72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4f8:	f00c fcee 	bl	8019ed8 <sys_arch_protect>
 800d4fc:	6178      	str	r0, [r7, #20]
 800d4fe:	6978      	ldr	r0, [r7, #20]
 800d500:	f00c fcf8 	bl	8019ef4 <sys_arch_unprotect>
    return;
 800d504:	e029      	b.n	800d55a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d506:	69f8      	ldr	r0, [r7, #28]
 800d508:	f7ff ff72 	bl	800d3f0 <mem_link_valid>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d110      	bne.n	800d534 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d512:	4b13      	ldr	r3, [pc, #76]	@ (800d560 <mem_free+0xf8>)
 800d514:	f240 2295 	movw	r2, #661	@ 0x295
 800d518:	4919      	ldr	r1, [pc, #100]	@ (800d580 <mem_free+0x118>)
 800d51a:	4813      	ldr	r0, [pc, #76]	@ (800d568 <mem_free+0x100>)
 800d51c:	f00c fdfa 	bl	801a114 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d520:	4815      	ldr	r0, [pc, #84]	@ (800d578 <mem_free+0x110>)
 800d522:	f00c fca6 	bl	8019e72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d526:	f00c fcd7 	bl	8019ed8 <sys_arch_protect>
 800d52a:	61b8      	str	r0, [r7, #24]
 800d52c:	69b8      	ldr	r0, [r7, #24]
 800d52e:	f00c fce1 	bl	8019ef4 <sys_arch_unprotect>
    return;
 800d532:	e012      	b.n	800d55a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2200      	movs	r2, #0
 800d538:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d53a:	4b12      	ldr	r3, [pc, #72]	@ (800d584 <mem_free+0x11c>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	429a      	cmp	r2, r3
 800d542:	d202      	bcs.n	800d54a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d544:	4a0f      	ldr	r2, [pc, #60]	@ (800d584 <mem_free+0x11c>)
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d54a:	69f8      	ldr	r0, [r7, #28]
 800d54c:	f7ff fe5c 	bl	800d208 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d550:	4809      	ldr	r0, [pc, #36]	@ (800d578 <mem_free+0x110>)
 800d552:	f00c fc8e 	bl	8019e72 <sys_mutex_unlock>
 800d556:	e000      	b.n	800d55a <mem_free+0xf2>
    return;
 800d558:	bf00      	nop
}
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801c2bc 	.word	0x0801c2bc
 800d564:	0801c3ac 	.word	0x0801c3ac
 800d568:	0801c304 	.word	0x0801c304
 800d56c:	20013174 	.word	0x20013174
 800d570:	20013178 	.word	0x20013178
 800d574:	0801c3d0 	.word	0x0801c3d0
 800d578:	2001317c 	.word	0x2001317c
 800d57c:	0801c3ec 	.word	0x0801c3ec
 800d580:	0801c414 	.word	0x0801c414
 800d584:	20013180 	.word	0x20013180

0800d588 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d594:	887b      	ldrh	r3, [r7, #2]
 800d596:	3303      	adds	r3, #3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d5a0:	8bfb      	ldrh	r3, [r7, #30]
 800d5a2:	2b0b      	cmp	r3, #11
 800d5a4:	d801      	bhi.n	800d5aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d5aa:	8bfb      	ldrh	r3, [r7, #30]
 800d5ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5b0:	d803      	bhi.n	800d5ba <mem_trim+0x32>
 800d5b2:	8bfa      	ldrh	r2, [r7, #30]
 800d5b4:	887b      	ldrh	r3, [r7, #2]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d201      	bcs.n	800d5be <mem_trim+0x36>
    return NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e0d8      	b.n	800d770 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d5be:	4b6e      	ldr	r3, [pc, #440]	@ (800d778 <mem_trim+0x1f0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d304      	bcc.n	800d5d2 <mem_trim+0x4a>
 800d5c8:	4b6c      	ldr	r3, [pc, #432]	@ (800d77c <mem_trim+0x1f4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d306      	bcc.n	800d5e0 <mem_trim+0x58>
 800d5d2:	4b6b      	ldr	r3, [pc, #428]	@ (800d780 <mem_trim+0x1f8>)
 800d5d4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d5d8:	496a      	ldr	r1, [pc, #424]	@ (800d784 <mem_trim+0x1fc>)
 800d5da:	486b      	ldr	r0, [pc, #428]	@ (800d788 <mem_trim+0x200>)
 800d5dc:	f00c fd9a 	bl	801a114 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d5e0:	4b65      	ldr	r3, [pc, #404]	@ (800d778 <mem_trim+0x1f0>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d304      	bcc.n	800d5f4 <mem_trim+0x6c>
 800d5ea:	4b64      	ldr	r3, [pc, #400]	@ (800d77c <mem_trim+0x1f4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d307      	bcc.n	800d604 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5f4:	f00c fc70 	bl	8019ed8 <sys_arch_protect>
 800d5f8:	60b8      	str	r0, [r7, #8]
 800d5fa:	68b8      	ldr	r0, [r7, #8]
 800d5fc:	f00c fc7a 	bl	8019ef4 <sys_arch_unprotect>
    return rmem;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	e0b5      	b.n	800d770 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3b08      	subs	r3, #8
 800d608:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d60a:	69b8      	ldr	r0, [r7, #24]
 800d60c:	f7ff fdea 	bl	800d1e4 <mem_to_ptr>
 800d610:	4603      	mov	r3, r0
 800d612:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	881a      	ldrh	r2, [r3, #0]
 800d618:	8afb      	ldrh	r3, [r7, #22]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	3b08      	subs	r3, #8
 800d620:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d622:	8bfa      	ldrh	r2, [r7, #30]
 800d624:	8abb      	ldrh	r3, [r7, #20]
 800d626:	429a      	cmp	r2, r3
 800d628:	d906      	bls.n	800d638 <mem_trim+0xb0>
 800d62a:	4b55      	ldr	r3, [pc, #340]	@ (800d780 <mem_trim+0x1f8>)
 800d62c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d630:	4956      	ldr	r1, [pc, #344]	@ (800d78c <mem_trim+0x204>)
 800d632:	4855      	ldr	r0, [pc, #340]	@ (800d788 <mem_trim+0x200>)
 800d634:	f00c fd6e 	bl	801a114 <iprintf>
  if (newsize > size) {
 800d638:	8bfa      	ldrh	r2, [r7, #30]
 800d63a:	8abb      	ldrh	r3, [r7, #20]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d901      	bls.n	800d644 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	e095      	b.n	800d770 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d644:	8bfa      	ldrh	r2, [r7, #30]
 800d646:	8abb      	ldrh	r3, [r7, #20]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d101      	bne.n	800d650 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	e08f      	b.n	800d770 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d650:	484f      	ldr	r0, [pc, #316]	@ (800d790 <mem_trim+0x208>)
 800d652:	f00c fbff 	bl	8019e54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fdb0 	bl	800d1c0 <ptr_to_mem>
 800d660:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	791b      	ldrb	r3, [r3, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d13f      	bne.n	800d6ea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d672:	d106      	bne.n	800d682 <mem_trim+0xfa>
 800d674:	4b42      	ldr	r3, [pc, #264]	@ (800d780 <mem_trim+0x1f8>)
 800d676:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d67a:	4946      	ldr	r1, [pc, #280]	@ (800d794 <mem_trim+0x20c>)
 800d67c:	4842      	ldr	r0, [pc, #264]	@ (800d788 <mem_trim+0x200>)
 800d67e:	f00c fd49 	bl	801a114 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d688:	8afa      	ldrh	r2, [r7, #22]
 800d68a:	8bfb      	ldrh	r3, [r7, #30]
 800d68c:	4413      	add	r3, r2
 800d68e:	b29b      	uxth	r3, r3
 800d690:	3308      	adds	r3, #8
 800d692:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d694:	4b40      	ldr	r3, [pc, #256]	@ (800d798 <mem_trim+0x210>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d106      	bne.n	800d6ac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d69e:	89fb      	ldrh	r3, [r7, #14]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fd8d 	bl	800d1c0 <ptr_to_mem>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	4a3b      	ldr	r2, [pc, #236]	@ (800d798 <mem_trim+0x210>)
 800d6aa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d6ac:	89fb      	ldrh	r3, [r7, #14]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff fd86 	bl	800d1c0 <ptr_to_mem>
 800d6b4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	89ba      	ldrh	r2, [r7, #12]
 800d6c0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	8afa      	ldrh	r2, [r7, #22]
 800d6c6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	89fa      	ldrh	r2, [r7, #14]
 800d6cc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6d6:	d047      	beq.n	800d768 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff fd6f 	bl	800d1c0 <ptr_to_mem>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	89fb      	ldrh	r3, [r7, #14]
 800d6e6:	8053      	strh	r3, [r2, #2]
 800d6e8:	e03e      	b.n	800d768 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d6ea:	8bfb      	ldrh	r3, [r7, #30]
 800d6ec:	f103 0214 	add.w	r2, r3, #20
 800d6f0:	8abb      	ldrh	r3, [r7, #20]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d838      	bhi.n	800d768 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6f6:	8afa      	ldrh	r2, [r7, #22]
 800d6f8:	8bfb      	ldrh	r3, [r7, #30]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	3308      	adds	r3, #8
 800d700:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d70a:	d106      	bne.n	800d71a <mem_trim+0x192>
 800d70c:	4b1c      	ldr	r3, [pc, #112]	@ (800d780 <mem_trim+0x1f8>)
 800d70e:	f240 3216 	movw	r2, #790	@ 0x316
 800d712:	4920      	ldr	r1, [pc, #128]	@ (800d794 <mem_trim+0x20c>)
 800d714:	481c      	ldr	r0, [pc, #112]	@ (800d788 <mem_trim+0x200>)
 800d716:	f00c fcfd 	bl	801a114 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d71a:	89fb      	ldrh	r3, [r7, #14]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fd4f 	bl	800d1c0 <ptr_to_mem>
 800d722:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d724:	4b1c      	ldr	r3, [pc, #112]	@ (800d798 <mem_trim+0x210>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d202      	bcs.n	800d734 <mem_trim+0x1ac>
      lfree = mem2;
 800d72e:	4a1a      	ldr	r2, [pc, #104]	@ (800d798 <mem_trim+0x210>)
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	2200      	movs	r2, #0
 800d738:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	881a      	ldrh	r2, [r3, #0]
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	8afa      	ldrh	r2, [r7, #22]
 800d746:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	89fa      	ldrh	r2, [r7, #14]
 800d74c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d756:	d007      	beq.n	800d768 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fd2f 	bl	800d1c0 <ptr_to_mem>
 800d762:	4602      	mov	r2, r0
 800d764:	89fb      	ldrh	r3, [r7, #14]
 800d766:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d768:	4809      	ldr	r0, [pc, #36]	@ (800d790 <mem_trim+0x208>)
 800d76a:	f00c fb82 	bl	8019e72 <sys_mutex_unlock>
  return rmem;
 800d76e:	687b      	ldr	r3, [r7, #4]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20013174 	.word	0x20013174
 800d77c:	20013178 	.word	0x20013178
 800d780:	0801c2bc 	.word	0x0801c2bc
 800d784:	0801c448 	.word	0x0801c448
 800d788:	0801c304 	.word	0x0801c304
 800d78c:	0801c460 	.word	0x0801c460
 800d790:	2001317c 	.word	0x2001317c
 800d794:	0801c480 	.word	0x0801c480
 800d798:	20013180 	.word	0x20013180

0800d79c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d7a6:	88fb      	ldrh	r3, [r7, #6]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <mem_malloc+0x14>
    return NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e0e2      	b.n	800d976 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d7bc:	8bbb      	ldrh	r3, [r7, #28]
 800d7be:	2b0b      	cmp	r3, #11
 800d7c0:	d801      	bhi.n	800d7c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d7c6:	8bbb      	ldrh	r3, [r7, #28]
 800d7c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7cc:	d803      	bhi.n	800d7d6 <mem_malloc+0x3a>
 800d7ce:	8bba      	ldrh	r2, [r7, #28]
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d201      	bcs.n	800d7da <mem_malloc+0x3e>
    return NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e0cd      	b.n	800d976 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d7da:	4869      	ldr	r0, [pc, #420]	@ (800d980 <mem_malloc+0x1e4>)
 800d7dc:	f00c fb3a 	bl	8019e54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d7e0:	4b68      	ldr	r3, [pc, #416]	@ (800d984 <mem_malloc+0x1e8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7ff fcfd 	bl	800d1e4 <mem_to_ptr>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	83fb      	strh	r3, [r7, #30]
 800d7ee:	e0b7      	b.n	800d960 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d7f0:	8bfb      	ldrh	r3, [r7, #30]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff fce4 	bl	800d1c0 <ptr_to_mem>
 800d7f8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	791b      	ldrb	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f040 80a7 	bne.w	800d952 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	461a      	mov	r2, r3
 800d80a:	8bfb      	ldrh	r3, [r7, #30]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	f1a3 0208 	sub.w	r2, r3, #8
 800d812:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d814:	429a      	cmp	r2, r3
 800d816:	f0c0 809c 	bcc.w	800d952 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	8bfb      	ldrh	r3, [r7, #30]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	f1a3 0208 	sub.w	r2, r3, #8
 800d828:	8bbb      	ldrh	r3, [r7, #28]
 800d82a:	3314      	adds	r3, #20
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d333      	bcc.n	800d898 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d830:	8bfa      	ldrh	r2, [r7, #30]
 800d832:	8bbb      	ldrh	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	b29b      	uxth	r3, r3
 800d838:	3308      	adds	r3, #8
 800d83a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d83c:	8a7b      	ldrh	r3, [r7, #18]
 800d83e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d842:	d106      	bne.n	800d852 <mem_malloc+0xb6>
 800d844:	4b50      	ldr	r3, [pc, #320]	@ (800d988 <mem_malloc+0x1ec>)
 800d846:	f240 3287 	movw	r2, #903	@ 0x387
 800d84a:	4950      	ldr	r1, [pc, #320]	@ (800d98c <mem_malloc+0x1f0>)
 800d84c:	4850      	ldr	r0, [pc, #320]	@ (800d990 <mem_malloc+0x1f4>)
 800d84e:	f00c fc61 	bl	801a114 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d852:	8a7b      	ldrh	r3, [r7, #18]
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff fcb3 	bl	800d1c0 <ptr_to_mem>
 800d85a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	881a      	ldrh	r2, [r3, #0]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	8bfa      	ldrh	r2, [r7, #30]
 800d86e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	8a7a      	ldrh	r2, [r7, #18]
 800d874:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2201      	movs	r2, #1
 800d87a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d884:	d00b      	beq.n	800d89e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fc98 	bl	800d1c0 <ptr_to_mem>
 800d890:	4602      	mov	r2, r0
 800d892:	8a7b      	ldrh	r3, [r7, #18]
 800d894:	8053      	strh	r3, [r2, #2]
 800d896:	e002      	b.n	800d89e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2201      	movs	r2, #1
 800d89c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d89e:	4b39      	ldr	r3, [pc, #228]	@ (800d984 <mem_malloc+0x1e8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d127      	bne.n	800d8f8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d8a8:	4b36      	ldr	r3, [pc, #216]	@ (800d984 <mem_malloc+0x1e8>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d8ae:	e005      	b.n	800d8bc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fc83 	bl	800d1c0 <ptr_to_mem>
 800d8ba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	791b      	ldrb	r3, [r3, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <mem_malloc+0x132>
 800d8c4:	4b33      	ldr	r3, [pc, #204]	@ (800d994 <mem_malloc+0x1f8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d1f0      	bne.n	800d8b0 <mem_malloc+0x114>
          }
          lfree = cur;
 800d8ce:	4a2d      	ldr	r2, [pc, #180]	@ (800d984 <mem_malloc+0x1e8>)
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d8d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d984 <mem_malloc+0x1e8>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	4b2e      	ldr	r3, [pc, #184]	@ (800d994 <mem_malloc+0x1f8>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d00b      	beq.n	800d8f8 <mem_malloc+0x15c>
 800d8e0:	4b28      	ldr	r3, [pc, #160]	@ (800d984 <mem_malloc+0x1e8>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	791b      	ldrb	r3, [r3, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <mem_malloc+0x15c>
 800d8ea:	4b27      	ldr	r3, [pc, #156]	@ (800d988 <mem_malloc+0x1ec>)
 800d8ec:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d8f0:	4929      	ldr	r1, [pc, #164]	@ (800d998 <mem_malloc+0x1fc>)
 800d8f2:	4827      	ldr	r0, [pc, #156]	@ (800d990 <mem_malloc+0x1f4>)
 800d8f4:	f00c fc0e 	bl	801a114 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d8f8:	4821      	ldr	r0, [pc, #132]	@ (800d980 <mem_malloc+0x1e4>)
 800d8fa:	f00c faba 	bl	8019e72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d8fe:	8bba      	ldrh	r2, [r7, #28]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	4413      	add	r3, r2
 800d904:	3308      	adds	r3, #8
 800d906:	4a23      	ldr	r2, [pc, #140]	@ (800d994 <mem_malloc+0x1f8>)
 800d908:	6812      	ldr	r2, [r2, #0]
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d906      	bls.n	800d91c <mem_malloc+0x180>
 800d90e:	4b1e      	ldr	r3, [pc, #120]	@ (800d988 <mem_malloc+0x1ec>)
 800d910:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d914:	4921      	ldr	r1, [pc, #132]	@ (800d99c <mem_malloc+0x200>)
 800d916:	481e      	ldr	r0, [pc, #120]	@ (800d990 <mem_malloc+0x1f4>)
 800d918:	f00c fbfc 	bl	801a114 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f003 0303 	and.w	r3, r3, #3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d006      	beq.n	800d934 <mem_malloc+0x198>
 800d926:	4b18      	ldr	r3, [pc, #96]	@ (800d988 <mem_malloc+0x1ec>)
 800d928:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d92c:	491c      	ldr	r1, [pc, #112]	@ (800d9a0 <mem_malloc+0x204>)
 800d92e:	4818      	ldr	r0, [pc, #96]	@ (800d990 <mem_malloc+0x1f4>)
 800d930:	f00c fbf0 	bl	801a114 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <mem_malloc+0x1b0>
 800d93e:	4b12      	ldr	r3, [pc, #72]	@ (800d988 <mem_malloc+0x1ec>)
 800d940:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d944:	4917      	ldr	r1, [pc, #92]	@ (800d9a4 <mem_malloc+0x208>)
 800d946:	4812      	ldr	r0, [pc, #72]	@ (800d990 <mem_malloc+0x1f4>)
 800d948:	f00c fbe4 	bl	801a114 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	3308      	adds	r3, #8
 800d950:	e011      	b.n	800d976 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d952:	8bfb      	ldrh	r3, [r7, #30]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fc33 	bl	800d1c0 <ptr_to_mem>
 800d95a:	4603      	mov	r3, r0
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d960:	8bfa      	ldrh	r2, [r7, #30]
 800d962:	8bbb      	ldrh	r3, [r7, #28]
 800d964:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800d968:	429a      	cmp	r2, r3
 800d96a:	f4ff af41 	bcc.w	800d7f0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d96e:	4804      	ldr	r0, [pc, #16]	@ (800d980 <mem_malloc+0x1e4>)
 800d970:	f00c fa7f 	bl	8019e72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3720      	adds	r7, #32
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	2001317c 	.word	0x2001317c
 800d984:	20013180 	.word	0x20013180
 800d988:	0801c2bc 	.word	0x0801c2bc
 800d98c:	0801c480 	.word	0x0801c480
 800d990:	0801c304 	.word	0x0801c304
 800d994:	20013178 	.word	0x20013178
 800d998:	0801c494 	.word	0x0801c494
 800d99c:	0801c4b0 	.word	0x0801c4b0
 800d9a0:	0801c4e0 	.word	0x0801c4e0
 800d9a4:	0801c510 	.word	0x0801c510

0800d9a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	3303      	adds	r3, #3
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	e011      	b.n	800d9ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	889b      	ldrh	r3, [r3, #4]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	88db      	ldrh	r3, [r3, #6]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	dbe7      	blt.n	800d9ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d9fa:	bf00      	nop
 800d9fc:	bf00      	nop
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da0e:	2300      	movs	r3, #0
 800da10:	80fb      	strh	r3, [r7, #6]
 800da12:	e009      	b.n	800da28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800da14:	88fb      	ldrh	r3, [r7, #6]
 800da16:	4a08      	ldr	r2, [pc, #32]	@ (800da38 <memp_init+0x30>)
 800da18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff ffc3 	bl	800d9a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	3301      	adds	r3, #1
 800da26:	80fb      	strh	r3, [r7, #6]
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	2b0c      	cmp	r3, #12
 800da2c:	d9f2      	bls.n	800da14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800da2e:	bf00      	nop
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	08022fb0 	.word	0x08022fb0

0800da3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800da44:	f00c fa48 	bl	8019ed8 <sys_arch_protect>
 800da48:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d015      	beq.n	800da84 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	6812      	ldr	r2, [r2, #0]
 800da60:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f003 0303 	and.w	r3, r3, #3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <do_memp_malloc_pool+0x3e>
 800da6c:	4b09      	ldr	r3, [pc, #36]	@ (800da94 <do_memp_malloc_pool+0x58>)
 800da6e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800da72:	4909      	ldr	r1, [pc, #36]	@ (800da98 <do_memp_malloc_pool+0x5c>)
 800da74:	4809      	ldr	r0, [pc, #36]	@ (800da9c <do_memp_malloc_pool+0x60>)
 800da76:	f00c fb4d 	bl	801a114 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f00c fa3a 	bl	8019ef4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	e003      	b.n	800da8c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f00c fa35 	bl	8019ef4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	0801c5cc 	.word	0x0801c5cc
 800da98:	0801c5fc 	.word	0x0801c5fc
 800da9c:	0801c620 	.word	0x0801c620

0800daa0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	2b0c      	cmp	r3, #12
 800daae:	d908      	bls.n	800dac2 <memp_malloc+0x22>
 800dab0:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <memp_malloc+0x3c>)
 800dab2:	f240 1257 	movw	r2, #343	@ 0x157
 800dab6:	490a      	ldr	r1, [pc, #40]	@ (800dae0 <memp_malloc+0x40>)
 800dab8:	480a      	ldr	r0, [pc, #40]	@ (800dae4 <memp_malloc+0x44>)
 800daba:	f00c fb2b 	bl	801a114 <iprintf>
 800dabe:	2300      	movs	r3, #0
 800dac0:	e008      	b.n	800dad4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	4a08      	ldr	r2, [pc, #32]	@ (800dae8 <memp_malloc+0x48>)
 800dac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff ffb6 	bl	800da3c <do_memp_malloc_pool>
 800dad0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dad2:	68fb      	ldr	r3, [r7, #12]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	0801c5cc 	.word	0x0801c5cc
 800dae0:	0801c65c 	.word	0x0801c65c
 800dae4:	0801c620 	.word	0x0801c620
 800dae8:	08022fb0 	.word	0x08022fb0

0800daec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	f003 0303 	and.w	r3, r3, #3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d006      	beq.n	800db0e <do_memp_free_pool+0x22>
 800db00:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <do_memp_free_pool+0x4c>)
 800db02:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800db06:	490d      	ldr	r1, [pc, #52]	@ (800db3c <do_memp_free_pool+0x50>)
 800db08:	480d      	ldr	r0, [pc, #52]	@ (800db40 <do_memp_free_pool+0x54>)
 800db0a:	f00c fb03 	bl	801a114 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800db12:	f00c f9e1 	bl	8019ed8 <sys_arch_protect>
 800db16:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800db2a:	68b8      	ldr	r0, [r7, #8]
 800db2c:	f00c f9e2 	bl	8019ef4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800db30:	bf00      	nop
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	0801c5cc 	.word	0x0801c5cc
 800db3c:	0801c67c 	.word	0x0801c67c
 800db40:	0801c620 	.word	0x0801c620

0800db44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	6039      	str	r1, [r7, #0]
 800db4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	2b0c      	cmp	r3, #12
 800db54:	d907      	bls.n	800db66 <memp_free+0x22>
 800db56:	4b0c      	ldr	r3, [pc, #48]	@ (800db88 <memp_free+0x44>)
 800db58:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800db5c:	490b      	ldr	r1, [pc, #44]	@ (800db8c <memp_free+0x48>)
 800db5e:	480c      	ldr	r0, [pc, #48]	@ (800db90 <memp_free+0x4c>)
 800db60:	f00c fad8 	bl	801a114 <iprintf>
 800db64:	e00c      	b.n	800db80 <memp_free+0x3c>

  if (mem == NULL) {
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	4a09      	ldr	r2, [pc, #36]	@ (800db94 <memp_free+0x50>)
 800db70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff ffb8 	bl	800daec <do_memp_free_pool>
 800db7c:	e000      	b.n	800db80 <memp_free+0x3c>
    return;
 800db7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	0801c5cc 	.word	0x0801c5cc
 800db8c:	0801c69c 	.word	0x0801c69c
 800db90:	0801c620 	.word	0x0801c620
 800db94:	08022fb0 	.word	0x08022fb0

0800db98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800db98:	b480      	push	{r7}
 800db9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800db9c:	bf00      	nop
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
	...

0800dba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d108      	bne.n	800dbce <netif_add+0x26>
 800dbbc:	4b5b      	ldr	r3, [pc, #364]	@ (800dd2c <netif_add+0x184>)
 800dbbe:	f240 1227 	movw	r2, #295	@ 0x127
 800dbc2:	495b      	ldr	r1, [pc, #364]	@ (800dd30 <netif_add+0x188>)
 800dbc4:	485b      	ldr	r0, [pc, #364]	@ (800dd34 <netif_add+0x18c>)
 800dbc6:	f00c faa5 	bl	801a114 <iprintf>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e0a9      	b.n	800dd22 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d108      	bne.n	800dbe6 <netif_add+0x3e>
 800dbd4:	4b55      	ldr	r3, [pc, #340]	@ (800dd2c <netif_add+0x184>)
 800dbd6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800dbda:	4957      	ldr	r1, [pc, #348]	@ (800dd38 <netif_add+0x190>)
 800dbdc:	4855      	ldr	r0, [pc, #340]	@ (800dd34 <netif_add+0x18c>)
 800dbde:	f00c fa99 	bl	801a114 <iprintf>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e09d      	b.n	800dd22 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dbec:	4b53      	ldr	r3, [pc, #332]	@ (800dd3c <netif_add+0x194>)
 800dbee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dbf6:	4b51      	ldr	r3, [pc, #324]	@ (800dd3c <netif_add+0x194>)
 800dbf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dc00:	4b4e      	ldr	r3, [pc, #312]	@ (800dd3c <netif_add+0x194>)
 800dc02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4a49      	ldr	r2, [pc, #292]	@ (800dd40 <netif_add+0x198>)
 800dc1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3324      	adds	r3, #36	@ 0x24
 800dc2e:	2204      	movs	r2, #4
 800dc30:	2100      	movs	r1, #0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f00c fc38 	bl	801a4a8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6a3a      	ldr	r2, [r7, #32]
 800dc42:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dc44:	4b3f      	ldr	r3, [pc, #252]	@ (800dd44 <netif_add+0x19c>)
 800dc46:	781a      	ldrb	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc52:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f000 f914 	bl	800de88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <netif_add+0xc8>
    return NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	e058      	b.n	800dd22 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dc76:	2bff      	cmp	r3, #255	@ 0xff
 800dc78:	d103      	bne.n	800dc82 <netif_add+0xda>
        netif->num = 0;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc86:	4b30      	ldr	r3, [pc, #192]	@ (800dd48 <netif_add+0x1a0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	e02b      	b.n	800dce6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d106      	bne.n	800dca4 <netif_add+0xfc>
 800dc96:	4b25      	ldr	r3, [pc, #148]	@ (800dd2c <netif_add+0x184>)
 800dc98:	f240 128b 	movw	r2, #395	@ 0x18b
 800dc9c:	492b      	ldr	r1, [pc, #172]	@ (800dd4c <netif_add+0x1a4>)
 800dc9e:	4825      	ldr	r0, [pc, #148]	@ (800dd34 <netif_add+0x18c>)
 800dca0:	f00c fa38 	bl	801a114 <iprintf>
        num_netifs++;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	3301      	adds	r3, #1
 800dca8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2bff      	cmp	r3, #255	@ 0xff
 800dcae:	dd06      	ble.n	800dcbe <netif_add+0x116>
 800dcb0:	4b1e      	ldr	r3, [pc, #120]	@ (800dd2c <netif_add+0x184>)
 800dcb2:	f240 128d 	movw	r2, #397	@ 0x18d
 800dcb6:	4926      	ldr	r1, [pc, #152]	@ (800dd50 <netif_add+0x1a8>)
 800dcb8:	481e      	ldr	r0, [pc, #120]	@ (800dd34 <netif_add+0x18c>)
 800dcba:	f00c fa2b 	bl	801a114 <iprintf>
        if (netif2->num == netif->num) {
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d108      	bne.n	800dce0 <netif_add+0x138>
          netif->num++;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800dcde:	e005      	b.n	800dcec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1d0      	bne.n	800dc8e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1be      	bne.n	800dc70 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcf8:	2bfe      	cmp	r3, #254	@ 0xfe
 800dcfa:	d103      	bne.n	800dd04 <netif_add+0x15c>
    netif_num = 0;
 800dcfc:	4b11      	ldr	r3, [pc, #68]	@ (800dd44 <netif_add+0x19c>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	e006      	b.n	800dd12 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd44 <netif_add+0x19c>)
 800dd10:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dd12:	4b0d      	ldr	r3, [pc, #52]	@ (800dd48 <netif_add+0x1a0>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dd1a:	4a0b      	ldr	r2, [pc, #44]	@ (800dd48 <netif_add+0x1a0>)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dd20:	68fb      	ldr	r3, [r7, #12]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0801c6b8 	.word	0x0801c6b8
 800dd30:	0801c74c 	.word	0x0801c74c
 800dd34:	0801c708 	.word	0x0801c708
 800dd38:	0801c768 	.word	0x0801c768
 800dd3c:	08023034 	.word	0x08023034
 800dd40:	0800e16b 	.word	0x0800e16b
 800dd44:	20017668 	.word	0x20017668
 800dd48:	20017660 	.word	0x20017660
 800dd4c:	0801c78c 	.word	0x0801c78c
 800dd50:	0801c7a0 	.word	0x0801c7a0

0800dd54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f002 fec5 	bl	8010af0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f007 fc45 	bl	80155f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dd6e:	bf00      	nop
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <netif_do_set_ipaddr+0x20>
 800dd8a:	4b1d      	ldr	r3, [pc, #116]	@ (800de00 <netif_do_set_ipaddr+0x88>)
 800dd8c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800dd90:	491c      	ldr	r1, [pc, #112]	@ (800de04 <netif_do_set_ipaddr+0x8c>)
 800dd92:	481d      	ldr	r0, [pc, #116]	@ (800de08 <netif_do_set_ipaddr+0x90>)
 800dd94:	f00c f9be 	bl	801a114 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d106      	bne.n	800ddac <netif_do_set_ipaddr+0x34>
 800dd9e:	4b18      	ldr	r3, [pc, #96]	@ (800de00 <netif_do_set_ipaddr+0x88>)
 800dda0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800dda4:	4917      	ldr	r1, [pc, #92]	@ (800de04 <netif_do_set_ipaddr+0x8c>)
 800dda6:	4818      	ldr	r0, [pc, #96]	@ (800de08 <netif_do_set_ipaddr+0x90>)
 800dda8:	f00c f9b4 	bl	801a114 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d01c      	beq.n	800ddf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ddca:	f107 0314 	add.w	r3, r7, #20
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ffbf 	bl	800dd54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <netif_do_set_ipaddr+0x6a>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	e000      	b.n	800dde4 <netif_do_set_ipaddr+0x6c>
 800dde2:	2300      	movs	r3, #0
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dde8:	2101      	movs	r1, #1
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f8d2 	bl	800df94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	0801c6b8 	.word	0x0801c6b8
 800de04:	0801c7d0 	.word	0x0801c7d0
 800de08:	0801c708 	.word	0x0801c708

0800de0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3308      	adds	r3, #8
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d00a      	beq.n	800de3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <netif_do_set_netmask+0x26>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	e000      	b.n	800de34 <netif_do_set_netmask+0x28>
 800de32:	2300      	movs	r3, #0
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800de38:	2301      	movs	r3, #1
 800de3a:	e000      	b.n	800de3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b085      	sub	sp, #20
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	330c      	adds	r3, #12
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d00a      	beq.n	800de7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <netif_do_set_gw+0x26>
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	e000      	b.n	800de72 <netif_do_set_gw+0x28>
 800de70:	2300      	movs	r3, #0
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dea4:	4b1c      	ldr	r3, [pc, #112]	@ (800df18 <netif_set_addr+0x90>)
 800dea6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800deae:	4b1a      	ldr	r3, [pc, #104]	@ (800df18 <netif_set_addr+0x90>)
 800deb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800deb8:	4b17      	ldr	r3, [pc, #92]	@ (800df18 <netif_set_addr+0x90>)
 800deba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <netif_set_addr+0x42>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <netif_set_addr+0x46>
 800deca:	2301      	movs	r3, #1
 800decc:	e000      	b.n	800ded0 <netif_set_addr+0x48>
 800dece:	2300      	movs	r3, #0
 800ded0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ded8:	f107 0310 	add.w	r3, r7, #16
 800dedc:	461a      	mov	r2, r3
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff ff49 	bl	800dd78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f7ff ff8e 	bl	800de0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800def0:	69ba      	ldr	r2, [r7, #24]
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f7ff ffa8 	bl	800de4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df00:	f107 0310 	add.w	r3, r7, #16
 800df04:	461a      	mov	r2, r3
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f7ff ff35 	bl	800dd78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800df0e:	bf00      	nop
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	08023034 	.word	0x08023034

0800df1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800df24:	4a04      	ldr	r2, [pc, #16]	@ (800df38 <netif_set_default+0x1c>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800df2a:	bf00      	nop
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	20017664 	.word	0x20017664

0800df3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <netif_set_up+0x1e>
 800df4a:	4b0f      	ldr	r3, [pc, #60]	@ (800df88 <netif_set_up+0x4c>)
 800df4c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800df50:	490e      	ldr	r1, [pc, #56]	@ (800df8c <netif_set_up+0x50>)
 800df52:	480f      	ldr	r0, [pc, #60]	@ (800df90 <netif_set_up+0x54>)
 800df54:	f00c f8de 	bl	801a114 <iprintf>
 800df58:	e013      	b.n	800df82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10c      	bne.n	800df82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800df6e:	f043 0301 	orr.w	r3, r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800df7a:	2103      	movs	r1, #3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f809 	bl	800df94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0801c6b8 	.word	0x0801c6b8
 800df8c:	0801c840 	.word	0x0801c840
 800df90:	0801c708 	.word	0x0801c708

0800df94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <netif_issue_reports+0x20>
 800dfa6:	4b18      	ldr	r3, [pc, #96]	@ (800e008 <netif_issue_reports+0x74>)
 800dfa8:	f240 326d 	movw	r2, #877	@ 0x36d
 800dfac:	4917      	ldr	r1, [pc, #92]	@ (800e00c <netif_issue_reports+0x78>)
 800dfae:	4818      	ldr	r0, [pc, #96]	@ (800e010 <netif_issue_reports+0x7c>)
 800dfb0:	f00c f8b0 	bl	801a114 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dfba:	f003 0304 	and.w	r3, r3, #4
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d01e      	beq.n	800e000 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dfc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d017      	beq.n	800e000 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d013      	beq.n	800e002 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00e      	beq.n	800e002 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dfea:	f003 0308 	and.w	r3, r3, #8
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d007      	beq.n	800e002 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3304      	adds	r3, #4
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f00a f931 	bl	8018260 <etharp_request>
 800dffe:	e000      	b.n	800e002 <netif_issue_reports+0x6e>
    return;
 800e000:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	0801c6b8 	.word	0x0801c6b8
 800e00c:	0801c85c 	.word	0x0801c85c
 800e010:	0801c708 	.word	0x0801c708

0800e014 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d107      	bne.n	800e032 <netif_set_down+0x1e>
 800e022:	4b12      	ldr	r3, [pc, #72]	@ (800e06c <netif_set_down+0x58>)
 800e024:	f240 329b 	movw	r2, #923	@ 0x39b
 800e028:	4911      	ldr	r1, [pc, #68]	@ (800e070 <netif_set_down+0x5c>)
 800e02a:	4812      	ldr	r0, [pc, #72]	@ (800e074 <netif_set_down+0x60>)
 800e02c:	f00c f872 	bl	801a114 <iprintf>
 800e030:	e019      	b.n	800e066 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d012      	beq.n	800e066 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e046:	f023 0301 	bic.w	r3, r3, #1
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e058:	f003 0308 	and.w	r3, r3, #8
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f009 fcb7 	bl	80179d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	0801c6b8 	.word	0x0801c6b8
 800e070:	0801c880 	.word	0x0801c880
 800e074:	0801c708 	.word	0x0801c708

0800e078 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d107      	bne.n	800e096 <netif_set_link_up+0x1e>
 800e086:	4b15      	ldr	r3, [pc, #84]	@ (800e0dc <netif_set_link_up+0x64>)
 800e088:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e08c:	4914      	ldr	r1, [pc, #80]	@ (800e0e0 <netif_set_link_up+0x68>)
 800e08e:	4815      	ldr	r0, [pc, #84]	@ (800e0e4 <netif_set_link_up+0x6c>)
 800e090:	f00c f840 	bl	801a114 <iprintf>
 800e094:	e01e      	b.n	800e0d4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d117      	bne.n	800e0d4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e0aa:	f043 0304 	orr.w	r3, r3, #4
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f007 fec8 	bl	8015e4c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e0bc:	2103      	movs	r1, #3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff ff68 	bl	800df94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <netif_set_link_up+0x5c>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0801c6b8 	.word	0x0801c6b8
 800e0e0:	0801c8a0 	.word	0x0801c8a0
 800e0e4:	0801c708 	.word	0x0801c708

0800e0e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d107      	bne.n	800e106 <netif_set_link_down+0x1e>
 800e0f6:	4b11      	ldr	r3, [pc, #68]	@ (800e13c <netif_set_link_down+0x54>)
 800e0f8:	f240 4206 	movw	r2, #1030	@ 0x406
 800e0fc:	4910      	ldr	r1, [pc, #64]	@ (800e140 <netif_set_link_down+0x58>)
 800e0fe:	4811      	ldr	r0, [pc, #68]	@ (800e144 <netif_set_link_down+0x5c>)
 800e100:	f00c f808 	bl	801a114 <iprintf>
 800e104:	e017      	b.n	800e136 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e10c:	f003 0304 	and.w	r3, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	d010      	beq.n	800e136 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e11a:	f023 0304 	bic.w	r3, r3, #4
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	69db      	ldr	r3, [r3, #28]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <netif_set_link_down+0x4e>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	0801c6b8 	.word	0x0801c6b8
 800e140:	0801c8c4 	.word	0x0801c8c4
 800e144:	0801c708 	.word	0x0801c708

0800e148 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	61da      	str	r2, [r3, #28]
  }
}
 800e15e:	bf00      	nop
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e16a:	b480      	push	{r7}
 800e16c:	b085      	sub	sp, #20
 800e16e:	af00      	add	r7, sp, #0
 800e170:	60f8      	str	r0, [r7, #12]
 800e172:	60b9      	str	r1, [r7, #8]
 800e174:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e176:	f06f 030b 	mvn.w	r3, #11
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3714      	adds	r7, #20
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
	...

0800e188 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d013      	beq.n	800e1c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e198:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d0 <netif_get_by_index+0x48>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	60fb      	str	r3, [r7, #12]
 800e19e:	e00c      	b.n	800e1ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	79fa      	ldrb	r2, [r7, #7]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d101      	bne.n	800e1b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	e006      	b.n	800e1c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1ef      	bne.n	800e1a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3714      	adds	r7, #20
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	20017660 	.word	0x20017660

0800e1d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	80fb      	strh	r3, [r7, #6]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	88fa      	ldrh	r2, [r7, #6]
 800e1fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	88ba      	ldrh	r2, [r7, #4]
 800e200:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e202:	8b3b      	ldrh	r3, [r7, #24]
 800e204:	b2da      	uxtb	r2, r3
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	7f3a      	ldrb	r2, [r7, #28]
 800e20e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2201      	movs	r2, #1
 800e214:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	73da      	strb	r2, [r3, #15]
}
 800e21c:	bf00      	nop
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08c      	sub	sp, #48	@ 0x30
 800e22c:	af02      	add	r7, sp, #8
 800e22e:	4603      	mov	r3, r0
 800e230:	71fb      	strb	r3, [r7, #7]
 800e232:	460b      	mov	r3, r1
 800e234:	80bb      	strh	r3, [r7, #4]
 800e236:	4613      	mov	r3, r2
 800e238:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e23e:	887b      	ldrh	r3, [r7, #2]
 800e240:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e244:	d07f      	beq.n	800e346 <pbuf_alloc+0x11e>
 800e246:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e24a:	f300 80c8 	bgt.w	800e3de <pbuf_alloc+0x1b6>
 800e24e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e252:	d010      	beq.n	800e276 <pbuf_alloc+0x4e>
 800e254:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e258:	f300 80c1 	bgt.w	800e3de <pbuf_alloc+0x1b6>
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d002      	beq.n	800e266 <pbuf_alloc+0x3e>
 800e260:	2b41      	cmp	r3, #65	@ 0x41
 800e262:	f040 80bc 	bne.w	800e3de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e266:	887a      	ldrh	r2, [r7, #2]
 800e268:	88bb      	ldrh	r3, [r7, #4]
 800e26a:	4619      	mov	r1, r3
 800e26c:	2000      	movs	r0, #0
 800e26e:	f000 f8d1 	bl	800e414 <pbuf_alloc_reference>
 800e272:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800e274:	e0bd      	b.n	800e3f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e276:	2300      	movs	r3, #0
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e27e:	88bb      	ldrh	r3, [r7, #4]
 800e280:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e282:	200c      	movs	r0, #12
 800e284:	f7ff fc0c 	bl	800daa0 <memp_malloc>
 800e288:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d107      	bne.n	800e2a0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800e290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <pbuf_alloc+0x74>
            pbuf_free(p);
 800e296:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e298:	f000 faaa 	bl	800e7f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e29c:	2300      	movs	r3, #0
 800e29e:	e0a9      	b.n	800e3f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e2a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2a2:	3303      	adds	r3, #3
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f023 0303 	bic.w	r3, r3, #3
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	8b7a      	ldrh	r2, [r7, #26]
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	bf28      	it	cs
 800e2ba:	4613      	movcs	r3, r2
 800e2bc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e2be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	693a      	ldr	r2, [r7, #16]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	3303      	adds	r3, #3
 800e2c8:	f023 0303 	bic.w	r3, r3, #3
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	89f9      	ldrh	r1, [r7, #14]
 800e2d0:	8b7a      	ldrh	r2, [r7, #26]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	9301      	str	r3, [sp, #4]
 800e2d6:	887b      	ldrh	r3, [r7, #2]
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4601      	mov	r1, r0
 800e2de:	6938      	ldr	r0, [r7, #16]
 800e2e0:	f7ff ff78 	bl	800e1d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	f003 0303 	and.w	r3, r3, #3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d006      	beq.n	800e2fe <pbuf_alloc+0xd6>
 800e2f0:	4b42      	ldr	r3, [pc, #264]	@ (800e3fc <pbuf_alloc+0x1d4>)
 800e2f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e2f6:	4942      	ldr	r1, [pc, #264]	@ (800e400 <pbuf_alloc+0x1d8>)
 800e2f8:	4842      	ldr	r0, [pc, #264]	@ (800e404 <pbuf_alloc+0x1dc>)
 800e2fa:	f00b ff0b 	bl	801a114 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e2fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e300:	3303      	adds	r3, #3
 800e302:	f023 0303 	bic.w	r3, r3, #3
 800e306:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d106      	bne.n	800e31c <pbuf_alloc+0xf4>
 800e30e:	4b3b      	ldr	r3, [pc, #236]	@ (800e3fc <pbuf_alloc+0x1d4>)
 800e310:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e314:	493c      	ldr	r1, [pc, #240]	@ (800e408 <pbuf_alloc+0x1e0>)
 800e316:	483b      	ldr	r0, [pc, #236]	@ (800e404 <pbuf_alloc+0x1dc>)
 800e318:	f00b fefc 	bl	801a114 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	627b      	str	r3, [r7, #36]	@ 0x24
 800e326:	e002      	b.n	800e32e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e332:	8b7a      	ldrh	r2, [r7, #26]
 800e334:	89fb      	ldrh	r3, [r7, #14]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e33e:	8b7b      	ldrh	r3, [r7, #26]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d19e      	bne.n	800e282 <pbuf_alloc+0x5a>
      break;
 800e344:	e055      	b.n	800e3f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e348:	3303      	adds	r3, #3
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	f023 0303 	bic.w	r3, r3, #3
 800e350:	b29a      	uxth	r2, r3
 800e352:	88bb      	ldrh	r3, [r7, #4]
 800e354:	3303      	adds	r3, #3
 800e356:	b29b      	uxth	r3, r3
 800e358:	f023 0303 	bic.w	r3, r3, #3
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	4413      	add	r3, r2
 800e360:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e362:	8b3b      	ldrh	r3, [r7, #24]
 800e364:	3310      	adds	r3, #16
 800e366:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e368:	8b3a      	ldrh	r2, [r7, #24]
 800e36a:	88bb      	ldrh	r3, [r7, #4]
 800e36c:	3303      	adds	r3, #3
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	429a      	cmp	r2, r3
 800e374:	d306      	bcc.n	800e384 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e376:	8afa      	ldrh	r2, [r7, #22]
 800e378:	88bb      	ldrh	r3, [r7, #4]
 800e37a:	3303      	adds	r3, #3
 800e37c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e380:	429a      	cmp	r2, r3
 800e382:	d201      	bcs.n	800e388 <pbuf_alloc+0x160>
        return NULL;
 800e384:	2300      	movs	r3, #0
 800e386:	e035      	b.n	800e3f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e388:	8afb      	ldrh	r3, [r7, #22]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff fa06 	bl	800d79c <mem_malloc>
 800e390:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <pbuf_alloc+0x174>
        return NULL;
 800e398:	2300      	movs	r3, #0
 800e39a:	e02b      	b.n	800e3f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e39c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e39e:	3310      	adds	r3, #16
 800e3a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3a2:	4413      	add	r3, r2
 800e3a4:	3303      	adds	r3, #3
 800e3a6:	f023 0303 	bic.w	r3, r3, #3
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	88b9      	ldrh	r1, [r7, #4]
 800e3ae:	88ba      	ldrh	r2, [r7, #4]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	887b      	ldrh	r3, [r7, #2]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	4601      	mov	r1, r0
 800e3bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3be:	f7ff ff09 	bl	800e1d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f003 0303 	and.w	r3, r3, #3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d010      	beq.n	800e3f0 <pbuf_alloc+0x1c8>
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e3fc <pbuf_alloc+0x1d4>)
 800e3d0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e3d4:	490d      	ldr	r1, [pc, #52]	@ (800e40c <pbuf_alloc+0x1e4>)
 800e3d6:	480b      	ldr	r0, [pc, #44]	@ (800e404 <pbuf_alloc+0x1dc>)
 800e3d8:	f00b fe9c 	bl	801a114 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e3dc:	e008      	b.n	800e3f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e3de:	4b07      	ldr	r3, [pc, #28]	@ (800e3fc <pbuf_alloc+0x1d4>)
 800e3e0:	f240 1227 	movw	r2, #295	@ 0x127
 800e3e4:	490a      	ldr	r1, [pc, #40]	@ (800e410 <pbuf_alloc+0x1e8>)
 800e3e6:	4807      	ldr	r0, [pc, #28]	@ (800e404 <pbuf_alloc+0x1dc>)
 800e3e8:	f00b fe94 	bl	801a114 <iprintf>
      return NULL;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e001      	b.n	800e3f4 <pbuf_alloc+0x1cc>
      break;
 800e3f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3728      	adds	r7, #40	@ 0x28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	0801c8e8 	.word	0x0801c8e8
 800e400:	0801c918 	.word	0x0801c918
 800e404:	0801c948 	.word	0x0801c948
 800e408:	0801c970 	.word	0x0801c970
 800e40c:	0801c9a4 	.word	0x0801c9a4
 800e410:	0801c9d0 	.word	0x0801c9d0

0800e414 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af02      	add	r7, sp, #8
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	807b      	strh	r3, [r7, #2]
 800e420:	4613      	mov	r3, r2
 800e422:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e424:	883b      	ldrh	r3, [r7, #0]
 800e426:	2b41      	cmp	r3, #65	@ 0x41
 800e428:	d009      	beq.n	800e43e <pbuf_alloc_reference+0x2a>
 800e42a:	883b      	ldrh	r3, [r7, #0]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d006      	beq.n	800e43e <pbuf_alloc_reference+0x2a>
 800e430:	4b0f      	ldr	r3, [pc, #60]	@ (800e470 <pbuf_alloc_reference+0x5c>)
 800e432:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e436:	490f      	ldr	r1, [pc, #60]	@ (800e474 <pbuf_alloc_reference+0x60>)
 800e438:	480f      	ldr	r0, [pc, #60]	@ (800e478 <pbuf_alloc_reference+0x64>)
 800e43a:	f00b fe6b 	bl	801a114 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e43e:	200b      	movs	r0, #11
 800e440:	f7ff fb2e 	bl	800daa0 <memp_malloc>
 800e444:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e44c:	2300      	movs	r3, #0
 800e44e:	e00b      	b.n	800e468 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e450:	8879      	ldrh	r1, [r7, #2]
 800e452:	887a      	ldrh	r2, [r7, #2]
 800e454:	2300      	movs	r3, #0
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	883b      	ldrh	r3, [r7, #0]
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	460b      	mov	r3, r1
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7ff feb7 	bl	800e1d4 <pbuf_init_alloced_pbuf>
  return p;
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	0801c8e8 	.word	0x0801c8e8
 800e474:	0801c9ec 	.word	0x0801c9ec
 800e478:	0801c948 	.word	0x0801c948

0800e47c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af02      	add	r7, sp, #8
 800e482:	607b      	str	r3, [r7, #4]
 800e484:	4603      	mov	r3, r0
 800e486:	73fb      	strb	r3, [r7, #15]
 800e488:	460b      	mov	r3, r1
 800e48a:	81bb      	strh	r3, [r7, #12]
 800e48c:	4613      	mov	r3, r2
 800e48e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e494:	8a7b      	ldrh	r3, [r7, #18]
 800e496:	3303      	adds	r3, #3
 800e498:	f023 0203 	bic.w	r2, r3, #3
 800e49c:	89bb      	ldrh	r3, [r7, #12]
 800e49e:	441a      	add	r2, r3
 800e4a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d901      	bls.n	800e4aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	e018      	b.n	800e4dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d007      	beq.n	800e4c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e4b0:	8a7b      	ldrh	r3, [r7, #18]
 800e4b2:	3303      	adds	r3, #3
 800e4b4:	f023 0303 	bic.w	r3, r3, #3
 800e4b8:	6a3a      	ldr	r2, [r7, #32]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	e001      	b.n	800e4c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	89b9      	ldrh	r1, [r7, #12]
 800e4c8:	89ba      	ldrh	r2, [r7, #12]
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	897b      	ldrh	r3, [r7, #10]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	6979      	ldr	r1, [r7, #20]
 800e4d6:	f7ff fe7d 	bl	800e1d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e4da:	687b      	ldr	r3, [r7, #4]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <pbuf_realloc+0x20>
 800e4f6:	4b3a      	ldr	r3, [pc, #232]	@ (800e5e0 <pbuf_realloc+0xfc>)
 800e4f8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e4fc:	4939      	ldr	r1, [pc, #228]	@ (800e5e4 <pbuf_realloc+0x100>)
 800e4fe:	483a      	ldr	r0, [pc, #232]	@ (800e5e8 <pbuf_realloc+0x104>)
 800e500:	f00b fe08 	bl	801a114 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	891b      	ldrh	r3, [r3, #8]
 800e508:	887a      	ldrh	r2, [r7, #2]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d263      	bcs.n	800e5d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	891a      	ldrh	r2, [r3, #8]
 800e512:	887b      	ldrh	r3, [r7, #2]
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e518:	887b      	ldrh	r3, [r7, #2]
 800e51a:	817b      	strh	r3, [r7, #10]
  q = p;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e520:	e018      	b.n	800e554 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	895b      	ldrh	r3, [r3, #10]
 800e526:	897a      	ldrh	r2, [r7, #10]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	891a      	ldrh	r2, [r3, #8]
 800e530:	893b      	ldrh	r3, [r7, #8]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	b29a      	uxth	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d106      	bne.n	800e554 <pbuf_realloc+0x70>
 800e546:	4b26      	ldr	r3, [pc, #152]	@ (800e5e0 <pbuf_realloc+0xfc>)
 800e548:	f240 12af 	movw	r2, #431	@ 0x1af
 800e54c:	4927      	ldr	r1, [pc, #156]	@ (800e5ec <pbuf_realloc+0x108>)
 800e54e:	4826      	ldr	r0, [pc, #152]	@ (800e5e8 <pbuf_realloc+0x104>)
 800e550:	f00b fde0 	bl	801a114 <iprintf>
  while (rem_len > q->len) {
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	895b      	ldrh	r3, [r3, #10]
 800e558:	897a      	ldrh	r2, [r7, #10]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d8e1      	bhi.n	800e522 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	7b1b      	ldrb	r3, [r3, #12]
 800e562:	f003 030f 	and.w	r3, r3, #15
 800e566:	2b00      	cmp	r3, #0
 800e568:	d121      	bne.n	800e5ae <pbuf_realloc+0xca>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	895b      	ldrh	r3, [r3, #10]
 800e56e:	897a      	ldrh	r2, [r7, #10]
 800e570:	429a      	cmp	r2, r3
 800e572:	d01c      	beq.n	800e5ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7b5b      	ldrb	r3, [r3, #13]
 800e578:	f003 0302 	and.w	r3, r3, #2
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d116      	bne.n	800e5ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	b29a      	uxth	r2, r3
 800e58a:	897b      	ldrh	r3, [r7, #10]
 800e58c:	4413      	add	r3, r2
 800e58e:	b29b      	uxth	r3, r3
 800e590:	4619      	mov	r1, r3
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f7fe fff8 	bl	800d588 <mem_trim>
 800e598:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d106      	bne.n	800e5ae <pbuf_realloc+0xca>
 800e5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e5e0 <pbuf_realloc+0xfc>)
 800e5a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e5a6:	4912      	ldr	r1, [pc, #72]	@ (800e5f0 <pbuf_realloc+0x10c>)
 800e5a8:	480f      	ldr	r0, [pc, #60]	@ (800e5e8 <pbuf_realloc+0x104>)
 800e5aa:	f00b fdb3 	bl	801a114 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	897a      	ldrh	r2, [r7, #10]
 800e5b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	895a      	ldrh	r2, [r3, #10]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d004      	beq.n	800e5ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 f911 	bl	800e7f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	e000      	b.n	800e5d8 <pbuf_realloc+0xf4>
    return;
 800e5d6:	bf00      	nop

}
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	0801c8e8 	.word	0x0801c8e8
 800e5e4:	0801ca00 	.word	0x0801ca00
 800e5e8:	0801c948 	.word	0x0801c948
 800e5ec:	0801ca18 	.word	0x0801ca18
 800e5f0:	0801ca30 	.word	0x0801ca30

0800e5f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	4613      	mov	r3, r2
 800e600:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <pbuf_add_header_impl+0x22>
 800e608:	4b2b      	ldr	r3, [pc, #172]	@ (800e6b8 <pbuf_add_header_impl+0xc4>)
 800e60a:	f240 12df 	movw	r2, #479	@ 0x1df
 800e60e:	492b      	ldr	r1, [pc, #172]	@ (800e6bc <pbuf_add_header_impl+0xc8>)
 800e610:	482b      	ldr	r0, [pc, #172]	@ (800e6c0 <pbuf_add_header_impl+0xcc>)
 800e612:	f00b fd7f 	bl	801a114 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <pbuf_add_header_impl+0x30>
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e622:	d301      	bcc.n	800e628 <pbuf_add_header_impl+0x34>
    return 1;
 800e624:	2301      	movs	r3, #1
 800e626:	e043      	b.n	800e6b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <pbuf_add_header_impl+0x3e>
    return 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	e03e      	b.n	800e6b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	891a      	ldrh	r2, [r3, #8]
 800e63a:	8a7b      	ldrh	r3, [r7, #18]
 800e63c:	4413      	add	r3, r2
 800e63e:	b29b      	uxth	r3, r3
 800e640:	8a7a      	ldrh	r2, [r7, #18]
 800e642:	429a      	cmp	r2, r3
 800e644:	d901      	bls.n	800e64a <pbuf_add_header_impl+0x56>
    return 1;
 800e646:	2301      	movs	r3, #1
 800e648:	e032      	b.n	800e6b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	7b1b      	ldrb	r3, [r3, #12]
 800e64e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e650:	8a3b      	ldrh	r3, [r7, #16]
 800e652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00c      	beq.n	800e674 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	425b      	negs	r3, r3
 800e662:	4413      	add	r3, r2
 800e664:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	3310      	adds	r3, #16
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d20d      	bcs.n	800e68c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e670:	2301      	movs	r3, #1
 800e672:	e01d      	b.n	800e6b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	425b      	negs	r3, r3
 800e682:	4413      	add	r3, r2
 800e684:	617b      	str	r3, [r7, #20]
 800e686:	e001      	b.n	800e68c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e688:	2301      	movs	r3, #1
 800e68a:	e011      	b.n	800e6b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	895a      	ldrh	r2, [r3, #10]
 800e696:	8a7b      	ldrh	r3, [r7, #18]
 800e698:	4413      	add	r3, r2
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	891a      	ldrh	r2, [r3, #8]
 800e6a4:	8a7b      	ldrh	r3, [r7, #18]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	0801c8e8 	.word	0x0801c8e8
 800e6bc:	0801ca4c 	.word	0x0801ca4c
 800e6c0:	0801c948 	.word	0x0801c948

0800e6c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ff8e 	bl	800e5f4 <pbuf_add_header_impl>
 800e6d8:	4603      	mov	r3, r0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d106      	bne.n	800e702 <pbuf_remove_header+0x1e>
 800e6f4:	4b20      	ldr	r3, [pc, #128]	@ (800e778 <pbuf_remove_header+0x94>)
 800e6f6:	f240 224b 	movw	r2, #587	@ 0x24b
 800e6fa:	4920      	ldr	r1, [pc, #128]	@ (800e77c <pbuf_remove_header+0x98>)
 800e6fc:	4820      	ldr	r0, [pc, #128]	@ (800e780 <pbuf_remove_header+0x9c>)
 800e6fe:	f00b fd09 	bl	801a114 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d003      	beq.n	800e710 <pbuf_remove_header+0x2c>
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e70e:	d301      	bcc.n	800e714 <pbuf_remove_header+0x30>
    return 1;
 800e710:	2301      	movs	r3, #1
 800e712:	e02c      	b.n	800e76e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <pbuf_remove_header+0x3a>
    return 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	e027      	b.n	800e76e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	895b      	ldrh	r3, [r3, #10]
 800e726:	89fa      	ldrh	r2, [r7, #14]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d908      	bls.n	800e73e <pbuf_remove_header+0x5a>
 800e72c:	4b12      	ldr	r3, [pc, #72]	@ (800e778 <pbuf_remove_header+0x94>)
 800e72e:	f240 2255 	movw	r2, #597	@ 0x255
 800e732:	4914      	ldr	r1, [pc, #80]	@ (800e784 <pbuf_remove_header+0xa0>)
 800e734:	4812      	ldr	r0, [pc, #72]	@ (800e780 <pbuf_remove_header+0x9c>)
 800e736:	f00b fced 	bl	801a114 <iprintf>
 800e73a:	2301      	movs	r3, #1
 800e73c:	e017      	b.n	800e76e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	441a      	add	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	895a      	ldrh	r2, [r3, #10]
 800e754:	89fb      	ldrh	r3, [r7, #14]
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	b29a      	uxth	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	891a      	ldrh	r2, [r3, #8]
 800e762:	89fb      	ldrh	r3, [r7, #14]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	0801c8e8 	.word	0x0801c8e8
 800e77c:	0801ca4c 	.word	0x0801ca4c
 800e780:	0801c948 	.word	0x0801c948
 800e784:	0801ca58 	.word	0x0801ca58

0800e788 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	807b      	strh	r3, [r7, #2]
 800e794:	4613      	mov	r3, r2
 800e796:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	da08      	bge.n	800e7b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e7a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7a4:	425b      	negs	r3, r3
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7ff ff9b 	bl	800e6e4 <pbuf_remove_header>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	e007      	b.n	800e7c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e7b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7b6:	787a      	ldrb	r2, [r7, #1]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7ff ff1a 	bl	800e5f4 <pbuf_add_header_impl>
 800e7c0:	4603      	mov	r3, r0
  }
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e7d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff ffd2 	bl	800e788 <pbuf_header_impl>
 800e7e4:	4603      	mov	r3, r0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
	...

0800e7f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b088      	sub	sp, #32
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10b      	bne.n	800e816 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <pbuf_free+0x22>
 800e804:	4b3b      	ldr	r3, [pc, #236]	@ (800e8f4 <pbuf_free+0x104>)
 800e806:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e80a:	493b      	ldr	r1, [pc, #236]	@ (800e8f8 <pbuf_free+0x108>)
 800e80c:	483b      	ldr	r0, [pc, #236]	@ (800e8fc <pbuf_free+0x10c>)
 800e80e:	f00b fc81 	bl	801a114 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e812:	2300      	movs	r3, #0
 800e814:	e069      	b.n	800e8ea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e81a:	e062      	b.n	800e8e2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e81c:	f00b fb5c 	bl	8019ed8 <sys_arch_protect>
 800e820:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7b9b      	ldrb	r3, [r3, #14]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d106      	bne.n	800e838 <pbuf_free+0x48>
 800e82a:	4b32      	ldr	r3, [pc, #200]	@ (800e8f4 <pbuf_free+0x104>)
 800e82c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e830:	4933      	ldr	r1, [pc, #204]	@ (800e900 <pbuf_free+0x110>)
 800e832:	4832      	ldr	r0, [pc, #200]	@ (800e8fc <pbuf_free+0x10c>)
 800e834:	f00b fc6e 	bl	801a114 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	7b9b      	ldrb	r3, [r3, #14]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	739a      	strb	r2, [r3, #14]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7b9b      	ldrb	r3, [r3, #14]
 800e848:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e84a:	69b8      	ldr	r0, [r7, #24]
 800e84c:	f00b fb52 	bl	8019ef4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e850:	7dfb      	ldrb	r3, [r7, #23]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d143      	bne.n	800e8de <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7b1b      	ldrb	r3, [r3, #12]
 800e860:	f003 030f 	and.w	r3, r3, #15
 800e864:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	7b5b      	ldrb	r3, [r3, #13]
 800e86a:	f003 0302 	and.w	r3, r3, #2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d011      	beq.n	800e896 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <pbuf_free+0x9c>
 800e87e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8f4 <pbuf_free+0x104>)
 800e880:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e884:	491f      	ldr	r1, [pc, #124]	@ (800e904 <pbuf_free+0x114>)
 800e886:	481d      	ldr	r0, [pc, #116]	@ (800e8fc <pbuf_free+0x10c>)
 800e888:	f00b fc44 	bl	801a114 <iprintf>
        pc->custom_free_function(p);
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	4798      	blx	r3
 800e894:	e01d      	b.n	800e8d2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d104      	bne.n	800e8a6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e89c:	6879      	ldr	r1, [r7, #4]
 800e89e:	200c      	movs	r0, #12
 800e8a0:	f7ff f950 	bl	800db44 <memp_free>
 800e8a4:	e015      	b.n	800e8d2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d104      	bne.n	800e8b6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	200b      	movs	r0, #11
 800e8b0:	f7ff f948 	bl	800db44 <memp_free>
 800e8b4:	e00d      	b.n	800e8d2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d103      	bne.n	800e8c4 <pbuf_free+0xd4>
          mem_free(p);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7fe fdd3 	bl	800d468 <mem_free>
 800e8c2:	e006      	b.n	800e8d2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f4 <pbuf_free+0x104>)
 800e8c6:	f240 320f 	movw	r2, #783	@ 0x30f
 800e8ca:	490f      	ldr	r1, [pc, #60]	@ (800e908 <pbuf_free+0x118>)
 800e8cc:	480b      	ldr	r0, [pc, #44]	@ (800e8fc <pbuf_free+0x10c>)
 800e8ce:	f00b fc21 	bl	801a114 <iprintf>
        }
      }
      count++;
 800e8d2:	7ffb      	ldrb	r3, [r7, #31]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	607b      	str	r3, [r7, #4]
 800e8dc:	e001      	b.n	800e8e2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d199      	bne.n	800e81c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e8e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3720      	adds	r7, #32
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	0801c8e8 	.word	0x0801c8e8
 800e8f8:	0801ca4c 	.word	0x0801ca4c
 800e8fc:	0801c948 	.word	0x0801c948
 800e900:	0801ca78 	.word	0x0801ca78
 800e904:	0801ca90 	.word	0x0801ca90
 800e908:	0801cab4 	.word	0x0801cab4

0800e90c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e918:	e005      	b.n	800e926 <pbuf_clen+0x1a>
    ++len;
 800e91a:	89fb      	ldrh	r3, [r7, #14]
 800e91c:	3301      	adds	r3, #1
 800e91e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1f6      	bne.n	800e91a <pbuf_clen+0xe>
  }
  return len;
 800e92c:	89fb      	ldrh	r3, [r7, #14]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d016      	beq.n	800e978 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e94a:	f00b fac5 	bl	8019ed8 <sys_arch_protect>
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	7b9b      	ldrb	r3, [r3, #14]
 800e954:	3301      	adds	r3, #1
 800e956:	b2da      	uxtb	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	739a      	strb	r2, [r3, #14]
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f00b fac9 	bl	8019ef4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	7b9b      	ldrb	r3, [r3, #14]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d106      	bne.n	800e978 <pbuf_ref+0x3c>
 800e96a:	4b05      	ldr	r3, [pc, #20]	@ (800e980 <pbuf_ref+0x44>)
 800e96c:	f240 3242 	movw	r2, #834	@ 0x342
 800e970:	4904      	ldr	r1, [pc, #16]	@ (800e984 <pbuf_ref+0x48>)
 800e972:	4805      	ldr	r0, [pc, #20]	@ (800e988 <pbuf_ref+0x4c>)
 800e974:	f00b fbce 	bl	801a114 <iprintf>
  }
}
 800e978:	bf00      	nop
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	0801c8e8 	.word	0x0801c8e8
 800e984:	0801cac8 	.word	0x0801cac8
 800e988:	0801c948 	.word	0x0801c948

0800e98c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <pbuf_cat+0x16>
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d107      	bne.n	800e9b2 <pbuf_cat+0x26>
 800e9a2:	4b20      	ldr	r3, [pc, #128]	@ (800ea24 <pbuf_cat+0x98>)
 800e9a4:	f240 3259 	movw	r2, #857	@ 0x359
 800e9a8:	491f      	ldr	r1, [pc, #124]	@ (800ea28 <pbuf_cat+0x9c>)
 800e9aa:	4820      	ldr	r0, [pc, #128]	@ (800ea2c <pbuf_cat+0xa0>)
 800e9ac:	f00b fbb2 	bl	801a114 <iprintf>
 800e9b0:	e034      	b.n	800ea1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	e00a      	b.n	800e9ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	891a      	ldrh	r2, [r3, #8]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	891b      	ldrh	r3, [r3, #8]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1f0      	bne.n	800e9b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	891a      	ldrh	r2, [r3, #8]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	895b      	ldrh	r3, [r3, #10]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d006      	beq.n	800e9f0 <pbuf_cat+0x64>
 800e9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ea24 <pbuf_cat+0x98>)
 800e9e4:	f240 3262 	movw	r2, #866	@ 0x362
 800e9e8:	4911      	ldr	r1, [pc, #68]	@ (800ea30 <pbuf_cat+0xa4>)
 800e9ea:	4810      	ldr	r0, [pc, #64]	@ (800ea2c <pbuf_cat+0xa0>)
 800e9ec:	f00b fb92 	bl	801a114 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d006      	beq.n	800ea06 <pbuf_cat+0x7a>
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ea24 <pbuf_cat+0x98>)
 800e9fa:	f240 3263 	movw	r2, #867	@ 0x363
 800e9fe:	490d      	ldr	r1, [pc, #52]	@ (800ea34 <pbuf_cat+0xa8>)
 800ea00:	480a      	ldr	r0, [pc, #40]	@ (800ea2c <pbuf_cat+0xa0>)
 800ea02:	f00b fb87 	bl	801a114 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	891a      	ldrh	r2, [r3, #8]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	891b      	ldrh	r3, [r3, #8]
 800ea0e:	4413      	add	r3, r2
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	0801c8e8 	.word	0x0801c8e8
 800ea28:	0801cadc 	.word	0x0801cadc
 800ea2c:	0801c948 	.word	0x0801c948
 800ea30:	0801cb14 	.word	0x0801cb14
 800ea34:	0801cb44 	.word	0x0801cb44

0800ea38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff ffa1 	bl	800e98c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea4a:	6838      	ldr	r0, [r7, #0]
 800ea4c:	f7ff ff76 	bl	800e93c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea62:	2300      	movs	r3, #0
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	2300      	movs	r3, #0
 800ea68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d008      	beq.n	800ea82 <pbuf_copy+0x2a>
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <pbuf_copy+0x2a>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	891a      	ldrh	r2, [r3, #8]
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	891b      	ldrh	r3, [r3, #8]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d209      	bcs.n	800ea96 <pbuf_copy+0x3e>
 800ea82:	4b57      	ldr	r3, [pc, #348]	@ (800ebe0 <pbuf_copy+0x188>)
 800ea84:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ea88:	4956      	ldr	r1, [pc, #344]	@ (800ebe4 <pbuf_copy+0x18c>)
 800ea8a:	4857      	ldr	r0, [pc, #348]	@ (800ebe8 <pbuf_copy+0x190>)
 800ea8c:	f00b fb42 	bl	801a114 <iprintf>
 800ea90:	f06f 030f 	mvn.w	r3, #15
 800ea94:	e09f      	b.n	800ebd6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	895b      	ldrh	r3, [r3, #10]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	1ad2      	subs	r2, r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	895b      	ldrh	r3, [r3, #10]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1acb      	subs	r3, r1, r3
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d306      	bcc.n	800eabc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	895b      	ldrh	r3, [r3, #10]
 800eab2:	461a      	mov	r2, r3
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	60fb      	str	r3, [r7, #12]
 800eaba:	e005      	b.n	800eac8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	461a      	mov	r2, r3
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	18d0      	adds	r0, r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	4413      	add	r3, r2
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4619      	mov	r1, r3
 800eadc:	f00b fd7f 	bl	801a5de <memcpy>
    offset_to += len;
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	4413      	add	r3, r2
 800eaee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	895b      	ldrh	r3, [r3, #10]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d906      	bls.n	800eb0a <pbuf_copy+0xb2>
 800eafc:	4b38      	ldr	r3, [pc, #224]	@ (800ebe0 <pbuf_copy+0x188>)
 800eafe:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800eb02:	493a      	ldr	r1, [pc, #232]	@ (800ebec <pbuf_copy+0x194>)
 800eb04:	4838      	ldr	r0, [pc, #224]	@ (800ebe8 <pbuf_copy+0x190>)
 800eb06:	f00b fb05 	bl	801a114 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	895b      	ldrh	r3, [r3, #10]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d906      	bls.n	800eb24 <pbuf_copy+0xcc>
 800eb16:	4b32      	ldr	r3, [pc, #200]	@ (800ebe0 <pbuf_copy+0x188>)
 800eb18:	f240 32da 	movw	r2, #986	@ 0x3da
 800eb1c:	4934      	ldr	r1, [pc, #208]	@ (800ebf0 <pbuf_copy+0x198>)
 800eb1e:	4832      	ldr	r0, [pc, #200]	@ (800ebe8 <pbuf_copy+0x190>)
 800eb20:	f00b faf8 	bl	801a114 <iprintf>
    if (offset_from >= p_from->len) {
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d304      	bcc.n	800eb3a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	895b      	ldrh	r3, [r3, #10]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d114      	bne.n	800eb70 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <pbuf_copy+0x118>
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d009      	beq.n	800eb70 <pbuf_copy+0x118>
 800eb5c:	4b20      	ldr	r3, [pc, #128]	@ (800ebe0 <pbuf_copy+0x188>)
 800eb5e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800eb62:	4924      	ldr	r1, [pc, #144]	@ (800ebf4 <pbuf_copy+0x19c>)
 800eb64:	4820      	ldr	r0, [pc, #128]	@ (800ebe8 <pbuf_copy+0x190>)
 800eb66:	f00b fad5 	bl	801a114 <iprintf>
 800eb6a:	f06f 030f 	mvn.w	r3, #15
 800eb6e:	e032      	b.n	800ebd6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d013      	beq.n	800eb9e <pbuf_copy+0x146>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	895a      	ldrh	r2, [r3, #10]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	891b      	ldrh	r3, [r3, #8]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d10d      	bne.n	800eb9e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d009      	beq.n	800eb9e <pbuf_copy+0x146>
 800eb8a:	4b15      	ldr	r3, [pc, #84]	@ (800ebe0 <pbuf_copy+0x188>)
 800eb8c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800eb90:	4919      	ldr	r1, [pc, #100]	@ (800ebf8 <pbuf_copy+0x1a0>)
 800eb92:	4815      	ldr	r0, [pc, #84]	@ (800ebe8 <pbuf_copy+0x190>)
 800eb94:	f00b fabe 	bl	801a114 <iprintf>
 800eb98:	f06f 0305 	mvn.w	r3, #5
 800eb9c:	e01b      	b.n	800ebd6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d013      	beq.n	800ebcc <pbuf_copy+0x174>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	895a      	ldrh	r2, [r3, #10]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	891b      	ldrh	r3, [r3, #8]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d10d      	bne.n	800ebcc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d009      	beq.n	800ebcc <pbuf_copy+0x174>
 800ebb8:	4b09      	ldr	r3, [pc, #36]	@ (800ebe0 <pbuf_copy+0x188>)
 800ebba:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ebbe:	490e      	ldr	r1, [pc, #56]	@ (800ebf8 <pbuf_copy+0x1a0>)
 800ebc0:	4809      	ldr	r0, [pc, #36]	@ (800ebe8 <pbuf_copy+0x190>)
 800ebc2:	f00b faa7 	bl	801a114 <iprintf>
 800ebc6:	f06f 0305 	mvn.w	r3, #5
 800ebca:	e004      	b.n	800ebd6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f47f af61 	bne.w	800ea96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	0801c8e8 	.word	0x0801c8e8
 800ebe4:	0801cb90 	.word	0x0801cb90
 800ebe8:	0801c948 	.word	0x0801c948
 800ebec:	0801cbc0 	.word	0x0801cbc0
 800ebf0:	0801cbd8 	.word	0x0801cbd8
 800ebf4:	0801cbf4 	.word	0x0801cbf4
 800ebf8:	0801cc04 	.word	0x0801cc04

0800ebfc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4611      	mov	r1, r2
 800ec08:	461a      	mov	r2, r3
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	80fb      	strh	r3, [r7, #6]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d108      	bne.n	800ec32 <pbuf_copy_partial+0x36>
 800ec20:	4b2b      	ldr	r3, [pc, #172]	@ (800ecd0 <pbuf_copy_partial+0xd4>)
 800ec22:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ec26:	492b      	ldr	r1, [pc, #172]	@ (800ecd4 <pbuf_copy_partial+0xd8>)
 800ec28:	482b      	ldr	r0, [pc, #172]	@ (800ecd8 <pbuf_copy_partial+0xdc>)
 800ec2a:	f00b fa73 	bl	801a114 <iprintf>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e04a      	b.n	800ecc8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d108      	bne.n	800ec4a <pbuf_copy_partial+0x4e>
 800ec38:	4b25      	ldr	r3, [pc, #148]	@ (800ecd0 <pbuf_copy_partial+0xd4>)
 800ec3a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800ec3e:	4927      	ldr	r1, [pc, #156]	@ (800ecdc <pbuf_copy_partial+0xe0>)
 800ec40:	4825      	ldr	r0, [pc, #148]	@ (800ecd8 <pbuf_copy_partial+0xdc>)
 800ec42:	f00b fa67 	bl	801a114 <iprintf>
 800ec46:	2300      	movs	r3, #0
 800ec48:	e03e      	b.n	800ecc8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	61fb      	str	r3, [r7, #28]
 800ec4e:	e034      	b.n	800ecba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec50:	88bb      	ldrh	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00a      	beq.n	800ec6c <pbuf_copy_partial+0x70>
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	88ba      	ldrh	r2, [r7, #4]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d305      	bcc.n	800ec6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	895b      	ldrh	r3, [r3, #10]
 800ec64:	88ba      	ldrh	r2, [r7, #4]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	80bb      	strh	r3, [r7, #4]
 800ec6a:	e023      	b.n	800ecb4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	895a      	ldrh	r2, [r3, #10]
 800ec70:	88bb      	ldrh	r3, [r7, #4]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ec76:	8b3a      	ldrh	r2, [r7, #24]
 800ec78:	88fb      	ldrh	r3, [r7, #6]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d901      	bls.n	800ec82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ec82:	8b7b      	ldrh	r3, [r7, #26]
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	18d0      	adds	r0, r2, r3
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	88bb      	ldrh	r3, [r7, #4]
 800ec8e:	4413      	add	r3, r2
 800ec90:	8b3a      	ldrh	r2, [r7, #24]
 800ec92:	4619      	mov	r1, r3
 800ec94:	f00b fca3 	bl	801a5de <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ec98:	8afa      	ldrh	r2, [r7, #22]
 800ec9a:	8b3b      	ldrh	r3, [r7, #24]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eca0:	8b7a      	ldrh	r2, [r7, #26]
 800eca2:	8b3b      	ldrh	r3, [r7, #24]
 800eca4:	4413      	add	r3, r2
 800eca6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eca8:	88fa      	ldrh	r2, [r7, #6]
 800ecaa:	8b3b      	ldrh	r3, [r7, #24]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <pbuf_copy_partial+0xca>
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1c4      	bne.n	800ec50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ecc6:	8afb      	ldrh	r3, [r7, #22]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3720      	adds	r7, #32
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	0801c8e8 	.word	0x0801c8e8
 800ecd4:	0801cc30 	.word	0x0801cc30
 800ecd8:	0801c948 	.word	0x0801c948
 800ecdc:	0801cc50 	.word	0x0801cc50

0800ece0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	603a      	str	r2, [r7, #0]
 800ecea:	71fb      	strb	r3, [r7, #7]
 800ecec:	460b      	mov	r3, r1
 800ecee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	8919      	ldrh	r1, [r3, #8]
 800ecf4:	88ba      	ldrh	r2, [r7, #4]
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff fa95 	bl	800e228 <pbuf_alloc>
 800ecfe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <pbuf_clone+0x2a>
    return NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e011      	b.n	800ed2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f7ff fea3 	bl	800ea58 <pbuf_copy>
 800ed12:	4603      	mov	r3, r0
 800ed14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d006      	beq.n	800ed2c <pbuf_clone+0x4c>
 800ed1e:	4b06      	ldr	r3, [pc, #24]	@ (800ed38 <pbuf_clone+0x58>)
 800ed20:	f240 5224 	movw	r2, #1316	@ 0x524
 800ed24:	4905      	ldr	r1, [pc, #20]	@ (800ed3c <pbuf_clone+0x5c>)
 800ed26:	4806      	ldr	r0, [pc, #24]	@ (800ed40 <pbuf_clone+0x60>)
 800ed28:	f00b f9f4 	bl	801a114 <iprintf>
  return q;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	0801c8e8 	.word	0x0801c8e8
 800ed3c:	0801cd5c 	.word	0x0801cd5c
 800ed40:	0801c948 	.word	0x0801c948

0800ed44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed48:	f00b f8e4 	bl	8019f14 <rand>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	4b01      	ldr	r3, [pc, #4]	@ (800ed64 <tcp_init+0x20>)
 800ed5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed60:	bf00      	nop
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	2000001c 	.word	0x2000001c

0800ed68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7d1b      	ldrb	r3, [r3, #20]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d105      	bne.n	800ed84 <tcp_free+0x1c>
 800ed78:	4b06      	ldr	r3, [pc, #24]	@ (800ed94 <tcp_free+0x2c>)
 800ed7a:	22d4      	movs	r2, #212	@ 0xd4
 800ed7c:	4906      	ldr	r1, [pc, #24]	@ (800ed98 <tcp_free+0x30>)
 800ed7e:	4807      	ldr	r0, [pc, #28]	@ (800ed9c <tcp_free+0x34>)
 800ed80:	f00b f9c8 	bl	801a114 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	2001      	movs	r0, #1
 800ed88:	f7fe fedc 	bl	800db44 <memp_free>
}
 800ed8c:	bf00      	nop
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	0801cde8 	.word	0x0801cde8
 800ed98:	0801ce18 	.word	0x0801ce18
 800ed9c:	0801ce2c 	.word	0x0801ce2c

0800eda0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d105      	bne.n	800edbc <tcp_free_listen+0x1c>
 800edb0:	4b06      	ldr	r3, [pc, #24]	@ (800edcc <tcp_free_listen+0x2c>)
 800edb2:	22df      	movs	r2, #223	@ 0xdf
 800edb4:	4906      	ldr	r1, [pc, #24]	@ (800edd0 <tcp_free_listen+0x30>)
 800edb6:	4807      	ldr	r0, [pc, #28]	@ (800edd4 <tcp_free_listen+0x34>)
 800edb8:	f00b f9ac 	bl	801a114 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edbc:	6879      	ldr	r1, [r7, #4]
 800edbe:	2002      	movs	r0, #2
 800edc0:	f7fe fec0 	bl	800db44 <memp_free>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0801cde8 	.word	0x0801cde8
 800edd0:	0801ce54 	.word	0x0801ce54
 800edd4:	0801ce2c 	.word	0x0801ce2c

0800edd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eddc:	f001 f9a2 	bl	8010124 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ede0:	4b07      	ldr	r3, [pc, #28]	@ (800ee00 <tcp_tmr+0x28>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	4b05      	ldr	r3, [pc, #20]	@ (800ee00 <tcp_tmr+0x28>)
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	4b04      	ldr	r3, [pc, #16]	@ (800ee00 <tcp_tmr+0x28>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800edf8:	f000 fe68 	bl	800facc <tcp_slowtmr>
  }
}
 800edfc:	bf00      	nop
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20017681 	.word	0x20017681

0800ee04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d105      	bne.n	800ee20 <tcp_remove_listener+0x1c>
 800ee14:	4b0d      	ldr	r3, [pc, #52]	@ (800ee4c <tcp_remove_listener+0x48>)
 800ee16:	22ff      	movs	r2, #255	@ 0xff
 800ee18:	490d      	ldr	r1, [pc, #52]	@ (800ee50 <tcp_remove_listener+0x4c>)
 800ee1a:	480e      	ldr	r0, [pc, #56]	@ (800ee54 <tcp_remove_listener+0x50>)
 800ee1c:	f00b f97a 	bl	801a114 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	60fb      	str	r3, [r7, #12]
 800ee24:	e00a      	b.n	800ee3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d102      	bne.n	800ee36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1f1      	bne.n	800ee26 <tcp_remove_listener+0x22>
    }
  }
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	0801cde8 	.word	0x0801cde8
 800ee50:	0801ce70 	.word	0x0801ce70
 800ee54:	0801ce2c 	.word	0x0801ce2c

0800ee58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <tcp_listen_closed+0x1c>
 800ee66:	4b14      	ldr	r3, [pc, #80]	@ (800eeb8 <tcp_listen_closed+0x60>)
 800ee68:	f240 1211 	movw	r2, #273	@ 0x111
 800ee6c:	4913      	ldr	r1, [pc, #76]	@ (800eebc <tcp_listen_closed+0x64>)
 800ee6e:	4814      	ldr	r0, [pc, #80]	@ (800eec0 <tcp_listen_closed+0x68>)
 800ee70:	f00b f950 	bl	801a114 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d006      	beq.n	800ee8a <tcp_listen_closed+0x32>
 800ee7c:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb8 <tcp_listen_closed+0x60>)
 800ee7e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ee82:	4910      	ldr	r1, [pc, #64]	@ (800eec4 <tcp_listen_closed+0x6c>)
 800ee84:	480e      	ldr	r0, [pc, #56]	@ (800eec0 <tcp_listen_closed+0x68>)
 800ee86:	f00b f945 	bl	801a114 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e00b      	b.n	800eea8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ee90:	4a0d      	ldr	r2, [pc, #52]	@ (800eec8 <tcp_listen_closed+0x70>)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff ffb1 	bl	800ee04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3301      	adds	r3, #1
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d9f0      	bls.n	800ee90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eeae:	bf00      	nop
 800eeb0:	bf00      	nop
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	0801cde8 	.word	0x0801cde8
 800eebc:	0801ce98 	.word	0x0801ce98
 800eec0:	0801ce2c 	.word	0x0801ce2c
 800eec4:	0801cea4 	.word	0x0801cea4
 800eec8:	08022ffc 	.word	0x08022ffc

0800eecc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eecc:	b5b0      	push	{r4, r5, r7, lr}
 800eece:	b088      	sub	sp, #32
 800eed0:	af04      	add	r7, sp, #16
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d106      	bne.n	800eeec <tcp_close_shutdown+0x20>
 800eede:	4b63      	ldr	r3, [pc, #396]	@ (800f06c <tcp_close_shutdown+0x1a0>)
 800eee0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800eee4:	4962      	ldr	r1, [pc, #392]	@ (800f070 <tcp_close_shutdown+0x1a4>)
 800eee6:	4863      	ldr	r0, [pc, #396]	@ (800f074 <tcp_close_shutdown+0x1a8>)
 800eee8:	f00b f914 	bl	801a114 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d067      	beq.n	800efc2 <tcp_close_shutdown+0xf6>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7d1b      	ldrb	r3, [r3, #20]
 800eef6:	2b04      	cmp	r3, #4
 800eef8:	d003      	beq.n	800ef02 <tcp_close_shutdown+0x36>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	7d1b      	ldrb	r3, [r3, #20]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	d15f      	bne.n	800efc2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <tcp_close_shutdown+0x4a>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef0e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d055      	beq.n	800efc2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	8b5b      	ldrh	r3, [r3, #26]
 800ef1a:	f003 0310 	and.w	r3, r3, #16
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <tcp_close_shutdown+0x64>
 800ef22:	4b52      	ldr	r3, [pc, #328]	@ (800f06c <tcp_close_shutdown+0x1a0>)
 800ef24:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ef28:	4953      	ldr	r1, [pc, #332]	@ (800f078 <tcp_close_shutdown+0x1ac>)
 800ef2a:	4852      	ldr	r0, [pc, #328]	@ (800f074 <tcp_close_shutdown+0x1a8>)
 800ef2c:	f00b f8f2 	bl	801a114 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ef38:	687d      	ldr	r5, [r7, #4]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	8ad2      	ldrh	r2, [r2, #22]
 800ef42:	6879      	ldr	r1, [r7, #4]
 800ef44:	8b09      	ldrh	r1, [r1, #24]
 800ef46:	9102      	str	r1, [sp, #8]
 800ef48:	9201      	str	r2, [sp, #4]
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	462b      	mov	r3, r5
 800ef4e:	4622      	mov	r2, r4
 800ef50:	4601      	mov	r1, r0
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f005 fb4a 	bl	80145ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f001 fc67 	bl	801082c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef5e:	4b47      	ldr	r3, [pc, #284]	@ (800f07c <tcp_close_shutdown+0x1b0>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d105      	bne.n	800ef74 <tcp_close_shutdown+0xa8>
 800ef68:	4b44      	ldr	r3, [pc, #272]	@ (800f07c <tcp_close_shutdown+0x1b0>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	4a43      	ldr	r2, [pc, #268]	@ (800f07c <tcp_close_shutdown+0x1b0>)
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	e013      	b.n	800ef9c <tcp_close_shutdown+0xd0>
 800ef74:	4b41      	ldr	r3, [pc, #260]	@ (800f07c <tcp_close_shutdown+0x1b0>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e00c      	b.n	800ef96 <tcp_close_shutdown+0xca>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d104      	bne.n	800ef90 <tcp_close_shutdown+0xc4>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68da      	ldr	r2, [r3, #12]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	60da      	str	r2, [r3, #12]
 800ef8e:	e005      	b.n	800ef9c <tcp_close_shutdown+0xd0>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1ef      	bne.n	800ef7c <tcp_close_shutdown+0xb0>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	60da      	str	r2, [r3, #12]
 800efa2:	4b37      	ldr	r3, [pc, #220]	@ (800f080 <tcp_close_shutdown+0x1b4>)
 800efa4:	2201      	movs	r2, #1
 800efa6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efa8:	4b36      	ldr	r3, [pc, #216]	@ (800f084 <tcp_close_shutdown+0x1b8>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d102      	bne.n	800efb8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800efb2:	f003 fd31 	bl	8012a18 <tcp_trigger_input_pcb_close>
 800efb6:	e002      	b.n	800efbe <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff fed5 	bl	800ed68 <tcp_free>
      }
      return ERR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	e050      	b.n	800f064 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7d1b      	ldrb	r3, [r3, #20]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d03b      	beq.n	800f042 <tcp_close_shutdown+0x176>
 800efca:	2b02      	cmp	r3, #2
 800efcc:	dc44      	bgt.n	800f058 <tcp_close_shutdown+0x18c>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d002      	beq.n	800efd8 <tcp_close_shutdown+0x10c>
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d02a      	beq.n	800f02c <tcp_close_shutdown+0x160>
 800efd6:	e03f      	b.n	800f058 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8adb      	ldrh	r3, [r3, #22]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d021      	beq.n	800f024 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800efe0:	4b29      	ldr	r3, [pc, #164]	@ (800f088 <tcp_close_shutdown+0x1bc>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d105      	bne.n	800eff6 <tcp_close_shutdown+0x12a>
 800efea:	4b27      	ldr	r3, [pc, #156]	@ (800f088 <tcp_close_shutdown+0x1bc>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	4a25      	ldr	r2, [pc, #148]	@ (800f088 <tcp_close_shutdown+0x1bc>)
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	e013      	b.n	800f01e <tcp_close_shutdown+0x152>
 800eff6:	4b24      	ldr	r3, [pc, #144]	@ (800f088 <tcp_close_shutdown+0x1bc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	60bb      	str	r3, [r7, #8]
 800effc:	e00c      	b.n	800f018 <tcp_close_shutdown+0x14c>
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d104      	bne.n	800f012 <tcp_close_shutdown+0x146>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68da      	ldr	r2, [r3, #12]
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	60da      	str	r2, [r3, #12]
 800f010:	e005      	b.n	800f01e <tcp_close_shutdown+0x152>
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	60bb      	str	r3, [r7, #8]
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1ef      	bne.n	800effe <tcp_close_shutdown+0x132>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff fe9f 	bl	800ed68 <tcp_free>
      break;
 800f02a:	e01a      	b.n	800f062 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff ff13 	bl	800ee58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	4815      	ldr	r0, [pc, #84]	@ (800f08c <tcp_close_shutdown+0x1c0>)
 800f036:	f001 fc43 	bl	80108c0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff feb0 	bl	800eda0 <tcp_free_listen>
      break;
 800f040:	e00f      	b.n	800f062 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f042:	6879      	ldr	r1, [r7, #4]
 800f044:	480d      	ldr	r0, [pc, #52]	@ (800f07c <tcp_close_shutdown+0x1b0>)
 800f046:	f001 fc3b 	bl	80108c0 <tcp_pcb_remove>
 800f04a:	4b0d      	ldr	r3, [pc, #52]	@ (800f080 <tcp_close_shutdown+0x1b4>)
 800f04c:	2201      	movs	r2, #1
 800f04e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff fe89 	bl	800ed68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f056:	e004      	b.n	800f062 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f819 	bl	800f090 <tcp_close_shutdown_fin>
 800f05e:	4603      	mov	r3, r0
 800f060:	e000      	b.n	800f064 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bdb0      	pop	{r4, r5, r7, pc}
 800f06c:	0801cde8 	.word	0x0801cde8
 800f070:	0801cebc 	.word	0x0801cebc
 800f074:	0801ce2c 	.word	0x0801ce2c
 800f078:	0801cedc 	.word	0x0801cedc
 800f07c:	20017678 	.word	0x20017678
 800f080:	20017680 	.word	0x20017680
 800f084:	200176bc 	.word	0x200176bc
 800f088:	20017670 	.word	0x20017670
 800f08c:	20017674 	.word	0x20017674

0800f090 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d106      	bne.n	800f0ac <tcp_close_shutdown_fin+0x1c>
 800f09e:	4b2e      	ldr	r3, [pc, #184]	@ (800f158 <tcp_close_shutdown_fin+0xc8>)
 800f0a0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800f0a4:	492d      	ldr	r1, [pc, #180]	@ (800f15c <tcp_close_shutdown_fin+0xcc>)
 800f0a6:	482e      	ldr	r0, [pc, #184]	@ (800f160 <tcp_close_shutdown_fin+0xd0>)
 800f0a8:	f00b f834 	bl	801a114 <iprintf>

  switch (pcb->state) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	2b07      	cmp	r3, #7
 800f0b2:	d020      	beq.n	800f0f6 <tcp_close_shutdown_fin+0x66>
 800f0b4:	2b07      	cmp	r3, #7
 800f0b6:	dc2b      	bgt.n	800f110 <tcp_close_shutdown_fin+0x80>
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d002      	beq.n	800f0c2 <tcp_close_shutdown_fin+0x32>
 800f0bc:	2b04      	cmp	r3, #4
 800f0be:	d00d      	beq.n	800f0dc <tcp_close_shutdown_fin+0x4c>
 800f0c0:	e026      	b.n	800f110 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f004 fb72 	bl	80137ac <tcp_send_fin>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d11f      	bne.n	800f114 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2205      	movs	r2, #5
 800f0d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0da:	e01b      	b.n	800f114 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f004 fb65 	bl	80137ac <tcp_send_fin>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d114      	bne.n	800f118 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2205      	movs	r2, #5
 800f0f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0f4:	e010      	b.n	800f118 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f004 fb58 	bl	80137ac <tcp_send_fin>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2209      	movs	r2, #9
 800f10c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f10e:	e005      	b.n	800f11c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	e01c      	b.n	800f14e <tcp_close_shutdown_fin+0xbe>
      break;
 800f114:	bf00      	nop
 800f116:	e002      	b.n	800f11e <tcp_close_shutdown_fin+0x8e>
      break;
 800f118:	bf00      	nop
 800f11a:	e000      	b.n	800f11e <tcp_close_shutdown_fin+0x8e>
      break;
 800f11c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d103      	bne.n	800f12e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f004 fc7e 	bl	8013a28 <tcp_output>
 800f12c:	e00d      	b.n	800f14a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f12e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f136:	d108      	bne.n	800f14a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	8b5b      	ldrh	r3, [r3, #26]
 800f13c:	f043 0308 	orr.w	r3, r3, #8
 800f140:	b29a      	uxth	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f146:	2300      	movs	r3, #0
 800f148:	e001      	b.n	800f14e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0801cde8 	.word	0x0801cde8
 800f15c:	0801ce98 	.word	0x0801ce98
 800f160:	0801ce2c 	.word	0x0801ce2c

0800f164 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d109      	bne.n	800f186 <tcp_close+0x22>
 800f172:	4b0f      	ldr	r3, [pc, #60]	@ (800f1b0 <tcp_close+0x4c>)
 800f174:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800f178:	490e      	ldr	r1, [pc, #56]	@ (800f1b4 <tcp_close+0x50>)
 800f17a:	480f      	ldr	r0, [pc, #60]	@ (800f1b8 <tcp_close+0x54>)
 800f17c:	f00a ffca 	bl	801a114 <iprintf>
 800f180:	f06f 030f 	mvn.w	r3, #15
 800f184:	e00f      	b.n	800f1a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7d1b      	ldrb	r3, [r3, #20]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d006      	beq.n	800f19c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	8b5b      	ldrh	r3, [r3, #26]
 800f192:	f043 0310 	orr.w	r3, r3, #16
 800f196:	b29a      	uxth	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f19c:	2101      	movs	r1, #1
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fe94 	bl	800eecc <tcp_close_shutdown>
 800f1a4:	4603      	mov	r3, r0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	0801cde8 	.word	0x0801cde8
 800f1b4:	0801cef8 	.word	0x0801cef8
 800f1b8:	0801ce2c 	.word	0x0801ce2c

0800f1bc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d109      	bne.n	800f1e2 <tcp_shutdown+0x26>
 800f1ce:	4b26      	ldr	r3, [pc, #152]	@ (800f268 <tcp_shutdown+0xac>)
 800f1d0:	f240 2207 	movw	r2, #519	@ 0x207
 800f1d4:	4925      	ldr	r1, [pc, #148]	@ (800f26c <tcp_shutdown+0xb0>)
 800f1d6:	4826      	ldr	r0, [pc, #152]	@ (800f270 <tcp_shutdown+0xb4>)
 800f1d8:	f00a ff9c 	bl	801a114 <iprintf>
 800f1dc:	f06f 030f 	mvn.w	r3, #15
 800f1e0:	e03d      	b.n	800f25e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	7d1b      	ldrb	r3, [r3, #20]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d102      	bne.n	800f1f0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f1ea:	f06f 030a 	mvn.w	r3, #10
 800f1ee:	e036      	b.n	800f25e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d01b      	beq.n	800f22e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	8b5b      	ldrh	r3, [r3, #26]
 800f1fa:	f043 0310 	orr.w	r3, r3, #16
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d005      	beq.n	800f216 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f20a:	2101      	movs	r1, #1
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7ff fe5d 	bl	800eecc <tcp_close_shutdown>
 800f212:	4603      	mov	r3, r0
 800f214:	e023      	b.n	800f25e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d007      	beq.n	800f22e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fae4 	bl	800e7f0 <pbuf_free>
      pcb->refused_data = NULL;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2200      	movs	r2, #0
 800f22c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d013      	beq.n	800f25c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	7d1b      	ldrb	r3, [r3, #20]
 800f238:	2b04      	cmp	r3, #4
 800f23a:	dc02      	bgt.n	800f242 <tcp_shutdown+0x86>
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	da02      	bge.n	800f246 <tcp_shutdown+0x8a>
 800f240:	e009      	b.n	800f256 <tcp_shutdown+0x9a>
 800f242:	2b07      	cmp	r3, #7
 800f244:	d107      	bne.n	800f256 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	4619      	mov	r1, r3
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f7ff fe3d 	bl	800eecc <tcp_close_shutdown>
 800f252:	4603      	mov	r3, r0
 800f254:	e003      	b.n	800f25e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f256:	f06f 030a 	mvn.w	r3, #10
 800f25a:	e000      	b.n	800f25e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	0801cde8 	.word	0x0801cde8
 800f26c:	0801cf10 	.word	0x0801cf10
 800f270:	0801ce2c 	.word	0x0801ce2c

0800f274 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08e      	sub	sp, #56	@ 0x38
 800f278:	af04      	add	r7, sp, #16
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d107      	bne.n	800f294 <tcp_abandon+0x20>
 800f284:	4b4d      	ldr	r3, [pc, #308]	@ (800f3bc <tcp_abandon+0x148>)
 800f286:	f240 223d 	movw	r2, #573	@ 0x23d
 800f28a:	494d      	ldr	r1, [pc, #308]	@ (800f3c0 <tcp_abandon+0x14c>)
 800f28c:	484d      	ldr	r0, [pc, #308]	@ (800f3c4 <tcp_abandon+0x150>)
 800f28e:	f00a ff41 	bl	801a114 <iprintf>
 800f292:	e090      	b.n	800f3b6 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7d1b      	ldrb	r3, [r3, #20]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d106      	bne.n	800f2aa <tcp_abandon+0x36>
 800f29c:	4b47      	ldr	r3, [pc, #284]	@ (800f3bc <tcp_abandon+0x148>)
 800f29e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f2a2:	4949      	ldr	r1, [pc, #292]	@ (800f3c8 <tcp_abandon+0x154>)
 800f2a4:	4847      	ldr	r0, [pc, #284]	@ (800f3c4 <tcp_abandon+0x150>)
 800f2a6:	f00a ff35 	bl	801a114 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	7d1b      	ldrb	r3, [r3, #20]
 800f2ae:	2b0a      	cmp	r3, #10
 800f2b0:	d107      	bne.n	800f2c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2b2:	6879      	ldr	r1, [r7, #4]
 800f2b4:	4845      	ldr	r0, [pc, #276]	@ (800f3cc <tcp_abandon+0x158>)
 800f2b6:	f001 fb03 	bl	80108c0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff fd54 	bl	800ed68 <tcp_free>
 800f2c0:	e079      	b.n	800f3b6 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d126      	bne.n	800f33a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	8adb      	ldrh	r3, [r3, #22]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d02e      	beq.n	800f352 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f2f4:	4b36      	ldr	r3, [pc, #216]	@ (800f3d0 <tcp_abandon+0x15c>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d105      	bne.n	800f30a <tcp_abandon+0x96>
 800f2fe:	4b34      	ldr	r3, [pc, #208]	@ (800f3d0 <tcp_abandon+0x15c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	4a32      	ldr	r2, [pc, #200]	@ (800f3d0 <tcp_abandon+0x15c>)
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	e013      	b.n	800f332 <tcp_abandon+0xbe>
 800f30a:	4b31      	ldr	r3, [pc, #196]	@ (800f3d0 <tcp_abandon+0x15c>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	61fb      	str	r3, [r7, #28]
 800f310:	e00c      	b.n	800f32c <tcp_abandon+0xb8>
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d104      	bne.n	800f326 <tcp_abandon+0xb2>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	68da      	ldr	r2, [r3, #12]
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	60da      	str	r2, [r3, #12]
 800f324:	e005      	b.n	800f332 <tcp_abandon+0xbe>
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1ef      	bne.n	800f312 <tcp_abandon+0x9e>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	60da      	str	r2, [r3, #12]
 800f338:	e00b      	b.n	800f352 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8adb      	ldrh	r3, [r3, #22]
 800f342:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f344:	6879      	ldr	r1, [r7, #4]
 800f346:	4823      	ldr	r0, [pc, #140]	@ (800f3d4 <tcp_abandon+0x160>)
 800f348:	f001 faba 	bl	80108c0 <tcp_pcb_remove>
 800f34c:	4b22      	ldr	r3, [pc, #136]	@ (800f3d8 <tcp_abandon+0x164>)
 800f34e:	2201      	movs	r2, #1
 800f350:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f356:	2b00      	cmp	r3, #0
 800f358:	d004      	beq.n	800f364 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f35e:	4618      	mov	r0, r3
 800f360:	f000 ffc2 	bl	80102e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d004      	beq.n	800f376 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f370:	4618      	mov	r0, r3
 800f372:	f000 ffb9 	bl	80102e8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00e      	beq.n	800f39a <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3304      	adds	r3, #4
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	8b12      	ldrh	r2, [r2, #24]
 800f386:	9202      	str	r2, [sp, #8]
 800f388:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f38a:	9201      	str	r2, [sp, #4]
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	460b      	mov	r3, r1
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	69b9      	ldr	r1, [r7, #24]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f005 f929 	bl	80145ec <tcp_rst>
    }
    last_state = pcb->state;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	7d1b      	ldrb	r3, [r3, #20]
 800f39e:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7ff fce1 	bl	800ed68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d004      	beq.n	800f3b6 <tcp_abandon+0x142>
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	f06f 010c 	mvn.w	r1, #12
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	4798      	blx	r3
  }
}
 800f3b6:	3728      	adds	r7, #40	@ 0x28
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	0801cde8 	.word	0x0801cde8
 800f3c0:	0801cf2c 	.word	0x0801cf2c
 800f3c4:	0801ce2c 	.word	0x0801ce2c
 800f3c8:	0801cf48 	.word	0x0801cf48
 800f3cc:	2001767c 	.word	0x2001767c
 800f3d0:	20017670 	.word	0x20017670
 800f3d4:	20017678 	.word	0x20017678
 800f3d8:	20017680 	.word	0x20017680

0800f3dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ff44 	bl	800f274 <tcp_abandon>
}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4613      	mov	r3, r2
 800f400:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f402:	2304      	movs	r3, #4
 800f404:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f40c:	4b3e      	ldr	r3, [pc, #248]	@ (800f508 <tcp_bind+0x114>)
 800f40e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d109      	bne.n	800f42a <tcp_bind+0x36>
 800f416:	4b3d      	ldr	r3, [pc, #244]	@ (800f50c <tcp_bind+0x118>)
 800f418:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800f41c:	493c      	ldr	r1, [pc, #240]	@ (800f510 <tcp_bind+0x11c>)
 800f41e:	483d      	ldr	r0, [pc, #244]	@ (800f514 <tcp_bind+0x120>)
 800f420:	f00a fe78 	bl	801a114 <iprintf>
 800f424:	f06f 030f 	mvn.w	r3, #15
 800f428:	e06a      	b.n	800f500 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d009      	beq.n	800f446 <tcp_bind+0x52>
 800f432:	4b36      	ldr	r3, [pc, #216]	@ (800f50c <tcp_bind+0x118>)
 800f434:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f438:	4937      	ldr	r1, [pc, #220]	@ (800f518 <tcp_bind+0x124>)
 800f43a:	4836      	ldr	r0, [pc, #216]	@ (800f514 <tcp_bind+0x120>)
 800f43c:	f00a fe6a 	bl	801a114 <iprintf>
 800f440:	f06f 0305 	mvn.w	r3, #5
 800f444:	e05c      	b.n	800f500 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f446:	88fb      	ldrh	r3, [r7, #6]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d109      	bne.n	800f460 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f44c:	f000 f9e0 	bl	800f810 <tcp_new_port>
 800f450:	4603      	mov	r3, r0
 800f452:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f454:	88fb      	ldrh	r3, [r7, #6]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d135      	bne.n	800f4c6 <tcp_bind+0xd2>
      return ERR_BUF;
 800f45a:	f06f 0301 	mvn.w	r3, #1
 800f45e:	e04f      	b.n	800f500 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f460:	2300      	movs	r3, #0
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	e02b      	b.n	800f4be <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f466:	4a2d      	ldr	r2, [pc, #180]	@ (800f51c <tcp_bind+0x128>)
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	61bb      	str	r3, [r7, #24]
 800f472:	e01e      	b.n	800f4b2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	8adb      	ldrh	r3, [r3, #22]
 800f478:	88fa      	ldrh	r2, [r7, #6]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d116      	bne.n	800f4ac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f47e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f480:	2b00      	cmp	r3, #0
 800f482:	d010      	beq.n	800f4a6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00c      	beq.n	800f4a6 <tcp_bind+0xb2>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d009      	beq.n	800f4a6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d005      	beq.n	800f4a6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d102      	bne.n	800f4ac <tcp_bind+0xb8>
              return ERR_USE;
 800f4a6:	f06f 0307 	mvn.w	r3, #7
 800f4aa:	e029      	b.n	800f500 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1dd      	bne.n	800f474 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	61fb      	str	r3, [r7, #28]
 800f4be:	69fa      	ldr	r2, [r7, #28]
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	dbcf      	blt.n	800f466 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00c      	beq.n	800f4e6 <tcp_bind+0xf2>
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d008      	beq.n	800f4e6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <tcp_bind+0xec>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	e000      	b.n	800f4e2 <tcp_bind+0xee>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800f520 <tcp_bind+0x12c>)
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	60da      	str	r2, [r3, #12]
 800f4f4:	4a0a      	ldr	r2, [pc, #40]	@ (800f520 <tcp_bind+0x12c>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6013      	str	r3, [r2, #0]
 800f4fa:	f005 fa39 	bl	8014970 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3720      	adds	r7, #32
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	08023034 	.word	0x08023034
 800f50c:	0801cde8 	.word	0x0801cde8
 800f510:	0801cf7c 	.word	0x0801cf7c
 800f514:	0801ce2c 	.word	0x0801ce2c
 800f518:	0801cf94 	.word	0x0801cf94
 800f51c:	08022ffc 	.word	0x08022ffc
 800f520:	20017670 	.word	0x20017670

0800f524 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	4613      	mov	r3, r2
 800f530:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <tcp_accept_null+0x22>
 800f538:	4b07      	ldr	r3, [pc, #28]	@ (800f558 <tcp_accept_null+0x34>)
 800f53a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f53e:	4907      	ldr	r1, [pc, #28]	@ (800f55c <tcp_accept_null+0x38>)
 800f540:	4807      	ldr	r0, [pc, #28]	@ (800f560 <tcp_accept_null+0x3c>)
 800f542:	f00a fde7 	bl	801a114 <iprintf>

  tcp_abort(pcb);
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f7ff ff48 	bl	800f3dc <tcp_abort>

  return ERR_ABRT;
 800f54c:	f06f 030c 	mvn.w	r3, #12
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	0801cde8 	.word	0x0801cde8
 800f55c:	0801cfbc 	.word	0x0801cfbc
 800f560:	0801ce2c 	.word	0x0801ce2c

0800f564 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	460b      	mov	r3, r1
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f572:	2300      	movs	r3, #0
 800f574:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <tcp_listen_with_backlog_and_err+0x2c>
 800f57c:	4b47      	ldr	r3, [pc, #284]	@ (800f69c <tcp_listen_with_backlog_and_err+0x138>)
 800f57e:	f240 3259 	movw	r2, #857	@ 0x359
 800f582:	4947      	ldr	r1, [pc, #284]	@ (800f6a0 <tcp_listen_with_backlog_and_err+0x13c>)
 800f584:	4847      	ldr	r0, [pc, #284]	@ (800f6a4 <tcp_listen_with_backlog_and_err+0x140>)
 800f586:	f00a fdc5 	bl	801a114 <iprintf>
 800f58a:	23f0      	movs	r3, #240	@ 0xf0
 800f58c:	76fb      	strb	r3, [r7, #27]
 800f58e:	e079      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d009      	beq.n	800f5ac <tcp_listen_with_backlog_and_err+0x48>
 800f598:	4b40      	ldr	r3, [pc, #256]	@ (800f69c <tcp_listen_with_backlog_and_err+0x138>)
 800f59a:	f240 325a 	movw	r2, #858	@ 0x35a
 800f59e:	4942      	ldr	r1, [pc, #264]	@ (800f6a8 <tcp_listen_with_backlog_and_err+0x144>)
 800f5a0:	4840      	ldr	r0, [pc, #256]	@ (800f6a4 <tcp_listen_with_backlog_and_err+0x140>)
 800f5a2:	f00a fdb7 	bl	801a114 <iprintf>
 800f5a6:	23f1      	movs	r3, #241	@ 0xf1
 800f5a8:	76fb      	strb	r3, [r7, #27]
 800f5aa:	e06b      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	7d1b      	ldrb	r3, [r3, #20]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d104      	bne.n	800f5be <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f5b8:	23f7      	movs	r3, #247	@ 0xf7
 800f5ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f5bc:	e062      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f5be:	2002      	movs	r0, #2
 800f5c0:	f7fe fa6e 	bl	800daa0 <memp_malloc>
 800f5c4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d102      	bne.n	800f5d2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f5cc:	23ff      	movs	r3, #255	@ 0xff
 800f5ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f5d0:	e058      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	691a      	ldr	r2, [r3, #16]
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	8ada      	ldrh	r2, [r3, #22]
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	7d5a      	ldrb	r2, [r3, #21]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	7a5a      	ldrb	r2, [r3, #9]
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	7ada      	ldrb	r2, [r3, #11]
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	7a9a      	ldrb	r2, [r3, #10]
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8adb      	ldrh	r3, [r3, #22]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d021      	beq.n	800f662 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f61e:	4b23      	ldr	r3, [pc, #140]	@ (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	429a      	cmp	r2, r3
 800f626:	d105      	bne.n	800f634 <tcp_listen_with_backlog_and_err+0xd0>
 800f628:	4b20      	ldr	r3, [pc, #128]	@ (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f630:	6013      	str	r3, [r2, #0]
 800f632:	e013      	b.n	800f65c <tcp_listen_with_backlog_and_err+0xf8>
 800f634:	4b1d      	ldr	r3, [pc, #116]	@ (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	e00c      	b.n	800f656 <tcp_listen_with_backlog_and_err+0xf2>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	429a      	cmp	r2, r3
 800f644:	d104      	bne.n	800f650 <tcp_listen_with_backlog_and_err+0xec>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	68da      	ldr	r2, [r3, #12]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	60da      	str	r2, [r3, #12]
 800f64e:	e005      	b.n	800f65c <tcp_listen_with_backlog_and_err+0xf8>
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1ef      	bne.n	800f63c <tcp_listen_with_backlog_and_err+0xd8>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7ff fb80 	bl	800ed68 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4a11      	ldr	r2, [pc, #68]	@ (800f6b0 <tcp_listen_with_backlog_and_err+0x14c>)
 800f66c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f66e:	4b11      	ldr	r3, [pc, #68]	@ (800f6b4 <tcp_listen_with_backlog_and_err+0x150>)
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	60da      	str	r2, [r3, #12]
 800f676:	4a0f      	ldr	r2, [pc, #60]	@ (800f6b4 <tcp_listen_with_backlog_and_err+0x150>)
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	6013      	str	r3, [r2, #0]
 800f67c:	f005 f978 	bl	8014970 <tcp_timer_needed>
  res = ERR_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7efa      	ldrb	r2, [r7, #27]
 800f68e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f690:	69fb      	ldr	r3, [r7, #28]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3720      	adds	r7, #32
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	0801cde8 	.word	0x0801cde8
 800f6a0:	0801cfdc 	.word	0x0801cfdc
 800f6a4:	0801ce2c 	.word	0x0801ce2c
 800f6a8:	0801d00c 	.word	0x0801d00c
 800f6ac:	20017670 	.word	0x20017670
 800f6b0:	0800f525 	.word	0x0800f525
 800f6b4:	20017674 	.word	0x20017674

0800f6b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d106      	bne.n	800f6d4 <tcp_update_rcv_ann_wnd+0x1c>
 800f6c6:	4b25      	ldr	r3, [pc, #148]	@ (800f75c <tcp_update_rcv_ann_wnd+0xa4>)
 800f6c8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f6cc:	4924      	ldr	r1, [pc, #144]	@ (800f760 <tcp_update_rcv_ann_wnd+0xa8>)
 800f6ce:	4825      	ldr	r0, [pc, #148]	@ (800f764 <tcp_update_rcv_ann_wnd+0xac>)
 800f6d0:	f00a fd20 	bl	801a114 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f6dc:	4413      	add	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f6e8:	f640 3168 	movw	r1, #2920	@ 0xb68
 800f6ec:	428a      	cmp	r2, r1
 800f6ee:	bf28      	it	cs
 800f6f0:	460a      	movcs	r2, r1
 800f6f2:	b292      	uxth	r2, r2
 800f6f4:	4413      	add	r3, r2
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	db08      	blt.n	800f710 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	e020      	b.n	800f752 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	dd03      	ble.n	800f726 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f724:	e014      	b.n	800f750 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f738:	d306      	bcc.n	800f748 <tcp_update_rcv_ann_wnd+0x90>
 800f73a:	4b08      	ldr	r3, [pc, #32]	@ (800f75c <tcp_update_rcv_ann_wnd+0xa4>)
 800f73c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f740:	4909      	ldr	r1, [pc, #36]	@ (800f768 <tcp_update_rcv_ann_wnd+0xb0>)
 800f742:	4808      	ldr	r0, [pc, #32]	@ (800f764 <tcp_update_rcv_ann_wnd+0xac>)
 800f744:	f00a fce6 	bl	801a114 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f750:	2300      	movs	r3, #0
  }
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	0801cde8 	.word	0x0801cde8
 800f760:	0801d044 	.word	0x0801d044
 800f764:	0801ce2c 	.word	0x0801ce2c
 800f768:	0801d068 	.word	0x0801d068

0800f76c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	460b      	mov	r3, r1
 800f776:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d107      	bne.n	800f78e <tcp_recved+0x22>
 800f77e:	4b20      	ldr	r3, [pc, #128]	@ (800f800 <tcp_recved+0x94>)
 800f780:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f784:	491f      	ldr	r1, [pc, #124]	@ (800f804 <tcp_recved+0x98>)
 800f786:	4820      	ldr	r0, [pc, #128]	@ (800f808 <tcp_recved+0x9c>)
 800f788:	f00a fcc4 	bl	801a114 <iprintf>
 800f78c:	e034      	b.n	800f7f8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	7d1b      	ldrb	r3, [r3, #20]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d106      	bne.n	800f7a4 <tcp_recved+0x38>
 800f796:	4b1a      	ldr	r3, [pc, #104]	@ (800f800 <tcp_recved+0x94>)
 800f798:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f79c:	491b      	ldr	r1, [pc, #108]	@ (800f80c <tcp_recved+0xa0>)
 800f79e:	481a      	ldr	r0, [pc, #104]	@ (800f808 <tcp_recved+0x9c>)
 800f7a0:	f00a fcb8 	bl	801a114 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f7a8:	887b      	ldrh	r3, [r7, #2]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f7ae:	89fb      	ldrh	r3, [r7, #14]
 800f7b0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d804      	bhi.n	800f7c2 <tcp_recved+0x56>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7bc:	89fa      	ldrh	r2, [r7, #14]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d204      	bcs.n	800f7cc <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f7c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f7ca:	e002      	b.n	800f7d2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	89fa      	ldrh	r2, [r7, #14]
 800f7d0:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff ff70 	bl	800f6b8 <tcp_update_rcv_ann_wnd>
 800f7d8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d909      	bls.n	800f7f8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	8b5b      	ldrh	r3, [r3, #26]
 800f7e8:	f043 0302 	orr.w	r3, r3, #2
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f004 f918 	bl	8013a28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	0801cde8 	.word	0x0801cde8
 800f804:	0801d084 	.word	0x0801d084
 800f808:	0801ce2c 	.word	0x0801ce2c
 800f80c:	0801d09c 	.word	0x0801d09c

0800f810 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f81a:	4b1e      	ldr	r3, [pc, #120]	@ (800f894 <tcp_new_port+0x84>)
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	3301      	adds	r3, #1
 800f820:	b29a      	uxth	r2, r3
 800f822:	4b1c      	ldr	r3, [pc, #112]	@ (800f894 <tcp_new_port+0x84>)
 800f824:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f826:	4b1b      	ldr	r3, [pc, #108]	@ (800f894 <tcp_new_port+0x84>)
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f82e:	4293      	cmp	r3, r2
 800f830:	d103      	bne.n	800f83a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f832:	4b18      	ldr	r3, [pc, #96]	@ (800f894 <tcp_new_port+0x84>)
 800f834:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f838:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f83a:	2300      	movs	r3, #0
 800f83c:	71fb      	strb	r3, [r7, #7]
 800f83e:	e01e      	b.n	800f87e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f840:	79fb      	ldrb	r3, [r7, #7]
 800f842:	4a15      	ldr	r2, [pc, #84]	@ (800f898 <tcp_new_port+0x88>)
 800f844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	e011      	b.n	800f872 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	8ada      	ldrh	r2, [r3, #22]
 800f852:	4b10      	ldr	r3, [pc, #64]	@ (800f894 <tcp_new_port+0x84>)
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d108      	bne.n	800f86c <tcp_new_port+0x5c>
        n++;
 800f85a:	88bb      	ldrh	r3, [r7, #4]
 800f85c:	3301      	adds	r3, #1
 800f85e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f860:	88bb      	ldrh	r3, [r7, #4]
 800f862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f866:	d3d8      	bcc.n	800f81a <tcp_new_port+0xa>
          return 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	e00d      	b.n	800f888 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1ea      	bne.n	800f84e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	3301      	adds	r3, #1
 800f87c:	71fb      	strb	r3, [r7, #7]
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	2b03      	cmp	r3, #3
 800f882:	d9dd      	bls.n	800f840 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f884:	4b03      	ldr	r3, [pc, #12]	@ (800f894 <tcp_new_port+0x84>)
 800f886:	881b      	ldrh	r3, [r3, #0]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	2000001c 	.word	0x2000001c
 800f898:	08022ffc 	.word	0x08022ffc

0800f89c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b08a      	sub	sp, #40	@ 0x28
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	603b      	str	r3, [r7, #0]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d109      	bne.n	800f8ca <tcp_connect+0x2e>
 800f8b6:	4b7d      	ldr	r3, [pc, #500]	@ (800faac <tcp_connect+0x210>)
 800f8b8:	f240 4235 	movw	r2, #1077	@ 0x435
 800f8bc:	497c      	ldr	r1, [pc, #496]	@ (800fab0 <tcp_connect+0x214>)
 800f8be:	487d      	ldr	r0, [pc, #500]	@ (800fab4 <tcp_connect+0x218>)
 800f8c0:	f00a fc28 	bl	801a114 <iprintf>
 800f8c4:	f06f 030f 	mvn.w	r3, #15
 800f8c8:	e0ec      	b.n	800faa4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d109      	bne.n	800f8e4 <tcp_connect+0x48>
 800f8d0:	4b76      	ldr	r3, [pc, #472]	@ (800faac <tcp_connect+0x210>)
 800f8d2:	f240 4236 	movw	r2, #1078	@ 0x436
 800f8d6:	4978      	ldr	r1, [pc, #480]	@ (800fab8 <tcp_connect+0x21c>)
 800f8d8:	4876      	ldr	r0, [pc, #472]	@ (800fab4 <tcp_connect+0x218>)
 800f8da:	f00a fc1b 	bl	801a114 <iprintf>
 800f8de:	f06f 030f 	mvn.w	r3, #15
 800f8e2:	e0df      	b.n	800faa4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	7d1b      	ldrb	r3, [r3, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d009      	beq.n	800f900 <tcp_connect+0x64>
 800f8ec:	4b6f      	ldr	r3, [pc, #444]	@ (800faac <tcp_connect+0x210>)
 800f8ee:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800f8f2:	4972      	ldr	r1, [pc, #456]	@ (800fabc <tcp_connect+0x220>)
 800f8f4:	486f      	ldr	r0, [pc, #444]	@ (800fab4 <tcp_connect+0x218>)
 800f8f6:	f00a fc0d 	bl	801a114 <iprintf>
 800f8fa:	f06f 0309 	mvn.w	r3, #9
 800f8fe:	e0d1      	b.n	800faa4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <tcp_connect+0x70>
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	e000      	b.n	800f90e <tcp_connect+0x72>
 800f90c:	2300      	movs	r3, #0
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	88fa      	ldrh	r2, [r7, #6]
 800f916:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	7a1b      	ldrb	r3, [r3, #8]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d006      	beq.n	800f92e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	7a1b      	ldrb	r3, [r3, #8]
 800f924:	4618      	mov	r0, r3
 800f926:	f7fe fc2f 	bl	800e188 <netif_get_by_index>
 800f92a:	6278      	str	r0, [r7, #36]	@ 0x24
 800f92c:	e005      	b.n	800f93a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	3304      	adds	r3, #4
 800f932:	4618      	mov	r0, r3
 800f934:	f008 fe68 	bl	8018608 <ip4_route>
 800f938:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800f93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f940:	f06f 0303 	mvn.w	r3, #3
 800f944:	e0ae      	b.n	800faa4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d003      	beq.n	800f954 <tcp_connect+0xb8>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d111      	bne.n	800f978 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <tcp_connect+0xc4>
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95c:	3304      	adds	r3, #4
 800f95e:	e000      	b.n	800f962 <tcp_connect+0xc6>
 800f960:	2300      	movs	r3, #0
 800f962:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <tcp_connect+0xd4>
      return ERR_RTE;
 800f96a:	f06f 0303 	mvn.w	r3, #3
 800f96e:	e099      	b.n	800faa4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	8adb      	ldrh	r3, [r3, #22]
 800f97c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	8adb      	ldrh	r3, [r3, #22]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d10c      	bne.n	800f9a0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f986:	f7ff ff43 	bl	800f810 <tcp_new_port>
 800f98a:	4603      	mov	r3, r0
 800f98c:	461a      	mov	r2, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	8adb      	ldrh	r3, [r3, #22]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d102      	bne.n	800f9a0 <tcp_connect+0x104>
      return ERR_BUF;
 800f99a:	f06f 0301 	mvn.w	r3, #1
 800f99e:	e081      	b.n	800faa4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f001 f813 	bl	80109cc <tcp_next_iss>
 800f9a6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	1e5a      	subs	r2, r3, #1
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	1e5a      	subs	r2, r3, #1
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	1e5a      	subs	r2, r3, #1
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f9d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f9ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f9f4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	3304      	adds	r3, #4
 800f9fe:	461a      	mov	r2, r3
 800fa00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa02:	f001 f809 	bl	8010a18 <tcp_eff_send_mss_netif>
 800fa06:	4603      	mov	r3, r0
 800fa08:	461a      	mov	r2, r3
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2201      	movs	r2, #1
 800fa12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	683a      	ldr	r2, [r7, #0]
 800fa1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800fa1e:	2102      	movs	r1, #2
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f003 ff13 	bl	801384c <tcp_enqueue_flags>
 800fa26:	4603      	mov	r3, r0
 800fa28:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800fa2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d136      	bne.n	800faa0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2202      	movs	r2, #2
 800fa36:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800fa38:	8b7b      	ldrh	r3, [r7, #26]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d021      	beq.n	800fa82 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa3e:	4b20      	ldr	r3, [pc, #128]	@ (800fac0 <tcp_connect+0x224>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d105      	bne.n	800fa54 <tcp_connect+0x1b8>
 800fa48:	4b1d      	ldr	r3, [pc, #116]	@ (800fac0 <tcp_connect+0x224>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	4a1c      	ldr	r2, [pc, #112]	@ (800fac0 <tcp_connect+0x224>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	e013      	b.n	800fa7c <tcp_connect+0x1e0>
 800fa54:	4b1a      	ldr	r3, [pc, #104]	@ (800fac0 <tcp_connect+0x224>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	623b      	str	r3, [r7, #32]
 800fa5a:	e00c      	b.n	800fa76 <tcp_connect+0x1da>
 800fa5c:	6a3b      	ldr	r3, [r7, #32]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d104      	bne.n	800fa70 <tcp_connect+0x1d4>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	68da      	ldr	r2, [r3, #12]
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	60da      	str	r2, [r3, #12]
 800fa6e:	e005      	b.n	800fa7c <tcp_connect+0x1e0>
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	623b      	str	r3, [r7, #32]
 800fa76:	6a3b      	ldr	r3, [r7, #32]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1ef      	bne.n	800fa5c <tcp_connect+0x1c0>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800fa82:	4b10      	ldr	r3, [pc, #64]	@ (800fac4 <tcp_connect+0x228>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	60da      	str	r2, [r3, #12]
 800fa8a:	4a0e      	ldr	r2, [pc, #56]	@ (800fac4 <tcp_connect+0x228>)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6013      	str	r3, [r2, #0]
 800fa90:	f004 ff6e 	bl	8014970 <tcp_timer_needed>
 800fa94:	4b0c      	ldr	r3, [pc, #48]	@ (800fac8 <tcp_connect+0x22c>)
 800fa96:	2201      	movs	r2, #1
 800fa98:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f003 ffc4 	bl	8013a28 <tcp_output>
  }
  return ret;
 800faa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3728      	adds	r7, #40	@ 0x28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	0801cde8 	.word	0x0801cde8
 800fab0:	0801d0c4 	.word	0x0801d0c4
 800fab4:	0801ce2c 	.word	0x0801ce2c
 800fab8:	0801d0e0 	.word	0x0801d0e0
 800fabc:	0801d0fc 	.word	0x0801d0fc
 800fac0:	20017670 	.word	0x20017670
 800fac4:	20017678 	.word	0x20017678
 800fac8:	20017680 	.word	0x20017680

0800facc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800facc:	b5b0      	push	{r4, r5, r7, lr}
 800face:	b090      	sub	sp, #64	@ 0x40
 800fad0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800fad8:	4b95      	ldr	r3, [pc, #596]	@ (800fd30 <tcp_slowtmr+0x264>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	4a94      	ldr	r2, [pc, #592]	@ (800fd30 <tcp_slowtmr+0x264>)
 800fae0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fae2:	4b94      	ldr	r3, [pc, #592]	@ (800fd34 <tcp_slowtmr+0x268>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	3301      	adds	r3, #1
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	4b92      	ldr	r3, [pc, #584]	@ (800fd34 <tcp_slowtmr+0x268>)
 800faec:	701a      	strb	r2, [r3, #0]
 800faee:	e000      	b.n	800faf2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800faf0:	bf00      	nop
  prev = NULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800faf6:	4b90      	ldr	r3, [pc, #576]	@ (800fd38 <tcp_slowtmr+0x26c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fafc:	e289      	b.n	8010012 <tcp_slowtmr+0x546>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb00:	7d1b      	ldrb	r3, [r3, #20]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <tcp_slowtmr+0x48>
 800fb06:	4b8d      	ldr	r3, [pc, #564]	@ (800fd3c <tcp_slowtmr+0x270>)
 800fb08:	f240 42be 	movw	r2, #1214	@ 0x4be
 800fb0c:	498c      	ldr	r1, [pc, #560]	@ (800fd40 <tcp_slowtmr+0x274>)
 800fb0e:	488d      	ldr	r0, [pc, #564]	@ (800fd44 <tcp_slowtmr+0x278>)
 800fb10:	f00a fb00 	bl	801a114 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb16:	7d1b      	ldrb	r3, [r3, #20]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d106      	bne.n	800fb2a <tcp_slowtmr+0x5e>
 800fb1c:	4b87      	ldr	r3, [pc, #540]	@ (800fd3c <tcp_slowtmr+0x270>)
 800fb1e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800fb22:	4989      	ldr	r1, [pc, #548]	@ (800fd48 <tcp_slowtmr+0x27c>)
 800fb24:	4887      	ldr	r0, [pc, #540]	@ (800fd44 <tcp_slowtmr+0x278>)
 800fb26:	f00a faf5 	bl	801a114 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb2c:	7d1b      	ldrb	r3, [r3, #20]
 800fb2e:	2b0a      	cmp	r3, #10
 800fb30:	d106      	bne.n	800fb40 <tcp_slowtmr+0x74>
 800fb32:	4b82      	ldr	r3, [pc, #520]	@ (800fd3c <tcp_slowtmr+0x270>)
 800fb34:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800fb38:	4984      	ldr	r1, [pc, #528]	@ (800fd4c <tcp_slowtmr+0x280>)
 800fb3a:	4882      	ldr	r0, [pc, #520]	@ (800fd44 <tcp_slowtmr+0x278>)
 800fb3c:	f00a faea 	bl	801a114 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb42:	7f9a      	ldrb	r2, [r3, #30]
 800fb44:	4b7b      	ldr	r3, [pc, #492]	@ (800fd34 <tcp_slowtmr+0x268>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d105      	bne.n	800fb58 <tcp_slowtmr+0x8c>
      prev = pcb;
 800fb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800fb56:	e25c      	b.n	8010012 <tcp_slowtmr+0x546>
    pcb->last_timer = tcp_timer_ctr;
 800fb58:	4b76      	ldr	r3, [pc, #472]	@ (800fd34 <tcp_slowtmr+0x268>)
 800fb5a:	781a      	ldrb	r2, [r3, #0]
 800fb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	2b02      	cmp	r3, #2
 800fb72:	d10a      	bne.n	800fb8a <tcp_slowtmr+0xbe>
 800fb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb7a:	2b05      	cmp	r3, #5
 800fb7c:	d905      	bls.n	800fb8a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800fb7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb82:	3301      	adds	r3, #1
 800fb84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800fb88:	e11e      	b.n	800fdc8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fb90:	2b0b      	cmp	r3, #11
 800fb92:	d905      	bls.n	800fba0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800fb94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fb9e:	e113      	b.n	800fdc8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800fba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d075      	beq.n	800fc96 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d006      	beq.n	800fbc0 <tcp_slowtmr+0xf4>
 800fbb2:	4b62      	ldr	r3, [pc, #392]	@ (800fd3c <tcp_slowtmr+0x270>)
 800fbb4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800fbb8:	4965      	ldr	r1, [pc, #404]	@ (800fd50 <tcp_slowtmr+0x284>)
 800fbba:	4862      	ldr	r0, [pc, #392]	@ (800fd44 <tcp_slowtmr+0x278>)
 800fbbc:	f00a faaa 	bl	801a114 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d106      	bne.n	800fbd6 <tcp_slowtmr+0x10a>
 800fbc8:	4b5c      	ldr	r3, [pc, #368]	@ (800fd3c <tcp_slowtmr+0x270>)
 800fbca:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800fbce:	4961      	ldr	r1, [pc, #388]	@ (800fd54 <tcp_slowtmr+0x288>)
 800fbd0:	485c      	ldr	r0, [pc, #368]	@ (800fd44 <tcp_slowtmr+0x278>)
 800fbd2:	f00a fa9f 	bl	801a114 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd8:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800fbdc:	2b0b      	cmp	r3, #11
 800fbde:	d905      	bls.n	800fbec <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800fbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fbea:	e0ed      	b.n	800fdc8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbee:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	4a58      	ldr	r2, [pc, #352]	@ (800fd58 <tcp_slowtmr+0x28c>)
 800fbf6:	5cd3      	ldrb	r3, [r2, r3]
 800fbf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbfc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800fc00:	7c7a      	ldrb	r2, [r7, #17]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d907      	bls.n	800fc16 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800fc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc08:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc12:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800fc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc18:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800fc1c:	7c7a      	ldrb	r2, [r7, #17]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	f200 80d2 	bhi.w	800fdc8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800fc24:	2301      	movs	r3, #1
 800fc26:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800fc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d108      	bne.n	800fc44 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fc32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc34:	f004 fdce 	bl	80147d4 <tcp_zero_window_probe>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d014      	beq.n	800fc68 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800fc3e:	2300      	movs	r3, #0
 800fc40:	623b      	str	r3, [r7, #32]
 800fc42:	e011      	b.n	800fc68 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc4e:	f003 fc61 	bl	8013514 <tcp_split_unsent_seg>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d107      	bne.n	800fc68 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800fc58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc5a:	f003 fee5 	bl	8013a28 <tcp_output>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d101      	bne.n	800fc68 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800fc64:	2300      	movs	r3, #0
 800fc66:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 80ac 	beq.w	800fdc8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800fc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc7a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800fc7e:	2b06      	cmp	r3, #6
 800fc80:	f200 80a2 	bhi.w	800fdc8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800fc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc86:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc90:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800fc94:	e098      	b.n	800fdc8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	db0f      	blt.n	800fcc0 <tcp_slowtmr+0x1f4>
 800fca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fca6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d008      	beq.n	800fcc0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800fcae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	b21a      	sxth	r2, r3
 800fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcbe:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800fcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800fcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800fccc:	429a      	cmp	r2, r3
 800fcce:	db7b      	blt.n	800fdc8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fcd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fcd2:	f004 f9b1 	bl	8014038 <tcp_rexmit_rto_prepare>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d007      	beq.n	800fcec <tcp_slowtmr+0x220>
 800fcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d171      	bne.n	800fdc8 <tcp_slowtmr+0x2fc>
 800fce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d06d      	beq.n	800fdc8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800fcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcee:	7d1b      	ldrb	r3, [r3, #20]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d03a      	beq.n	800fd6a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fcfa:	2b0c      	cmp	r3, #12
 800fcfc:	bf28      	it	cs
 800fcfe:	230c      	movcs	r3, #12
 800fd00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fd08:	10db      	asrs	r3, r3, #3
 800fd0a:	b21b      	sxth	r3, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fd14:	4413      	add	r3, r2
 800fd16:	7efa      	ldrb	r2, [r7, #27]
 800fd18:	4910      	ldr	r1, [pc, #64]	@ (800fd5c <tcp_slowtmr+0x290>)
 800fd1a:	5c8a      	ldrb	r2, [r1, r2]
 800fd1c:	4093      	lsls	r3, r2
 800fd1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800fd26:	4293      	cmp	r3, r2
 800fd28:	dc1a      	bgt.n	800fd60 <tcp_slowtmr+0x294>
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	b21a      	sxth	r2, r3
 800fd2e:	e019      	b.n	800fd64 <tcp_slowtmr+0x298>
 800fd30:	2001766c 	.word	0x2001766c
 800fd34:	20017682 	.word	0x20017682
 800fd38:	20017678 	.word	0x20017678
 800fd3c:	0801cde8 	.word	0x0801cde8
 800fd40:	0801d12c 	.word	0x0801d12c
 800fd44:	0801ce2c 	.word	0x0801ce2c
 800fd48:	0801d158 	.word	0x0801d158
 800fd4c:	0801d184 	.word	0x0801d184
 800fd50:	0801d1b4 	.word	0x0801d1b4
 800fd54:	0801d1e8 	.word	0x0801d1e8
 800fd58:	08022ff4 	.word	0x08022ff4
 800fd5c:	08022fe4 	.word	0x08022fe4
 800fd60:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800fd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800fd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	bf28      	it	cs
 800fd80:	4613      	movcs	r3, r2
 800fd82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fd84:	8a7b      	ldrh	r3, [r7, #18]
 800fd86:	085b      	lsrs	r3, r3, #1
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800fd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d206      	bcs.n	800fdb0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800fdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800fdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800fdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800fdc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdc4:	f004 f9b2 	bl	801412c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800fdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdca:	7d1b      	ldrb	r3, [r3, #20]
 800fdcc:	2b06      	cmp	r3, #6
 800fdce:	d111      	bne.n	800fdf4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	8b5b      	ldrh	r3, [r3, #26]
 800fdd4:	f003 0310 	and.w	r3, r3, #16
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00b      	beq.n	800fdf4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fddc:	4b92      	ldr	r3, [pc, #584]	@ (8010028 <tcp_slowtmr+0x55c>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde2:	6a1b      	ldr	r3, [r3, #32]
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	2b28      	cmp	r3, #40	@ 0x28
 800fde8:	d904      	bls.n	800fdf4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800fdea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdee:	3301      	adds	r3, #1
 800fdf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf6:	7a5b      	ldrb	r3, [r3, #9]
 800fdf8:	f003 0308 	and.w	r3, r3, #8
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d04c      	beq.n	800fe9a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800fe00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	d003      	beq.n	800fe10 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800fe08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fe0c:	2b07      	cmp	r3, #7
 800fe0e:	d144      	bne.n	800fe9a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe10:	4b85      	ldr	r3, [pc, #532]	@ (8010028 <tcp_slowtmr+0x55c>)
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe16:	6a1b      	ldr	r3, [r3, #32]
 800fe18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fe1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe20:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800fe24:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800fe28:	4980      	ldr	r1, [pc, #512]	@ (801002c <tcp_slowtmr+0x560>)
 800fe2a:	fba1 1303 	umull	r1, r3, r1, r3
 800fe2e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d90a      	bls.n	800fe4a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800fe34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe38:	3301      	adds	r3, #1
 800fe3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800fe3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe42:	3301      	adds	r3, #1
 800fe44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fe48:	e027      	b.n	800fe9a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe4a:	4b77      	ldr	r3, [pc, #476]	@ (8010028 <tcp_slowtmr+0x55c>)
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fe54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe56:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800fe5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5c:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800fe60:	4618      	mov	r0, r3
 800fe62:	4b73      	ldr	r3, [pc, #460]	@ (8010030 <tcp_slowtmr+0x564>)
 800fe64:	fb00 f303 	mul.w	r3, r0, r3
 800fe68:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fe6a:	4970      	ldr	r1, [pc, #448]	@ (801002c <tcp_slowtmr+0x560>)
 800fe6c:	fba1 1303 	umull	r1, r3, r1, r3
 800fe70:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d911      	bls.n	800fe9a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800fe76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe78:	f004 fc6c 	bl	8014754 <tcp_keepalive>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800fe82:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d107      	bne.n	800fe9a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800fe8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8c:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800fe90:	3301      	adds	r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 800fe9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9c:	7d1b      	ldrb	r3, [r3, #20]
 800fe9e:	2b03      	cmp	r3, #3
 800fea0:	d10b      	bne.n	800feba <tcp_slowtmr+0x3ee>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fea2:	4b61      	ldr	r3, [pc, #388]	@ (8010028 <tcp_slowtmr+0x55c>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	2b28      	cmp	r3, #40	@ 0x28
 800feae:	d904      	bls.n	800feba <tcp_slowtmr+0x3ee>
        ++pcb_remove;
 800feb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800feb4:	3301      	adds	r3, #1
 800feb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800feba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800febc:	7d1b      	ldrb	r3, [r3, #20]
 800febe:	2b09      	cmp	r3, #9
 800fec0:	d10b      	bne.n	800feda <tcp_slowtmr+0x40e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fec2:	4b59      	ldr	r3, [pc, #356]	@ (8010028 <tcp_slowtmr+0x55c>)
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	2bf0      	cmp	r3, #240	@ 0xf0
 800fece:	d904      	bls.n	800feda <tcp_slowtmr+0x40e>
        ++pcb_remove;
 800fed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fed4:	3301      	adds	r3, #1
 800fed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800feda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d060      	beq.n	800ffa4 <tcp_slowtmr+0x4d8>
      tcp_err_fn err_fn = pcb->errf;
 800fee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fee8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800feea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800feec:	f000 fc9e 	bl	801082c <tcp_pcb_purge>
      if (prev != NULL) {
 800fef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d010      	beq.n	800ff18 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fef6:	4b4f      	ldr	r3, [pc, #316]	@ (8010034 <tcp_slowtmr+0x568>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d106      	bne.n	800ff0e <tcp_slowtmr+0x442>
 800ff00:	4b4d      	ldr	r3, [pc, #308]	@ (8010038 <tcp_slowtmr+0x56c>)
 800ff02:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ff06:	494d      	ldr	r1, [pc, #308]	@ (801003c <tcp_slowtmr+0x570>)
 800ff08:	484d      	ldr	r0, [pc, #308]	@ (8010040 <tcp_slowtmr+0x574>)
 800ff0a:	f00a f903 	bl	801a114 <iprintf>
        prev->next = pcb->next;
 800ff0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff10:	68da      	ldr	r2, [r3, #12]
 800ff12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff14:	60da      	str	r2, [r3, #12]
 800ff16:	e00f      	b.n	800ff38 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ff18:	4b46      	ldr	r3, [pc, #280]	@ (8010034 <tcp_slowtmr+0x568>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d006      	beq.n	800ff30 <tcp_slowtmr+0x464>
 800ff22:	4b45      	ldr	r3, [pc, #276]	@ (8010038 <tcp_slowtmr+0x56c>)
 800ff24:	f240 5271 	movw	r2, #1393	@ 0x571
 800ff28:	4946      	ldr	r1, [pc, #280]	@ (8010044 <tcp_slowtmr+0x578>)
 800ff2a:	4845      	ldr	r0, [pc, #276]	@ (8010040 <tcp_slowtmr+0x574>)
 800ff2c:	f00a f8f2 	bl	801a114 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ff30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	4a3f      	ldr	r2, [pc, #252]	@ (8010034 <tcp_slowtmr+0x568>)
 800ff36:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ff38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d013      	beq.n	800ff68 <tcp_slowtmr+0x49c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ff40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff42:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ff44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff46:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ff48:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ff4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff50:	8ad2      	ldrh	r2, [r2, #22]
 800ff52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff54:	8b09      	ldrh	r1, [r1, #24]
 800ff56:	9102      	str	r1, [sp, #8]
 800ff58:	9201      	str	r2, [sp, #4]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	462b      	mov	r3, r5
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4601      	mov	r1, r0
 800ff62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff64:	f004 fb42 	bl	80145ec <tcp_rst>
      err_arg = pcb->callback_arg;
 800ff68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ff6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ff74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff76:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ff78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ff7e:	6838      	ldr	r0, [r7, #0]
 800ff80:	f7fe fef2 	bl	800ed68 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ff84:	4b30      	ldr	r3, [pc, #192]	@ (8010048 <tcp_slowtmr+0x57c>)
 800ff86:	2200      	movs	r2, #0
 800ff88:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d004      	beq.n	800ff9a <tcp_slowtmr+0x4ce>
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f06f 010c 	mvn.w	r1, #12
 800ff96:	68b8      	ldr	r0, [r7, #8]
 800ff98:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ff9a:	4b2b      	ldr	r3, [pc, #172]	@ (8010048 <tcp_slowtmr+0x57c>)
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d037      	beq.n	8010012 <tcp_slowtmr+0x546>
        goto tcp_slowtmr_start;
 800ffa2:	e5a6      	b.n	800faf2 <tcp_slowtmr+0x26>
      prev = pcb;
 800ffa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ffa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ffae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb0:	7f1b      	ldrb	r3, [r3, #28]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ffba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffbc:	7f1a      	ldrb	r2, [r3, #28]
 800ffbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc0:	7f5b      	ldrb	r3, [r3, #29]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d325      	bcc.n	8010012 <tcp_slowtmr+0x546>
        prev->polltmr = 0;
 800ffc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc8:	2200      	movs	r2, #0
 800ffca:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ffcc:	4b1e      	ldr	r3, [pc, #120]	@ (8010048 <tcp_slowtmr+0x57c>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ffd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00b      	beq.n	800fff4 <tcp_slowtmr+0x528>
 800ffdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ffe4:	6912      	ldr	r2, [r2, #16]
 800ffe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ffe8:	4610      	mov	r0, r2
 800ffea:	4798      	blx	r3
 800ffec:	4603      	mov	r3, r0
 800ffee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fff2:	e002      	b.n	800fffa <tcp_slowtmr+0x52e>
 800fff4:	2300      	movs	r3, #0
 800fff6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800fffa:	4b13      	ldr	r3, [pc, #76]	@ (8010048 <tcp_slowtmr+0x57c>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f47f ad76 	bne.w	800faf0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010004:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010008:	2b00      	cmp	r3, #0
 801000a:	d102      	bne.n	8010012 <tcp_slowtmr+0x546>
          tcp_output(prev);
 801000c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801000e:	f003 fd0b 	bl	8013a28 <tcp_output>
  while (pcb != NULL) {
 8010012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010014:	2b00      	cmp	r3, #0
 8010016:	f47f ad72 	bne.w	800fafe <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801001a:	2300      	movs	r3, #0
 801001c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801001e:	4b0b      	ldr	r3, [pc, #44]	@ (801004c <tcp_slowtmr+0x580>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010024:	e067      	b.n	80100f6 <tcp_slowtmr+0x62a>
 8010026:	bf00      	nop
 8010028:	2001766c 	.word	0x2001766c
 801002c:	10624dd3 	.word	0x10624dd3
 8010030:	000124f8 	.word	0x000124f8
 8010034:	20017678 	.word	0x20017678
 8010038:	0801cde8 	.word	0x0801cde8
 801003c:	0801d220 	.word	0x0801d220
 8010040:	0801ce2c 	.word	0x0801ce2c
 8010044:	0801d24c 	.word	0x0801d24c
 8010048:	20017680 	.word	0x20017680
 801004c:	2001767c 	.word	0x2001767c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010052:	7d1b      	ldrb	r3, [r3, #20]
 8010054:	2b0a      	cmp	r3, #10
 8010056:	d006      	beq.n	8010066 <tcp_slowtmr+0x59a>
 8010058:	4b2b      	ldr	r3, [pc, #172]	@ (8010108 <tcp_slowtmr+0x63c>)
 801005a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801005e:	492b      	ldr	r1, [pc, #172]	@ (801010c <tcp_slowtmr+0x640>)
 8010060:	482b      	ldr	r0, [pc, #172]	@ (8010110 <tcp_slowtmr+0x644>)
 8010062:	f00a f857 	bl	801a114 <iprintf>
    pcb_remove = 0;
 8010066:	2300      	movs	r3, #0
 8010068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801006c:	4b29      	ldr	r3, [pc, #164]	@ (8010114 <tcp_slowtmr+0x648>)
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010072:	6a1b      	ldr	r3, [r3, #32]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	2bf0      	cmp	r3, #240	@ 0xf0
 8010078:	d904      	bls.n	8010084 <tcp_slowtmr+0x5b8>
      ++pcb_remove;
 801007a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801007e:	3301      	adds	r3, #1
 8010080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010088:	2b00      	cmp	r3, #0
 801008a:	d02f      	beq.n	80100ec <tcp_slowtmr+0x620>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801008c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801008e:	f000 fbcd 	bl	801082c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010094:	2b00      	cmp	r3, #0
 8010096:	d010      	beq.n	80100ba <tcp_slowtmr+0x5ee>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010098:	4b1f      	ldr	r3, [pc, #124]	@ (8010118 <tcp_slowtmr+0x64c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801009e:	429a      	cmp	r2, r3
 80100a0:	d106      	bne.n	80100b0 <tcp_slowtmr+0x5e4>
 80100a2:	4b19      	ldr	r3, [pc, #100]	@ (8010108 <tcp_slowtmr+0x63c>)
 80100a4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80100a8:	491c      	ldr	r1, [pc, #112]	@ (801011c <tcp_slowtmr+0x650>)
 80100aa:	4819      	ldr	r0, [pc, #100]	@ (8010110 <tcp_slowtmr+0x644>)
 80100ac:	f00a f832 	bl	801a114 <iprintf>
        prev->next = pcb->next;
 80100b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b2:	68da      	ldr	r2, [r3, #12]
 80100b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b6:	60da      	str	r2, [r3, #12]
 80100b8:	e00f      	b.n	80100da <tcp_slowtmr+0x60e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80100ba:	4b17      	ldr	r3, [pc, #92]	@ (8010118 <tcp_slowtmr+0x64c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d006      	beq.n	80100d2 <tcp_slowtmr+0x606>
 80100c4:	4b10      	ldr	r3, [pc, #64]	@ (8010108 <tcp_slowtmr+0x63c>)
 80100c6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80100ca:	4915      	ldr	r1, [pc, #84]	@ (8010120 <tcp_slowtmr+0x654>)
 80100cc:	4810      	ldr	r0, [pc, #64]	@ (8010110 <tcp_slowtmr+0x644>)
 80100ce:	f00a f821 	bl	801a114 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80100d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	4a10      	ldr	r2, [pc, #64]	@ (8010118 <tcp_slowtmr+0x64c>)
 80100d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80100de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80100e4:	69f8      	ldr	r0, [r7, #28]
 80100e6:	f7fe fe3f 	bl	800ed68 <tcp_free>
 80100ea:	e004      	b.n	80100f6 <tcp_slowtmr+0x62a>
    } else {
      prev = pcb;
 80100ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80100f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80100f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1a9      	bne.n	8010050 <tcp_slowtmr+0x584>
    }
  }
}
 80100fc:	bf00      	nop
 80100fe:	bf00      	nop
 8010100:	3730      	adds	r7, #48	@ 0x30
 8010102:	46bd      	mov	sp, r7
 8010104:	bdb0      	pop	{r4, r5, r7, pc}
 8010106:	bf00      	nop
 8010108:	0801cde8 	.word	0x0801cde8
 801010c:	0801d278 	.word	0x0801d278
 8010110:	0801ce2c 	.word	0x0801ce2c
 8010114:	2001766c 	.word	0x2001766c
 8010118:	2001767c 	.word	0x2001767c
 801011c:	0801d2a8 	.word	0x0801d2a8
 8010120:	0801d2d0 	.word	0x0801d2d0

08010124 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801012a:	4b2d      	ldr	r3, [pc, #180]	@ (80101e0 <tcp_fasttmr+0xbc>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	3301      	adds	r3, #1
 8010130:	b2da      	uxtb	r2, r3
 8010132:	4b2b      	ldr	r3, [pc, #172]	@ (80101e0 <tcp_fasttmr+0xbc>)
 8010134:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010136:	4b2b      	ldr	r3, [pc, #172]	@ (80101e4 <tcp_fasttmr+0xc0>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801013c:	e048      	b.n	80101d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7f9a      	ldrb	r2, [r3, #30]
 8010142:	4b27      	ldr	r3, [pc, #156]	@ (80101e0 <tcp_fasttmr+0xbc>)
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	429a      	cmp	r2, r3
 8010148:	d03f      	beq.n	80101ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801014a:	4b25      	ldr	r3, [pc, #148]	@ (80101e0 <tcp_fasttmr+0xbc>)
 801014c:	781a      	ldrb	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	8b5b      	ldrh	r3, [r3, #26]
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	2b00      	cmp	r3, #0
 801015c:	d010      	beq.n	8010180 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8b5b      	ldrh	r3, [r3, #26]
 8010162:	f043 0302 	orr.w	r3, r3, #2
 8010166:	b29a      	uxth	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f003 fc5b 	bl	8013a28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	8b5b      	ldrh	r3, [r3, #26]
 8010176:	f023 0303 	bic.w	r3, r3, #3
 801017a:	b29a      	uxth	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8b5b      	ldrh	r3, [r3, #26]
 8010184:	f003 0308 	and.w	r3, r3, #8
 8010188:	2b00      	cmp	r3, #0
 801018a:	d009      	beq.n	80101a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	8b5b      	ldrh	r3, [r3, #26]
 8010190:	f023 0308 	bic.w	r3, r3, #8
 8010194:	b29a      	uxth	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7fe ff78 	bl	800f090 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00a      	beq.n	80101c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80101ae:	4b0e      	ldr	r3, [pc, #56]	@ (80101e8 <tcp_fasttmr+0xc4>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f819 	bl	80101ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80101ba:	4b0b      	ldr	r3, [pc, #44]	@ (80101e8 <tcp_fasttmr+0xc4>)
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d000      	beq.n	80101c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80101c2:	e7b8      	b.n	8010136 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	607b      	str	r3, [r7, #4]
 80101c8:	e002      	b.n	80101d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1b3      	bne.n	801013e <tcp_fasttmr+0x1a>
    }
  }
}
 80101d6:	bf00      	nop
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20017682 	.word	0x20017682
 80101e4:	20017678 	.word	0x20017678
 80101e8:	20017680 	.word	0x20017680

080101ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80101ec:	b590      	push	{r4, r7, lr}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d109      	bne.n	801020e <tcp_process_refused_data+0x22>
 80101fa:	4b38      	ldr	r3, [pc, #224]	@ (80102dc <tcp_process_refused_data+0xf0>)
 80101fc:	f240 6209 	movw	r2, #1545	@ 0x609
 8010200:	4937      	ldr	r1, [pc, #220]	@ (80102e0 <tcp_process_refused_data+0xf4>)
 8010202:	4838      	ldr	r0, [pc, #224]	@ (80102e4 <tcp_process_refused_data+0xf8>)
 8010204:	f009 ff86 	bl	801a114 <iprintf>
 8010208:	f06f 030f 	mvn.w	r3, #15
 801020c:	e061      	b.n	80102d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010212:	7b5b      	ldrb	r3, [r3, #13]
 8010214:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801021a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00b      	beq.n	8010244 <tcp_process_refused_data+0x58>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6918      	ldr	r0, [r3, #16]
 8010236:	2300      	movs	r3, #0
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	47a0      	blx	r4
 801023e:	4603      	mov	r3, r0
 8010240:	73fb      	strb	r3, [r7, #15]
 8010242:	e007      	b.n	8010254 <tcp_process_refused_data+0x68>
 8010244:	2300      	movs	r3, #0
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	6879      	ldr	r1, [r7, #4]
 801024a:	2000      	movs	r0, #0
 801024c:	f000 f87a 	bl	8010344 <tcp_recv_null>
 8010250:	4603      	mov	r3, r0
 8010252:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d12b      	bne.n	80102b4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801025c:	7bbb      	ldrb	r3, [r7, #14]
 801025e:	f003 0320 	and.w	r3, r3, #32
 8010262:	2b00      	cmp	r3, #0
 8010264:	d034      	beq.n	80102d0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801026a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801026e:	4293      	cmp	r3, r2
 8010270:	d005      	beq.n	801027e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010276:	3301      	adds	r3, #1
 8010278:	b29a      	uxth	r2, r3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00b      	beq.n	80102a0 <tcp_process_refused_data+0xb4>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6918      	ldr	r0, [r3, #16]
 8010292:	2300      	movs	r3, #0
 8010294:	2200      	movs	r2, #0
 8010296:	6879      	ldr	r1, [r7, #4]
 8010298:	47a0      	blx	r4
 801029a:	4603      	mov	r3, r0
 801029c:	73fb      	strb	r3, [r7, #15]
 801029e:	e001      	b.n	80102a4 <tcp_process_refused_data+0xb8>
 80102a0:	2300      	movs	r3, #0
 80102a2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80102a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102a8:	f113 0f0d 	cmn.w	r3, #13
 80102ac:	d110      	bne.n	80102d0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80102ae:	f06f 030c 	mvn.w	r3, #12
 80102b2:	e00e      	b.n	80102d2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80102b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102b8:	f113 0f0d 	cmn.w	r3, #13
 80102bc:	d102      	bne.n	80102c4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80102be:	f06f 030c 	mvn.w	r3, #12
 80102c2:	e006      	b.n	80102d2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 80102ca:	f06f 0304 	mvn.w	r3, #4
 80102ce:	e000      	b.n	80102d2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd90      	pop	{r4, r7, pc}
 80102da:	bf00      	nop
 80102dc:	0801cde8 	.word	0x0801cde8
 80102e0:	0801d2f8 	.word	0x0801d2f8
 80102e4:	0801ce2c 	.word	0x0801ce2c

080102e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80102f0:	e007      	b.n	8010302 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f80a 	bl	8010312 <tcp_seg_free>
    seg = next;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1f4      	bne.n	80102f2 <tcp_segs_free+0xa>
  }
}
 8010308:	bf00      	nop
 801030a:	bf00      	nop
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b082      	sub	sp, #8
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00c      	beq.n	801033a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	f7fe fa5f 	bl	800e7f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010332:	6879      	ldr	r1, [r7, #4]
 8010334:	2003      	movs	r0, #3
 8010336:	f7fd fc05 	bl	800db44 <memp_free>
  }
}
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
	...

08010344 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
 8010350:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d109      	bne.n	801036c <tcp_recv_null+0x28>
 8010358:	4b12      	ldr	r3, [pc, #72]	@ (80103a4 <tcp_recv_null+0x60>)
 801035a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801035e:	4912      	ldr	r1, [pc, #72]	@ (80103a8 <tcp_recv_null+0x64>)
 8010360:	4812      	ldr	r0, [pc, #72]	@ (80103ac <tcp_recv_null+0x68>)
 8010362:	f009 fed7 	bl	801a114 <iprintf>
 8010366:	f06f 030f 	mvn.w	r3, #15
 801036a:	e016      	b.n	801039a <tcp_recv_null+0x56>

  if (p != NULL) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d009      	beq.n	8010386 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	891b      	ldrh	r3, [r3, #8]
 8010376:	4619      	mov	r1, r3
 8010378:	68b8      	ldr	r0, [r7, #8]
 801037a:	f7ff f9f7 	bl	800f76c <tcp_recved>
    pbuf_free(p);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7fe fa36 	bl	800e7f0 <pbuf_free>
 8010384:	e008      	b.n	8010398 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801038e:	68b8      	ldr	r0, [r7, #8]
 8010390:	f7fe fee8 	bl	800f164 <tcp_close>
 8010394:	4603      	mov	r3, r0
 8010396:	e000      	b.n	801039a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3710      	adds	r7, #16
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	0801cde8 	.word	0x0801cde8
 80103a8:	0801d33c 	.word	0x0801d33c
 80103ac:	0801ce2c 	.word	0x0801ce2c

080103b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80103ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	db01      	blt.n	80103c6 <tcp_kill_prio+0x16>
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	e000      	b.n	80103c8 <tcp_kill_prio+0x18>
 80103c6:	237f      	movs	r3, #127	@ 0x7f
 80103c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80103ca:	7afb      	ldrb	r3, [r7, #11]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d034      	beq.n	801043a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80103d0:	7afb      	ldrb	r3, [r7, #11]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80103d6:	2300      	movs	r3, #0
 80103d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103de:	4b19      	ldr	r3, [pc, #100]	@ (8010444 <tcp_kill_prio+0x94>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	617b      	str	r3, [r7, #20]
 80103e4:	e01f      	b.n	8010426 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	7d5b      	ldrb	r3, [r3, #21]
 80103ea:	7afa      	ldrb	r2, [r7, #11]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d80c      	bhi.n	801040a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80103f4:	7afa      	ldrb	r2, [r7, #11]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d112      	bne.n	8010420 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80103fa:	4b13      	ldr	r3, [pc, #76]	@ (8010448 <tcp_kill_prio+0x98>)
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	6a1b      	ldr	r3, [r3, #32]
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	429a      	cmp	r2, r3
 8010408:	d80a      	bhi.n	8010420 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801040a:	4b0f      	ldr	r3, [pc, #60]	@ (8010448 <tcp_kill_prio+0x98>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	6a1b      	ldr	r3, [r3, #32]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	7d5b      	ldrb	r3, [r3, #21]
 801041e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	617b      	str	r3, [r7, #20]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1dc      	bne.n	80103e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010432:	6938      	ldr	r0, [r7, #16]
 8010434:	f7fe ffd2 	bl	800f3dc <tcp_abort>
 8010438:	e000      	b.n	801043c <tcp_kill_prio+0x8c>
    return;
 801043a:	bf00      	nop
  }
}
 801043c:	3718      	adds	r7, #24
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	20017678 	.word	0x20017678
 8010448:	2001766c 	.word	0x2001766c

0801044c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	2b08      	cmp	r3, #8
 801045a:	d009      	beq.n	8010470 <tcp_kill_state+0x24>
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	2b09      	cmp	r3, #9
 8010460:	d006      	beq.n	8010470 <tcp_kill_state+0x24>
 8010462:	4b1a      	ldr	r3, [pc, #104]	@ (80104cc <tcp_kill_state+0x80>)
 8010464:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010468:	4919      	ldr	r1, [pc, #100]	@ (80104d0 <tcp_kill_state+0x84>)
 801046a:	481a      	ldr	r0, [pc, #104]	@ (80104d4 <tcp_kill_state+0x88>)
 801046c:	f009 fe52 	bl	801a114 <iprintf>

  inactivity = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010474:	2300      	movs	r3, #0
 8010476:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010478:	4b17      	ldr	r3, [pc, #92]	@ (80104d8 <tcp_kill_state+0x8c>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	e017      	b.n	80104b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	7d1b      	ldrb	r3, [r3, #20]
 8010484:	79fa      	ldrb	r2, [r7, #7]
 8010486:	429a      	cmp	r2, r3
 8010488:	d10f      	bne.n	80104aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801048a:	4b14      	ldr	r3, [pc, #80]	@ (80104dc <tcp_kill_state+0x90>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	429a      	cmp	r2, r3
 8010498:	d807      	bhi.n	80104aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801049a:	4b10      	ldr	r3, [pc, #64]	@ (80104dc <tcp_kill_state+0x90>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1e4      	bne.n	8010480 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d003      	beq.n	80104c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80104bc:	2100      	movs	r1, #0
 80104be:	6938      	ldr	r0, [r7, #16]
 80104c0:	f7fe fed8 	bl	800f274 <tcp_abandon>
  }
}
 80104c4:	bf00      	nop
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	0801cde8 	.word	0x0801cde8
 80104d0:	0801d358 	.word	0x0801d358
 80104d4:	0801ce2c 	.word	0x0801ce2c
 80104d8:	20017678 	.word	0x20017678
 80104dc:	2001766c 	.word	0x2001766c

080104e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80104e6:	2300      	movs	r3, #0
 80104e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ee:	4b12      	ldr	r3, [pc, #72]	@ (8010538 <tcp_kill_timewait+0x58>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	60fb      	str	r3, [r7, #12]
 80104f4:	e012      	b.n	801051c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80104f6:	4b11      	ldr	r3, [pc, #68]	@ (801053c <tcp_kill_timewait+0x5c>)
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6a1b      	ldr	r3, [r3, #32]
 80104fe:	1ad3      	subs	r3, r2, r3
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	429a      	cmp	r2, r3
 8010504:	d807      	bhi.n	8010516 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010506:	4b0d      	ldr	r3, [pc, #52]	@ (801053c <tcp_kill_timewait+0x5c>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	6a1b      	ldr	r3, [r3, #32]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	60fb      	str	r3, [r7, #12]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e9      	bne.n	80104f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010528:	68b8      	ldr	r0, [r7, #8]
 801052a:	f7fe ff57 	bl	800f3dc <tcp_abort>
  }
}
 801052e:	bf00      	nop
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	2001767c 	.word	0x2001767c
 801053c:	2001766c 	.word	0x2001766c

08010540 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010546:	4b10      	ldr	r3, [pc, #64]	@ (8010588 <tcp_handle_closepend+0x48>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801054c:	e014      	b.n	8010578 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8b5b      	ldrh	r3, [r3, #26]
 8010558:	f003 0308 	and.w	r3, r3, #8
 801055c:	2b00      	cmp	r3, #0
 801055e:	d009      	beq.n	8010574 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	8b5b      	ldrh	r3, [r3, #26]
 8010564:	f023 0308 	bic.w	r3, r3, #8
 8010568:	b29a      	uxth	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7fe fd8e 	bl	800f090 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1e7      	bne.n	801054e <tcp_handle_closepend+0xe>
  }
}
 801057e:	bf00      	nop
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20017678 	.word	0x20017678

0801058c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	4603      	mov	r3, r0
 8010594:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010596:	2001      	movs	r0, #1
 8010598:	f7fd fa82 	bl	800daa0 <memp_malloc>
 801059c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d126      	bne.n	80105f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80105a4:	f7ff ffcc 	bl	8010540 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80105a8:	f7ff ff9a 	bl	80104e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105ac:	2001      	movs	r0, #1
 80105ae:	f7fd fa77 	bl	800daa0 <memp_malloc>
 80105b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d11b      	bne.n	80105f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80105ba:	2009      	movs	r0, #9
 80105bc:	f7ff ff46 	bl	801044c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105c0:	2001      	movs	r0, #1
 80105c2:	f7fd fa6d 	bl	800daa0 <memp_malloc>
 80105c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d111      	bne.n	80105f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80105ce:	2008      	movs	r0, #8
 80105d0:	f7ff ff3c 	bl	801044c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105d4:	2001      	movs	r0, #1
 80105d6:	f7fd fa63 	bl	800daa0 <memp_malloc>
 80105da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d107      	bne.n	80105f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80105e2:	79fb      	ldrb	r3, [r7, #7]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff fee3 	bl	80103b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105ea:	2001      	movs	r0, #1
 80105ec:	f7fd fa58 	bl	800daa0 <memp_malloc>
 80105f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d03f      	beq.n	8010678 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80105f8:	2298      	movs	r2, #152	@ 0x98
 80105fa:	2100      	movs	r1, #0
 80105fc:	68f8      	ldr	r0, [r7, #12]
 80105fe:	f009 ff53 	bl	801a4a8 <memset>
    pcb->prio = prio;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	79fa      	ldrb	r2, [r7, #7]
 8010606:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801060e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010618:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	22ff      	movs	r2, #255	@ 0xff
 8010626:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801062e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2206      	movs	r2, #6
 8010634:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2206      	movs	r2, #6
 801063c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010644:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2201      	movs	r2, #1
 801064a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801064e:	4b0d      	ldr	r3, [pc, #52]	@ (8010684 <tcp_alloc+0xf8>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010656:	4b0c      	ldr	r3, [pc, #48]	@ (8010688 <tcp_alloc+0xfc>)
 8010658:	781a      	ldrb	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010664:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4a08      	ldr	r2, [pc, #32]	@ (801068c <tcp_alloc+0x100>)
 801066c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	4a07      	ldr	r2, [pc, #28]	@ (8010690 <tcp_alloc+0x104>)
 8010674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010678:	68fb      	ldr	r3, [r7, #12]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	2001766c 	.word	0x2001766c
 8010688:	20017682 	.word	0x20017682
 801068c:	08010345 	.word	0x08010345
 8010690:	006ddd00 	.word	0x006ddd00

08010694 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801069e:	2040      	movs	r0, #64	@ 0x40
 80106a0:	f7ff ff74 	bl	801058c <tcp_alloc>
 80106a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80106a6:	68fb      	ldr	r3, [r7, #12]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d002      	beq.n	80106c6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	683a      	ldr	r2, [r7, #0]
 80106c4:	611a      	str	r2, [r3, #16]
  }
}
 80106c6:	bf00      	nop
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
	...

080106d4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00e      	beq.n	8010702 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d106      	bne.n	80106fa <tcp_recv+0x26>
 80106ec:	4b07      	ldr	r3, [pc, #28]	@ (801070c <tcp_recv+0x38>)
 80106ee:	f240 72df 	movw	r2, #2015	@ 0x7df
 80106f2:	4907      	ldr	r1, [pc, #28]	@ (8010710 <tcp_recv+0x3c>)
 80106f4:	4807      	ldr	r0, [pc, #28]	@ (8010714 <tcp_recv+0x40>)
 80106f6:	f009 fd0d 	bl	801a114 <iprintf>
    pcb->recv = recv;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801cde8 	.word	0x0801cde8
 8010710:	0801d368 	.word	0x0801d368
 8010714:	0801ce2c 	.word	0x0801ce2c

08010718 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00d      	beq.n	8010744 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	7d1b      	ldrb	r3, [r3, #20]
 801072c:	2b01      	cmp	r3, #1
 801072e:	d106      	bne.n	801073e <tcp_sent+0x26>
 8010730:	4b06      	ldr	r3, [pc, #24]	@ (801074c <tcp_sent+0x34>)
 8010732:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8010736:	4906      	ldr	r1, [pc, #24]	@ (8010750 <tcp_sent+0x38>)
 8010738:	4806      	ldr	r0, [pc, #24]	@ (8010754 <tcp_sent+0x3c>)
 801073a:	f009 fceb 	bl	801a114 <iprintf>
    pcb->sent = sent;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	683a      	ldr	r2, [r7, #0]
 8010742:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8010744:	bf00      	nop
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	0801cde8 	.word	0x0801cde8
 8010750:	0801d390 	.word	0x0801d390
 8010754:	0801ce2c 	.word	0x0801ce2c

08010758 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00e      	beq.n	8010786 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	7d1b      	ldrb	r3, [r3, #20]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d106      	bne.n	801077e <tcp_err+0x26>
 8010770:	4b07      	ldr	r3, [pc, #28]	@ (8010790 <tcp_err+0x38>)
 8010772:	f640 020d 	movw	r2, #2061	@ 0x80d
 8010776:	4907      	ldr	r1, [pc, #28]	@ (8010794 <tcp_err+0x3c>)
 8010778:	4807      	ldr	r0, [pc, #28]	@ (8010798 <tcp_err+0x40>)
 801077a:	f009 fccb 	bl	801a114 <iprintf>
    pcb->errf = err;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8010786:	bf00      	nop
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	0801cde8 	.word	0x0801cde8
 8010794:	0801d3b8 	.word	0x0801d3b8
 8010798:	0801ce2c 	.word	0x0801ce2c

0801079c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801079c:	b480      	push	{r7}
 801079e:	b085      	sub	sp, #20
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d008      	beq.n	80107be <tcp_accept+0x22>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	7d1b      	ldrb	r3, [r3, #20]
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d104      	bne.n	80107be <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	683a      	ldr	r2, [r7, #0]
 80107bc:	619a      	str	r2, [r3, #24]
  }
}
 80107be:	bf00      	nop
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
	...

080107cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	4613      	mov	r3, r2
 80107d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d107      	bne.n	80107f0 <tcp_poll+0x24>
 80107e0:	4b0e      	ldr	r3, [pc, #56]	@ (801081c <tcp_poll+0x50>)
 80107e2:	f640 023d 	movw	r2, #2109	@ 0x83d
 80107e6:	490e      	ldr	r1, [pc, #56]	@ (8010820 <tcp_poll+0x54>)
 80107e8:	480e      	ldr	r0, [pc, #56]	@ (8010824 <tcp_poll+0x58>)
 80107ea:	f009 fc93 	bl	801a114 <iprintf>
 80107ee:	e011      	b.n	8010814 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d106      	bne.n	8010806 <tcp_poll+0x3a>
 80107f8:	4b08      	ldr	r3, [pc, #32]	@ (801081c <tcp_poll+0x50>)
 80107fa:	f640 023e 	movw	r2, #2110	@ 0x83e
 80107fe:	490a      	ldr	r1, [pc, #40]	@ (8010828 <tcp_poll+0x5c>)
 8010800:	4808      	ldr	r0, [pc, #32]	@ (8010824 <tcp_poll+0x58>)
 8010802:	f009 fc87 	bl	801a114 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	68ba      	ldr	r2, [r7, #8]
 801080a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	79fa      	ldrb	r2, [r7, #7]
 8010812:	775a      	strb	r2, [r3, #29]
}
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	0801cde8 	.word	0x0801cde8
 8010820:	0801d3e0 	.word	0x0801d3e0
 8010824:	0801ce2c 	.word	0x0801ce2c
 8010828:	0801d3f8 	.word	0x0801d3f8

0801082c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d107      	bne.n	801084a <tcp_pcb_purge+0x1e>
 801083a:	4b1e      	ldr	r3, [pc, #120]	@ (80108b4 <tcp_pcb_purge+0x88>)
 801083c:	f640 0251 	movw	r2, #2129	@ 0x851
 8010840:	491d      	ldr	r1, [pc, #116]	@ (80108b8 <tcp_pcb_purge+0x8c>)
 8010842:	481e      	ldr	r0, [pc, #120]	@ (80108bc <tcp_pcb_purge+0x90>)
 8010844:	f009 fc66 	bl	801a114 <iprintf>
 8010848:	e030      	b.n	80108ac <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7d1b      	ldrb	r3, [r3, #20]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d02c      	beq.n	80108ac <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010856:	2b0a      	cmp	r3, #10
 8010858:	d028      	beq.n	80108ac <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801085e:	2b01      	cmp	r3, #1
 8010860:	d024      	beq.n	80108ac <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801086e:	4618      	mov	r0, r3
 8010870:	f7fd ffbe 	bl	800e7f0 <pbuf_free>
      pcb->refused_data = NULL;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010880:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff fd2e 	bl	80102e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010890:	4618      	mov	r0, r3
 8010892:	f7ff fd29 	bl	80102e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80108ac:	3708      	adds	r7, #8
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	0801cde8 	.word	0x0801cde8
 80108b8:	0801d418 	.word	0x0801d418
 80108bc:	0801ce2c 	.word	0x0801ce2c

080108c0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d106      	bne.n	80108de <tcp_pcb_remove+0x1e>
 80108d0:	4b38      	ldr	r3, [pc, #224]	@ (80109b4 <tcp_pcb_remove+0xf4>)
 80108d2:	f640 0283 	movw	r2, #2179	@ 0x883
 80108d6:	4938      	ldr	r1, [pc, #224]	@ (80109b8 <tcp_pcb_remove+0xf8>)
 80108d8:	4838      	ldr	r0, [pc, #224]	@ (80109bc <tcp_pcb_remove+0xfc>)
 80108da:	f009 fc1b 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d106      	bne.n	80108f2 <tcp_pcb_remove+0x32>
 80108e4:	4b33      	ldr	r3, [pc, #204]	@ (80109b4 <tcp_pcb_remove+0xf4>)
 80108e6:	f640 0284 	movw	r2, #2180	@ 0x884
 80108ea:	4935      	ldr	r1, [pc, #212]	@ (80109c0 <tcp_pcb_remove+0x100>)
 80108ec:	4833      	ldr	r0, [pc, #204]	@ (80109bc <tcp_pcb_remove+0xfc>)
 80108ee:	f009 fc11 	bl	801a114 <iprintf>

  TCP_RMV(pcblist, pcb);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d105      	bne.n	8010908 <tcp_pcb_remove+0x48>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68da      	ldr	r2, [r3, #12]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	601a      	str	r2, [r3, #0]
 8010906:	e013      	b.n	8010930 <tcp_pcb_remove+0x70>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	60fb      	str	r3, [r7, #12]
 801090e:	e00c      	b.n	801092a <tcp_pcb_remove+0x6a>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	d104      	bne.n	8010924 <tcp_pcb_remove+0x64>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	68da      	ldr	r2, [r3, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	60da      	str	r2, [r3, #12]
 8010922:	e005      	b.n	8010930 <tcp_pcb_remove+0x70>
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	60fb      	str	r3, [r7, #12]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1ef      	bne.n	8010910 <tcp_pcb_remove+0x50>
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2200      	movs	r2, #0
 8010934:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010936:	6838      	ldr	r0, [r7, #0]
 8010938:	f7ff ff78 	bl	801082c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	7d1b      	ldrb	r3, [r3, #20]
 8010940:	2b0a      	cmp	r3, #10
 8010942:	d013      	beq.n	801096c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010948:	2b01      	cmp	r3, #1
 801094a:	d00f      	beq.n	801096c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	8b5b      	ldrh	r3, [r3, #26]
 8010950:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010954:	2b00      	cmp	r3, #0
 8010956:	d009      	beq.n	801096c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	8b5b      	ldrh	r3, [r3, #26]
 801095c:	f043 0302 	orr.w	r3, r3, #2
 8010960:	b29a      	uxth	r2, r3
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010966:	6838      	ldr	r0, [r7, #0]
 8010968:	f003 f85e 	bl	8013a28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	7d1b      	ldrb	r3, [r3, #20]
 8010970:	2b01      	cmp	r3, #1
 8010972:	d015      	beq.n	80109a0 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010978:	2b00      	cmp	r3, #0
 801097a:	d006      	beq.n	801098a <tcp_pcb_remove+0xca>
 801097c:	4b0d      	ldr	r3, [pc, #52]	@ (80109b4 <tcp_pcb_remove+0xf4>)
 801097e:	f640 0293 	movw	r2, #2195	@ 0x893
 8010982:	4910      	ldr	r1, [pc, #64]	@ (80109c4 <tcp_pcb_remove+0x104>)
 8010984:	480d      	ldr	r0, [pc, #52]	@ (80109bc <tcp_pcb_remove+0xfc>)
 8010986:	f009 fbc5 	bl	801a114 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801098e:	2b00      	cmp	r3, #0
 8010990:	d006      	beq.n	80109a0 <tcp_pcb_remove+0xe0>
 8010992:	4b08      	ldr	r3, [pc, #32]	@ (80109b4 <tcp_pcb_remove+0xf4>)
 8010994:	f640 0294 	movw	r2, #2196	@ 0x894
 8010998:	490b      	ldr	r1, [pc, #44]	@ (80109c8 <tcp_pcb_remove+0x108>)
 801099a:	4808      	ldr	r0, [pc, #32]	@ (80109bc <tcp_pcb_remove+0xfc>)
 801099c:	f009 fbba 	bl	801a114 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	2200      	movs	r2, #0
 80109a4:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	2200      	movs	r2, #0
 80109aa:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80109ac:	bf00      	nop
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	0801cde8 	.word	0x0801cde8
 80109b8:	0801d434 	.word	0x0801d434
 80109bc:	0801ce2c 	.word	0x0801ce2c
 80109c0:	0801d450 	.word	0x0801d450
 80109c4:	0801d470 	.word	0x0801d470
 80109c8:	0801d488 	.word	0x0801d488

080109cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d106      	bne.n	80109e8 <tcp_next_iss+0x1c>
 80109da:	4b0a      	ldr	r3, [pc, #40]	@ (8010a04 <tcp_next_iss+0x38>)
 80109dc:	f640 02af 	movw	r2, #2223	@ 0x8af
 80109e0:	4909      	ldr	r1, [pc, #36]	@ (8010a08 <tcp_next_iss+0x3c>)
 80109e2:	480a      	ldr	r0, [pc, #40]	@ (8010a0c <tcp_next_iss+0x40>)
 80109e4:	f009 fb96 	bl	801a114 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80109e8:	4b09      	ldr	r3, [pc, #36]	@ (8010a10 <tcp_next_iss+0x44>)
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	4b09      	ldr	r3, [pc, #36]	@ (8010a14 <tcp_next_iss+0x48>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4413      	add	r3, r2
 80109f2:	4a07      	ldr	r2, [pc, #28]	@ (8010a10 <tcp_next_iss+0x44>)
 80109f4:	6013      	str	r3, [r2, #0]
  return iss;
 80109f6:	4b06      	ldr	r3, [pc, #24]	@ (8010a10 <tcp_next_iss+0x44>)
 80109f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	0801cde8 	.word	0x0801cde8
 8010a08:	0801d4a4 	.word	0x0801d4a4
 8010a0c:	0801ce2c 	.word	0x0801ce2c
 8010a10:	20000020 	.word	0x20000020
 8010a14:	2001766c 	.word	0x2001766c

08010a18 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	4603      	mov	r3, r0
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
 8010a24:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <tcp_eff_send_mss_netif+0x22>
 8010a2c:	4b14      	ldr	r3, [pc, #80]	@ (8010a80 <tcp_eff_send_mss_netif+0x68>)
 8010a2e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010a32:	4914      	ldr	r1, [pc, #80]	@ (8010a84 <tcp_eff_send_mss_netif+0x6c>)
 8010a34:	4814      	ldr	r0, [pc, #80]	@ (8010a88 <tcp_eff_send_mss_netif+0x70>)
 8010a36:	f009 fb6d 	bl	801a114 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010a40:	89fb      	ldrh	r3, [r7, #14]
 8010a42:	e019      	b.n	8010a78 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a48:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010a4a:	8afb      	ldrh	r3, [r7, #22]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d012      	beq.n	8010a76 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010a50:	2328      	movs	r3, #40	@ 0x28
 8010a52:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010a54:	8afa      	ldrh	r2, [r7, #22]
 8010a56:	8abb      	ldrh	r3, [r7, #20]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d904      	bls.n	8010a66 <tcp_eff_send_mss_netif+0x4e>
 8010a5c:	8afa      	ldrh	r2, [r7, #22]
 8010a5e:	8abb      	ldrh	r3, [r7, #20]
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	e000      	b.n	8010a68 <tcp_eff_send_mss_netif+0x50>
 8010a66:	2300      	movs	r3, #0
 8010a68:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010a6a:	8a7a      	ldrh	r2, [r7, #18]
 8010a6c:	89fb      	ldrh	r3, [r7, #14]
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	bf28      	it	cs
 8010a72:	4613      	movcs	r3, r2
 8010a74:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010a76:	89fb      	ldrh	r3, [r7, #14]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	0801cde8 	.word	0x0801cde8
 8010a84:	0801d4c0 	.word	0x0801d4c0
 8010a88:	0801ce2c 	.word	0x0801ce2c

08010a8c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d119      	bne.n	8010ad4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010aa0:	4b10      	ldr	r3, [pc, #64]	@ (8010ae4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010aa2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010aa6:	4910      	ldr	r1, [pc, #64]	@ (8010ae8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010aa8:	4810      	ldr	r0, [pc, #64]	@ (8010aec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010aaa:	f009 fb33 	bl	801a114 <iprintf>

  while (pcb != NULL) {
 8010aae:	e011      	b.n	8010ad4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d108      	bne.n	8010ace <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7fe fc8a 	bl	800f3dc <tcp_abort>
      pcb = next;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	e002      	b.n	8010ad4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1ea      	bne.n	8010ab0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010ada:	bf00      	nop
 8010adc:	bf00      	nop
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	0801cde8 	.word	0x0801cde8
 8010ae8:	0801d4e8 	.word	0x0801d4e8
 8010aec:	0801ce2c 	.word	0x0801ce2c

08010af0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d02a      	beq.n	8010b56 <tcp_netif_ip_addr_changed+0x66>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d026      	beq.n	8010b56 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010b08:	4b15      	ldr	r3, [pc, #84]	@ (8010b60 <tcp_netif_ip_addr_changed+0x70>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f7ff ffbc 	bl	8010a8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010b14:	4b13      	ldr	r3, [pc, #76]	@ (8010b64 <tcp_netif_ip_addr_changed+0x74>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7ff ffb6 	bl	8010a8c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d017      	beq.n	8010b56 <tcp_netif_ip_addr_changed+0x66>
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d013      	beq.n	8010b56 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010b68 <tcp_netif_ip_addr_changed+0x78>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	60fb      	str	r3, [r7, #12]
 8010b34:	e00c      	b.n	8010b50 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d103      	bne.n	8010b4a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	60fb      	str	r3, [r7, #12]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1ef      	bne.n	8010b36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010b56:	bf00      	nop
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20017678 	.word	0x20017678
 8010b64:	20017670 	.word	0x20017670
 8010b68:	20017674 	.word	0x20017674

08010b6c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010b6c:	b590      	push	{r4, r7, lr}
 8010b6e:	b08d      	sub	sp, #52	@ 0x34
 8010b70:	af04      	add	r7, sp, #16
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d105      	bne.n	8010b88 <tcp_input+0x1c>
 8010b7c:	4b8b      	ldr	r3, [pc, #556]	@ (8010dac <tcp_input+0x240>)
 8010b7e:	2283      	movs	r2, #131	@ 0x83
 8010b80:	498b      	ldr	r1, [pc, #556]	@ (8010db0 <tcp_input+0x244>)
 8010b82:	488c      	ldr	r0, [pc, #560]	@ (8010db4 <tcp_input+0x248>)
 8010b84:	f009 fac6 	bl	801a114 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	4a8a      	ldr	r2, [pc, #552]	@ (8010db8 <tcp_input+0x24c>)
 8010b8e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	895b      	ldrh	r3, [r3, #10]
 8010b94:	2b13      	cmp	r3, #19
 8010b96:	f240 83e1 	bls.w	801135c <tcp_input+0x7f0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b9a:	4b88      	ldr	r3, [pc, #544]	@ (8010dbc <tcp_input+0x250>)
 8010b9c:	695b      	ldr	r3, [r3, #20]
 8010b9e:	4a87      	ldr	r2, [pc, #540]	@ (8010dbc <tcp_input+0x250>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	4611      	mov	r1, r2
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f008 f857 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 83d7 	bne.w	8011360 <tcp_input+0x7f4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bb2:	4b82      	ldr	r3, [pc, #520]	@ (8010dbc <tcp_input+0x250>)
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010bba:	2be0      	cmp	r3, #224	@ 0xe0
 8010bbc:	f000 83d0 	beq.w	8011360 <tcp_input+0x7f4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	891a      	ldrh	r2, [r3, #8]
 8010bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8010dc0 <tcp_input+0x254>)
 8010bc6:	9300      	str	r3, [sp, #0]
 8010bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8010dc4 <tcp_input+0x258>)
 8010bca:	2106      	movs	r1, #6
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7fc fa6a 	bl	800d0a6 <ip_chksum_pseudo>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8010bd6:	8a3b      	ldrh	r3, [r7, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f040 83c3 	bne.w	8011364 <tcp_input+0x7f8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010bde:	4b76      	ldr	r3, [pc, #472]	@ (8010db8 <tcp_input+0x24c>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	899b      	ldrh	r3, [r3, #12]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fc f92a 	bl	800ce40 <lwip_htons>
 8010bec:	4603      	mov	r3, r0
 8010bee:	0b1b      	lsrs	r3, r3, #12
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010bf8:	7bfb      	ldrb	r3, [r7, #15]
 8010bfa:	2b13      	cmp	r3, #19
 8010bfc:	f240 83b4 	bls.w	8011368 <tcp_input+0x7fc>
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	891b      	ldrh	r3, [r3, #8]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	f200 83ad 	bhi.w	8011368 <tcp_input+0x7fc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	3b14      	subs	r3, #20
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	4b6c      	ldr	r3, [pc, #432]	@ (8010dc8 <tcp_input+0x25c>)
 8010c18:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8010dcc <tcp_input+0x260>)
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	895a      	ldrh	r2, [r3, #10]
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d309      	bcc.n	8010c40 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010c2c:	4b66      	ldr	r3, [pc, #408]	@ (8010dc8 <tcp_input+0x25c>)
 8010c2e:	881a      	ldrh	r2, [r3, #0]
 8010c30:	4b67      	ldr	r3, [pc, #412]	@ (8010dd0 <tcp_input+0x264>)
 8010c32:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	4619      	mov	r1, r3
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7fd fd53 	bl	800e6e4 <pbuf_remove_header>
 8010c3e:	e04e      	b.n	8010cde <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d105      	bne.n	8010c54 <tcp_input+0xe8>
 8010c48:	4b58      	ldr	r3, [pc, #352]	@ (8010dac <tcp_input+0x240>)
 8010c4a:	22c2      	movs	r2, #194	@ 0xc2
 8010c4c:	4961      	ldr	r1, [pc, #388]	@ (8010dd4 <tcp_input+0x268>)
 8010c4e:	4859      	ldr	r0, [pc, #356]	@ (8010db4 <tcp_input+0x248>)
 8010c50:	f009 fa60 	bl	801a114 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010c54:	2114      	movs	r1, #20
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7fd fd44 	bl	800e6e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	895a      	ldrh	r2, [r3, #10]
 8010c60:	4b5b      	ldr	r3, [pc, #364]	@ (8010dd0 <tcp_input+0x264>)
 8010c62:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010c64:	4b58      	ldr	r3, [pc, #352]	@ (8010dc8 <tcp_input+0x25c>)
 8010c66:	881a      	ldrh	r2, [r3, #0]
 8010c68:	4b59      	ldr	r3, [pc, #356]	@ (8010dd0 <tcp_input+0x264>)
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010c70:	4b57      	ldr	r3, [pc, #348]	@ (8010dd0 <tcp_input+0x264>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7fd fd34 	bl	800e6e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	895b      	ldrh	r3, [r3, #10]
 8010c82:	89ba      	ldrh	r2, [r7, #12]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	f200 8371 	bhi.w	801136c <tcp_input+0x800>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	4a4e      	ldr	r2, [pc, #312]	@ (8010dcc <tcp_input+0x260>)
 8010c92:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	89ba      	ldrh	r2, [r7, #12]
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fd fd21 	bl	800e6e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	891a      	ldrh	r2, [r3, #8]
 8010ca6:	89bb      	ldrh	r3, [r7, #12]
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	895b      	ldrh	r3, [r3, #10]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d005      	beq.n	8010cc4 <tcp_input+0x158>
 8010cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8010dac <tcp_input+0x240>)
 8010cba:	22df      	movs	r2, #223	@ 0xdf
 8010cbc:	4946      	ldr	r1, [pc, #280]	@ (8010dd8 <tcp_input+0x26c>)
 8010cbe:	483d      	ldr	r0, [pc, #244]	@ (8010db4 <tcp_input+0x248>)
 8010cc0:	f009 fa28 	bl	801a114 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	891a      	ldrh	r2, [r3, #8]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	891b      	ldrh	r3, [r3, #8]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d005      	beq.n	8010cde <tcp_input+0x172>
 8010cd2:	4b36      	ldr	r3, [pc, #216]	@ (8010dac <tcp_input+0x240>)
 8010cd4:	22e0      	movs	r2, #224	@ 0xe0
 8010cd6:	4941      	ldr	r1, [pc, #260]	@ (8010ddc <tcp_input+0x270>)
 8010cd8:	4836      	ldr	r0, [pc, #216]	@ (8010db4 <tcp_input+0x248>)
 8010cda:	f009 fa1b 	bl	801a114 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010cde:	4b36      	ldr	r3, [pc, #216]	@ (8010db8 <tcp_input+0x24c>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	4a34      	ldr	r2, [pc, #208]	@ (8010db8 <tcp_input+0x24c>)
 8010ce8:	6814      	ldr	r4, [r2, #0]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fc f8a8 	bl	800ce40 <lwip_htons>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010cf4:	4b30      	ldr	r3, [pc, #192]	@ (8010db8 <tcp_input+0x24c>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	885b      	ldrh	r3, [r3, #2]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8010db8 <tcp_input+0x24c>)
 8010cfe:	6814      	ldr	r4, [r2, #0]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fc f89d 	bl	800ce40 <lwip_htons>
 8010d06:	4603      	mov	r3, r0
 8010d08:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8010db8 <tcp_input+0x24c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	4a29      	ldr	r2, [pc, #164]	@ (8010db8 <tcp_input+0x24c>)
 8010d12:	6814      	ldr	r4, [r2, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fc f8a9 	bl	800ce6c <lwip_htonl>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	6063      	str	r3, [r4, #4]
 8010d1e:	6863      	ldr	r3, [r4, #4]
 8010d20:	4a2f      	ldr	r2, [pc, #188]	@ (8010de0 <tcp_input+0x274>)
 8010d22:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010d24:	4b24      	ldr	r3, [pc, #144]	@ (8010db8 <tcp_input+0x24c>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	4a23      	ldr	r2, [pc, #140]	@ (8010db8 <tcp_input+0x24c>)
 8010d2c:	6814      	ldr	r4, [r2, #0]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fc f89c 	bl	800ce6c <lwip_htonl>
 8010d34:	4603      	mov	r3, r0
 8010d36:	60a3      	str	r3, [r4, #8]
 8010d38:	68a3      	ldr	r3, [r4, #8]
 8010d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8010de4 <tcp_input+0x278>)
 8010d3c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8010db8 <tcp_input+0x24c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	89db      	ldrh	r3, [r3, #14]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	4a1c      	ldr	r2, [pc, #112]	@ (8010db8 <tcp_input+0x24c>)
 8010d48:	6814      	ldr	r4, [r2, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc f878 	bl	800ce40 <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010d54:	4b18      	ldr	r3, [pc, #96]	@ (8010db8 <tcp_input+0x24c>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	899b      	ldrh	r3, [r3, #12]
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fc f86f 	bl	800ce40 <lwip_htons>
 8010d62:	4603      	mov	r3, r0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8010de8 <tcp_input+0x27c>)
 8010d6e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	891a      	ldrh	r2, [r3, #8]
 8010d74:	4b1d      	ldr	r3, [pc, #116]	@ (8010dec <tcp_input+0x280>)
 8010d76:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010d78:	4b1b      	ldr	r3, [pc, #108]	@ (8010de8 <tcp_input+0x27c>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	f003 0303 	and.w	r3, r3, #3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00c      	beq.n	8010d9e <tcp_input+0x232>
    tcplen++;
 8010d84:	4b19      	ldr	r3, [pc, #100]	@ (8010dec <tcp_input+0x280>)
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	4b17      	ldr	r3, [pc, #92]	@ (8010dec <tcp_input+0x280>)
 8010d8e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	891a      	ldrh	r2, [r3, #8]
 8010d94:	4b15      	ldr	r3, [pc, #84]	@ (8010dec <tcp_input+0x280>)
 8010d96:	881b      	ldrh	r3, [r3, #0]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	f200 82e9 	bhi.w	8011370 <tcp_input+0x804>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010da2:	4b13      	ldr	r3, [pc, #76]	@ (8010df0 <tcp_input+0x284>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	61bb      	str	r3, [r7, #24]
 8010da8:	e09b      	b.n	8010ee2 <tcp_input+0x376>
 8010daa:	bf00      	nop
 8010dac:	0801d51c 	.word	0x0801d51c
 8010db0:	0801d550 	.word	0x0801d550
 8010db4:	0801d568 	.word	0x0801d568
 8010db8:	20017698 	.word	0x20017698
 8010dbc:	2000b148 	.word	0x2000b148
 8010dc0:	2000b15c 	.word	0x2000b15c
 8010dc4:	2000b158 	.word	0x2000b158
 8010dc8:	2001769c 	.word	0x2001769c
 8010dcc:	200176a0 	.word	0x200176a0
 8010dd0:	2001769e 	.word	0x2001769e
 8010dd4:	0801d590 	.word	0x0801d590
 8010dd8:	0801d5a0 	.word	0x0801d5a0
 8010ddc:	0801d5ac 	.word	0x0801d5ac
 8010de0:	200176a8 	.word	0x200176a8
 8010de4:	200176ac 	.word	0x200176ac
 8010de8:	200176b4 	.word	0x200176b4
 8010dec:	200176b2 	.word	0x200176b2
 8010df0:	20017678 	.word	0x20017678
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	7d1b      	ldrb	r3, [r3, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d105      	bne.n	8010e08 <tcp_input+0x29c>
 8010dfc:	4b88      	ldr	r3, [pc, #544]	@ (8011020 <tcp_input+0x4b4>)
 8010dfe:	22fb      	movs	r2, #251	@ 0xfb
 8010e00:	4988      	ldr	r1, [pc, #544]	@ (8011024 <tcp_input+0x4b8>)
 8010e02:	4889      	ldr	r0, [pc, #548]	@ (8011028 <tcp_input+0x4bc>)
 8010e04:	f009 f986 	bl	801a114 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	7d1b      	ldrb	r3, [r3, #20]
 8010e0c:	2b0a      	cmp	r3, #10
 8010e0e:	d105      	bne.n	8010e1c <tcp_input+0x2b0>
 8010e10:	4b83      	ldr	r3, [pc, #524]	@ (8011020 <tcp_input+0x4b4>)
 8010e12:	22fc      	movs	r2, #252	@ 0xfc
 8010e14:	4985      	ldr	r1, [pc, #532]	@ (801102c <tcp_input+0x4c0>)
 8010e16:	4884      	ldr	r0, [pc, #528]	@ (8011028 <tcp_input+0x4bc>)
 8010e18:	f009 f97c 	bl	801a114 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	7d1b      	ldrb	r3, [r3, #20]
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	d105      	bne.n	8010e30 <tcp_input+0x2c4>
 8010e24:	4b7e      	ldr	r3, [pc, #504]	@ (8011020 <tcp_input+0x4b4>)
 8010e26:	22fd      	movs	r2, #253	@ 0xfd
 8010e28:	4981      	ldr	r1, [pc, #516]	@ (8011030 <tcp_input+0x4c4>)
 8010e2a:	487f      	ldr	r0, [pc, #508]	@ (8011028 <tcp_input+0x4bc>)
 8010e2c:	f009 f972 	bl	801a114 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	7a1b      	ldrb	r3, [r3, #8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00c      	beq.n	8010e52 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	7a1a      	ldrb	r2, [r3, #8]
 8010e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8011034 <tcp_input+0x4c8>)
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010e44:	3301      	adds	r3, #1
 8010e46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d002      	beq.n	8010e52 <tcp_input+0x2e6>
      prev = pcb;
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	61fb      	str	r3, [r7, #28]
      continue;
 8010e50:	e044      	b.n	8010edc <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	8b1a      	ldrh	r2, [r3, #24]
 8010e56:	4b78      	ldr	r3, [pc, #480]	@ (8011038 <tcp_input+0x4cc>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d13a      	bne.n	8010ed8 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	8ada      	ldrh	r2, [r3, #22]
 8010e66:	4b74      	ldr	r3, [pc, #464]	@ (8011038 <tcp_input+0x4cc>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	885b      	ldrh	r3, [r3, #2]
 8010e6c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d132      	bne.n	8010ed8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	4b6f      	ldr	r3, [pc, #444]	@ (8011034 <tcp_input+0x4c8>)
 8010e78:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d12c      	bne.n	8010ed8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	4b6c      	ldr	r3, [pc, #432]	@ (8011034 <tcp_input+0x4c8>)
 8010e84:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d126      	bne.n	8010ed8 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	69ba      	ldr	r2, [r7, #24]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d106      	bne.n	8010ea2 <tcp_input+0x336>
 8010e94:	4b62      	ldr	r3, [pc, #392]	@ (8011020 <tcp_input+0x4b4>)
 8010e96:	f240 120d 	movw	r2, #269	@ 0x10d
 8010e9a:	4968      	ldr	r1, [pc, #416]	@ (801103c <tcp_input+0x4d0>)
 8010e9c:	4862      	ldr	r0, [pc, #392]	@ (8011028 <tcp_input+0x4bc>)
 8010e9e:	f009 f939 	bl	801a114 <iprintf>
      if (prev != NULL) {
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00a      	beq.n	8010ebe <tcp_input+0x352>
        prev->next = pcb->next;
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	68da      	ldr	r2, [r3, #12]
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010eb0:	4b63      	ldr	r3, [pc, #396]	@ (8011040 <tcp_input+0x4d4>)
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010eb8:	4a61      	ldr	r2, [pc, #388]	@ (8011040 <tcp_input+0x4d4>)
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	69ba      	ldr	r2, [r7, #24]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d110      	bne.n	8010eea <tcp_input+0x37e>
 8010ec8:	4b55      	ldr	r3, [pc, #340]	@ (8011020 <tcp_input+0x4b4>)
 8010eca:	f240 1215 	movw	r2, #277	@ 0x115
 8010ece:	495d      	ldr	r1, [pc, #372]	@ (8011044 <tcp_input+0x4d8>)
 8010ed0:	4855      	ldr	r0, [pc, #340]	@ (8011028 <tcp_input+0x4bc>)
 8010ed2:	f009 f91f 	bl	801a114 <iprintf>
      break;
 8010ed6:	e008      	b.n	8010eea <tcp_input+0x37e>
    }
    prev = pcb;
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010edc:	69bb      	ldr	r3, [r7, #24]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	61bb      	str	r3, [r7, #24]
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d185      	bne.n	8010df4 <tcp_input+0x288>
 8010ee8:	e000      	b.n	8010eec <tcp_input+0x380>
      break;
 8010eea:	bf00      	nop
  }

  if (pcb == NULL) {
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f040 80b0 	bne.w	8011054 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ef4:	4b54      	ldr	r3, [pc, #336]	@ (8011048 <tcp_input+0x4dc>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	61bb      	str	r3, [r7, #24]
 8010efa:	e03f      	b.n	8010f7c <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	7d1b      	ldrb	r3, [r3, #20]
 8010f00:	2b0a      	cmp	r3, #10
 8010f02:	d006      	beq.n	8010f12 <tcp_input+0x3a6>
 8010f04:	4b46      	ldr	r3, [pc, #280]	@ (8011020 <tcp_input+0x4b4>)
 8010f06:	f240 121f 	movw	r2, #287	@ 0x11f
 8010f0a:	4950      	ldr	r1, [pc, #320]	@ (801104c <tcp_input+0x4e0>)
 8010f0c:	4846      	ldr	r0, [pc, #280]	@ (8011028 <tcp_input+0x4bc>)
 8010f0e:	f009 f901 	bl	801a114 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	7a1b      	ldrb	r3, [r3, #8]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d009      	beq.n	8010f2e <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	7a1a      	ldrb	r2, [r3, #8]
 8010f1e:	4b45      	ldr	r3, [pc, #276]	@ (8011034 <tcp_input+0x4c8>)
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010f26:	3301      	adds	r3, #1
 8010f28:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d122      	bne.n	8010f74 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	8b1a      	ldrh	r2, [r3, #24]
 8010f32:	4b41      	ldr	r3, [pc, #260]	@ (8011038 <tcp_input+0x4cc>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	881b      	ldrh	r3, [r3, #0]
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d11b      	bne.n	8010f76 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	8ada      	ldrh	r2, [r3, #22]
 8010f42:	4b3d      	ldr	r3, [pc, #244]	@ (8011038 <tcp_input+0x4cc>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	885b      	ldrh	r3, [r3, #2]
 8010f48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d113      	bne.n	8010f76 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	685a      	ldr	r2, [r3, #4]
 8010f52:	4b38      	ldr	r3, [pc, #224]	@ (8011034 <tcp_input+0x4c8>)
 8010f54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d10d      	bne.n	8010f76 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	4b35      	ldr	r3, [pc, #212]	@ (8011034 <tcp_input+0x4c8>)
 8010f60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d107      	bne.n	8010f76 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010f66:	69b8      	ldr	r0, [r7, #24]
 8010f68:	f000 fb5c 	bl	8011624 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7fd fc3f 	bl	800e7f0 <pbuf_free>
        return;
 8010f72:	e203      	b.n	801137c <tcp_input+0x810>
        continue;
 8010f74:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	61bb      	str	r3, [r7, #24]
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1bc      	bne.n	8010efc <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010f82:	2300      	movs	r3, #0
 8010f84:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f86:	4b32      	ldr	r3, [pc, #200]	@ (8011050 <tcp_input+0x4e4>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	e02a      	b.n	8010fe4 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	7a1b      	ldrb	r3, [r3, #8]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00c      	beq.n	8010fb0 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	7a1a      	ldrb	r2, [r3, #8]
 8010f9a:	4b26      	ldr	r3, [pc, #152]	@ (8011034 <tcp_input+0x4c8>)
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d002      	beq.n	8010fb0 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	61fb      	str	r3, [r7, #28]
        continue;
 8010fae:	e016      	b.n	8010fde <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	8ada      	ldrh	r2, [r3, #22]
 8010fb4:	4b20      	ldr	r3, [pc, #128]	@ (8011038 <tcp_input+0x4cc>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	885b      	ldrh	r3, [r3, #2]
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d10c      	bne.n	8010fda <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8011034 <tcp_input+0x4c8>)
 8010fc6:	695b      	ldr	r3, [r3, #20]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d00f      	beq.n	8010fec <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00d      	beq.n	8010fee <tcp_input+0x482>
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d009      	beq.n	8010fee <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	617b      	str	r3, [r7, #20]
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1d1      	bne.n	8010f8e <tcp_input+0x422>
 8010fea:	e000      	b.n	8010fee <tcp_input+0x482>
            break;
 8010fec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d02f      	beq.n	8011054 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00a      	beq.n	8011010 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	68da      	ldr	r2, [r3, #12]
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011002:	4b13      	ldr	r3, [pc, #76]	@ (8011050 <tcp_input+0x4e4>)
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801100a:	4a11      	ldr	r2, [pc, #68]	@ (8011050 <tcp_input+0x4e4>)
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011010:	6978      	ldr	r0, [r7, #20]
 8011012:	f000 fa09 	bl	8011428 <tcp_listen_input>
      }
      pbuf_free(p);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7fd fbea 	bl	800e7f0 <pbuf_free>
      return;
 801101c:	e1ae      	b.n	801137c <tcp_input+0x810>
 801101e:	bf00      	nop
 8011020:	0801d51c 	.word	0x0801d51c
 8011024:	0801d5cc 	.word	0x0801d5cc
 8011028:	0801d568 	.word	0x0801d568
 801102c:	0801d5f4 	.word	0x0801d5f4
 8011030:	0801d620 	.word	0x0801d620
 8011034:	2000b148 	.word	0x2000b148
 8011038:	20017698 	.word	0x20017698
 801103c:	0801d648 	.word	0x0801d648
 8011040:	20017678 	.word	0x20017678
 8011044:	0801d674 	.word	0x0801d674
 8011048:	2001767c 	.word	0x2001767c
 801104c:	0801d6a0 	.word	0x0801d6a0
 8011050:	20017674 	.word	0x20017674
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	2b00      	cmp	r3, #0
 8011058:	f000 8156 	beq.w	8011308 <tcp_input+0x79c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801105c:	4b94      	ldr	r3, [pc, #592]	@ (80112b0 <tcp_input+0x744>)
 801105e:	2200      	movs	r2, #0
 8011060:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	891a      	ldrh	r2, [r3, #8]
 8011066:	4b92      	ldr	r3, [pc, #584]	@ (80112b0 <tcp_input+0x744>)
 8011068:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801106a:	4a91      	ldr	r2, [pc, #580]	@ (80112b0 <tcp_input+0x744>)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011070:	4b90      	ldr	r3, [pc, #576]	@ (80112b4 <tcp_input+0x748>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4a8e      	ldr	r2, [pc, #568]	@ (80112b0 <tcp_input+0x744>)
 8011076:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8011078:	4b8f      	ldr	r3, [pc, #572]	@ (80112b8 <tcp_input+0x74c>)
 801107a:	2200      	movs	r2, #0
 801107c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801107e:	4b8f      	ldr	r3, [pc, #572]	@ (80112bc <tcp_input+0x750>)
 8011080:	2200      	movs	r2, #0
 8011082:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011084:	4b8e      	ldr	r3, [pc, #568]	@ (80112c0 <tcp_input+0x754>)
 8011086:	2200      	movs	r2, #0
 8011088:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801108a:	4b8e      	ldr	r3, [pc, #568]	@ (80112c4 <tcp_input+0x758>)
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	f003 0308 	and.w	r3, r3, #8
 8011092:	2b00      	cmp	r3, #0
 8011094:	d006      	beq.n	80110a4 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	7b5b      	ldrb	r3, [r3, #13]
 801109a:	f043 0301 	orr.w	r3, r3, #1
 801109e:	b2da      	uxtb	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d017      	beq.n	80110dc <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80110ac:	69b8      	ldr	r0, [r7, #24]
 80110ae:	f7ff f89d 	bl	80101ec <tcp_process_refused_data>
 80110b2:	4603      	mov	r3, r0
 80110b4:	f113 0f0d 	cmn.w	r3, #13
 80110b8:	d007      	beq.n	80110ca <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00c      	beq.n	80110dc <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80110c2:	4b81      	ldr	r3, [pc, #516]	@ (80112c8 <tcp_input+0x75c>)
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f040 80e2 	bne.w	8011298 <tcp_input+0x72c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80110d4:	69b8      	ldr	r0, [r7, #24]
 80110d6:	f003 fadb 	bl	8014690 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80110da:	e0dd      	b.n	8011298 <tcp_input+0x72c>
      }
    }
    tcp_input_pcb = pcb;
 80110dc:	4a7b      	ldr	r2, [pc, #492]	@ (80112cc <tcp_input+0x760>)
 80110de:	69bb      	ldr	r3, [r7, #24]
 80110e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80110e2:	69b8      	ldr	r0, [r7, #24]
 80110e4:	f000 fb18 	bl	8011718 <tcp_process>
 80110e8:	4603      	mov	r3, r0
 80110ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80110ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110f0:	f113 0f0d 	cmn.w	r3, #13
 80110f4:	f000 80d2 	beq.w	801129c <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 80110f8:	4b70      	ldr	r3, [pc, #448]	@ (80112bc <tcp_input+0x750>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	f003 0308 	and.w	r3, r3, #8
 8011100:	2b00      	cmp	r3, #0
 8011102:	d015      	beq.n	8011130 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801110a:	2b00      	cmp	r3, #0
 801110c:	d008      	beq.n	8011120 <tcp_input+0x5b4>
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011114:	69ba      	ldr	r2, [r7, #24]
 8011116:	6912      	ldr	r2, [r2, #16]
 8011118:	f06f 010d 	mvn.w	r1, #13
 801111c:	4610      	mov	r0, r2
 801111e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011120:	69b9      	ldr	r1, [r7, #24]
 8011122:	486b      	ldr	r0, [pc, #428]	@ (80112d0 <tcp_input+0x764>)
 8011124:	f7ff fbcc 	bl	80108c0 <tcp_pcb_remove>
        tcp_free(pcb);
 8011128:	69b8      	ldr	r0, [r7, #24]
 801112a:	f7fd fe1d 	bl	800ed68 <tcp_free>
 801112e:	e0d8      	b.n	80112e2 <tcp_input+0x776>
      } else {
        err = ERR_OK;
 8011130:	2300      	movs	r3, #0
 8011132:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011134:	4b62      	ldr	r3, [pc, #392]	@ (80112c0 <tcp_input+0x754>)
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01b      	beq.n	8011174 <tcp_input+0x608>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801113c:	4b60      	ldr	r3, [pc, #384]	@ (80112c0 <tcp_input+0x754>)
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011146:	2b00      	cmp	r3, #0
 8011148:	d009      	beq.n	801115e <tcp_input+0x5f2>
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801114e:	69ba      	ldr	r2, [r7, #24]
 8011150:	6910      	ldr	r0, [r2, #16]
 8011152:	897a      	ldrh	r2, [r7, #10]
 8011154:	69b9      	ldr	r1, [r7, #24]
 8011156:	4798      	blx	r3
 8011158:	4603      	mov	r3, r0
 801115a:	74fb      	strb	r3, [r7, #19]
 801115c:	e001      	b.n	8011162 <tcp_input+0x5f6>
 801115e:	2300      	movs	r3, #0
 8011160:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011162:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011166:	f113 0f0d 	cmn.w	r3, #13
 801116a:	f000 8099 	beq.w	80112a0 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 801116e:	4b54      	ldr	r3, [pc, #336]	@ (80112c0 <tcp_input+0x754>)
 8011170:	2200      	movs	r2, #0
 8011172:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011174:	69b8      	ldr	r0, [r7, #24]
 8011176:	f000 f917 	bl	80113a8 <tcp_input_delayed_close>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	f040 8091 	bne.w	80112a4 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011182:	4b4d      	ldr	r3, [pc, #308]	@ (80112b8 <tcp_input+0x74c>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d041      	beq.n	801120e <tcp_input+0x6a2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801118e:	2b00      	cmp	r3, #0
 8011190:	d006      	beq.n	80111a0 <tcp_input+0x634>
 8011192:	4b50      	ldr	r3, [pc, #320]	@ (80112d4 <tcp_input+0x768>)
 8011194:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011198:	494f      	ldr	r1, [pc, #316]	@ (80112d8 <tcp_input+0x76c>)
 801119a:	4850      	ldr	r0, [pc, #320]	@ (80112dc <tcp_input+0x770>)
 801119c:	f008 ffba 	bl	801a114 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	8b5b      	ldrh	r3, [r3, #26]
 80111a4:	f003 0310 	and.w	r3, r3, #16
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d008      	beq.n	80111be <tcp_input+0x652>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80111ac:	4b42      	ldr	r3, [pc, #264]	@ (80112b8 <tcp_input+0x74c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fd fb1d 	bl	800e7f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80111b6:	69b8      	ldr	r0, [r7, #24]
 80111b8:	f7fe f910 	bl	800f3dc <tcp_abort>
            goto aborted;
 80111bc:	e091      	b.n	80112e2 <tcp_input+0x776>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d00c      	beq.n	80111e2 <tcp_input+0x676>
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	6918      	ldr	r0, [r3, #16]
 80111d2:	4b39      	ldr	r3, [pc, #228]	@ (80112b8 <tcp_input+0x74c>)
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	2300      	movs	r3, #0
 80111d8:	69b9      	ldr	r1, [r7, #24]
 80111da:	47a0      	blx	r4
 80111dc:	4603      	mov	r3, r0
 80111de:	74fb      	strb	r3, [r7, #19]
 80111e0:	e008      	b.n	80111f4 <tcp_input+0x688>
 80111e2:	4b35      	ldr	r3, [pc, #212]	@ (80112b8 <tcp_input+0x74c>)
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	2300      	movs	r3, #0
 80111e8:	69b9      	ldr	r1, [r7, #24]
 80111ea:	2000      	movs	r0, #0
 80111ec:	f7ff f8aa 	bl	8010344 <tcp_recv_null>
 80111f0:	4603      	mov	r3, r0
 80111f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80111f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111f8:	f113 0f0d 	cmn.w	r3, #13
 80111fc:	d054      	beq.n	80112a8 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80111fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d003      	beq.n	801120e <tcp_input+0x6a2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011206:	4b2c      	ldr	r3, [pc, #176]	@ (80112b8 <tcp_input+0x74c>)
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801120e:	4b2b      	ldr	r3, [pc, #172]	@ (80112bc <tcp_input+0x750>)
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	f003 0320 	and.w	r3, r3, #32
 8011216:	2b00      	cmp	r3, #0
 8011218:	d031      	beq.n	801127e <tcp_input+0x712>
          if (pcb->refused_data != NULL) {
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801121e:	2b00      	cmp	r3, #0
 8011220:	d009      	beq.n	8011236 <tcp_input+0x6ca>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011226:	7b5a      	ldrb	r2, [r3, #13]
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801122c:	f042 0220 	orr.w	r2, r2, #32
 8011230:	b2d2      	uxtb	r2, r2
 8011232:	735a      	strb	r2, [r3, #13]
 8011234:	e023      	b.n	801127e <tcp_input+0x712>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801123a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801123e:	4293      	cmp	r3, r2
 8011240:	d005      	beq.n	801124e <tcp_input+0x6e2>
              pcb->rcv_wnd++;
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011246:	3301      	adds	r3, #1
 8011248:	b29a      	uxth	r2, r3
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00b      	beq.n	8011270 <tcp_input+0x704>
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	6918      	ldr	r0, [r3, #16]
 8011262:	2300      	movs	r3, #0
 8011264:	2200      	movs	r2, #0
 8011266:	69b9      	ldr	r1, [r7, #24]
 8011268:	47a0      	blx	r4
 801126a:	4603      	mov	r3, r0
 801126c:	74fb      	strb	r3, [r7, #19]
 801126e:	e001      	b.n	8011274 <tcp_input+0x708>
 8011270:	2300      	movs	r3, #0
 8011272:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011274:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011278:	f113 0f0d 	cmn.w	r3, #13
 801127c:	d016      	beq.n	80112ac <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801127e:	4b13      	ldr	r3, [pc, #76]	@ (80112cc <tcp_input+0x760>)
 8011280:	2200      	movs	r2, #0
 8011282:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011284:	69b8      	ldr	r0, [r7, #24]
 8011286:	f000 f88f 	bl	80113a8 <tcp_input_delayed_close>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d127      	bne.n	80112e0 <tcp_input+0x774>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011290:	69b8      	ldr	r0, [r7, #24]
 8011292:	f002 fbc9 	bl	8013a28 <tcp_output>
 8011296:	e024      	b.n	80112e2 <tcp_input+0x776>
        goto aborted;
 8011298:	bf00      	nop
 801129a:	e022      	b.n	80112e2 <tcp_input+0x776>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801129c:	bf00      	nop
 801129e:	e020      	b.n	80112e2 <tcp_input+0x776>
              goto aborted;
 80112a0:	bf00      	nop
 80112a2:	e01e      	b.n	80112e2 <tcp_input+0x776>
          goto aborted;
 80112a4:	bf00      	nop
 80112a6:	e01c      	b.n	80112e2 <tcp_input+0x776>
            goto aborted;
 80112a8:	bf00      	nop
 80112aa:	e01a      	b.n	80112e2 <tcp_input+0x776>
              goto aborted;
 80112ac:	bf00      	nop
 80112ae:	e018      	b.n	80112e2 <tcp_input+0x776>
 80112b0:	20017684 	.word	0x20017684
 80112b4:	20017698 	.word	0x20017698
 80112b8:	200176b8 	.word	0x200176b8
 80112bc:	200176b5 	.word	0x200176b5
 80112c0:	200176b0 	.word	0x200176b0
 80112c4:	200176b4 	.word	0x200176b4
 80112c8:	200176b2 	.word	0x200176b2
 80112cc:	200176bc 	.word	0x200176bc
 80112d0:	20017678 	.word	0x20017678
 80112d4:	0801d51c 	.word	0x0801d51c
 80112d8:	0801d6d0 	.word	0x0801d6d0
 80112dc:	0801d568 	.word	0x0801d568
          goto aborted;
 80112e0:	bf00      	nop
    tcp_input_pcb = NULL;
 80112e2:	4b28      	ldr	r3, [pc, #160]	@ (8011384 <tcp_input+0x818>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80112e8:	4b27      	ldr	r3, [pc, #156]	@ (8011388 <tcp_input+0x81c>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80112ee:	4b27      	ldr	r3, [pc, #156]	@ (801138c <tcp_input+0x820>)
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d041      	beq.n	801137a <tcp_input+0x80e>
      pbuf_free(inseg.p);
 80112f6:	4b25      	ldr	r3, [pc, #148]	@ (801138c <tcp_input+0x820>)
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fd fa78 	bl	800e7f0 <pbuf_free>
      inseg.p = NULL;
 8011300:	4b22      	ldr	r3, [pc, #136]	@ (801138c <tcp_input+0x820>)
 8011302:	2200      	movs	r2, #0
 8011304:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011306:	e038      	b.n	801137a <tcp_input+0x80e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011308:	4b21      	ldr	r3, [pc, #132]	@ (8011390 <tcp_input+0x824>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	899b      	ldrh	r3, [r3, #12]
 801130e:	b29b      	uxth	r3, r3
 8011310:	4618      	mov	r0, r3
 8011312:	f7fb fd95 	bl	800ce40 <lwip_htons>
 8011316:	4603      	mov	r3, r0
 8011318:	b2db      	uxtb	r3, r3
 801131a:	f003 0304 	and.w	r3, r3, #4
 801131e:	2b00      	cmp	r3, #0
 8011320:	d118      	bne.n	8011354 <tcp_input+0x7e8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011322:	4b1c      	ldr	r3, [pc, #112]	@ (8011394 <tcp_input+0x828>)
 8011324:	6819      	ldr	r1, [r3, #0]
 8011326:	4b1c      	ldr	r3, [pc, #112]	@ (8011398 <tcp_input+0x82c>)
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	461a      	mov	r2, r3
 801132c:	4b1b      	ldr	r3, [pc, #108]	@ (801139c <tcp_input+0x830>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011332:	4b17      	ldr	r3, [pc, #92]	@ (8011390 <tcp_input+0x824>)
 8011334:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011336:	885b      	ldrh	r3, [r3, #2]
 8011338:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801133a:	4a15      	ldr	r2, [pc, #84]	@ (8011390 <tcp_input+0x824>)
 801133c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801133e:	8812      	ldrh	r2, [r2, #0]
 8011340:	b292      	uxth	r2, r2
 8011342:	9202      	str	r2, [sp, #8]
 8011344:	9301      	str	r3, [sp, #4]
 8011346:	4b16      	ldr	r3, [pc, #88]	@ (80113a0 <tcp_input+0x834>)
 8011348:	9300      	str	r3, [sp, #0]
 801134a:	4b16      	ldr	r3, [pc, #88]	@ (80113a4 <tcp_input+0x838>)
 801134c:	4602      	mov	r2, r0
 801134e:	2000      	movs	r0, #0
 8011350:	f003 f94c 	bl	80145ec <tcp_rst>
    pbuf_free(p);
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7fd fa4b 	bl	800e7f0 <pbuf_free>
  return;
 801135a:	e00e      	b.n	801137a <tcp_input+0x80e>
    goto dropped;
 801135c:	bf00      	nop
 801135e:	e008      	b.n	8011372 <tcp_input+0x806>
    goto dropped;
 8011360:	bf00      	nop
 8011362:	e006      	b.n	8011372 <tcp_input+0x806>
      goto dropped;
 8011364:	bf00      	nop
 8011366:	e004      	b.n	8011372 <tcp_input+0x806>
    goto dropped;
 8011368:	bf00      	nop
 801136a:	e002      	b.n	8011372 <tcp_input+0x806>
      goto dropped;
 801136c:	bf00      	nop
 801136e:	e000      	b.n	8011372 <tcp_input+0x806>
      goto dropped;
 8011370:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7fd fa3c 	bl	800e7f0 <pbuf_free>
 8011378:	e000      	b.n	801137c <tcp_input+0x810>
  return;
 801137a:	bf00      	nop
}
 801137c:	3724      	adds	r7, #36	@ 0x24
 801137e:	46bd      	mov	sp, r7
 8011380:	bd90      	pop	{r4, r7, pc}
 8011382:	bf00      	nop
 8011384:	200176bc 	.word	0x200176bc
 8011388:	200176b8 	.word	0x200176b8
 801138c:	20017684 	.word	0x20017684
 8011390:	20017698 	.word	0x20017698
 8011394:	200176ac 	.word	0x200176ac
 8011398:	200176b2 	.word	0x200176b2
 801139c:	200176a8 	.word	0x200176a8
 80113a0:	2000b158 	.word	0x2000b158
 80113a4:	2000b15c 	.word	0x2000b15c

080113a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d106      	bne.n	80113c4 <tcp_input_delayed_close+0x1c>
 80113b6:	4b17      	ldr	r3, [pc, #92]	@ (8011414 <tcp_input_delayed_close+0x6c>)
 80113b8:	f240 225a 	movw	r2, #602	@ 0x25a
 80113bc:	4916      	ldr	r1, [pc, #88]	@ (8011418 <tcp_input_delayed_close+0x70>)
 80113be:	4817      	ldr	r0, [pc, #92]	@ (801141c <tcp_input_delayed_close+0x74>)
 80113c0:	f008 fea8 	bl	801a114 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80113c4:	4b16      	ldr	r3, [pc, #88]	@ (8011420 <tcp_input_delayed_close+0x78>)
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	f003 0310 	and.w	r3, r3, #16
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01c      	beq.n	801140a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8b5b      	ldrh	r3, [r3, #26]
 80113d4:	f003 0310 	and.w	r3, r3, #16
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d10d      	bne.n	80113f8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d008      	beq.n	80113f8 <tcp_input_delayed_close+0x50>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	6912      	ldr	r2, [r2, #16]
 80113f0:	f06f 010e 	mvn.w	r1, #14
 80113f4:	4610      	mov	r0, r2
 80113f6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80113f8:	6879      	ldr	r1, [r7, #4]
 80113fa:	480a      	ldr	r0, [pc, #40]	@ (8011424 <tcp_input_delayed_close+0x7c>)
 80113fc:	f7ff fa60 	bl	80108c0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fd fcb1 	bl	800ed68 <tcp_free>
    return 1;
 8011406:	2301      	movs	r3, #1
 8011408:	e000      	b.n	801140c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	0801d51c 	.word	0x0801d51c
 8011418:	0801d6ec 	.word	0x0801d6ec
 801141c:	0801d568 	.word	0x0801d568
 8011420:	200176b5 	.word	0x200176b5
 8011424:	20017678 	.word	0x20017678

08011428 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011428:	b590      	push	{r4, r7, lr}
 801142a:	b08b      	sub	sp, #44	@ 0x2c
 801142c:	af04      	add	r7, sp, #16
 801142e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011430:	4b6f      	ldr	r3, [pc, #444]	@ (80115f0 <tcp_listen_input+0x1c8>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 0304 	and.w	r3, r3, #4
 8011438:	2b00      	cmp	r3, #0
 801143a:	f040 80d2 	bne.w	80115e2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d106      	bne.n	8011452 <tcp_listen_input+0x2a>
 8011444:	4b6b      	ldr	r3, [pc, #428]	@ (80115f4 <tcp_listen_input+0x1cc>)
 8011446:	f240 2281 	movw	r2, #641	@ 0x281
 801144a:	496b      	ldr	r1, [pc, #428]	@ (80115f8 <tcp_listen_input+0x1d0>)
 801144c:	486b      	ldr	r0, [pc, #428]	@ (80115fc <tcp_listen_input+0x1d4>)
 801144e:	f008 fe61 	bl	801a114 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011452:	4b67      	ldr	r3, [pc, #412]	@ (80115f0 <tcp_listen_input+0x1c8>)
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	f003 0310 	and.w	r3, r3, #16
 801145a:	2b00      	cmp	r3, #0
 801145c:	d019      	beq.n	8011492 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801145e:	4b68      	ldr	r3, [pc, #416]	@ (8011600 <tcp_listen_input+0x1d8>)
 8011460:	6819      	ldr	r1, [r3, #0]
 8011462:	4b68      	ldr	r3, [pc, #416]	@ (8011604 <tcp_listen_input+0x1dc>)
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	461a      	mov	r2, r3
 8011468:	4b67      	ldr	r3, [pc, #412]	@ (8011608 <tcp_listen_input+0x1e0>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801146e:	4b67      	ldr	r3, [pc, #412]	@ (801160c <tcp_listen_input+0x1e4>)
 8011470:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011472:	885b      	ldrh	r3, [r3, #2]
 8011474:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011476:	4a65      	ldr	r2, [pc, #404]	@ (801160c <tcp_listen_input+0x1e4>)
 8011478:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801147a:	8812      	ldrh	r2, [r2, #0]
 801147c:	b292      	uxth	r2, r2
 801147e:	9202      	str	r2, [sp, #8]
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	4b63      	ldr	r3, [pc, #396]	@ (8011610 <tcp_listen_input+0x1e8>)
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	4b63      	ldr	r3, [pc, #396]	@ (8011614 <tcp_listen_input+0x1ec>)
 8011488:	4602      	mov	r2, r0
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f003 f8ae 	bl	80145ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011490:	e0a9      	b.n	80115e6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011492:	4b57      	ldr	r3, [pc, #348]	@ (80115f0 <tcp_listen_input+0x1c8>)
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	f003 0302 	and.w	r3, r3, #2
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 80a3 	beq.w	80115e6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7d5b      	ldrb	r3, [r3, #21]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff f871 	bl	801058c <tcp_alloc>
 80114aa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d111      	bne.n	80114d6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	699b      	ldr	r3, [r3, #24]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <tcp_listen_input+0xa8>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	699b      	ldr	r3, [r3, #24]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	6910      	ldr	r0, [r2, #16]
 80114c2:	f04f 32ff 	mov.w	r2, #4294967295
 80114c6:	2100      	movs	r1, #0
 80114c8:	4798      	blx	r3
 80114ca:	4603      	mov	r3, r0
 80114cc:	73bb      	strb	r3, [r7, #14]
      return;
 80114ce:	e08b      	b.n	80115e8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80114d0:	23f0      	movs	r3, #240	@ 0xf0
 80114d2:	73bb      	strb	r3, [r7, #14]
      return;
 80114d4:	e088      	b.n	80115e8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80114d6:	4b50      	ldr	r3, [pc, #320]	@ (8011618 <tcp_listen_input+0x1f0>)
 80114d8:	695a      	ldr	r2, [r3, #20]
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80114de:	4b4e      	ldr	r3, [pc, #312]	@ (8011618 <tcp_listen_input+0x1f0>)
 80114e0:	691a      	ldr	r2, [r3, #16]
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	8ada      	ldrh	r2, [r3, #22]
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80114ee:	4b47      	ldr	r3, [pc, #284]	@ (801160c <tcp_listen_input+0x1e4>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	881b      	ldrh	r3, [r3, #0]
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2203      	movs	r2, #3
 80114fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011500:	4b41      	ldr	r3, [pc, #260]	@ (8011608 <tcp_listen_input+0x1e0>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	1c5a      	adds	r2, r3, #1
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011512:	6978      	ldr	r0, [r7, #20]
 8011514:	f7ff fa5a 	bl	80109cc <tcp_next_iss>
 8011518:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	693a      	ldr	r2, [r7, #16]
 8011524:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	693a      	ldr	r2, [r7, #16]
 801152a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	693a      	ldr	r2, [r7, #16]
 8011530:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011532:	4b35      	ldr	r3, [pc, #212]	@ (8011608 <tcp_listen_input+0x1e0>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	1e5a      	subs	r2, r3, #1
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	691a      	ldr	r2, [r3, #16]
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	7a5b      	ldrb	r3, [r3, #9]
 801154e:	f003 030c 	and.w	r3, r3, #12
 8011552:	b2da      	uxtb	r2, r3
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7a1a      	ldrb	r2, [r3, #8]
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011560:	4b2e      	ldr	r3, [pc, #184]	@ (801161c <tcp_listen_input+0x1f4>)
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	60da      	str	r2, [r3, #12]
 8011568:	4a2c      	ldr	r2, [pc, #176]	@ (801161c <tcp_listen_input+0x1f4>)
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	f003 f9ff 	bl	8014970 <tcp_timer_needed>
 8011572:	4b2b      	ldr	r3, [pc, #172]	@ (8011620 <tcp_listen_input+0x1f8>)
 8011574:	2201      	movs	r2, #1
 8011576:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011578:	6978      	ldr	r0, [r7, #20]
 801157a:	f001 f9d5 	bl	8012928 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801157e:	4b23      	ldr	r3, [pc, #140]	@ (801160c <tcp_listen_input+0x1e4>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	89db      	ldrh	r3, [r3, #14]
 8011584:	b29a      	uxth	r2, r3
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	3304      	adds	r3, #4
 80115a0:	4618      	mov	r0, r3
 80115a2:	f007 f831 	bl	8018608 <ip4_route>
 80115a6:	4601      	mov	r1, r0
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	3304      	adds	r3, #4
 80115ac:	461a      	mov	r2, r3
 80115ae:	4620      	mov	r0, r4
 80115b0:	f7ff fa32 	bl	8010a18 <tcp_eff_send_mss_netif>
 80115b4:	4603      	mov	r3, r0
 80115b6:	461a      	mov	r2, r3
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80115bc:	2112      	movs	r1, #18
 80115be:	6978      	ldr	r0, [r7, #20]
 80115c0:	f002 f944 	bl	801384c <tcp_enqueue_flags>
 80115c4:	4603      	mov	r3, r0
 80115c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80115c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d004      	beq.n	80115da <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80115d0:	2100      	movs	r1, #0
 80115d2:	6978      	ldr	r0, [r7, #20]
 80115d4:	f7fd fe4e 	bl	800f274 <tcp_abandon>
      return;
 80115d8:	e006      	b.n	80115e8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80115da:	6978      	ldr	r0, [r7, #20]
 80115dc:	f002 fa24 	bl	8013a28 <tcp_output>
  return;
 80115e0:	e001      	b.n	80115e6 <tcp_listen_input+0x1be>
    return;
 80115e2:	bf00      	nop
 80115e4:	e000      	b.n	80115e8 <tcp_listen_input+0x1c0>
  return;
 80115e6:	bf00      	nop
}
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd90      	pop	{r4, r7, pc}
 80115ee:	bf00      	nop
 80115f0:	200176b4 	.word	0x200176b4
 80115f4:	0801d51c 	.word	0x0801d51c
 80115f8:	0801d714 	.word	0x0801d714
 80115fc:	0801d568 	.word	0x0801d568
 8011600:	200176ac 	.word	0x200176ac
 8011604:	200176b2 	.word	0x200176b2
 8011608:	200176a8 	.word	0x200176a8
 801160c:	20017698 	.word	0x20017698
 8011610:	2000b158 	.word	0x2000b158
 8011614:	2000b15c 	.word	0x2000b15c
 8011618:	2000b148 	.word	0x2000b148
 801161c:	20017678 	.word	0x20017678
 8011620:	20017680 	.word	0x20017680

08011624 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af04      	add	r7, sp, #16
 801162a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801162c:	4b2f      	ldr	r3, [pc, #188]	@ (80116ec <tcp_timewait_input+0xc8>)
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	f003 0304 	and.w	r3, r3, #4
 8011634:	2b00      	cmp	r3, #0
 8011636:	d153      	bne.n	80116e0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d106      	bne.n	801164c <tcp_timewait_input+0x28>
 801163e:	4b2c      	ldr	r3, [pc, #176]	@ (80116f0 <tcp_timewait_input+0xcc>)
 8011640:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011644:	492b      	ldr	r1, [pc, #172]	@ (80116f4 <tcp_timewait_input+0xd0>)
 8011646:	482c      	ldr	r0, [pc, #176]	@ (80116f8 <tcp_timewait_input+0xd4>)
 8011648:	f008 fd64 	bl	801a114 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801164c:	4b27      	ldr	r3, [pc, #156]	@ (80116ec <tcp_timewait_input+0xc8>)
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	f003 0302 	and.w	r3, r3, #2
 8011654:	2b00      	cmp	r3, #0
 8011656:	d02a      	beq.n	80116ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011658:	4b28      	ldr	r3, [pc, #160]	@ (80116fc <tcp_timewait_input+0xd8>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	db2d      	blt.n	80116c2 <tcp_timewait_input+0x9e>
 8011666:	4b25      	ldr	r3, [pc, #148]	@ (80116fc <tcp_timewait_input+0xd8>)
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166e:	6879      	ldr	r1, [r7, #4]
 8011670:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011672:	440b      	add	r3, r1
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	dc23      	bgt.n	80116c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801167a:	4b21      	ldr	r3, [pc, #132]	@ (8011700 <tcp_timewait_input+0xdc>)
 801167c:	6819      	ldr	r1, [r3, #0]
 801167e:	4b21      	ldr	r3, [pc, #132]	@ (8011704 <tcp_timewait_input+0xe0>)
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	461a      	mov	r2, r3
 8011684:	4b1d      	ldr	r3, [pc, #116]	@ (80116fc <tcp_timewait_input+0xd8>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801168a:	4b1f      	ldr	r3, [pc, #124]	@ (8011708 <tcp_timewait_input+0xe4>)
 801168c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801168e:	885b      	ldrh	r3, [r3, #2]
 8011690:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011692:	4a1d      	ldr	r2, [pc, #116]	@ (8011708 <tcp_timewait_input+0xe4>)
 8011694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011696:	8812      	ldrh	r2, [r2, #0]
 8011698:	b292      	uxth	r2, r2
 801169a:	9202      	str	r2, [sp, #8]
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	4b1b      	ldr	r3, [pc, #108]	@ (801170c <tcp_timewait_input+0xe8>)
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	4b1b      	ldr	r3, [pc, #108]	@ (8011710 <tcp_timewait_input+0xec>)
 80116a4:	4602      	mov	r2, r0
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f002 ffa0 	bl	80145ec <tcp_rst>
      return;
 80116ac:	e01b      	b.n	80116e6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80116ae:	4b0f      	ldr	r3, [pc, #60]	@ (80116ec <tcp_timewait_input+0xc8>)
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	f003 0301 	and.w	r3, r3, #1
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d003      	beq.n	80116c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80116ba:	4b16      	ldr	r3, [pc, #88]	@ (8011714 <tcp_timewait_input+0xf0>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80116c2:	4b10      	ldr	r3, [pc, #64]	@ (8011704 <tcp_timewait_input+0xe0>)
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00c      	beq.n	80116e4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8b5b      	ldrh	r3, [r3, #26]
 80116ce:	f043 0302 	orr.w	r3, r3, #2
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f002 f9a5 	bl	8013a28 <tcp_output>
  }
  return;
 80116de:	e001      	b.n	80116e4 <tcp_timewait_input+0xc0>
    return;
 80116e0:	bf00      	nop
 80116e2:	e000      	b.n	80116e6 <tcp_timewait_input+0xc2>
  return;
 80116e4:	bf00      	nop
}
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	200176b4 	.word	0x200176b4
 80116f0:	0801d51c 	.word	0x0801d51c
 80116f4:	0801d734 	.word	0x0801d734
 80116f8:	0801d568 	.word	0x0801d568
 80116fc:	200176a8 	.word	0x200176a8
 8011700:	200176ac 	.word	0x200176ac
 8011704:	200176b2 	.word	0x200176b2
 8011708:	20017698 	.word	0x20017698
 801170c:	2000b158 	.word	0x2000b158
 8011710:	2000b15c 	.word	0x2000b15c
 8011714:	2001766c 	.word	0x2001766c

08011718 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011718:	b590      	push	{r4, r7, lr}
 801171a:	b08d      	sub	sp, #52	@ 0x34
 801171c:	af04      	add	r7, sp, #16
 801171e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8011724:	2300      	movs	r3, #0
 8011726:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d106      	bne.n	801173c <tcp_process+0x24>
 801172e:	4b9d      	ldr	r3, [pc, #628]	@ (80119a4 <tcp_process+0x28c>)
 8011730:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011734:	499c      	ldr	r1, [pc, #624]	@ (80119a8 <tcp_process+0x290>)
 8011736:	489d      	ldr	r0, [pc, #628]	@ (80119ac <tcp_process+0x294>)
 8011738:	f008 fcec 	bl	801a114 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801173c:	4b9c      	ldr	r3, [pc, #624]	@ (80119b0 <tcp_process+0x298>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	f003 0304 	and.w	r3, r3, #4
 8011744:	2b00      	cmp	r3, #0
 8011746:	d04e      	beq.n	80117e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	7d1b      	ldrb	r3, [r3, #20]
 801174c:	2b02      	cmp	r3, #2
 801174e:	d108      	bne.n	8011762 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011754:	4b97      	ldr	r3, [pc, #604]	@ (80119b4 <tcp_process+0x29c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	429a      	cmp	r2, r3
 801175a:	d123      	bne.n	80117a4 <tcp_process+0x8c>
        acceptable = 1;
 801175c:	2301      	movs	r3, #1
 801175e:	77fb      	strb	r3, [r7, #31]
 8011760:	e020      	b.n	80117a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011766:	4b94      	ldr	r3, [pc, #592]	@ (80119b8 <tcp_process+0x2a0>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	429a      	cmp	r2, r3
 801176c:	d102      	bne.n	8011774 <tcp_process+0x5c>
        acceptable = 1;
 801176e:	2301      	movs	r3, #1
 8011770:	77fb      	strb	r3, [r7, #31]
 8011772:	e017      	b.n	80117a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011774:	4b90      	ldr	r3, [pc, #576]	@ (80119b8 <tcp_process+0x2a0>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	db10      	blt.n	80117a4 <tcp_process+0x8c>
 8011782:	4b8d      	ldr	r3, [pc, #564]	@ (80119b8 <tcp_process+0x2a0>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801178a:	6879      	ldr	r1, [r7, #4]
 801178c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801178e:	440b      	add	r3, r1
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	dc06      	bgt.n	80117a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	8b5b      	ldrh	r3, [r3, #26]
 801179a:	f043 0302 	orr.w	r3, r3, #2
 801179e:	b29a      	uxth	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80117a4:	7ffb      	ldrb	r3, [r7, #31]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d01b      	beq.n	80117e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	7d1b      	ldrb	r3, [r3, #20]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d106      	bne.n	80117c0 <tcp_process+0xa8>
 80117b2:	4b7c      	ldr	r3, [pc, #496]	@ (80119a4 <tcp_process+0x28c>)
 80117b4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80117b8:	4980      	ldr	r1, [pc, #512]	@ (80119bc <tcp_process+0x2a4>)
 80117ba:	487c      	ldr	r0, [pc, #496]	@ (80119ac <tcp_process+0x294>)
 80117bc:	f008 fcaa 	bl	801a114 <iprintf>
      recv_flags |= TF_RESET;
 80117c0:	4b7f      	ldr	r3, [pc, #508]	@ (80119c0 <tcp_process+0x2a8>)
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	f043 0308 	orr.w	r3, r3, #8
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	4b7d      	ldr	r3, [pc, #500]	@ (80119c0 <tcp_process+0x2a8>)
 80117cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8b5b      	ldrh	r3, [r3, #26]
 80117d2:	f023 0301 	bic.w	r3, r3, #1
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80117dc:	f06f 030d 	mvn.w	r3, #13
 80117e0:	e37a      	b.n	8011ed8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80117e2:	2300      	movs	r3, #0
 80117e4:	e378      	b.n	8011ed8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80117e6:	4b72      	ldr	r3, [pc, #456]	@ (80119b0 <tcp_process+0x298>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	f003 0302 	and.w	r3, r3, #2
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d010      	beq.n	8011814 <tcp_process+0xfc>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	7d1b      	ldrb	r3, [r3, #20]
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d00c      	beq.n	8011814 <tcp_process+0xfc>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	7d1b      	ldrb	r3, [r3, #20]
 80117fe:	2b03      	cmp	r3, #3
 8011800:	d008      	beq.n	8011814 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	8b5b      	ldrh	r3, [r3, #26]
 8011806:	f043 0302 	orr.w	r3, r3, #2
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	e361      	b.n	8011ed8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8b5b      	ldrh	r3, [r3, #26]
 8011818:	f003 0310 	and.w	r3, r3, #16
 801181c:	2b00      	cmp	r3, #0
 801181e:	d103      	bne.n	8011828 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011820:	4b68      	ldr	r3, [pc, #416]	@ (80119c4 <tcp_process+0x2ac>)
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f001 f875 	bl	8012928 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	7d1b      	ldrb	r3, [r3, #20]
 8011842:	3b02      	subs	r3, #2
 8011844:	2b07      	cmp	r3, #7
 8011846:	f200 8337 	bhi.w	8011eb8 <tcp_process+0x7a0>
 801184a:	a201      	add	r2, pc, #4	@ (adr r2, 8011850 <tcp_process+0x138>)
 801184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011850:	08011871 	.word	0x08011871
 8011854:	08011aa1 	.word	0x08011aa1
 8011858:	08011c19 	.word	0x08011c19
 801185c:	08011c43 	.word	0x08011c43
 8011860:	08011d67 	.word	0x08011d67
 8011864:	08011c19 	.word	0x08011c19
 8011868:	08011df3 	.word	0x08011df3
 801186c:	08011e83 	.word	0x08011e83
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011870:	4b4f      	ldr	r3, [pc, #316]	@ (80119b0 <tcp_process+0x298>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	f003 0310 	and.w	r3, r3, #16
 8011878:	2b00      	cmp	r3, #0
 801187a:	f000 80e4 	beq.w	8011a46 <tcp_process+0x32e>
 801187e:	4b4c      	ldr	r3, [pc, #304]	@ (80119b0 <tcp_process+0x298>)
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	f003 0302 	and.w	r3, r3, #2
 8011886:	2b00      	cmp	r3, #0
 8011888:	f000 80dd 	beq.w	8011a46 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	4b48      	ldr	r3, [pc, #288]	@ (80119b4 <tcp_process+0x29c>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	f040 80d5 	bne.w	8011a46 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801189c:	4b46      	ldr	r3, [pc, #280]	@ (80119b8 <tcp_process+0x2a0>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80118ae:	4b41      	ldr	r3, [pc, #260]	@ (80119b4 <tcp_process+0x29c>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80118b6:	4b44      	ldr	r3, [pc, #272]	@ (80119c8 <tcp_process+0x2b0>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	89db      	ldrh	r3, [r3, #14]
 80118bc:	b29a      	uxth	r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80118d0:	4b39      	ldr	r3, [pc, #228]	@ (80119b8 <tcp_process+0x2a0>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	1e5a      	subs	r2, r3, #1
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2204      	movs	r2, #4
 80118de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	3304      	adds	r3, #4
 80118e8:	4618      	mov	r0, r3
 80118ea:	f006 fe8d 	bl	8018608 <ip4_route>
 80118ee:	4601      	mov	r1, r0
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	3304      	adds	r3, #4
 80118f4:	461a      	mov	r2, r3
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff f88e 	bl	8010a18 <tcp_eff_send_mss_netif>
 80118fc:	4603      	mov	r3, r0
 80118fe:	461a      	mov	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011908:	009a      	lsls	r2, r3, #2
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011914:	428b      	cmp	r3, r1
 8011916:	bf38      	it	cc
 8011918:	460b      	movcc	r3, r1
 801191a:	429a      	cmp	r2, r3
 801191c:	d204      	bcs.n	8011928 <tcp_process+0x210>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	b29b      	uxth	r3, r3
 8011926:	e00d      	b.n	8011944 <tcp_process+0x22c>
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011932:	4293      	cmp	r3, r2
 8011934:	d904      	bls.n	8011940 <tcp_process+0x228>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	b29b      	uxth	r3, r3
 801193e:	e001      	b.n	8011944 <tcp_process+0x22c>
 8011940:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011950:	2b00      	cmp	r3, #0
 8011952:	d106      	bne.n	8011962 <tcp_process+0x24a>
 8011954:	4b13      	ldr	r3, [pc, #76]	@ (80119a4 <tcp_process+0x28c>)
 8011956:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801195a:	491c      	ldr	r1, [pc, #112]	@ (80119cc <tcp_process+0x2b4>)
 801195c:	4813      	ldr	r0, [pc, #76]	@ (80119ac <tcp_process+0x294>)
 801195e:	f008 fbd9 	bl	801a114 <iprintf>
        --pcb->snd_queuelen;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011968:	3b01      	subs	r3, #1
 801196a:	b29a      	uxth	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011976:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d12a      	bne.n	80119d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011982:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d106      	bne.n	8011998 <tcp_process+0x280>
 801198a:	4b06      	ldr	r3, [pc, #24]	@ (80119a4 <tcp_process+0x28c>)
 801198c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011990:	490f      	ldr	r1, [pc, #60]	@ (80119d0 <tcp_process+0x2b8>)
 8011992:	4806      	ldr	r0, [pc, #24]	@ (80119ac <tcp_process+0x294>)
 8011994:	f008 fbbe 	bl	801a114 <iprintf>
          pcb->unsent = rseg->next;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80119a0:	e01c      	b.n	80119dc <tcp_process+0x2c4>
 80119a2:	bf00      	nop
 80119a4:	0801d51c 	.word	0x0801d51c
 80119a8:	0801d754 	.word	0x0801d754
 80119ac:	0801d568 	.word	0x0801d568
 80119b0:	200176b4 	.word	0x200176b4
 80119b4:	200176ac 	.word	0x200176ac
 80119b8:	200176a8 	.word	0x200176a8
 80119bc:	0801d770 	.word	0x0801d770
 80119c0:	200176b5 	.word	0x200176b5
 80119c4:	2001766c 	.word	0x2001766c
 80119c8:	20017698 	.word	0x20017698
 80119cc:	0801d790 	.word	0x0801d790
 80119d0:	0801d7a8 	.word	0x0801d7a8
        } else {
          pcb->unacked = rseg->next;
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80119dc:	6978      	ldr	r0, [r7, #20]
 80119de:	f7fe fc98 	bl	8010312 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d104      	bne.n	80119f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80119f2:	e006      	b.n	8011a02 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d00a      	beq.n	8011a22 <tcp_process+0x30a>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	6910      	ldr	r0, [r2, #16]
 8011a16:	2200      	movs	r2, #0
 8011a18:	6879      	ldr	r1, [r7, #4]
 8011a1a:	4798      	blx	r3
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	77bb      	strb	r3, [r7, #30]
 8011a20:	e001      	b.n	8011a26 <tcp_process+0x30e>
 8011a22:	2300      	movs	r3, #0
 8011a24:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8011a26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011a2a:	f113 0f0d 	cmn.w	r3, #13
 8011a2e:	d102      	bne.n	8011a36 <tcp_process+0x31e>
          return ERR_ABRT;
 8011a30:	f06f 030c 	mvn.w	r3, #12
 8011a34:	e250      	b.n	8011ed8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8b5b      	ldrh	r3, [r3, #26]
 8011a3a:	f043 0302 	orr.w	r3, r3, #2
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011a44:	e23a      	b.n	8011ebc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011a46:	4b98      	ldr	r3, [pc, #608]	@ (8011ca8 <tcp_process+0x590>)
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	f003 0310 	and.w	r3, r3, #16
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 8234 	beq.w	8011ebc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a54:	4b95      	ldr	r3, [pc, #596]	@ (8011cac <tcp_process+0x594>)
 8011a56:	6819      	ldr	r1, [r3, #0]
 8011a58:	4b95      	ldr	r3, [pc, #596]	@ (8011cb0 <tcp_process+0x598>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4b95      	ldr	r3, [pc, #596]	@ (8011cb4 <tcp_process+0x59c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a64:	4b94      	ldr	r3, [pc, #592]	@ (8011cb8 <tcp_process+0x5a0>)
 8011a66:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a68:	885b      	ldrh	r3, [r3, #2]
 8011a6a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a6c:	4a92      	ldr	r2, [pc, #584]	@ (8011cb8 <tcp_process+0x5a0>)
 8011a6e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a70:	8812      	ldrh	r2, [r2, #0]
 8011a72:	b292      	uxth	r2, r2
 8011a74:	9202      	str	r2, [sp, #8]
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	4b90      	ldr	r3, [pc, #576]	@ (8011cbc <tcp_process+0x5a4>)
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	4b90      	ldr	r3, [pc, #576]	@ (8011cc0 <tcp_process+0x5a8>)
 8011a7e:	4602      	mov	r2, r0
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f002 fdb3 	bl	80145ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a8c:	2b05      	cmp	r3, #5
 8011a8e:	f200 8215 	bhi.w	8011ebc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2200      	movs	r2, #0
 8011a96:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f002 fb6f 	bl	801417c <tcp_rexmit_rto>
      break;
 8011a9e:	e20d      	b.n	8011ebc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011aa0:	4b81      	ldr	r3, [pc, #516]	@ (8011ca8 <tcp_process+0x590>)
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	f003 0310 	and.w	r3, r3, #16
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f000 80a1 	beq.w	8011bf0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011aae:	4b7f      	ldr	r3, [pc, #508]	@ (8011cac <tcp_process+0x594>)
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ab6:	1ad3      	subs	r3, r2, r3
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	db7e      	blt.n	8011bbc <tcp_process+0x4a4>
 8011abe:	4b7b      	ldr	r3, [pc, #492]	@ (8011cac <tcp_process+0x594>)
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ac6:	1ad3      	subs	r3, r2, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dc77      	bgt.n	8011bbc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2204      	movs	r2, #4
 8011ad0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d102      	bne.n	8011ae0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011ada:	23fa      	movs	r3, #250	@ 0xfa
 8011adc:	77bb      	strb	r3, [r7, #30]
 8011ade:	e01d      	b.n	8011b1c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ae4:	699b      	ldr	r3, [r3, #24]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d106      	bne.n	8011af8 <tcp_process+0x3e0>
 8011aea:	4b76      	ldr	r3, [pc, #472]	@ (8011cc4 <tcp_process+0x5ac>)
 8011aec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011af0:	4975      	ldr	r1, [pc, #468]	@ (8011cc8 <tcp_process+0x5b0>)
 8011af2:	4876      	ldr	r0, [pc, #472]	@ (8011ccc <tcp_process+0x5b4>)
 8011af4:	f008 fb0e 	bl	801a114 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011afc:	699b      	ldr	r3, [r3, #24]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00a      	beq.n	8011b18 <tcp_process+0x400>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b06:	699b      	ldr	r3, [r3, #24]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	6910      	ldr	r0, [r2, #16]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	4798      	blx	r3
 8011b12:	4603      	mov	r3, r0
 8011b14:	77bb      	strb	r3, [r7, #30]
 8011b16:	e001      	b.n	8011b1c <tcp_process+0x404>
 8011b18:	23f0      	movs	r3, #240	@ 0xf0
 8011b1a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8011b1c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011b24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011b28:	f113 0f0d 	cmn.w	r3, #13
 8011b2c:	d002      	beq.n	8011b34 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7fd fc54 	bl	800f3dc <tcp_abort>
            }
            return ERR_ABRT;
 8011b34:	f06f 030c 	mvn.w	r3, #12
 8011b38:	e1ce      	b.n	8011ed8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 fa58 	bl	8011ff0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011b40:	4b63      	ldr	r3, [pc, #396]	@ (8011cd0 <tcp_process+0x5b8>)
 8011b42:	881b      	ldrh	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d005      	beq.n	8011b54 <tcp_process+0x43c>
            recv_acked--;
 8011b48:	4b61      	ldr	r3, [pc, #388]	@ (8011cd0 <tcp_process+0x5b8>)
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	4b5f      	ldr	r3, [pc, #380]	@ (8011cd0 <tcp_process+0x5b8>)
 8011b52:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b58:	009a      	lsls	r2, r3, #2
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b5e:	005b      	lsls	r3, r3, #1
 8011b60:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011b64:	428b      	cmp	r3, r1
 8011b66:	bf38      	it	cc
 8011b68:	460b      	movcc	r3, r1
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d204      	bcs.n	8011b78 <tcp_process+0x460>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	e00d      	b.n	8011b94 <tcp_process+0x47c>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b7c:	005b      	lsls	r3, r3, #1
 8011b7e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d904      	bls.n	8011b90 <tcp_process+0x478>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b8a:	005b      	lsls	r3, r3, #1
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	e001      	b.n	8011b94 <tcp_process+0x47c>
 8011b90:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8011cd4 <tcp_process+0x5bc>)
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	f003 0320 	and.w	r3, r3, #32
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d037      	beq.n	8011c16 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	8b5b      	ldrh	r3, [r3, #26]
 8011baa:	f043 0302 	orr.w	r3, r3, #2
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2207      	movs	r2, #7
 8011bb8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011bba:	e02c      	b.n	8011c16 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8011cac <tcp_process+0x594>)
 8011bbe:	6819      	ldr	r1, [r3, #0]
 8011bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8011cb0 <tcp_process+0x598>)
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8011cb4 <tcp_process+0x59c>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8011cb8 <tcp_process+0x5a0>)
 8011bce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd0:	885b      	ldrh	r3, [r3, #2]
 8011bd2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bd4:	4a38      	ldr	r2, [pc, #224]	@ (8011cb8 <tcp_process+0x5a0>)
 8011bd6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd8:	8812      	ldrh	r2, [r2, #0]
 8011bda:	b292      	uxth	r2, r2
 8011bdc:	9202      	str	r2, [sp, #8]
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	4b36      	ldr	r3, [pc, #216]	@ (8011cbc <tcp_process+0x5a4>)
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	4b36      	ldr	r3, [pc, #216]	@ (8011cc0 <tcp_process+0x5a8>)
 8011be6:	4602      	mov	r2, r0
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f002 fcff 	bl	80145ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011bee:	e167      	b.n	8011ec0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8011ca8 <tcp_process+0x590>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 0302 	and.w	r3, r3, #2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f000 8161 	beq.w	8011ec0 <tcp_process+0x7a8>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c02:	1e5a      	subs	r2, r3, #1
 8011c04:	4b2b      	ldr	r3, [pc, #172]	@ (8011cb4 <tcp_process+0x59c>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	f040 8159 	bne.w	8011ec0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f002 fad6 	bl	80141c0 <tcp_rexmit>
      break;
 8011c14:	e154      	b.n	8011ec0 <tcp_process+0x7a8>
 8011c16:	e153      	b.n	8011ec0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f9e9 	bl	8011ff0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8011cd4 <tcp_process+0x5bc>)
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	f003 0320 	and.w	r3, r3, #32
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f000 814c 	beq.w	8011ec4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	8b5b      	ldrh	r3, [r3, #26]
 8011c30:	f043 0302 	orr.w	r3, r3, #2
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2207      	movs	r2, #7
 8011c3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c40:	e140      	b.n	8011ec4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f9d4 	bl	8011ff0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c48:	4b22      	ldr	r3, [pc, #136]	@ (8011cd4 <tcp_process+0x5bc>)
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	f003 0320 	and.w	r3, r3, #32
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d071      	beq.n	8011d38 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c54:	4b14      	ldr	r3, [pc, #80]	@ (8011ca8 <tcp_process+0x590>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	f003 0310 	and.w	r3, r3, #16
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d060      	beq.n	8011d22 <tcp_process+0x60a>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c64:	4b11      	ldr	r3, [pc, #68]	@ (8011cac <tcp_process+0x594>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d15a      	bne.n	8011d22 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d156      	bne.n	8011d22 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	8b5b      	ldrh	r3, [r3, #26]
 8011c78:	f043 0302 	orr.w	r3, r3, #2
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f7fe fdd2 	bl	801082c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011c88:	4b13      	ldr	r3, [pc, #76]	@ (8011cd8 <tcp_process+0x5c0>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d105      	bne.n	8011c9e <tcp_process+0x586>
 8011c92:	4b11      	ldr	r3, [pc, #68]	@ (8011cd8 <tcp_process+0x5c0>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	4a0f      	ldr	r2, [pc, #60]	@ (8011cd8 <tcp_process+0x5c0>)
 8011c9a:	6013      	str	r3, [r2, #0]
 8011c9c:	e02e      	b.n	8011cfc <tcp_process+0x5e4>
 8011c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011cd8 <tcp_process+0x5c0>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	613b      	str	r3, [r7, #16]
 8011ca4:	e027      	b.n	8011cf6 <tcp_process+0x5de>
 8011ca6:	bf00      	nop
 8011ca8:	200176b4 	.word	0x200176b4
 8011cac:	200176ac 	.word	0x200176ac
 8011cb0:	200176b2 	.word	0x200176b2
 8011cb4:	200176a8 	.word	0x200176a8
 8011cb8:	20017698 	.word	0x20017698
 8011cbc:	2000b158 	.word	0x2000b158
 8011cc0:	2000b15c 	.word	0x2000b15c
 8011cc4:	0801d51c 	.word	0x0801d51c
 8011cc8:	0801d7bc 	.word	0x0801d7bc
 8011ccc:	0801d568 	.word	0x0801d568
 8011cd0:	200176b0 	.word	0x200176b0
 8011cd4:	200176b5 	.word	0x200176b5
 8011cd8:	20017678 	.word	0x20017678
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d104      	bne.n	8011cf0 <tcp_process+0x5d8>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	60da      	str	r2, [r3, #12]
 8011cee:	e005      	b.n	8011cfc <tcp_process+0x5e4>
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	613b      	str	r3, [r7, #16]
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1ef      	bne.n	8011cdc <tcp_process+0x5c4>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	60da      	str	r2, [r3, #12]
 8011d02:	4b77      	ldr	r3, [pc, #476]	@ (8011ee0 <tcp_process+0x7c8>)
 8011d04:	2201      	movs	r2, #1
 8011d06:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	220a      	movs	r2, #10
 8011d0c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011d0e:	4b75      	ldr	r3, [pc, #468]	@ (8011ee4 <tcp_process+0x7cc>)
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	60da      	str	r2, [r3, #12]
 8011d16:	4a73      	ldr	r2, [pc, #460]	@ (8011ee4 <tcp_process+0x7cc>)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6013      	str	r3, [r2, #0]
 8011d1c:	f002 fe28 	bl	8014970 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011d20:	e0d2      	b.n	8011ec8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	8b5b      	ldrh	r3, [r3, #26]
 8011d26:	f043 0302 	orr.w	r3, r3, #2
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2208      	movs	r2, #8
 8011d34:	751a      	strb	r2, [r3, #20]
      break;
 8011d36:	e0c7      	b.n	8011ec8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d38:	4b6b      	ldr	r3, [pc, #428]	@ (8011ee8 <tcp_process+0x7d0>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	f003 0310 	and.w	r3, r3, #16
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 80c1 	beq.w	8011ec8 <tcp_process+0x7b0>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d4a:	4b68      	ldr	r3, [pc, #416]	@ (8011eec <tcp_process+0x7d4>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	f040 80ba 	bne.w	8011ec8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f040 80b5 	bne.w	8011ec8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2206      	movs	r2, #6
 8011d62:	751a      	strb	r2, [r3, #20]
      break;
 8011d64:	e0b0      	b.n	8011ec8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 f942 	bl	8011ff0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d6c:	4b60      	ldr	r3, [pc, #384]	@ (8011ef0 <tcp_process+0x7d8>)
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	f003 0320 	and.w	r3, r3, #32
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f000 80a9 	beq.w	8011ecc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8b5b      	ldrh	r3, [r3, #26]
 8011d7e:	f043 0302 	orr.w	r3, r3, #2
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f7fe fd4f 	bl	801082c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d8e:	4b59      	ldr	r3, [pc, #356]	@ (8011ef4 <tcp_process+0x7dc>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d105      	bne.n	8011da4 <tcp_process+0x68c>
 8011d98:	4b56      	ldr	r3, [pc, #344]	@ (8011ef4 <tcp_process+0x7dc>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	4a55      	ldr	r2, [pc, #340]	@ (8011ef4 <tcp_process+0x7dc>)
 8011da0:	6013      	str	r3, [r2, #0]
 8011da2:	e013      	b.n	8011dcc <tcp_process+0x6b4>
 8011da4:	4b53      	ldr	r3, [pc, #332]	@ (8011ef4 <tcp_process+0x7dc>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e00c      	b.n	8011dc6 <tcp_process+0x6ae>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d104      	bne.n	8011dc0 <tcp_process+0x6a8>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	68da      	ldr	r2, [r3, #12]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	60da      	str	r2, [r3, #12]
 8011dbe:	e005      	b.n	8011dcc <tcp_process+0x6b4>
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1ef      	bne.n	8011dac <tcp_process+0x694>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	60da      	str	r2, [r3, #12]
 8011dd2:	4b43      	ldr	r3, [pc, #268]	@ (8011ee0 <tcp_process+0x7c8>)
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	220a      	movs	r2, #10
 8011ddc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011dde:	4b41      	ldr	r3, [pc, #260]	@ (8011ee4 <tcp_process+0x7cc>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	60da      	str	r2, [r3, #12]
 8011de6:	4a3f      	ldr	r2, [pc, #252]	@ (8011ee4 <tcp_process+0x7cc>)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6013      	str	r3, [r2, #0]
 8011dec:	f002 fdc0 	bl	8014970 <tcp_timer_needed>
      }
      break;
 8011df0:	e06c      	b.n	8011ecc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 f8fc 	bl	8011ff0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011df8:	4b3b      	ldr	r3, [pc, #236]	@ (8011ee8 <tcp_process+0x7d0>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	f003 0310 	and.w	r3, r3, #16
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d065      	beq.n	8011ed0 <tcp_process+0x7b8>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e08:	4b38      	ldr	r3, [pc, #224]	@ (8011eec <tcp_process+0x7d4>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d15f      	bne.n	8011ed0 <tcp_process+0x7b8>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d15b      	bne.n	8011ed0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f7fe fd07 	bl	801082c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011e1e:	4b35      	ldr	r3, [pc, #212]	@ (8011ef4 <tcp_process+0x7dc>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d105      	bne.n	8011e34 <tcp_process+0x71c>
 8011e28:	4b32      	ldr	r3, [pc, #200]	@ (8011ef4 <tcp_process+0x7dc>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	4a31      	ldr	r2, [pc, #196]	@ (8011ef4 <tcp_process+0x7dc>)
 8011e30:	6013      	str	r3, [r2, #0]
 8011e32:	e013      	b.n	8011e5c <tcp_process+0x744>
 8011e34:	4b2f      	ldr	r3, [pc, #188]	@ (8011ef4 <tcp_process+0x7dc>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	61bb      	str	r3, [r7, #24]
 8011e3a:	e00c      	b.n	8011e56 <tcp_process+0x73e>
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d104      	bne.n	8011e50 <tcp_process+0x738>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	68da      	ldr	r2, [r3, #12]
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	60da      	str	r2, [r3, #12]
 8011e4e:	e005      	b.n	8011e5c <tcp_process+0x744>
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	61bb      	str	r3, [r7, #24]
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1ef      	bne.n	8011e3c <tcp_process+0x724>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	60da      	str	r2, [r3, #12]
 8011e62:	4b1f      	ldr	r3, [pc, #124]	@ (8011ee0 <tcp_process+0x7c8>)
 8011e64:	2201      	movs	r2, #1
 8011e66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	220a      	movs	r2, #10
 8011e6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ee4 <tcp_process+0x7cc>)
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	60da      	str	r2, [r3, #12]
 8011e76:	4a1b      	ldr	r2, [pc, #108]	@ (8011ee4 <tcp_process+0x7cc>)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6013      	str	r3, [r2, #0]
 8011e7c:	f002 fd78 	bl	8014970 <tcp_timer_needed>
      }
      break;
 8011e80:	e026      	b.n	8011ed0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 f8b4 	bl	8011ff0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011e88:	4b17      	ldr	r3, [pc, #92]	@ (8011ee8 <tcp_process+0x7d0>)
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	f003 0310 	and.w	r3, r3, #16
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d01f      	beq.n	8011ed4 <tcp_process+0x7bc>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e98:	4b14      	ldr	r3, [pc, #80]	@ (8011eec <tcp_process+0x7d4>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d119      	bne.n	8011ed4 <tcp_process+0x7bc>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d115      	bne.n	8011ed4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011ea8:	4b11      	ldr	r3, [pc, #68]	@ (8011ef0 <tcp_process+0x7d8>)
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	f043 0310 	orr.w	r3, r3, #16
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8011ef0 <tcp_process+0x7d8>)
 8011eb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011eb6:	e00d      	b.n	8011ed4 <tcp_process+0x7bc>
    default:
      break;
 8011eb8:	bf00      	nop
 8011eba:	e00c      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ebc:	bf00      	nop
 8011ebe:	e00a      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ec0:	bf00      	nop
 8011ec2:	e008      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ec4:	bf00      	nop
 8011ec6:	e006      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ec8:	bf00      	nop
 8011eca:	e004      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ecc:	bf00      	nop
 8011ece:	e002      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ed0:	bf00      	nop
 8011ed2:	e000      	b.n	8011ed6 <tcp_process+0x7be>
      break;
 8011ed4:	bf00      	nop
  }
  return ERR_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3724      	adds	r7, #36	@ 0x24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd90      	pop	{r4, r7, pc}
 8011ee0:	20017680 	.word	0x20017680
 8011ee4:	2001767c 	.word	0x2001767c
 8011ee8:	200176b4 	.word	0x200176b4
 8011eec:	200176ac 	.word	0x200176ac
 8011ef0:	200176b5 	.word	0x200176b5
 8011ef4:	20017678 	.word	0x20017678

08011ef8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ef8:	b5b0      	push	{r4, r5, r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
 8011f04:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011f06:	e03e      	b.n	8011f86 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fc fcf8 	bl	800e90c <pbuf_clen>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f26:	8a7a      	ldrh	r2, [r7, #18]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d906      	bls.n	8011f3a <tcp_free_acked_segments+0x42>
 8011f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8011fd8 <tcp_free_acked_segments+0xe0>)
 8011f2e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011f32:	492a      	ldr	r1, [pc, #168]	@ (8011fdc <tcp_free_acked_segments+0xe4>)
 8011f34:	482a      	ldr	r0, [pc, #168]	@ (8011fe0 <tcp_free_acked_segments+0xe8>)
 8011f36:	f008 f8ed 	bl	801a114 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011f40:	8a7b      	ldrh	r3, [r7, #18]
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	891a      	ldrh	r2, [r3, #8]
 8011f50:	4b24      	ldr	r3, [pc, #144]	@ (8011fe4 <tcp_free_acked_segments+0xec>)
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	4413      	add	r3, r2
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	4b22      	ldr	r3, [pc, #136]	@ (8011fe4 <tcp_free_acked_segments+0xec>)
 8011f5a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f5c:	6978      	ldr	r0, [r7, #20]
 8011f5e:	f7fe f9d8 	bl	8010312 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00c      	beq.n	8011f86 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d109      	bne.n	8011f86 <tcp_free_acked_segments+0x8e>
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <tcp_free_acked_segments+0x8e>
 8011f78:	4b17      	ldr	r3, [pc, #92]	@ (8011fd8 <tcp_free_acked_segments+0xe0>)
 8011f7a:	f240 4261 	movw	r2, #1121	@ 0x461
 8011f7e:	491a      	ldr	r1, [pc, #104]	@ (8011fe8 <tcp_free_acked_segments+0xf0>)
 8011f80:	4817      	ldr	r0, [pc, #92]	@ (8011fe0 <tcp_free_acked_segments+0xe8>)
 8011f82:	f008 f8c7 	bl	801a114 <iprintf>
  while (seg_list != NULL &&
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d020      	beq.n	8011fce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fa ff6a 	bl	800ce6c <lwip_htonl>
 8011f98:	4604      	mov	r4, r0
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	891b      	ldrh	r3, [r3, #8]
 8011f9e:	461d      	mov	r5, r3
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	691b      	ldr	r3, [r3, #16]
 8011fa4:	899b      	ldrh	r3, [r3, #12]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fa ff49 	bl	800ce40 <lwip_htons>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	f003 0303 	and.w	r3, r3, #3
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d001      	beq.n	8011fbe <tcp_free_acked_segments+0xc6>
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e000      	b.n	8011fc0 <tcp_free_acked_segments+0xc8>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	442b      	add	r3, r5
 8011fc2:	18e2      	adds	r2, r4, r3
 8011fc4:	4b09      	ldr	r3, [pc, #36]	@ (8011fec <tcp_free_acked_segments+0xf4>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	dd9c      	ble.n	8011f08 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011fce:	68bb      	ldr	r3, [r7, #8]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8011fd8:	0801d51c 	.word	0x0801d51c
 8011fdc:	0801d7dc 	.word	0x0801d7dc
 8011fe0:	0801d568 	.word	0x0801d568
 8011fe4:	200176b0 	.word	0x200176b0
 8011fe8:	0801d804 	.word	0x0801d804
 8011fec:	200176ac 	.word	0x200176ac

08011ff0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b08b      	sub	sp, #44	@ 0x2c
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <tcp_receive+0x20>
 8012002:	4b91      	ldr	r3, [pc, #580]	@ (8012248 <tcp_receive+0x258>)
 8012004:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012008:	4990      	ldr	r1, [pc, #576]	@ (801224c <tcp_receive+0x25c>)
 801200a:	4891      	ldr	r0, [pc, #580]	@ (8012250 <tcp_receive+0x260>)
 801200c:	f008 f882 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	7d1b      	ldrb	r3, [r3, #20]
 8012014:	2b03      	cmp	r3, #3
 8012016:	d806      	bhi.n	8012026 <tcp_receive+0x36>
 8012018:	4b8b      	ldr	r3, [pc, #556]	@ (8012248 <tcp_receive+0x258>)
 801201a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801201e:	498d      	ldr	r1, [pc, #564]	@ (8012254 <tcp_receive+0x264>)
 8012020:	488b      	ldr	r0, [pc, #556]	@ (8012250 <tcp_receive+0x260>)
 8012022:	f008 f877 	bl	801a114 <iprintf>

  if (flags & TCP_ACK) {
 8012026:	4b8c      	ldr	r3, [pc, #560]	@ (8012258 <tcp_receive+0x268>)
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	f003 0310 	and.w	r3, r3, #16
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 8259 	beq.w	80124e6 <tcp_receive+0x4f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801203a:	461a      	mov	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012040:	4413      	add	r3, r2
 8012042:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012048:	4b84      	ldr	r3, [pc, #528]	@ (801225c <tcp_receive+0x26c>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	db1b      	blt.n	801208a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012056:	4b81      	ldr	r3, [pc, #516]	@ (801225c <tcp_receive+0x26c>)
 8012058:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801205a:	429a      	cmp	r2, r3
 801205c:	d106      	bne.n	801206c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012062:	4b7f      	ldr	r3, [pc, #508]	@ (8012260 <tcp_receive+0x270>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	db0e      	blt.n	801208a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012070:	4b7b      	ldr	r3, [pc, #492]	@ (8012260 <tcp_receive+0x270>)
 8012072:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012074:	429a      	cmp	r2, r3
 8012076:	d125      	bne.n	80120c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012078:	4b7a      	ldr	r3, [pc, #488]	@ (8012264 <tcp_receive+0x274>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	89db      	ldrh	r3, [r3, #14]
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012086:	429a      	cmp	r2, r3
 8012088:	d91c      	bls.n	80120c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801208a:	4b76      	ldr	r3, [pc, #472]	@ (8012264 <tcp_receive+0x274>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	89db      	ldrh	r3, [r3, #14]
 8012090:	b29a      	uxth	r2, r3
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d205      	bcs.n	80120b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80120b4:	4b69      	ldr	r3, [pc, #420]	@ (801225c <tcp_receive+0x26c>)
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80120bc:	4b68      	ldr	r3, [pc, #416]	@ (8012260 <tcp_receive+0x270>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80120c4:	4b66      	ldr	r3, [pc, #408]	@ (8012260 <tcp_receive+0x270>)
 80120c6:	681a      	ldr	r2, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120cc:	1ad3      	subs	r3, r2, r3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	dc58      	bgt.n	8012184 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80120d2:	4b65      	ldr	r3, [pc, #404]	@ (8012268 <tcp_receive+0x278>)
 80120d4:	881b      	ldrh	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d14b      	bne.n	8012172 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80120e4:	4413      	add	r3, r2
 80120e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d142      	bne.n	8012172 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	db3d      	blt.n	8012172 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120fa:	4b59      	ldr	r3, [pc, #356]	@ (8012260 <tcp_receive+0x270>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d137      	bne.n	8012172 <tcp_receive+0x182>
              found_dupack = 1;
 8012102:	2301      	movs	r3, #1
 8012104:	623b      	str	r3, [r7, #32]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801210c:	2bff      	cmp	r3, #255	@ 0xff
 801210e:	d007      	beq.n	8012120 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012116:	3301      	adds	r3, #1
 8012118:	b2da      	uxtb	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012126:	2b03      	cmp	r3, #3
 8012128:	d91b      	bls.n	8012162 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012134:	4413      	add	r3, r2
 8012136:	b29a      	uxth	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801213e:	429a      	cmp	r2, r3
 8012140:	d30a      	bcc.n	8012158 <tcp_receive+0x168>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801214c:	4413      	add	r3, r2
 801214e:	b29a      	uxth	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012156:	e004      	b.n	8012162 <tcp_receive+0x172>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801215e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012168:	2b02      	cmp	r3, #2
 801216a:	d902      	bls.n	8012172 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f002 f893 	bl	8014298 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	2b00      	cmp	r3, #0
 8012176:	f040 815f 	bne.w	8012438 <tcp_receive+0x448>
        pcb->dupacks = 0;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012182:	e159      	b.n	8012438 <tcp_receive+0x448>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012184:	4b36      	ldr	r3, [pc, #216]	@ (8012260 <tcp_receive+0x270>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	3b01      	subs	r3, #1
 8012190:	2b00      	cmp	r3, #0
 8012192:	f2c0 814c 	blt.w	801242e <tcp_receive+0x43e>
 8012196:	4b32      	ldr	r3, [pc, #200]	@ (8012260 <tcp_receive+0x270>)
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f300 8144 	bgt.w	801242e <tcp_receive+0x43e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8b5b      	ldrh	r3, [r3, #26]
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d010      	beq.n	80121d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	8b5b      	ldrh	r3, [r3, #26]
 80121b6:	f023 0304 	bic.w	r3, r3, #4
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80121e2:	10db      	asrs	r3, r3, #3
 80121e4:	b21b      	sxth	r3, r3
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	4413      	add	r3, r2
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	b21a      	sxth	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80121fc:	4b18      	ldr	r3, [pc, #96]	@ (8012260 <tcp_receive+0x270>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	b29a      	uxth	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012206:	b29b      	uxth	r3, r3
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	82bb      	strh	r3, [r7, #20]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2200      	movs	r2, #0
 8012210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012214:	4b12      	ldr	r3, [pc, #72]	@ (8012260 <tcp_receive+0x270>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	7d1b      	ldrb	r3, [r3, #20]
 8012220:	2b03      	cmp	r3, #3
 8012222:	f240 8095 	bls.w	8012350 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012232:	429a      	cmp	r2, r3
 8012234:	d243      	bcs.n	80122be <tcp_receive+0x2ce>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	8b5b      	ldrh	r3, [r3, #26]
 801223a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801223e:	2b00      	cmp	r3, #0
 8012240:	d014      	beq.n	801226c <tcp_receive+0x27c>
 8012242:	2301      	movs	r3, #1
 8012244:	e013      	b.n	801226e <tcp_receive+0x27e>
 8012246:	bf00      	nop
 8012248:	0801d51c 	.word	0x0801d51c
 801224c:	0801d824 	.word	0x0801d824
 8012250:	0801d568 	.word	0x0801d568
 8012254:	0801d840 	.word	0x0801d840
 8012258:	200176b4 	.word	0x200176b4
 801225c:	200176a8 	.word	0x200176a8
 8012260:	200176ac 	.word	0x200176ac
 8012264:	20017698 	.word	0x20017698
 8012268:	200176b2 	.word	0x200176b2
 801226c:	2302      	movs	r3, #2
 801226e:	74fb      	strb	r3, [r7, #19]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012270:	7cfb      	ldrb	r3, [r7, #19]
 8012272:	b29a      	uxth	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012278:	fb12 f303 	smulbb	r3, r2, r3
 801227c:	b29b      	uxth	r3, r3
 801227e:	8aba      	ldrh	r2, [r7, #20]
 8012280:	4293      	cmp	r3, r2
 8012282:	bf28      	it	cs
 8012284:	4613      	movcs	r3, r2
 8012286:	823b      	strh	r3, [r7, #16]
          TCP_WND_INC(pcb->cwnd, increase);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801228e:	8a3b      	ldrh	r3, [r7, #16]
 8012290:	4413      	add	r3, r2
 8012292:	b29a      	uxth	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801229a:	429a      	cmp	r2, r3
 801229c:	d309      	bcc.n	80122b2 <tcp_receive+0x2c2>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80122a4:	8a3b      	ldrh	r3, [r7, #16]
 80122a6:	4413      	add	r3, r2
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80122b0:	e04e      	b.n	8012350 <tcp_receive+0x360>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80122b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80122bc:	e048      	b.n	8012350 <tcp_receive+0x360>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80122c4:	8abb      	ldrh	r3, [r7, #20]
 80122c6:	4413      	add	r3, r2
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d309      	bcc.n	80122e8 <tcp_receive+0x2f8>
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80122da:	8abb      	ldrh	r3, [r7, #20]
 80122dc:	4413      	add	r3, r2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80122e6:	e004      	b.n	80122f2 <tcp_receive+0x302>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80122ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80122fe:	429a      	cmp	r2, r3
 8012300:	d326      	bcc.n	8012350 <tcp_receive+0x360>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	b29a      	uxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012322:	4413      	add	r3, r2
 8012324:	b29a      	uxth	r2, r3
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801232c:	429a      	cmp	r2, r3
 801232e:	d30a      	bcc.n	8012346 <tcp_receive+0x356>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801233a:	4413      	add	r3, r2
 801233c:	b29a      	uxth	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012344:	e004      	b.n	8012350 <tcp_receive+0x360>
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801234c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012358:	4a91      	ldr	r2, [pc, #580]	@ (80125a0 <tcp_receive+0x5b0>)
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f7ff fdcc 	bl	8011ef8 <tcp_free_acked_segments>
 8012360:	4602      	mov	r2, r0
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801236e:	4a8d      	ldr	r2, [pc, #564]	@ (80125a4 <tcp_receive+0x5b4>)
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7ff fdc1 	bl	8011ef8 <tcp_free_acked_segments>
 8012376:	4602      	mov	r2, r0
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012380:	2b00      	cmp	r3, #0
 8012382:	d104      	bne.n	801238e <tcp_receive+0x39e>
        pcb->rtime = -1;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801238a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801238c:	e002      	b.n	8012394 <tcp_receive+0x3a4>
      } else {
        pcb->rtime = 0;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d103      	bne.n	80123aa <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80123b0:	4b7d      	ldr	r3, [pc, #500]	@ (80125a8 <tcp_receive+0x5b8>)
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	4413      	add	r3, r2
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	8b5b      	ldrh	r3, [r3, #26]
 80123c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d035      	beq.n	8012436 <tcp_receive+0x446>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d118      	bne.n	8012404 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d00c      	beq.n	80123f4 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fa fd40 	bl	800ce6c <lwip_htonl>
 80123ec:	4603      	mov	r3, r0
 80123ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dc20      	bgt.n	8012436 <tcp_receive+0x446>
            tcp_clear_flags(pcb, TF_RTO);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	8b5b      	ldrh	r3, [r3, #26]
 80123f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012402:	e018      	b.n	8012436 <tcp_receive+0x446>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	4618      	mov	r0, r3
 8012412:	f7fa fd2b 	bl	800ce6c <lwip_htonl>
 8012416:	4603      	mov	r3, r0
 8012418:	1ae3      	subs	r3, r4, r3
 801241a:	2b00      	cmp	r3, #0
 801241c:	dc0b      	bgt.n	8012436 <tcp_receive+0x446>
          tcp_clear_flags(pcb, TF_RTO);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801242c:	e003      	b.n	8012436 <tcp_receive+0x446>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f002 f92e 	bl	8014690 <tcp_send_empty_ack>
 8012434:	e000      	b.n	8012438 <tcp_receive+0x448>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012436:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801243c:	2b00      	cmp	r3, #0
 801243e:	d052      	beq.n	80124e6 <tcp_receive+0x4f6>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012444:	4b59      	ldr	r3, [pc, #356]	@ (80125ac <tcp_receive+0x5bc>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	2b00      	cmp	r3, #0
 801244c:	da4b      	bge.n	80124e6 <tcp_receive+0x4f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801244e:	4b58      	ldr	r3, [pc, #352]	@ (80125b0 <tcp_receive+0x5c0>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	b29a      	uxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012458:	b29b      	uxth	r3, r3
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	b29b      	uxth	r3, r3
 801245e:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012460:	8bfa      	ldrh	r2, [r7, #30]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012468:	10db      	asrs	r3, r3, #3
 801246a:	b21b      	sxth	r3, r3
 801246c:	b29b      	uxth	r3, r3
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	b29b      	uxth	r3, r3
 8012472:	83fb      	strh	r3, [r7, #30]
      pcb->sa = (s16_t)(pcb->sa + m);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801247a:	b29a      	uxth	r2, r3
 801247c:	8bfb      	ldrh	r3, [r7, #30]
 801247e:	4413      	add	r3, r2
 8012480:	b29b      	uxth	r3, r3
 8012482:	b21a      	sxth	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012488:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801248c:	2b00      	cmp	r3, #0
 801248e:	da03      	bge.n	8012498 <tcp_receive+0x4a8>
        m = (s16_t) - m;
 8012490:	8bfb      	ldrh	r3, [r7, #30]
 8012492:	425b      	negs	r3, r3
 8012494:	b29b      	uxth	r3, r3
 8012496:	83fb      	strh	r3, [r7, #30]
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012498:	8bfa      	ldrh	r2, [r7, #30]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80124a0:	109b      	asrs	r3, r3, #2
 80124a2:	b21b      	sxth	r3, r3
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	83fb      	strh	r3, [r7, #30]
      pcb->sv = (s16_t)(pcb->sv + m);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	8bfb      	ldrh	r3, [r7, #30]
 80124b6:	4413      	add	r3, r2
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	b21a      	sxth	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80124c6:	10db      	asrs	r3, r3, #3
 80124c8:	b21b      	sxth	r3, r3
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	4413      	add	r3, r2
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	b21a      	sxth	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80124e6:	4b33      	ldr	r3, [pc, #204]	@ (80125b4 <tcp_receive+0x5c4>)
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	f000 81c6 	beq.w	801287c <tcp_receive+0x88c>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	7d1b      	ldrb	r3, [r3, #20]
 80124f4:	2b06      	cmp	r3, #6
 80124f6:	f200 81c1 	bhi.w	801287c <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124fe:	4b2e      	ldr	r3, [pc, #184]	@ (80125b8 <tcp_receive+0x5c8>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	3b01      	subs	r3, #1
 8012506:	2b00      	cmp	r3, #0
 8012508:	f2c0 8086 	blt.w	8012618 <tcp_receive+0x628>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012510:	4b28      	ldr	r3, [pc, #160]	@ (80125b4 <tcp_receive+0x5c4>)
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	4619      	mov	r1, r3
 8012516:	4b28      	ldr	r3, [pc, #160]	@ (80125b8 <tcp_receive+0x5c8>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	440b      	add	r3, r1
 801251c:	1ad3      	subs	r3, r2, r3
 801251e:	3301      	adds	r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	dc79      	bgt.n	8012618 <tcp_receive+0x628>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012524:	4b25      	ldr	r3, [pc, #148]	@ (80125bc <tcp_receive+0x5cc>)
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	61bb      	str	r3, [r7, #24]
      u32_t off32 = pcb->rcv_nxt - seqno;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801252e:	4b22      	ldr	r3, [pc, #136]	@ (80125b8 <tcp_receive+0x5c8>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	60fb      	str	r3, [r7, #12]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012536:	4b21      	ldr	r3, [pc, #132]	@ (80125bc <tcp_receive+0x5cc>)
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <tcp_receive+0x55c>
 801253e:	4b20      	ldr	r3, [pc, #128]	@ (80125c0 <tcp_receive+0x5d0>)
 8012540:	f240 5294 	movw	r2, #1428	@ 0x594
 8012544:	491f      	ldr	r1, [pc, #124]	@ (80125c4 <tcp_receive+0x5d4>)
 8012546:	4820      	ldr	r0, [pc, #128]	@ (80125c8 <tcp_receive+0x5d8>)
 8012548:	f007 fde4 	bl	801a114 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012552:	4293      	cmp	r3, r2
 8012554:	d906      	bls.n	8012564 <tcp_receive+0x574>
 8012556:	4b1a      	ldr	r3, [pc, #104]	@ (80125c0 <tcp_receive+0x5d0>)
 8012558:	f240 5295 	movw	r2, #1429	@ 0x595
 801255c:	491b      	ldr	r1, [pc, #108]	@ (80125cc <tcp_receive+0x5dc>)
 801255e:	481a      	ldr	r0, [pc, #104]	@ (80125c8 <tcp_receive+0x5d8>)
 8012560:	f007 fdd8 	bl	801a114 <iprintf>
      off = (u16_t)off32;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	82fb      	strh	r3, [r7, #22]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012568:	4b14      	ldr	r3, [pc, #80]	@ (80125bc <tcp_receive+0x5cc>)
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	891b      	ldrh	r3, [r3, #8]
 801256e:	8afa      	ldrh	r2, [r7, #22]
 8012570:	429a      	cmp	r2, r3
 8012572:	d906      	bls.n	8012582 <tcp_receive+0x592>
 8012574:	4b12      	ldr	r3, [pc, #72]	@ (80125c0 <tcp_receive+0x5d0>)
 8012576:	f240 5297 	movw	r2, #1431	@ 0x597
 801257a:	4915      	ldr	r1, [pc, #84]	@ (80125d0 <tcp_receive+0x5e0>)
 801257c:	4812      	ldr	r0, [pc, #72]	@ (80125c8 <tcp_receive+0x5d8>)
 801257e:	f007 fdc9 	bl	801a114 <iprintf>
      inseg.len -= off;
 8012582:	4b0e      	ldr	r3, [pc, #56]	@ (80125bc <tcp_receive+0x5cc>)
 8012584:	891a      	ldrh	r2, [r3, #8]
 8012586:	8afb      	ldrh	r3, [r7, #22]
 8012588:	1ad3      	subs	r3, r2, r3
 801258a:	b29a      	uxth	r2, r3
 801258c:	4b0b      	ldr	r3, [pc, #44]	@ (80125bc <tcp_receive+0x5cc>)
 801258e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012590:	4b0a      	ldr	r3, [pc, #40]	@ (80125bc <tcp_receive+0x5cc>)
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	891a      	ldrh	r2, [r3, #8]
 8012596:	8afb      	ldrh	r3, [r7, #22]
 8012598:	1ad3      	subs	r3, r2, r3
 801259a:	817b      	strh	r3, [r7, #10]
      while (p->len < off) {
 801259c:	e028      	b.n	80125f0 <tcp_receive+0x600>
 801259e:	bf00      	nop
 80125a0:	0801d85c 	.word	0x0801d85c
 80125a4:	0801d864 	.word	0x0801d864
 80125a8:	200176b0 	.word	0x200176b0
 80125ac:	200176ac 	.word	0x200176ac
 80125b0:	2001766c 	.word	0x2001766c
 80125b4:	200176b2 	.word	0x200176b2
 80125b8:	200176a8 	.word	0x200176a8
 80125bc:	20017684 	.word	0x20017684
 80125c0:	0801d51c 	.word	0x0801d51c
 80125c4:	0801d86c 	.word	0x0801d86c
 80125c8:	0801d568 	.word	0x0801d568
 80125cc:	0801d87c 	.word	0x0801d87c
 80125d0:	0801d88c 	.word	0x0801d88c
        off -= p->len;
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	895b      	ldrh	r3, [r3, #10]
 80125d8:	8afa      	ldrh	r2, [r7, #22]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	82fb      	strh	r3, [r7, #22]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	897a      	ldrh	r2, [r7, #10]
 80125e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80125e4:	69bb      	ldr	r3, [r7, #24]
 80125e6:	2200      	movs	r2, #0
 80125e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	61bb      	str	r3, [r7, #24]
      while (p->len < off) {
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	895b      	ldrh	r3, [r3, #10]
 80125f4:	8afa      	ldrh	r2, [r7, #22]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d8ec      	bhi.n	80125d4 <tcp_receive+0x5e4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80125fa:	8afb      	ldrh	r3, [r7, #22]
 80125fc:	4619      	mov	r1, r3
 80125fe:	69b8      	ldr	r0, [r7, #24]
 8012600:	f7fc f870 	bl	800e6e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012608:	4a93      	ldr	r2, [pc, #588]	@ (8012858 <tcp_receive+0x868>)
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	4b93      	ldr	r3, [pc, #588]	@ (801285c <tcp_receive+0x86c>)
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	4a91      	ldr	r2, [pc, #580]	@ (8012858 <tcp_receive+0x868>)
 8012612:	6812      	ldr	r2, [r2, #0]
 8012614:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012616:	e00d      	b.n	8012634 <tcp_receive+0x644>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012618:	4b8f      	ldr	r3, [pc, #572]	@ (8012858 <tcp_receive+0x868>)
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	2b00      	cmp	r3, #0
 8012624:	da06      	bge.n	8012634 <tcp_receive+0x644>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8b5b      	ldrh	r3, [r3, #26]
 801262a:	f043 0302 	orr.w	r3, r3, #2
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012634:	4b88      	ldr	r3, [pc, #544]	@ (8012858 <tcp_receive+0x868>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	2b00      	cmp	r3, #0
 8012640:	f2c0 8105 	blt.w	801284e <tcp_receive+0x85e>
 8012644:	4b84      	ldr	r3, [pc, #528]	@ (8012858 <tcp_receive+0x868>)
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012650:	440b      	add	r3, r1
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	3301      	adds	r3, #1
 8012656:	2b00      	cmp	r3, #0
 8012658:	f300 80f9 	bgt.w	801284e <tcp_receive+0x85e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012660:	4b7d      	ldr	r3, [pc, #500]	@ (8012858 <tcp_receive+0x868>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	429a      	cmp	r2, r3
 8012666:	f040 80ee 	bne.w	8012846 <tcp_receive+0x856>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801266a:	4b7c      	ldr	r3, [pc, #496]	@ (801285c <tcp_receive+0x86c>)
 801266c:	891c      	ldrh	r4, [r3, #8]
 801266e:	4b7b      	ldr	r3, [pc, #492]	@ (801285c <tcp_receive+0x86c>)
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	899b      	ldrh	r3, [r3, #12]
 8012674:	b29b      	uxth	r3, r3
 8012676:	4618      	mov	r0, r3
 8012678:	f7fa fbe2 	bl	800ce40 <lwip_htons>
 801267c:	4603      	mov	r3, r0
 801267e:	b2db      	uxtb	r3, r3
 8012680:	f003 0303 	and.w	r3, r3, #3
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <tcp_receive+0x69c>
 8012688:	2301      	movs	r3, #1
 801268a:	e000      	b.n	801268e <tcp_receive+0x69e>
 801268c:	2300      	movs	r3, #0
 801268e:	4423      	add	r3, r4
 8012690:	b29a      	uxth	r2, r3
 8012692:	4b73      	ldr	r3, [pc, #460]	@ (8012860 <tcp_receive+0x870>)
 8012694:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801269a:	4b71      	ldr	r3, [pc, #452]	@ (8012860 <tcp_receive+0x870>)
 801269c:	881b      	ldrh	r3, [r3, #0]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d274      	bcs.n	801278c <tcp_receive+0x79c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126a2:	4b6e      	ldr	r3, [pc, #440]	@ (801285c <tcp_receive+0x86c>)
 80126a4:	691b      	ldr	r3, [r3, #16]
 80126a6:	899b      	ldrh	r3, [r3, #12]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fa fbc8 	bl	800ce40 <lwip_htons>
 80126b0:	4603      	mov	r3, r0
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d01e      	beq.n	80126fa <tcp_receive+0x70a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80126bc:	4b67      	ldr	r3, [pc, #412]	@ (801285c <tcp_receive+0x86c>)
 80126be:	691b      	ldr	r3, [r3, #16]
 80126c0:	899b      	ldrh	r3, [r3, #12]
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	b21b      	sxth	r3, r3
 80126c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80126ca:	b21c      	sxth	r4, r3
 80126cc:	4b63      	ldr	r3, [pc, #396]	@ (801285c <tcp_receive+0x86c>)
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fa fbb3 	bl	800ce40 <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7fa fbab 	bl	800ce40 <lwip_htons>
 80126ea:	4603      	mov	r3, r0
 80126ec:	b21b      	sxth	r3, r3
 80126ee:	4323      	orrs	r3, r4
 80126f0:	b21a      	sxth	r2, r3
 80126f2:	4b5a      	ldr	r3, [pc, #360]	@ (801285c <tcp_receive+0x86c>)
 80126f4:	691b      	ldr	r3, [r3, #16]
 80126f6:	b292      	uxth	r2, r2
 80126f8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80126fe:	4b57      	ldr	r3, [pc, #348]	@ (801285c <tcp_receive+0x86c>)
 8012700:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012702:	4b56      	ldr	r3, [pc, #344]	@ (801285c <tcp_receive+0x86c>)
 8012704:	691b      	ldr	r3, [r3, #16]
 8012706:	899b      	ldrh	r3, [r3, #12]
 8012708:	b29b      	uxth	r3, r3
 801270a:	4618      	mov	r0, r3
 801270c:	f7fa fb98 	bl	800ce40 <lwip_htons>
 8012710:	4603      	mov	r3, r0
 8012712:	b2db      	uxtb	r3, r3
 8012714:	f003 0302 	and.w	r3, r3, #2
 8012718:	2b00      	cmp	r3, #0
 801271a:	d005      	beq.n	8012728 <tcp_receive+0x738>
            inseg.len -= 1;
 801271c:	4b4f      	ldr	r3, [pc, #316]	@ (801285c <tcp_receive+0x86c>)
 801271e:	891b      	ldrh	r3, [r3, #8]
 8012720:	3b01      	subs	r3, #1
 8012722:	b29a      	uxth	r2, r3
 8012724:	4b4d      	ldr	r3, [pc, #308]	@ (801285c <tcp_receive+0x86c>)
 8012726:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012728:	4b4c      	ldr	r3, [pc, #304]	@ (801285c <tcp_receive+0x86c>)
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	4a4b      	ldr	r2, [pc, #300]	@ (801285c <tcp_receive+0x86c>)
 801272e:	8912      	ldrh	r2, [r2, #8]
 8012730:	4611      	mov	r1, r2
 8012732:	4618      	mov	r0, r3
 8012734:	f7fb fed6 	bl	800e4e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012738:	4b48      	ldr	r3, [pc, #288]	@ (801285c <tcp_receive+0x86c>)
 801273a:	891c      	ldrh	r4, [r3, #8]
 801273c:	4b47      	ldr	r3, [pc, #284]	@ (801285c <tcp_receive+0x86c>)
 801273e:	691b      	ldr	r3, [r3, #16]
 8012740:	899b      	ldrh	r3, [r3, #12]
 8012742:	b29b      	uxth	r3, r3
 8012744:	4618      	mov	r0, r3
 8012746:	f7fa fb7b 	bl	800ce40 <lwip_htons>
 801274a:	4603      	mov	r3, r0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	f003 0303 	and.w	r3, r3, #3
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <tcp_receive+0x76a>
 8012756:	2301      	movs	r3, #1
 8012758:	e000      	b.n	801275c <tcp_receive+0x76c>
 801275a:	2300      	movs	r3, #0
 801275c:	4423      	add	r3, r4
 801275e:	b29a      	uxth	r2, r3
 8012760:	4b3f      	ldr	r3, [pc, #252]	@ (8012860 <tcp_receive+0x870>)
 8012762:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012764:	4b3e      	ldr	r3, [pc, #248]	@ (8012860 <tcp_receive+0x870>)
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	461a      	mov	r2, r3
 801276a:	4b3b      	ldr	r3, [pc, #236]	@ (8012858 <tcp_receive+0x868>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	441a      	add	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012774:	6879      	ldr	r1, [r7, #4]
 8012776:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012778:	440b      	add	r3, r1
 801277a:	429a      	cmp	r2, r3
 801277c:	d006      	beq.n	801278c <tcp_receive+0x79c>
 801277e:	4b39      	ldr	r3, [pc, #228]	@ (8012864 <tcp_receive+0x874>)
 8012780:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012784:	4938      	ldr	r1, [pc, #224]	@ (8012868 <tcp_receive+0x878>)
 8012786:	4839      	ldr	r0, [pc, #228]	@ (801286c <tcp_receive+0x87c>)
 8012788:	f007 fcc4 	bl	801a114 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801278c:	4b34      	ldr	r3, [pc, #208]	@ (8012860 <tcp_receive+0x870>)
 801278e:	881b      	ldrh	r3, [r3, #0]
 8012790:	461a      	mov	r2, r3
 8012792:	4b31      	ldr	r3, [pc, #196]	@ (8012858 <tcp_receive+0x868>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	441a      	add	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80127a0:	4b2f      	ldr	r3, [pc, #188]	@ (8012860 <tcp_receive+0x870>)
 80127a2:	881b      	ldrh	r3, [r3, #0]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d206      	bcs.n	80127b6 <tcp_receive+0x7c6>
 80127a8:	4b2e      	ldr	r3, [pc, #184]	@ (8012864 <tcp_receive+0x874>)
 80127aa:	f240 6207 	movw	r2, #1543	@ 0x607
 80127ae:	4930      	ldr	r1, [pc, #192]	@ (8012870 <tcp_receive+0x880>)
 80127b0:	482e      	ldr	r0, [pc, #184]	@ (801286c <tcp_receive+0x87c>)
 80127b2:	f007 fcaf 	bl	801a114 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80127ba:	4b29      	ldr	r3, [pc, #164]	@ (8012860 <tcp_receive+0x870>)
 80127bc:	881b      	ldrh	r3, [r3, #0]
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7fc ff76 	bl	800f6b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80127cc:	4b23      	ldr	r3, [pc, #140]	@ (801285c <tcp_receive+0x86c>)
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	891b      	ldrh	r3, [r3, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d006      	beq.n	80127e4 <tcp_receive+0x7f4>
          recv_data = inseg.p;
 80127d6:	4b21      	ldr	r3, [pc, #132]	@ (801285c <tcp_receive+0x86c>)
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	4a26      	ldr	r2, [pc, #152]	@ (8012874 <tcp_receive+0x884>)
 80127dc:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80127de:	4b1f      	ldr	r3, [pc, #124]	@ (801285c <tcp_receive+0x86c>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127e4:	4b1d      	ldr	r3, [pc, #116]	@ (801285c <tcp_receive+0x86c>)
 80127e6:	691b      	ldr	r3, [r3, #16]
 80127e8:	899b      	ldrh	r3, [r3, #12]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fa fb27 	bl	800ce40 <lwip_htons>
 80127f2:	4603      	mov	r3, r0
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	f003 0301 	and.w	r3, r3, #1
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d006      	beq.n	801280c <tcp_receive+0x81c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012878 <tcp_receive+0x888>)
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	f043 0320 	orr.w	r3, r3, #32
 8012806:	b2da      	uxtb	r2, r3
 8012808:	4b1b      	ldr	r3, [pc, #108]	@ (8012878 <tcp_receive+0x888>)
 801280a:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	8b5b      	ldrh	r3, [r3, #26]
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00e      	beq.n	8012836 <tcp_receive+0x846>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f023 0301 	bic.w	r3, r3, #1
 8012820:	b29a      	uxth	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	835a      	strh	r2, [r3, #26]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	8b5b      	ldrh	r3, [r3, #26]
 801282a:	f043 0302 	orr.w	r3, r3, #2
 801282e:	b29a      	uxth	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012834:	e00f      	b.n	8012856 <tcp_receive+0x866>
        tcp_ack(pcb);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	8b5b      	ldrh	r3, [r3, #26]
 801283a:	f043 0301 	orr.w	r3, r3, #1
 801283e:	b29a      	uxth	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012844:	e007      	b.n	8012856 <tcp_receive+0x866>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f001 ff22 	bl	8014690 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801284c:	e003      	b.n	8012856 <tcp_receive+0x866>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f001 ff1e 	bl	8014690 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012854:	e02c      	b.n	80128b0 <tcp_receive+0x8c0>
 8012856:	e02b      	b.n	80128b0 <tcp_receive+0x8c0>
 8012858:	200176a8 	.word	0x200176a8
 801285c:	20017684 	.word	0x20017684
 8012860:	200176b2 	.word	0x200176b2
 8012864:	0801d51c 	.word	0x0801d51c
 8012868:	0801d89c 	.word	0x0801d89c
 801286c:	0801d568 	.word	0x0801d568
 8012870:	0801d8d4 	.word	0x0801d8d4
 8012874:	200176b8 	.word	0x200176b8
 8012878:	200176b5 	.word	0x200176b5
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801287c:	4b0e      	ldr	r3, [pc, #56]	@ (80128b8 <tcp_receive+0x8c8>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	db0a      	blt.n	80128a0 <tcp_receive+0x8b0>
 801288a:	4b0b      	ldr	r3, [pc, #44]	@ (80128b8 <tcp_receive+0x8c8>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012892:	6879      	ldr	r1, [r7, #4]
 8012894:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012896:	440b      	add	r3, r1
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	3301      	adds	r3, #1
 801289c:	2b00      	cmp	r3, #0
 801289e:	dd07      	ble.n	80128b0 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	8b5b      	ldrh	r3, [r3, #26]
 80128a4:	f043 0302 	orr.w	r3, r3, #2
 80128a8:	b29a      	uxth	r2, r3
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80128ae:	e7ff      	b.n	80128b0 <tcp_receive+0x8c0>
 80128b0:	bf00      	nop
 80128b2:	372c      	adds	r7, #44	@ 0x2c
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd90      	pop	{r4, r7, pc}
 80128b8:	200176a8 	.word	0x200176a8

080128bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80128c2:	4b15      	ldr	r3, [pc, #84]	@ (8012918 <tcp_get_next_optbyte+0x5c>)
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	1c5a      	adds	r2, r3, #1
 80128c8:	b291      	uxth	r1, r2
 80128ca:	4a13      	ldr	r2, [pc, #76]	@ (8012918 <tcp_get_next_optbyte+0x5c>)
 80128cc:	8011      	strh	r1, [r2, #0]
 80128ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80128d0:	4b12      	ldr	r3, [pc, #72]	@ (801291c <tcp_get_next_optbyte+0x60>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d004      	beq.n	80128e2 <tcp_get_next_optbyte+0x26>
 80128d8:	4b11      	ldr	r3, [pc, #68]	@ (8012920 <tcp_get_next_optbyte+0x64>)
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	88fa      	ldrh	r2, [r7, #6]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d208      	bcs.n	80128f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80128e2:	4b10      	ldr	r3, [pc, #64]	@ (8012924 <tcp_get_next_optbyte+0x68>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	3314      	adds	r3, #20
 80128e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80128ea:	88fb      	ldrh	r3, [r7, #6]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	4413      	add	r3, r2
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	e00b      	b.n	801290c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80128f4:	88fb      	ldrh	r3, [r7, #6]
 80128f6:	b2da      	uxtb	r2, r3
 80128f8:	4b09      	ldr	r3, [pc, #36]	@ (8012920 <tcp_get_next_optbyte+0x64>)
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	b2db      	uxtb	r3, r3
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012902:	4b06      	ldr	r3, [pc, #24]	@ (801291c <tcp_get_next_optbyte+0x60>)
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	797b      	ldrb	r3, [r7, #5]
 8012908:	4413      	add	r3, r2
 801290a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801290c:	4618      	mov	r0, r3
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr
 8012918:	200176a4 	.word	0x200176a4
 801291c:	200176a0 	.word	0x200176a0
 8012920:	2001769e 	.word	0x2001769e
 8012924:	20017698 	.word	0x20017698

08012928 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_parseopt+0x1c>
 8012936:	4b33      	ldr	r3, [pc, #204]	@ (8012a04 <tcp_parseopt+0xdc>)
 8012938:	f240 727d 	movw	r2, #1917	@ 0x77d
 801293c:	4932      	ldr	r1, [pc, #200]	@ (8012a08 <tcp_parseopt+0xe0>)
 801293e:	4833      	ldr	r0, [pc, #204]	@ (8012a0c <tcp_parseopt+0xe4>)
 8012940:	f007 fbe8 	bl	801a114 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012944:	4b32      	ldr	r3, [pc, #200]	@ (8012a10 <tcp_parseopt+0xe8>)
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d057      	beq.n	80129fc <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801294c:	4b31      	ldr	r3, [pc, #196]	@ (8012a14 <tcp_parseopt+0xec>)
 801294e:	2200      	movs	r2, #0
 8012950:	801a      	strh	r2, [r3, #0]
 8012952:	e047      	b.n	80129e4 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8012954:	f7ff ffb2 	bl	80128bc <tcp_get_next_optbyte>
 8012958:	4603      	mov	r3, r0
 801295a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801295c:	7bfb      	ldrb	r3, [r7, #15]
 801295e:	2b02      	cmp	r3, #2
 8012960:	d006      	beq.n	8012970 <tcp_parseopt+0x48>
 8012962:	2b02      	cmp	r3, #2
 8012964:	dc2b      	bgt.n	80129be <tcp_parseopt+0x96>
 8012966:	2b00      	cmp	r3, #0
 8012968:	d043      	beq.n	80129f2 <tcp_parseopt+0xca>
 801296a:	2b01      	cmp	r3, #1
 801296c:	d039      	beq.n	80129e2 <tcp_parseopt+0xba>
 801296e:	e026      	b.n	80129be <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012970:	f7ff ffa4 	bl	80128bc <tcp_get_next_optbyte>
 8012974:	4603      	mov	r3, r0
 8012976:	2b04      	cmp	r3, #4
 8012978:	d13d      	bne.n	80129f6 <tcp_parseopt+0xce>
 801297a:	4b26      	ldr	r3, [pc, #152]	@ (8012a14 <tcp_parseopt+0xec>)
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	3301      	adds	r3, #1
 8012980:	4a23      	ldr	r2, [pc, #140]	@ (8012a10 <tcp_parseopt+0xe8>)
 8012982:	8812      	ldrh	r2, [r2, #0]
 8012984:	4293      	cmp	r3, r2
 8012986:	da36      	bge.n	80129f6 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012988:	f7ff ff98 	bl	80128bc <tcp_get_next_optbyte>
 801298c:	4603      	mov	r3, r0
 801298e:	021b      	lsls	r3, r3, #8
 8012990:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012992:	f7ff ff93 	bl	80128bc <tcp_get_next_optbyte>
 8012996:	4603      	mov	r3, r0
 8012998:	461a      	mov	r2, r3
 801299a:	89bb      	ldrh	r3, [r7, #12]
 801299c:	4313      	orrs	r3, r2
 801299e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80129a0:	89bb      	ldrh	r3, [r7, #12]
 80129a2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d804      	bhi.n	80129b4 <tcp_parseopt+0x8c>
 80129aa:	89bb      	ldrh	r3, [r7, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <tcp_parseopt+0x8c>
 80129b0:	89ba      	ldrh	r2, [r7, #12]
 80129b2:	e001      	b.n	80129b8 <tcp_parseopt+0x90>
 80129b4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80129bc:	e012      	b.n	80129e4 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80129be:	f7ff ff7d 	bl	80128bc <tcp_get_next_optbyte>
 80129c2:	4603      	mov	r3, r0
 80129c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80129c6:	7afb      	ldrb	r3, [r7, #11]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d916      	bls.n	80129fa <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80129cc:	7afb      	ldrb	r3, [r7, #11]
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	4b10      	ldr	r3, [pc, #64]	@ (8012a14 <tcp_parseopt+0xec>)
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	4413      	add	r3, r2
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	3b02      	subs	r3, #2
 80129da:	b29a      	uxth	r2, r3
 80129dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012a14 <tcp_parseopt+0xec>)
 80129de:	801a      	strh	r2, [r3, #0]
 80129e0:	e000      	b.n	80129e4 <tcp_parseopt+0xbc>
          break;
 80129e2:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80129e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012a14 <tcp_parseopt+0xec>)
 80129e6:	881a      	ldrh	r2, [r3, #0]
 80129e8:	4b09      	ldr	r3, [pc, #36]	@ (8012a10 <tcp_parseopt+0xe8>)
 80129ea:	881b      	ldrh	r3, [r3, #0]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d3b1      	bcc.n	8012954 <tcp_parseopt+0x2c>
 80129f0:	e004      	b.n	80129fc <tcp_parseopt+0xd4>
          return;
 80129f2:	bf00      	nop
 80129f4:	e002      	b.n	80129fc <tcp_parseopt+0xd4>
            return;
 80129f6:	bf00      	nop
 80129f8:	e000      	b.n	80129fc <tcp_parseopt+0xd4>
            return;
 80129fa:	bf00      	nop
      }
    }
  }
}
 80129fc:	3710      	adds	r7, #16
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	0801d51c 	.word	0x0801d51c
 8012a08:	0801d8f4 	.word	0x0801d8f4
 8012a0c:	0801d568 	.word	0x0801d568
 8012a10:	2001769c 	.word	0x2001769c
 8012a14:	200176a4 	.word	0x200176a4

08012a18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012a1c:	4b05      	ldr	r3, [pc, #20]	@ (8012a34 <tcp_trigger_input_pcb_close+0x1c>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	f043 0310 	orr.w	r3, r3, #16
 8012a24:	b2da      	uxtb	r2, r3
 8012a26:	4b03      	ldr	r3, [pc, #12]	@ (8012a34 <tcp_trigger_input_pcb_close+0x1c>)
 8012a28:	701a      	strb	r2, [r3, #0]
}
 8012a2a:	bf00      	nop
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr
 8012a34:	200176b5 	.word	0x200176b5

08012a38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00a      	beq.n	8012a60 <tcp_route+0x28>
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	7a1b      	ldrb	r3, [r3, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d006      	beq.n	8012a60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	7a1b      	ldrb	r3, [r3, #8]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fb fb96 	bl	800e188 <netif_get_by_index>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	e003      	b.n	8012a68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f005 fdd1 	bl	8018608 <ip4_route>
 8012a66:	4603      	mov	r3, r0
  }
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012a70:	b590      	push	{r4, r7, lr}
 8012a72:	b087      	sub	sp, #28
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	603b      	str	r3, [r7, #0]
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d105      	bne.n	8012a92 <tcp_create_segment+0x22>
 8012a86:	4b45      	ldr	r3, [pc, #276]	@ (8012b9c <tcp_create_segment+0x12c>)
 8012a88:	22a3      	movs	r2, #163	@ 0xa3
 8012a8a:	4945      	ldr	r1, [pc, #276]	@ (8012ba0 <tcp_create_segment+0x130>)
 8012a8c:	4845      	ldr	r0, [pc, #276]	@ (8012ba4 <tcp_create_segment+0x134>)
 8012a8e:	f007 fb41 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d105      	bne.n	8012aa4 <tcp_create_segment+0x34>
 8012a98:	4b40      	ldr	r3, [pc, #256]	@ (8012b9c <tcp_create_segment+0x12c>)
 8012a9a:	22a4      	movs	r2, #164	@ 0xa4
 8012a9c:	4942      	ldr	r1, [pc, #264]	@ (8012ba8 <tcp_create_segment+0x138>)
 8012a9e:	4841      	ldr	r0, [pc, #260]	@ (8012ba4 <tcp_create_segment+0x134>)
 8012aa0:	f007 fb38 	bl	801a114 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012aa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012ab2:	2003      	movs	r0, #3
 8012ab4:	f7fa fff4 	bl	800daa0 <memp_malloc>
 8012ab8:	6138      	str	r0, [r7, #16]
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d104      	bne.n	8012aca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012ac0:	68b8      	ldr	r0, [r7, #8]
 8012ac2:	f7fb fe95 	bl	800e7f0 <pbuf_free>
    return NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e063      	b.n	8012b92 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012ad0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	891a      	ldrh	r2, [r3, #8]
 8012ae2:	7dfb      	ldrb	r3, [r7, #23]
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d205      	bcs.n	8012af6 <tcp_create_segment+0x86>
 8012aea:	4b2c      	ldr	r3, [pc, #176]	@ (8012b9c <tcp_create_segment+0x12c>)
 8012aec:	22b0      	movs	r2, #176	@ 0xb0
 8012aee:	492f      	ldr	r1, [pc, #188]	@ (8012bac <tcp_create_segment+0x13c>)
 8012af0:	482c      	ldr	r0, [pc, #176]	@ (8012ba4 <tcp_create_segment+0x134>)
 8012af2:	f007 fb0f 	bl	801a114 <iprintf>
  seg->len = p->tot_len - optlen;
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	891a      	ldrh	r2, [r3, #8]
 8012afa:	7dfb      	ldrb	r3, [r7, #23]
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012b0c:	2114      	movs	r1, #20
 8012b0e:	68b8      	ldr	r0, [r7, #8]
 8012b10:	f7fb fdd8 	bl	800e6c4 <pbuf_add_header>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d004      	beq.n	8012b24 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012b1a:	6938      	ldr	r0, [r7, #16]
 8012b1c:	f7fd fbf9 	bl	8010312 <tcp_seg_free>
    return NULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	e036      	b.n	8012b92 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	685a      	ldr	r2, [r3, #4]
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	8ada      	ldrh	r2, [r3, #22]
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	691c      	ldr	r4, [r3, #16]
 8012b36:	4610      	mov	r0, r2
 8012b38:	f7fa f982 	bl	800ce40 <lwip_htons>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	8b1a      	ldrh	r2, [r3, #24]
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	691c      	ldr	r4, [r3, #16]
 8012b48:	4610      	mov	r0, r2
 8012b4a:	f7fa f979 	bl	800ce40 <lwip_htons>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	691c      	ldr	r4, [r3, #16]
 8012b56:	6838      	ldr	r0, [r7, #0]
 8012b58:	f7fa f988 	bl	800ce6c <lwip_htonl>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012b60:	7dfb      	ldrb	r3, [r7, #23]
 8012b62:	089b      	lsrs	r3, r3, #2
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	3305      	adds	r3, #5
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	031b      	lsls	r3, r3, #12
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	79fb      	ldrb	r3, [r7, #7]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4313      	orrs	r3, r2
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	691c      	ldr	r4, [r3, #16]
 8012b7a:	4610      	mov	r0, r2
 8012b7c:	f7fa f960 	bl	800ce40 <lwip_htons>
 8012b80:	4603      	mov	r3, r0
 8012b82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	691b      	ldr	r3, [r3, #16]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	749a      	strb	r2, [r3, #18]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012b90:	693b      	ldr	r3, [r7, #16]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	371c      	adds	r7, #28
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd90      	pop	{r4, r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	0801d910 	.word	0x0801d910
 8012ba0:	0801d944 	.word	0x0801d944
 8012ba4:	0801d964 	.word	0x0801d964
 8012ba8:	0801d98c 	.word	0x0801d98c
 8012bac:	0801d9b0 	.word	0x0801d9b0

08012bb0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	607b      	str	r3, [r7, #4]
 8012bb8:	4603      	mov	r3, r0
 8012bba:	73fb      	strb	r3, [r7, #15]
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	81bb      	strh	r3, [r7, #12]
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012bc4:	89bb      	ldrh	r3, [r7, #12]
 8012bc6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d105      	bne.n	8012bda <tcp_pbuf_prealloc+0x2a>
 8012bce:	4b30      	ldr	r3, [pc, #192]	@ (8012c90 <tcp_pbuf_prealloc+0xe0>)
 8012bd0:	22e8      	movs	r2, #232	@ 0xe8
 8012bd2:	4930      	ldr	r1, [pc, #192]	@ (8012c94 <tcp_pbuf_prealloc+0xe4>)
 8012bd4:	4830      	ldr	r0, [pc, #192]	@ (8012c98 <tcp_pbuf_prealloc+0xe8>)
 8012bd6:	f007 fa9d 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012bda:	6a3b      	ldr	r3, [r7, #32]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d105      	bne.n	8012bec <tcp_pbuf_prealloc+0x3c>
 8012be0:	4b2b      	ldr	r3, [pc, #172]	@ (8012c90 <tcp_pbuf_prealloc+0xe0>)
 8012be2:	22e9      	movs	r2, #233	@ 0xe9
 8012be4:	492d      	ldr	r1, [pc, #180]	@ (8012c9c <tcp_pbuf_prealloc+0xec>)
 8012be6:	482c      	ldr	r0, [pc, #176]	@ (8012c98 <tcp_pbuf_prealloc+0xe8>)
 8012be8:	f007 fa94 	bl	801a114 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012bec:	89ba      	ldrh	r2, [r7, #12]
 8012bee:	897b      	ldrh	r3, [r7, #10]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d221      	bcs.n	8012c38 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012bf8:	f003 0302 	and.w	r3, r3, #2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d111      	bne.n	8012c24 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012c00:	6a3b      	ldr	r3, [r7, #32]
 8012c02:	8b5b      	ldrh	r3, [r3, #26]
 8012c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d115      	bne.n	8012c38 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d103      	bne.n	8012c24 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012c1c:	6a3b      	ldr	r3, [r7, #32]
 8012c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d009      	beq.n	8012c38 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012c24:	89bb      	ldrh	r3, [r7, #12]
 8012c26:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8012c2a:	f023 0203 	bic.w	r2, r3, #3
 8012c2e:	897b      	ldrh	r3, [r7, #10]
 8012c30:	4293      	cmp	r3, r2
 8012c32:	bf28      	it	cs
 8012c34:	4613      	movcs	r3, r2
 8012c36:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012c38:	8af9      	ldrh	r1, [r7, #22]
 8012c3a:	7bfb      	ldrb	r3, [r7, #15]
 8012c3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fb faf1 	bl	800e228 <pbuf_alloc>
 8012c46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e019      	b.n	8012c86 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d006      	beq.n	8012c68 <tcp_pbuf_prealloc+0xb8>
 8012c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c90 <tcp_pbuf_prealloc+0xe0>)
 8012c5c:	f240 120b 	movw	r2, #267	@ 0x10b
 8012c60:	490f      	ldr	r1, [pc, #60]	@ (8012ca0 <tcp_pbuf_prealloc+0xf0>)
 8012c62:	480d      	ldr	r0, [pc, #52]	@ (8012c98 <tcp_pbuf_prealloc+0xe8>)
 8012c64:	f007 fa56 	bl	801a114 <iprintf>
  *oversize = p->len - length;
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	895a      	ldrh	r2, [r3, #10]
 8012c6c:	89bb      	ldrh	r3, [r7, #12]
 8012c6e:	1ad3      	subs	r3, r2, r3
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	89ba      	ldrh	r2, [r7, #12]
 8012c7a:	811a      	strh	r2, [r3, #8]
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	891a      	ldrh	r2, [r3, #8]
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	815a      	strh	r2, [r3, #10]
  return p;
 8012c84:	693b      	ldr	r3, [r7, #16]
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	0801d910 	.word	0x0801d910
 8012c94:	0801d9c8 	.word	0x0801d9c8
 8012c98:	0801d964 	.word	0x0801d964
 8012c9c:	0801d9ec 	.word	0x0801d9ec
 8012ca0:	0801da0c 	.word	0x0801da0c

08012ca4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	460b      	mov	r3, r1
 8012cae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d106      	bne.n	8012cc4 <tcp_write_checks+0x20>
 8012cb6:	4b33      	ldr	r3, [pc, #204]	@ (8012d84 <tcp_write_checks+0xe0>)
 8012cb8:	f240 1233 	movw	r2, #307	@ 0x133
 8012cbc:	4932      	ldr	r1, [pc, #200]	@ (8012d88 <tcp_write_checks+0xe4>)
 8012cbe:	4833      	ldr	r0, [pc, #204]	@ (8012d8c <tcp_write_checks+0xe8>)
 8012cc0:	f007 fa28 	bl	801a114 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	7d1b      	ldrb	r3, [r3, #20]
 8012cc8:	2b04      	cmp	r3, #4
 8012cca:	d00e      	beq.n	8012cea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012cd0:	2b07      	cmp	r3, #7
 8012cd2:	d00a      	beq.n	8012cea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	d006      	beq.n	8012cea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012ce0:	2b03      	cmp	r3, #3
 8012ce2:	d002      	beq.n	8012cea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012ce4:	f06f 030a 	mvn.w	r3, #10
 8012ce8:	e048      	b.n	8012d7c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012cea:	887b      	ldrh	r3, [r7, #2]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d101      	bne.n	8012cf4 <tcp_write_checks+0x50>
    return ERR_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	e043      	b.n	8012d7c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cfa:	887a      	ldrh	r2, [r7, #2]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d909      	bls.n	8012d14 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	8b5b      	ldrh	r3, [r3, #26]
 8012d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d12:	e033      	b.n	8012d7c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d1a:	2b0f      	cmp	r3, #15
 8012d1c:	d909      	bls.n	8012d32 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	8b5b      	ldrh	r3, [r3, #26]
 8012d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d26:	b29a      	uxth	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d30:	e024      	b.n	8012d7c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00f      	beq.n	8012d5c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d11a      	bne.n	8012d7a <tcp_write_checks+0xd6>
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d116      	bne.n	8012d7a <tcp_write_checks+0xd6>
 8012d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8012d84 <tcp_write_checks+0xe0>)
 8012d4e:	f240 1255 	movw	r2, #341	@ 0x155
 8012d52:	490f      	ldr	r1, [pc, #60]	@ (8012d90 <tcp_write_checks+0xec>)
 8012d54:	480d      	ldr	r0, [pc, #52]	@ (8012d8c <tcp_write_checks+0xe8>)
 8012d56:	f007 f9dd 	bl	801a114 <iprintf>
 8012d5a:	e00e      	b.n	8012d7a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d103      	bne.n	8012d6c <tcp_write_checks+0xc8>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d006      	beq.n	8012d7a <tcp_write_checks+0xd6>
 8012d6c:	4b05      	ldr	r3, [pc, #20]	@ (8012d84 <tcp_write_checks+0xe0>)
 8012d6e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8012d72:	4908      	ldr	r1, [pc, #32]	@ (8012d94 <tcp_write_checks+0xf0>)
 8012d74:	4805      	ldr	r0, [pc, #20]	@ (8012d8c <tcp_write_checks+0xe8>)
 8012d76:	f007 f9cd 	bl	801a114 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012d7a:	2300      	movs	r3, #0
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	0801d910 	.word	0x0801d910
 8012d88:	0801da20 	.word	0x0801da20
 8012d8c:	0801d964 	.word	0x0801d964
 8012d90:	0801da40 	.word	0x0801da40
 8012d94:	0801da7c 	.word	0x0801da7c

08012d98 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012d98:	b590      	push	{r4, r7, lr}
 8012d9a:	b09d      	sub	sp, #116	@ 0x74
 8012d9c:	af04      	add	r7, sp, #16
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	4611      	mov	r1, r2
 8012da4:	461a      	mov	r2, r3
 8012da6:	460b      	mov	r3, r1
 8012da8:	80fb      	strh	r3, [r7, #6]
 8012daa:	4613      	mov	r3, r2
 8012dac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012dae:	2300      	movs	r3, #0
 8012db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012db2:	2300      	movs	r3, #0
 8012db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8012db6:	2300      	movs	r3, #0
 8012db8:	657b      	str	r3, [r7, #84]	@ 0x54
 8012dba:	2300      	movs	r3, #0
 8012dbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d109      	bne.n	8012dfe <tcp_write+0x66>
 8012dea:	4b9c      	ldr	r3, [pc, #624]	@ (801305c <tcp_write+0x2c4>)
 8012dec:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8012df0:	499b      	ldr	r1, [pc, #620]	@ (8013060 <tcp_write+0x2c8>)
 8012df2:	489c      	ldr	r0, [pc, #624]	@ (8013064 <tcp_write+0x2cc>)
 8012df4:	f007 f98e 	bl	801a114 <iprintf>
 8012df8:	f06f 030f 	mvn.w	r3, #15
 8012dfc:	e379      	b.n	80134f2 <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012e04:	085b      	lsrs	r3, r3, #1
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	bf28      	it	cs
 8012e10:	4613      	movcs	r3, r2
 8012e12:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8012e14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d102      	bne.n	8012e20 <tcp_write+0x88>
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e1e:	e000      	b.n	8012e22 <tcp_write+0x8a>
 8012e20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e22:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d109      	bne.n	8012e3e <tcp_write+0xa6>
 8012e2a:	4b8c      	ldr	r3, [pc, #560]	@ (801305c <tcp_write+0x2c4>)
 8012e2c:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8012e30:	498d      	ldr	r1, [pc, #564]	@ (8013068 <tcp_write+0x2d0>)
 8012e32:	488c      	ldr	r0, [pc, #560]	@ (8013064 <tcp_write+0x2cc>)
 8012e34:	f007 f96e 	bl	801a114 <iprintf>
 8012e38:	f06f 030f 	mvn.w	r3, #15
 8012e3c:	e359      	b.n	80134f2 <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012e3e:	88fb      	ldrh	r3, [r7, #6]
 8012e40:	4619      	mov	r1, r3
 8012e42:	68f8      	ldr	r0, [r7, #12]
 8012e44:	f7ff ff2e 	bl	8012ca4 <tcp_write_checks>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8012e4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d002      	beq.n	8012e5c <tcp_write+0xc4>
    return err;
 8012e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012e5a:	e34a      	b.n	80134f2 <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e62:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e66:	2300      	movs	r3, #0
 8012e68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f000 8127 	beq.w	80130c4 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8012e7c:	e002      	b.n	8012e84 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8012e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d1f8      	bne.n	8012e7e <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e8e:	7b1b      	ldrb	r3, [r3, #12]
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	f003 0304 	and.w	r3, r3, #4
 8012e98:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012e9a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e9e:	891b      	ldrh	r3, [r3, #8]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ea4:	440b      	add	r3, r1
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	da06      	bge.n	8012eb8 <tcp_write+0x120>
 8012eaa:	4b6c      	ldr	r3, [pc, #432]	@ (801305c <tcp_write+0x2c4>)
 8012eac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012eb0:	496e      	ldr	r1, [pc, #440]	@ (801306c <tcp_write+0x2d4>)
 8012eb2:	486c      	ldr	r0, [pc, #432]	@ (8013064 <tcp_write+0x2cc>)
 8012eb4:	f007 f92e 	bl	801a114 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eba:	891a      	ldrh	r2, [r3, #8]
 8012ebc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ebe:	4413      	add	r3, r2
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012ec4:	1ad3      	subs	r3, r2, r3
 8012ec6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8012ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ed2:	895b      	ldrh	r3, [r3, #10]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d006      	beq.n	8012ee6 <tcp_write+0x14e>
 8012ed8:	4b60      	ldr	r3, [pc, #384]	@ (801305c <tcp_write+0x2c4>)
 8012eda:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8012ede:	4964      	ldr	r1, [pc, #400]	@ (8013070 <tcp_write+0x2d8>)
 8012ee0:	4860      	ldr	r0, [pc, #384]	@ (8013064 <tcp_write+0x2cc>)
 8012ee2:	f007 f917 	bl	801a114 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012eec:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8012eee:	8afb      	ldrh	r3, [r7, #22]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d02e      	beq.n	8012f52 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012ef4:	8afb      	ldrh	r3, [r7, #22]
 8012ef6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d206      	bcs.n	8012f0c <tcp_write+0x174>
 8012efe:	4b57      	ldr	r3, [pc, #348]	@ (801305c <tcp_write+0x2c4>)
 8012f00:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8012f04:	495b      	ldr	r1, [pc, #364]	@ (8013074 <tcp_write+0x2dc>)
 8012f06:	4857      	ldr	r0, [pc, #348]	@ (8013064 <tcp_write+0x2cc>)
 8012f08:	f007 f904 	bl	801a114 <iprintf>
      seg = last_unsent;
 8012f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f0e:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012f10:	8afb      	ldrh	r3, [r7, #22]
 8012f12:	88fa      	ldrh	r2, [r7, #6]
 8012f14:	4293      	cmp	r3, r2
 8012f16:	bf28      	it	cs
 8012f18:	4613      	movcs	r3, r2
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8012f20:	4293      	cmp	r3, r2
 8012f22:	bf28      	it	cs
 8012f24:	4613      	movcs	r3, r2
 8012f26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8012f2a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8012f2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f32:	4413      	add	r3, r2
 8012f34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8012f38:	8afa      	ldrh	r2, [r7, #22]
 8012f3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8012f44:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8012f48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012f52:	8afb      	ldrh	r3, [r7, #22]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00b      	beq.n	8012f70 <tcp_write+0x1d8>
 8012f58:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8012f5c:	88fb      	ldrh	r3, [r7, #6]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d006      	beq.n	8012f70 <tcp_write+0x1d8>
 8012f62:	4b3e      	ldr	r3, [pc, #248]	@ (801305c <tcp_write+0x2c4>)
 8012f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f68:	4943      	ldr	r1, [pc, #268]	@ (8013078 <tcp_write+0x2e0>)
 8012f6a:	483e      	ldr	r0, [pc, #248]	@ (8013064 <tcp_write+0x2cc>)
 8012f6c:	f007 f8d2 	bl	801a114 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012f70:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8012f74:	88fb      	ldrh	r3, [r7, #6]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	f080 8172 	bcs.w	8013260 <tcp_write+0x4c8>
 8012f7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 816d 	beq.w	8013260 <tcp_write+0x4c8>
 8012f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f88:	891b      	ldrh	r3, [r3, #8]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	f000 8168 	beq.w	8013260 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012f90:	88fa      	ldrh	r2, [r7, #6]
 8012f92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8012f96:	1ad2      	subs	r2, r2, r3
 8012f98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	bfa8      	it	ge
 8012fa0:	4613      	movge	r3, r2
 8012fa2:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8012fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fa6:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012fa8:	797b      	ldrb	r3, [r7, #5]
 8012faa:	f003 0301 	and.w	r3, r3, #1
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d02b      	beq.n	801300a <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012fb2:	f107 0016 	add.w	r0, r7, #22
 8012fb6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8012fba:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	9302      	str	r3, [sp, #8]
 8012fc0:	797b      	ldrb	r3, [r7, #5]
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2000      	movs	r0, #0
 8012fcc:	f7ff fdf0 	bl	8012bb0 <tcp_pbuf_prealloc>
 8012fd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8012fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f000 825a 	beq.w	801348e <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8012fda:	8afb      	ldrh	r3, [r7, #22]
 8012fdc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fe2:	6858      	ldr	r0, [r3, #4]
 8012fe4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	4413      	add	r3, r2
 8012fec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012fee:	4619      	mov	r1, r3
 8012ff0:	f007 faf5 	bl	801a5de <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012ff4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ff6:	f7fb fc89 	bl	800e90c <pbuf_clen>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8013002:	4413      	add	r3, r2
 8013004:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8013008:	e055      	b.n	80130b6 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801300a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013010:	e002      	b.n	8013018 <tcp_write+0x280>
 8013012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d1f8      	bne.n	8013012 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013022:	7b1b      	ldrb	r3, [r3, #12]
 8013024:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013028:	2b00      	cmp	r3, #0
 801302a:	d129      	bne.n	8013080 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801302c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013032:	8952      	ldrh	r2, [r2, #10]
 8013034:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013036:	68ba      	ldr	r2, [r7, #8]
 8013038:	429a      	cmp	r2, r3
 801303a:	d121      	bne.n	8013080 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801303c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8013040:	2b00      	cmp	r3, #0
 8013042:	d006      	beq.n	8013052 <tcp_write+0x2ba>
 8013044:	4b05      	ldr	r3, [pc, #20]	@ (801305c <tcp_write+0x2c4>)
 8013046:	f240 2231 	movw	r2, #561	@ 0x231
 801304a:	490c      	ldr	r1, [pc, #48]	@ (801307c <tcp_write+0x2e4>)
 801304c:	4805      	ldr	r0, [pc, #20]	@ (8013064 <tcp_write+0x2cc>)
 801304e:	f007 f861 	bl	801a114 <iprintf>
          extendlen = seglen;
 8013052:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013054:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013058:	e02d      	b.n	80130b6 <tcp_write+0x31e>
 801305a:	bf00      	nop
 801305c:	0801d910 	.word	0x0801d910
 8013060:	0801dab0 	.word	0x0801dab0
 8013064:	0801d964 	.word	0x0801d964
 8013068:	0801dac8 	.word	0x0801dac8
 801306c:	0801dafc 	.word	0x0801dafc
 8013070:	0801db14 	.word	0x0801db14
 8013074:	0801db44 	.word	0x0801db44
 8013078:	0801db64 	.word	0x0801db64
 801307c:	0801db84 	.word	0x0801db84
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013080:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013082:	2201      	movs	r2, #1
 8013084:	4619      	mov	r1, r3
 8013086:	2000      	movs	r0, #0
 8013088:	f7fb f8ce 	bl	800e228 <pbuf_alloc>
 801308c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801308e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013090:	2b00      	cmp	r3, #0
 8013092:	f000 81fe 	beq.w	8013492 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013096:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801309a:	68ba      	ldr	r2, [r7, #8]
 801309c:	441a      	add	r2, r3
 801309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80130a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80130a4:	f7fb fc32 	bl	800e90c <pbuf_clen>
 80130a8:	4603      	mov	r3, r0
 80130aa:	461a      	mov	r2, r3
 80130ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80130b0:	4413      	add	r3, r2
 80130b2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80130b6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80130ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80130bc:	4413      	add	r3, r2
 80130be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80130c2:	e0cd      	b.n	8013260 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 80c8 	beq.w	8013260 <tcp_write+0x4c8>
 80130d0:	4b72      	ldr	r3, [pc, #456]	@ (801329c <tcp_write+0x504>)
 80130d2:	f240 224a 	movw	r2, #586	@ 0x24a
 80130d6:	4972      	ldr	r1, [pc, #456]	@ (80132a0 <tcp_write+0x508>)
 80130d8:	4872      	ldr	r0, [pc, #456]	@ (80132a4 <tcp_write+0x50c>)
 80130da:	f007 f81b 	bl	801a114 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80130de:	e0bf      	b.n	8013260 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 80130e0:	88fa      	ldrh	r2, [r7, #6]
 80130e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 80130ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80130f2:	1ad3      	subs	r3, r2, r3
 80130f4:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 80130f6:	8bfa      	ldrh	r2, [r7, #30]
 80130f8:	8c3b      	ldrh	r3, [r7, #32]
 80130fa:	4293      	cmp	r3, r2
 80130fc:	bf28      	it	cs
 80130fe:	4613      	movcs	r3, r2
 8013100:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013102:	797b      	ldrb	r3, [r7, #5]
 8013104:	f003 0301 	and.w	r3, r3, #1
 8013108:	2b00      	cmp	r3, #0
 801310a:	d036      	beq.n	801317a <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801310c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013110:	b29a      	uxth	r2, r3
 8013112:	8bbb      	ldrh	r3, [r7, #28]
 8013114:	4413      	add	r3, r2
 8013116:	b299      	uxth	r1, r3
 8013118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801311a:	2b00      	cmp	r3, #0
 801311c:	bf0c      	ite	eq
 801311e:	2301      	moveq	r3, #1
 8013120:	2300      	movne	r3, #0
 8013122:	b2db      	uxtb	r3, r3
 8013124:	f107 0016 	add.w	r0, r7, #22
 8013128:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801312a:	9302      	str	r3, [sp, #8]
 801312c:	797b      	ldrb	r3, [r7, #5]
 801312e:	9301      	str	r3, [sp, #4]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	4603      	mov	r3, r0
 8013136:	2036      	movs	r0, #54	@ 0x36
 8013138:	f7ff fd3a 	bl	8012bb0 <tcp_pbuf_prealloc>
 801313c:	6378      	str	r0, [r7, #52]	@ 0x34
 801313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013140:	2b00      	cmp	r3, #0
 8013142:	f000 81a8 	beq.w	8013496 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013148:	895b      	ldrh	r3, [r3, #10]
 801314a:	8bba      	ldrh	r2, [r7, #28]
 801314c:	429a      	cmp	r2, r3
 801314e:	d906      	bls.n	801315e <tcp_write+0x3c6>
 8013150:	4b52      	ldr	r3, [pc, #328]	@ (801329c <tcp_write+0x504>)
 8013152:	f240 2266 	movw	r2, #614	@ 0x266
 8013156:	4954      	ldr	r1, [pc, #336]	@ (80132a8 <tcp_write+0x510>)
 8013158:	4852      	ldr	r0, [pc, #328]	@ (80132a4 <tcp_write+0x50c>)
 801315a:	f006 ffdb 	bl	801a114 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013160:	685a      	ldr	r2, [r3, #4]
 8013162:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013166:	18d0      	adds	r0, r2, r3
 8013168:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801316c:	68ba      	ldr	r2, [r7, #8]
 801316e:	4413      	add	r3, r2
 8013170:	8bba      	ldrh	r2, [r7, #28]
 8013172:	4619      	mov	r1, r3
 8013174:	f007 fa33 	bl	801a5de <memcpy>
 8013178:	e02f      	b.n	80131da <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801317a:	8afb      	ldrh	r3, [r7, #22]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d006      	beq.n	801318e <tcp_write+0x3f6>
 8013180:	4b46      	ldr	r3, [pc, #280]	@ (801329c <tcp_write+0x504>)
 8013182:	f240 2271 	movw	r2, #625	@ 0x271
 8013186:	4949      	ldr	r1, [pc, #292]	@ (80132ac <tcp_write+0x514>)
 8013188:	4846      	ldr	r0, [pc, #280]	@ (80132a4 <tcp_write+0x50c>)
 801318a:	f006 ffc3 	bl	801a114 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801318e:	8bbb      	ldrh	r3, [r7, #28]
 8013190:	2201      	movs	r2, #1
 8013192:	4619      	mov	r1, r3
 8013194:	2036      	movs	r0, #54	@ 0x36
 8013196:	f7fb f847 	bl	800e228 <pbuf_alloc>
 801319a:	61b8      	str	r0, [r7, #24]
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 817b 	beq.w	801349a <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80131a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80131a8:	68ba      	ldr	r2, [r7, #8]
 80131aa:	441a      	add	r2, r3
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80131b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80131ba:	4619      	mov	r1, r3
 80131bc:	2036      	movs	r0, #54	@ 0x36
 80131be:	f7fb f833 	bl	800e228 <pbuf_alloc>
 80131c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80131c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d103      	bne.n	80131d2 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80131ca:	69b8      	ldr	r0, [r7, #24]
 80131cc:	f7fb fb10 	bl	800e7f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80131d0:	e166      	b.n	80134a0 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80131d2:	69b9      	ldr	r1, [r7, #24]
 80131d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80131d6:	f7fb fbd9 	bl	800e98c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80131da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80131dc:	f7fb fb96 	bl	800e90c <pbuf_clen>
 80131e0:	4603      	mov	r3, r0
 80131e2:	461a      	mov	r2, r3
 80131e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80131e8:	4413      	add	r3, r2
 80131ea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80131ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80131f2:	2b10      	cmp	r3, #16
 80131f4:	d903      	bls.n	80131fe <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80131f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80131f8:	f7fb fafa 	bl	800e7f0 <pbuf_free>
      goto memerr;
 80131fc:	e150      	b.n	80134a0 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8013206:	441a      	add	r2, r3
 8013208:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	4613      	mov	r3, r2
 8013210:	2200      	movs	r2, #0
 8013212:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f7ff fc2b 	bl	8012a70 <tcp_create_segment>
 801321a:	6578      	str	r0, [r7, #84]	@ 0x54
 801321c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801321e:	2b00      	cmp	r3, #0
 8013220:	f000 813d 	beq.w	801349e <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8013224:	8afa      	ldrh	r2, [r7, #22]
 8013226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013228:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801322a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <tcp_write+0x49e>
      queue = seg;
 8013230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013234:	e00c      	b.n	8013250 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013238:	2b00      	cmp	r3, #0
 801323a:	d106      	bne.n	801324a <tcp_write+0x4b2>
 801323c:	4b17      	ldr	r3, [pc, #92]	@ (801329c <tcp_write+0x504>)
 801323e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013242:	491b      	ldr	r1, [pc, #108]	@ (80132b0 <tcp_write+0x518>)
 8013244:	4817      	ldr	r0, [pc, #92]	@ (80132a4 <tcp_write+0x50c>)
 8013246:	f006 ff65 	bl	801a114 <iprintf>
      prev_seg->next = seg;
 801324a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801324c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801324e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013252:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013254:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8013258:	8bbb      	ldrh	r3, [r7, #28]
 801325a:	4413      	add	r3, r2
 801325c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8013260:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8013264:	88fb      	ldrh	r3, [r7, #6]
 8013266:	429a      	cmp	r2, r3
 8013268:	f4ff af3a 	bcc.w	80130e0 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801326c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801326e:	2b00      	cmp	r3, #0
 8013270:	d00b      	beq.n	801328a <tcp_write+0x4f2>
 8013272:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8013276:	2b00      	cmp	r3, #0
 8013278:	d007      	beq.n	801328a <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801327a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801327c:	895a      	ldrh	r2, [r3, #10]
 801327e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8013282:	4413      	add	r3, r2
 8013284:	b29a      	uxth	r2, r3
 8013286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013288:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801328a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801328e:	2b00      	cmp	r3, #0
 8013290:	d052      	beq.n	8013338 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	633b      	str	r3, [r7, #48]	@ 0x30
 8013298:	e02e      	b.n	80132f8 <tcp_write+0x560>
 801329a:	bf00      	nop
 801329c:	0801d910 	.word	0x0801d910
 80132a0:	0801dbb0 	.word	0x0801dbb0
 80132a4:	0801d964 	.word	0x0801d964
 80132a8:	0801dbe0 	.word	0x0801dbe0
 80132ac:	0801dc20 	.word	0x0801dc20
 80132b0:	0801dc30 	.word	0x0801dc30
      p->tot_len += oversize_used;
 80132b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b6:	891a      	ldrh	r2, [r3, #8]
 80132b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80132bc:	4413      	add	r3, r2
 80132be:	b29a      	uxth	r2, r3
 80132c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80132c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d112      	bne.n	80132f2 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80132cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132d2:	8952      	ldrh	r2, [r2, #10]
 80132d4:	4413      	add	r3, r2
 80132d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80132da:	68b9      	ldr	r1, [r7, #8]
 80132dc:	4618      	mov	r0, r3
 80132de:	f007 f97e 	bl	801a5de <memcpy>
        p->len += oversize_used;
 80132e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e4:	895a      	ldrh	r2, [r3, #10]
 80132e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80132ea:	4413      	add	r3, r2
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80132f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80132f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1da      	bne.n	80132b4 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 80132fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013300:	891a      	ldrh	r2, [r3, #8]
 8013302:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013306:	4413      	add	r3, r2
 8013308:	b29a      	uxth	r2, r3
 801330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801330c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801330e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013310:	895b      	ldrh	r3, [r3, #10]
 8013312:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013316:	429a      	cmp	r2, r3
 8013318:	d906      	bls.n	8013328 <tcp_write+0x590>
 801331a:	4b78      	ldr	r3, [pc, #480]	@ (80134fc <tcp_write+0x764>)
 801331c:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013320:	4977      	ldr	r1, [pc, #476]	@ (8013500 <tcp_write+0x768>)
 8013322:	4878      	ldr	r0, [pc, #480]	@ (8013504 <tcp_write+0x76c>)
 8013324:	f006 fef6 	bl	801a114 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8013328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801332a:	895a      	ldrh	r2, [r3, #10]
 801332c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	b29a      	uxth	r2, r3
 8013334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013336:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013338:	8afa      	ldrh	r2, [r7, #22]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013342:	2b00      	cmp	r3, #0
 8013344:	d018      	beq.n	8013378 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013348:	2b00      	cmp	r3, #0
 801334a:	d106      	bne.n	801335a <tcp_write+0x5c2>
 801334c:	4b6b      	ldr	r3, [pc, #428]	@ (80134fc <tcp_write+0x764>)
 801334e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8013352:	496d      	ldr	r1, [pc, #436]	@ (8013508 <tcp_write+0x770>)
 8013354:	486b      	ldr	r0, [pc, #428]	@ (8013504 <tcp_write+0x76c>)
 8013356:	f006 fedd 	bl	801a114 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801335a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013360:	4618      	mov	r0, r3
 8013362:	f7fb fb13 	bl	800e98c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013368:	891a      	ldrh	r2, [r3, #8]
 801336a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801336c:	891b      	ldrh	r3, [r3, #8]
 801336e:	4413      	add	r3, r2
 8013370:	b29a      	uxth	r2, r3
 8013372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013374:	811a      	strh	r2, [r3, #8]
 8013376:	e03c      	b.n	80133f2 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8013378:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801337c:	2b00      	cmp	r3, #0
 801337e:	d038      	beq.n	80133f2 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <tcp_write+0x5f6>
 8013386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <tcp_write+0x604>
 801338e:	4b5b      	ldr	r3, [pc, #364]	@ (80134fc <tcp_write+0x764>)
 8013390:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8013394:	495d      	ldr	r1, [pc, #372]	@ (801350c <tcp_write+0x774>)
 8013396:	485b      	ldr	r0, [pc, #364]	@ (8013504 <tcp_write+0x76c>)
 8013398:	f006 febc 	bl	801a114 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801339c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133a2:	e00a      	b.n	80133ba <tcp_write+0x622>
      p->tot_len += extendlen;
 80133a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133a6:	891a      	ldrh	r2, [r3, #8]
 80133a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80133ac:	4413      	add	r3, r2
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80133b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1f0      	bne.n	80133a4 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 80133c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c4:	891a      	ldrh	r2, [r3, #8]
 80133c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80133ca:	4413      	add	r3, r2
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80133d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d4:	895a      	ldrh	r2, [r3, #10]
 80133d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80133da:	4413      	add	r3, r2
 80133dc:	b29a      	uxth	r2, r3
 80133de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80133e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133e4:	891a      	ldrh	r2, [r3, #8]
 80133e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80133ea:	4413      	add	r3, r2
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80133f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d103      	bne.n	8013400 <tcp_write+0x668>
    pcb->unsent = queue;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80133fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80133fe:	e002      	b.n	8013406 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 8013400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013404:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801340a:	88fb      	ldrh	r3, [r7, #6]
 801340c:	441a      	add	r2, r3
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013418:	88fb      	ldrh	r3, [r7, #6]
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	b29a      	uxth	r2, r3
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801342a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00e      	beq.n	8013456 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801343c:	2b00      	cmp	r3, #0
 801343e:	d10a      	bne.n	8013456 <tcp_write+0x6be>
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013444:	2b00      	cmp	r3, #0
 8013446:	d106      	bne.n	8013456 <tcp_write+0x6be>
 8013448:	4b2c      	ldr	r3, [pc, #176]	@ (80134fc <tcp_write+0x764>)
 801344a:	f240 3212 	movw	r2, #786	@ 0x312
 801344e:	4930      	ldr	r1, [pc, #192]	@ (8013510 <tcp_write+0x778>)
 8013450:	482c      	ldr	r0, [pc, #176]	@ (8013504 <tcp_write+0x76c>)
 8013452:	f006 fe5f 	bl	801a114 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013458:	2b00      	cmp	r3, #0
 801345a:	d016      	beq.n	801348a <tcp_write+0x6f2>
 801345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801345e:	691b      	ldr	r3, [r3, #16]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d012      	beq.n	801348a <tcp_write+0x6f2>
 8013464:	797b      	ldrb	r3, [r7, #5]
 8013466:	f003 0302 	and.w	r3, r3, #2
 801346a:	2b00      	cmp	r3, #0
 801346c:	d10d      	bne.n	801348a <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013470:	691b      	ldr	r3, [r3, #16]
 8013472:	899b      	ldrh	r3, [r3, #12]
 8013474:	b29c      	uxth	r4, r3
 8013476:	2008      	movs	r0, #8
 8013478:	f7f9 fce2 	bl	800ce40 <lwip_htons>
 801347c:	4603      	mov	r3, r0
 801347e:	461a      	mov	r2, r3
 8013480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013482:	691b      	ldr	r3, [r3, #16]
 8013484:	4322      	orrs	r2, r4
 8013486:	b292      	uxth	r2, r2
 8013488:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	e031      	b.n	80134f2 <tcp_write+0x75a>
          goto memerr;
 801348e:	bf00      	nop
 8013490:	e006      	b.n	80134a0 <tcp_write+0x708>
            goto memerr;
 8013492:	bf00      	nop
 8013494:	e004      	b.n	80134a0 <tcp_write+0x708>
        goto memerr;
 8013496:	bf00      	nop
 8013498:	e002      	b.n	80134a0 <tcp_write+0x708>
        goto memerr;
 801349a:	bf00      	nop
 801349c:	e000      	b.n	80134a0 <tcp_write+0x708>
      goto memerr;
 801349e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	8b5b      	ldrh	r3, [r3, #26]
 80134a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80134ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <tcp_write+0x722>
    pbuf_free(concat_p);
 80134b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80134b6:	f7fb f99b 	bl	800e7f0 <pbuf_free>
  }
  if (queue != NULL) {
 80134ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <tcp_write+0x72e>
    tcp_segs_free(queue);
 80134c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80134c2:	f7fc ff11 	bl	80102e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d00e      	beq.n	80134ee <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10a      	bne.n	80134ee <tcp_write+0x756>
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <tcp_write+0x756>
 80134e0:	4b06      	ldr	r3, [pc, #24]	@ (80134fc <tcp_write+0x764>)
 80134e2:	f240 3227 	movw	r2, #807	@ 0x327
 80134e6:	490a      	ldr	r1, [pc, #40]	@ (8013510 <tcp_write+0x778>)
 80134e8:	4806      	ldr	r0, [pc, #24]	@ (8013504 <tcp_write+0x76c>)
 80134ea:	f006 fe13 	bl	801a114 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80134ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3764      	adds	r7, #100	@ 0x64
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd90      	pop	{r4, r7, pc}
 80134fa:	bf00      	nop
 80134fc:	0801d910 	.word	0x0801d910
 8013500:	0801dc44 	.word	0x0801dc44
 8013504:	0801d964 	.word	0x0801d964
 8013508:	0801dc70 	.word	0x0801dc70
 801350c:	0801dca8 	.word	0x0801dca8
 8013510:	0801dce0 	.word	0x0801dce0

08013514 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013514:	b590      	push	{r4, r7, lr}
 8013516:	b08b      	sub	sp, #44	@ 0x2c
 8013518:	af02      	add	r7, sp, #8
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	460b      	mov	r3, r1
 801351e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	61bb      	str	r3, [r7, #24]
 8013524:	2300      	movs	r3, #0
 8013526:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013528:	2300      	movs	r3, #0
 801352a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d106      	bne.n	8013540 <tcp_split_unsent_seg+0x2c>
 8013532:	4b97      	ldr	r3, [pc, #604]	@ (8013790 <tcp_split_unsent_seg+0x27c>)
 8013534:	f240 324b 	movw	r2, #843	@ 0x34b
 8013538:	4996      	ldr	r1, [pc, #600]	@ (8013794 <tcp_split_unsent_seg+0x280>)
 801353a:	4897      	ldr	r0, [pc, #604]	@ (8013798 <tcp_split_unsent_seg+0x284>)
 801353c:	f006 fdea 	bl	801a114 <iprintf>

  useg = pcb->unsent;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013544:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d102      	bne.n	8013552 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801354c:	f04f 33ff 	mov.w	r3, #4294967295
 8013550:	e119      	b.n	8013786 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8013552:	887b      	ldrh	r3, [r7, #2]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d109      	bne.n	801356c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013558:	4b8d      	ldr	r3, [pc, #564]	@ (8013790 <tcp_split_unsent_seg+0x27c>)
 801355a:	f240 3253 	movw	r2, #851	@ 0x353
 801355e:	498f      	ldr	r1, [pc, #572]	@ (801379c <tcp_split_unsent_seg+0x288>)
 8013560:	488d      	ldr	r0, [pc, #564]	@ (8013798 <tcp_split_unsent_seg+0x284>)
 8013562:	f006 fdd7 	bl	801a114 <iprintf>
    return ERR_VAL;
 8013566:	f06f 0305 	mvn.w	r3, #5
 801356a:	e10c      	b.n	8013786 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	891b      	ldrh	r3, [r3, #8]
 8013570:	887a      	ldrh	r2, [r7, #2]
 8013572:	429a      	cmp	r2, r3
 8013574:	d301      	bcc.n	801357a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	e105      	b.n	8013786 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801357e:	887a      	ldrh	r2, [r7, #2]
 8013580:	429a      	cmp	r2, r3
 8013582:	d906      	bls.n	8013592 <tcp_split_unsent_seg+0x7e>
 8013584:	4b82      	ldr	r3, [pc, #520]	@ (8013790 <tcp_split_unsent_seg+0x27c>)
 8013586:	f240 325b 	movw	r2, #859	@ 0x35b
 801358a:	4985      	ldr	r1, [pc, #532]	@ (80137a0 <tcp_split_unsent_seg+0x28c>)
 801358c:	4882      	ldr	r0, [pc, #520]	@ (8013798 <tcp_split_unsent_seg+0x284>)
 801358e:	f006 fdc1 	bl	801a114 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	891b      	ldrh	r3, [r3, #8]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d106      	bne.n	80135a8 <tcp_split_unsent_seg+0x94>
 801359a:	4b7d      	ldr	r3, [pc, #500]	@ (8013790 <tcp_split_unsent_seg+0x27c>)
 801359c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80135a0:	4980      	ldr	r1, [pc, #512]	@ (80137a4 <tcp_split_unsent_seg+0x290>)
 80135a2:	487d      	ldr	r0, [pc, #500]	@ (8013798 <tcp_split_unsent_seg+0x284>)
 80135a4:	f006 fdb6 	bl	801a114 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	7b1b      	ldrb	r3, [r3, #12]
 80135ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80135ae:	7bfb      	ldrb	r3, [r7, #15]
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	f003 0304 	and.w	r3, r3, #4
 80135b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	891a      	ldrh	r2, [r3, #8]
 80135be:	887b      	ldrh	r3, [r7, #2]
 80135c0:	1ad3      	subs	r3, r2, r3
 80135c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80135c4:	7bbb      	ldrb	r3, [r7, #14]
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	89bb      	ldrh	r3, [r7, #12]
 80135ca:	4413      	add	r3, r2
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135d2:	4619      	mov	r1, r3
 80135d4:	2036      	movs	r0, #54	@ 0x36
 80135d6:	f7fa fe27 	bl	800e228 <pbuf_alloc>
 80135da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f000 80ba 	beq.w	8013758 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	891a      	ldrh	r2, [r3, #8]
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	891b      	ldrh	r3, [r3, #8]
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	887b      	ldrh	r3, [r7, #2]
 80135f4:	4413      	add	r3, r2
 80135f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	6858      	ldr	r0, [r3, #4]
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	685a      	ldr	r2, [r3, #4]
 8013600:	7bbb      	ldrb	r3, [r7, #14]
 8013602:	18d1      	adds	r1, r2, r3
 8013604:	897b      	ldrh	r3, [r7, #10]
 8013606:	89ba      	ldrh	r2, [r7, #12]
 8013608:	f7fb faf8 	bl	800ebfc <pbuf_copy_partial>
 801360c:	4603      	mov	r3, r0
 801360e:	461a      	mov	r2, r3
 8013610:	89bb      	ldrh	r3, [r7, #12]
 8013612:	4293      	cmp	r3, r2
 8013614:	f040 80a2 	bne.w	801375c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	691b      	ldr	r3, [r3, #16]
 801361c:	899b      	ldrh	r3, [r3, #12]
 801361e:	b29b      	uxth	r3, r3
 8013620:	4618      	mov	r0, r3
 8013622:	f7f9 fc0d 	bl	800ce40 <lwip_htons>
 8013626:	4603      	mov	r3, r0
 8013628:	b2db      	uxtb	r3, r3
 801362a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801362e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013630:	2300      	movs	r3, #0
 8013632:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013634:	7ffb      	ldrb	r3, [r7, #31]
 8013636:	f003 0308 	and.w	r3, r3, #8
 801363a:	2b00      	cmp	r3, #0
 801363c:	d007      	beq.n	801364e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801363e:	7ffb      	ldrb	r3, [r7, #31]
 8013640:	f023 0308 	bic.w	r3, r3, #8
 8013644:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013646:	7fbb      	ldrb	r3, [r7, #30]
 8013648:	f043 0308 	orr.w	r3, r3, #8
 801364c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801364e:	7ffb      	ldrb	r3, [r7, #31]
 8013650:	f003 0301 	and.w	r3, r3, #1
 8013654:	2b00      	cmp	r3, #0
 8013656:	d007      	beq.n	8013668 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013658:	7ffb      	ldrb	r3, [r7, #31]
 801365a:	f023 0301 	bic.w	r3, r3, #1
 801365e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013660:	7fbb      	ldrb	r3, [r7, #30]
 8013662:	f043 0301 	orr.w	r3, r3, #1
 8013666:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	4618      	mov	r0, r3
 8013670:	f7f9 fbfc 	bl	800ce6c <lwip_htonl>
 8013674:	4602      	mov	r2, r0
 8013676:	887b      	ldrh	r3, [r7, #2]
 8013678:	18d1      	adds	r1, r2, r3
 801367a:	7fba      	ldrb	r2, [r7, #30]
 801367c:	7bfb      	ldrb	r3, [r7, #15]
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	460b      	mov	r3, r1
 8013682:	6939      	ldr	r1, [r7, #16]
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff f9f3 	bl	8012a70 <tcp_create_segment>
 801368a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d066      	beq.n	8013760 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	4618      	mov	r0, r3
 8013698:	f7fb f938 	bl	800e90c <pbuf_clen>
 801369c:	4603      	mov	r3, r0
 801369e:	461a      	mov	r2, r3
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80136a6:	1a9b      	subs	r3, r3, r2
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	6858      	ldr	r0, [r3, #4]
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	891a      	ldrh	r2, [r3, #8]
 80136ba:	89bb      	ldrh	r3, [r7, #12]
 80136bc:	1ad3      	subs	r3, r2, r3
 80136be:	b29b      	uxth	r3, r3
 80136c0:	4619      	mov	r1, r3
 80136c2:	f7fa ff0f 	bl	800e4e4 <pbuf_realloc>
  useg->len -= remainder;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	891a      	ldrh	r2, [r3, #8]
 80136ca:	89bb      	ldrh	r3, [r7, #12]
 80136cc:	1ad3      	subs	r3, r2, r3
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	899b      	ldrh	r3, [r3, #12]
 80136da:	b29c      	uxth	r4, r3
 80136dc:	7ffb      	ldrb	r3, [r7, #31]
 80136de:	b29b      	uxth	r3, r3
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f9 fbad 	bl	800ce40 <lwip_htons>
 80136e6:	4603      	mov	r3, r0
 80136e8:	461a      	mov	r2, r3
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	691b      	ldr	r3, [r3, #16]
 80136ee:	4322      	orrs	r2, r4
 80136f0:	b292      	uxth	r2, r2
 80136f2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	2200      	movs	r2, #0
 80136f8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fb f904 	bl	800e90c <pbuf_clen>
 8013704:	4603      	mov	r3, r0
 8013706:	461a      	mov	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801370e:	4413      	add	r3, r2
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	4618      	mov	r0, r3
 801371e:	f7fb f8f5 	bl	800e90c <pbuf_clen>
 8013722:	4603      	mov	r3, r0
 8013724:	461a      	mov	r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801372c:	4413      	add	r3, r2
 801372e:	b29a      	uxth	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	69ba      	ldr	r2, [r7, #24]
 8013742:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d103      	bne.n	8013754 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013754:	2300      	movs	r3, #0
 8013756:	e016      	b.n	8013786 <tcp_split_unsent_seg+0x272>
    goto memerr;
 8013758:	bf00      	nop
 801375a:	e002      	b.n	8013762 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801375c:	bf00      	nop
 801375e:	e000      	b.n	8013762 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013760:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d006      	beq.n	8013776 <tcp_split_unsent_seg+0x262>
 8013768:	4b09      	ldr	r3, [pc, #36]	@ (8013790 <tcp_split_unsent_seg+0x27c>)
 801376a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801376e:	490e      	ldr	r1, [pc, #56]	@ (80137a8 <tcp_split_unsent_seg+0x294>)
 8013770:	4809      	ldr	r0, [pc, #36]	@ (8013798 <tcp_split_unsent_seg+0x284>)
 8013772:	f006 fccf 	bl	801a114 <iprintf>
  if (p != NULL) {
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801377c:	6938      	ldr	r0, [r7, #16]
 801377e:	f7fb f837 	bl	800e7f0 <pbuf_free>
  }

  return ERR_MEM;
 8013782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013786:	4618      	mov	r0, r3
 8013788:	3724      	adds	r7, #36	@ 0x24
 801378a:	46bd      	mov	sp, r7
 801378c:	bd90      	pop	{r4, r7, pc}
 801378e:	bf00      	nop
 8013790:	0801d910 	.word	0x0801d910
 8013794:	0801dd00 	.word	0x0801dd00
 8013798:	0801d964 	.word	0x0801d964
 801379c:	0801dd24 	.word	0x0801dd24
 80137a0:	0801dd48 	.word	0x0801dd48
 80137a4:	0801dd58 	.word	0x0801dd58
 80137a8:	0801dd68 	.word	0x0801dd68

080137ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d106      	bne.n	80137c8 <tcp_send_fin+0x1c>
 80137ba:	4b21      	ldr	r3, [pc, #132]	@ (8013840 <tcp_send_fin+0x94>)
 80137bc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80137c0:	4920      	ldr	r1, [pc, #128]	@ (8013844 <tcp_send_fin+0x98>)
 80137c2:	4821      	ldr	r0, [pc, #132]	@ (8013848 <tcp_send_fin+0x9c>)
 80137c4:	f006 fca6 	bl	801a114 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d02e      	beq.n	801382e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	e002      	b.n	80137de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1f8      	bne.n	80137d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	691b      	ldr	r3, [r3, #16]
 80137ea:	899b      	ldrh	r3, [r3, #12]
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7f9 fb26 	bl	800ce40 <lwip_htons>
 80137f4:	4603      	mov	r3, r0
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	f003 0307 	and.w	r3, r3, #7
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d116      	bne.n	801382e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	899b      	ldrh	r3, [r3, #12]
 8013806:	b29c      	uxth	r4, r3
 8013808:	2001      	movs	r0, #1
 801380a:	f7f9 fb19 	bl	800ce40 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	461a      	mov	r2, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	4322      	orrs	r2, r4
 8013818:	b292      	uxth	r2, r2
 801381a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	8b5b      	ldrh	r3, [r3, #26]
 8013820:	f043 0320 	orr.w	r3, r3, #32
 8013824:	b29a      	uxth	r2, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	e004      	b.n	8013838 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801382e:	2101      	movs	r1, #1
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f000 f80b 	bl	801384c <tcp_enqueue_flags>
 8013836:	4603      	mov	r3, r0
}
 8013838:	4618      	mov	r0, r3
 801383a:	3714      	adds	r7, #20
 801383c:	46bd      	mov	sp, r7
 801383e:	bd90      	pop	{r4, r7, pc}
 8013840:	0801d910 	.word	0x0801d910
 8013844:	0801dd74 	.word	0x0801dd74
 8013848:	0801d964 	.word	0x0801d964

0801384c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b088      	sub	sp, #32
 8013850:	af02      	add	r7, sp, #8
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	460b      	mov	r3, r1
 8013856:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013858:	2300      	movs	r3, #0
 801385a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801385c:	2300      	movs	r3, #0
 801385e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	f003 0303 	and.w	r3, r3, #3
 8013866:	2b00      	cmp	r3, #0
 8013868:	d106      	bne.n	8013878 <tcp_enqueue_flags+0x2c>
 801386a:	4b67      	ldr	r3, [pc, #412]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 801386c:	f240 4211 	movw	r2, #1041	@ 0x411
 8013870:	4966      	ldr	r1, [pc, #408]	@ (8013a0c <tcp_enqueue_flags+0x1c0>)
 8013872:	4867      	ldr	r0, [pc, #412]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 8013874:	f006 fc4e 	bl	801a114 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d106      	bne.n	801388c <tcp_enqueue_flags+0x40>
 801387e:	4b62      	ldr	r3, [pc, #392]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 8013880:	f240 4213 	movw	r2, #1043	@ 0x413
 8013884:	4963      	ldr	r1, [pc, #396]	@ (8013a14 <tcp_enqueue_flags+0x1c8>)
 8013886:	4862      	ldr	r0, [pc, #392]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 8013888:	f006 fc44 	bl	801a114 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801388c:	78fb      	ldrb	r3, [r7, #3]
 801388e:	f003 0302 	and.w	r3, r3, #2
 8013892:	2b00      	cmp	r3, #0
 8013894:	d001      	beq.n	801389a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013896:	2301      	movs	r3, #1
 8013898:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801389a:	7dfb      	ldrb	r3, [r7, #23]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f003 0304 	and.w	r3, r3, #4
 80138a4:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80138a6:	7dbb      	ldrb	r3, [r7, #22]
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80138ae:	4619      	mov	r1, r3
 80138b0:	2036      	movs	r0, #54	@ 0x36
 80138b2:	f7fa fcb9 	bl	800e228 <pbuf_alloc>
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d109      	bne.n	80138d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80138cc:	f04f 33ff 	mov.w	r3, #4294967295
 80138d0:	e095      	b.n	80139fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	895a      	ldrh	r2, [r3, #10]
 80138d6:	7dbb      	ldrb	r3, [r7, #22]
 80138d8:	b29b      	uxth	r3, r3
 80138da:	429a      	cmp	r2, r3
 80138dc:	d206      	bcs.n	80138ec <tcp_enqueue_flags+0xa0>
 80138de:	4b4a      	ldr	r3, [pc, #296]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 80138e0:	f240 4239 	movw	r2, #1081	@ 0x439
 80138e4:	494c      	ldr	r1, [pc, #304]	@ (8013a18 <tcp_enqueue_flags+0x1cc>)
 80138e6:	484a      	ldr	r0, [pc, #296]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 80138e8:	f006 fc14 	bl	801a114 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80138f0:	78fa      	ldrb	r2, [r7, #3]
 80138f2:	7dfb      	ldrb	r3, [r7, #23]
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	460b      	mov	r3, r1
 80138f8:	68f9      	ldr	r1, [r7, #12]
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7ff f8b8 	bl	8012a70 <tcp_create_segment>
 8013900:	60b8      	str	r0, [r7, #8]
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d109      	bne.n	801391c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	8b5b      	ldrh	r3, [r3, #26]
 801390c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013910:	b29a      	uxth	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013916:	f04f 33ff 	mov.w	r3, #4294967295
 801391a:	e070      	b.n	80139fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	f003 0303 	and.w	r3, r3, #3
 8013924:	2b00      	cmp	r3, #0
 8013926:	d006      	beq.n	8013936 <tcp_enqueue_flags+0xea>
 8013928:	4b37      	ldr	r3, [pc, #220]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 801392a:	f240 4242 	movw	r2, #1090	@ 0x442
 801392e:	493b      	ldr	r1, [pc, #236]	@ (8013a1c <tcp_enqueue_flags+0x1d0>)
 8013930:	4837      	ldr	r0, [pc, #220]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 8013932:	f006 fbef 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d006      	beq.n	801394c <tcp_enqueue_flags+0x100>
 801393e:	4b32      	ldr	r3, [pc, #200]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 8013940:	f240 4243 	movw	r2, #1091	@ 0x443
 8013944:	4936      	ldr	r1, [pc, #216]	@ (8013a20 <tcp_enqueue_flags+0x1d4>)
 8013946:	4832      	ldr	r0, [pc, #200]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 8013948:	f006 fbe4 	bl	801a114 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013950:	2b00      	cmp	r3, #0
 8013952:	d103      	bne.n	801395c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	66da      	str	r2, [r3, #108]	@ 0x6c
 801395a:	e00d      	b.n	8013978 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013960:	613b      	str	r3, [r7, #16]
 8013962:	e002      	b.n	801396a <tcp_enqueue_flags+0x11e>
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	613b      	str	r3, [r7, #16]
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1f8      	bne.n	8013964 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013980:	78fb      	ldrb	r3, [r7, #3]
 8013982:	f003 0302 	and.w	r3, r3, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d104      	bne.n	8013994 <tcp_enqueue_flags+0x148>
 801398a:	78fb      	ldrb	r3, [r7, #3]
 801398c:	f003 0301 	and.w	r3, r3, #1
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801399e:	78fb      	ldrb	r3, [r7, #3]
 80139a0:	f003 0301 	and.w	r3, r3, #1
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d006      	beq.n	80139b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	8b5b      	ldrh	r3, [r3, #26]
 80139ac:	f043 0320 	orr.w	r3, r3, #32
 80139b0:	b29a      	uxth	r2, r3
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fa ffa6 	bl	800e90c <pbuf_clen>
 80139c0:	4603      	mov	r3, r0
 80139c2:	461a      	mov	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139ca:	4413      	add	r3, r2
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00e      	beq.n	80139fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <tcp_enqueue_flags+0x1b0>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d106      	bne.n	80139fc <tcp_enqueue_flags+0x1b0>
 80139ee:	4b06      	ldr	r3, [pc, #24]	@ (8013a08 <tcp_enqueue_flags+0x1bc>)
 80139f0:	f240 4265 	movw	r2, #1125	@ 0x465
 80139f4:	490b      	ldr	r1, [pc, #44]	@ (8013a24 <tcp_enqueue_flags+0x1d8>)
 80139f6:	4806      	ldr	r0, [pc, #24]	@ (8013a10 <tcp_enqueue_flags+0x1c4>)
 80139f8:	f006 fb8c 	bl	801a114 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	0801d910 	.word	0x0801d910
 8013a0c:	0801dd90 	.word	0x0801dd90
 8013a10:	0801d964 	.word	0x0801d964
 8013a14:	0801dde8 	.word	0x0801dde8
 8013a18:	0801de08 	.word	0x0801de08
 8013a1c:	0801de44 	.word	0x0801de44
 8013a20:	0801de5c 	.word	0x0801de5c
 8013a24:	0801de88 	.word	0x0801de88

08013a28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013a28:	b5b0      	push	{r4, r5, r7, lr}
 8013a2a:	b08a      	sub	sp, #40	@ 0x28
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d106      	bne.n	8013a44 <tcp_output+0x1c>
 8013a36:	4b8a      	ldr	r3, [pc, #552]	@ (8013c60 <tcp_output+0x238>)
 8013a38:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013a3c:	4989      	ldr	r1, [pc, #548]	@ (8013c64 <tcp_output+0x23c>)
 8013a3e:	488a      	ldr	r0, [pc, #552]	@ (8013c68 <tcp_output+0x240>)
 8013a40:	f006 fb68 	bl	801a114 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	7d1b      	ldrb	r3, [r3, #20]
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	d106      	bne.n	8013a5a <tcp_output+0x32>
 8013a4c:	4b84      	ldr	r3, [pc, #528]	@ (8013c60 <tcp_output+0x238>)
 8013a4e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013a52:	4986      	ldr	r1, [pc, #536]	@ (8013c6c <tcp_output+0x244>)
 8013a54:	4884      	ldr	r0, [pc, #528]	@ (8013c68 <tcp_output+0x240>)
 8013a56:	f006 fb5d 	bl	801a114 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013a5a:	4b85      	ldr	r3, [pc, #532]	@ (8013c70 <tcp_output+0x248>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d101      	bne.n	8013a68 <tcp_output+0x40>
    return ERR_OK;
 8013a64:	2300      	movs	r3, #0
 8013a66:	e1d1      	b.n	8013e0c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013a74:	4293      	cmp	r3, r2
 8013a76:	bf28      	it	cs
 8013a78:	4613      	movcs	r3, r2
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d10b      	bne.n	8013aa2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	8b5b      	ldrh	r3, [r3, #26]
 8013a8e:	f003 0302 	and.w	r3, r3, #2
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f000 81ad 	beq.w	8013df2 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fdf9 	bl	8014690 <tcp_send_empty_ack>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	e1b4      	b.n	8013e0c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7fe ffc4 	bl	8012a38 <tcp_route>
 8013ab0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <tcp_output+0x96>
    return ERR_RTE;
 8013ab8:	f06f 0303 	mvn.w	r3, #3
 8013abc:	e1a6      	b.n	8013e0c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d003      	beq.n	8013acc <tcp_output+0xa4>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d111      	bne.n	8013af0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d002      	beq.n	8013ad8 <tcp_output+0xb0>
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	3304      	adds	r3, #4
 8013ad6:	e000      	b.n	8013ada <tcp_output+0xb2>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d102      	bne.n	8013ae8 <tcp_output+0xc0>
      return ERR_RTE;
 8013ae2:	f06f 0303 	mvn.w	r3, #3
 8013ae6:	e191      	b.n	8013e0c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af2:	691b      	ldr	r3, [r3, #16]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7f9 f9b8 	bl	800ce6c <lwip_htonl>
 8013afc:	4602      	mov	r2, r0
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b02:	1ad3      	subs	r3, r2, r3
 8013b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b06:	8912      	ldrh	r2, [r2, #8]
 8013b08:	4413      	add	r3, r2
 8013b0a:	69ba      	ldr	r2, [r7, #24]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d227      	bcs.n	8013b60 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b16:	461a      	mov	r2, r3
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d114      	bne.n	8013b48 <tcp_output+0x120>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d110      	bne.n	8013b48 <tcp_output+0x120>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10b      	bne.n	8013b48 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2200      	movs	r2, #0
 8013b34:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2200      	movs	r2, #0
 8013b44:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	8b5b      	ldrh	r3, [r3, #26]
 8013b4c:	f003 0302 	and.w	r3, r3, #2
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f000 8150 	beq.w	8013df6 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fd9a 	bl	8014690 <tcp_send_empty_ack>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	e155      	b.n	8013e0c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2200      	movs	r2, #0
 8013b64:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b6c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013b6e:	6a3b      	ldr	r3, [r7, #32]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f000 811f 	beq.w	8013db4 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8013b76:	e002      	b.n	8013b7e <tcp_output+0x156>
 8013b78:	6a3b      	ldr	r3, [r7, #32]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	623b      	str	r3, [r7, #32]
 8013b7e:	6a3b      	ldr	r3, [r7, #32]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1f8      	bne.n	8013b78 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013b86:	e115      	b.n	8013db4 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8a:	691b      	ldr	r3, [r3, #16]
 8013b8c:	899b      	ldrh	r3, [r3, #12]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f9 f955 	bl	800ce40 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	f003 0304 	and.w	r3, r3, #4
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d006      	beq.n	8013bb0 <tcp_output+0x188>
 8013ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8013c60 <tcp_output+0x238>)
 8013ba4:	f240 5236 	movw	r2, #1334	@ 0x536
 8013ba8:	4932      	ldr	r1, [pc, #200]	@ (8013c74 <tcp_output+0x24c>)
 8013baa:	482f      	ldr	r0, [pc, #188]	@ (8013c68 <tcp_output+0x240>)
 8013bac:	f006 fab2 	bl	801a114 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d01f      	beq.n	8013bf8 <tcp_output+0x1d0>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	8b5b      	ldrh	r3, [r3, #26]
 8013bbc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d119      	bne.n	8013bf8 <tcp_output+0x1d0>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00b      	beq.n	8013be4 <tcp_output+0x1bc>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d110      	bne.n	8013bf8 <tcp_output+0x1d0>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bda:	891a      	ldrh	r2, [r3, #8]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d209      	bcs.n	8013bf8 <tcp_output+0x1d0>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d004      	beq.n	8013bf8 <tcp_output+0x1d0>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013bf4:	2b0f      	cmp	r3, #15
 8013bf6:	d901      	bls.n	8013bfc <tcp_output+0x1d4>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	e000      	b.n	8013bfe <tcp_output+0x1d6>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d106      	bne.n	8013c10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	8b5b      	ldrh	r3, [r3, #26]
 8013c06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 80e7 	beq.w	8013dde <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	7d1b      	ldrb	r3, [r3, #20]
 8013c14:	2b02      	cmp	r3, #2
 8013c16:	d00d      	beq.n	8013c34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1a:	691b      	ldr	r3, [r3, #16]
 8013c1c:	899b      	ldrh	r3, [r3, #12]
 8013c1e:	b29c      	uxth	r4, r3
 8013c20:	2010      	movs	r0, #16
 8013c22:	f7f9 f90d 	bl	800ce40 <lwip_htons>
 8013c26:	4603      	mov	r3, r0
 8013c28:	461a      	mov	r2, r3
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2c:	691b      	ldr	r3, [r3, #16]
 8013c2e:	4322      	orrs	r2, r4
 8013c30:	b292      	uxth	r2, r2
 8013c32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013c34:	697a      	ldr	r2, [r7, #20]
 8013c36:	6879      	ldr	r1, [r7, #4]
 8013c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c3a:	f000 f90b 	bl	8013e54 <tcp_output_segment>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d016      	beq.n	8013c78 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	8b5b      	ldrh	r3, [r3, #26]
 8013c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	835a      	strh	r2, [r3, #26]
      return err;
 8013c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c5c:	e0d6      	b.n	8013e0c <tcp_output+0x3e4>
 8013c5e:	bf00      	nop
 8013c60:	0801d910 	.word	0x0801d910
 8013c64:	0801deb0 	.word	0x0801deb0
 8013c68:	0801d964 	.word	0x0801d964
 8013c6c:	0801dec8 	.word	0x0801dec8
 8013c70:	200176bc 	.word	0x200176bc
 8013c74:	0801def0 	.word	0x0801def0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8013c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	7d1b      	ldrb	r3, [r3, #20]
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	d006      	beq.n	8013c9c <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	8b5b      	ldrh	r3, [r3, #26]
 8013c92:	f023 0303 	bic.w	r3, r3, #3
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9e:	691b      	ldr	r3, [r3, #16]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7f9 f8e2 	bl	800ce6c <lwip_htonl>
 8013ca8:	4604      	mov	r4, r0
 8013caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cac:	891b      	ldrh	r3, [r3, #8]
 8013cae:	461d      	mov	r5, r3
 8013cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb2:	691b      	ldr	r3, [r3, #16]
 8013cb4:	899b      	ldrh	r3, [r3, #12]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f9 f8c1 	bl	800ce40 <lwip_htons>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	f003 0303 	and.w	r3, r3, #3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d001      	beq.n	8013cce <tcp_output+0x2a6>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e000      	b.n	8013cd0 <tcp_output+0x2a8>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	442b      	add	r3, r5
 8013cd2:	4423      	add	r3, r4
 8013cd4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	da02      	bge.n	8013ce8 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cea:	891b      	ldrh	r3, [r3, #8]
 8013cec:	461c      	mov	r4, r3
 8013cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf0:	691b      	ldr	r3, [r3, #16]
 8013cf2:	899b      	ldrh	r3, [r3, #12]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7f9 f8a2 	bl	800ce40 <lwip_htons>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	f003 0303 	and.w	r3, r3, #3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d001      	beq.n	8013d0c <tcp_output+0x2e4>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	e000      	b.n	8013d0e <tcp_output+0x2e6>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4423      	add	r3, r4
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d049      	beq.n	8013da8 <tcp_output+0x380>
      seg->next = NULL;
 8013d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d16:	2200      	movs	r2, #0
 8013d18:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d105      	bne.n	8013d2e <tcp_output+0x306>
        pcb->unacked = seg;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d26:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2a:	623b      	str	r3, [r7, #32]
 8013d2c:	e03f      	b.n	8013dae <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f9 f899 	bl	800ce6c <lwip_htonl>
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	6a3b      	ldr	r3, [r7, #32]
 8013d3e:	691b      	ldr	r3, [r3, #16]
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7f9 f892 	bl	800ce6c <lwip_htonl>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	1ae3      	subs	r3, r4, r3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	da24      	bge.n	8013d9a <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	3370      	adds	r3, #112	@ 0x70
 8013d54:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d56:	e002      	b.n	8013d5e <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d011      	beq.n	8013d8a <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	691b      	ldr	r3, [r3, #16]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7f9 f87c 	bl	800ce6c <lwip_htonl>
 8013d74:	4604      	mov	r4, r0
 8013d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d78:	691b      	ldr	r3, [r3, #16]
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7f9 f875 	bl	800ce6c <lwip_htonl>
 8013d82:	4603      	mov	r3, r0
 8013d84:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	dbe6      	blt.n	8013d58 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	681a      	ldr	r2, [r3, #0]
 8013d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d90:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d96:	601a      	str	r2, [r3, #0]
 8013d98:	e009      	b.n	8013dae <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013d9a:	6a3b      	ldr	r3, [r7, #32]
 8013d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d9e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013da0:	6a3b      	ldr	r3, [r7, #32]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	623b      	str	r3, [r7, #32]
 8013da6:	e002      	b.n	8013dae <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013daa:	f7fc fab2 	bl	8010312 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013db2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d012      	beq.n	8013de0 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dbc:	691b      	ldr	r3, [r3, #16]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f9 f853 	bl	800ce6c <lwip_htonl>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dcc:	1ad3      	subs	r3, r2, r3
 8013dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dd0:	8912      	ldrh	r2, [r2, #8]
 8013dd2:	4413      	add	r3, r2
  while (seg != NULL &&
 8013dd4:	69ba      	ldr	r2, [r7, #24]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	f4bf aed6 	bcs.w	8013b88 <tcp_output+0x160>
 8013ddc:	e000      	b.n	8013de0 <tcp_output+0x3b8>
      break;
 8013dde:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d108      	bne.n	8013dfa <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013df0:	e004      	b.n	8013dfc <tcp_output+0x3d4>
    goto output_done;
 8013df2:	bf00      	nop
 8013df4:	e002      	b.n	8013dfc <tcp_output+0x3d4>
    goto output_done;
 8013df6:	bf00      	nop
 8013df8:	e000      	b.n	8013dfc <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013dfa:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	8b5b      	ldrh	r3, [r3, #26]
 8013e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3728      	adds	r7, #40	@ 0x28
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bdb0      	pop	{r4, r5, r7, pc}

08013e14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <tcp_output_segment_busy+0x1c>
 8013e22:	4b09      	ldr	r3, [pc, #36]	@ (8013e48 <tcp_output_segment_busy+0x34>)
 8013e24:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013e28:	4908      	ldr	r1, [pc, #32]	@ (8013e4c <tcp_output_segment_busy+0x38>)
 8013e2a:	4809      	ldr	r0, [pc, #36]	@ (8013e50 <tcp_output_segment_busy+0x3c>)
 8013e2c:	f006 f972 	bl	801a114 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	7b9b      	ldrb	r3, [r3, #14]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d001      	beq.n	8013e3e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e000      	b.n	8013e40 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013e3e:	2300      	movs	r3, #0
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	0801d910 	.word	0x0801d910
 8013e4c:	0801df08 	.word	0x0801df08
 8013e50:	0801d964 	.word	0x0801d964

08013e54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013e54:	b5b0      	push	{r4, r5, r7, lr}
 8013e56:	b08c      	sub	sp, #48	@ 0x30
 8013e58:	af04      	add	r7, sp, #16
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	60b9      	str	r1, [r7, #8]
 8013e5e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <tcp_output_segment+0x20>
 8013e66:	4b6d      	ldr	r3, [pc, #436]	@ (801401c <tcp_output_segment+0x1c8>)
 8013e68:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013e6c:	496c      	ldr	r1, [pc, #432]	@ (8014020 <tcp_output_segment+0x1cc>)
 8013e6e:	486d      	ldr	r0, [pc, #436]	@ (8014024 <tcp_output_segment+0x1d0>)
 8013e70:	f006 f950 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d106      	bne.n	8013e88 <tcp_output_segment+0x34>
 8013e7a:	4b68      	ldr	r3, [pc, #416]	@ (801401c <tcp_output_segment+0x1c8>)
 8013e7c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013e80:	4969      	ldr	r1, [pc, #420]	@ (8014028 <tcp_output_segment+0x1d4>)
 8013e82:	4868      	ldr	r0, [pc, #416]	@ (8014024 <tcp_output_segment+0x1d0>)
 8013e84:	f006 f946 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d106      	bne.n	8013e9c <tcp_output_segment+0x48>
 8013e8e:	4b63      	ldr	r3, [pc, #396]	@ (801401c <tcp_output_segment+0x1c8>)
 8013e90:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013e94:	4965      	ldr	r1, [pc, #404]	@ (801402c <tcp_output_segment+0x1d8>)
 8013e96:	4863      	ldr	r0, [pc, #396]	@ (8014024 <tcp_output_segment+0x1d0>)
 8013e98:	f006 f93c 	bl	801a114 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f7ff ffb9 	bl	8013e14 <tcp_output_segment_busy>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d001      	beq.n	8013eac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e0b3      	b.n	8014014 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	691c      	ldr	r4, [r3, #16]
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	f7f8 ffd9 	bl	800ce6c <lwip_htonl>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	691c      	ldr	r4, [r3, #16]
 8013ec6:	4610      	mov	r0, r2
 8013ec8:	f7f8 ffba 	bl	800ce40 <lwip_htons>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ed4:	68ba      	ldr	r2, [r7, #8]
 8013ed6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013ed8:	441a      	add	r2, r3
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	3314      	adds	r3, #20
 8013ee4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	7b1b      	ldrb	r3, [r3, #12]
 8013eea:	f003 0301 	and.w	r3, r3, #1
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d015      	beq.n	8013f1e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	3304      	adds	r3, #4
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	6879      	ldr	r1, [r7, #4]
 8013efa:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8013efe:	f7fc fd8b 	bl	8010a18 <tcp_eff_send_mss_netif>
 8013f02:	4603      	mov	r3, r0
 8013f04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013f06:	8b7b      	ldrh	r3, [r7, #26]
 8013f08:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7f8 ffad 	bl	800ce6c <lwip_htonl>
 8013f12:	4602      	mov	r2, r0
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	da02      	bge.n	8013f2e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d10c      	bne.n	8013f50 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013f36:	4b3e      	ldr	r3, [pc, #248]	@ (8014030 <tcp_output_segment+0x1dc>)
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f8 ff91 	bl	800ce6c <lwip_htonl>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	691a      	ldr	r2, [r3, #16]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	1ad3      	subs	r3, r2, r3
 8013f5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	8959      	ldrh	r1, [r3, #10]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	8b3a      	ldrh	r2, [r7, #24]
 8013f6a:	1a8a      	subs	r2, r1, r2
 8013f6c:	b292      	uxth	r2, r2
 8013f6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	8919      	ldrh	r1, [r3, #8]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	8b3a      	ldrh	r2, [r7, #24]
 8013f7c:	1a8a      	subs	r2, r1, r2
 8013f7e:	b292      	uxth	r2, r2
 8013f80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	6912      	ldr	r2, [r2, #16]
 8013f8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	691b      	ldr	r3, [r3, #16]
 8013f90:	2200      	movs	r2, #0
 8013f92:	741a      	strb	r2, [r3, #16]
 8013f94:	2200      	movs	r2, #0
 8013f96:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	691a      	ldr	r2, [r3, #16]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	7b1b      	ldrb	r3, [r3, #12]
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d001      	beq.n	8013fac <tcp_output_segment+0x158>
 8013fa8:	2318      	movs	r3, #24
 8013faa:	e000      	b.n	8013fae <tcp_output_segment+0x15a>
 8013fac:	2314      	movs	r3, #20
 8013fae:	4413      	add	r3, r2
 8013fb0:	69fa      	ldr	r2, [r7, #28]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d006      	beq.n	8013fc4 <tcp_output_segment+0x170>
 8013fb6:	4b19      	ldr	r3, [pc, #100]	@ (801401c <tcp_output_segment+0x1c8>)
 8013fb8:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013fbc:	491d      	ldr	r1, [pc, #116]	@ (8014034 <tcp_output_segment+0x1e0>)
 8013fbe:	4819      	ldr	r0, [pc, #100]	@ (8014024 <tcp_output_segment+0x1d0>)
 8013fc0:	f006 f8a8 	bl	801a114 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013fcc:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013fce:	68bd      	ldr	r5, [r7, #8]
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	6914      	ldr	r4, [r2, #16]
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	462b      	mov	r3, r5
 8013fdc:	460a      	mov	r2, r1
 8013fde:	2106      	movs	r1, #6
 8013fe0:	f7f9 f861 	bl	800d0a6 <ip_chksum_pseudo>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	6858      	ldr	r0, [r3, #4]
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	1d1c      	adds	r4, r3, #4
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	7add      	ldrb	r5, [r3, #11]
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	7a9b      	ldrb	r3, [r3, #10]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	9202      	str	r2, [sp, #8]
 8013ffe:	2206      	movs	r2, #6
 8014000:	9201      	str	r2, [sp, #4]
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	462b      	mov	r3, r5
 8014006:	4622      	mov	r2, r4
 8014008:	f004 fce6 	bl	80189d8 <ip4_output_if>
 801400c:	4603      	mov	r3, r0
 801400e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3720      	adds	r7, #32
 8014018:	46bd      	mov	sp, r7
 801401a:	bdb0      	pop	{r4, r5, r7, pc}
 801401c:	0801d910 	.word	0x0801d910
 8014020:	0801df30 	.word	0x0801df30
 8014024:	0801d964 	.word	0x0801d964
 8014028:	0801df50 	.word	0x0801df50
 801402c:	0801df70 	.word	0x0801df70
 8014030:	2001766c 	.word	0x2001766c
 8014034:	0801df94 	.word	0x0801df94

08014038 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014038:	b5b0      	push	{r4, r5, r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <tcp_rexmit_rto_prepare+0x1c>
 8014046:	4b36      	ldr	r3, [pc, #216]	@ (8014120 <tcp_rexmit_rto_prepare+0xe8>)
 8014048:	f240 6263 	movw	r2, #1635	@ 0x663
 801404c:	4935      	ldr	r1, [pc, #212]	@ (8014124 <tcp_rexmit_rto_prepare+0xec>)
 801404e:	4836      	ldr	r0, [pc, #216]	@ (8014128 <tcp_rexmit_rto_prepare+0xf0>)
 8014050:	f006 f860 	bl	801a114 <iprintf>

  if (pcb->unacked == NULL) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801405c:	f06f 0305 	mvn.w	r3, #5
 8014060:	e059      	b.n	8014116 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014066:	60fb      	str	r3, [r7, #12]
 8014068:	e00b      	b.n	8014082 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801406a:	68f8      	ldr	r0, [r7, #12]
 801406c:	f7ff fed2 	bl	8013e14 <tcp_output_segment_busy>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d002      	beq.n	801407c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014076:	f06f 0305 	mvn.w	r3, #5
 801407a:	e04c      	b.n	8014116 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	60fb      	str	r3, [r7, #12]
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d1ef      	bne.n	801406a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801408a:	68f8      	ldr	r0, [r7, #12]
 801408c:	f7ff fec2 	bl	8013e14 <tcp_output_segment_busy>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d002      	beq.n	801409c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014096:	f06f 0305 	mvn.w	r3, #5
 801409a:	e03c      	b.n	8014116 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d104      	bne.n	80140b6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	895a      	ldrh	r2, [r3, #10]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2200      	movs	r2, #0
 80140c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	8b5b      	ldrh	r3, [r3, #26]
 80140c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	691b      	ldr	r3, [r3, #16]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	4618      	mov	r0, r3
 80140da:	f7f8 fec7 	bl	800ce6c <lwip_htonl>
 80140de:	4604      	mov	r4, r0
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	891b      	ldrh	r3, [r3, #8]
 80140e4:	461d      	mov	r5, r3
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	691b      	ldr	r3, [r3, #16]
 80140ea:	899b      	ldrh	r3, [r3, #12]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7f8 fea6 	bl	800ce40 <lwip_htons>
 80140f4:	4603      	mov	r3, r0
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	f003 0303 	and.w	r3, r3, #3
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <tcp_rexmit_rto_prepare+0xcc>
 8014100:	2301      	movs	r3, #1
 8014102:	e000      	b.n	8014106 <tcp_rexmit_rto_prepare+0xce>
 8014104:	2300      	movs	r3, #0
 8014106:	442b      	add	r3, r5
 8014108:	18e2      	adds	r2, r4, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2200      	movs	r2, #0
 8014112:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bdb0      	pop	{r4, r5, r7, pc}
 801411e:	bf00      	nop
 8014120:	0801d910 	.word	0x0801d910
 8014124:	0801dfa8 	.word	0x0801dfa8
 8014128:	0801d964 	.word	0x0801d964

0801412c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d106      	bne.n	8014148 <tcp_rexmit_rto_commit+0x1c>
 801413a:	4b0d      	ldr	r3, [pc, #52]	@ (8014170 <tcp_rexmit_rto_commit+0x44>)
 801413c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014140:	490c      	ldr	r1, [pc, #48]	@ (8014174 <tcp_rexmit_rto_commit+0x48>)
 8014142:	480d      	ldr	r0, [pc, #52]	@ (8014178 <tcp_rexmit_rto_commit+0x4c>)
 8014144:	f005 ffe6 	bl	801a114 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801414e:	2bff      	cmp	r3, #255	@ 0xff
 8014150:	d007      	beq.n	8014162 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014158:	3301      	adds	r3, #1
 801415a:	b2da      	uxtb	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7ff fc60 	bl	8013a28 <tcp_output>
}
 8014168:	bf00      	nop
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	0801d910 	.word	0x0801d910
 8014174:	0801dfcc 	.word	0x0801dfcc
 8014178:	0801d964 	.word	0x0801d964

0801417c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d106      	bne.n	8014198 <tcp_rexmit_rto+0x1c>
 801418a:	4b0a      	ldr	r3, [pc, #40]	@ (80141b4 <tcp_rexmit_rto+0x38>)
 801418c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014190:	4909      	ldr	r1, [pc, #36]	@ (80141b8 <tcp_rexmit_rto+0x3c>)
 8014192:	480a      	ldr	r0, [pc, #40]	@ (80141bc <tcp_rexmit_rto+0x40>)
 8014194:	f005 ffbe 	bl	801a114 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f7ff ff4d 	bl	8014038 <tcp_rexmit_rto_prepare>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d102      	bne.n	80141aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7ff ffc1 	bl	801412c <tcp_rexmit_rto_commit>
  }
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	0801d910 	.word	0x0801d910
 80141b8:	0801dff0 	.word	0x0801dff0
 80141bc:	0801d964 	.word	0x0801d964

080141c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b085      	sub	sp, #20
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d106      	bne.n	80141dc <tcp_rexmit+0x1c>
 80141ce:	4b2f      	ldr	r3, [pc, #188]	@ (801428c <tcp_rexmit+0xcc>)
 80141d0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80141d4:	492e      	ldr	r1, [pc, #184]	@ (8014290 <tcp_rexmit+0xd0>)
 80141d6:	482f      	ldr	r0, [pc, #188]	@ (8014294 <tcp_rexmit+0xd4>)
 80141d8:	f005 ff9c 	bl	801a114 <iprintf>

  if (pcb->unacked == NULL) {
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d102      	bne.n	80141ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80141e4:	f06f 0305 	mvn.w	r3, #5
 80141e8:	e04c      	b.n	8014284 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80141f0:	68b8      	ldr	r0, [r7, #8]
 80141f2:	f7ff fe0f 	bl	8013e14 <tcp_output_segment_busy>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d002      	beq.n	8014202 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80141fc:	f06f 0305 	mvn.w	r3, #5
 8014200:	e040      	b.n	8014284 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	336c      	adds	r3, #108	@ 0x6c
 801420e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014210:	e002      	b.n	8014218 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d011      	beq.n	8014244 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	4618      	mov	r0, r3
 801422a:	f7f8 fe1f 	bl	800ce6c <lwip_htonl>
 801422e:	4604      	mov	r4, r0
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	691b      	ldr	r3, [r3, #16]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	4618      	mov	r0, r3
 8014238:	f7f8 fe18 	bl	800ce6c <lwip_htonl>
 801423c:	4603      	mov	r3, r0
 801423e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014240:	2b00      	cmp	r3, #0
 8014242:	dbe6      	blt.n	8014212 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681a      	ldr	r2, [r3, #0]
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	68ba      	ldr	r2, [r7, #8]
 8014250:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d103      	bne.n	8014262 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2200      	movs	r2, #0
 801425e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014268:	2bff      	cmp	r3, #255	@ 0xff
 801426a:	d007      	beq.n	801427c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014272:	3301      	adds	r3, #1
 8014274:	b2da      	uxtb	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2200      	movs	r2, #0
 8014280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3714      	adds	r7, #20
 8014288:	46bd      	mov	sp, r7
 801428a:	bd90      	pop	{r4, r7, pc}
 801428c:	0801d910 	.word	0x0801d910
 8014290:	0801e00c 	.word	0x0801e00c
 8014294:	0801d964 	.word	0x0801d964

08014298 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d106      	bne.n	80142b4 <tcp_rexmit_fast+0x1c>
 80142a6:	4b2a      	ldr	r3, [pc, #168]	@ (8014350 <tcp_rexmit_fast+0xb8>)
 80142a8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80142ac:	4929      	ldr	r1, [pc, #164]	@ (8014354 <tcp_rexmit_fast+0xbc>)
 80142ae:	482a      	ldr	r0, [pc, #168]	@ (8014358 <tcp_rexmit_fast+0xc0>)
 80142b0:	f005 ff30 	bl	801a114 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d044      	beq.n	8014346 <tcp_rexmit_fast+0xae>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	8b5b      	ldrh	r3, [r3, #26]
 80142c0:	f003 0304 	and.w	r3, r3, #4
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d13e      	bne.n	8014346 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7ff ff79 	bl	80141c0 <tcp_rexmit>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d138      	bne.n	8014346 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80142e0:	4293      	cmp	r3, r2
 80142e2:	bf28      	it	cs
 80142e4:	4613      	movcs	r3, r2
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	0fda      	lsrs	r2, r3, #31
 80142ea:	4413      	add	r3, r2
 80142ec:	105b      	asrs	r3, r3, #1
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80142fc:	461a      	mov	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	429a      	cmp	r2, r3
 8014306:	d206      	bcs.n	8014316 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801430c:	005b      	lsls	r3, r3, #1
 801430e:	b29a      	uxth	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014320:	4619      	mov	r1, r3
 8014322:	0049      	lsls	r1, r1, #1
 8014324:	440b      	add	r3, r1
 8014326:	b29b      	uxth	r3, r3
 8014328:	4413      	add	r3, r2
 801432a:	b29a      	uxth	r2, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	8b5b      	ldrh	r3, [r3, #26]
 8014336:	f043 0304 	orr.w	r3, r3, #4
 801433a:	b29a      	uxth	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014346:	bf00      	nop
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	0801d910 	.word	0x0801d910
 8014354:	0801e024 	.word	0x0801e024
 8014358:	0801d964 	.word	0x0801d964

0801435c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b086      	sub	sp, #24
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	607b      	str	r3, [r7, #4]
 8014366:	460b      	mov	r3, r1
 8014368:	817b      	strh	r3, [r7, #10]
 801436a:	4613      	mov	r3, r2
 801436c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801436e:	897a      	ldrh	r2, [r7, #10]
 8014370:	893b      	ldrh	r3, [r7, #8]
 8014372:	4413      	add	r3, r2
 8014374:	b29b      	uxth	r3, r3
 8014376:	3314      	adds	r3, #20
 8014378:	b29b      	uxth	r3, r3
 801437a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801437e:	4619      	mov	r1, r3
 8014380:	2022      	movs	r0, #34	@ 0x22
 8014382:	f7f9 ff51 	bl	800e228 <pbuf_alloc>
 8014386:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d04d      	beq.n	801442a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801438e:	897b      	ldrh	r3, [r7, #10]
 8014390:	3313      	adds	r3, #19
 8014392:	697a      	ldr	r2, [r7, #20]
 8014394:	8952      	ldrh	r2, [r2, #10]
 8014396:	4293      	cmp	r3, r2
 8014398:	db06      	blt.n	80143a8 <tcp_output_alloc_header_common+0x4c>
 801439a:	4b26      	ldr	r3, [pc, #152]	@ (8014434 <tcp_output_alloc_header_common+0xd8>)
 801439c:	f240 7223 	movw	r2, #1827	@ 0x723
 80143a0:	4925      	ldr	r1, [pc, #148]	@ (8014438 <tcp_output_alloc_header_common+0xdc>)
 80143a2:	4826      	ldr	r0, [pc, #152]	@ (801443c <tcp_output_alloc_header_common+0xe0>)
 80143a4:	f005 feb6 	bl	801a114 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80143ae:	8c3b      	ldrh	r3, [r7, #32]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f8 fd45 	bl	800ce40 <lwip_htons>
 80143b6:	4603      	mov	r3, r0
 80143b8:	461a      	mov	r2, r3
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80143be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f8 fd3d 	bl	800ce40 <lwip_htons>
 80143c6:	4603      	mov	r3, r0
 80143c8:	461a      	mov	r2, r3
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f7f8 fd49 	bl	800ce6c <lwip_htonl>
 80143da:	4602      	mov	r2, r0
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80143e0:	897b      	ldrh	r3, [r7, #10]
 80143e2:	089b      	lsrs	r3, r3, #2
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	3305      	adds	r3, #5
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	031b      	lsls	r3, r3, #12
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80143f2:	b29b      	uxth	r3, r3
 80143f4:	4313      	orrs	r3, r2
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7f8 fd21 	bl	800ce40 <lwip_htons>
 80143fe:	4603      	mov	r3, r0
 8014400:	461a      	mov	r2, r3
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014406:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014408:	4618      	mov	r0, r3
 801440a:	f7f8 fd19 	bl	800ce40 <lwip_htons>
 801440e:	4603      	mov	r3, r0
 8014410:	461a      	mov	r2, r3
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	2200      	movs	r2, #0
 801441a:	741a      	strb	r2, [r3, #16]
 801441c:	2200      	movs	r2, #0
 801441e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	2200      	movs	r2, #0
 8014424:	749a      	strb	r2, [r3, #18]
 8014426:	2200      	movs	r2, #0
 8014428:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801442a:	697b      	ldr	r3, [r7, #20]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3718      	adds	r7, #24
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	0801d910 	.word	0x0801d910
 8014438:	0801e044 	.word	0x0801e044
 801443c:	0801d964 	.word	0x0801d964

08014440 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014440:	b5b0      	push	{r4, r5, r7, lr}
 8014442:	b08a      	sub	sp, #40	@ 0x28
 8014444:	af04      	add	r7, sp, #16
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	607b      	str	r3, [r7, #4]
 801444a:	460b      	mov	r3, r1
 801444c:	817b      	strh	r3, [r7, #10]
 801444e:	4613      	mov	r3, r2
 8014450:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d106      	bne.n	8014466 <tcp_output_alloc_header+0x26>
 8014458:	4b15      	ldr	r3, [pc, #84]	@ (80144b0 <tcp_output_alloc_header+0x70>)
 801445a:	f240 7242 	movw	r2, #1858	@ 0x742
 801445e:	4915      	ldr	r1, [pc, #84]	@ (80144b4 <tcp_output_alloc_header+0x74>)
 8014460:	4815      	ldr	r0, [pc, #84]	@ (80144b8 <tcp_output_alloc_header+0x78>)
 8014462:	f005 fe57 	bl	801a114 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	8adb      	ldrh	r3, [r3, #22]
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	8b12      	ldrh	r2, [r2, #24]
 8014472:	68f9      	ldr	r1, [r7, #12]
 8014474:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014476:	893d      	ldrh	r5, [r7, #8]
 8014478:	897c      	ldrh	r4, [r7, #10]
 801447a:	9103      	str	r1, [sp, #12]
 801447c:	2110      	movs	r1, #16
 801447e:	9102      	str	r1, [sp, #8]
 8014480:	9201      	str	r2, [sp, #4]
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	462a      	mov	r2, r5
 8014488:	4621      	mov	r1, r4
 801448a:	f7ff ff67 	bl	801435c <tcp_output_alloc_header_common>
 801448e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d006      	beq.n	80144a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801449e:	441a      	add	r2, r3
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80144a4:	697b      	ldr	r3, [r7, #20]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3718      	adds	r7, #24
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bdb0      	pop	{r4, r5, r7, pc}
 80144ae:	bf00      	nop
 80144b0:	0801d910 	.word	0x0801d910
 80144b4:	0801e074 	.word	0x0801e074
 80144b8:	0801d964 	.word	0x0801d964

080144bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b088      	sub	sp, #32
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	4611      	mov	r1, r2
 80144c8:	461a      	mov	r2, r3
 80144ca:	460b      	mov	r3, r1
 80144cc:	71fb      	strb	r3, [r7, #7]
 80144ce:	4613      	mov	r3, r2
 80144d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80144d2:	2300      	movs	r3, #0
 80144d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <tcp_output_fill_options+0x2e>
 80144dc:	4b12      	ldr	r3, [pc, #72]	@ (8014528 <tcp_output_fill_options+0x6c>)
 80144de:	f240 7256 	movw	r2, #1878	@ 0x756
 80144e2:	4912      	ldr	r1, [pc, #72]	@ (801452c <tcp_output_fill_options+0x70>)
 80144e4:	4812      	ldr	r0, [pc, #72]	@ (8014530 <tcp_output_fill_options+0x74>)
 80144e6:	f005 fe15 	bl	801a114 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	685b      	ldr	r3, [r3, #4]
 80144ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	3314      	adds	r3, #20
 80144f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80144f6:	8bfb      	ldrh	r3, [r7, #30]
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	461a      	mov	r2, r3
 80144fc:	79fb      	ldrb	r3, [r7, #7]
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	f003 0304 	and.w	r3, r3, #4
 8014504:	4413      	add	r3, r2
 8014506:	3314      	adds	r3, #20
 8014508:	69ba      	ldr	r2, [r7, #24]
 801450a:	4413      	add	r3, r2
 801450c:	697a      	ldr	r2, [r7, #20]
 801450e:	429a      	cmp	r2, r3
 8014510:	d006      	beq.n	8014520 <tcp_output_fill_options+0x64>
 8014512:	4b05      	ldr	r3, [pc, #20]	@ (8014528 <tcp_output_fill_options+0x6c>)
 8014514:	f240 7275 	movw	r2, #1909	@ 0x775
 8014518:	4906      	ldr	r1, [pc, #24]	@ (8014534 <tcp_output_fill_options+0x78>)
 801451a:	4805      	ldr	r0, [pc, #20]	@ (8014530 <tcp_output_fill_options+0x74>)
 801451c:	f005 fdfa 	bl	801a114 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014520:	bf00      	nop
 8014522:	3720      	adds	r7, #32
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	0801d910 	.word	0x0801d910
 801452c:	0801e09c 	.word	0x0801e09c
 8014530:	0801d964 	.word	0x0801d964
 8014534:	0801df94 	.word	0x0801df94

08014538 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b08c      	sub	sp, #48	@ 0x30
 801453c:	af04      	add	r7, sp, #16
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
 8014544:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d106      	bne.n	801455a <tcp_output_control_segment+0x22>
 801454c:	4b24      	ldr	r3, [pc, #144]	@ (80145e0 <tcp_output_control_segment+0xa8>)
 801454e:	f240 7287 	movw	r2, #1927	@ 0x787
 8014552:	4924      	ldr	r1, [pc, #144]	@ (80145e4 <tcp_output_control_segment+0xac>)
 8014554:	4824      	ldr	r0, [pc, #144]	@ (80145e8 <tcp_output_control_segment+0xb0>)
 8014556:	f005 fddd 	bl	801a114 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801455a:	683a      	ldr	r2, [r7, #0]
 801455c:	6879      	ldr	r1, [r7, #4]
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f7fe fa6a 	bl	8012a38 <tcp_route>
 8014564:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d102      	bne.n	8014572 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801456c:	23fc      	movs	r3, #252	@ 0xfc
 801456e:	77fb      	strb	r3, [r7, #31]
 8014570:	e02c      	b.n	80145cc <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	891a      	ldrh	r2, [r3, #8]
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2106      	movs	r1, #6
 8014584:	68b8      	ldr	r0, [r7, #8]
 8014586:	f7f8 fd8e 	bl	800d0a6 <ip_chksum_pseudo>
 801458a:	4603      	mov	r3, r0
 801458c:	461a      	mov	r2, r3
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d006      	beq.n	80145a6 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	7adb      	ldrb	r3, [r3, #11]
 801459c:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	7a9b      	ldrb	r3, [r3, #10]
 80145a2:	777b      	strb	r3, [r7, #29]
 80145a4:	e003      	b.n	80145ae <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80145a6:	23ff      	movs	r3, #255	@ 0xff
 80145a8:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80145aa:	2300      	movs	r3, #0
 80145ac:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80145ae:	7fba      	ldrb	r2, [r7, #30]
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	9302      	str	r3, [sp, #8]
 80145b4:	2306      	movs	r3, #6
 80145b6:	9301      	str	r3, [sp, #4]
 80145b8:	7f7b      	ldrb	r3, [r7, #29]
 80145ba:	9300      	str	r3, [sp, #0]
 80145bc:	4613      	mov	r3, r2
 80145be:	683a      	ldr	r2, [r7, #0]
 80145c0:	6879      	ldr	r1, [r7, #4]
 80145c2:	68b8      	ldr	r0, [r7, #8]
 80145c4:	f004 fa08 	bl	80189d8 <ip4_output_if>
 80145c8:	4603      	mov	r3, r0
 80145ca:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80145cc:	68b8      	ldr	r0, [r7, #8]
 80145ce:	f7fa f90f 	bl	800e7f0 <pbuf_free>
  return err;
 80145d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3720      	adds	r7, #32
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	0801d910 	.word	0x0801d910
 80145e4:	0801e0c4 	.word	0x0801e0c4
 80145e8:	0801d964 	.word	0x0801d964

080145ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b08b      	sub	sp, #44	@ 0x2c
 80145f0:	af04      	add	r7, sp, #16
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <tcp_rst+0x22>
 8014600:	4b1f      	ldr	r3, [pc, #124]	@ (8014680 <tcp_rst+0x94>)
 8014602:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014606:	491f      	ldr	r1, [pc, #124]	@ (8014684 <tcp_rst+0x98>)
 8014608:	481f      	ldr	r0, [pc, #124]	@ (8014688 <tcp_rst+0x9c>)
 801460a:	f005 fd83 	bl	801a114 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014610:	2b00      	cmp	r3, #0
 8014612:	d106      	bne.n	8014622 <tcp_rst+0x36>
 8014614:	4b1a      	ldr	r3, [pc, #104]	@ (8014680 <tcp_rst+0x94>)
 8014616:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801461a:	491c      	ldr	r1, [pc, #112]	@ (801468c <tcp_rst+0xa0>)
 801461c:	481a      	ldr	r0, [pc, #104]	@ (8014688 <tcp_rst+0x9c>)
 801461e:	f005 fd79 	bl	801a114 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014622:	2300      	movs	r3, #0
 8014624:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014626:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801462a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	b29c      	uxth	r4, r3
 8014630:	68b8      	ldr	r0, [r7, #8]
 8014632:	f7f8 fc1b 	bl	800ce6c <lwip_htonl>
 8014636:	4602      	mov	r2, r0
 8014638:	8abb      	ldrh	r3, [r7, #20]
 801463a:	9303      	str	r3, [sp, #12]
 801463c:	2314      	movs	r3, #20
 801463e:	9302      	str	r3, [sp, #8]
 8014640:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014642:	9301      	str	r3, [sp, #4]
 8014644:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	4613      	mov	r3, r2
 801464a:	2200      	movs	r2, #0
 801464c:	4621      	mov	r1, r4
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ff fe84 	bl	801435c <tcp_output_alloc_header_common>
 8014654:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00c      	beq.n	8014676 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801465c:	7dfb      	ldrb	r3, [r7, #23]
 801465e:	2200      	movs	r2, #0
 8014660:	6939      	ldr	r1, [r7, #16]
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	f7ff ff2a 	bl	80144bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801466a:	683a      	ldr	r2, [r7, #0]
 801466c:	6939      	ldr	r1, [r7, #16]
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7ff ff62 	bl	8014538 <tcp_output_control_segment>
 8014674:	e000      	b.n	8014678 <tcp_rst+0x8c>
    return;
 8014676:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014678:	371c      	adds	r7, #28
 801467a:	46bd      	mov	sp, r7
 801467c:	bd90      	pop	{r4, r7, pc}
 801467e:	bf00      	nop
 8014680:	0801d910 	.word	0x0801d910
 8014684:	0801e0f0 	.word	0x0801e0f0
 8014688:	0801d964 	.word	0x0801d964
 801468c:	0801e10c 	.word	0x0801e10c

08014690 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014690:	b590      	push	{r4, r7, lr}
 8014692:	b087      	sub	sp, #28
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801469c:	2300      	movs	r3, #0
 801469e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d106      	bne.n	80146b4 <tcp_send_empty_ack+0x24>
 80146a6:	4b28      	ldr	r3, [pc, #160]	@ (8014748 <tcp_send_empty_ack+0xb8>)
 80146a8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80146ac:	4927      	ldr	r1, [pc, #156]	@ (801474c <tcp_send_empty_ack+0xbc>)
 80146ae:	4828      	ldr	r0, [pc, #160]	@ (8014750 <tcp_send_empty_ack+0xc0>)
 80146b0:	f005 fd30 	bl	801a114 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	f003 0304 	and.w	r3, r3, #4
 80146be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80146c0:	7d7b      	ldrb	r3, [r7, #21]
 80146c2:	b29c      	uxth	r4, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7f8 fbcf 	bl	800ce6c <lwip_htonl>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2200      	movs	r2, #0
 80146d2:	4621      	mov	r1, r4
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff feb3 	bl	8014440 <tcp_output_alloc_header>
 80146da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d109      	bne.n	80146f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	8b5b      	ldrh	r3, [r3, #26]
 80146e6:	f043 0303 	orr.w	r3, r3, #3
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80146f0:	f06f 0301 	mvn.w	r3, #1
 80146f4:	e023      	b.n	801473e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80146f6:	7dbb      	ldrb	r3, [r7, #22]
 80146f8:	7dfa      	ldrb	r2, [r7, #23]
 80146fa:	6939      	ldr	r1, [r7, #16]
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f7ff fedd 	bl	80144bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3304      	adds	r3, #4
 8014708:	6939      	ldr	r1, [r7, #16]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7ff ff14 	bl	8014538 <tcp_output_control_segment>
 8014710:	4603      	mov	r3, r0
 8014712:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d007      	beq.n	801472c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f043 0303 	orr.w	r3, r3, #3
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
 801472a:	e006      	b.n	801473a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	8b5b      	ldrh	r3, [r3, #26]
 8014730:	f023 0303 	bic.w	r3, r3, #3
 8014734:	b29a      	uxth	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801473e:	4618      	mov	r0, r3
 8014740:	371c      	adds	r7, #28
 8014742:	46bd      	mov	sp, r7
 8014744:	bd90      	pop	{r4, r7, pc}
 8014746:	bf00      	nop
 8014748:	0801d910 	.word	0x0801d910
 801474c:	0801e128 	.word	0x0801e128
 8014750:	0801d964 	.word	0x0801d964

08014754 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801475c:	2300      	movs	r3, #0
 801475e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <tcp_keepalive+0x20>
 8014766:	4b18      	ldr	r3, [pc, #96]	@ (80147c8 <tcp_keepalive+0x74>)
 8014768:	f640 0224 	movw	r2, #2084	@ 0x824
 801476c:	4917      	ldr	r1, [pc, #92]	@ (80147cc <tcp_keepalive+0x78>)
 801476e:	4818      	ldr	r0, [pc, #96]	@ (80147d0 <tcp_keepalive+0x7c>)
 8014770:	f005 fcd0 	bl	801a114 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014774:	7abb      	ldrb	r3, [r7, #10]
 8014776:	b29c      	uxth	r4, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801477c:	3b01      	subs	r3, #1
 801477e:	4618      	mov	r0, r3
 8014780:	f7f8 fb74 	bl	800ce6c <lwip_htonl>
 8014784:	4603      	mov	r3, r0
 8014786:	2200      	movs	r2, #0
 8014788:	4621      	mov	r1, r4
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7ff fe58 	bl	8014440 <tcp_output_alloc_header>
 8014790:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d102      	bne.n	801479e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014798:	f04f 33ff 	mov.w	r3, #4294967295
 801479c:	e010      	b.n	80147c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801479e:	7abb      	ldrb	r3, [r7, #10]
 80147a0:	2200      	movs	r2, #0
 80147a2:	68f9      	ldr	r1, [r7, #12]
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7ff fe89 	bl	80144bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3304      	adds	r3, #4
 80147b0:	68f9      	ldr	r1, [r7, #12]
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7ff fec0 	bl	8014538 <tcp_output_control_segment>
 80147b8:	4603      	mov	r3, r0
 80147ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80147bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3714      	adds	r7, #20
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd90      	pop	{r4, r7, pc}
 80147c8:	0801d910 	.word	0x0801d910
 80147cc:	0801e148 	.word	0x0801e148
 80147d0:	0801d964 	.word	0x0801d964

080147d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80147d4:	b590      	push	{r4, r7, lr}
 80147d6:	b08b      	sub	sp, #44	@ 0x2c
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80147dc:	2300      	movs	r3, #0
 80147de:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d106      	bne.n	80147f4 <tcp_zero_window_probe+0x20>
 80147e6:	4b4d      	ldr	r3, [pc, #308]	@ (801491c <tcp_zero_window_probe+0x148>)
 80147e8:	f640 024f 	movw	r2, #2127	@ 0x84f
 80147ec:	494c      	ldr	r1, [pc, #304]	@ (8014920 <tcp_zero_window_probe+0x14c>)
 80147ee:	484d      	ldr	r0, [pc, #308]	@ (8014924 <tcp_zero_window_probe+0x150>)
 80147f0:	f005 fc90 	bl	801a114 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 80147fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d101      	bne.n	8014804 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014800:	2300      	movs	r3, #0
 8014802:	e087      	b.n	8014914 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 801480a:	2bff      	cmp	r3, #255	@ 0xff
 801480c:	d007      	beq.n	801481e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8014814:	3301      	adds	r3, #1
 8014816:	b2da      	uxtb	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29b      	uxth	r3, r3
 8014826:	4618      	mov	r0, r3
 8014828:	f7f8 fb0a 	bl	800ce40 <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	b2db      	uxtb	r3, r3
 8014830:	f003 0301 	and.w	r3, r3, #1
 8014834:	2b00      	cmp	r3, #0
 8014836:	d005      	beq.n	8014844 <tcp_zero_window_probe+0x70>
 8014838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801483a:	891b      	ldrh	r3, [r3, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d101      	bne.n	8014844 <tcp_zero_window_probe+0x70>
 8014840:	2301      	movs	r3, #1
 8014842:	e000      	b.n	8014846 <tcp_zero_window_probe+0x72>
 8014844:	2300      	movs	r3, #0
 8014846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801484a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801484e:	2b00      	cmp	r3, #0
 8014850:	bf0c      	ite	eq
 8014852:	2301      	moveq	r3, #1
 8014854:	2300      	movne	r3, #0
 8014856:	b2db      	uxtb	r3, r3
 8014858:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801485a:	7cfb      	ldrb	r3, [r7, #19]
 801485c:	b299      	uxth	r1, r3
 801485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014860:	691b      	ldr	r3, [r3, #16]
 8014862:	685b      	ldr	r3, [r3, #4]
 8014864:	8c3a      	ldrh	r2, [r7, #32]
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff fdea 	bl	8014440 <tcp_output_alloc_header>
 801486c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d102      	bne.n	801487a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014874:	f04f 33ff 	mov.w	r3, #4294967295
 8014878:	e04c      	b.n	8014914 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014884:	2b00      	cmp	r3, #0
 8014886:	d011      	beq.n	80148ac <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	899b      	ldrh	r3, [r3, #12]
 801488c:	b29b      	uxth	r3, r3
 801488e:	b21b      	sxth	r3, r3
 8014890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014894:	b21c      	sxth	r4, r3
 8014896:	2011      	movs	r0, #17
 8014898:	f7f8 fad2 	bl	800ce40 <lwip_htons>
 801489c:	4603      	mov	r3, r0
 801489e:	b21b      	sxth	r3, r3
 80148a0:	4323      	orrs	r3, r4
 80148a2:	b21b      	sxth	r3, r3
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	819a      	strh	r2, [r3, #12]
 80148aa:	e010      	b.n	80148ce <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	3314      	adds	r3, #20
 80148b2:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80148b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148b6:	6858      	ldr	r0, [r3, #4]
 80148b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	891a      	ldrh	r2, [r3, #8]
 80148be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148c0:	891b      	ldrh	r3, [r3, #8]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	2201      	movs	r2, #1
 80148c8:	6979      	ldr	r1, [r7, #20]
 80148ca:	f7fa f997 	bl	800ebfc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80148ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f8 fac9 	bl	800ce6c <lwip_htonl>
 80148da:	4603      	mov	r3, r0
 80148dc:	3301      	adds	r3, #1
 80148de:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	da02      	bge.n	80148f2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148f2:	7cfb      	ldrb	r3, [r7, #19]
 80148f4:	2200      	movs	r2, #0
 80148f6:	69f9      	ldr	r1, [r7, #28]
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f7ff fddf 	bl	80144bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	3304      	adds	r3, #4
 8014904:	69f9      	ldr	r1, [r7, #28]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7ff fe16 	bl	8014538 <tcp_output_control_segment>
 801490c:	4603      	mov	r3, r0
 801490e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014910:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014914:	4618      	mov	r0, r3
 8014916:	372c      	adds	r7, #44	@ 0x2c
 8014918:	46bd      	mov	sp, r7
 801491a:	bd90      	pop	{r4, r7, pc}
 801491c:	0801d910 	.word	0x0801d910
 8014920:	0801e164 	.word	0x0801e164
 8014924:	0801d964 	.word	0x0801d964

08014928 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014930:	f7fa fa52 	bl	800edd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014934:	4b0a      	ldr	r3, [pc, #40]	@ (8014960 <tcpip_tcp_timer+0x38>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d103      	bne.n	8014944 <tcpip_tcp_timer+0x1c>
 801493c:	4b09      	ldr	r3, [pc, #36]	@ (8014964 <tcpip_tcp_timer+0x3c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d005      	beq.n	8014950 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014944:	2200      	movs	r2, #0
 8014946:	4908      	ldr	r1, [pc, #32]	@ (8014968 <tcpip_tcp_timer+0x40>)
 8014948:	20fa      	movs	r0, #250	@ 0xfa
 801494a:	f000 f8f3 	bl	8014b34 <sys_timeout>
 801494e:	e003      	b.n	8014958 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014950:	4b06      	ldr	r3, [pc, #24]	@ (801496c <tcpip_tcp_timer+0x44>)
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
  }
}
 8014956:	bf00      	nop
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	20017678 	.word	0x20017678
 8014964:	2001767c 	.word	0x2001767c
 8014968:	08014929 	.word	0x08014929
 801496c:	200176c8 	.word	0x200176c8

08014970 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014974:	4b0a      	ldr	r3, [pc, #40]	@ (80149a0 <tcp_timer_needed+0x30>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d10f      	bne.n	801499c <tcp_timer_needed+0x2c>
 801497c:	4b09      	ldr	r3, [pc, #36]	@ (80149a4 <tcp_timer_needed+0x34>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d103      	bne.n	801498c <tcp_timer_needed+0x1c>
 8014984:	4b08      	ldr	r3, [pc, #32]	@ (80149a8 <tcp_timer_needed+0x38>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d007      	beq.n	801499c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801498c:	4b04      	ldr	r3, [pc, #16]	@ (80149a0 <tcp_timer_needed+0x30>)
 801498e:	2201      	movs	r2, #1
 8014990:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014992:	2200      	movs	r2, #0
 8014994:	4905      	ldr	r1, [pc, #20]	@ (80149ac <tcp_timer_needed+0x3c>)
 8014996:	20fa      	movs	r0, #250	@ 0xfa
 8014998:	f000 f8cc 	bl	8014b34 <sys_timeout>
  }
}
 801499c:	bf00      	nop
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	200176c8 	.word	0x200176c8
 80149a4:	20017678 	.word	0x20017678
 80149a8:	2001767c 	.word	0x2001767c
 80149ac:	08014929 	.word	0x08014929

080149b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80149bc:	200a      	movs	r0, #10
 80149be:	f7f9 f86f 	bl	800daa0 <memp_malloc>
 80149c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d109      	bne.n	80149de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d151      	bne.n	8014a74 <sys_timeout_abs+0xc4>
 80149d0:	4b2a      	ldr	r3, [pc, #168]	@ (8014a7c <sys_timeout_abs+0xcc>)
 80149d2:	22be      	movs	r2, #190	@ 0xbe
 80149d4:	492a      	ldr	r1, [pc, #168]	@ (8014a80 <sys_timeout_abs+0xd0>)
 80149d6:	482b      	ldr	r0, [pc, #172]	@ (8014a84 <sys_timeout_abs+0xd4>)
 80149d8:	f005 fb9c 	bl	801a114 <iprintf>
    return;
 80149dc:	e04a      	b.n	8014a74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2200      	movs	r2, #0
 80149e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	68ba      	ldr	r2, [r7, #8]
 80149e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80149f6:	4b24      	ldr	r3, [pc, #144]	@ (8014a88 <sys_timeout_abs+0xd8>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d103      	bne.n	8014a06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80149fe:	4a22      	ldr	r2, [pc, #136]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	6013      	str	r3, [r2, #0]
    return;
 8014a04:	e037      	b.n	8014a76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	685a      	ldr	r2, [r3, #4]
 8014a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	0fdb      	lsrs	r3, r3, #31
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d007      	beq.n	8014a2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014a26:	4a18      	ldr	r2, [pc, #96]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	6013      	str	r3, [r2, #0]
 8014a2c:	e023      	b.n	8014a76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a2e:	4b16      	ldr	r3, [pc, #88]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	e01a      	b.n	8014a6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00b      	beq.n	8014a56 <sys_timeout_abs+0xa6>
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	685a      	ldr	r2, [r3, #4]
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	0fdb      	lsrs	r3, r3, #31
 8014a4c:	f003 0301 	and.w	r3, r3, #1
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d007      	beq.n	8014a66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	693a      	ldr	r2, [r7, #16]
 8014a62:	601a      	str	r2, [r3, #0]
        break;
 8014a64:	e007      	b.n	8014a76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	617b      	str	r3, [r7, #20]
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1e1      	bne.n	8014a36 <sys_timeout_abs+0x86>
 8014a72:	e000      	b.n	8014a76 <sys_timeout_abs+0xc6>
    return;
 8014a74:	bf00      	nop
      }
    }
  }
}
 8014a76:	3718      	adds	r7, #24
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	0801e188 	.word	0x0801e188
 8014a80:	0801e1bc 	.word	0x0801e1bc
 8014a84:	0801e1fc 	.word	0x0801e1fc
 8014a88:	200176c0 	.word	0x200176c0

08014a8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	4798      	blx	r3

  now = sys_now();
 8014a9e:	f7f2 fc0f 	bl	80072c0 <sys_now>
 8014aa2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8014ae8 <lwip_cyclic_timer+0x5c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4413      	add	r3, r2
 8014aae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	0fdb      	lsrs	r3, r3, #31
 8014ab8:	f003 0301 	and.w	r3, r3, #1
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d009      	beq.n	8014ad6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	681a      	ldr	r2, [r3, #0]
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	4413      	add	r3, r2
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	4907      	ldr	r1, [pc, #28]	@ (8014aec <lwip_cyclic_timer+0x60>)
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7ff ff6e 	bl	80149b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014ad4:	e004      	b.n	8014ae0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	4904      	ldr	r1, [pc, #16]	@ (8014aec <lwip_cyclic_timer+0x60>)
 8014ada:	68f8      	ldr	r0, [r7, #12]
 8014adc:	f7ff ff68 	bl	80149b0 <sys_timeout_abs>
}
 8014ae0:	bf00      	nop
 8014ae2:	3718      	adds	r7, #24
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	200176c4 	.word	0x200176c4
 8014aec:	08014a8d 	.word	0x08014a8d

08014af0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014af6:	2301      	movs	r3, #1
 8014af8:	607b      	str	r3, [r7, #4]
 8014afa:	e00e      	b.n	8014b1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014afc:	4a0b      	ldr	r2, [pc, #44]	@ (8014b2c <sys_timeouts_init+0x3c>)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	00db      	lsls	r3, r3, #3
 8014b08:	4a08      	ldr	r2, [pc, #32]	@ (8014b2c <sys_timeouts_init+0x3c>)
 8014b0a:	4413      	add	r3, r2
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4908      	ldr	r1, [pc, #32]	@ (8014b30 <sys_timeouts_init+0x40>)
 8014b10:	f000 f810 	bl	8014b34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	3301      	adds	r3, #1
 8014b18:	607b      	str	r3, [r7, #4]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2b04      	cmp	r3, #4
 8014b1e:	d9ed      	bls.n	8014afc <sys_timeouts_init+0xc>
  }
}
 8014b20:	bf00      	nop
 8014b22:	bf00      	nop
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	0802300c 	.word	0x0802300c
 8014b30:	08014a8d 	.word	0x08014a8d

08014b34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b086      	sub	sp, #24
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b46:	d306      	bcc.n	8014b56 <sys_timeout+0x22>
 8014b48:	4b0a      	ldr	r3, [pc, #40]	@ (8014b74 <sys_timeout+0x40>)
 8014b4a:	f240 1229 	movw	r2, #297	@ 0x129
 8014b4e:	490a      	ldr	r1, [pc, #40]	@ (8014b78 <sys_timeout+0x44>)
 8014b50:	480a      	ldr	r0, [pc, #40]	@ (8014b7c <sys_timeout+0x48>)
 8014b52:	f005 fadf 	bl	801a114 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014b56:	f7f2 fbb3 	bl	80072c0 <sys_now>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	4413      	add	r3, r2
 8014b60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	68b9      	ldr	r1, [r7, #8]
 8014b66:	6978      	ldr	r0, [r7, #20]
 8014b68:	f7ff ff22 	bl	80149b0 <sys_timeout_abs>
#endif
}
 8014b6c:	bf00      	nop
 8014b6e:	3718      	adds	r7, #24
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	0801e188 	.word	0x0801e188
 8014b78:	0801e224 	.word	0x0801e224
 8014b7c:	0801e1fc 	.word	0x0801e1fc

08014b80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014b86:	f7f2 fb9b 	bl	80072c0 <sys_now>
 8014b8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014b8c:	4b17      	ldr	r3, [pc, #92]	@ (8014bec <sys_check_timeouts+0x6c>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d022      	beq.n	8014bde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	0fdb      	lsrs	r3, r3, #31
 8014ba2:	f003 0301 	and.w	r3, r3, #1
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d11a      	bne.n	8014be2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8014bec <sys_check_timeouts+0x6c>)
 8014bb2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	68db      	ldr	r3, [r3, #12]
 8014bbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8014bf0 <sys_check_timeouts+0x70>)
 8014bc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014bc8:	68b9      	ldr	r1, [r7, #8]
 8014bca:	200a      	movs	r0, #10
 8014bcc:	f7f8 ffba 	bl	800db44 <memp_free>
    if (handler != NULL) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d0da      	beq.n	8014b8c <sys_check_timeouts+0xc>
      handler(arg);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6838      	ldr	r0, [r7, #0]
 8014bda:	4798      	blx	r3
  do {
 8014bdc:	e7d6      	b.n	8014b8c <sys_check_timeouts+0xc>
      return;
 8014bde:	bf00      	nop
 8014be0:	e000      	b.n	8014be4 <sys_check_timeouts+0x64>
      return;
 8014be2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	200176c0 	.word	0x200176c0
 8014bf0:	200176c4 	.word	0x200176c4

08014bf4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014bfa:	4b16      	ldr	r3, [pc, #88]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d102      	bne.n	8014c08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014c02:	f04f 33ff 	mov.w	r3, #4294967295
 8014c06:	e020      	b.n	8014c4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014c08:	f7f2 fb5a 	bl	80072c0 <sys_now>
 8014c0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014c0e:	4b11      	ldr	r3, [pc, #68]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	685a      	ldr	r2, [r3, #4]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	0fdb      	lsrs	r3, r3, #31
 8014c1a:	f003 0301 	and.w	r3, r3, #1
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d001      	beq.n	8014c28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014c24:	2300      	movs	r3, #0
 8014c26:	e010      	b.n	8014c4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014c28:	4b0a      	ldr	r3, [pc, #40]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	685a      	ldr	r2, [r3, #4]
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	da06      	bge.n	8014c48 <sys_timeouts_sleeptime+0x54>
 8014c3a:	4b07      	ldr	r3, [pc, #28]	@ (8014c58 <sys_timeouts_sleeptime+0x64>)
 8014c3c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014c40:	4906      	ldr	r1, [pc, #24]	@ (8014c5c <sys_timeouts_sleeptime+0x68>)
 8014c42:	4807      	ldr	r0, [pc, #28]	@ (8014c60 <sys_timeouts_sleeptime+0x6c>)
 8014c44:	f005 fa66 	bl	801a114 <iprintf>
    return ret;
 8014c48:	683b      	ldr	r3, [r7, #0]
  }
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	200176c0 	.word	0x200176c0
 8014c58:	0801e188 	.word	0x0801e188
 8014c5c:	0801e25c 	.word	0x0801e25c
 8014c60:	0801e1fc 	.word	0x0801e1fc

08014c64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014c68:	f005 f954 	bl	8019f14 <rand>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	4b01      	ldr	r3, [pc, #4]	@ (8014c84 <udp_init+0x20>)
 8014c7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014c80:	bf00      	nop
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	20000024 	.word	0x20000024

08014c88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014c92:	4b17      	ldr	r3, [pc, #92]	@ (8014cf0 <udp_new_port+0x68>)
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	1c5a      	adds	r2, r3, #1
 8014c98:	b291      	uxth	r1, r2
 8014c9a:	4a15      	ldr	r2, [pc, #84]	@ (8014cf0 <udp_new_port+0x68>)
 8014c9c:	8011      	strh	r1, [r2, #0]
 8014c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d103      	bne.n	8014cae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014ca6:	4b12      	ldr	r3, [pc, #72]	@ (8014cf0 <udp_new_port+0x68>)
 8014ca8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014cac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cae:	4b11      	ldr	r3, [pc, #68]	@ (8014cf4 <udp_new_port+0x6c>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	603b      	str	r3, [r7, #0]
 8014cb4:	e011      	b.n	8014cda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	8a5a      	ldrh	r2, [r3, #18]
 8014cba:	4b0d      	ldr	r3, [pc, #52]	@ (8014cf0 <udp_new_port+0x68>)
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d108      	bne.n	8014cd4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014cc2:	88fb      	ldrh	r3, [r7, #6]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	80fb      	strh	r3, [r7, #6]
 8014cc8:	88fb      	ldrh	r3, [r7, #6]
 8014cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014cce:	d3e0      	bcc.n	8014c92 <udp_new_port+0xa>
        return 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	e007      	b.n	8014ce4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	603b      	str	r3, [r7, #0]
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d1ea      	bne.n	8014cb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014ce0:	4b03      	ldr	r3, [pc, #12]	@ (8014cf0 <udp_new_port+0x68>)
 8014ce2:	881b      	ldrh	r3, [r3, #0]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr
 8014cf0:	20000024 	.word	0x20000024
 8014cf4:	200176cc 	.word	0x200176cc

08014cf8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	60f8      	str	r0, [r7, #12]
 8014d00:	60b9      	str	r1, [r7, #8]
 8014d02:	4613      	mov	r3, r2
 8014d04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d105      	bne.n	8014d18 <udp_input_local_match+0x20>
 8014d0c:	4b27      	ldr	r3, [pc, #156]	@ (8014dac <udp_input_local_match+0xb4>)
 8014d0e:	2287      	movs	r2, #135	@ 0x87
 8014d10:	4927      	ldr	r1, [pc, #156]	@ (8014db0 <udp_input_local_match+0xb8>)
 8014d12:	4828      	ldr	r0, [pc, #160]	@ (8014db4 <udp_input_local_match+0xbc>)
 8014d14:	f005 f9fe 	bl	801a114 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d105      	bne.n	8014d2a <udp_input_local_match+0x32>
 8014d1e:	4b23      	ldr	r3, [pc, #140]	@ (8014dac <udp_input_local_match+0xb4>)
 8014d20:	2288      	movs	r2, #136	@ 0x88
 8014d22:	4925      	ldr	r1, [pc, #148]	@ (8014db8 <udp_input_local_match+0xc0>)
 8014d24:	4823      	ldr	r0, [pc, #140]	@ (8014db4 <udp_input_local_match+0xbc>)
 8014d26:	f005 f9f5 	bl	801a114 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	7a1b      	ldrb	r3, [r3, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00b      	beq.n	8014d4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	7a1a      	ldrb	r2, [r3, #8]
 8014d36:	4b21      	ldr	r3, [pc, #132]	@ (8014dbc <udp_input_local_match+0xc4>)
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014d3e:	3301      	adds	r3, #1
 8014d40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d001      	beq.n	8014d4a <udp_input_local_match+0x52>
    return 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	e02b      	b.n	8014da2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014d4a:	79fb      	ldrb	r3, [r7, #7]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d018      	beq.n	8014d82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d013      	beq.n	8014d7e <udp_input_local_match+0x86>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d00f      	beq.n	8014d7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d5e:	4b17      	ldr	r3, [pc, #92]	@ (8014dbc <udp_input_local_match+0xc4>)
 8014d60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d66:	d00a      	beq.n	8014d7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	4b13      	ldr	r3, [pc, #76]	@ (8014dbc <udp_input_local_match+0xc4>)
 8014d6e:	695b      	ldr	r3, [r3, #20]
 8014d70:	405a      	eors	r2, r3
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	3308      	adds	r3, #8
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d110      	bne.n	8014da0 <udp_input_local_match+0xa8>
          return 1;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e00f      	b.n	8014da2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d009      	beq.n	8014d9c <udp_input_local_match+0xa4>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <udp_input_local_match+0xa4>
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	4b09      	ldr	r3, [pc, #36]	@ (8014dbc <udp_input_local_match+0xc4>)
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d101      	bne.n	8014da0 <udp_input_local_match+0xa8>
        return 1;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	e000      	b.n	8014da2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3710      	adds	r7, #16
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	0801e270 	.word	0x0801e270
 8014db0:	0801e2a0 	.word	0x0801e2a0
 8014db4:	0801e2c4 	.word	0x0801e2c4
 8014db8:	0801e2ec 	.word	0x0801e2ec
 8014dbc:	2000b148 	.word	0x2000b148

08014dc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014dc0:	b590      	push	{r4, r7, lr}
 8014dc2:	b08d      	sub	sp, #52	@ 0x34
 8014dc4:	af02      	add	r7, sp, #8
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d105      	bne.n	8014de0 <udp_input+0x20>
 8014dd4:	4b87      	ldr	r3, [pc, #540]	@ (8014ff4 <udp_input+0x234>)
 8014dd6:	22cf      	movs	r2, #207	@ 0xcf
 8014dd8:	4987      	ldr	r1, [pc, #540]	@ (8014ff8 <udp_input+0x238>)
 8014dda:	4888      	ldr	r0, [pc, #544]	@ (8014ffc <udp_input+0x23c>)
 8014ddc:	f005 f99a 	bl	801a114 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d105      	bne.n	8014df2 <udp_input+0x32>
 8014de6:	4b83      	ldr	r3, [pc, #524]	@ (8014ff4 <udp_input+0x234>)
 8014de8:	22d0      	movs	r2, #208	@ 0xd0
 8014dea:	4985      	ldr	r1, [pc, #532]	@ (8015000 <udp_input+0x240>)
 8014dec:	4883      	ldr	r0, [pc, #524]	@ (8014ffc <udp_input+0x23c>)
 8014dee:	f005 f991 	bl	801a114 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	895b      	ldrh	r3, [r3, #10]
 8014df6:	2b07      	cmp	r3, #7
 8014df8:	d803      	bhi.n	8014e02 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7f9 fcf8 	bl	800e7f0 <pbuf_free>
    goto end;
 8014e00:	e0f0      	b.n	8014fe4 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014e08:	4b7e      	ldr	r3, [pc, #504]	@ (8015004 <udp_input+0x244>)
 8014e0a:	695b      	ldr	r3, [r3, #20]
 8014e0c:	4a7d      	ldr	r2, [pc, #500]	@ (8015004 <udp_input+0x244>)
 8014e0e:	6812      	ldr	r2, [r2, #0]
 8014e10:	4611      	mov	r1, r2
 8014e12:	4618      	mov	r0, r3
 8014e14:	f003 ff20 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	881b      	ldrh	r3, [r3, #0]
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7f8 f80c 	bl	800ce40 <lwip_htons>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	885b      	ldrh	r3, [r3, #2]
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7f8 f804 	bl	800ce40 <lwip_htons>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8014e40:	2300      	movs	r3, #0
 8014e42:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014e44:	2300      	movs	r3, #0
 8014e46:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e48:	4b6f      	ldr	r3, [pc, #444]	@ (8015008 <udp_input+0x248>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	61fb      	str	r3, [r7, #28]
 8014e4e:	e054      	b.n	8014efa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	8a5b      	ldrh	r3, [r3, #18]
 8014e54:	89fa      	ldrh	r2, [r7, #14]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d14a      	bne.n	8014ef0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014e5a:	7cfb      	ldrb	r3, [r7, #19]
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	69f8      	ldr	r0, [r7, #28]
 8014e62:	f7ff ff49 	bl	8014cf8 <udp_input_local_match>
 8014e66:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d041      	beq.n	8014ef0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	7c1b      	ldrb	r3, [r3, #16]
 8014e70:	f003 0304 	and.w	r3, r3, #4
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d11d      	bne.n	8014eb4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d102      	bne.n	8014e84 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8014e82:	e017      	b.n	8014eb4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014e84:	7cfb      	ldrb	r3, [r7, #19]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d014      	beq.n	8014eb4 <udp_input+0xf4>
 8014e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8015004 <udp_input+0x244>)
 8014e8c:	695b      	ldr	r3, [r3, #20]
 8014e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e92:	d10f      	bne.n	8014eb4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e96:	681a      	ldr	r2, [r3, #0]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	3304      	adds	r3, #4
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d008      	beq.n	8014eb4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d101      	bne.n	8014eb4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	8a9b      	ldrh	r3, [r3, #20]
 8014eb8:	8a3a      	ldrh	r2, [r7, #16]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d118      	bne.n	8014ef0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d005      	beq.n	8014ed2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	685a      	ldr	r2, [r3, #4]
 8014eca:	4b4e      	ldr	r3, [pc, #312]	@ (8015004 <udp_input+0x244>)
 8014ecc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d10e      	bne.n	8014ef0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014ed2:	6a3b      	ldr	r3, [r7, #32]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d014      	beq.n	8014f02 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	68da      	ldr	r2, [r3, #12]
 8014edc:	6a3b      	ldr	r3, [r7, #32]
 8014ede:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014ee0:	4b49      	ldr	r3, [pc, #292]	@ (8015008 <udp_input+0x248>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014ee8:	4a47      	ldr	r2, [pc, #284]	@ (8015008 <udp_input+0x248>)
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014eee:	e008      	b.n	8014f02 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014ef0:	69fb      	ldr	r3, [r7, #28]
 8014ef2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	61fb      	str	r3, [r7, #28]
 8014efa:	69fb      	ldr	r3, [r7, #28]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d1a7      	bne.n	8014e50 <udp_input+0x90>
 8014f00:	e000      	b.n	8014f04 <udp_input+0x144>
        break;
 8014f02:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d101      	bne.n	8014f0e <udp_input+0x14e>
    pcb = uncon_pcb;
 8014f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f0c:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f0e:	69fb      	ldr	r3, [r7, #28]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d002      	beq.n	8014f1a <udp_input+0x15a>
    for_us = 1;
 8014f14:	2301      	movs	r3, #1
 8014f16:	76fb      	strb	r3, [r7, #27]
 8014f18:	e00a      	b.n	8014f30 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	3304      	adds	r3, #4
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	4b38      	ldr	r3, [pc, #224]	@ (8015004 <udp_input+0x244>)
 8014f22:	695b      	ldr	r3, [r3, #20]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	bf0c      	ite	eq
 8014f28:	2301      	moveq	r3, #1
 8014f2a:	2300      	movne	r3, #0
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014f30:	7efb      	ldrb	r3, [r7, #27]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d052      	beq.n	8014fdc <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	88db      	ldrh	r3, [r3, #6]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d00b      	beq.n	8014f58 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	891a      	ldrh	r2, [r3, #8]
 8014f44:	4b31      	ldr	r3, [pc, #196]	@ (801500c <udp_input+0x24c>)
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	4b31      	ldr	r3, [pc, #196]	@ (8015010 <udp_input+0x250>)
 8014f4a:	2111      	movs	r1, #17
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7f8 f8aa 	bl	800d0a6 <ip_chksum_pseudo>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d146      	bne.n	8014fe6 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014f58:	2108      	movs	r1, #8
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7f9 fbc2 	bl	800e6e4 <pbuf_remove_header>
 8014f60:	4603      	mov	r3, r0
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d00a      	beq.n	8014f7c <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014f66:	4b23      	ldr	r3, [pc, #140]	@ (8014ff4 <udp_input+0x234>)
 8014f68:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014f6c:	4929      	ldr	r1, [pc, #164]	@ (8015014 <udp_input+0x254>)
 8014f6e:	4823      	ldr	r0, [pc, #140]	@ (8014ffc <udp_input+0x23c>)
 8014f70:	f005 f8d0 	bl	801a114 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f7f9 fc3b 	bl	800e7f0 <pbuf_free>
      goto end;
 8014f7a:	e033      	b.n	8014fe4 <udp_input+0x224>
    }

    if (pcb != NULL) {
 8014f7c:	69fb      	ldr	r3, [r7, #28]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d012      	beq.n	8014fa8 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00a      	beq.n	8014fa0 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	699c      	ldr	r4, [r3, #24]
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	69d8      	ldr	r0, [r3, #28]
 8014f92:	8a3b      	ldrh	r3, [r7, #16]
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	4b1e      	ldr	r3, [pc, #120]	@ (8015010 <udp_input+0x250>)
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	69f9      	ldr	r1, [r7, #28]
 8014f9c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014f9e:	e026      	b.n	8014fee <udp_input+0x22e>
        pbuf_free(p);
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7f9 fc25 	bl	800e7f0 <pbuf_free>
        goto end;
 8014fa6:	e01d      	b.n	8014fe4 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014fa8:	7cfb      	ldrb	r3, [r7, #19]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d112      	bne.n	8014fd4 <udp_input+0x214>
 8014fae:	4b15      	ldr	r3, [pc, #84]	@ (8015004 <udp_input+0x244>)
 8014fb0:	695b      	ldr	r3, [r3, #20]
 8014fb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014fb6:	2be0      	cmp	r3, #224	@ 0xe0
 8014fb8:	d00c      	beq.n	8014fd4 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014fba:	4b12      	ldr	r3, [pc, #72]	@ (8015004 <udp_input+0x244>)
 8014fbc:	899b      	ldrh	r3, [r3, #12]
 8014fbe:	3308      	adds	r3, #8
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	b21b      	sxth	r3, r3
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7f9 fbff 	bl	800e7ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014fcc:	2103      	movs	r1, #3
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f003 fa86 	bl	80184e0 <icmp_dest_unreach>
      pbuf_free(p);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f7f9 fc0b 	bl	800e7f0 <pbuf_free>
  return;
 8014fda:	e008      	b.n	8014fee <udp_input+0x22e>
    pbuf_free(p);
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7f9 fc07 	bl	800e7f0 <pbuf_free>
  return;
 8014fe2:	e004      	b.n	8014fee <udp_input+0x22e>
 8014fe4:	e003      	b.n	8014fee <udp_input+0x22e>
            goto chkerr;
 8014fe6:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f7f9 fc01 	bl	800e7f0 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014fee:	372c      	adds	r7, #44	@ 0x2c
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd90      	pop	{r4, r7, pc}
 8014ff4:	0801e270 	.word	0x0801e270
 8014ff8:	0801e314 	.word	0x0801e314
 8014ffc:	0801e2c4 	.word	0x0801e2c4
 8015000:	0801e32c 	.word	0x0801e32c
 8015004:	2000b148 	.word	0x2000b148
 8015008:	200176cc 	.word	0x200176cc
 801500c:	2000b15c 	.word	0x2000b15c
 8015010:	2000b158 	.word	0x2000b158
 8015014:	0801e348 	.word	0x0801e348

08015018 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b088      	sub	sp, #32
 801501c:	af02      	add	r7, sp, #8
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]
 8015024:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d109      	bne.n	8015040 <udp_sendto_if+0x28>
 801502c:	4b2e      	ldr	r3, [pc, #184]	@ (80150e8 <udp_sendto_if+0xd0>)
 801502e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015032:	492e      	ldr	r1, [pc, #184]	@ (80150ec <udp_sendto_if+0xd4>)
 8015034:	482e      	ldr	r0, [pc, #184]	@ (80150f0 <udp_sendto_if+0xd8>)
 8015036:	f005 f86d 	bl	801a114 <iprintf>
 801503a:	f06f 030f 	mvn.w	r3, #15
 801503e:	e04f      	b.n	80150e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d109      	bne.n	801505a <udp_sendto_if+0x42>
 8015046:	4b28      	ldr	r3, [pc, #160]	@ (80150e8 <udp_sendto_if+0xd0>)
 8015048:	f240 2281 	movw	r2, #641	@ 0x281
 801504c:	4929      	ldr	r1, [pc, #164]	@ (80150f4 <udp_sendto_if+0xdc>)
 801504e:	4828      	ldr	r0, [pc, #160]	@ (80150f0 <udp_sendto_if+0xd8>)
 8015050:	f005 f860 	bl	801a114 <iprintf>
 8015054:	f06f 030f 	mvn.w	r3, #15
 8015058:	e042      	b.n	80150e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d109      	bne.n	8015074 <udp_sendto_if+0x5c>
 8015060:	4b21      	ldr	r3, [pc, #132]	@ (80150e8 <udp_sendto_if+0xd0>)
 8015062:	f240 2282 	movw	r2, #642	@ 0x282
 8015066:	4924      	ldr	r1, [pc, #144]	@ (80150f8 <udp_sendto_if+0xe0>)
 8015068:	4821      	ldr	r0, [pc, #132]	@ (80150f0 <udp_sendto_if+0xd8>)
 801506a:	f005 f853 	bl	801a114 <iprintf>
 801506e:	f06f 030f 	mvn.w	r3, #15
 8015072:	e035      	b.n	80150e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015074:	6a3b      	ldr	r3, [r7, #32]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d109      	bne.n	801508e <udp_sendto_if+0x76>
 801507a:	4b1b      	ldr	r3, [pc, #108]	@ (80150e8 <udp_sendto_if+0xd0>)
 801507c:	f240 2283 	movw	r2, #643	@ 0x283
 8015080:	491e      	ldr	r1, [pc, #120]	@ (80150fc <udp_sendto_if+0xe4>)
 8015082:	481b      	ldr	r0, [pc, #108]	@ (80150f0 <udp_sendto_if+0xd8>)
 8015084:	f005 f846 	bl	801a114 <iprintf>
 8015088:	f06f 030f 	mvn.w	r3, #15
 801508c:	e028      	b.n	80150e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d009      	beq.n	80150a8 <udp_sendto_if+0x90>
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d005      	beq.n	80150a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150a4:	2be0      	cmp	r3, #224	@ 0xe0
 80150a6:	d103      	bne.n	80150b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80150a8:	6a3b      	ldr	r3, [r7, #32]
 80150aa:	3304      	adds	r3, #4
 80150ac:	617b      	str	r3, [r7, #20]
 80150ae:	e00b      	b.n	80150c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	6a3b      	ldr	r3, [r7, #32]
 80150b6:	3304      	adds	r3, #4
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d002      	beq.n	80150c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80150be:	f06f 0303 	mvn.w	r3, #3
 80150c2:	e00d      	b.n	80150e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80150c8:	887a      	ldrh	r2, [r7, #2]
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	9301      	str	r3, [sp, #4]
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	9300      	str	r3, [sp, #0]
 80150d2:	4613      	mov	r3, r2
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	68b9      	ldr	r1, [r7, #8]
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	f000 f811 	bl	8015100 <udp_sendto_if_src>
 80150de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3718      	adds	r7, #24
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	0801e270 	.word	0x0801e270
 80150ec:	0801e3e4 	.word	0x0801e3e4
 80150f0:	0801e2c4 	.word	0x0801e2c4
 80150f4:	0801e400 	.word	0x0801e400
 80150f8:	0801e41c 	.word	0x0801e41c
 80150fc:	0801e43c 	.word	0x0801e43c

08015100 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b08e      	sub	sp, #56	@ 0x38
 8015104:	af04      	add	r7, sp, #16
 8015106:	60f8      	str	r0, [r7, #12]
 8015108:	60b9      	str	r1, [r7, #8]
 801510a:	607a      	str	r2, [r7, #4]
 801510c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d109      	bne.n	8015128 <udp_sendto_if_src+0x28>
 8015114:	4b72      	ldr	r3, [pc, #456]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 8015116:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801511a:	4972      	ldr	r1, [pc, #456]	@ (80152e4 <udp_sendto_if_src+0x1e4>)
 801511c:	4872      	ldr	r0, [pc, #456]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 801511e:	f004 fff9 	bl	801a114 <iprintf>
 8015122:	f06f 030f 	mvn.w	r3, #15
 8015126:	e0d6      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d109      	bne.n	8015142 <udp_sendto_if_src+0x42>
 801512e:	4b6c      	ldr	r3, [pc, #432]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 8015130:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015134:	496d      	ldr	r1, [pc, #436]	@ (80152ec <udp_sendto_if_src+0x1ec>)
 8015136:	486c      	ldr	r0, [pc, #432]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 8015138:	f004 ffec 	bl	801a114 <iprintf>
 801513c:	f06f 030f 	mvn.w	r3, #15
 8015140:	e0c9      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d109      	bne.n	801515c <udp_sendto_if_src+0x5c>
 8015148:	4b65      	ldr	r3, [pc, #404]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 801514a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801514e:	4968      	ldr	r1, [pc, #416]	@ (80152f0 <udp_sendto_if_src+0x1f0>)
 8015150:	4865      	ldr	r0, [pc, #404]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 8015152:	f004 ffdf 	bl	801a114 <iprintf>
 8015156:	f06f 030f 	mvn.w	r3, #15
 801515a:	e0bc      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801515c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801515e:	2b00      	cmp	r3, #0
 8015160:	d109      	bne.n	8015176 <udp_sendto_if_src+0x76>
 8015162:	4b5f      	ldr	r3, [pc, #380]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 8015164:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015168:	4962      	ldr	r1, [pc, #392]	@ (80152f4 <udp_sendto_if_src+0x1f4>)
 801516a:	485f      	ldr	r0, [pc, #380]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 801516c:	f004 ffd2 	bl	801a114 <iprintf>
 8015170:	f06f 030f 	mvn.w	r3, #15
 8015174:	e0af      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015178:	2b00      	cmp	r3, #0
 801517a:	d109      	bne.n	8015190 <udp_sendto_if_src+0x90>
 801517c:	4b58      	ldr	r3, [pc, #352]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 801517e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015182:	495d      	ldr	r1, [pc, #372]	@ (80152f8 <udp_sendto_if_src+0x1f8>)
 8015184:	4858      	ldr	r0, [pc, #352]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 8015186:	f004 ffc5 	bl	801a114 <iprintf>
 801518a:	f06f 030f 	mvn.w	r3, #15
 801518e:	e0a2      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	8a5b      	ldrh	r3, [r3, #18]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d10f      	bne.n	80151b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015198:	68f9      	ldr	r1, [r7, #12]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	8a5b      	ldrh	r3, [r3, #18]
 801519e:	461a      	mov	r2, r3
 80151a0:	68f8      	ldr	r0, [r7, #12]
 80151a2:	f000 f8ad 	bl	8015300 <udp_bind>
 80151a6:	4603      	mov	r3, r0
 80151a8:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 80151aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d002      	beq.n	80151b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80151b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80151b6:	e08e      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	891b      	ldrh	r3, [r3, #8]
 80151bc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d902      	bls.n	80151ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80151c4:	f04f 33ff 	mov.w	r3, #4294967295
 80151c8:	e085      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80151ca:	2108      	movs	r1, #8
 80151cc:	68b8      	ldr	r0, [r7, #8]
 80151ce:	f7f9 fa79 	bl	800e6c4 <pbuf_add_header>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d015      	beq.n	8015204 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80151d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80151dc:	2108      	movs	r1, #8
 80151de:	2022      	movs	r0, #34	@ 0x22
 80151e0:	f7f9 f822 	bl	800e228 <pbuf_alloc>
 80151e4:	6238      	str	r0, [r7, #32]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d102      	bne.n	80151f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80151ec:	f04f 33ff 	mov.w	r3, #4294967295
 80151f0:	e071      	b.n	80152d6 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	891b      	ldrh	r3, [r3, #8]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d006      	beq.n	8015208 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80151fa:	68b9      	ldr	r1, [r7, #8]
 80151fc:	6a38      	ldr	r0, [r7, #32]
 80151fe:	f7f9 fc1b 	bl	800ea38 <pbuf_chain>
 8015202:	e001      	b.n	8015208 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015208:	6a3b      	ldr	r3, [r7, #32]
 801520a:	895b      	ldrh	r3, [r3, #10]
 801520c:	2b07      	cmp	r3, #7
 801520e:	d806      	bhi.n	801521e <udp_sendto_if_src+0x11e>
 8015210:	4b33      	ldr	r3, [pc, #204]	@ (80152e0 <udp_sendto_if_src+0x1e0>)
 8015212:	f240 320d 	movw	r2, #781	@ 0x30d
 8015216:	4939      	ldr	r1, [pc, #228]	@ (80152fc <udp_sendto_if_src+0x1fc>)
 8015218:	4833      	ldr	r0, [pc, #204]	@ (80152e8 <udp_sendto_if_src+0x1e8>)
 801521a:	f004 ff7b 	bl	801a114 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801521e:	6a3b      	ldr	r3, [r7, #32]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	61bb      	str	r3, [r7, #24]
  udphdr->src = lwip_htons(pcb->local_port);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	8a5b      	ldrh	r3, [r3, #18]
 8015228:	4618      	mov	r0, r3
 801522a:	f7f7 fe09 	bl	800ce40 <lwip_htons>
 801522e:	4603      	mov	r3, r0
 8015230:	461a      	mov	r2, r3
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015236:	887b      	ldrh	r3, [r7, #2]
 8015238:	4618      	mov	r0, r3
 801523a:	f7f7 fe01 	bl	800ce40 <lwip_htons>
 801523e:	4603      	mov	r3, r0
 8015240:	461a      	mov	r2, r3
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	2200      	movs	r2, #0
 801524a:	719a      	strb	r2, [r3, #6]
 801524c:	2200      	movs	r2, #0
 801524e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015250:	6a3b      	ldr	r3, [r7, #32]
 8015252:	891b      	ldrh	r3, [r3, #8]
 8015254:	4618      	mov	r0, r3
 8015256:	f7f7 fdf3 	bl	800ce40 <lwip_htons>
 801525a:	4603      	mov	r3, r0
 801525c:	461a      	mov	r2, r3
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	7c1b      	ldrb	r3, [r3, #16]
 8015266:	f003 0301 	and.w	r3, r3, #1
 801526a:	2b00      	cmp	r3, #0
 801526c:	d113      	bne.n	8015296 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 801526e:	6a3b      	ldr	r3, [r7, #32]
 8015270:	891a      	ldrh	r2, [r3, #8]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	9300      	str	r3, [sp, #0]
 8015276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015278:	2111      	movs	r1, #17
 801527a:	6a38      	ldr	r0, [r7, #32]
 801527c:	f7f7 ff13 	bl	800d0a6 <ip_chksum_pseudo>
 8015280:	4603      	mov	r3, r0
 8015282:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 8015284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015286:	2b00      	cmp	r3, #0
 8015288:	d102      	bne.n	8015290 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 801528a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801528e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        udphdr->chksum = udpchksum;
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015294:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015296:	2311      	movs	r3, #17
 8015298:	75fb      	strb	r3, [r7, #23]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7adb      	ldrb	r3, [r3, #11]
 801529e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	7a9b      	ldrb	r3, [r3, #10]
 80152a4:	7db9      	ldrb	r1, [r7, #22]
 80152a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80152a8:	9202      	str	r2, [sp, #8]
 80152aa:	7dfa      	ldrb	r2, [r7, #23]
 80152ac:	9201      	str	r2, [sp, #4]
 80152ae:	9300      	str	r3, [sp, #0]
 80152b0:	460b      	mov	r3, r1
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80152b6:	6a38      	ldr	r0, [r7, #32]
 80152b8:	f003 fbb8 	bl	8018a2c <ip4_output_if_src>
 80152bc:	4603      	mov	r3, r0
 80152be:	77fb      	strb	r3, [r7, #31]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80152c0:	6a3a      	ldr	r2, [r7, #32]
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d004      	beq.n	80152d2 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 80152c8:	6a38      	ldr	r0, [r7, #32]
 80152ca:	f7f9 fa91 	bl	800e7f0 <pbuf_free>
    q = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	623b      	str	r3, [r7, #32]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80152d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3728      	adds	r7, #40	@ 0x28
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	0801e270 	.word	0x0801e270
 80152e4:	0801e45c 	.word	0x0801e45c
 80152e8:	0801e2c4 	.word	0x0801e2c4
 80152ec:	0801e47c 	.word	0x0801e47c
 80152f0:	0801e49c 	.word	0x0801e49c
 80152f4:	0801e4c0 	.word	0x0801e4c0
 80152f8:	0801e4e4 	.word	0x0801e4e4
 80152fc:	0801e508 	.word	0x0801e508

08015300 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b086      	sub	sp, #24
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	4613      	mov	r3, r2
 801530c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d101      	bne.n	8015318 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015314:	4b39      	ldr	r3, [pc, #228]	@ (80153fc <udp_bind+0xfc>)
 8015316:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d109      	bne.n	8015332 <udp_bind+0x32>
 801531e:	4b38      	ldr	r3, [pc, #224]	@ (8015400 <udp_bind+0x100>)
 8015320:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8015324:	4937      	ldr	r1, [pc, #220]	@ (8015404 <udp_bind+0x104>)
 8015326:	4838      	ldr	r0, [pc, #224]	@ (8015408 <udp_bind+0x108>)
 8015328:	f004 fef4 	bl	801a114 <iprintf>
 801532c:	f06f 030f 	mvn.w	r3, #15
 8015330:	e060      	b.n	80153f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015336:	4b35      	ldr	r3, [pc, #212]	@ (801540c <udp_bind+0x10c>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	617b      	str	r3, [r7, #20]
 801533c:	e009      	b.n	8015352 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	429a      	cmp	r2, r3
 8015344:	d102      	bne.n	801534c <udp_bind+0x4c>
      rebind = 1;
 8015346:	2301      	movs	r3, #1
 8015348:	74fb      	strb	r3, [r7, #19]
      break;
 801534a:	e005      	b.n	8015358 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	617b      	str	r3, [r7, #20]
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d1f2      	bne.n	801533e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015358:	88fb      	ldrh	r3, [r7, #6]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d109      	bne.n	8015372 <udp_bind+0x72>
    port = udp_new_port();
 801535e:	f7ff fc93 	bl	8014c88 <udp_new_port>
 8015362:	4603      	mov	r3, r0
 8015364:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015366:	88fb      	ldrh	r3, [r7, #6]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d12c      	bne.n	80153c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801536c:	f06f 0307 	mvn.w	r3, #7
 8015370:	e040      	b.n	80153f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015372:	4b26      	ldr	r3, [pc, #152]	@ (801540c <udp_bind+0x10c>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	617b      	str	r3, [r7, #20]
 8015378:	e022      	b.n	80153c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	429a      	cmp	r2, r3
 8015380:	d01b      	beq.n	80153ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	8a5b      	ldrh	r3, [r3, #18]
 8015386:	88fa      	ldrh	r2, [r7, #6]
 8015388:	429a      	cmp	r2, r3
 801538a:	d116      	bne.n	80153ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015394:	429a      	cmp	r2, r3
 8015396:	d00d      	beq.n	80153b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d00a      	beq.n	80153b4 <udp_bind+0xb4>
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d006      	beq.n	80153b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80153a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d003      	beq.n	80153b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d102      	bne.n	80153ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80153b4:	f06f 0307 	mvn.w	r3, #7
 80153b8:	e01c      	b.n	80153f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	617b      	str	r3, [r7, #20]
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d1d9      	bne.n	801537a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d002      	beq.n	80153d2 <udp_bind+0xd2>
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	e000      	b.n	80153d4 <udp_bind+0xd4>
 80153d2:	2300      	movs	r3, #0
 80153d4:	68fa      	ldr	r2, [r7, #12]
 80153d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	88fa      	ldrh	r2, [r7, #6]
 80153dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80153de:	7cfb      	ldrb	r3, [r7, #19]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d106      	bne.n	80153f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80153e4:	4b09      	ldr	r3, [pc, #36]	@ (801540c <udp_bind+0x10c>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80153ec:	4a07      	ldr	r2, [pc, #28]	@ (801540c <udp_bind+0x10c>)
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80153f2:	2300      	movs	r3, #0
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	08023034 	.word	0x08023034
 8015400:	0801e270 	.word	0x0801e270
 8015404:	0801e538 	.word	0x0801e538
 8015408:	0801e2c4 	.word	0x0801e2c4
 801540c:	200176cc 	.word	0x200176cc

08015410 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	4613      	mov	r3, r2
 801541c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d109      	bne.n	8015438 <udp_connect+0x28>
 8015424:	4b2c      	ldr	r3, [pc, #176]	@ (80154d8 <udp_connect+0xc8>)
 8015426:	f240 4235 	movw	r2, #1077	@ 0x435
 801542a:	492c      	ldr	r1, [pc, #176]	@ (80154dc <udp_connect+0xcc>)
 801542c:	482c      	ldr	r0, [pc, #176]	@ (80154e0 <udp_connect+0xd0>)
 801542e:	f004 fe71 	bl	801a114 <iprintf>
 8015432:	f06f 030f 	mvn.w	r3, #15
 8015436:	e04b      	b.n	80154d0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d109      	bne.n	8015452 <udp_connect+0x42>
 801543e:	4b26      	ldr	r3, [pc, #152]	@ (80154d8 <udp_connect+0xc8>)
 8015440:	f240 4236 	movw	r2, #1078	@ 0x436
 8015444:	4927      	ldr	r1, [pc, #156]	@ (80154e4 <udp_connect+0xd4>)
 8015446:	4826      	ldr	r0, [pc, #152]	@ (80154e0 <udp_connect+0xd0>)
 8015448:	f004 fe64 	bl	801a114 <iprintf>
 801544c:	f06f 030f 	mvn.w	r3, #15
 8015450:	e03e      	b.n	80154d0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	8a5b      	ldrh	r3, [r3, #18]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d10f      	bne.n	801547a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801545a:	68f9      	ldr	r1, [r7, #12]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	8a5b      	ldrh	r3, [r3, #18]
 8015460:	461a      	mov	r2, r3
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	f7ff ff4c 	bl	8015300 <udp_bind>
 8015468:	4603      	mov	r3, r0
 801546a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801546c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d002      	beq.n	801547a <udp_connect+0x6a>
      return err;
 8015474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015478:	e02a      	b.n	80154d0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d002      	beq.n	8015486 <udp_connect+0x76>
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	e000      	b.n	8015488 <udp_connect+0x78>
 8015486:	2300      	movs	r3, #0
 8015488:	68fa      	ldr	r2, [r7, #12]
 801548a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	88fa      	ldrh	r2, [r7, #6]
 8015490:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	7c1b      	ldrb	r3, [r3, #16]
 8015496:	f043 0304 	orr.w	r3, r3, #4
 801549a:	b2da      	uxtb	r2, r3
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154a0:	4b11      	ldr	r3, [pc, #68]	@ (80154e8 <udp_connect+0xd8>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	613b      	str	r3, [r7, #16]
 80154a6:	e008      	b.n	80154ba <udp_connect+0xaa>
    if (pcb == ipcb) {
 80154a8:	68fa      	ldr	r2, [r7, #12]
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d101      	bne.n	80154b4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80154b0:	2300      	movs	r3, #0
 80154b2:	e00d      	b.n	80154d0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	613b      	str	r3, [r7, #16]
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1f3      	bne.n	80154a8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80154c0:	4b09      	ldr	r3, [pc, #36]	@ (80154e8 <udp_connect+0xd8>)
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80154c8:	4a07      	ldr	r2, [pc, #28]	@ (80154e8 <udp_connect+0xd8>)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80154ce:	2300      	movs	r3, #0
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3718      	adds	r7, #24
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	0801e270 	.word	0x0801e270
 80154dc:	0801e550 	.word	0x0801e550
 80154e0:	0801e2c4 	.word	0x0801e2c4
 80154e4:	0801e56c 	.word	0x0801e56c
 80154e8:	200176cc 	.word	0x200176cc

080154ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d107      	bne.n	801550e <udp_recv+0x22>
 80154fe:	4b08      	ldr	r3, [pc, #32]	@ (8015520 <udp_recv+0x34>)
 8015500:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015504:	4907      	ldr	r1, [pc, #28]	@ (8015524 <udp_recv+0x38>)
 8015506:	4808      	ldr	r0, [pc, #32]	@ (8015528 <udp_recv+0x3c>)
 8015508:	f004 fe04 	bl	801a114 <iprintf>
 801550c:	e005      	b.n	801551a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	68ba      	ldr	r2, [r7, #8]
 8015512:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	61da      	str	r2, [r3, #28]
}
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	0801e270 	.word	0x0801e270
 8015524:	0801e5a4 	.word	0x0801e5a4
 8015528:	0801e2c4 	.word	0x0801e2c4

0801552c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d107      	bne.n	801554a <udp_remove+0x1e>
 801553a:	4b19      	ldr	r3, [pc, #100]	@ (80155a0 <udp_remove+0x74>)
 801553c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8015540:	4918      	ldr	r1, [pc, #96]	@ (80155a4 <udp_remove+0x78>)
 8015542:	4819      	ldr	r0, [pc, #100]	@ (80155a8 <udp_remove+0x7c>)
 8015544:	f004 fde6 	bl	801a114 <iprintf>
 8015548:	e026      	b.n	8015598 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801554a:	4b18      	ldr	r3, [pc, #96]	@ (80155ac <udp_remove+0x80>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	429a      	cmp	r2, r3
 8015552:	d105      	bne.n	8015560 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015554:	4b15      	ldr	r3, [pc, #84]	@ (80155ac <udp_remove+0x80>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	4a14      	ldr	r2, [pc, #80]	@ (80155ac <udp_remove+0x80>)
 801555c:	6013      	str	r3, [r2, #0]
 801555e:	e017      	b.n	8015590 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015560:	4b12      	ldr	r3, [pc, #72]	@ (80155ac <udp_remove+0x80>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	60fb      	str	r3, [r7, #12]
 8015566:	e010      	b.n	801558a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d009      	beq.n	8015584 <udp_remove+0x58>
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	68db      	ldr	r3, [r3, #12]
 8015574:	687a      	ldr	r2, [r7, #4]
 8015576:	429a      	cmp	r2, r3
 8015578:	d104      	bne.n	8015584 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	68da      	ldr	r2, [r3, #12]
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	60da      	str	r2, [r3, #12]
        break;
 8015582:	e005      	b.n	8015590 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	60fb      	str	r3, [r7, #12]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d1eb      	bne.n	8015568 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015590:	6879      	ldr	r1, [r7, #4]
 8015592:	2000      	movs	r0, #0
 8015594:	f7f8 fad6 	bl	800db44 <memp_free>
}
 8015598:	3710      	adds	r7, #16
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
 801559e:	bf00      	nop
 80155a0:	0801e270 	.word	0x0801e270
 80155a4:	0801e5bc 	.word	0x0801e5bc
 80155a8:	0801e2c4 	.word	0x0801e2c4
 80155ac:	200176cc 	.word	0x200176cc

080155b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80155b6:	2000      	movs	r0, #0
 80155b8:	f7f8 fa72 	bl	800daa0 <memp_malloc>
 80155bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d007      	beq.n	80155d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80155c4:	2220      	movs	r2, #32
 80155c6:	2100      	movs	r1, #0
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f004 ff6d 	bl	801a4a8 <memset>
    pcb->ttl = UDP_TTL;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	22ff      	movs	r2, #255	@ 0xff
 80155d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80155d4:	687b      	ldr	r3, [r7, #4]
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3708      	adds	r7, #8
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}

080155de <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b084      	sub	sp, #16
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	4603      	mov	r3, r0
 80155e6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80155e8:	f7ff ffe2 	bl	80155b0 <udp_new>
 80155ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80155ee:	68fb      	ldr	r3, [r7, #12]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3710      	adds	r7, #16
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b085      	sub	sp, #20
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d01e      	beq.n	8015646 <udp_netif_ip_addr_changed+0x4e>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d01a      	beq.n	8015646 <udp_netif_ip_addr_changed+0x4e>
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d017      	beq.n	8015646 <udp_netif_ip_addr_changed+0x4e>
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d013      	beq.n	8015646 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801561e:	4b0d      	ldr	r3, [pc, #52]	@ (8015654 <udp_netif_ip_addr_changed+0x5c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	60fb      	str	r3, [r7, #12]
 8015624:	e00c      	b.n	8015640 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	429a      	cmp	r2, r3
 8015630:	d103      	bne.n	801563a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	60fb      	str	r3, [r7, #12]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1ef      	bne.n	8015626 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015646:	bf00      	nop
 8015648:	3714      	adds	r7, #20
 801564a:	46bd      	mov	sp, r7
 801564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	200176cc 	.word	0x200176cc

08015658 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801565c:	4b20      	ldr	r3, [pc, #128]	@ (80156e0 <dhcp_inc_pcb_refcount+0x88>)
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d133      	bne.n	80156cc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015664:	4b1f      	ldr	r3, [pc, #124]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d005      	beq.n	8015678 <dhcp_inc_pcb_refcount+0x20>
 801566c:	4b1e      	ldr	r3, [pc, #120]	@ (80156e8 <dhcp_inc_pcb_refcount+0x90>)
 801566e:	22e5      	movs	r2, #229	@ 0xe5
 8015670:	491e      	ldr	r1, [pc, #120]	@ (80156ec <dhcp_inc_pcb_refcount+0x94>)
 8015672:	481f      	ldr	r0, [pc, #124]	@ (80156f0 <dhcp_inc_pcb_refcount+0x98>)
 8015674:	f004 fd4e 	bl	801a114 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015678:	f7ff ff9a 	bl	80155b0 <udp_new>
 801567c:	4603      	mov	r3, r0
 801567e:	4a19      	ldr	r2, [pc, #100]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 8015680:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015682:	4b18      	ldr	r3, [pc, #96]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d102      	bne.n	8015690 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801568a:	f04f 33ff 	mov.w	r3, #4294967295
 801568e:	e024      	b.n	80156da <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015690:	4b14      	ldr	r3, [pc, #80]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	7a5a      	ldrb	r2, [r3, #9]
 8015696:	4b13      	ldr	r3, [pc, #76]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f042 0220 	orr.w	r2, r2, #32
 801569e:	b2d2      	uxtb	r2, r2
 80156a0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80156a2:	4b10      	ldr	r3, [pc, #64]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	2244      	movs	r2, #68	@ 0x44
 80156a8:	4912      	ldr	r1, [pc, #72]	@ (80156f4 <dhcp_inc_pcb_refcount+0x9c>)
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ff fe28 	bl	8015300 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80156b0:	4b0c      	ldr	r3, [pc, #48]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	2243      	movs	r2, #67	@ 0x43
 80156b6:	490f      	ldr	r1, [pc, #60]	@ (80156f4 <dhcp_inc_pcb_refcount+0x9c>)
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7ff fea9 	bl	8015410 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80156be:	4b09      	ldr	r3, [pc, #36]	@ (80156e4 <dhcp_inc_pcb_refcount+0x8c>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2200      	movs	r2, #0
 80156c4:	490c      	ldr	r1, [pc, #48]	@ (80156f8 <dhcp_inc_pcb_refcount+0xa0>)
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7ff ff10 	bl	80154ec <udp_recv>
  }

  dhcp_pcb_refcount++;
 80156cc:	4b04      	ldr	r3, [pc, #16]	@ (80156e0 <dhcp_inc_pcb_refcount+0x88>)
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	3301      	adds	r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	4b02      	ldr	r3, [pc, #8]	@ (80156e0 <dhcp_inc_pcb_refcount+0x88>)
 80156d6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	200176fc 	.word	0x200176fc
 80156e4:	200176f8 	.word	0x200176f8
 80156e8:	0801e5d4 	.word	0x0801e5d4
 80156ec:	0801e60c 	.word	0x0801e60c
 80156f0:	0801e634 	.word	0x0801e634
 80156f4:	08023034 	.word	0x08023034
 80156f8:	08016fa1 	.word	0x08016fa1

080156fc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015700:	4b0e      	ldr	r3, [pc, #56]	@ (801573c <dhcp_dec_pcb_refcount+0x40>)
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d105      	bne.n	8015714 <dhcp_dec_pcb_refcount+0x18>
 8015708:	4b0d      	ldr	r3, [pc, #52]	@ (8015740 <dhcp_dec_pcb_refcount+0x44>)
 801570a:	22ff      	movs	r2, #255	@ 0xff
 801570c:	490d      	ldr	r1, [pc, #52]	@ (8015744 <dhcp_dec_pcb_refcount+0x48>)
 801570e:	480e      	ldr	r0, [pc, #56]	@ (8015748 <dhcp_dec_pcb_refcount+0x4c>)
 8015710:	f004 fd00 	bl	801a114 <iprintf>
  dhcp_pcb_refcount--;
 8015714:	4b09      	ldr	r3, [pc, #36]	@ (801573c <dhcp_dec_pcb_refcount+0x40>)
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	3b01      	subs	r3, #1
 801571a:	b2da      	uxtb	r2, r3
 801571c:	4b07      	ldr	r3, [pc, #28]	@ (801573c <dhcp_dec_pcb_refcount+0x40>)
 801571e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015720:	4b06      	ldr	r3, [pc, #24]	@ (801573c <dhcp_dec_pcb_refcount+0x40>)
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d107      	bne.n	8015738 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015728:	4b08      	ldr	r3, [pc, #32]	@ (801574c <dhcp_dec_pcb_refcount+0x50>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff fefd 	bl	801552c <udp_remove>
    dhcp_pcb = NULL;
 8015732:	4b06      	ldr	r3, [pc, #24]	@ (801574c <dhcp_dec_pcb_refcount+0x50>)
 8015734:	2200      	movs	r2, #0
 8015736:	601a      	str	r2, [r3, #0]
  }
}
 8015738:	bf00      	nop
 801573a:	bd80      	pop	{r7, pc}
 801573c:	200176fc 	.word	0x200176fc
 8015740:	0801e5d4 	.word	0x0801e5d4
 8015744:	0801e65c 	.word	0x0801e65c
 8015748:	0801e634 	.word	0x0801e634
 801574c:	200176f8 	.word	0x200176f8

08015750 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801575c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801575e:	210c      	movs	r1, #12
 8015760:	68f8      	ldr	r0, [r7, #12]
 8015762:	f001 f84f 	bl	8016804 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015766:	4b06      	ldr	r3, [pc, #24]	@ (8015780 <dhcp_handle_nak+0x30>)
 8015768:	4a05      	ldr	r2, [pc, #20]	@ (8015780 <dhcp_handle_nak+0x30>)
 801576a:	4905      	ldr	r1, [pc, #20]	@ (8015780 <dhcp_handle_nak+0x30>)
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7f8 fb8b 	bl	800de88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f000 fc48 	bl	8016008 <dhcp_discover>
}
 8015778:	bf00      	nop
 801577a:	3710      	adds	r7, #16
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	08023034 	.word	0x08023034

08015784 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015790:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015792:	2108      	movs	r1, #8
 8015794:	68f8      	ldr	r0, [r7, #12]
 8015796:	f001 f835 	bl	8016804 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	331c      	adds	r3, #28
 801579e:	2200      	movs	r2, #0
 80157a0:	4619      	mov	r1, r3
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f002 fb70 	bl	8017e88 <etharp_query>
 80157a8:	4603      	mov	r3, r0
 80157aa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	799b      	ldrb	r3, [r3, #6]
 80157b0:	2bff      	cmp	r3, #255	@ 0xff
 80157b2:	d005      	beq.n	80157c0 <dhcp_check+0x3c>
    dhcp->tries++;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	799b      	ldrb	r3, [r3, #6]
 80157b8:	3301      	adds	r3, #1
 80157ba:	b2da      	uxtb	r2, r3
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80157c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80157c4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80157c6:	893b      	ldrh	r3, [r7, #8]
 80157c8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80157cc:	4a06      	ldr	r2, [pc, #24]	@ (80157e8 <dhcp_check+0x64>)
 80157ce:	fb82 1203 	smull	r1, r2, r2, r3
 80157d2:	1152      	asrs	r2, r2, #5
 80157d4:	17db      	asrs	r3, r3, #31
 80157d6:	1ad3      	subs	r3, r2, r3
 80157d8:	b29a      	uxth	r2, r3
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80157de:	bf00      	nop
 80157e0:	3710      	adds	r7, #16
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	10624dd3 	.word	0x10624dd3

080157ec <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80157fc:	4b0c      	ldr	r3, [pc, #48]	@ (8015830 <dhcp_handle_offer+0x44>)
 80157fe:	789b      	ldrb	r3, [r3, #2]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d011      	beq.n	8015828 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2200      	movs	r2, #0
 8015808:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801580a:	4b0a      	ldr	r3, [pc, #40]	@ (8015834 <dhcp_handle_offer+0x48>)
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	4618      	mov	r0, r3
 8015810:	f7f7 fb2c 	bl	800ce6c <lwip_htonl>
 8015814:	4602      	mov	r2, r0
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	691a      	ldr	r2, [r3, #16]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 f808 	bl	8015838 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015828:	bf00      	nop
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	200176f0 	.word	0x200176f0
 8015834:	200176d0 	.word	0x200176d0

08015838 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015838:	b5b0      	push	{r4, r5, r7, lr}
 801583a:	b08a      	sub	sp, #40	@ 0x28
 801583c:	af02      	add	r7, sp, #8
 801583e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d109      	bne.n	801585a <dhcp_select+0x22>
 8015846:	4b71      	ldr	r3, [pc, #452]	@ (8015a0c <dhcp_select+0x1d4>)
 8015848:	f240 1277 	movw	r2, #375	@ 0x177
 801584c:	4970      	ldr	r1, [pc, #448]	@ (8015a10 <dhcp_select+0x1d8>)
 801584e:	4871      	ldr	r0, [pc, #452]	@ (8015a14 <dhcp_select+0x1dc>)
 8015850:	f004 fc60 	bl	801a114 <iprintf>
 8015854:	f06f 030f 	mvn.w	r3, #15
 8015858:	e0d3      	b.n	8015a02 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801585e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d109      	bne.n	801587a <dhcp_select+0x42>
 8015866:	4b69      	ldr	r3, [pc, #420]	@ (8015a0c <dhcp_select+0x1d4>)
 8015868:	f240 1279 	movw	r2, #377	@ 0x179
 801586c:	496a      	ldr	r1, [pc, #424]	@ (8015a18 <dhcp_select+0x1e0>)
 801586e:	4869      	ldr	r0, [pc, #420]	@ (8015a14 <dhcp_select+0x1dc>)
 8015870:	f004 fc50 	bl	801a114 <iprintf>
 8015874:	f06f 0305 	mvn.w	r3, #5
 8015878:	e0c3      	b.n	8015a02 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801587a:	2101      	movs	r1, #1
 801587c:	69b8      	ldr	r0, [r7, #24]
 801587e:	f000 ffc1 	bl	8016804 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015882:	f107 030c 	add.w	r3, r7, #12
 8015886:	2203      	movs	r2, #3
 8015888:	69b9      	ldr	r1, [r7, #24]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f001 fc52 	bl	8017134 <dhcp_create_msg>
 8015890:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	2b00      	cmp	r3, #0
 8015896:	f000 8085 	beq.w	80159a4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80158a0:	89b8      	ldrh	r0, [r7, #12]
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80158a8:	2302      	movs	r3, #2
 80158aa:	2239      	movs	r2, #57	@ 0x39
 80158ac:	f000 ffc4 	bl	8016838 <dhcp_option>
 80158b0:	4603      	mov	r3, r0
 80158b2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80158b4:	89b8      	ldrh	r0, [r7, #12]
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158c0:	461a      	mov	r2, r3
 80158c2:	f001 f813 	bl	80168ec <dhcp_option_short>
 80158c6:	4603      	mov	r3, r0
 80158c8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80158ca:	89b8      	ldrh	r0, [r7, #12]
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80158d2:	2304      	movs	r3, #4
 80158d4:	2232      	movs	r2, #50	@ 0x32
 80158d6:	f000 ffaf 	bl	8016838 <dhcp_option>
 80158da:	4603      	mov	r3, r0
 80158dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80158de:	89bc      	ldrh	r4, [r7, #12]
 80158e0:	693b      	ldr	r3, [r7, #16]
 80158e2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	69db      	ldr	r3, [r3, #28]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7f7 fabe 	bl	800ce6c <lwip_htonl>
 80158f0:	4603      	mov	r3, r0
 80158f2:	461a      	mov	r2, r3
 80158f4:	4629      	mov	r1, r5
 80158f6:	4620      	mov	r0, r4
 80158f8:	f001 f82a 	bl	8016950 <dhcp_option_long>
 80158fc:	4603      	mov	r3, r0
 80158fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015900:	89b8      	ldrh	r0, [r7, #12]
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015908:	2304      	movs	r3, #4
 801590a:	2236      	movs	r2, #54	@ 0x36
 801590c:	f000 ff94 	bl	8016838 <dhcp_option>
 8015910:	4603      	mov	r3, r0
 8015912:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015914:	89bc      	ldrh	r4, [r7, #12]
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801591c:	69bb      	ldr	r3, [r7, #24]
 801591e:	699b      	ldr	r3, [r3, #24]
 8015920:	4618      	mov	r0, r3
 8015922:	f7f7 faa3 	bl	800ce6c <lwip_htonl>
 8015926:	4603      	mov	r3, r0
 8015928:	461a      	mov	r2, r3
 801592a:	4629      	mov	r1, r5
 801592c:	4620      	mov	r0, r4
 801592e:	f001 f80f 	bl	8016950 <dhcp_option_long>
 8015932:	4603      	mov	r3, r0
 8015934:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015936:	89b8      	ldrh	r0, [r7, #12]
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801593e:	2303      	movs	r3, #3
 8015940:	2237      	movs	r2, #55	@ 0x37
 8015942:	f000 ff79 	bl	8016838 <dhcp_option>
 8015946:	4603      	mov	r3, r0
 8015948:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801594a:	2300      	movs	r3, #0
 801594c:	77fb      	strb	r3, [r7, #31]
 801594e:	e00e      	b.n	801596e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015950:	89b8      	ldrh	r0, [r7, #12]
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015958:	7ffb      	ldrb	r3, [r7, #31]
 801595a:	4a30      	ldr	r2, [pc, #192]	@ (8015a1c <dhcp_select+0x1e4>)
 801595c:	5cd3      	ldrb	r3, [r2, r3]
 801595e:	461a      	mov	r2, r3
 8015960:	f000 ff9e 	bl	80168a0 <dhcp_option_byte>
 8015964:	4603      	mov	r3, r0
 8015966:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015968:	7ffb      	ldrb	r3, [r7, #31]
 801596a:	3301      	adds	r3, #1
 801596c:	77fb      	strb	r3, [r7, #31]
 801596e:	7ffb      	ldrb	r3, [r7, #31]
 8015970:	2b02      	cmp	r3, #2
 8015972:	d9ed      	bls.n	8015950 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015974:	89b8      	ldrh	r0, [r7, #12]
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	33f0      	adds	r3, #240	@ 0xf0
 801597a:	697a      	ldr	r2, [r7, #20]
 801597c:	4619      	mov	r1, r3
 801597e:	f001 fcaf 	bl	80172e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015982:	4b27      	ldr	r3, [pc, #156]	@ (8015a20 <dhcp_select+0x1e8>)
 8015984:	6818      	ldr	r0, [r3, #0]
 8015986:	4b27      	ldr	r3, [pc, #156]	@ (8015a24 <dhcp_select+0x1ec>)
 8015988:	9301      	str	r3, [sp, #4]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	2343      	movs	r3, #67	@ 0x43
 8015990:	4a25      	ldr	r2, [pc, #148]	@ (8015a28 <dhcp_select+0x1f0>)
 8015992:	6979      	ldr	r1, [r7, #20]
 8015994:	f7ff fbb4 	bl	8015100 <udp_sendto_if_src>
 8015998:	4603      	mov	r3, r0
 801599a:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801599c:	6978      	ldr	r0, [r7, #20]
 801599e:	f7f8 ff27 	bl	800e7f0 <pbuf_free>
 80159a2:	e001      	b.n	80159a8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80159a4:	23ff      	movs	r3, #255	@ 0xff
 80159a6:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	799b      	ldrb	r3, [r3, #6]
 80159ac:	2bff      	cmp	r3, #255	@ 0xff
 80159ae:	d005      	beq.n	80159bc <dhcp_select+0x184>
    dhcp->tries++;
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	799b      	ldrb	r3, [r3, #6]
 80159b4:	3301      	adds	r3, #1
 80159b6:	b2da      	uxtb	r2, r3
 80159b8:	69bb      	ldr	r3, [r7, #24]
 80159ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80159bc:	69bb      	ldr	r3, [r7, #24]
 80159be:	799b      	ldrb	r3, [r3, #6]
 80159c0:	2b05      	cmp	r3, #5
 80159c2:	d80d      	bhi.n	80159e0 <dhcp_select+0x1a8>
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	799b      	ldrb	r3, [r3, #6]
 80159c8:	461a      	mov	r2, r3
 80159ca:	2301      	movs	r3, #1
 80159cc:	4093      	lsls	r3, r2
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	461a      	mov	r2, r3
 80159d2:	0152      	lsls	r2, r2, #5
 80159d4:	1ad2      	subs	r2, r2, r3
 80159d6:	0092      	lsls	r2, r2, #2
 80159d8:	4413      	add	r3, r2
 80159da:	00db      	lsls	r3, r3, #3
 80159dc:	b29b      	uxth	r3, r3
 80159de:	e001      	b.n	80159e4 <dhcp_select+0x1ac>
 80159e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80159e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80159e6:	89fb      	ldrh	r3, [r7, #14]
 80159e8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80159ec:	4a0f      	ldr	r2, [pc, #60]	@ (8015a2c <dhcp_select+0x1f4>)
 80159ee:	fb82 1203 	smull	r1, r2, r2, r3
 80159f2:	1152      	asrs	r2, r2, #5
 80159f4:	17db      	asrs	r3, r3, #31
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80159fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3720      	adds	r7, #32
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bdb0      	pop	{r4, r5, r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	0801e5d4 	.word	0x0801e5d4
 8015a10:	0801e680 	.word	0x0801e680
 8015a14:	0801e634 	.word	0x0801e634
 8015a18:	0801e69c 	.word	0x0801e69c
 8015a1c:	20000028 	.word	0x20000028
 8015a20:	200176f8 	.word	0x200176f8
 8015a24:	08023034 	.word	0x08023034
 8015a28:	08023038 	.word	0x08023038
 8015a2c:	10624dd3 	.word	0x10624dd3

08015a30 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015a36:	4b27      	ldr	r3, [pc, #156]	@ (8015ad4 <dhcp_coarse_tmr+0xa4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	607b      	str	r3, [r7, #4]
 8015a3c:	e042      	b.n	8015ac4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a42:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d039      	beq.n	8015abe <dhcp_coarse_tmr+0x8e>
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	795b      	ldrb	r3, [r3, #5]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d035      	beq.n	8015abe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	8a9b      	ldrh	r3, [r3, #20]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d012      	beq.n	8015a80 <dhcp_coarse_tmr+0x50>
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	8a5b      	ldrh	r3, [r3, #18]
 8015a5e:	3301      	adds	r3, #1
 8015a60:	b29a      	uxth	r2, r3
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	825a      	strh	r2, [r3, #18]
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	8a5a      	ldrh	r2, [r3, #18]
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	8a9b      	ldrh	r3, [r3, #20]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d106      	bne.n	8015a80 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f000 fe2c 	bl	80166d0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 f969 	bl	8015d50 <dhcp_start>
 8015a7e:	e01e      	b.n	8015abe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	8a1b      	ldrh	r3, [r3, #16]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d00b      	beq.n	8015aa0 <dhcp_coarse_tmr+0x70>
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	8a1b      	ldrh	r3, [r3, #16]
 8015a8c:	1e5a      	subs	r2, r3, #1
 8015a8e:	b291      	uxth	r1, r2
 8015a90:	683a      	ldr	r2, [r7, #0]
 8015a92:	8211      	strh	r1, [r2, #16]
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	d103      	bne.n	8015aa0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 f8c6 	bl	8015c2a <dhcp_t2_timeout>
 8015a9e:	e00e      	b.n	8015abe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	89db      	ldrh	r3, [r3, #14]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d00a      	beq.n	8015abe <dhcp_coarse_tmr+0x8e>
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	89db      	ldrh	r3, [r3, #14]
 8015aac:	1e5a      	subs	r2, r3, #1
 8015aae:	b291      	uxth	r1, r2
 8015ab0:	683a      	ldr	r2, [r7, #0]
 8015ab2:	81d1      	strh	r1, [r2, #14]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	d102      	bne.n	8015abe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f000 f888 	bl	8015bce <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	607b      	str	r3, [r7, #4]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1b9      	bne.n	8015a3e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015aca:	bf00      	nop
 8015acc:	bf00      	nop
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	20017660 	.word	0x20017660

08015ad8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015ade:	4b16      	ldr	r3, [pc, #88]	@ (8015b38 <dhcp_fine_tmr+0x60>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	607b      	str	r3, [r7, #4]
 8015ae4:	e020      	b.n	8015b28 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aea:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d017      	beq.n	8015b22 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	891b      	ldrh	r3, [r3, #8]
 8015af6:	2b01      	cmp	r3, #1
 8015af8:	d906      	bls.n	8015b08 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	891b      	ldrh	r3, [r3, #8]
 8015afe:	3b01      	subs	r3, #1
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	811a      	strh	r2, [r3, #8]
 8015b06:	e00c      	b.n	8015b22 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	891b      	ldrh	r3, [r3, #8]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d108      	bne.n	8015b22 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	891b      	ldrh	r3, [r3, #8]
 8015b14:	3b01      	subs	r3, #1
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 f80d 	bl	8015b3c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	607b      	str	r3, [r7, #4]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d1db      	bne.n	8015ae6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015b2e:	bf00      	nop
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	20017660 	.word	0x20017660

08015b3c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b48:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	795b      	ldrb	r3, [r3, #5]
 8015b4e:	2b0c      	cmp	r3, #12
 8015b50:	d003      	beq.n	8015b5a <dhcp_timeout+0x1e>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	795b      	ldrb	r3, [r3, #5]
 8015b56:	2b06      	cmp	r3, #6
 8015b58:	d103      	bne.n	8015b62 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 fa54 	bl	8016008 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015b60:	e031      	b.n	8015bc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	795b      	ldrb	r3, [r3, #5]
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d10e      	bne.n	8015b88 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	799b      	ldrb	r3, [r3, #6]
 8015b6e:	2b05      	cmp	r3, #5
 8015b70:	d803      	bhi.n	8015b7a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f7ff fe60 	bl	8015838 <dhcp_select>
}
 8015b78:	e025      	b.n	8015bc6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f000 fda8 	bl	80166d0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f000 f8e5 	bl	8015d50 <dhcp_start>
}
 8015b86:	e01e      	b.n	8015bc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	795b      	ldrb	r3, [r3, #5]
 8015b8c:	2b08      	cmp	r3, #8
 8015b8e:	d10b      	bne.n	8015ba8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	799b      	ldrb	r3, [r3, #6]
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d803      	bhi.n	8015ba0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f7ff fdf3 	bl	8015784 <dhcp_check>
}
 8015b9e:	e012      	b.n	8015bc6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f000 fad3 	bl	801614c <dhcp_bind>
}
 8015ba6:	e00e      	b.n	8015bc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	795b      	ldrb	r3, [r3, #5]
 8015bac:	2b03      	cmp	r3, #3
 8015bae:	d10a      	bne.n	8015bc6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	799b      	ldrb	r3, [r3, #6]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d803      	bhi.n	8015bc0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f000 fcd5 	bl	8016568 <dhcp_reboot>
}
 8015bbe:	e002      	b.n	8015bc6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fa21 	bl	8016008 <dhcp_discover>
}
 8015bc6:	bf00      	nop
 8015bc8:	3710      	adds	r7, #16
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}

08015bce <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015bce:	b580      	push	{r7, lr}
 8015bd0:	b084      	sub	sp, #16
 8015bd2:	af00      	add	r7, sp, #0
 8015bd4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bda:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	795b      	ldrb	r3, [r3, #5]
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d007      	beq.n	8015bf4 <dhcp_t1_timeout+0x26>
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	795b      	ldrb	r3, [r3, #5]
 8015be8:	2b0a      	cmp	r3, #10
 8015bea:	d003      	beq.n	8015bf4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015bf0:	2b05      	cmp	r3, #5
 8015bf2:	d116      	bne.n	8015c22 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f000 fb83 	bl	8016300 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	899b      	ldrh	r3, [r3, #12]
 8015bfe:	461a      	mov	r2, r3
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	8a5b      	ldrh	r3, [r3, #18]
 8015c04:	1ad3      	subs	r3, r2, r3
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	dd0b      	ble.n	8015c22 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	899b      	ldrh	r3, [r3, #12]
 8015c0e:	461a      	mov	r2, r3
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	8a5b      	ldrh	r3, [r3, #18]
 8015c14:	1ad3      	subs	r3, r2, r3
 8015c16:	0fda      	lsrs	r2, r3, #31
 8015c18:	4413      	add	r3, r2
 8015c1a:	105b      	asrs	r3, r3, #1
 8015c1c:	b29a      	uxth	r2, r3
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015c22:	bf00      	nop
 8015c24:	3710      	adds	r7, #16
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b084      	sub	sp, #16
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	795b      	ldrb	r3, [r3, #5]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d00b      	beq.n	8015c58 <dhcp_t2_timeout+0x2e>
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	795b      	ldrb	r3, [r3, #5]
 8015c44:	2b0a      	cmp	r3, #10
 8015c46:	d007      	beq.n	8015c58 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015c4c:	2b05      	cmp	r3, #5
 8015c4e:	d003      	beq.n	8015c58 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	795b      	ldrb	r3, [r3, #5]
 8015c54:	2b04      	cmp	r3, #4
 8015c56:	d116      	bne.n	8015c86 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 fbeb 	bl	8016434 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	8a9b      	ldrh	r3, [r3, #20]
 8015c62:	461a      	mov	r2, r3
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	8a5b      	ldrh	r3, [r3, #18]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	dd0b      	ble.n	8015c86 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	8a9b      	ldrh	r3, [r3, #20]
 8015c72:	461a      	mov	r2, r3
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	8a5b      	ldrh	r3, [r3, #18]
 8015c78:	1ad3      	subs	r3, r2, r3
 8015c7a:	0fda      	lsrs	r2, r3, #31
 8015c7c:	4413      	add	r3, r2
 8015c7e:	105b      	asrs	r3, r3, #1
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015c86:	bf00      	nop
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
	...

08015c90 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c9e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015cac:	4b26      	ldr	r3, [pc, #152]	@ (8015d48 <dhcp_handle_ack+0xb8>)
 8015cae:	78db      	ldrb	r3, [r3, #3]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d003      	beq.n	8015cbc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015cb4:	4b25      	ldr	r3, [pc, #148]	@ (8015d4c <dhcp_handle_ack+0xbc>)
 8015cb6:	68da      	ldr	r2, [r3, #12]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015cbc:	4b22      	ldr	r3, [pc, #136]	@ (8015d48 <dhcp_handle_ack+0xb8>)
 8015cbe:	791b      	ldrb	r3, [r3, #4]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d004      	beq.n	8015cce <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015cc4:	4b21      	ldr	r3, [pc, #132]	@ (8015d4c <dhcp_handle_ack+0xbc>)
 8015cc6:	691a      	ldr	r2, [r3, #16]
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015ccc:	e004      	b.n	8015cd8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cd2:	085a      	lsrs	r2, r3, #1
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8015d48 <dhcp_handle_ack+0xb8>)
 8015cda:	795b      	ldrb	r3, [r3, #5]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d004      	beq.n	8015cea <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8015d4c <dhcp_handle_ack+0xbc>)
 8015ce2:	695a      	ldr	r2, [r3, #20]
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8015ce8:	e007      	b.n	8015cfa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015cee:	4613      	mov	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	1a9b      	subs	r3, r3, r2
 8015cf4:	08da      	lsrs	r2, r3, #3
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	691a      	ldr	r2, [r3, #16]
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015d02:	4b11      	ldr	r3, [pc, #68]	@ (8015d48 <dhcp_handle_ack+0xb8>)
 8015d04:	799b      	ldrb	r3, [r3, #6]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00b      	beq.n	8015d22 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015d0a:	4b10      	ldr	r3, [pc, #64]	@ (8015d4c <dhcp_handle_ack+0xbc>)
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7f7 f8ac 	bl	800ce6c <lwip_htonl>
 8015d14:	4602      	mov	r2, r0
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	71da      	strb	r2, [r3, #7]
 8015d20:	e002      	b.n	8015d28 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	2200      	movs	r2, #0
 8015d26:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015d28:	4b07      	ldr	r3, [pc, #28]	@ (8015d48 <dhcp_handle_ack+0xb8>)
 8015d2a:	79db      	ldrb	r3, [r3, #7]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d007      	beq.n	8015d40 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015d30:	4b06      	ldr	r3, [pc, #24]	@ (8015d4c <dhcp_handle_ack+0xbc>)
 8015d32:	69db      	ldr	r3, [r3, #28]
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7f7 f899 	bl	800ce6c <lwip_htonl>
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015d40:	bf00      	nop
 8015d42:	3710      	adds	r7, #16
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}
 8015d48:	200176f0 	.word	0x200176f0
 8015d4c:	200176d0 	.word	0x200176d0

08015d50 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d109      	bne.n	8015d72 <dhcp_start+0x22>
 8015d5e:	4b37      	ldr	r3, [pc, #220]	@ (8015e3c <dhcp_start+0xec>)
 8015d60:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8015d64:	4936      	ldr	r1, [pc, #216]	@ (8015e40 <dhcp_start+0xf0>)
 8015d66:	4837      	ldr	r0, [pc, #220]	@ (8015e44 <dhcp_start+0xf4>)
 8015d68:	f004 f9d4 	bl	801a114 <iprintf>
 8015d6c:	f06f 030f 	mvn.w	r3, #15
 8015d70:	e060      	b.n	8015e34 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015d78:	f003 0301 	and.w	r3, r3, #1
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d109      	bne.n	8015d94 <dhcp_start+0x44>
 8015d80:	4b2e      	ldr	r3, [pc, #184]	@ (8015e3c <dhcp_start+0xec>)
 8015d82:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8015d86:	4930      	ldr	r1, [pc, #192]	@ (8015e48 <dhcp_start+0xf8>)
 8015d88:	482e      	ldr	r0, [pc, #184]	@ (8015e44 <dhcp_start+0xf4>)
 8015d8a:	f004 f9c3 	bl	801a114 <iprintf>
 8015d8e:	f06f 030f 	mvn.w	r3, #15
 8015d92:	e04f      	b.n	8015e34 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d98:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d9e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8015da2:	d202      	bcs.n	8015daa <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015da4:	f04f 33ff 	mov.w	r3, #4294967295
 8015da8:	e044      	b.n	8015e34 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d10d      	bne.n	8015dcc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015db0:	2034      	movs	r0, #52	@ 0x34
 8015db2:	f7f7 fcf3 	bl	800d79c <mem_malloc>
 8015db6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d102      	bne.n	8015dc4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc2:	e037      	b.n	8015e34 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8015dca:	e005      	b.n	8015dd8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	791b      	ldrb	r3, [r3, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d001      	beq.n	8015dd8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015dd4:	f7ff fc92 	bl	80156fc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015dd8:	2234      	movs	r2, #52	@ 0x34
 8015dda:	2100      	movs	r1, #0
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f004 fb63 	bl	801a4a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015de2:	f7ff fc39 	bl	8015658 <dhcp_inc_pcb_refcount>
 8015de6:	4603      	mov	r3, r0
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d002      	beq.n	8015df2 <dhcp_start+0xa2>
    return ERR_MEM;
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	e020      	b.n	8015e34 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2201      	movs	r2, #1
 8015df6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015dfe:	f003 0304 	and.w	r3, r3, #4
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d105      	bne.n	8015e12 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015e06:	2102      	movs	r1, #2
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f000 fcfb 	bl	8016804 <dhcp_set_state>
    return ERR_OK;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	e010      	b.n	8015e34 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 f8f8 	bl	8016008 <dhcp_discover>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015e1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d005      	beq.n	8015e30 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f000 fc53 	bl	80166d0 <dhcp_release_and_stop>
    return ERR_MEM;
 8015e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e2e:	e001      	b.n	8015e34 <dhcp_start+0xe4>
  }
  return result;
 8015e30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	0801e5d4 	.word	0x0801e5d4
 8015e40:	0801e6b8 	.word	0x0801e6b8
 8015e44:	0801e634 	.word	0x0801e634
 8015e48:	0801e6fc 	.word	0x0801e6fc

08015e4c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e58:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d025      	beq.n	8015eac <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	795b      	ldrb	r3, [r3, #5]
 8015e64:	2b0a      	cmp	r3, #10
 8015e66:	d008      	beq.n	8015e7a <dhcp_network_changed+0x2e>
 8015e68:	2b0a      	cmp	r3, #10
 8015e6a:	dc0d      	bgt.n	8015e88 <dhcp_network_changed+0x3c>
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d01f      	beq.n	8015eb0 <dhcp_network_changed+0x64>
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	db09      	blt.n	8015e88 <dhcp_network_changed+0x3c>
 8015e74:	3b03      	subs	r3, #3
 8015e76:	2b02      	cmp	r3, #2
 8015e78:	d806      	bhi.n	8015e88 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f000 fb71 	bl	8016568 <dhcp_reboot>
      break;
 8015e86:	e014      	b.n	8015eb2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	795b      	ldrb	r3, [r3, #5]
 8015e8c:	2b0c      	cmp	r3, #12
 8015e8e:	d906      	bls.n	8015e9e <dhcp_network_changed+0x52>
 8015e90:	4b09      	ldr	r3, [pc, #36]	@ (8015eb8 <dhcp_network_changed+0x6c>)
 8015e92:	f240 326d 	movw	r2, #877	@ 0x36d
 8015e96:	4909      	ldr	r1, [pc, #36]	@ (8015ebc <dhcp_network_changed+0x70>)
 8015e98:	4809      	ldr	r0, [pc, #36]	@ (8015ec0 <dhcp_network_changed+0x74>)
 8015e9a:	f004 f93b 	bl	801a114 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f000 f8af 	bl	8016008 <dhcp_discover>
      break;
 8015eaa:	e002      	b.n	8015eb2 <dhcp_network_changed+0x66>
    return;
 8015eac:	bf00      	nop
 8015eae:	e000      	b.n	8015eb2 <dhcp_network_changed+0x66>
      break;
 8015eb0:	bf00      	nop
  }
}
 8015eb2:	3710      	adds	r7, #16
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}
 8015eb8:	0801e5d4 	.word	0x0801e5d4
 8015ebc:	0801e720 	.word	0x0801e720
 8015ec0:	0801e634 	.word	0x0801e634

08015ec4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d107      	bne.n	8015ee4 <dhcp_arp_reply+0x20>
 8015ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8015f10 <dhcp_arp_reply+0x4c>)
 8015ed6:	f240 328b 	movw	r2, #907	@ 0x38b
 8015eda:	490e      	ldr	r1, [pc, #56]	@ (8015f14 <dhcp_arp_reply+0x50>)
 8015edc:	480e      	ldr	r0, [pc, #56]	@ (8015f18 <dhcp_arp_reply+0x54>)
 8015ede:	f004 f919 	bl	801a114 <iprintf>
 8015ee2:	e012      	b.n	8015f0a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ee8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00c      	beq.n	8015f0a <dhcp_arp_reply+0x46>
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	795b      	ldrb	r3, [r3, #5]
 8015ef4:	2b08      	cmp	r3, #8
 8015ef6:	d108      	bne.n	8015f0a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	69db      	ldr	r3, [r3, #28]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d102      	bne.n	8015f0a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f000 f809 	bl	8015f1c <dhcp_decline>
    }
  }
}
 8015f0a:	3710      	adds	r7, #16
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	0801e5d4 	.word	0x0801e5d4
 8015f14:	0801e6b8 	.word	0x0801e6b8
 8015f18:	0801e634 	.word	0x0801e634

08015f1c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015f1c:	b5b0      	push	{r4, r5, r7, lr}
 8015f1e:	b08a      	sub	sp, #40	@ 0x28
 8015f20:	af02      	add	r7, sp, #8
 8015f22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f28:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015f2a:	210c      	movs	r1, #12
 8015f2c:	69b8      	ldr	r0, [r7, #24]
 8015f2e:	f000 fc69 	bl	8016804 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015f32:	f107 030c 	add.w	r3, r7, #12
 8015f36:	2204      	movs	r2, #4
 8015f38:	69b9      	ldr	r1, [r7, #24]
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f001 f8fa 	bl	8017134 <dhcp_create_msg>
 8015f40:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d035      	beq.n	8015fb4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015f4e:	89b8      	ldrh	r0, [r7, #12]
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015f56:	2304      	movs	r3, #4
 8015f58:	2232      	movs	r2, #50	@ 0x32
 8015f5a:	f000 fc6d 	bl	8016838 <dhcp_option>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015f62:	89bc      	ldrh	r4, [r7, #12]
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	69db      	ldr	r3, [r3, #28]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7f6 ff7c 	bl	800ce6c <lwip_htonl>
 8015f74:	4603      	mov	r3, r0
 8015f76:	461a      	mov	r2, r3
 8015f78:	4629      	mov	r1, r5
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f000 fce8 	bl	8016950 <dhcp_option_long>
 8015f80:	4603      	mov	r3, r0
 8015f82:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f84:	89b8      	ldrh	r0, [r7, #12]
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	33f0      	adds	r3, #240	@ 0xf0
 8015f8a:	697a      	ldr	r2, [r7, #20]
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	f001 f9a7 	bl	80172e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015f92:	4b19      	ldr	r3, [pc, #100]	@ (8015ff8 <dhcp_decline+0xdc>)
 8015f94:	6818      	ldr	r0, [r3, #0]
 8015f96:	4b19      	ldr	r3, [pc, #100]	@ (8015ffc <dhcp_decline+0xe0>)
 8015f98:	9301      	str	r3, [sp, #4]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	2343      	movs	r3, #67	@ 0x43
 8015fa0:	4a17      	ldr	r2, [pc, #92]	@ (8016000 <dhcp_decline+0xe4>)
 8015fa2:	6979      	ldr	r1, [r7, #20]
 8015fa4:	f7ff f8ac 	bl	8015100 <udp_sendto_if_src>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015fac:	6978      	ldr	r0, [r7, #20]
 8015fae:	f7f8 fc1f 	bl	800e7f0 <pbuf_free>
 8015fb2:	e001      	b.n	8015fb8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015fb4:	23ff      	movs	r3, #255	@ 0xff
 8015fb6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	799b      	ldrb	r3, [r3, #6]
 8015fbc:	2bff      	cmp	r3, #255	@ 0xff
 8015fbe:	d005      	beq.n	8015fcc <dhcp_decline+0xb0>
    dhcp->tries++;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	799b      	ldrb	r3, [r3, #6]
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	b2da      	uxtb	r2, r3
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015fcc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015fd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015fd2:	89fb      	ldrh	r3, [r7, #14]
 8015fd4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8016004 <dhcp_decline+0xe8>)
 8015fda:	fb82 1203 	smull	r1, r2, r2, r3
 8015fde:	1152      	asrs	r2, r2, #5
 8015fe0:	17db      	asrs	r3, r3, #31
 8015fe2:	1ad3      	subs	r3, r2, r3
 8015fe4:	b29a      	uxth	r2, r3
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015fea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3720      	adds	r7, #32
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	200176f8 	.word	0x200176f8
 8015ffc:	08023034 	.word	0x08023034
 8016000:	08023038 	.word	0x08023038
 8016004:	10624dd3 	.word	0x10624dd3

08016008 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b08a      	sub	sp, #40	@ 0x28
 801600c:	af02      	add	r7, sp, #8
 801600e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016014:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016016:	2300      	movs	r3, #0
 8016018:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	2200      	movs	r2, #0
 801601e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016020:	2106      	movs	r1, #6
 8016022:	69b8      	ldr	r0, [r7, #24]
 8016024:	f000 fbee 	bl	8016804 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016028:	f107 0308 	add.w	r3, r7, #8
 801602c:	2201      	movs	r2, #1
 801602e:	69b9      	ldr	r1, [r7, #24]
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f001 f87f 	bl	8017134 <dhcp_create_msg>
 8016036:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d04b      	beq.n	80160d6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016044:	8938      	ldrh	r0, [r7, #8]
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801604c:	2302      	movs	r3, #2
 801604e:	2239      	movs	r2, #57	@ 0x39
 8016050:	f000 fbf2 	bl	8016838 <dhcp_option>
 8016054:	4603      	mov	r3, r0
 8016056:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016058:	8938      	ldrh	r0, [r7, #8]
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016064:	461a      	mov	r2, r3
 8016066:	f000 fc41 	bl	80168ec <dhcp_option_short>
 801606a:	4603      	mov	r3, r0
 801606c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801606e:	8938      	ldrh	r0, [r7, #8]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016076:	2303      	movs	r3, #3
 8016078:	2237      	movs	r2, #55	@ 0x37
 801607a:	f000 fbdd 	bl	8016838 <dhcp_option>
 801607e:	4603      	mov	r3, r0
 8016080:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016082:	2300      	movs	r3, #0
 8016084:	77fb      	strb	r3, [r7, #31]
 8016086:	e00e      	b.n	80160a6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016088:	8938      	ldrh	r0, [r7, #8]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016090:	7ffb      	ldrb	r3, [r7, #31]
 8016092:	4a29      	ldr	r2, [pc, #164]	@ (8016138 <dhcp_discover+0x130>)
 8016094:	5cd3      	ldrb	r3, [r2, r3]
 8016096:	461a      	mov	r2, r3
 8016098:	f000 fc02 	bl	80168a0 <dhcp_option_byte>
 801609c:	4603      	mov	r3, r0
 801609e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80160a0:	7ffb      	ldrb	r3, [r7, #31]
 80160a2:	3301      	adds	r3, #1
 80160a4:	77fb      	strb	r3, [r7, #31]
 80160a6:	7ffb      	ldrb	r3, [r7, #31]
 80160a8:	2b02      	cmp	r3, #2
 80160aa:	d9ed      	bls.n	8016088 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80160ac:	8938      	ldrh	r0, [r7, #8]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	33f0      	adds	r3, #240	@ 0xf0
 80160b2:	693a      	ldr	r2, [r7, #16]
 80160b4:	4619      	mov	r1, r3
 80160b6:	f001 f913 	bl	80172e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80160ba:	4b20      	ldr	r3, [pc, #128]	@ (801613c <dhcp_discover+0x134>)
 80160bc:	6818      	ldr	r0, [r3, #0]
 80160be:	4b20      	ldr	r3, [pc, #128]	@ (8016140 <dhcp_discover+0x138>)
 80160c0:	9301      	str	r3, [sp, #4]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	2343      	movs	r3, #67	@ 0x43
 80160c8:	4a1e      	ldr	r2, [pc, #120]	@ (8016144 <dhcp_discover+0x13c>)
 80160ca:	6939      	ldr	r1, [r7, #16]
 80160cc:	f7ff f818 	bl	8015100 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80160d0:	6938      	ldr	r0, [r7, #16]
 80160d2:	f7f8 fb8d 	bl	800e7f0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	799b      	ldrb	r3, [r3, #6]
 80160da:	2bff      	cmp	r3, #255	@ 0xff
 80160dc:	d005      	beq.n	80160ea <dhcp_discover+0xe2>
    dhcp->tries++;
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	799b      	ldrb	r3, [r3, #6]
 80160e2:	3301      	adds	r3, #1
 80160e4:	b2da      	uxtb	r2, r3
 80160e6:	69bb      	ldr	r3, [r7, #24]
 80160e8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	799b      	ldrb	r3, [r3, #6]
 80160ee:	2b05      	cmp	r3, #5
 80160f0:	d80d      	bhi.n	801610e <dhcp_discover+0x106>
 80160f2:	69bb      	ldr	r3, [r7, #24]
 80160f4:	799b      	ldrb	r3, [r3, #6]
 80160f6:	461a      	mov	r2, r3
 80160f8:	2301      	movs	r3, #1
 80160fa:	4093      	lsls	r3, r2
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	461a      	mov	r2, r3
 8016100:	0152      	lsls	r2, r2, #5
 8016102:	1ad2      	subs	r2, r2, r3
 8016104:	0092      	lsls	r2, r2, #2
 8016106:	4413      	add	r3, r2
 8016108:	00db      	lsls	r3, r3, #3
 801610a:	b29b      	uxth	r3, r3
 801610c:	e001      	b.n	8016112 <dhcp_discover+0x10a>
 801610e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8016112:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016114:	897b      	ldrh	r3, [r7, #10]
 8016116:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801611a:	4a0b      	ldr	r2, [pc, #44]	@ (8016148 <dhcp_discover+0x140>)
 801611c:	fb82 1203 	smull	r1, r2, r2, r3
 8016120:	1152      	asrs	r2, r2, #5
 8016122:	17db      	asrs	r3, r3, #31
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	b29a      	uxth	r2, r3
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801612c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3720      	adds	r7, #32
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	20000028 	.word	0x20000028
 801613c:	200176f8 	.word	0x200176f8
 8016140:	08023034 	.word	0x08023034
 8016144:	08023038 	.word	0x08023038
 8016148:	10624dd3 	.word	0x10624dd3

0801614c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b088      	sub	sp, #32
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d107      	bne.n	801616a <dhcp_bind+0x1e>
 801615a:	4b64      	ldr	r3, [pc, #400]	@ (80162ec <dhcp_bind+0x1a0>)
 801615c:	f240 4215 	movw	r2, #1045	@ 0x415
 8016160:	4963      	ldr	r1, [pc, #396]	@ (80162f0 <dhcp_bind+0x1a4>)
 8016162:	4864      	ldr	r0, [pc, #400]	@ (80162f4 <dhcp_bind+0x1a8>)
 8016164:	f003 ffd6 	bl	801a114 <iprintf>
 8016168:	e0bc      	b.n	80162e4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d107      	bne.n	8016186 <dhcp_bind+0x3a>
 8016176:	4b5d      	ldr	r3, [pc, #372]	@ (80162ec <dhcp_bind+0x1a0>)
 8016178:	f240 4217 	movw	r2, #1047	@ 0x417
 801617c:	495e      	ldr	r1, [pc, #376]	@ (80162f8 <dhcp_bind+0x1ac>)
 801617e:	485d      	ldr	r0, [pc, #372]	@ (80162f4 <dhcp_bind+0x1a8>)
 8016180:	f003 ffc8 	bl	801a114 <iprintf>
 8016184:	e0ae      	b.n	80162e4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016186:	69fb      	ldr	r3, [r7, #28]
 8016188:	2200      	movs	r2, #0
 801618a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016194:	d019      	beq.n	80161ca <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016196:	69fb      	ldr	r3, [r7, #28]
 8016198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801619a:	331e      	adds	r3, #30
 801619c:	4a57      	ldr	r2, [pc, #348]	@ (80162fc <dhcp_bind+0x1b0>)
 801619e:	fba2 2303 	umull	r2, r3, r2, r3
 80161a2:	095b      	lsrs	r3, r3, #5
 80161a4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80161a6:	69bb      	ldr	r3, [r7, #24]
 80161a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161ac:	d302      	bcc.n	80161b4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80161ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161b2:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	8a9b      	ldrh	r3, [r3, #20]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d102      	bne.n	80161ca <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	2201      	movs	r2, #1
 80161c8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161d2:	d01d      	beq.n	8016210 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80161d4:	69fb      	ldr	r3, [r7, #28]
 80161d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d8:	331e      	adds	r3, #30
 80161da:	4a48      	ldr	r2, [pc, #288]	@ (80162fc <dhcp_bind+0x1b0>)
 80161dc:	fba2 2303 	umull	r2, r3, r2, r3
 80161e0:	095b      	lsrs	r3, r3, #5
 80161e2:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80161e4:	69bb      	ldr	r3, [r7, #24]
 80161e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161ea:	d302      	bcc.n	80161f2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80161ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161f0:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80161f2:	69bb      	ldr	r3, [r7, #24]
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	69fb      	ldr	r3, [r7, #28]
 80161f8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	895b      	ldrh	r3, [r3, #10]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d102      	bne.n	8016208 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	2201      	movs	r2, #1
 8016206:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	895a      	ldrh	r2, [r3, #10]
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016218:	d01d      	beq.n	8016256 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801621a:	69fb      	ldr	r3, [r7, #28]
 801621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801621e:	331e      	adds	r3, #30
 8016220:	4a36      	ldr	r2, [pc, #216]	@ (80162fc <dhcp_bind+0x1b0>)
 8016222:	fba2 2303 	umull	r2, r3, r2, r3
 8016226:	095b      	lsrs	r3, r3, #5
 8016228:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801622a:	69bb      	ldr	r3, [r7, #24]
 801622c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016230:	d302      	bcc.n	8016238 <dhcp_bind+0xec>
      timeout = 0xffff;
 8016232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016236:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	b29a      	uxth	r2, r3
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016240:	69fb      	ldr	r3, [r7, #28]
 8016242:	899b      	ldrh	r3, [r3, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d102      	bne.n	801624e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016248:	69fb      	ldr	r3, [r7, #28]
 801624a:	2201      	movs	r2, #1
 801624c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	899a      	ldrh	r2, [r3, #12]
 8016252:	69fb      	ldr	r3, [r7, #28]
 8016254:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	895a      	ldrh	r2, [r3, #10]
 801625a:	69fb      	ldr	r3, [r7, #28]
 801625c:	899b      	ldrh	r3, [r3, #12]
 801625e:	429a      	cmp	r2, r3
 8016260:	d306      	bcc.n	8016270 <dhcp_bind+0x124>
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	899b      	ldrh	r3, [r3, #12]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d002      	beq.n	8016270 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801626a:	69fb      	ldr	r3, [r7, #28]
 801626c:	2200      	movs	r2, #0
 801626e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	79db      	ldrb	r3, [r3, #7]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d003      	beq.n	8016280 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	6a1b      	ldr	r3, [r3, #32]
 801627c:	613b      	str	r3, [r7, #16]
 801627e:	e014      	b.n	80162aa <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016280:	69fb      	ldr	r3, [r7, #28]
 8016282:	331c      	adds	r3, #28
 8016284:	781b      	ldrb	r3, [r3, #0]
 8016286:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801628c:	2b00      	cmp	r3, #0
 801628e:	db02      	blt.n	8016296 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016290:	23ff      	movs	r3, #255	@ 0xff
 8016292:	613b      	str	r3, [r7, #16]
 8016294:	e009      	b.n	80162aa <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8016296:	7dfb      	ldrb	r3, [r7, #23]
 8016298:	2bbf      	cmp	r3, #191	@ 0xbf
 801629a:	d903      	bls.n	80162a4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801629c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80162a0:	613b      	str	r3, [r7, #16]
 80162a2:	e002      	b.n	80162aa <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80162a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80162a8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162ae:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d108      	bne.n	80162c8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	69da      	ldr	r2, [r3, #28]
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	4013      	ands	r3, r2
 80162be:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80162c6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80162c8:	210a      	movs	r1, #10
 80162ca:	69f8      	ldr	r0, [r7, #28]
 80162cc:	f000 fa9a 	bl	8016804 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	f103 011c 	add.w	r1, r3, #28
 80162d6:	f107 030c 	add.w	r3, r7, #12
 80162da:	f107 0210 	add.w	r2, r7, #16
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f7f7 fdd2 	bl	800de88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80162e4:	3720      	adds	r7, #32
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	0801e5d4 	.word	0x0801e5d4
 80162f0:	0801e734 	.word	0x0801e734
 80162f4:	0801e634 	.word	0x0801e634
 80162f8:	0801e750 	.word	0x0801e750
 80162fc:	88888889 	.word	0x88888889

08016300 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08a      	sub	sp, #40	@ 0x28
 8016304:	af02      	add	r7, sp, #8
 8016306:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801630c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801630e:	2105      	movs	r1, #5
 8016310:	69b8      	ldr	r0, [r7, #24]
 8016312:	f000 fa77 	bl	8016804 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016316:	f107 030c 	add.w	r3, r7, #12
 801631a:	2203      	movs	r2, #3
 801631c:	69b9      	ldr	r1, [r7, #24]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 ff08 	bl	8017134 <dhcp_create_msg>
 8016324:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d04e      	beq.n	80163ca <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016332:	89b8      	ldrh	r0, [r7, #12]
 8016334:	693b      	ldr	r3, [r7, #16]
 8016336:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801633a:	2302      	movs	r3, #2
 801633c:	2239      	movs	r2, #57	@ 0x39
 801633e:	f000 fa7b 	bl	8016838 <dhcp_option>
 8016342:	4603      	mov	r3, r0
 8016344:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016346:	89b8      	ldrh	r0, [r7, #12]
 8016348:	693b      	ldr	r3, [r7, #16]
 801634a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016352:	461a      	mov	r2, r3
 8016354:	f000 faca 	bl	80168ec <dhcp_option_short>
 8016358:	4603      	mov	r3, r0
 801635a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801635c:	89b8      	ldrh	r0, [r7, #12]
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016364:	2303      	movs	r3, #3
 8016366:	2237      	movs	r2, #55	@ 0x37
 8016368:	f000 fa66 	bl	8016838 <dhcp_option>
 801636c:	4603      	mov	r3, r0
 801636e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016370:	2300      	movs	r3, #0
 8016372:	77bb      	strb	r3, [r7, #30]
 8016374:	e00e      	b.n	8016394 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016376:	89b8      	ldrh	r0, [r7, #12]
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801637e:	7fbb      	ldrb	r3, [r7, #30]
 8016380:	4a29      	ldr	r2, [pc, #164]	@ (8016428 <dhcp_renew+0x128>)
 8016382:	5cd3      	ldrb	r3, [r2, r3]
 8016384:	461a      	mov	r2, r3
 8016386:	f000 fa8b 	bl	80168a0 <dhcp_option_byte>
 801638a:	4603      	mov	r3, r0
 801638c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801638e:	7fbb      	ldrb	r3, [r7, #30]
 8016390:	3301      	adds	r3, #1
 8016392:	77bb      	strb	r3, [r7, #30]
 8016394:	7fbb      	ldrb	r3, [r7, #30]
 8016396:	2b02      	cmp	r3, #2
 8016398:	d9ed      	bls.n	8016376 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801639a:	89b8      	ldrh	r0, [r7, #12]
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	33f0      	adds	r3, #240	@ 0xf0
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	4619      	mov	r1, r3
 80163a4:	f000 ff9c 	bl	80172e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80163a8:	4b20      	ldr	r3, [pc, #128]	@ (801642c <dhcp_renew+0x12c>)
 80163aa:	6818      	ldr	r0, [r3, #0]
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	f103 0218 	add.w	r2, r3, #24
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	2343      	movs	r3, #67	@ 0x43
 80163b8:	6979      	ldr	r1, [r7, #20]
 80163ba:	f7fe fe2d 	bl	8015018 <udp_sendto_if>
 80163be:	4603      	mov	r3, r0
 80163c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80163c2:	6978      	ldr	r0, [r7, #20]
 80163c4:	f7f8 fa14 	bl	800e7f0 <pbuf_free>
 80163c8:	e001      	b.n	80163ce <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80163ca:	23ff      	movs	r3, #255	@ 0xff
 80163cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	799b      	ldrb	r3, [r3, #6]
 80163d2:	2bff      	cmp	r3, #255	@ 0xff
 80163d4:	d005      	beq.n	80163e2 <dhcp_renew+0xe2>
    dhcp->tries++;
 80163d6:	69bb      	ldr	r3, [r7, #24]
 80163d8:	799b      	ldrb	r3, [r3, #6]
 80163da:	3301      	adds	r3, #1
 80163dc:	b2da      	uxtb	r2, r3
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80163e2:	69bb      	ldr	r3, [r7, #24]
 80163e4:	799b      	ldrb	r3, [r3, #6]
 80163e6:	2b09      	cmp	r3, #9
 80163e8:	d809      	bhi.n	80163fe <dhcp_renew+0xfe>
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	799b      	ldrb	r3, [r3, #6]
 80163ee:	461a      	mov	r2, r3
 80163f0:	0152      	lsls	r2, r2, #5
 80163f2:	1ad2      	subs	r2, r2, r3
 80163f4:	0092      	lsls	r2, r2, #2
 80163f6:	4413      	add	r3, r2
 80163f8:	011b      	lsls	r3, r3, #4
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	e001      	b.n	8016402 <dhcp_renew+0x102>
 80163fe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8016402:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016404:	89fb      	ldrh	r3, [r7, #14]
 8016406:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801640a:	4a09      	ldr	r2, [pc, #36]	@ (8016430 <dhcp_renew+0x130>)
 801640c:	fb82 1203 	smull	r1, r2, r2, r3
 8016410:	1152      	asrs	r2, r2, #5
 8016412:	17db      	asrs	r3, r3, #31
 8016414:	1ad3      	subs	r3, r2, r3
 8016416:	b29a      	uxth	r2, r3
 8016418:	69bb      	ldr	r3, [r7, #24]
 801641a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801641c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016420:	4618      	mov	r0, r3
 8016422:	3720      	adds	r7, #32
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	20000028 	.word	0x20000028
 801642c:	200176f8 	.word	0x200176f8
 8016430:	10624dd3 	.word	0x10624dd3

08016434 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08a      	sub	sp, #40	@ 0x28
 8016438:	af02      	add	r7, sp, #8
 801643a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016440:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016442:	2104      	movs	r1, #4
 8016444:	69b8      	ldr	r0, [r7, #24]
 8016446:	f000 f9dd 	bl	8016804 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801644a:	f107 030c 	add.w	r3, r7, #12
 801644e:	2203      	movs	r2, #3
 8016450:	69b9      	ldr	r1, [r7, #24]
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 fe6e 	bl	8017134 <dhcp_create_msg>
 8016458:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d04c      	beq.n	80164fa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016466:	89b8      	ldrh	r0, [r7, #12]
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801646e:	2302      	movs	r3, #2
 8016470:	2239      	movs	r2, #57	@ 0x39
 8016472:	f000 f9e1 	bl	8016838 <dhcp_option>
 8016476:	4603      	mov	r3, r0
 8016478:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801647a:	89b8      	ldrh	r0, [r7, #12]
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016486:	461a      	mov	r2, r3
 8016488:	f000 fa30 	bl	80168ec <dhcp_option_short>
 801648c:	4603      	mov	r3, r0
 801648e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016490:	89b8      	ldrh	r0, [r7, #12]
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016498:	2303      	movs	r3, #3
 801649a:	2237      	movs	r2, #55	@ 0x37
 801649c:	f000 f9cc 	bl	8016838 <dhcp_option>
 80164a0:	4603      	mov	r3, r0
 80164a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80164a4:	2300      	movs	r3, #0
 80164a6:	77bb      	strb	r3, [r7, #30]
 80164a8:	e00e      	b.n	80164c8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80164aa:	89b8      	ldrh	r0, [r7, #12]
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80164b2:	7fbb      	ldrb	r3, [r7, #30]
 80164b4:	4a28      	ldr	r2, [pc, #160]	@ (8016558 <dhcp_rebind+0x124>)
 80164b6:	5cd3      	ldrb	r3, [r2, r3]
 80164b8:	461a      	mov	r2, r3
 80164ba:	f000 f9f1 	bl	80168a0 <dhcp_option_byte>
 80164be:	4603      	mov	r3, r0
 80164c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80164c2:	7fbb      	ldrb	r3, [r7, #30]
 80164c4:	3301      	adds	r3, #1
 80164c6:	77bb      	strb	r3, [r7, #30]
 80164c8:	7fbb      	ldrb	r3, [r7, #30]
 80164ca:	2b02      	cmp	r3, #2
 80164cc:	d9ed      	bls.n	80164aa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80164ce:	89b8      	ldrh	r0, [r7, #12]
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	33f0      	adds	r3, #240	@ 0xf0
 80164d4:	697a      	ldr	r2, [r7, #20]
 80164d6:	4619      	mov	r1, r3
 80164d8:	f000 ff02 	bl	80172e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80164dc:	4b1f      	ldr	r3, [pc, #124]	@ (801655c <dhcp_rebind+0x128>)
 80164de:	6818      	ldr	r0, [r3, #0]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	2343      	movs	r3, #67	@ 0x43
 80164e6:	4a1e      	ldr	r2, [pc, #120]	@ (8016560 <dhcp_rebind+0x12c>)
 80164e8:	6979      	ldr	r1, [r7, #20]
 80164ea:	f7fe fd95 	bl	8015018 <udp_sendto_if>
 80164ee:	4603      	mov	r3, r0
 80164f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80164f2:	6978      	ldr	r0, [r7, #20]
 80164f4:	f7f8 f97c 	bl	800e7f0 <pbuf_free>
 80164f8:	e001      	b.n	80164fe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80164fa:	23ff      	movs	r3, #255	@ 0xff
 80164fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80164fe:	69bb      	ldr	r3, [r7, #24]
 8016500:	799b      	ldrb	r3, [r3, #6]
 8016502:	2bff      	cmp	r3, #255	@ 0xff
 8016504:	d005      	beq.n	8016512 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	799b      	ldrb	r3, [r3, #6]
 801650a:	3301      	adds	r3, #1
 801650c:	b2da      	uxtb	r2, r3
 801650e:	69bb      	ldr	r3, [r7, #24]
 8016510:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	799b      	ldrb	r3, [r3, #6]
 8016516:	2b09      	cmp	r3, #9
 8016518:	d809      	bhi.n	801652e <dhcp_rebind+0xfa>
 801651a:	69bb      	ldr	r3, [r7, #24]
 801651c:	799b      	ldrb	r3, [r3, #6]
 801651e:	461a      	mov	r2, r3
 8016520:	0152      	lsls	r2, r2, #5
 8016522:	1ad2      	subs	r2, r2, r3
 8016524:	0092      	lsls	r2, r2, #2
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	b29b      	uxth	r3, r3
 801652c:	e001      	b.n	8016532 <dhcp_rebind+0xfe>
 801652e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016532:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016534:	89fb      	ldrh	r3, [r7, #14]
 8016536:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801653a:	4a0a      	ldr	r2, [pc, #40]	@ (8016564 <dhcp_rebind+0x130>)
 801653c:	fb82 1203 	smull	r1, r2, r2, r3
 8016540:	1152      	asrs	r2, r2, #5
 8016542:	17db      	asrs	r3, r3, #31
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	b29a      	uxth	r2, r3
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801654c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016550:	4618      	mov	r0, r3
 8016552:	3720      	adds	r7, #32
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	20000028 	.word	0x20000028
 801655c:	200176f8 	.word	0x200176f8
 8016560:	08023038 	.word	0x08023038
 8016564:	10624dd3 	.word	0x10624dd3

08016568 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016568:	b5b0      	push	{r4, r5, r7, lr}
 801656a:	b08a      	sub	sp, #40	@ 0x28
 801656c:	af02      	add	r7, sp, #8
 801656e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016574:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016576:	2103      	movs	r1, #3
 8016578:	69b8      	ldr	r0, [r7, #24]
 801657a:	f000 f943 	bl	8016804 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801657e:	f107 030c 	add.w	r3, r7, #12
 8016582:	2203      	movs	r2, #3
 8016584:	69b9      	ldr	r1, [r7, #24]
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f000 fdd4 	bl	8017134 <dhcp_create_msg>
 801658c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d066      	beq.n	8016662 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801659a:	89b8      	ldrh	r0, [r7, #12]
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80165a2:	2302      	movs	r3, #2
 80165a4:	2239      	movs	r2, #57	@ 0x39
 80165a6:	f000 f947 	bl	8016838 <dhcp_option>
 80165aa:	4603      	mov	r3, r0
 80165ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80165ae:	89b8      	ldrh	r0, [r7, #12]
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	33f0      	adds	r3, #240	@ 0xf0
 80165b4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80165b8:	4619      	mov	r1, r3
 80165ba:	f000 f997 	bl	80168ec <dhcp_option_short>
 80165be:	4603      	mov	r3, r0
 80165c0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80165c2:	89b8      	ldrh	r0, [r7, #12]
 80165c4:	693b      	ldr	r3, [r7, #16]
 80165c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80165ca:	2304      	movs	r3, #4
 80165cc:	2232      	movs	r2, #50	@ 0x32
 80165ce:	f000 f933 	bl	8016838 <dhcp_option>
 80165d2:	4603      	mov	r3, r0
 80165d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80165d6:	89bc      	ldrh	r4, [r7, #12]
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80165de:	69bb      	ldr	r3, [r7, #24]
 80165e0:	69db      	ldr	r3, [r3, #28]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f6 fc42 	bl	800ce6c <lwip_htonl>
 80165e8:	4603      	mov	r3, r0
 80165ea:	461a      	mov	r2, r3
 80165ec:	4629      	mov	r1, r5
 80165ee:	4620      	mov	r0, r4
 80165f0:	f000 f9ae 	bl	8016950 <dhcp_option_long>
 80165f4:	4603      	mov	r3, r0
 80165f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80165f8:	89b8      	ldrh	r0, [r7, #12]
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016600:	2303      	movs	r3, #3
 8016602:	2237      	movs	r2, #55	@ 0x37
 8016604:	f000 f918 	bl	8016838 <dhcp_option>
 8016608:	4603      	mov	r3, r0
 801660a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801660c:	2300      	movs	r3, #0
 801660e:	77bb      	strb	r3, [r7, #30]
 8016610:	e00e      	b.n	8016630 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016612:	89b8      	ldrh	r0, [r7, #12]
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801661a:	7fbb      	ldrb	r3, [r7, #30]
 801661c:	4a28      	ldr	r2, [pc, #160]	@ (80166c0 <dhcp_reboot+0x158>)
 801661e:	5cd3      	ldrb	r3, [r2, r3]
 8016620:	461a      	mov	r2, r3
 8016622:	f000 f93d 	bl	80168a0 <dhcp_option_byte>
 8016626:	4603      	mov	r3, r0
 8016628:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801662a:	7fbb      	ldrb	r3, [r7, #30]
 801662c:	3301      	adds	r3, #1
 801662e:	77bb      	strb	r3, [r7, #30]
 8016630:	7fbb      	ldrb	r3, [r7, #30]
 8016632:	2b02      	cmp	r3, #2
 8016634:	d9ed      	bls.n	8016612 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016636:	89b8      	ldrh	r0, [r7, #12]
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	33f0      	adds	r3, #240	@ 0xf0
 801663c:	697a      	ldr	r2, [r7, #20]
 801663e:	4619      	mov	r1, r3
 8016640:	f000 fe4e 	bl	80172e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016644:	4b1f      	ldr	r3, [pc, #124]	@ (80166c4 <dhcp_reboot+0x15c>)
 8016646:	6818      	ldr	r0, [r3, #0]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	2343      	movs	r3, #67	@ 0x43
 801664e:	4a1e      	ldr	r2, [pc, #120]	@ (80166c8 <dhcp_reboot+0x160>)
 8016650:	6979      	ldr	r1, [r7, #20]
 8016652:	f7fe fce1 	bl	8015018 <udp_sendto_if>
 8016656:	4603      	mov	r3, r0
 8016658:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801665a:	6978      	ldr	r0, [r7, #20]
 801665c:	f7f8 f8c8 	bl	800e7f0 <pbuf_free>
 8016660:	e001      	b.n	8016666 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016662:	23ff      	movs	r3, #255	@ 0xff
 8016664:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016666:	69bb      	ldr	r3, [r7, #24]
 8016668:	799b      	ldrb	r3, [r3, #6]
 801666a:	2bff      	cmp	r3, #255	@ 0xff
 801666c:	d005      	beq.n	801667a <dhcp_reboot+0x112>
    dhcp->tries++;
 801666e:	69bb      	ldr	r3, [r7, #24]
 8016670:	799b      	ldrb	r3, [r3, #6]
 8016672:	3301      	adds	r3, #1
 8016674:	b2da      	uxtb	r2, r3
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801667a:	69bb      	ldr	r3, [r7, #24]
 801667c:	799b      	ldrb	r3, [r3, #6]
 801667e:	2b09      	cmp	r3, #9
 8016680:	d809      	bhi.n	8016696 <dhcp_reboot+0x12e>
 8016682:	69bb      	ldr	r3, [r7, #24]
 8016684:	799b      	ldrb	r3, [r3, #6]
 8016686:	461a      	mov	r2, r3
 8016688:	0152      	lsls	r2, r2, #5
 801668a:	1ad2      	subs	r2, r2, r3
 801668c:	0092      	lsls	r2, r2, #2
 801668e:	4413      	add	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	b29b      	uxth	r3, r3
 8016694:	e001      	b.n	801669a <dhcp_reboot+0x132>
 8016696:	f242 7310 	movw	r3, #10000	@ 0x2710
 801669a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801669c:	89fb      	ldrh	r3, [r7, #14]
 801669e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80166a2:	4a0a      	ldr	r2, [pc, #40]	@ (80166cc <dhcp_reboot+0x164>)
 80166a4:	fb82 1203 	smull	r1, r2, r2, r3
 80166a8:	1152      	asrs	r2, r2, #5
 80166aa:	17db      	asrs	r3, r3, #31
 80166ac:	1ad3      	subs	r3, r2, r3
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	69bb      	ldr	r3, [r7, #24]
 80166b2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80166b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3720      	adds	r7, #32
 80166bc:	46bd      	mov	sp, r7
 80166be:	bdb0      	pop	{r4, r5, r7, pc}
 80166c0:	20000028 	.word	0x20000028
 80166c4:	200176f8 	.word	0x200176f8
 80166c8:	08023038 	.word	0x08023038
 80166cc:	10624dd3 	.word	0x10624dd3

080166d0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80166d0:	b5b0      	push	{r4, r5, r7, lr}
 80166d2:	b08a      	sub	sp, #40	@ 0x28
 80166d4:	af02      	add	r7, sp, #8
 80166d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	f000 8084 	beq.w	80167ee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80166e6:	69fb      	ldr	r3, [r7, #28]
 80166e8:	795b      	ldrb	r3, [r3, #5]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	f000 8081 	beq.w	80167f2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	699b      	ldr	r3, [r3, #24]
 80166f4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	2200      	movs	r2, #0
 80166fa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	2200      	movs	r2, #0
 8016700:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016702:	69fb      	ldr	r3, [r7, #28]
 8016704:	2200      	movs	r2, #0
 8016706:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	2200      	movs	r2, #0
 801670c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	2200      	movs	r2, #0
 8016712:	631a      	str	r2, [r3, #48]	@ 0x30
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	2200      	movs	r2, #0
 8016728:	829a      	strh	r2, [r3, #20]
 801672a:	69fb      	ldr	r3, [r7, #28]
 801672c:	8a9a      	ldrh	r2, [r3, #20]
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	825a      	strh	r2, [r3, #18]
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	8a5a      	ldrh	r2, [r3, #18]
 8016736:	69fb      	ldr	r3, [r7, #28]
 8016738:	821a      	strh	r2, [r3, #16]
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	8a1a      	ldrh	r2, [r3, #16]
 801673e:	69fb      	ldr	r3, [r7, #28]
 8016740:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f000 fdfa 	bl	801733c <dhcp_supplied_address>
 8016748:	4603      	mov	r3, r0
 801674a:	2b00      	cmp	r3, #0
 801674c:	d03b      	beq.n	80167c6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801674e:	f107 030e 	add.w	r3, r7, #14
 8016752:	2207      	movs	r2, #7
 8016754:	69f9      	ldr	r1, [r7, #28]
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f000 fcec 	bl	8017134 <dhcp_create_msg>
 801675c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801675e:	69bb      	ldr	r3, [r7, #24]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d030      	beq.n	80167c6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016764:	69bb      	ldr	r3, [r7, #24]
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801676a:	89f8      	ldrh	r0, [r7, #14]
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016772:	2304      	movs	r3, #4
 8016774:	2236      	movs	r2, #54	@ 0x36
 8016776:	f000 f85f 	bl	8016838 <dhcp_option>
 801677a:	4603      	mov	r3, r0
 801677c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801677e:	89fc      	ldrh	r4, [r7, #14]
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	4618      	mov	r0, r3
 801678a:	f7f6 fb6f 	bl	800ce6c <lwip_htonl>
 801678e:	4603      	mov	r3, r0
 8016790:	461a      	mov	r2, r3
 8016792:	4629      	mov	r1, r5
 8016794:	4620      	mov	r0, r4
 8016796:	f000 f8db 	bl	8016950 <dhcp_option_long>
 801679a:	4603      	mov	r3, r0
 801679c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801679e:	89f8      	ldrh	r0, [r7, #14]
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	33f0      	adds	r3, #240	@ 0xf0
 80167a4:	69ba      	ldr	r2, [r7, #24]
 80167a6:	4619      	mov	r1, r3
 80167a8:	f000 fd9a 	bl	80172e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80167ac:	4b13      	ldr	r3, [pc, #76]	@ (80167fc <dhcp_release_and_stop+0x12c>)
 80167ae:	6818      	ldr	r0, [r3, #0]
 80167b0:	f107 0210 	add.w	r2, r7, #16
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	9300      	str	r3, [sp, #0]
 80167b8:	2343      	movs	r3, #67	@ 0x43
 80167ba:	69b9      	ldr	r1, [r7, #24]
 80167bc:	f7fe fc2c 	bl	8015018 <udp_sendto_if>
      pbuf_free(p_out);
 80167c0:	69b8      	ldr	r0, [r7, #24]
 80167c2:	f7f8 f815 	bl	800e7f0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80167c6:	4b0e      	ldr	r3, [pc, #56]	@ (8016800 <dhcp_release_and_stop+0x130>)
 80167c8:	4a0d      	ldr	r2, [pc, #52]	@ (8016800 <dhcp_release_and_stop+0x130>)
 80167ca:	490d      	ldr	r1, [pc, #52]	@ (8016800 <dhcp_release_and_stop+0x130>)
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f7f7 fb5b 	bl	800de88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80167d2:	2100      	movs	r1, #0
 80167d4:	69f8      	ldr	r0, [r7, #28]
 80167d6:	f000 f815 	bl	8016804 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	791b      	ldrb	r3, [r3, #4]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d008      	beq.n	80167f4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80167e2:	f7fe ff8b 	bl	80156fc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	2200      	movs	r2, #0
 80167ea:	711a      	strb	r2, [r3, #4]
 80167ec:	e002      	b.n	80167f4 <dhcp_release_and_stop+0x124>
    return;
 80167ee:	bf00      	nop
 80167f0:	e000      	b.n	80167f4 <dhcp_release_and_stop+0x124>
    return;
 80167f2:	bf00      	nop
  }
}
 80167f4:	3720      	adds	r7, #32
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bdb0      	pop	{r4, r5, r7, pc}
 80167fa:	bf00      	nop
 80167fc:	200176f8 	.word	0x200176f8
 8016800:	08023034 	.word	0x08023034

08016804 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	460b      	mov	r3, r1
 801680e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	795b      	ldrb	r3, [r3, #5]
 8016814:	78fa      	ldrb	r2, [r7, #3]
 8016816:	429a      	cmp	r2, r3
 8016818:	d008      	beq.n	801682c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	78fa      	ldrb	r2, [r7, #3]
 801681e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2200      	movs	r2, #0
 8016824:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2200      	movs	r2, #0
 801682a:	811a      	strh	r2, [r3, #8]
  }
}
 801682c:	bf00      	nop
 801682e:	370c      	adds	r7, #12
 8016830:	46bd      	mov	sp, r7
 8016832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016836:	4770      	bx	lr

08016838 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6039      	str	r1, [r7, #0]
 8016840:	4611      	mov	r1, r2
 8016842:	461a      	mov	r2, r3
 8016844:	4603      	mov	r3, r0
 8016846:	80fb      	strh	r3, [r7, #6]
 8016848:	460b      	mov	r3, r1
 801684a:	717b      	strb	r3, [r7, #5]
 801684c:	4613      	mov	r3, r2
 801684e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016850:	88fa      	ldrh	r2, [r7, #6]
 8016852:	793b      	ldrb	r3, [r7, #4]
 8016854:	4413      	add	r3, r2
 8016856:	3302      	adds	r3, #2
 8016858:	2b44      	cmp	r3, #68	@ 0x44
 801685a:	d906      	bls.n	801686a <dhcp_option+0x32>
 801685c:	4b0d      	ldr	r3, [pc, #52]	@ (8016894 <dhcp_option+0x5c>)
 801685e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016862:	490d      	ldr	r1, [pc, #52]	@ (8016898 <dhcp_option+0x60>)
 8016864:	480d      	ldr	r0, [pc, #52]	@ (801689c <dhcp_option+0x64>)
 8016866:	f003 fc55 	bl	801a114 <iprintf>
  options[options_out_len++] = option_type;
 801686a:	88fb      	ldrh	r3, [r7, #6]
 801686c:	1c5a      	adds	r2, r3, #1
 801686e:	80fa      	strh	r2, [r7, #6]
 8016870:	461a      	mov	r2, r3
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	4413      	add	r3, r2
 8016876:	797a      	ldrb	r2, [r7, #5]
 8016878:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801687a:	88fb      	ldrh	r3, [r7, #6]
 801687c:	1c5a      	adds	r2, r3, #1
 801687e:	80fa      	strh	r2, [r7, #6]
 8016880:	461a      	mov	r2, r3
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	4413      	add	r3, r2
 8016886:	793a      	ldrb	r2, [r7, #4]
 8016888:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801688a:	88fb      	ldrh	r3, [r7, #6]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	0801e5d4 	.word	0x0801e5d4
 8016898:	0801e768 	.word	0x0801e768
 801689c:	0801e634 	.word	0x0801e634

080168a0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	4603      	mov	r3, r0
 80168a8:	6039      	str	r1, [r7, #0]
 80168aa:	80fb      	strh	r3, [r7, #6]
 80168ac:	4613      	mov	r3, r2
 80168ae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80168b0:	88fb      	ldrh	r3, [r7, #6]
 80168b2:	2b43      	cmp	r3, #67	@ 0x43
 80168b4:	d906      	bls.n	80168c4 <dhcp_option_byte+0x24>
 80168b6:	4b0a      	ldr	r3, [pc, #40]	@ (80168e0 <dhcp_option_byte+0x40>)
 80168b8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80168bc:	4909      	ldr	r1, [pc, #36]	@ (80168e4 <dhcp_option_byte+0x44>)
 80168be:	480a      	ldr	r0, [pc, #40]	@ (80168e8 <dhcp_option_byte+0x48>)
 80168c0:	f003 fc28 	bl	801a114 <iprintf>
  options[options_out_len++] = value;
 80168c4:	88fb      	ldrh	r3, [r7, #6]
 80168c6:	1c5a      	adds	r2, r3, #1
 80168c8:	80fa      	strh	r2, [r7, #6]
 80168ca:	461a      	mov	r2, r3
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	4413      	add	r3, r2
 80168d0:	797a      	ldrb	r2, [r7, #5]
 80168d2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80168d4:	88fb      	ldrh	r3, [r7, #6]
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
 80168de:	bf00      	nop
 80168e0:	0801e5d4 	.word	0x0801e5d4
 80168e4:	0801e7ac 	.word	0x0801e7ac
 80168e8:	0801e634 	.word	0x0801e634

080168ec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	6039      	str	r1, [r7, #0]
 80168f6:	80fb      	strh	r3, [r7, #6]
 80168f8:	4613      	mov	r3, r2
 80168fa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80168fc:	88fb      	ldrh	r3, [r7, #6]
 80168fe:	3302      	adds	r3, #2
 8016900:	2b44      	cmp	r3, #68	@ 0x44
 8016902:	d906      	bls.n	8016912 <dhcp_option_short+0x26>
 8016904:	4b0f      	ldr	r3, [pc, #60]	@ (8016944 <dhcp_option_short+0x58>)
 8016906:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801690a:	490f      	ldr	r1, [pc, #60]	@ (8016948 <dhcp_option_short+0x5c>)
 801690c:	480f      	ldr	r0, [pc, #60]	@ (801694c <dhcp_option_short+0x60>)
 801690e:	f003 fc01 	bl	801a114 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016912:	88bb      	ldrh	r3, [r7, #4]
 8016914:	0a1b      	lsrs	r3, r3, #8
 8016916:	b29a      	uxth	r2, r3
 8016918:	88fb      	ldrh	r3, [r7, #6]
 801691a:	1c59      	adds	r1, r3, #1
 801691c:	80f9      	strh	r1, [r7, #6]
 801691e:	4619      	mov	r1, r3
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	440b      	add	r3, r1
 8016924:	b2d2      	uxtb	r2, r2
 8016926:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016928:	88fb      	ldrh	r3, [r7, #6]
 801692a:	1c5a      	adds	r2, r3, #1
 801692c:	80fa      	strh	r2, [r7, #6]
 801692e:	461a      	mov	r2, r3
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	4413      	add	r3, r2
 8016934:	88ba      	ldrh	r2, [r7, #4]
 8016936:	b2d2      	uxtb	r2, r2
 8016938:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801693a:	88fb      	ldrh	r3, [r7, #6]
}
 801693c:	4618      	mov	r0, r3
 801693e:	3708      	adds	r7, #8
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	0801e5d4 	.word	0x0801e5d4
 8016948:	0801e7e4 	.word	0x0801e7e4
 801694c:	0801e634 	.word	0x0801e634

08016950 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
 8016956:	4603      	mov	r3, r0
 8016958:	60b9      	str	r1, [r7, #8]
 801695a:	607a      	str	r2, [r7, #4]
 801695c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801695e:	89fb      	ldrh	r3, [r7, #14]
 8016960:	3304      	adds	r3, #4
 8016962:	2b44      	cmp	r3, #68	@ 0x44
 8016964:	d906      	bls.n	8016974 <dhcp_option_long+0x24>
 8016966:	4b19      	ldr	r3, [pc, #100]	@ (80169cc <dhcp_option_long+0x7c>)
 8016968:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801696c:	4918      	ldr	r1, [pc, #96]	@ (80169d0 <dhcp_option_long+0x80>)
 801696e:	4819      	ldr	r0, [pc, #100]	@ (80169d4 <dhcp_option_long+0x84>)
 8016970:	f003 fbd0 	bl	801a114 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	0e1a      	lsrs	r2, r3, #24
 8016978:	89fb      	ldrh	r3, [r7, #14]
 801697a:	1c59      	adds	r1, r3, #1
 801697c:	81f9      	strh	r1, [r7, #14]
 801697e:	4619      	mov	r1, r3
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	440b      	add	r3, r1
 8016984:	b2d2      	uxtb	r2, r2
 8016986:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	0c1a      	lsrs	r2, r3, #16
 801698c:	89fb      	ldrh	r3, [r7, #14]
 801698e:	1c59      	adds	r1, r3, #1
 8016990:	81f9      	strh	r1, [r7, #14]
 8016992:	4619      	mov	r1, r3
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	440b      	add	r3, r1
 8016998:	b2d2      	uxtb	r2, r2
 801699a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	0a1a      	lsrs	r2, r3, #8
 80169a0:	89fb      	ldrh	r3, [r7, #14]
 80169a2:	1c59      	adds	r1, r3, #1
 80169a4:	81f9      	strh	r1, [r7, #14]
 80169a6:	4619      	mov	r1, r3
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	440b      	add	r3, r1
 80169ac:	b2d2      	uxtb	r2, r2
 80169ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80169b0:	89fb      	ldrh	r3, [r7, #14]
 80169b2:	1c5a      	adds	r2, r3, #1
 80169b4:	81fa      	strh	r2, [r7, #14]
 80169b6:	461a      	mov	r2, r3
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	4413      	add	r3, r2
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	b2d2      	uxtb	r2, r2
 80169c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80169c2:	89fb      	ldrh	r3, [r7, #14]
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	3710      	adds	r7, #16
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	0801e5d4 	.word	0x0801e5d4
 80169d0:	0801e820 	.word	0x0801e820
 80169d4:	0801e634 	.word	0x0801e634

080169d8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b092      	sub	sp, #72	@ 0x48
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80169e2:	2300      	movs	r3, #0
 80169e4:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 80169e6:	2300      	movs	r3, #0
 80169e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80169ea:	2208      	movs	r2, #8
 80169ec:	2100      	movs	r1, #0
 80169ee:	48b8      	ldr	r0, [pc, #736]	@ (8016cd0 <dhcp_parse_reply+0x2f8>)
 80169f0:	f003 fd5a 	bl	801a4a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	895b      	ldrh	r3, [r3, #10]
 80169f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80169fa:	d802      	bhi.n	8016a02 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80169fc:	f06f 0301 	mvn.w	r3, #1
 8016a00:	e2b8      	b.n	8016f74 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016a08:	23f0      	movs	r3, #240	@ 0xf0
 8016a0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	891b      	ldrh	r3, [r3, #8]
 8016a10:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016a16:	e00c      	b.n	8016a32 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a1a:	895b      	ldrh	r3, [r3, #10]
 8016a1c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a24:	895b      	ldrh	r3, [r3, #10]
 8016a26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016a28:	1ad3      	subs	r3, r2, r3
 8016a2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 8016a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d004      	beq.n	8016a42 <dhcp_parse_reply+0x6a>
 8016a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a3a:	895b      	ldrh	r3, [r3, #10]
 8016a3c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d2ea      	bcs.n	8016a18 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d102      	bne.n	8016a4e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016a48:	f06f 0301 	mvn.w	r3, #1
 8016a4c:	e292      	b.n	8016f74 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 8016a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016a50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 8016a54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016a56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 8016a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016a5e:	e247      	b.n	8016ef0 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8016a60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016a66:	4413      	add	r3, r2
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8016a72:	f04f 33ff 	mov.w	r3, #4294967295
 8016a76:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8016a78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a7c:	3302      	adds	r3, #2
 8016a7e:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8016a80:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016a82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d202      	bcs.n	8016a90 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 8016a8a:	f06f 0301 	mvn.w	r3, #1
 8016a8e:	e271      	b.n	8016f74 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016a90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a94:	3301      	adds	r3, #1
 8016a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a98:	8952      	ldrh	r2, [r2, #10]
 8016a9a:	4293      	cmp	r3, r2
 8016a9c:	da08      	bge.n	8016ab0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 8016a9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016aa6:	4413      	add	r3, r2
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016aae:	e00b      	b.n	8016ac8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d004      	beq.n	8016ac2 <dhcp_parse_reply+0xea>
 8016ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	e000      	b.n	8016ac4 <dhcp_parse_reply+0xec>
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 8016ad0:	7efb      	ldrb	r3, [r7, #27]
 8016ad2:	2b3b      	cmp	r3, #59	@ 0x3b
 8016ad4:	f200 812c 	bhi.w	8016d30 <dhcp_parse_reply+0x358>
 8016ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8016ae0 <dhcp_parse_reply+0x108>)
 8016ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ade:	bf00      	nop
 8016ae0:	08016bd1 	.word	0x08016bd1
 8016ae4:	08016be1 	.word	0x08016be1
 8016ae8:	08016d31 	.word	0x08016d31
 8016aec:	08016c03 	.word	0x08016c03
 8016af0:	08016d31 	.word	0x08016d31
 8016af4:	08016d31 	.word	0x08016d31
 8016af8:	08016d31 	.word	0x08016d31
 8016afc:	08016d31 	.word	0x08016d31
 8016b00:	08016d31 	.word	0x08016d31
 8016b04:	08016d31 	.word	0x08016d31
 8016b08:	08016d31 	.word	0x08016d31
 8016b0c:	08016d31 	.word	0x08016d31
 8016b10:	08016d31 	.word	0x08016d31
 8016b14:	08016d31 	.word	0x08016d31
 8016b18:	08016d31 	.word	0x08016d31
 8016b1c:	08016d31 	.word	0x08016d31
 8016b20:	08016d31 	.word	0x08016d31
 8016b24:	08016d31 	.word	0x08016d31
 8016b28:	08016d31 	.word	0x08016d31
 8016b2c:	08016d31 	.word	0x08016d31
 8016b30:	08016d31 	.word	0x08016d31
 8016b34:	08016d31 	.word	0x08016d31
 8016b38:	08016d31 	.word	0x08016d31
 8016b3c:	08016d31 	.word	0x08016d31
 8016b40:	08016d31 	.word	0x08016d31
 8016b44:	08016d31 	.word	0x08016d31
 8016b48:	08016d31 	.word	0x08016d31
 8016b4c:	08016d31 	.word	0x08016d31
 8016b50:	08016d31 	.word	0x08016d31
 8016b54:	08016d31 	.word	0x08016d31
 8016b58:	08016d31 	.word	0x08016d31
 8016b5c:	08016d31 	.word	0x08016d31
 8016b60:	08016d31 	.word	0x08016d31
 8016b64:	08016d31 	.word	0x08016d31
 8016b68:	08016d31 	.word	0x08016d31
 8016b6c:	08016d31 	.word	0x08016d31
 8016b70:	08016d31 	.word	0x08016d31
 8016b74:	08016d31 	.word	0x08016d31
 8016b78:	08016d31 	.word	0x08016d31
 8016b7c:	08016d31 	.word	0x08016d31
 8016b80:	08016d31 	.word	0x08016d31
 8016b84:	08016d31 	.word	0x08016d31
 8016b88:	08016d31 	.word	0x08016d31
 8016b8c:	08016d31 	.word	0x08016d31
 8016b90:	08016d31 	.word	0x08016d31
 8016b94:	08016d31 	.word	0x08016d31
 8016b98:	08016d31 	.word	0x08016d31
 8016b9c:	08016d31 	.word	0x08016d31
 8016ba0:	08016d31 	.word	0x08016d31
 8016ba4:	08016d31 	.word	0x08016d31
 8016ba8:	08016d31 	.word	0x08016d31
 8016bac:	08016c2f 	.word	0x08016c2f
 8016bb0:	08016c51 	.word	0x08016c51
 8016bb4:	08016c8d 	.word	0x08016c8d
 8016bb8:	08016caf 	.word	0x08016caf
 8016bbc:	08016d31 	.word	0x08016d31
 8016bc0:	08016d31 	.word	0x08016d31
 8016bc4:	08016d31 	.word	0x08016d31
 8016bc8:	08016ced 	.word	0x08016ced
 8016bcc:	08016d0f 	.word	0x08016d0f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 8016bde:	e0ab      	b.n	8016d38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016be0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016be4:	2b04      	cmp	r3, #4
 8016be6:	d009      	beq.n	8016bfc <dhcp_parse_reply+0x224>
 8016be8:	4b3a      	ldr	r3, [pc, #232]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016bea:	f240 622e 	movw	r2, #1582	@ 0x62e
 8016bee:	493a      	ldr	r1, [pc, #232]	@ (8016cd8 <dhcp_parse_reply+0x300>)
 8016bf0:	483a      	ldr	r0, [pc, #232]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016bf2:	f003 fa8f 	bl	801a114 <iprintf>
 8016bf6:	f06f 0305 	mvn.w	r3, #5
 8016bfa:	e1bb      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016bfc:	2306      	movs	r3, #6
 8016bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016c00:	e09a      	b.n	8016d38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016c02:	2304      	movs	r3, #4
 8016c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016c08:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8016c0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d209      	bcs.n	8016c28 <dhcp_parse_reply+0x250>
 8016c14:	4b2f      	ldr	r3, [pc, #188]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016c16:	f240 6233 	movw	r2, #1587	@ 0x633
 8016c1a:	4931      	ldr	r1, [pc, #196]	@ (8016ce0 <dhcp_parse_reply+0x308>)
 8016c1c:	482f      	ldr	r0, [pc, #188]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016c1e:	f003 fa79 	bl	801a114 <iprintf>
 8016c22:	f06f 0305 	mvn.w	r3, #5
 8016c26:	e1a5      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016c28:	2307      	movs	r3, #7
 8016c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016c2c:	e084      	b.n	8016d38 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c32:	2b04      	cmp	r3, #4
 8016c34:	d009      	beq.n	8016c4a <dhcp_parse_reply+0x272>
 8016c36:	4b27      	ldr	r3, [pc, #156]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016c38:	f240 6241 	movw	r2, #1601	@ 0x641
 8016c3c:	4926      	ldr	r1, [pc, #152]	@ (8016cd8 <dhcp_parse_reply+0x300>)
 8016c3e:	4827      	ldr	r0, [pc, #156]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016c40:	f003 fa68 	bl	801a114 <iprintf>
 8016c44:	f06f 0305 	mvn.w	r3, #5
 8016c48:	e194      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016c4a:	2303      	movs	r3, #3
 8016c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016c4e:	e073      	b.n	8016d38 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c54:	2b01      	cmp	r3, #1
 8016c56:	d009      	beq.n	8016c6c <dhcp_parse_reply+0x294>
 8016c58:	4b1e      	ldr	r3, [pc, #120]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016c5a:	f240 624f 	movw	r2, #1615	@ 0x64f
 8016c5e:	4921      	ldr	r1, [pc, #132]	@ (8016ce4 <dhcp_parse_reply+0x30c>)
 8016c60:	481e      	ldr	r0, [pc, #120]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016c62:	f003 fa57 	bl	801a114 <iprintf>
 8016c66:	f06f 0305 	mvn.w	r3, #5
 8016c6a:	e183      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016c6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016c6e:	2bf0      	cmp	r3, #240	@ 0xf0
 8016c70:	d009      	beq.n	8016c86 <dhcp_parse_reply+0x2ae>
 8016c72:	4b18      	ldr	r3, [pc, #96]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016c74:	f240 6251 	movw	r2, #1617	@ 0x651
 8016c78:	491b      	ldr	r1, [pc, #108]	@ (8016ce8 <dhcp_parse_reply+0x310>)
 8016c7a:	4818      	ldr	r0, [pc, #96]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016c7c:	f003 fa4a 	bl	801a114 <iprintf>
 8016c80:	f06f 0305 	mvn.w	r3, #5
 8016c84:	e176      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016c86:	2300      	movs	r3, #0
 8016c88:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016c8a:	e055      	b.n	8016d38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c90:	2b01      	cmp	r3, #1
 8016c92:	d009      	beq.n	8016ca8 <dhcp_parse_reply+0x2d0>
 8016c94:	4b0f      	ldr	r3, [pc, #60]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016c96:	f240 6255 	movw	r2, #1621	@ 0x655
 8016c9a:	4912      	ldr	r1, [pc, #72]	@ (8016ce4 <dhcp_parse_reply+0x30c>)
 8016c9c:	480f      	ldr	r0, [pc, #60]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016c9e:	f003 fa39 	bl	801a114 <iprintf>
 8016ca2:	f06f 0305 	mvn.w	r3, #5
 8016ca6:	e165      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016ca8:	2301      	movs	r3, #1
 8016caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016cac:	e044      	b.n	8016d38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016cae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016cb2:	2b04      	cmp	r3, #4
 8016cb4:	d009      	beq.n	8016cca <dhcp_parse_reply+0x2f2>
 8016cb6:	4b07      	ldr	r3, [pc, #28]	@ (8016cd4 <dhcp_parse_reply+0x2fc>)
 8016cb8:	f240 6259 	movw	r2, #1625	@ 0x659
 8016cbc:	4906      	ldr	r1, [pc, #24]	@ (8016cd8 <dhcp_parse_reply+0x300>)
 8016cbe:	4807      	ldr	r0, [pc, #28]	@ (8016cdc <dhcp_parse_reply+0x304>)
 8016cc0:	f003 fa28 	bl	801a114 <iprintf>
 8016cc4:	f06f 0305 	mvn.w	r3, #5
 8016cc8:	e154      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016cca:	2302      	movs	r3, #2
 8016ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016cce:	e033      	b.n	8016d38 <dhcp_parse_reply+0x360>
 8016cd0:	200176f0 	.word	0x200176f0
 8016cd4:	0801e5d4 	.word	0x0801e5d4
 8016cd8:	0801e85c 	.word	0x0801e85c
 8016cdc:	0801e634 	.word	0x0801e634
 8016ce0:	0801e868 	.word	0x0801e868
 8016ce4:	0801e87c 	.word	0x0801e87c
 8016ce8:	0801e888 	.word	0x0801e888
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016cec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016cf0:	2b04      	cmp	r3, #4
 8016cf2:	d009      	beq.n	8016d08 <dhcp_parse_reply+0x330>
 8016cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016cf6:	f240 625d 	movw	r2, #1629	@ 0x65d
 8016cfa:	49a1      	ldr	r1, [pc, #644]	@ (8016f80 <dhcp_parse_reply+0x5a8>)
 8016cfc:	48a1      	ldr	r0, [pc, #644]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016cfe:	f003 fa09 	bl	801a114 <iprintf>
 8016d02:	f06f 0305 	mvn.w	r3, #5
 8016d06:	e135      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016d08:	2304      	movs	r3, #4
 8016d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016d0c:	e014      	b.n	8016d38 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016d12:	2b04      	cmp	r3, #4
 8016d14:	d009      	beq.n	8016d2a <dhcp_parse_reply+0x352>
 8016d16:	4b99      	ldr	r3, [pc, #612]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016d18:	f240 6261 	movw	r2, #1633	@ 0x661
 8016d1c:	4998      	ldr	r1, [pc, #608]	@ (8016f80 <dhcp_parse_reply+0x5a8>)
 8016d1e:	4899      	ldr	r0, [pc, #612]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016d20:	f003 f9f8 	bl	801a114 <iprintf>
 8016d24:	f06f 0305 	mvn.w	r3, #5
 8016d28:	e124      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016d2a:	2305      	movs	r3, #5
 8016d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016d2e:	e003      	b.n	8016d38 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016d36:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016d38:	7efb      	ldrb	r3, [r7, #27]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d105      	bne.n	8016d4a <dhcp_parse_reply+0x372>
      offset++;
 8016d3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d42:	3301      	adds	r3, #1
 8016d44:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8016d48:	e0a4      	b.n	8016e94 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016d4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016d52:	4413      	add	r3, r2
 8016d54:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	dd02      	ble.n	8016d62 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 8016d5c:	f06f 0301 	mvn.w	r3, #1
 8016d60:	e108      	b.n	8016f74 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8016d62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016d66:	b29a      	uxth	r2, r3
 8016d68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d6c:	4413      	add	r3, r2
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	3302      	adds	r3, #2
 8016d72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 8016d76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f000 808a 	beq.w	8016e94 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8016d80:	2300      	movs	r3, #0
 8016d82:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	db02      	blt.n	8016d90 <dhcp_parse_reply+0x3b8>
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d8c:	2b07      	cmp	r3, #7
 8016d8e:	dd06      	ble.n	8016d9e <dhcp_parse_reply+0x3c6>
 8016d90:	4b7a      	ldr	r3, [pc, #488]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016d92:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8016d96:	497c      	ldr	r1, [pc, #496]	@ (8016f88 <dhcp_parse_reply+0x5b0>)
 8016d98:	487a      	ldr	r0, [pc, #488]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016d9a:	f003 f9bb 	bl	801a114 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016d9e:	4a7b      	ldr	r2, [pc, #492]	@ (8016f8c <dhcp_parse_reply+0x5b4>)
 8016da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da2:	4413      	add	r3, r2
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d174      	bne.n	8016e94 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 8016daa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016dae:	2b04      	cmp	r3, #4
 8016db0:	bf28      	it	cs
 8016db2:	2304      	movcs	r3, #4
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016db8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016dba:	8b3a      	ldrh	r2, [r7, #24]
 8016dbc:	f107 010c 	add.w	r1, r7, #12
 8016dc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016dc2:	f7f7 ff1b 	bl	800ebfc <pbuf_copy_partial>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	461a      	mov	r2, r3
 8016dca:	8b3b      	ldrh	r3, [r7, #24]
 8016dcc:	4293      	cmp	r3, r2
 8016dce:	d002      	beq.n	8016dd6 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8016dd0:	f06f 0301 	mvn.w	r3, #1
 8016dd4:	e0ce      	b.n	8016f74 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8016dd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016dda:	2b04      	cmp	r3, #4
 8016ddc:	d933      	bls.n	8016e46 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016dde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016de2:	f003 0303 	and.w	r3, r3, #3
 8016de6:	b2db      	uxtb	r3, r3
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d009      	beq.n	8016e00 <dhcp_parse_reply+0x428>
 8016dec:	4b63      	ldr	r3, [pc, #396]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016dee:	f240 6281 	movw	r2, #1665	@ 0x681
 8016df2:	4967      	ldr	r1, [pc, #412]	@ (8016f90 <dhcp_parse_reply+0x5b8>)
 8016df4:	4863      	ldr	r0, [pc, #396]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016df6:	f003 f98d 	bl	801a114 <iprintf>
 8016dfa:	f06f 0305 	mvn.w	r3, #5
 8016dfe:	e0b9      	b.n	8016f74 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8016e00:	4a62      	ldr	r2, [pc, #392]	@ (8016f8c <dhcp_parse_reply+0x5b4>)
 8016e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e04:	4413      	add	r3, r2
 8016e06:	2201      	movs	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7f6 f82d 	bl	800ce6c <lwip_htonl>
 8016e12:	4602      	mov	r2, r0
 8016e14:	495f      	ldr	r1, [pc, #380]	@ (8016f94 <dhcp_parse_reply+0x5bc>)
 8016e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016e1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016e20:	3b04      	subs	r3, #4
 8016e22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8016e26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e28:	3304      	adds	r3, #4
 8016e2a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8016e2c:	8afa      	ldrh	r2, [r7, #22]
 8016e2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d202      	bcs.n	8016e3a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8016e34:	f06f 0301 	mvn.w	r3, #1
 8016e38:	e09c      	b.n	8016f74 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 8016e3a:	8afb      	ldrh	r3, [r7, #22]
 8016e3c:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e40:	3301      	adds	r3, #1
 8016e42:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 8016e44:	e79e      	b.n	8016d84 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8016e46:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016e4a:	2b04      	cmp	r3, #4
 8016e4c:	d106      	bne.n	8016e5c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7f6 f80b 	bl	800ce6c <lwip_htonl>
 8016e56:	4603      	mov	r3, r0
 8016e58:	60fb      	str	r3, [r7, #12]
 8016e5a:	e011      	b.n	8016e80 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016e60:	2b01      	cmp	r3, #1
 8016e62:	d009      	beq.n	8016e78 <dhcp_parse_reply+0x4a0>
 8016e64:	4b45      	ldr	r3, [pc, #276]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016e66:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8016e6a:	494b      	ldr	r1, [pc, #300]	@ (8016f98 <dhcp_parse_reply+0x5c0>)
 8016e6c:	4845      	ldr	r0, [pc, #276]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016e6e:	f003 f951 	bl	801a114 <iprintf>
 8016e72:	f06f 0305 	mvn.w	r3, #5
 8016e76:	e07d      	b.n	8016f74 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8016e78:	f107 030c 	add.w	r3, r7, #12
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016e80:	4a42      	ldr	r2, [pc, #264]	@ (8016f8c <dhcp_parse_reply+0x5b4>)
 8016e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e84:	4413      	add	r3, r2
 8016e86:	2201      	movs	r2, #1
 8016e88:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016e8a:	68fa      	ldr	r2, [r7, #12]
 8016e8c:	4941      	ldr	r1, [pc, #260]	@ (8016f94 <dhcp_parse_reply+0x5bc>)
 8016e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e96:	895b      	ldrh	r3, [r3, #10]
 8016e98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	d327      	bcc.n	8016ef0 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8016ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ea2:	895b      	ldrh	r3, [r3, #10]
 8016ea4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016ea8:	1ad3      	subs	r3, r2, r3
 8016eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8016eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eb0:	895b      	ldrh	r3, [r3, #10]
 8016eb2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016eb4:	1ad3      	subs	r3, r2, r3
 8016eb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 8016eb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016ebc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d213      	bcs.n	8016eea <dhcp_parse_reply+0x512>
        q = q->next;
 8016ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d109      	bne.n	8016ee2 <dhcp_parse_reply+0x50a>
 8016ece:	4b2b      	ldr	r3, [pc, #172]	@ (8016f7c <dhcp_parse_reply+0x5a4>)
 8016ed0:	f240 629d 	movw	r2, #1693	@ 0x69d
 8016ed4:	4931      	ldr	r1, [pc, #196]	@ (8016f9c <dhcp_parse_reply+0x5c4>)
 8016ed6:	482b      	ldr	r0, [pc, #172]	@ (8016f84 <dhcp_parse_reply+0x5ac>)
 8016ed8:	f003 f91c 	bl	801a114 <iprintf>
 8016edc:	f06f 0305 	mvn.w	r3, #5
 8016ee0:	e048      	b.n	8016f74 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8016ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8016ee8:	e002      	b.n	8016ef0 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016eea:	f06f 0301 	mvn.w	r3, #1
 8016eee:	e041      	b.n	8016f74 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d00c      	beq.n	8016f10 <dhcp_parse_reply+0x538>
 8016ef6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016efa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d207      	bcs.n	8016f10 <dhcp_parse_reply+0x538>
 8016f00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016f06:	4413      	add	r3, r2
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2bff      	cmp	r3, #255	@ 0xff
 8016f0c:	f47f ada8 	bne.w	8016a60 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016f10:	4b1e      	ldr	r3, [pc, #120]	@ (8016f8c <dhcp_parse_reply+0x5b4>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d018      	beq.n	8016f4a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016f18:	4b1e      	ldr	r3, [pc, #120]	@ (8016f94 <dhcp_parse_reply+0x5bc>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8016f8c <dhcp_parse_reply+0x5b4>)
 8016f20:	2200      	movs	r2, #0
 8016f22:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d102      	bne.n	8016f30 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f2e:	e00c      	b.n	8016f4a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	2b02      	cmp	r3, #2
 8016f34:	d102      	bne.n	8016f3c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8016f36:	2301      	movs	r3, #1
 8016f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f3a:	e006      	b.n	8016f4a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2b03      	cmp	r3, #3
 8016f40:	d103      	bne.n	8016f4a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8016f42:	2301      	movs	r3, #1
 8016f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 8016f46:	2301      	movs	r3, #1
 8016f48:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d006      	beq.n	8016f5e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 8016f54:	236c      	movs	r3, #108	@ 0x6c
 8016f56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016f58:	23ec      	movs	r3, #236	@ 0xec
 8016f5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016f5c:	e559      	b.n	8016a12 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d006      	beq.n	8016f72 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8016f64:	2300      	movs	r3, #0
 8016f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8016f68:	232c      	movs	r3, #44	@ 0x2c
 8016f6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016f6c:	236c      	movs	r3, #108	@ 0x6c
 8016f6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 8016f70:	e54f      	b.n	8016a12 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016f72:	2300      	movs	r3, #0
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3748      	adds	r7, #72	@ 0x48
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	0801e5d4 	.word	0x0801e5d4
 8016f80:	0801e85c 	.word	0x0801e85c
 8016f84:	0801e634 	.word	0x0801e634
 8016f88:	0801e8a0 	.word	0x0801e8a0
 8016f8c:	200176f0 	.word	0x200176f0
 8016f90:	0801e8b4 	.word	0x0801e8b4
 8016f94:	200176d0 	.word	0x200176d0
 8016f98:	0801e8cc 	.word	0x0801e8cc
 8016f9c:	0801e8e0 	.word	0x0801e8e0

08016fa0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b08a      	sub	sp, #40	@ 0x28
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016fae:	4b5e      	ldr	r3, [pc, #376]	@ (8017128 <dhcp_recv+0x188>)
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016fb4:	69fb      	ldr	r3, [r7, #28]
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f000 809a 	beq.w	80170fc <dhcp_recv+0x15c>
 8016fc8:	69bb      	ldr	r3, [r7, #24]
 8016fca:	791b      	ldrb	r3, [r3, #4]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	f000 8095 	beq.w	80170fc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	895b      	ldrh	r3, [r3, #10]
 8016fd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016fd8:	f240 8092 	bls.w	8017100 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	f040 808f 	bne.w	8017104 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	74fb      	strb	r3, [r7, #19]
 8016fea:	e00e      	b.n	801700a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016fec:	7cfb      	ldrb	r3, [r7, #19]
 8016fee:	69fa      	ldr	r2, [r7, #28]
 8016ff0:	4413      	add	r3, r2
 8016ff2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8016ff6:	7cfb      	ldrb	r3, [r7, #19]
 8016ff8:	6979      	ldr	r1, [r7, #20]
 8016ffa:	440b      	add	r3, r1
 8016ffc:	7f1b      	ldrb	r3, [r3, #28]
 8016ffe:	429a      	cmp	r2, r3
 8017000:	f040 8082 	bne.w	8017108 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017004:	7cfb      	ldrb	r3, [r7, #19]
 8017006:	3301      	adds	r3, #1
 8017008:	74fb      	strb	r3, [r7, #19]
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017010:	7cfa      	ldrb	r2, [r7, #19]
 8017012:	429a      	cmp	r2, r3
 8017014:	d202      	bcs.n	801701c <dhcp_recv+0x7c>
 8017016:	7cfb      	ldrb	r3, [r7, #19]
 8017018:	2b05      	cmp	r3, #5
 801701a:	d9e7      	bls.n	8016fec <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	4618      	mov	r0, r3
 8017022:	f7f5 ff23 	bl	800ce6c <lwip_htonl>
 8017026:	4602      	mov	r2, r0
 8017028:	69bb      	ldr	r3, [r7, #24]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	429a      	cmp	r2, r3
 801702e:	d16d      	bne.n	801710c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017030:	69b9      	ldr	r1, [r7, #24]
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f7ff fcd0 	bl	80169d8 <dhcp_parse_reply>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d168      	bne.n	8017110 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801703e:	4b3b      	ldr	r3, [pc, #236]	@ (801712c <dhcp_recv+0x18c>)
 8017040:	785b      	ldrb	r3, [r3, #1]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d066      	beq.n	8017114 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801704c:	4b38      	ldr	r3, [pc, #224]	@ (8017130 <dhcp_recv+0x190>)
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017058:	2b05      	cmp	r3, #5
 801705a:	d12a      	bne.n	80170b2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801705c:	69bb      	ldr	r3, [r7, #24]
 801705e:	795b      	ldrb	r3, [r3, #5]
 8017060:	2b01      	cmp	r3, #1
 8017062:	d112      	bne.n	801708a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017066:	69f8      	ldr	r0, [r7, #28]
 8017068:	f7fe fe12 	bl	8015c90 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017072:	f003 0308 	and.w	r3, r3, #8
 8017076:	2b00      	cmp	r3, #0
 8017078:	d003      	beq.n	8017082 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801707a:	69f8      	ldr	r0, [r7, #28]
 801707c:	f7fe fb82 	bl	8015784 <dhcp_check>
 8017080:	e04b      	b.n	801711a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017082:	69f8      	ldr	r0, [r7, #28]
 8017084:	f7ff f862 	bl	801614c <dhcp_bind>
 8017088:	e047      	b.n	801711a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801708a:	69bb      	ldr	r3, [r7, #24]
 801708c:	795b      	ldrb	r3, [r3, #5]
 801708e:	2b03      	cmp	r3, #3
 8017090:	d007      	beq.n	80170a2 <dhcp_recv+0x102>
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	795b      	ldrb	r3, [r3, #5]
 8017096:	2b04      	cmp	r3, #4
 8017098:	d003      	beq.n	80170a2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801709e:	2b05      	cmp	r3, #5
 80170a0:	d13b      	bne.n	801711a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 80170a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170a4:	69f8      	ldr	r0, [r7, #28]
 80170a6:	f7fe fdf3 	bl	8015c90 <dhcp_handle_ack>
      dhcp_bind(netif);
 80170aa:	69f8      	ldr	r0, [r7, #28]
 80170ac:	f7ff f84e 	bl	801614c <dhcp_bind>
 80170b0:	e033      	b.n	801711a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80170b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80170b6:	2b06      	cmp	r3, #6
 80170b8:	d113      	bne.n	80170e2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80170be:	2b03      	cmp	r3, #3
 80170c0:	d00b      	beq.n	80170da <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	795b      	ldrb	r3, [r3, #5]
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d007      	beq.n	80170da <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80170ce:	2b04      	cmp	r3, #4
 80170d0:	d003      	beq.n	80170da <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	795b      	ldrb	r3, [r3, #5]
 80170d6:	2b05      	cmp	r3, #5
 80170d8:	d103      	bne.n	80170e2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80170da:	69f8      	ldr	r0, [r7, #28]
 80170dc:	f7fe fb38 	bl	8015750 <dhcp_handle_nak>
 80170e0:	e01b      	b.n	801711a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80170e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80170e6:	2b02      	cmp	r3, #2
 80170e8:	d116      	bne.n	8017118 <dhcp_recv+0x178>
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	795b      	ldrb	r3, [r3, #5]
 80170ee:	2b06      	cmp	r3, #6
 80170f0:	d112      	bne.n	8017118 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80170f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170f4:	69f8      	ldr	r0, [r7, #28]
 80170f6:	f7fe fb79 	bl	80157ec <dhcp_handle_offer>
 80170fa:	e00e      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80170fc:	bf00      	nop
 80170fe:	e00c      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017100:	bf00      	nop
 8017102:	e00a      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017104:	bf00      	nop
 8017106:	e008      	b.n	801711a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017108:	bf00      	nop
 801710a:	e006      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801710c:	bf00      	nop
 801710e:	e004      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017110:	bf00      	nop
 8017112:	e002      	b.n	801711a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017114:	bf00      	nop
 8017116:	e000      	b.n	801711a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017118:	bf00      	nop
  pbuf_free(p);
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f7f7 fb68 	bl	800e7f0 <pbuf_free>
}
 8017120:	bf00      	nop
 8017122:	3728      	adds	r7, #40	@ 0x28
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	2000b148 	.word	0x2000b148
 801712c:	200176f0 	.word	0x200176f0
 8017130:	200176d0 	.word	0x200176d0

08017134 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b088      	sub	sp, #32
 8017138:	af00      	add	r7, sp, #0
 801713a:	60f8      	str	r0, [r7, #12]
 801713c:	60b9      	str	r1, [r7, #8]
 801713e:	603b      	str	r3, [r7, #0]
 8017140:	4613      	mov	r3, r2
 8017142:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d108      	bne.n	801715c <dhcp_create_msg+0x28>
 801714a:	4b5f      	ldr	r3, [pc, #380]	@ (80172c8 <dhcp_create_msg+0x194>)
 801714c:	f240 7269 	movw	r2, #1897	@ 0x769
 8017150:	495e      	ldr	r1, [pc, #376]	@ (80172cc <dhcp_create_msg+0x198>)
 8017152:	485f      	ldr	r0, [pc, #380]	@ (80172d0 <dhcp_create_msg+0x19c>)
 8017154:	f002 ffde 	bl	801a114 <iprintf>
 8017158:	2300      	movs	r3, #0
 801715a:	e0b1      	b.n	80172c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d108      	bne.n	8017174 <dhcp_create_msg+0x40>
 8017162:	4b59      	ldr	r3, [pc, #356]	@ (80172c8 <dhcp_create_msg+0x194>)
 8017164:	f240 726a 	movw	r2, #1898	@ 0x76a
 8017168:	495a      	ldr	r1, [pc, #360]	@ (80172d4 <dhcp_create_msg+0x1a0>)
 801716a:	4859      	ldr	r0, [pc, #356]	@ (80172d0 <dhcp_create_msg+0x19c>)
 801716c:	f002 ffd2 	bl	801a114 <iprintf>
 8017170:	2300      	movs	r3, #0
 8017172:	e0a5      	b.n	80172c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017174:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017178:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801717c:	2036      	movs	r0, #54	@ 0x36
 801717e:	f7f7 f853 	bl	800e228 <pbuf_alloc>
 8017182:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017184:	69bb      	ldr	r3, [r7, #24]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d101      	bne.n	801718e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	e098      	b.n	80172c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801718e:	69bb      	ldr	r3, [r7, #24]
 8017190:	895b      	ldrh	r3, [r3, #10]
 8017192:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8017196:	d206      	bcs.n	80171a6 <dhcp_create_msg+0x72>
 8017198:	4b4b      	ldr	r3, [pc, #300]	@ (80172c8 <dhcp_create_msg+0x194>)
 801719a:	f240 7271 	movw	r2, #1905	@ 0x771
 801719e:	494e      	ldr	r1, [pc, #312]	@ (80172d8 <dhcp_create_msg+0x1a4>)
 80171a0:	484b      	ldr	r0, [pc, #300]	@ (80172d0 <dhcp_create_msg+0x19c>)
 80171a2:	f002 ffb7 	bl	801a114 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80171a6:	79fb      	ldrb	r3, [r7, #7]
 80171a8:	2b03      	cmp	r3, #3
 80171aa:	d103      	bne.n	80171b4 <dhcp_create_msg+0x80>
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	795b      	ldrb	r3, [r3, #5]
 80171b0:	2b03      	cmp	r3, #3
 80171b2:	d10d      	bne.n	80171d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	799b      	ldrb	r3, [r3, #6]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d105      	bne.n	80171c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80171bc:	f002 feaa 	bl	8019f14 <rand>
 80171c0:	4603      	mov	r3, r0
 80171c2:	461a      	mov	r2, r3
 80171c4:	4b45      	ldr	r3, [pc, #276]	@ (80172dc <dhcp_create_msg+0x1a8>)
 80171c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80171c8:	4b44      	ldr	r3, [pc, #272]	@ (80172dc <dhcp_create_msg+0x1a8>)
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80171d0:	69bb      	ldr	r3, [r7, #24]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80171d6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80171da:	2100      	movs	r1, #0
 80171dc:	6978      	ldr	r0, [r7, #20]
 80171de:	f003 f963 	bl	801a4a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	2201      	movs	r2, #1
 80171e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80171e8:	697b      	ldr	r3, [r7, #20]
 80171ea:	2201      	movs	r2, #1
 80171ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7f5 fe35 	bl	800ce6c <lwip_htonl>
 8017202:	4602      	mov	r2, r0
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017208:	79fb      	ldrb	r3, [r7, #7]
 801720a:	2b08      	cmp	r3, #8
 801720c:	d010      	beq.n	8017230 <dhcp_create_msg+0xfc>
 801720e:	79fb      	ldrb	r3, [r7, #7]
 8017210:	2b04      	cmp	r3, #4
 8017212:	d00d      	beq.n	8017230 <dhcp_create_msg+0xfc>
 8017214:	79fb      	ldrb	r3, [r7, #7]
 8017216:	2b07      	cmp	r3, #7
 8017218:	d00a      	beq.n	8017230 <dhcp_create_msg+0xfc>
 801721a:	79fb      	ldrb	r3, [r7, #7]
 801721c:	2b03      	cmp	r3, #3
 801721e:	d10c      	bne.n	801723a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017224:	2b05      	cmp	r3, #5
 8017226:	d003      	beq.n	8017230 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	795b      	ldrb	r3, [r3, #5]
 801722c:	2b04      	cmp	r3, #4
 801722e:	d104      	bne.n	801723a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	3304      	adds	r3, #4
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801723a:	2300      	movs	r3, #0
 801723c:	83fb      	strh	r3, [r7, #30]
 801723e:	e00c      	b.n	801725a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017240:	8bfa      	ldrh	r2, [r7, #30]
 8017242:	8bfb      	ldrh	r3, [r7, #30]
 8017244:	68f9      	ldr	r1, [r7, #12]
 8017246:	440a      	add	r2, r1
 8017248:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801724c:	697a      	ldr	r2, [r7, #20]
 801724e:	4413      	add	r3, r2
 8017250:	460a      	mov	r2, r1
 8017252:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017254:	8bfb      	ldrh	r3, [r7, #30]
 8017256:	3301      	adds	r3, #1
 8017258:	83fb      	strh	r3, [r7, #30]
 801725a:	8bfb      	ldrh	r3, [r7, #30]
 801725c:	2b05      	cmp	r3, #5
 801725e:	d9ef      	bls.n	8017240 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	2200      	movs	r2, #0
 8017264:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017268:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801726c:	2200      	movs	r2, #0
 801726e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8017272:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8017276:	2200      	movs	r2, #0
 8017278:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801727c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8017280:	2200      	movs	r2, #0
 8017282:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017286:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017290:	2301      	movs	r3, #1
 8017292:	2235      	movs	r2, #53	@ 0x35
 8017294:	2000      	movs	r0, #0
 8017296:	f7ff facf 	bl	8016838 <dhcp_option>
 801729a:	4603      	mov	r3, r0
 801729c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80172a4:	79fa      	ldrb	r2, [r7, #7]
 80172a6:	8a7b      	ldrh	r3, [r7, #18]
 80172a8:	4618      	mov	r0, r3
 80172aa:	f7ff faf9 	bl	80168a0 <dhcp_option_byte>
 80172ae:	4603      	mov	r3, r0
 80172b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d002      	beq.n	80172be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	8a7a      	ldrh	r2, [r7, #18]
 80172bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80172be:	69bb      	ldr	r3, [r7, #24]
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3720      	adds	r7, #32
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}
 80172c8:	0801e5d4 	.word	0x0801e5d4
 80172cc:	0801e8f4 	.word	0x0801e8f4
 80172d0:	0801e634 	.word	0x0801e634
 80172d4:	0801e914 	.word	0x0801e914
 80172d8:	0801e934 	.word	0x0801e934
 80172dc:	20017700 	.word	0x20017700

080172e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b084      	sub	sp, #16
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	4603      	mov	r3, r0
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
 80172ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80172ee:	89fb      	ldrh	r3, [r7, #14]
 80172f0:	1c5a      	adds	r2, r3, #1
 80172f2:	81fa      	strh	r2, [r7, #14]
 80172f4:	461a      	mov	r2, r3
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	4413      	add	r3, r2
 80172fa:	22ff      	movs	r2, #255	@ 0xff
 80172fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80172fe:	e007      	b.n	8017310 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017300:	89fb      	ldrh	r3, [r7, #14]
 8017302:	1c5a      	adds	r2, r3, #1
 8017304:	81fa      	strh	r2, [r7, #14]
 8017306:	461a      	mov	r2, r3
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	4413      	add	r3, r2
 801730c:	2200      	movs	r2, #0
 801730e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017310:	89fb      	ldrh	r3, [r7, #14]
 8017312:	2b43      	cmp	r3, #67	@ 0x43
 8017314:	d904      	bls.n	8017320 <dhcp_option_trailer+0x40>
 8017316:	89fb      	ldrh	r3, [r7, #14]
 8017318:	f003 0303 	and.w	r3, r3, #3
 801731c:	2b00      	cmp	r3, #0
 801731e:	d002      	beq.n	8017326 <dhcp_option_trailer+0x46>
 8017320:	89fb      	ldrh	r3, [r7, #14]
 8017322:	2b43      	cmp	r3, #67	@ 0x43
 8017324:	d9ec      	bls.n	8017300 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017326:	89fb      	ldrh	r3, [r7, #14]
 8017328:	33f0      	adds	r3, #240	@ 0xf0
 801732a:	b29b      	uxth	r3, r3
 801732c:	4619      	mov	r1, r3
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f7f7 f8d8 	bl	800e4e4 <pbuf_realloc>
}
 8017334:	bf00      	nop
 8017336:	3710      	adds	r7, #16
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}

0801733c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801733c:	b480      	push	{r7}
 801733e:	b085      	sub	sp, #20
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d017      	beq.n	801737a <dhcp_supplied_address+0x3e>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801734e:	2b00      	cmp	r3, #0
 8017350:	d013      	beq.n	801737a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017356:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	795b      	ldrb	r3, [r3, #5]
 801735c:	2b0a      	cmp	r3, #10
 801735e:	d007      	beq.n	8017370 <dhcp_supplied_address+0x34>
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	795b      	ldrb	r3, [r3, #5]
 8017364:	2b05      	cmp	r3, #5
 8017366:	d003      	beq.n	8017370 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801736c:	2b04      	cmp	r3, #4
 801736e:	d101      	bne.n	8017374 <dhcp_supplied_address+0x38>
 8017370:	2301      	movs	r3, #1
 8017372:	e000      	b.n	8017376 <dhcp_supplied_address+0x3a>
 8017374:	2300      	movs	r3, #0
 8017376:	b2db      	uxtb	r3, r3
 8017378:	e000      	b.n	801737c <dhcp_supplied_address+0x40>
  }
  return 0;
 801737a:	2300      	movs	r3, #0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3714      	adds	r7, #20
 8017380:	46bd      	mov	sp, r7
 8017382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017386:	4770      	bx	lr

08017388 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017390:	492b      	ldr	r1, [pc, #172]	@ (8017440 <etharp_free_entry+0xb8>)
 8017392:	687a      	ldr	r2, [r7, #4]
 8017394:	4613      	mov	r3, r2
 8017396:	005b      	lsls	r3, r3, #1
 8017398:	4413      	add	r3, r2
 801739a:	00db      	lsls	r3, r3, #3
 801739c:	440b      	add	r3, r1
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d013      	beq.n	80173cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80173a4:	4926      	ldr	r1, [pc, #152]	@ (8017440 <etharp_free_entry+0xb8>)
 80173a6:	687a      	ldr	r2, [r7, #4]
 80173a8:	4613      	mov	r3, r2
 80173aa:	005b      	lsls	r3, r3, #1
 80173ac:	4413      	add	r3, r2
 80173ae:	00db      	lsls	r3, r3, #3
 80173b0:	440b      	add	r3, r1
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	4618      	mov	r0, r3
 80173b6:	f7f7 fa1b 	bl	800e7f0 <pbuf_free>
    arp_table[i].q = NULL;
 80173ba:	4921      	ldr	r1, [pc, #132]	@ (8017440 <etharp_free_entry+0xb8>)
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	4613      	mov	r3, r2
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	00db      	lsls	r3, r3, #3
 80173c6:	440b      	add	r3, r1
 80173c8:	2200      	movs	r2, #0
 80173ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80173cc:	491c      	ldr	r1, [pc, #112]	@ (8017440 <etharp_free_entry+0xb8>)
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	4613      	mov	r3, r2
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	4413      	add	r3, r2
 80173d6:	00db      	lsls	r3, r3, #3
 80173d8:	440b      	add	r3, r1
 80173da:	3314      	adds	r3, #20
 80173dc:	2200      	movs	r2, #0
 80173de:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80173e0:	4917      	ldr	r1, [pc, #92]	@ (8017440 <etharp_free_entry+0xb8>)
 80173e2:	687a      	ldr	r2, [r7, #4]
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	3312      	adds	r3, #18
 80173f0:	2200      	movs	r2, #0
 80173f2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 80173f4:	4912      	ldr	r1, [pc, #72]	@ (8017440 <etharp_free_entry+0xb8>)
 80173f6:	687a      	ldr	r2, [r7, #4]
 80173f8:	4613      	mov	r3, r2
 80173fa:	005b      	lsls	r3, r3, #1
 80173fc:	4413      	add	r3, r2
 80173fe:	00db      	lsls	r3, r3, #3
 8017400:	440b      	add	r3, r1
 8017402:	3308      	adds	r3, #8
 8017404:	2200      	movs	r2, #0
 8017406:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017408:	490d      	ldr	r1, [pc, #52]	@ (8017440 <etharp_free_entry+0xb8>)
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	4613      	mov	r3, r2
 801740e:	005b      	lsls	r3, r3, #1
 8017410:	4413      	add	r3, r2
 8017412:	00db      	lsls	r3, r3, #3
 8017414:	440b      	add	r3, r1
 8017416:	3304      	adds	r3, #4
 8017418:	2200      	movs	r2, #0
 801741a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801741c:	4908      	ldr	r1, [pc, #32]	@ (8017440 <etharp_free_entry+0xb8>)
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	4613      	mov	r3, r2
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	4413      	add	r3, r2
 8017426:	00db      	lsls	r3, r3, #3
 8017428:	440b      	add	r3, r1
 801742a:	3308      	adds	r3, #8
 801742c:	4a05      	ldr	r2, [pc, #20]	@ (8017444 <etharp_free_entry+0xbc>)
 801742e:	3304      	adds	r3, #4
 8017430:	6810      	ldr	r0, [r2, #0]
 8017432:	6018      	str	r0, [r3, #0]
 8017434:	8892      	ldrh	r2, [r2, #4]
 8017436:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017438:	bf00      	nop
 801743a:	3708      	adds	r7, #8
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	20017704 	.word	0x20017704
 8017444:	08023044 	.word	0x08023044

08017448 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801744e:	2300      	movs	r3, #0
 8017450:	607b      	str	r3, [r7, #4]
 8017452:	e096      	b.n	8017582 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017454:	494f      	ldr	r1, [pc, #316]	@ (8017594 <etharp_tmr+0x14c>)
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	4613      	mov	r3, r2
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	00db      	lsls	r3, r3, #3
 8017460:	440b      	add	r3, r1
 8017462:	3314      	adds	r3, #20
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017468:	78fb      	ldrb	r3, [r7, #3]
 801746a:	2b00      	cmp	r3, #0
 801746c:	f000 8086 	beq.w	801757c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017470:	4948      	ldr	r1, [pc, #288]	@ (8017594 <etharp_tmr+0x14c>)
 8017472:	687a      	ldr	r2, [r7, #4]
 8017474:	4613      	mov	r3, r2
 8017476:	005b      	lsls	r3, r3, #1
 8017478:	4413      	add	r3, r2
 801747a:	00db      	lsls	r3, r3, #3
 801747c:	440b      	add	r3, r1
 801747e:	3312      	adds	r3, #18
 8017480:	881b      	ldrh	r3, [r3, #0]
 8017482:	3301      	adds	r3, #1
 8017484:	b298      	uxth	r0, r3
 8017486:	4943      	ldr	r1, [pc, #268]	@ (8017594 <etharp_tmr+0x14c>)
 8017488:	687a      	ldr	r2, [r7, #4]
 801748a:	4613      	mov	r3, r2
 801748c:	005b      	lsls	r3, r3, #1
 801748e:	4413      	add	r3, r2
 8017490:	00db      	lsls	r3, r3, #3
 8017492:	440b      	add	r3, r1
 8017494:	3312      	adds	r3, #18
 8017496:	4602      	mov	r2, r0
 8017498:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801749a:	493e      	ldr	r1, [pc, #248]	@ (8017594 <etharp_tmr+0x14c>)
 801749c:	687a      	ldr	r2, [r7, #4]
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	440b      	add	r3, r1
 80174a8:	3312      	adds	r3, #18
 80174aa:	881b      	ldrh	r3, [r3, #0]
 80174ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80174b0:	d215      	bcs.n	80174de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80174b2:	4938      	ldr	r1, [pc, #224]	@ (8017594 <etharp_tmr+0x14c>)
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	4613      	mov	r3, r2
 80174b8:	005b      	lsls	r3, r3, #1
 80174ba:	4413      	add	r3, r2
 80174bc:	00db      	lsls	r3, r3, #3
 80174be:	440b      	add	r3, r1
 80174c0:	3314      	adds	r3, #20
 80174c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d10e      	bne.n	80174e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80174c8:	4932      	ldr	r1, [pc, #200]	@ (8017594 <etharp_tmr+0x14c>)
 80174ca:	687a      	ldr	r2, [r7, #4]
 80174cc:	4613      	mov	r3, r2
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	4413      	add	r3, r2
 80174d2:	00db      	lsls	r3, r3, #3
 80174d4:	440b      	add	r3, r1
 80174d6:	3312      	adds	r3, #18
 80174d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80174da:	2b04      	cmp	r3, #4
 80174dc:	d903      	bls.n	80174e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f7ff ff52 	bl	8017388 <etharp_free_entry>
 80174e4:	e04a      	b.n	801757c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80174e6:	492b      	ldr	r1, [pc, #172]	@ (8017594 <etharp_tmr+0x14c>)
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	4613      	mov	r3, r2
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	4413      	add	r3, r2
 80174f0:	00db      	lsls	r3, r3, #3
 80174f2:	440b      	add	r3, r1
 80174f4:	3314      	adds	r3, #20
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b03      	cmp	r3, #3
 80174fa:	d10a      	bne.n	8017512 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80174fc:	4925      	ldr	r1, [pc, #148]	@ (8017594 <etharp_tmr+0x14c>)
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	4613      	mov	r3, r2
 8017502:	005b      	lsls	r3, r3, #1
 8017504:	4413      	add	r3, r2
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	440b      	add	r3, r1
 801750a:	3314      	adds	r3, #20
 801750c:	2204      	movs	r2, #4
 801750e:	701a      	strb	r2, [r3, #0]
 8017510:	e034      	b.n	801757c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017512:	4920      	ldr	r1, [pc, #128]	@ (8017594 <etharp_tmr+0x14c>)
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	4613      	mov	r3, r2
 8017518:	005b      	lsls	r3, r3, #1
 801751a:	4413      	add	r3, r2
 801751c:	00db      	lsls	r3, r3, #3
 801751e:	440b      	add	r3, r1
 8017520:	3314      	adds	r3, #20
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	2b04      	cmp	r3, #4
 8017526:	d10a      	bne.n	801753e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017528:	491a      	ldr	r1, [pc, #104]	@ (8017594 <etharp_tmr+0x14c>)
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	4613      	mov	r3, r2
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	4413      	add	r3, r2
 8017532:	00db      	lsls	r3, r3, #3
 8017534:	440b      	add	r3, r1
 8017536:	3314      	adds	r3, #20
 8017538:	2202      	movs	r2, #2
 801753a:	701a      	strb	r2, [r3, #0]
 801753c:	e01e      	b.n	801757c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801753e:	4915      	ldr	r1, [pc, #84]	@ (8017594 <etharp_tmr+0x14c>)
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	4613      	mov	r3, r2
 8017544:	005b      	lsls	r3, r3, #1
 8017546:	4413      	add	r3, r2
 8017548:	00db      	lsls	r3, r3, #3
 801754a:	440b      	add	r3, r1
 801754c:	3314      	adds	r3, #20
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	2b01      	cmp	r3, #1
 8017552:	d113      	bne.n	801757c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017554:	490f      	ldr	r1, [pc, #60]	@ (8017594 <etharp_tmr+0x14c>)
 8017556:	687a      	ldr	r2, [r7, #4]
 8017558:	4613      	mov	r3, r2
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	4413      	add	r3, r2
 801755e:	00db      	lsls	r3, r3, #3
 8017560:	440b      	add	r3, r1
 8017562:	3308      	adds	r3, #8
 8017564:	6818      	ldr	r0, [r3, #0]
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	4613      	mov	r3, r2
 801756a:	005b      	lsls	r3, r3, #1
 801756c:	4413      	add	r3, r2
 801756e:	00db      	lsls	r3, r3, #3
 8017570:	4a08      	ldr	r2, [pc, #32]	@ (8017594 <etharp_tmr+0x14c>)
 8017572:	4413      	add	r3, r2
 8017574:	3304      	adds	r3, #4
 8017576:	4619      	mov	r1, r3
 8017578:	f000 fe72 	bl	8018260 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	3301      	adds	r3, #1
 8017580:	607b      	str	r3, [r7, #4]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2b09      	cmp	r3, #9
 8017586:	f77f af65 	ble.w	8017454 <etharp_tmr+0xc>
      }
    }
  }
}
 801758a:	bf00      	nop
 801758c:	bf00      	nop
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	20017704 	.word	0x20017704

08017598 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b08a      	sub	sp, #40	@ 0x28
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	460b      	mov	r3, r1
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80175a6:	230a      	movs	r3, #10
 80175a8:	843b      	strh	r3, [r7, #32]
 80175aa:	230a      	movs	r3, #10
 80175ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80175ae:	230a      	movs	r3, #10
 80175b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80175b2:	2300      	movs	r3, #0
 80175b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80175b6:	230a      	movs	r3, #10
 80175b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80175ba:	2300      	movs	r3, #0
 80175bc:	83bb      	strh	r3, [r7, #28]
 80175be:	2300      	movs	r3, #0
 80175c0:	837b      	strh	r3, [r7, #26]
 80175c2:	2300      	movs	r3, #0
 80175c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80175c6:	2300      	movs	r3, #0
 80175c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80175ca:	e0ae      	b.n	801772a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80175cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80175d0:	49a6      	ldr	r1, [pc, #664]	@ (801786c <etharp_find_entry+0x2d4>)
 80175d2:	4613      	mov	r3, r2
 80175d4:	005b      	lsls	r3, r3, #1
 80175d6:	4413      	add	r3, r2
 80175d8:	00db      	lsls	r3, r3, #3
 80175da:	440b      	add	r3, r1
 80175dc:	3314      	adds	r3, #20
 80175de:	781b      	ldrb	r3, [r3, #0]
 80175e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80175e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80175e6:	2b0a      	cmp	r3, #10
 80175e8:	d105      	bne.n	80175f6 <etharp_find_entry+0x5e>
 80175ea:	7dfb      	ldrb	r3, [r7, #23]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d102      	bne.n	80175f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80175f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80175f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80175f4:	e095      	b.n	8017722 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80175f6:	7dfb      	ldrb	r3, [r7, #23]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	f000 8092 	beq.w	8017722 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80175fe:	7dfb      	ldrb	r3, [r7, #23]
 8017600:	2b01      	cmp	r3, #1
 8017602:	d009      	beq.n	8017618 <etharp_find_entry+0x80>
 8017604:	7dfb      	ldrb	r3, [r7, #23]
 8017606:	2b01      	cmp	r3, #1
 8017608:	d806      	bhi.n	8017618 <etharp_find_entry+0x80>
 801760a:	4b99      	ldr	r3, [pc, #612]	@ (8017870 <etharp_find_entry+0x2d8>)
 801760c:	f240 1223 	movw	r2, #291	@ 0x123
 8017610:	4998      	ldr	r1, [pc, #608]	@ (8017874 <etharp_find_entry+0x2dc>)
 8017612:	4899      	ldr	r0, [pc, #612]	@ (8017878 <etharp_find_entry+0x2e0>)
 8017614:	f002 fd7e 	bl	801a114 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d020      	beq.n	8017660 <etharp_find_entry+0xc8>
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	6819      	ldr	r1, [r3, #0]
 8017622:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017626:	4891      	ldr	r0, [pc, #580]	@ (801786c <etharp_find_entry+0x2d4>)
 8017628:	4613      	mov	r3, r2
 801762a:	005b      	lsls	r3, r3, #1
 801762c:	4413      	add	r3, r2
 801762e:	00db      	lsls	r3, r3, #3
 8017630:	4403      	add	r3, r0
 8017632:	3304      	adds	r3, #4
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	4299      	cmp	r1, r3
 8017638:	d112      	bne.n	8017660 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d00c      	beq.n	801765a <etharp_find_entry+0xc2>
 8017640:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017644:	4989      	ldr	r1, [pc, #548]	@ (801786c <etharp_find_entry+0x2d4>)
 8017646:	4613      	mov	r3, r2
 8017648:	005b      	lsls	r3, r3, #1
 801764a:	4413      	add	r3, r2
 801764c:	00db      	lsls	r3, r3, #3
 801764e:	440b      	add	r3, r1
 8017650:	3308      	adds	r3, #8
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	687a      	ldr	r2, [r7, #4]
 8017656:	429a      	cmp	r2, r3
 8017658:	d102      	bne.n	8017660 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801765a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801765e:	e100      	b.n	8017862 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017660:	7dfb      	ldrb	r3, [r7, #23]
 8017662:	2b01      	cmp	r3, #1
 8017664:	d140      	bne.n	80176e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017666:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801766a:	4980      	ldr	r1, [pc, #512]	@ (801786c <etharp_find_entry+0x2d4>)
 801766c:	4613      	mov	r3, r2
 801766e:	005b      	lsls	r3, r3, #1
 8017670:	4413      	add	r3, r2
 8017672:	00db      	lsls	r3, r3, #3
 8017674:	440b      	add	r3, r1
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d01a      	beq.n	80176b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801767c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017680:	497a      	ldr	r1, [pc, #488]	@ (801786c <etharp_find_entry+0x2d4>)
 8017682:	4613      	mov	r3, r2
 8017684:	005b      	lsls	r3, r3, #1
 8017686:	4413      	add	r3, r2
 8017688:	00db      	lsls	r3, r3, #3
 801768a:	440b      	add	r3, r1
 801768c:	3312      	adds	r3, #18
 801768e:	881b      	ldrh	r3, [r3, #0]
 8017690:	8bba      	ldrh	r2, [r7, #28]
 8017692:	429a      	cmp	r2, r3
 8017694:	d845      	bhi.n	8017722 <etharp_find_entry+0x18a>
            old_queue = i;
 8017696:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017698:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801769a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801769e:	4973      	ldr	r1, [pc, #460]	@ (801786c <etharp_find_entry+0x2d4>)
 80176a0:	4613      	mov	r3, r2
 80176a2:	005b      	lsls	r3, r3, #1
 80176a4:	4413      	add	r3, r2
 80176a6:	00db      	lsls	r3, r3, #3
 80176a8:	440b      	add	r3, r1
 80176aa:	3312      	adds	r3, #18
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	83bb      	strh	r3, [r7, #28]
 80176b0:	e037      	b.n	8017722 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80176b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80176b6:	496d      	ldr	r1, [pc, #436]	@ (801786c <etharp_find_entry+0x2d4>)
 80176b8:	4613      	mov	r3, r2
 80176ba:	005b      	lsls	r3, r3, #1
 80176bc:	4413      	add	r3, r2
 80176be:	00db      	lsls	r3, r3, #3
 80176c0:	440b      	add	r3, r1
 80176c2:	3312      	adds	r3, #18
 80176c4:	881b      	ldrh	r3, [r3, #0]
 80176c6:	8b7a      	ldrh	r2, [r7, #26]
 80176c8:	429a      	cmp	r2, r3
 80176ca:	d82a      	bhi.n	8017722 <etharp_find_entry+0x18a>
            old_pending = i;
 80176cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80176ce:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 80176d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80176d4:	4965      	ldr	r1, [pc, #404]	@ (801786c <etharp_find_entry+0x2d4>)
 80176d6:	4613      	mov	r3, r2
 80176d8:	005b      	lsls	r3, r3, #1
 80176da:	4413      	add	r3, r2
 80176dc:	00db      	lsls	r3, r3, #3
 80176de:	440b      	add	r3, r1
 80176e0:	3312      	adds	r3, #18
 80176e2:	881b      	ldrh	r3, [r3, #0]
 80176e4:	837b      	strh	r3, [r7, #26]
 80176e6:	e01c      	b.n	8017722 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80176e8:	7dfb      	ldrb	r3, [r7, #23]
 80176ea:	2b01      	cmp	r3, #1
 80176ec:	d919      	bls.n	8017722 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80176ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80176f2:	495e      	ldr	r1, [pc, #376]	@ (801786c <etharp_find_entry+0x2d4>)
 80176f4:	4613      	mov	r3, r2
 80176f6:	005b      	lsls	r3, r3, #1
 80176f8:	4413      	add	r3, r2
 80176fa:	00db      	lsls	r3, r3, #3
 80176fc:	440b      	add	r3, r1
 80176fe:	3312      	adds	r3, #18
 8017700:	881b      	ldrh	r3, [r3, #0]
 8017702:	8b3a      	ldrh	r2, [r7, #24]
 8017704:	429a      	cmp	r2, r3
 8017706:	d80c      	bhi.n	8017722 <etharp_find_entry+0x18a>
            old_stable = i;
 8017708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801770a:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801770c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017710:	4956      	ldr	r1, [pc, #344]	@ (801786c <etharp_find_entry+0x2d4>)
 8017712:	4613      	mov	r3, r2
 8017714:	005b      	lsls	r3, r3, #1
 8017716:	4413      	add	r3, r2
 8017718:	00db      	lsls	r3, r3, #3
 801771a:	440b      	add	r3, r1
 801771c:	3312      	adds	r3, #18
 801771e:	881b      	ldrh	r3, [r3, #0]
 8017720:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017722:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017724:	3301      	adds	r3, #1
 8017726:	b29b      	uxth	r3, r3
 8017728:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801772a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801772e:	2b09      	cmp	r3, #9
 8017730:	f77f af4c 	ble.w	80175cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017734:	7afb      	ldrb	r3, [r7, #11]
 8017736:	f003 0302 	and.w	r3, r3, #2
 801773a:	2b00      	cmp	r3, #0
 801773c:	d108      	bne.n	8017750 <etharp_find_entry+0x1b8>
 801773e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017742:	2b0a      	cmp	r3, #10
 8017744:	d107      	bne.n	8017756 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017746:	7afb      	ldrb	r3, [r7, #11]
 8017748:	f003 0301 	and.w	r3, r3, #1
 801774c:	2b00      	cmp	r3, #0
 801774e:	d102      	bne.n	8017756 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017750:	f04f 33ff 	mov.w	r3, #4294967295
 8017754:	e085      	b.n	8017862 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017756:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801775a:	2b09      	cmp	r3, #9
 801775c:	dc02      	bgt.n	8017764 <etharp_find_entry+0x1cc>
    i = empty;
 801775e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017760:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017762:	e039      	b.n	80177d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017764:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017768:	2b09      	cmp	r3, #9
 801776a:	dc14      	bgt.n	8017796 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801776c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801776e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017770:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017774:	493d      	ldr	r1, [pc, #244]	@ (801786c <etharp_find_entry+0x2d4>)
 8017776:	4613      	mov	r3, r2
 8017778:	005b      	lsls	r3, r3, #1
 801777a:	4413      	add	r3, r2
 801777c:	00db      	lsls	r3, r3, #3
 801777e:	440b      	add	r3, r1
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d018      	beq.n	80177b8 <etharp_find_entry+0x220>
 8017786:	4b3a      	ldr	r3, [pc, #232]	@ (8017870 <etharp_find_entry+0x2d8>)
 8017788:	f240 126d 	movw	r2, #365	@ 0x16d
 801778c:	493b      	ldr	r1, [pc, #236]	@ (801787c <etharp_find_entry+0x2e4>)
 801778e:	483a      	ldr	r0, [pc, #232]	@ (8017878 <etharp_find_entry+0x2e0>)
 8017790:	f002 fcc0 	bl	801a114 <iprintf>
 8017794:	e010      	b.n	80177b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017796:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801779a:	2b09      	cmp	r3, #9
 801779c:	dc02      	bgt.n	80177a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801779e:	8c3b      	ldrh	r3, [r7, #32]
 80177a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80177a2:	e009      	b.n	80177b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80177a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80177a8:	2b09      	cmp	r3, #9
 80177aa:	dc02      	bgt.n	80177b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80177ac:	8bfb      	ldrh	r3, [r7, #30]
 80177ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80177b0:	e002      	b.n	80177b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80177b2:	f04f 33ff 	mov.w	r3, #4294967295
 80177b6:	e054      	b.n	8017862 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80177b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80177bc:	2b09      	cmp	r3, #9
 80177be:	dd06      	ble.n	80177ce <etharp_find_entry+0x236>
 80177c0:	4b2b      	ldr	r3, [pc, #172]	@ (8017870 <etharp_find_entry+0x2d8>)
 80177c2:	f240 127f 	movw	r2, #383	@ 0x17f
 80177c6:	492e      	ldr	r1, [pc, #184]	@ (8017880 <etharp_find_entry+0x2e8>)
 80177c8:	482b      	ldr	r0, [pc, #172]	@ (8017878 <etharp_find_entry+0x2e0>)
 80177ca:	f002 fca3 	bl	801a114 <iprintf>
    etharp_free_entry(i);
 80177ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7ff fdd8 	bl	8017388 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80177d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80177dc:	2b09      	cmp	r3, #9
 80177de:	dd06      	ble.n	80177ee <etharp_find_entry+0x256>
 80177e0:	4b23      	ldr	r3, [pc, #140]	@ (8017870 <etharp_find_entry+0x2d8>)
 80177e2:	f240 1283 	movw	r2, #387	@ 0x183
 80177e6:	4926      	ldr	r1, [pc, #152]	@ (8017880 <etharp_find_entry+0x2e8>)
 80177e8:	4823      	ldr	r0, [pc, #140]	@ (8017878 <etharp_find_entry+0x2e0>)
 80177ea:	f002 fc93 	bl	801a114 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80177ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80177f2:	491e      	ldr	r1, [pc, #120]	@ (801786c <etharp_find_entry+0x2d4>)
 80177f4:	4613      	mov	r3, r2
 80177f6:	005b      	lsls	r3, r3, #1
 80177f8:	4413      	add	r3, r2
 80177fa:	00db      	lsls	r3, r3, #3
 80177fc:	440b      	add	r3, r1
 80177fe:	3314      	adds	r3, #20
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d006      	beq.n	8017814 <etharp_find_entry+0x27c>
 8017806:	4b1a      	ldr	r3, [pc, #104]	@ (8017870 <etharp_find_entry+0x2d8>)
 8017808:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801780c:	491d      	ldr	r1, [pc, #116]	@ (8017884 <etharp_find_entry+0x2ec>)
 801780e:	481a      	ldr	r0, [pc, #104]	@ (8017878 <etharp_find_entry+0x2e0>)
 8017810:	f002 fc80 	bl	801a114 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d00b      	beq.n	8017832 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801781a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	6819      	ldr	r1, [r3, #0]
 8017822:	4812      	ldr	r0, [pc, #72]	@ (801786c <etharp_find_entry+0x2d4>)
 8017824:	4613      	mov	r3, r2
 8017826:	005b      	lsls	r3, r3, #1
 8017828:	4413      	add	r3, r2
 801782a:	00db      	lsls	r3, r3, #3
 801782c:	4403      	add	r3, r0
 801782e:	3304      	adds	r3, #4
 8017830:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017832:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017836:	490d      	ldr	r1, [pc, #52]	@ (801786c <etharp_find_entry+0x2d4>)
 8017838:	4613      	mov	r3, r2
 801783a:	005b      	lsls	r3, r3, #1
 801783c:	4413      	add	r3, r2
 801783e:	00db      	lsls	r3, r3, #3
 8017840:	440b      	add	r3, r1
 8017842:	3312      	adds	r3, #18
 8017844:	2200      	movs	r2, #0
 8017846:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017848:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801784c:	4907      	ldr	r1, [pc, #28]	@ (801786c <etharp_find_entry+0x2d4>)
 801784e:	4613      	mov	r3, r2
 8017850:	005b      	lsls	r3, r3, #1
 8017852:	4413      	add	r3, r2
 8017854:	00db      	lsls	r3, r3, #3
 8017856:	440b      	add	r3, r1
 8017858:	3308      	adds	r3, #8
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801785e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8017862:	4618      	mov	r0, r3
 8017864:	3728      	adds	r7, #40	@ 0x28
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	20017704 	.word	0x20017704
 8017870:	0801e974 	.word	0x0801e974
 8017874:	0801e9ac 	.word	0x0801e9ac
 8017878:	0801e9ec 	.word	0x0801e9ec
 801787c:	0801ea14 	.word	0x0801ea14
 8017880:	0801ea2c 	.word	0x0801ea2c
 8017884:	0801ea40 	.word	0x0801ea40

08017888 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b088      	sub	sp, #32
 801788c:	af02      	add	r7, sp, #8
 801788e:	60f8      	str	r0, [r7, #12]
 8017890:	60b9      	str	r1, [r7, #8]
 8017892:	607a      	str	r2, [r7, #4]
 8017894:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801789c:	2b06      	cmp	r3, #6
 801789e:	d006      	beq.n	80178ae <etharp_update_arp_entry+0x26>
 80178a0:	4b48      	ldr	r3, [pc, #288]	@ (80179c4 <etharp_update_arp_entry+0x13c>)
 80178a2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80178a6:	4948      	ldr	r1, [pc, #288]	@ (80179c8 <etharp_update_arp_entry+0x140>)
 80178a8:	4848      	ldr	r0, [pc, #288]	@ (80179cc <etharp_update_arp_entry+0x144>)
 80178aa:	f002 fc33 	bl	801a114 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d012      	beq.n	80178da <etharp_update_arp_entry+0x52>
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d00e      	beq.n	80178da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	68f9      	ldr	r1, [r7, #12]
 80178c2:	4618      	mov	r0, r3
 80178c4:	f001 f9c8 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 80178c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d105      	bne.n	80178da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80178d6:	2be0      	cmp	r3, #224	@ 0xe0
 80178d8:	d102      	bne.n	80178e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178da:	f06f 030f 	mvn.w	r3, #15
 80178de:	e06c      	b.n	80179ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80178e0:	78fb      	ldrb	r3, [r7, #3]
 80178e2:	68fa      	ldr	r2, [r7, #12]
 80178e4:	4619      	mov	r1, r3
 80178e6:	68b8      	ldr	r0, [r7, #8]
 80178e8:	f7ff fe56 	bl	8017598 <etharp_find_entry>
 80178ec:	4603      	mov	r3, r0
 80178ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80178f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	da02      	bge.n	80178fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80178f8:	8afb      	ldrh	r3, [r7, #22]
 80178fa:	b25b      	sxtb	r3, r3
 80178fc:	e05d      	b.n	80179ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80178fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017902:	4933      	ldr	r1, [pc, #204]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 8017904:	4613      	mov	r3, r2
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	4413      	add	r3, r2
 801790a:	00db      	lsls	r3, r3, #3
 801790c:	440b      	add	r3, r1
 801790e:	3314      	adds	r3, #20
 8017910:	2202      	movs	r2, #2
 8017912:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017918:	492d      	ldr	r1, [pc, #180]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 801791a:	4613      	mov	r3, r2
 801791c:	005b      	lsls	r3, r3, #1
 801791e:	4413      	add	r3, r2
 8017920:	00db      	lsls	r3, r3, #3
 8017922:	440b      	add	r3, r1
 8017924:	3308      	adds	r3, #8
 8017926:	68fa      	ldr	r2, [r7, #12]
 8017928:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801792a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801792e:	4613      	mov	r3, r2
 8017930:	005b      	lsls	r3, r3, #1
 8017932:	4413      	add	r3, r2
 8017934:	00db      	lsls	r3, r3, #3
 8017936:	3308      	adds	r3, #8
 8017938:	4a25      	ldr	r2, [pc, #148]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 801793a:	4413      	add	r3, r2
 801793c:	3304      	adds	r3, #4
 801793e:	2206      	movs	r2, #6
 8017940:	6879      	ldr	r1, [r7, #4]
 8017942:	4618      	mov	r0, r3
 8017944:	f002 fe4b 	bl	801a5de <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801794c:	4920      	ldr	r1, [pc, #128]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 801794e:	4613      	mov	r3, r2
 8017950:	005b      	lsls	r3, r3, #1
 8017952:	4413      	add	r3, r2
 8017954:	00db      	lsls	r3, r3, #3
 8017956:	440b      	add	r3, r1
 8017958:	3312      	adds	r3, #18
 801795a:	2200      	movs	r2, #0
 801795c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801795e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017962:	491b      	ldr	r1, [pc, #108]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 8017964:	4613      	mov	r3, r2
 8017966:	005b      	lsls	r3, r3, #1
 8017968:	4413      	add	r3, r2
 801796a:	00db      	lsls	r3, r3, #3
 801796c:	440b      	add	r3, r1
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d021      	beq.n	80179b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017978:	4915      	ldr	r1, [pc, #84]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 801797a:	4613      	mov	r3, r2
 801797c:	005b      	lsls	r3, r3, #1
 801797e:	4413      	add	r3, r2
 8017980:	00db      	lsls	r3, r3, #3
 8017982:	440b      	add	r3, r1
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801798c:	4910      	ldr	r1, [pc, #64]	@ (80179d0 <etharp_update_arp_entry+0x148>)
 801798e:	4613      	mov	r3, r2
 8017990:	005b      	lsls	r3, r3, #1
 8017992:	4413      	add	r3, r2
 8017994:	00db      	lsls	r3, r3, #3
 8017996:	440b      	add	r3, r1
 8017998:	2200      	movs	r2, #0
 801799a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80179a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80179a6:	9300      	str	r3, [sp, #0]
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6939      	ldr	r1, [r7, #16]
 80179ac:	68f8      	ldr	r0, [r7, #12]
 80179ae:	f002 f871 	bl	8019a94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80179b2:	6938      	ldr	r0, [r7, #16]
 80179b4:	f7f6 ff1c 	bl	800e7f0 <pbuf_free>
  }
  return ERR_OK;
 80179b8:	2300      	movs	r3, #0
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3718      	adds	r7, #24
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	0801e974 	.word	0x0801e974
 80179c8:	0801ea6c 	.word	0x0801ea6c
 80179cc:	0801e9ec 	.word	0x0801e9ec
 80179d0:	20017704 	.word	0x20017704

080179d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179dc:	2300      	movs	r3, #0
 80179de:	60fb      	str	r3, [r7, #12]
 80179e0:	e01e      	b.n	8017a20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80179e2:	4913      	ldr	r1, [pc, #76]	@ (8017a30 <etharp_cleanup_netif+0x5c>)
 80179e4:	68fa      	ldr	r2, [r7, #12]
 80179e6:	4613      	mov	r3, r2
 80179e8:	005b      	lsls	r3, r3, #1
 80179ea:	4413      	add	r3, r2
 80179ec:	00db      	lsls	r3, r3, #3
 80179ee:	440b      	add	r3, r1
 80179f0:	3314      	adds	r3, #20
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80179f6:	7afb      	ldrb	r3, [r7, #11]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d00e      	beq.n	8017a1a <etharp_cleanup_netif+0x46>
 80179fc:	490c      	ldr	r1, [pc, #48]	@ (8017a30 <etharp_cleanup_netif+0x5c>)
 80179fe:	68fa      	ldr	r2, [r7, #12]
 8017a00:	4613      	mov	r3, r2
 8017a02:	005b      	lsls	r3, r3, #1
 8017a04:	4413      	add	r3, r2
 8017a06:	00db      	lsls	r3, r3, #3
 8017a08:	440b      	add	r3, r1
 8017a0a:	3308      	adds	r3, #8
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d102      	bne.n	8017a1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017a14:	68f8      	ldr	r0, [r7, #12]
 8017a16:	f7ff fcb7 	bl	8017388 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	60fb      	str	r3, [r7, #12]
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	2b09      	cmp	r3, #9
 8017a24:	dddd      	ble.n	80179e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017a26:	bf00      	nop
 8017a28:	bf00      	nop
 8017a2a:	3710      	adds	r7, #16
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	20017704 	.word	0x20017704

08017a34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017a34:	b5b0      	push	{r4, r5, r7, lr}
 8017a36:	b08a      	sub	sp, #40	@ 0x28
 8017a38:	af04      	add	r7, sp, #16
 8017a3a:	6078      	str	r0, [r7, #4]
 8017a3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d107      	bne.n	8017a54 <etharp_input+0x20>
 8017a44:	4b3f      	ldr	r3, [pc, #252]	@ (8017b44 <etharp_input+0x110>)
 8017a46:	f240 228a 	movw	r2, #650	@ 0x28a
 8017a4a:	493f      	ldr	r1, [pc, #252]	@ (8017b48 <etharp_input+0x114>)
 8017a4c:	483f      	ldr	r0, [pc, #252]	@ (8017b4c <etharp_input+0x118>)
 8017a4e:	f002 fb61 	bl	801a114 <iprintf>
 8017a52:	e074      	b.n	8017b3e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	685b      	ldr	r3, [r3, #4]
 8017a58:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	881b      	ldrh	r3, [r3, #0]
 8017a5e:	b29b      	uxth	r3, r3
 8017a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017a64:	d10c      	bne.n	8017a80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017a66:	697b      	ldr	r3, [r7, #20]
 8017a68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017a6a:	2b06      	cmp	r3, #6
 8017a6c:	d108      	bne.n	8017a80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017a6e:	697b      	ldr	r3, [r7, #20]
 8017a70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017a72:	2b04      	cmp	r3, #4
 8017a74:	d104      	bne.n	8017a80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	885b      	ldrh	r3, [r3, #2]
 8017a7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017a7c:	2b08      	cmp	r3, #8
 8017a7e:	d003      	beq.n	8017a88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7f6 feb5 	bl	800e7f0 <pbuf_free>
    return;
 8017a86:	e05a      	b.n	8017b3e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017a88:	697b      	ldr	r3, [r7, #20]
 8017a8a:	330e      	adds	r3, #14
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017a90:	697b      	ldr	r3, [r7, #20]
 8017a92:	3318      	adds	r3, #24
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d102      	bne.n	8017aa8 <etharp_input+0x74>
    for_us = 0;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	74fb      	strb	r3, [r7, #19]
 8017aa6:	e009      	b.n	8017abc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017aa8:	68ba      	ldr	r2, [r7, #8]
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	3304      	adds	r3, #4
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	bf0c      	ite	eq
 8017ab4:	2301      	moveq	r3, #1
 8017ab6:	2300      	movne	r3, #0
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017abc:	697b      	ldr	r3, [r7, #20]
 8017abe:	f103 0208 	add.w	r2, r3, #8
 8017ac2:	7cfb      	ldrb	r3, [r7, #19]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d001      	beq.n	8017acc <etharp_input+0x98>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	e000      	b.n	8017ace <etharp_input+0x9a>
 8017acc:	2302      	movs	r3, #2
 8017ace:	f107 010c 	add.w	r1, r7, #12
 8017ad2:	6838      	ldr	r0, [r7, #0]
 8017ad4:	f7ff fed8 	bl	8017888 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	88db      	ldrh	r3, [r3, #6]
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ae2:	d003      	beq.n	8017aec <etharp_input+0xb8>
 8017ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ae8:	d01e      	beq.n	8017b28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017aea:	e025      	b.n	8017b38 <etharp_input+0x104>
      if (for_us) {
 8017aec:	7cfb      	ldrb	r3, [r7, #19]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d021      	beq.n	8017b36 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017b08:	697a      	ldr	r2, [r7, #20]
 8017b0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017b0c:	2102      	movs	r1, #2
 8017b0e:	9103      	str	r1, [sp, #12]
 8017b10:	f107 010c 	add.w	r1, r7, #12
 8017b14:	9102      	str	r1, [sp, #8]
 8017b16:	9201      	str	r2, [sp, #4]
 8017b18:	9300      	str	r3, [sp, #0]
 8017b1a:	462b      	mov	r3, r5
 8017b1c:	4622      	mov	r2, r4
 8017b1e:	4601      	mov	r1, r0
 8017b20:	6838      	ldr	r0, [r7, #0]
 8017b22:	f000 faef 	bl	8018104 <etharp_raw>
      break;
 8017b26:	e006      	b.n	8017b36 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017b28:	f107 030c 	add.w	r3, r7, #12
 8017b2c:	4619      	mov	r1, r3
 8017b2e:	6838      	ldr	r0, [r7, #0]
 8017b30:	f7fe f9c8 	bl	8015ec4 <dhcp_arp_reply>
      break;
 8017b34:	e000      	b.n	8017b38 <etharp_input+0x104>
      break;
 8017b36:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f7f6 fe59 	bl	800e7f0 <pbuf_free>
}
 8017b3e:	3718      	adds	r7, #24
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bdb0      	pop	{r4, r5, r7, pc}
 8017b44:	0801e974 	.word	0x0801e974
 8017b48:	0801eac4 	.word	0x0801eac4
 8017b4c:	0801e9ec 	.word	0x0801e9ec

08017b50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b086      	sub	sp, #24
 8017b54:	af02      	add	r7, sp, #8
 8017b56:	60f8      	str	r0, [r7, #12]
 8017b58:	60b9      	str	r1, [r7, #8]
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017b5e:	79fa      	ldrb	r2, [r7, #7]
 8017b60:	4944      	ldr	r1, [pc, #272]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017b62:	4613      	mov	r3, r2
 8017b64:	005b      	lsls	r3, r3, #1
 8017b66:	4413      	add	r3, r2
 8017b68:	00db      	lsls	r3, r3, #3
 8017b6a:	440b      	add	r3, r1
 8017b6c:	3314      	adds	r3, #20
 8017b6e:	781b      	ldrb	r3, [r3, #0]
 8017b70:	2b01      	cmp	r3, #1
 8017b72:	d806      	bhi.n	8017b82 <etharp_output_to_arp_index+0x32>
 8017b74:	4b40      	ldr	r3, [pc, #256]	@ (8017c78 <etharp_output_to_arp_index+0x128>)
 8017b76:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017b7a:	4940      	ldr	r1, [pc, #256]	@ (8017c7c <etharp_output_to_arp_index+0x12c>)
 8017b7c:	4840      	ldr	r0, [pc, #256]	@ (8017c80 <etharp_output_to_arp_index+0x130>)
 8017b7e:	f002 fac9 	bl	801a114 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017b82:	79fa      	ldrb	r2, [r7, #7]
 8017b84:	493b      	ldr	r1, [pc, #236]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017b86:	4613      	mov	r3, r2
 8017b88:	005b      	lsls	r3, r3, #1
 8017b8a:	4413      	add	r3, r2
 8017b8c:	00db      	lsls	r3, r3, #3
 8017b8e:	440b      	add	r3, r1
 8017b90:	3314      	adds	r3, #20
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	2b02      	cmp	r3, #2
 8017b96:	d153      	bne.n	8017c40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017b98:	79fa      	ldrb	r2, [r7, #7]
 8017b9a:	4936      	ldr	r1, [pc, #216]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	005b      	lsls	r3, r3, #1
 8017ba0:	4413      	add	r3, r2
 8017ba2:	00db      	lsls	r3, r3, #3
 8017ba4:	440b      	add	r3, r1
 8017ba6:	3312      	adds	r3, #18
 8017ba8:	881b      	ldrh	r3, [r3, #0]
 8017baa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8017bae:	d919      	bls.n	8017be4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017bb0:	79fa      	ldrb	r2, [r7, #7]
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	005b      	lsls	r3, r3, #1
 8017bb6:	4413      	add	r3, r2
 8017bb8:	00db      	lsls	r3, r3, #3
 8017bba:	4a2e      	ldr	r2, [pc, #184]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017bbc:	4413      	add	r3, r2
 8017bbe:	3304      	adds	r3, #4
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	68f8      	ldr	r0, [r7, #12]
 8017bc4:	f000 fb4c 	bl	8018260 <etharp_request>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d138      	bne.n	8017c40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017bce:	79fa      	ldrb	r2, [r7, #7]
 8017bd0:	4928      	ldr	r1, [pc, #160]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	005b      	lsls	r3, r3, #1
 8017bd6:	4413      	add	r3, r2
 8017bd8:	00db      	lsls	r3, r3, #3
 8017bda:	440b      	add	r3, r1
 8017bdc:	3314      	adds	r3, #20
 8017bde:	2203      	movs	r2, #3
 8017be0:	701a      	strb	r2, [r3, #0]
 8017be2:	e02d      	b.n	8017c40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017be4:	79fa      	ldrb	r2, [r7, #7]
 8017be6:	4923      	ldr	r1, [pc, #140]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017be8:	4613      	mov	r3, r2
 8017bea:	005b      	lsls	r3, r3, #1
 8017bec:	4413      	add	r3, r2
 8017bee:	00db      	lsls	r3, r3, #3
 8017bf0:	440b      	add	r3, r1
 8017bf2:	3312      	adds	r3, #18
 8017bf4:	881b      	ldrh	r3, [r3, #0]
 8017bf6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8017bfa:	d321      	bcc.n	8017c40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017bfc:	79fa      	ldrb	r2, [r7, #7]
 8017bfe:	4613      	mov	r3, r2
 8017c00:	005b      	lsls	r3, r3, #1
 8017c02:	4413      	add	r3, r2
 8017c04:	00db      	lsls	r3, r3, #3
 8017c06:	4a1b      	ldr	r2, [pc, #108]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017c08:	4413      	add	r3, r2
 8017c0a:	1d19      	adds	r1, r3, #4
 8017c0c:	79fa      	ldrb	r2, [r7, #7]
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	3308      	adds	r3, #8
 8017c18:	4a16      	ldr	r2, [pc, #88]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017c1a:	4413      	add	r3, r2
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	461a      	mov	r2, r3
 8017c20:	68f8      	ldr	r0, [r7, #12]
 8017c22:	f000 fafb 	bl	801821c <etharp_request_dst>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d109      	bne.n	8017c40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017c2c:	79fa      	ldrb	r2, [r7, #7]
 8017c2e:	4911      	ldr	r1, [pc, #68]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017c30:	4613      	mov	r3, r2
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	4413      	add	r3, r2
 8017c36:	00db      	lsls	r3, r3, #3
 8017c38:	440b      	add	r3, r1
 8017c3a:	3314      	adds	r3, #20
 8017c3c:	2203      	movs	r2, #3
 8017c3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8017c46:	79fa      	ldrb	r2, [r7, #7]
 8017c48:	4613      	mov	r3, r2
 8017c4a:	005b      	lsls	r3, r3, #1
 8017c4c:	4413      	add	r3, r2
 8017c4e:	00db      	lsls	r3, r3, #3
 8017c50:	3308      	adds	r3, #8
 8017c52:	4a08      	ldr	r2, [pc, #32]	@ (8017c74 <etharp_output_to_arp_index+0x124>)
 8017c54:	4413      	add	r3, r2
 8017c56:	3304      	adds	r3, #4
 8017c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017c5c:	9200      	str	r2, [sp, #0]
 8017c5e:	460a      	mov	r2, r1
 8017c60:	68b9      	ldr	r1, [r7, #8]
 8017c62:	68f8      	ldr	r0, [r7, #12]
 8017c64:	f001 ff16 	bl	8019a94 <ethernet_output>
 8017c68:	4603      	mov	r3, r0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3710      	adds	r7, #16
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	20017704 	.word	0x20017704
 8017c78:	0801e974 	.word	0x0801e974
 8017c7c:	0801eae4 	.word	0x0801eae4
 8017c80:	0801e9ec 	.word	0x0801e9ec

08017c84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b08a      	sub	sp, #40	@ 0x28
 8017c88:	af02      	add	r7, sp, #8
 8017c8a:	60f8      	str	r0, [r7, #12]
 8017c8c:	60b9      	str	r1, [r7, #8]
 8017c8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d106      	bne.n	8017ca8 <etharp_output+0x24>
 8017c9a:	4b73      	ldr	r3, [pc, #460]	@ (8017e68 <etharp_output+0x1e4>)
 8017c9c:	f240 321e 	movw	r2, #798	@ 0x31e
 8017ca0:	4972      	ldr	r1, [pc, #456]	@ (8017e6c <etharp_output+0x1e8>)
 8017ca2:	4873      	ldr	r0, [pc, #460]	@ (8017e70 <etharp_output+0x1ec>)
 8017ca4:	f002 fa36 	bl	801a114 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <etharp_output+0x38>
 8017cae:	4b6e      	ldr	r3, [pc, #440]	@ (8017e68 <etharp_output+0x1e4>)
 8017cb0:	f240 321f 	movw	r2, #799	@ 0x31f
 8017cb4:	496f      	ldr	r1, [pc, #444]	@ (8017e74 <etharp_output+0x1f0>)
 8017cb6:	486e      	ldr	r0, [pc, #440]	@ (8017e70 <etharp_output+0x1ec>)
 8017cb8:	f002 fa2c 	bl	801a114 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d106      	bne.n	8017cd0 <etharp_output+0x4c>
 8017cc2:	4b69      	ldr	r3, [pc, #420]	@ (8017e68 <etharp_output+0x1e4>)
 8017cc4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017cc8:	496b      	ldr	r1, [pc, #428]	@ (8017e78 <etharp_output+0x1f4>)
 8017cca:	4869      	ldr	r0, [pc, #420]	@ (8017e70 <etharp_output+0x1ec>)
 8017ccc:	f002 fa22 	bl	801a114 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	68f9      	ldr	r1, [r7, #12]
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f000 ffbe 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d002      	beq.n	8017ce8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017ce2:	4b66      	ldr	r3, [pc, #408]	@ (8017e7c <etharp_output+0x1f8>)
 8017ce4:	61fb      	str	r3, [r7, #28]
 8017ce6:	e0af      	b.n	8017e48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017cf0:	2be0      	cmp	r3, #224	@ 0xe0
 8017cf2:	d118      	bne.n	8017d26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017cf4:	2301      	movs	r3, #1
 8017cf6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017cfc:	235e      	movs	r3, #94	@ 0x5e
 8017cfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	3301      	adds	r3, #1
 8017d04:	781b      	ldrb	r3, [r3, #0]
 8017d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	3302      	adds	r3, #2
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	3303      	adds	r3, #3
 8017d1a:	781b      	ldrb	r3, [r3, #0]
 8017d1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017d1e:	f107 0310 	add.w	r3, r7, #16
 8017d22:	61fb      	str	r3, [r7, #28]
 8017d24:	e090      	b.n	8017e48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	681a      	ldr	r2, [r3, #0]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	3304      	adds	r3, #4
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	405a      	eors	r2, r3
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	3308      	adds	r3, #8
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	4013      	ands	r3, r2
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d012      	beq.n	8017d64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017d44:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d00b      	beq.n	8017d64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	330c      	adds	r3, #12
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d003      	beq.n	8017d5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	330c      	adds	r3, #12
 8017d5a:	61bb      	str	r3, [r7, #24]
 8017d5c:	e002      	b.n	8017d64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017d5e:	f06f 0303 	mvn.w	r3, #3
 8017d62:	e07d      	b.n	8017e60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017d64:	4b46      	ldr	r3, [pc, #280]	@ (8017e80 <etharp_output+0x1fc>)
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	4619      	mov	r1, r3
 8017d6a:	4a46      	ldr	r2, [pc, #280]	@ (8017e84 <etharp_output+0x200>)
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	005b      	lsls	r3, r3, #1
 8017d70:	440b      	add	r3, r1
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	4413      	add	r3, r2
 8017d76:	3314      	adds	r3, #20
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	2b01      	cmp	r3, #1
 8017d7c:	d925      	bls.n	8017dca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017d7e:	4b40      	ldr	r3, [pc, #256]	@ (8017e80 <etharp_output+0x1fc>)
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	4619      	mov	r1, r3
 8017d84:	4a3f      	ldr	r2, [pc, #252]	@ (8017e84 <etharp_output+0x200>)
 8017d86:	460b      	mov	r3, r1
 8017d88:	005b      	lsls	r3, r3, #1
 8017d8a:	440b      	add	r3, r1
 8017d8c:	00db      	lsls	r3, r3, #3
 8017d8e:	4413      	add	r3, r2
 8017d90:	3308      	adds	r3, #8
 8017d92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d117      	bne.n	8017dca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017d9a:	69bb      	ldr	r3, [r7, #24]
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	4b38      	ldr	r3, [pc, #224]	@ (8017e80 <etharp_output+0x1fc>)
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	4618      	mov	r0, r3
 8017da4:	4937      	ldr	r1, [pc, #220]	@ (8017e84 <etharp_output+0x200>)
 8017da6:	4603      	mov	r3, r0
 8017da8:	005b      	lsls	r3, r3, #1
 8017daa:	4403      	add	r3, r0
 8017dac:	00db      	lsls	r3, r3, #3
 8017dae:	440b      	add	r3, r1
 8017db0:	3304      	adds	r3, #4
 8017db2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d108      	bne.n	8017dca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017db8:	4b31      	ldr	r3, [pc, #196]	@ (8017e80 <etharp_output+0x1fc>)
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	461a      	mov	r2, r3
 8017dbe:	68b9      	ldr	r1, [r7, #8]
 8017dc0:	68f8      	ldr	r0, [r7, #12]
 8017dc2:	f7ff fec5 	bl	8017b50 <etharp_output_to_arp_index>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	e04a      	b.n	8017e60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017dca:	2300      	movs	r3, #0
 8017dcc:	75fb      	strb	r3, [r7, #23]
 8017dce:	e031      	b.n	8017e34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017dd0:	7dfa      	ldrb	r2, [r7, #23]
 8017dd2:	492c      	ldr	r1, [pc, #176]	@ (8017e84 <etharp_output+0x200>)
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	4413      	add	r3, r2
 8017dda:	00db      	lsls	r3, r3, #3
 8017ddc:	440b      	add	r3, r1
 8017dde:	3314      	adds	r3, #20
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d923      	bls.n	8017e2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017de6:	7dfa      	ldrb	r2, [r7, #23]
 8017de8:	4926      	ldr	r1, [pc, #152]	@ (8017e84 <etharp_output+0x200>)
 8017dea:	4613      	mov	r3, r2
 8017dec:	005b      	lsls	r3, r3, #1
 8017dee:	4413      	add	r3, r2
 8017df0:	00db      	lsls	r3, r3, #3
 8017df2:	440b      	add	r3, r1
 8017df4:	3308      	adds	r3, #8
 8017df6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017df8:	68fa      	ldr	r2, [r7, #12]
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	d117      	bne.n	8017e2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	6819      	ldr	r1, [r3, #0]
 8017e02:	7dfa      	ldrb	r2, [r7, #23]
 8017e04:	481f      	ldr	r0, [pc, #124]	@ (8017e84 <etharp_output+0x200>)
 8017e06:	4613      	mov	r3, r2
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	4413      	add	r3, r2
 8017e0c:	00db      	lsls	r3, r3, #3
 8017e0e:	4403      	add	r3, r0
 8017e10:	3304      	adds	r3, #4
 8017e12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017e14:	4299      	cmp	r1, r3
 8017e16:	d10a      	bne.n	8017e2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017e18:	4a19      	ldr	r2, [pc, #100]	@ (8017e80 <etharp_output+0x1fc>)
 8017e1a:	7dfb      	ldrb	r3, [r7, #23]
 8017e1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017e1e:	7dfb      	ldrb	r3, [r7, #23]
 8017e20:	461a      	mov	r2, r3
 8017e22:	68b9      	ldr	r1, [r7, #8]
 8017e24:	68f8      	ldr	r0, [r7, #12]
 8017e26:	f7ff fe93 	bl	8017b50 <etharp_output_to_arp_index>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	e018      	b.n	8017e60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017e2e:	7dfb      	ldrb	r3, [r7, #23]
 8017e30:	3301      	adds	r3, #1
 8017e32:	75fb      	strb	r3, [r7, #23]
 8017e34:	7dfb      	ldrb	r3, [r7, #23]
 8017e36:	2b09      	cmp	r3, #9
 8017e38:	d9ca      	bls.n	8017dd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017e3a:	68ba      	ldr	r2, [r7, #8]
 8017e3c:	69b9      	ldr	r1, [r7, #24]
 8017e3e:	68f8      	ldr	r0, [r7, #12]
 8017e40:	f000 f822 	bl	8017e88 <etharp_query>
 8017e44:	4603      	mov	r3, r0
 8017e46:	e00b      	b.n	8017e60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8017e4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	69fb      	ldr	r3, [r7, #28]
 8017e56:	68b9      	ldr	r1, [r7, #8]
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	f001 fe1b 	bl	8019a94 <ethernet_output>
 8017e5e:	4603      	mov	r3, r0
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3720      	adds	r7, #32
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}
 8017e68:	0801e974 	.word	0x0801e974
 8017e6c:	0801eac4 	.word	0x0801eac4
 8017e70:	0801e9ec 	.word	0x0801e9ec
 8017e74:	0801eb14 	.word	0x0801eb14
 8017e78:	0801eab4 	.word	0x0801eab4
 8017e7c:	0802303c 	.word	0x0802303c
 8017e80:	200177f4 	.word	0x200177f4
 8017e84:	20017704 	.word	0x20017704

08017e88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b08c      	sub	sp, #48	@ 0x30
 8017e8c:	af02      	add	r7, sp, #8
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	332a      	adds	r3, #42	@ 0x2a
 8017e98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017e9a:	23ff      	movs	r3, #255	@ 0xff
 8017e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	68f9      	ldr	r1, [r7, #12]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f000 fed4 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d10c      	bne.n	8017ed0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ebe:	2be0      	cmp	r3, #224	@ 0xe0
 8017ec0:	d006      	beq.n	8017ed0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017ec2:	68bb      	ldr	r3, [r7, #8]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d003      	beq.n	8017ed0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d102      	bne.n	8017ed6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017ed0:	f06f 030f 	mvn.w	r3, #15
 8017ed4:	e101      	b.n	80180da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017ed6:	68fa      	ldr	r2, [r7, #12]
 8017ed8:	2101      	movs	r1, #1
 8017eda:	68b8      	ldr	r0, [r7, #8]
 8017edc:	f7ff fb5c 	bl	8017598 <etharp_find_entry>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017ee4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	da02      	bge.n	8017ef2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017eec:	8a7b      	ldrh	r3, [r7, #18]
 8017eee:	b25b      	sxtb	r3, r3
 8017ef0:	e0f3      	b.n	80180da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017ef2:	8a7b      	ldrh	r3, [r7, #18]
 8017ef4:	2b7e      	cmp	r3, #126	@ 0x7e
 8017ef6:	d906      	bls.n	8017f06 <etharp_query+0x7e>
 8017ef8:	4b7a      	ldr	r3, [pc, #488]	@ (80180e4 <etharp_query+0x25c>)
 8017efa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8017efe:	497a      	ldr	r1, [pc, #488]	@ (80180e8 <etharp_query+0x260>)
 8017f00:	487a      	ldr	r0, [pc, #488]	@ (80180ec <etharp_query+0x264>)
 8017f02:	f002 f907 	bl	801a114 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017f06:	8a7b      	ldrh	r3, [r7, #18]
 8017f08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017f0a:	7c7a      	ldrb	r2, [r7, #17]
 8017f0c:	4978      	ldr	r1, [pc, #480]	@ (80180f0 <etharp_query+0x268>)
 8017f0e:	4613      	mov	r3, r2
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	4413      	add	r3, r2
 8017f14:	00db      	lsls	r3, r3, #3
 8017f16:	440b      	add	r3, r1
 8017f18:	3314      	adds	r3, #20
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d115      	bne.n	8017f4c <etharp_query+0xc4>
    is_new_entry = 1;
 8017f20:	2301      	movs	r3, #1
 8017f22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017f24:	7c7a      	ldrb	r2, [r7, #17]
 8017f26:	4972      	ldr	r1, [pc, #456]	@ (80180f0 <etharp_query+0x268>)
 8017f28:	4613      	mov	r3, r2
 8017f2a:	005b      	lsls	r3, r3, #1
 8017f2c:	4413      	add	r3, r2
 8017f2e:	00db      	lsls	r3, r3, #3
 8017f30:	440b      	add	r3, r1
 8017f32:	3314      	adds	r3, #20
 8017f34:	2201      	movs	r2, #1
 8017f36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017f38:	7c7a      	ldrb	r2, [r7, #17]
 8017f3a:	496d      	ldr	r1, [pc, #436]	@ (80180f0 <etharp_query+0x268>)
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	005b      	lsls	r3, r3, #1
 8017f40:	4413      	add	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	440b      	add	r3, r1
 8017f46:	3308      	adds	r3, #8
 8017f48:	68fa      	ldr	r2, [r7, #12]
 8017f4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017f4c:	7c7a      	ldrb	r2, [r7, #17]
 8017f4e:	4968      	ldr	r1, [pc, #416]	@ (80180f0 <etharp_query+0x268>)
 8017f50:	4613      	mov	r3, r2
 8017f52:	005b      	lsls	r3, r3, #1
 8017f54:	4413      	add	r3, r2
 8017f56:	00db      	lsls	r3, r3, #3
 8017f58:	440b      	add	r3, r1
 8017f5a:	3314      	adds	r3, #20
 8017f5c:	781b      	ldrb	r3, [r3, #0]
 8017f5e:	2b01      	cmp	r3, #1
 8017f60:	d011      	beq.n	8017f86 <etharp_query+0xfe>
 8017f62:	7c7a      	ldrb	r2, [r7, #17]
 8017f64:	4962      	ldr	r1, [pc, #392]	@ (80180f0 <etharp_query+0x268>)
 8017f66:	4613      	mov	r3, r2
 8017f68:	005b      	lsls	r3, r3, #1
 8017f6a:	4413      	add	r3, r2
 8017f6c:	00db      	lsls	r3, r3, #3
 8017f6e:	440b      	add	r3, r1
 8017f70:	3314      	adds	r3, #20
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	2b01      	cmp	r3, #1
 8017f76:	d806      	bhi.n	8017f86 <etharp_query+0xfe>
 8017f78:	4b5a      	ldr	r3, [pc, #360]	@ (80180e4 <etharp_query+0x25c>)
 8017f7a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8017f7e:	495d      	ldr	r1, [pc, #372]	@ (80180f4 <etharp_query+0x26c>)
 8017f80:	485a      	ldr	r0, [pc, #360]	@ (80180ec <etharp_query+0x264>)
 8017f82:	f002 f8c7 	bl	801a114 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017f86:	6a3b      	ldr	r3, [r7, #32]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d102      	bne.n	8017f92 <etharp_query+0x10a>
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d10c      	bne.n	8017fac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017f92:	68b9      	ldr	r1, [r7, #8]
 8017f94:	68f8      	ldr	r0, [r7, #12]
 8017f96:	f000 f963 	bl	8018260 <etharp_request>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d102      	bne.n	8017fac <etharp_query+0x124>
      return result;
 8017fa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017faa:	e096      	b.n	80180da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d106      	bne.n	8017fc0 <etharp_query+0x138>
 8017fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80180e4 <etharp_query+0x25c>)
 8017fb4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017fb8:	494f      	ldr	r1, [pc, #316]	@ (80180f8 <etharp_query+0x270>)
 8017fba:	484c      	ldr	r0, [pc, #304]	@ (80180ec <etharp_query+0x264>)
 8017fbc:	f002 f8aa 	bl	801a114 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017fc0:	7c7a      	ldrb	r2, [r7, #17]
 8017fc2:	494b      	ldr	r1, [pc, #300]	@ (80180f0 <etharp_query+0x268>)
 8017fc4:	4613      	mov	r3, r2
 8017fc6:	005b      	lsls	r3, r3, #1
 8017fc8:	4413      	add	r3, r2
 8017fca:	00db      	lsls	r3, r3, #3
 8017fcc:	440b      	add	r3, r1
 8017fce:	3314      	adds	r3, #20
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d917      	bls.n	8018006 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017fd6:	4a49      	ldr	r2, [pc, #292]	@ (80180fc <etharp_query+0x274>)
 8017fd8:	7c7b      	ldrb	r3, [r7, #17]
 8017fda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017fdc:	7c7a      	ldrb	r2, [r7, #17]
 8017fde:	4613      	mov	r3, r2
 8017fe0:	005b      	lsls	r3, r3, #1
 8017fe2:	4413      	add	r3, r2
 8017fe4:	00db      	lsls	r3, r3, #3
 8017fe6:	3308      	adds	r3, #8
 8017fe8:	4a41      	ldr	r2, [pc, #260]	@ (80180f0 <etharp_query+0x268>)
 8017fea:	4413      	add	r3, r2
 8017fec:	3304      	adds	r3, #4
 8017fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017ff2:	9200      	str	r2, [sp, #0]
 8017ff4:	697a      	ldr	r2, [r7, #20]
 8017ff6:	6879      	ldr	r1, [r7, #4]
 8017ff8:	68f8      	ldr	r0, [r7, #12]
 8017ffa:	f001 fd4b 	bl	8019a94 <ethernet_output>
 8017ffe:	4603      	mov	r3, r0
 8018000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018004:	e067      	b.n	80180d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018006:	7c7a      	ldrb	r2, [r7, #17]
 8018008:	4939      	ldr	r1, [pc, #228]	@ (80180f0 <etharp_query+0x268>)
 801800a:	4613      	mov	r3, r2
 801800c:	005b      	lsls	r3, r3, #1
 801800e:	4413      	add	r3, r2
 8018010:	00db      	lsls	r3, r3, #3
 8018012:	440b      	add	r3, r1
 8018014:	3314      	adds	r3, #20
 8018016:	781b      	ldrb	r3, [r3, #0]
 8018018:	2b01      	cmp	r3, #1
 801801a:	d15c      	bne.n	80180d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801801c:	2300      	movs	r3, #0
 801801e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018024:	e01c      	b.n	8018060 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018026:	69fb      	ldr	r3, [r7, #28]
 8018028:	895a      	ldrh	r2, [r3, #10]
 801802a:	69fb      	ldr	r3, [r7, #28]
 801802c:	891b      	ldrh	r3, [r3, #8]
 801802e:	429a      	cmp	r2, r3
 8018030:	d10a      	bne.n	8018048 <etharp_query+0x1c0>
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d006      	beq.n	8018048 <etharp_query+0x1c0>
 801803a:	4b2a      	ldr	r3, [pc, #168]	@ (80180e4 <etharp_query+0x25c>)
 801803c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018040:	492f      	ldr	r1, [pc, #188]	@ (8018100 <etharp_query+0x278>)
 8018042:	482a      	ldr	r0, [pc, #168]	@ (80180ec <etharp_query+0x264>)
 8018044:	f002 f866 	bl	801a114 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018048:	69fb      	ldr	r3, [r7, #28]
 801804a:	7b1b      	ldrb	r3, [r3, #12]
 801804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018050:	2b00      	cmp	r3, #0
 8018052:	d002      	beq.n	801805a <etharp_query+0x1d2>
        copy_needed = 1;
 8018054:	2301      	movs	r3, #1
 8018056:	61bb      	str	r3, [r7, #24]
        break;
 8018058:	e005      	b.n	8018066 <etharp_query+0x1de>
      }
      p = p->next;
 801805a:	69fb      	ldr	r3, [r7, #28]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018060:	69fb      	ldr	r3, [r7, #28]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d1df      	bne.n	8018026 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d007      	beq.n	801807c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801806c:	687a      	ldr	r2, [r7, #4]
 801806e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018072:	200e      	movs	r0, #14
 8018074:	f7f6 fe34 	bl	800ece0 <pbuf_clone>
 8018078:	61f8      	str	r0, [r7, #28]
 801807a:	e004      	b.n	8018086 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018080:	69f8      	ldr	r0, [r7, #28]
 8018082:	f7f6 fc5b 	bl	800e93c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018086:	69fb      	ldr	r3, [r7, #28]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d021      	beq.n	80180d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801808c:	7c7a      	ldrb	r2, [r7, #17]
 801808e:	4918      	ldr	r1, [pc, #96]	@ (80180f0 <etharp_query+0x268>)
 8018090:	4613      	mov	r3, r2
 8018092:	005b      	lsls	r3, r3, #1
 8018094:	4413      	add	r3, r2
 8018096:	00db      	lsls	r3, r3, #3
 8018098:	440b      	add	r3, r1
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d00a      	beq.n	80180b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80180a0:	7c7a      	ldrb	r2, [r7, #17]
 80180a2:	4913      	ldr	r1, [pc, #76]	@ (80180f0 <etharp_query+0x268>)
 80180a4:	4613      	mov	r3, r2
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	4413      	add	r3, r2
 80180aa:	00db      	lsls	r3, r3, #3
 80180ac:	440b      	add	r3, r1
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7f6 fb9d 	bl	800e7f0 <pbuf_free>
      }
      arp_table[i].q = p;
 80180b6:	7c7a      	ldrb	r2, [r7, #17]
 80180b8:	490d      	ldr	r1, [pc, #52]	@ (80180f0 <etharp_query+0x268>)
 80180ba:	4613      	mov	r3, r2
 80180bc:	005b      	lsls	r3, r3, #1
 80180be:	4413      	add	r3, r2
 80180c0:	00db      	lsls	r3, r3, #3
 80180c2:	440b      	add	r3, r1
 80180c4:	69fa      	ldr	r2, [r7, #28]
 80180c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80180c8:	2300      	movs	r3, #0
 80180ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80180ce:	e002      	b.n	80180d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80180d0:	23ff      	movs	r3, #255	@ 0xff
 80180d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80180d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80180da:	4618      	mov	r0, r3
 80180dc:	3728      	adds	r7, #40	@ 0x28
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}
 80180e2:	bf00      	nop
 80180e4:	0801e974 	.word	0x0801e974
 80180e8:	0801eb20 	.word	0x0801eb20
 80180ec:	0801e9ec 	.word	0x0801e9ec
 80180f0:	20017704 	.word	0x20017704
 80180f4:	0801eb30 	.word	0x0801eb30
 80180f8:	0801eb14 	.word	0x0801eb14
 80180fc:	200177f4 	.word	0x200177f4
 8018100:	0801eb58 	.word	0x0801eb58

08018104 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b08a      	sub	sp, #40	@ 0x28
 8018108:	af02      	add	r7, sp, #8
 801810a:	60f8      	str	r0, [r7, #12]
 801810c:	60b9      	str	r1, [r7, #8]
 801810e:	607a      	str	r2, [r7, #4]
 8018110:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018112:	2300      	movs	r3, #0
 8018114:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d106      	bne.n	801812a <etharp_raw+0x26>
 801811c:	4b3a      	ldr	r3, [pc, #232]	@ (8018208 <etharp_raw+0x104>)
 801811e:	f240 4257 	movw	r2, #1111	@ 0x457
 8018122:	493a      	ldr	r1, [pc, #232]	@ (801820c <etharp_raw+0x108>)
 8018124:	483a      	ldr	r0, [pc, #232]	@ (8018210 <etharp_raw+0x10c>)
 8018126:	f001 fff5 	bl	801a114 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801812a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801812e:	211c      	movs	r1, #28
 8018130:	200e      	movs	r0, #14
 8018132:	f7f6 f879 	bl	800e228 <pbuf_alloc>
 8018136:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d102      	bne.n	8018144 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801813e:	f04f 33ff 	mov.w	r3, #4294967295
 8018142:	e05d      	b.n	8018200 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018144:	69bb      	ldr	r3, [r7, #24]
 8018146:	895b      	ldrh	r3, [r3, #10]
 8018148:	2b1b      	cmp	r3, #27
 801814a:	d806      	bhi.n	801815a <etharp_raw+0x56>
 801814c:	4b2e      	ldr	r3, [pc, #184]	@ (8018208 <etharp_raw+0x104>)
 801814e:	f240 4262 	movw	r2, #1122	@ 0x462
 8018152:	4930      	ldr	r1, [pc, #192]	@ (8018214 <etharp_raw+0x110>)
 8018154:	482e      	ldr	r0, [pc, #184]	@ (8018210 <etharp_raw+0x10c>)
 8018156:	f001 ffdd 	bl	801a114 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018160:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018162:	4618      	mov	r0, r3
 8018164:	f7f4 fe6c 	bl	800ce40 <lwip_htons>
 8018168:	4603      	mov	r3, r0
 801816a:	461a      	mov	r2, r3
 801816c:	697b      	ldr	r3, [r7, #20]
 801816e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018176:	2b06      	cmp	r3, #6
 8018178:	d006      	beq.n	8018188 <etharp_raw+0x84>
 801817a:	4b23      	ldr	r3, [pc, #140]	@ (8018208 <etharp_raw+0x104>)
 801817c:	f240 4269 	movw	r2, #1129	@ 0x469
 8018180:	4925      	ldr	r1, [pc, #148]	@ (8018218 <etharp_raw+0x114>)
 8018182:	4823      	ldr	r0, [pc, #140]	@ (8018210 <etharp_raw+0x10c>)
 8018184:	f001 ffc6 	bl	801a114 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	3308      	adds	r3, #8
 801818c:	2206      	movs	r2, #6
 801818e:	6839      	ldr	r1, [r7, #0]
 8018190:	4618      	mov	r0, r3
 8018192:	f002 fa24 	bl	801a5de <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	3312      	adds	r3, #18
 801819a:	2206      	movs	r2, #6
 801819c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801819e:	4618      	mov	r0, r3
 80181a0:	f002 fa1d 	bl	801a5de <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	330e      	adds	r3, #14
 80181a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80181aa:	6812      	ldr	r2, [r2, #0]
 80181ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80181ae:	697b      	ldr	r3, [r7, #20]
 80181b0:	3318      	adds	r3, #24
 80181b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80181b4:	6812      	ldr	r2, [r2, #0]
 80181b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	2200      	movs	r2, #0
 80181bc:	701a      	strb	r2, [r3, #0]
 80181be:	2200      	movs	r2, #0
 80181c0:	f042 0201 	orr.w	r2, r2, #1
 80181c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	2200      	movs	r2, #0
 80181ca:	f042 0208 	orr.w	r2, r2, #8
 80181ce:	709a      	strb	r2, [r3, #2]
 80181d0:	2200      	movs	r2, #0
 80181d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	2206      	movs	r2, #6
 80181d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80181da:	697b      	ldr	r3, [r7, #20]
 80181dc:	2204      	movs	r2, #4
 80181de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80181e0:	f640 0306 	movw	r3, #2054	@ 0x806
 80181e4:	9300      	str	r3, [sp, #0]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	68ba      	ldr	r2, [r7, #8]
 80181ea:	69b9      	ldr	r1, [r7, #24]
 80181ec:	68f8      	ldr	r0, [r7, #12]
 80181ee:	f001 fc51 	bl	8019a94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80181f2:	69b8      	ldr	r0, [r7, #24]
 80181f4:	f7f6 fafc 	bl	800e7f0 <pbuf_free>
  p = NULL;
 80181f8:	2300      	movs	r3, #0
 80181fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80181fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018200:	4618      	mov	r0, r3
 8018202:	3720      	adds	r7, #32
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}
 8018208:	0801e974 	.word	0x0801e974
 801820c:	0801eac4 	.word	0x0801eac4
 8018210:	0801e9ec 	.word	0x0801e9ec
 8018214:	0801eb74 	.word	0x0801eb74
 8018218:	0801eba8 	.word	0x0801eba8

0801821c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b088      	sub	sp, #32
 8018220:	af04      	add	r7, sp, #16
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018238:	2201      	movs	r2, #1
 801823a:	9203      	str	r2, [sp, #12]
 801823c:	68ba      	ldr	r2, [r7, #8]
 801823e:	9202      	str	r2, [sp, #8]
 8018240:	4a06      	ldr	r2, [pc, #24]	@ (801825c <etharp_request_dst+0x40>)
 8018242:	9201      	str	r2, [sp, #4]
 8018244:	9300      	str	r3, [sp, #0]
 8018246:	4603      	mov	r3, r0
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	68f8      	ldr	r0, [r7, #12]
 801824c:	f7ff ff5a 	bl	8018104 <etharp_raw>
 8018250:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018252:	4618      	mov	r0, r3
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}
 801825a:	bf00      	nop
 801825c:	08023044 	.word	0x08023044

08018260 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
 8018268:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801826a:	4a05      	ldr	r2, [pc, #20]	@ (8018280 <etharp_request+0x20>)
 801826c:	6839      	ldr	r1, [r7, #0]
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f7ff ffd4 	bl	801821c <etharp_request_dst>
 8018274:	4603      	mov	r3, r0
}
 8018276:	4618      	mov	r0, r3
 8018278:	3708      	adds	r7, #8
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	0802303c 	.word	0x0802303c

08018284 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b08e      	sub	sp, #56	@ 0x38
 8018288:	af04      	add	r7, sp, #16
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801828e:	4b8e      	ldr	r3, [pc, #568]	@ (80184c8 <icmp_input+0x244>)
 8018290:	689b      	ldr	r3, [r3, #8]
 8018292:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	f003 030f 	and.w	r3, r3, #15
 801829c:	b2db      	uxtb	r3, r3
 801829e:	009b      	lsls	r3, r3, #2
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80182a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80182a6:	2b13      	cmp	r3, #19
 80182a8:	f240 80f6 	bls.w	8018498 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	895b      	ldrh	r3, [r3, #10]
 80182b0:	2b03      	cmp	r3, #3
 80182b2:	f240 80f3 	bls.w	801849c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	785b      	ldrb	r3, [r3, #1]
 80182c6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80182ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	f000 80db 	beq.w	801848a <icmp_input+0x206>
 80182d4:	2b08      	cmp	r3, #8
 80182d6:	f040 80db 	bne.w	8018490 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80182da:	4b7c      	ldr	r3, [pc, #496]	@ (80184cc <icmp_input+0x248>)
 80182dc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182de:	4b7a      	ldr	r3, [pc, #488]	@ (80184c8 <icmp_input+0x244>)
 80182e0:	695b      	ldr	r3, [r3, #20]
 80182e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182e6:	2be0      	cmp	r3, #224	@ 0xe0
 80182e8:	f000 80df 	beq.w	80184aa <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80182ec:	4b76      	ldr	r3, [pc, #472]	@ (80184c8 <icmp_input+0x244>)
 80182ee:	695b      	ldr	r3, [r3, #20]
 80182f0:	4a75      	ldr	r2, [pc, #468]	@ (80184c8 <icmp_input+0x244>)
 80182f2:	6812      	ldr	r2, [r2, #0]
 80182f4:	4611      	mov	r1, r2
 80182f6:	4618      	mov	r0, r3
 80182f8:	f000 fcae 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	f040 80d5 	bne.w	80184ae <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	891b      	ldrh	r3, [r3, #8]
 8018308:	2b07      	cmp	r3, #7
 801830a:	f240 80c9 	bls.w	80184a0 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7f4 fef1 	bl	800d0f6 <inet_chksum_pbuf>
 8018314:	4603      	mov	r3, r0
 8018316:	2b00      	cmp	r3, #0
 8018318:	d003      	beq.n	8018322 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f7f6 fa68 	bl	800e7f0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018320:	e0ce      	b.n	80184c0 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018322:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018324:	330e      	adds	r3, #14
 8018326:	4619      	mov	r1, r3
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f7f6 f9cb 	bl	800e6c4 <pbuf_add_header>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d04b      	beq.n	80183cc <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	891a      	ldrh	r2, [r3, #8]
 8018338:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801833a:	4413      	add	r3, r2
 801833c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	891b      	ldrh	r3, [r3, #8]
 8018342:	8b7a      	ldrh	r2, [r7, #26]
 8018344:	429a      	cmp	r2, r3
 8018346:	f0c0 80b4 	bcc.w	80184b2 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801834a:	8b7b      	ldrh	r3, [r7, #26]
 801834c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018350:	4619      	mov	r1, r3
 8018352:	200e      	movs	r0, #14
 8018354:	f7f5 ff68 	bl	800e228 <pbuf_alloc>
 8018358:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	2b00      	cmp	r3, #0
 801835e:	f000 80aa 	beq.w	80184b6 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	895b      	ldrh	r3, [r3, #10]
 8018366:	461a      	mov	r2, r3
 8018368:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801836a:	3308      	adds	r3, #8
 801836c:	429a      	cmp	r2, r3
 801836e:	d203      	bcs.n	8018378 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018370:	6978      	ldr	r0, [r7, #20]
 8018372:	f7f6 fa3d 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 8018376:	e09f      	b.n	80184b8 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801837e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018380:	4618      	mov	r0, r3
 8018382:	f002 f92c 	bl	801a5de <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018388:	4619      	mov	r1, r3
 801838a:	6978      	ldr	r0, [r7, #20]
 801838c:	f7f6 f9aa 	bl	800e6e4 <pbuf_remove_header>
 8018390:	4603      	mov	r3, r0
 8018392:	2b00      	cmp	r3, #0
 8018394:	d009      	beq.n	80183aa <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018396:	4b4e      	ldr	r3, [pc, #312]	@ (80184d0 <icmp_input+0x24c>)
 8018398:	22b6      	movs	r2, #182	@ 0xb6
 801839a:	494e      	ldr	r1, [pc, #312]	@ (80184d4 <icmp_input+0x250>)
 801839c:	484e      	ldr	r0, [pc, #312]	@ (80184d8 <icmp_input+0x254>)
 801839e:	f001 feb9 	bl	801a114 <iprintf>
          pbuf_free(r);
 80183a2:	6978      	ldr	r0, [r7, #20]
 80183a4:	f7f6 fa24 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 80183a8:	e086      	b.n	80184b8 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80183aa:	6879      	ldr	r1, [r7, #4]
 80183ac:	6978      	ldr	r0, [r7, #20]
 80183ae:	f7f6 fb53 	bl	800ea58 <pbuf_copy>
 80183b2:	4603      	mov	r3, r0
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d003      	beq.n	80183c0 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80183b8:	6978      	ldr	r0, [r7, #20]
 80183ba:	f7f6 fa19 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 80183be:	e07b      	b.n	80184b8 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f7f6 fa15 	bl	800e7f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	607b      	str	r3, [r7, #4]
 80183ca:	e00f      	b.n	80183ec <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80183cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80183ce:	330e      	adds	r3, #14
 80183d0:	4619      	mov	r1, r3
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f7f6 f986 	bl	800e6e4 <pbuf_remove_header>
 80183d8:	4603      	mov	r3, r0
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d006      	beq.n	80183ec <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80183de:	4b3c      	ldr	r3, [pc, #240]	@ (80184d0 <icmp_input+0x24c>)
 80183e0:	22c7      	movs	r2, #199	@ 0xc7
 80183e2:	493e      	ldr	r1, [pc, #248]	@ (80184dc <icmp_input+0x258>)
 80183e4:	483c      	ldr	r0, [pc, #240]	@ (80184d8 <icmp_input+0x254>)
 80183e6:	f001 fe95 	bl	801a114 <iprintf>
          goto icmperr;
 80183ea:	e065      	b.n	80184b8 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80183f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80183f4:	4619      	mov	r1, r3
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	f7f6 f964 	bl	800e6c4 <pbuf_add_header>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d145      	bne.n	801848e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018408:	69fb      	ldr	r3, [r7, #28]
 801840a:	681a      	ldr	r2, [r3, #0]
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018410:	4b2d      	ldr	r3, [pc, #180]	@ (80184c8 <icmp_input+0x244>)
 8018412:	691a      	ldr	r2, [r3, #16]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018418:	693b      	ldr	r3, [r7, #16]
 801841a:	2200      	movs	r2, #0
 801841c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	885b      	ldrh	r3, [r3, #2]
 8018422:	b29b      	uxth	r3, r3
 8018424:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018428:	4293      	cmp	r3, r2
 801842a:	d907      	bls.n	801843c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801842c:	693b      	ldr	r3, [r7, #16]
 801842e:	885b      	ldrh	r3, [r3, #2]
 8018430:	b29b      	uxth	r3, r3
 8018432:	3309      	adds	r3, #9
 8018434:	b29a      	uxth	r2, r3
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	805a      	strh	r2, [r3, #2]
 801843a:	e006      	b.n	801844a <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	885b      	ldrh	r3, [r3, #2]
 8018440:	b29b      	uxth	r3, r3
 8018442:	3308      	adds	r3, #8
 8018444:	b29a      	uxth	r2, r3
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	22ff      	movs	r2, #255	@ 0xff
 801844e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2200      	movs	r2, #0
 8018454:	729a      	strb	r2, [r3, #10]
 8018456:	2200      	movs	r2, #0
 8018458:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801845a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801845c:	4619      	mov	r1, r3
 801845e:	68f8      	ldr	r0, [r7, #12]
 8018460:	f7f4 fe37 	bl	800d0d2 <inet_chksum>
 8018464:	4603      	mov	r3, r0
 8018466:	461a      	mov	r2, r3
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	9302      	str	r3, [sp, #8]
 8018470:	2301      	movs	r3, #1
 8018472:	9301      	str	r3, [sp, #4]
 8018474:	2300      	movs	r3, #0
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	23ff      	movs	r3, #255	@ 0xff
 801847a:	2200      	movs	r2, #0
 801847c:	69f9      	ldr	r1, [r7, #28]
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f000 faaa 	bl	80189d8 <ip4_output_if>
 8018484:	4603      	mov	r3, r0
 8018486:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018488:	e001      	b.n	801848e <icmp_input+0x20a>
      break;
 801848a:	bf00      	nop
 801848c:	e000      	b.n	8018490 <icmp_input+0x20c>
      break;
 801848e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7f6 f9ad 	bl	800e7f0 <pbuf_free>
  return;
 8018496:	e013      	b.n	80184c0 <icmp_input+0x23c>
    goto lenerr;
 8018498:	bf00      	nop
 801849a:	e002      	b.n	80184a2 <icmp_input+0x21e>
    goto lenerr;
 801849c:	bf00      	nop
 801849e:	e000      	b.n	80184a2 <icmp_input+0x21e>
        goto lenerr;
 80184a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7f6 f9a4 	bl	800e7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80184a8:	e00a      	b.n	80184c0 <icmp_input+0x23c>
        goto icmperr;
 80184aa:	bf00      	nop
 80184ac:	e004      	b.n	80184b8 <icmp_input+0x234>
        goto icmperr;
 80184ae:	bf00      	nop
 80184b0:	e002      	b.n	80184b8 <icmp_input+0x234>
          goto icmperr;
 80184b2:	bf00      	nop
 80184b4:	e000      	b.n	80184b8 <icmp_input+0x234>
          goto icmperr;
 80184b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7f6 f999 	bl	800e7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80184be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80184c0:	3728      	adds	r7, #40	@ 0x28
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	2000b148 	.word	0x2000b148
 80184cc:	2000b15c 	.word	0x2000b15c
 80184d0:	0801ebec 	.word	0x0801ebec
 80184d4:	0801ec24 	.word	0x0801ec24
 80184d8:	0801ec5c 	.word	0x0801ec5c
 80184dc:	0801ec84 	.word	0x0801ec84

080184e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b082      	sub	sp, #8
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	460b      	mov	r3, r1
 80184ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80184ec:	78fb      	ldrb	r3, [r7, #3]
 80184ee:	461a      	mov	r2, r3
 80184f0:	2103      	movs	r1, #3
 80184f2:	6878      	ldr	r0, [r7, #4]
 80184f4:	f000 f814 	bl	8018520 <icmp_send_response>
}
 80184f8:	bf00      	nop
 80184fa:	3708      	adds	r7, #8
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}

08018500 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	460b      	mov	r3, r1
 801850a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801850c:	78fb      	ldrb	r3, [r7, #3]
 801850e:	461a      	mov	r2, r3
 8018510:	210b      	movs	r1, #11
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f000 f804 	bl	8018520 <icmp_send_response>
}
 8018518:	bf00      	nop
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b08c      	sub	sp, #48	@ 0x30
 8018524:	af04      	add	r7, sp, #16
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	460b      	mov	r3, r1
 801852a:	70fb      	strb	r3, [r7, #3]
 801852c:	4613      	mov	r3, r2
 801852e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018530:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018534:	2124      	movs	r1, #36	@ 0x24
 8018536:	2022      	movs	r0, #34	@ 0x22
 8018538:	f7f5 fe76 	bl	800e228 <pbuf_alloc>
 801853c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801853e:	69bb      	ldr	r3, [r7, #24]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d056      	beq.n	80185f2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018544:	69bb      	ldr	r3, [r7, #24]
 8018546:	895b      	ldrh	r3, [r3, #10]
 8018548:	2b23      	cmp	r3, #35	@ 0x23
 801854a:	d806      	bhi.n	801855a <icmp_send_response+0x3a>
 801854c:	4b2b      	ldr	r3, [pc, #172]	@ (80185fc <icmp_send_response+0xdc>)
 801854e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018552:	492b      	ldr	r1, [pc, #172]	@ (8018600 <icmp_send_response+0xe0>)
 8018554:	482b      	ldr	r0, [pc, #172]	@ (8018604 <icmp_send_response+0xe4>)
 8018556:	f001 fddd 	bl	801a114 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	685b      	ldr	r3, [r3, #4]
 801855e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018560:	69bb      	ldr	r3, [r7, #24]
 8018562:	685b      	ldr	r3, [r3, #4]
 8018564:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	78fa      	ldrb	r2, [r7, #3]
 801856a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	78ba      	ldrb	r2, [r7, #2]
 8018570:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	2200      	movs	r2, #0
 8018576:	711a      	strb	r2, [r3, #4]
 8018578:	2200      	movs	r2, #0
 801857a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	2200      	movs	r2, #0
 8018580:	719a      	strb	r2, [r3, #6]
 8018582:	2200      	movs	r2, #0
 8018584:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018586:	69bb      	ldr	r3, [r7, #24]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	f103 0008 	add.w	r0, r3, #8
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	221c      	movs	r2, #28
 8018594:	4619      	mov	r1, r3
 8018596:	f002 f822 	bl	801a5de <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	68db      	ldr	r3, [r3, #12]
 801859e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80185a0:	f107 030c 	add.w	r3, r7, #12
 80185a4:	4618      	mov	r0, r3
 80185a6:	f000 f82f 	bl	8018608 <ip4_route>
 80185aa:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80185ac:	69fb      	ldr	r3, [r7, #28]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d01b      	beq.n	80185ea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80185b2:	693b      	ldr	r3, [r7, #16]
 80185b4:	2200      	movs	r2, #0
 80185b6:	709a      	strb	r2, [r3, #2]
 80185b8:	2200      	movs	r2, #0
 80185ba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80185bc:	69bb      	ldr	r3, [r7, #24]
 80185be:	895b      	ldrh	r3, [r3, #10]
 80185c0:	4619      	mov	r1, r3
 80185c2:	6938      	ldr	r0, [r7, #16]
 80185c4:	f7f4 fd85 	bl	800d0d2 <inet_chksum>
 80185c8:	4603      	mov	r3, r0
 80185ca:	461a      	mov	r2, r3
 80185cc:	693b      	ldr	r3, [r7, #16]
 80185ce:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80185d0:	f107 020c 	add.w	r2, r7, #12
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	9302      	str	r3, [sp, #8]
 80185d8:	2301      	movs	r3, #1
 80185da:	9301      	str	r3, [sp, #4]
 80185dc:	2300      	movs	r3, #0
 80185de:	9300      	str	r3, [sp, #0]
 80185e0:	23ff      	movs	r3, #255	@ 0xff
 80185e2:	2100      	movs	r1, #0
 80185e4:	69b8      	ldr	r0, [r7, #24]
 80185e6:	f000 f9f7 	bl	80189d8 <ip4_output_if>
  }
  pbuf_free(q);
 80185ea:	69b8      	ldr	r0, [r7, #24]
 80185ec:	f7f6 f900 	bl	800e7f0 <pbuf_free>
 80185f0:	e000      	b.n	80185f4 <icmp_send_response+0xd4>
    return;
 80185f2:	bf00      	nop
}
 80185f4:	3720      	adds	r7, #32
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	0801ebec 	.word	0x0801ebec
 8018600:	0801ecb8 	.word	0x0801ecb8
 8018604:	0801ec5c 	.word	0x0801ec5c

08018608 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018608:	b480      	push	{r7}
 801860a:	b085      	sub	sp, #20
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018610:	4b33      	ldr	r3, [pc, #204]	@ (80186e0 <ip4_route+0xd8>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	60fb      	str	r3, [r7, #12]
 8018616:	e036      	b.n	8018686 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801861e:	f003 0301 	and.w	r3, r3, #1
 8018622:	b2db      	uxtb	r3, r3
 8018624:	2b00      	cmp	r3, #0
 8018626:	d02b      	beq.n	8018680 <ip4_route+0x78>
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801862e:	089b      	lsrs	r3, r3, #2
 8018630:	f003 0301 	and.w	r3, r3, #1
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d022      	beq.n	8018680 <ip4_route+0x78>
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	3304      	adds	r3, #4
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d01d      	beq.n	8018680 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	3304      	adds	r3, #4
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	405a      	eors	r2, r3
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	3308      	adds	r3, #8
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	4013      	ands	r3, r2
 8018658:	2b00      	cmp	r3, #0
 801865a:	d101      	bne.n	8018660 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	e038      	b.n	80186d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018666:	f003 0302 	and.w	r3, r3, #2
 801866a:	2b00      	cmp	r3, #0
 801866c:	d108      	bne.n	8018680 <ip4_route+0x78>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	330c      	adds	r3, #12
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	429a      	cmp	r2, r3
 801867a:	d101      	bne.n	8018680 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	e028      	b.n	80186d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	60fb      	str	r3, [r7, #12]
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d1c5      	bne.n	8018618 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801868c:	4b15      	ldr	r3, [pc, #84]	@ (80186e4 <ip4_route+0xdc>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d01a      	beq.n	80186ca <ip4_route+0xc2>
 8018694:	4b13      	ldr	r3, [pc, #76]	@ (80186e4 <ip4_route+0xdc>)
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801869c:	f003 0301 	and.w	r3, r3, #1
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d012      	beq.n	80186ca <ip4_route+0xc2>
 80186a4:	4b0f      	ldr	r3, [pc, #60]	@ (80186e4 <ip4_route+0xdc>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80186ac:	f003 0304 	and.w	r3, r3, #4
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d00a      	beq.n	80186ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80186b4:	4b0b      	ldr	r3, [pc, #44]	@ (80186e4 <ip4_route+0xdc>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	3304      	adds	r3, #4
 80186ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d004      	beq.n	80186ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80186c8:	d101      	bne.n	80186ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80186ca:	2300      	movs	r3, #0
 80186cc:	e001      	b.n	80186d2 <ip4_route+0xca>
  }

  return netif_default;
 80186ce:	4b05      	ldr	r3, [pc, #20]	@ (80186e4 <ip4_route+0xdc>)
 80186d0:	681b      	ldr	r3, [r3, #0]
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	3714      	adds	r7, #20
 80186d6:	46bd      	mov	sp, r7
 80186d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186dc:	4770      	bx	lr
 80186de:	bf00      	nop
 80186e0:	20017660 	.word	0x20017660
 80186e4:	20017664 	.word	0x20017664

080186e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b082      	sub	sp, #8
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80186f6:	f003 0301 	and.w	r3, r3, #1
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d016      	beq.n	801872e <ip4_input_accept+0x46>
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	3304      	adds	r3, #4
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d011      	beq.n	801872e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801870a:	4b0b      	ldr	r3, [pc, #44]	@ (8018738 <ip4_input_accept+0x50>)
 801870c:	695a      	ldr	r2, [r3, #20]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	3304      	adds	r3, #4
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	429a      	cmp	r2, r3
 8018716:	d008      	beq.n	801872a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018718:	4b07      	ldr	r3, [pc, #28]	@ (8018738 <ip4_input_accept+0x50>)
 801871a:	695b      	ldr	r3, [r3, #20]
 801871c:	6879      	ldr	r1, [r7, #4]
 801871e:	4618      	mov	r0, r3
 8018720:	f000 fa9a 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8018724:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018726:	2b00      	cmp	r3, #0
 8018728:	d001      	beq.n	801872e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801872a:	2301      	movs	r3, #1
 801872c:	e000      	b.n	8018730 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801872e:	2300      	movs	r3, #0
}
 8018730:	4618      	mov	r0, r3
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	2000b148 	.word	0x2000b148

0801873c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b088      	sub	sp, #32
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018746:	2301      	movs	r3, #1
 8018748:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	685b      	ldr	r3, [r3, #4]
 801874e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	091b      	lsrs	r3, r3, #4
 8018756:	b2db      	uxtb	r3, r3
 8018758:	2b04      	cmp	r3, #4
 801875a:	d004      	beq.n	8018766 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f7f6 f847 	bl	800e7f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018762:	2300      	movs	r3, #0
 8018764:	e130      	b.n	80189c8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	f003 030f 	and.w	r3, r3, #15
 801876e:	b2db      	uxtb	r3, r3
 8018770:	009b      	lsls	r3, r3, #2
 8018772:	b2db      	uxtb	r3, r3
 8018774:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018776:	693b      	ldr	r3, [r7, #16]
 8018778:	885b      	ldrh	r3, [r3, #2]
 801877a:	b29b      	uxth	r3, r3
 801877c:	4618      	mov	r0, r3
 801877e:	f7f4 fb5f 	bl	800ce40 <lwip_htons>
 8018782:	4603      	mov	r3, r0
 8018784:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	891b      	ldrh	r3, [r3, #8]
 801878a:	89ba      	ldrh	r2, [r7, #12]
 801878c:	429a      	cmp	r2, r3
 801878e:	d204      	bcs.n	801879a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018790:	89bb      	ldrh	r3, [r7, #12]
 8018792:	4619      	mov	r1, r3
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f7f5 fea5 	bl	800e4e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	895b      	ldrh	r3, [r3, #10]
 801879e:	89fa      	ldrh	r2, [r7, #14]
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d807      	bhi.n	80187b4 <ip4_input+0x78>
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	891b      	ldrh	r3, [r3, #8]
 80187a8:	89ba      	ldrh	r2, [r7, #12]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d802      	bhi.n	80187b4 <ip4_input+0x78>
 80187ae:	89fb      	ldrh	r3, [r7, #14]
 80187b0:	2b13      	cmp	r3, #19
 80187b2:	d804      	bhi.n	80187be <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80187b4:	6878      	ldr	r0, [r7, #4]
 80187b6:	f7f6 f81b 	bl	800e7f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80187ba:	2300      	movs	r3, #0
 80187bc:	e104      	b.n	80189c8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80187be:	89fb      	ldrh	r3, [r7, #14]
 80187c0:	4619      	mov	r1, r3
 80187c2:	6938      	ldr	r0, [r7, #16]
 80187c4:	f7f4 fc85 	bl	800d0d2 <inet_chksum>
 80187c8:	4603      	mov	r3, r0
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d004      	beq.n	80187d8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80187ce:	6878      	ldr	r0, [r7, #4]
 80187d0:	f7f6 f80e 	bl	800e7f0 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80187d4:	2300      	movs	r3, #0
 80187d6:	e0f7      	b.n	80189c8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	691b      	ldr	r3, [r3, #16]
 80187dc:	4a7c      	ldr	r2, [pc, #496]	@ (80189d0 <ip4_input+0x294>)
 80187de:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	4a7a      	ldr	r2, [pc, #488]	@ (80189d0 <ip4_input+0x294>)
 80187e6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80187e8:	4b79      	ldr	r3, [pc, #484]	@ (80189d0 <ip4_input+0x294>)
 80187ea:	695b      	ldr	r3, [r3, #20]
 80187ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80187f0:	2be0      	cmp	r3, #224	@ 0xe0
 80187f2:	d112      	bne.n	801881a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80187f4:	683b      	ldr	r3, [r7, #0]
 80187f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80187fa:	f003 0301 	and.w	r3, r3, #1
 80187fe:	b2db      	uxtb	r3, r3
 8018800:	2b00      	cmp	r3, #0
 8018802:	d007      	beq.n	8018814 <ip4_input+0xd8>
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	3304      	adds	r3, #4
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d002      	beq.n	8018814 <ip4_input+0xd8>
      netif = inp;
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	61fb      	str	r3, [r7, #28]
 8018812:	e02a      	b.n	801886a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018814:	2300      	movs	r3, #0
 8018816:	61fb      	str	r3, [r7, #28]
 8018818:	e027      	b.n	801886a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801881a:	6838      	ldr	r0, [r7, #0]
 801881c:	f7ff ff64 	bl	80186e8 <ip4_input_accept>
 8018820:	4603      	mov	r3, r0
 8018822:	2b00      	cmp	r3, #0
 8018824:	d002      	beq.n	801882c <ip4_input+0xf0>
      netif = inp;
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	61fb      	str	r3, [r7, #28]
 801882a:	e01e      	b.n	801886a <ip4_input+0x12e>
    } else {
      netif = NULL;
 801882c:	2300      	movs	r3, #0
 801882e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018830:	4b67      	ldr	r3, [pc, #412]	@ (80189d0 <ip4_input+0x294>)
 8018832:	695b      	ldr	r3, [r3, #20]
 8018834:	b2db      	uxtb	r3, r3
 8018836:	2b7f      	cmp	r3, #127	@ 0x7f
 8018838:	d017      	beq.n	801886a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801883a:	4b66      	ldr	r3, [pc, #408]	@ (80189d4 <ip4_input+0x298>)
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	61fb      	str	r3, [r7, #28]
 8018840:	e00e      	b.n	8018860 <ip4_input+0x124>
          if (netif == inp) {
 8018842:	69fa      	ldr	r2, [r7, #28]
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	429a      	cmp	r2, r3
 8018848:	d006      	beq.n	8018858 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801884a:	69f8      	ldr	r0, [r7, #28]
 801884c:	f7ff ff4c 	bl	80186e8 <ip4_input_accept>
 8018850:	4603      	mov	r3, r0
 8018852:	2b00      	cmp	r3, #0
 8018854:	d108      	bne.n	8018868 <ip4_input+0x12c>
 8018856:	e000      	b.n	801885a <ip4_input+0x11e>
            continue;
 8018858:	bf00      	nop
        NETIF_FOREACH(netif) {
 801885a:	69fb      	ldr	r3, [r7, #28]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	61fb      	str	r3, [r7, #28]
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d1ed      	bne.n	8018842 <ip4_input+0x106>
 8018866:	e000      	b.n	801886a <ip4_input+0x12e>
            break;
 8018868:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801886a:	69fb      	ldr	r3, [r7, #28]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d111      	bne.n	8018894 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018870:	693b      	ldr	r3, [r7, #16]
 8018872:	7a5b      	ldrb	r3, [r3, #9]
 8018874:	2b11      	cmp	r3, #17
 8018876:	d10d      	bne.n	8018894 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018878:	89fb      	ldrh	r3, [r7, #14]
 801887a:	693a      	ldr	r2, [r7, #16]
 801887c:	4413      	add	r3, r2
 801887e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018880:	69bb      	ldr	r3, [r7, #24]
 8018882:	885b      	ldrh	r3, [r3, #2]
 8018884:	b29b      	uxth	r3, r3
 8018886:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801888a:	d103      	bne.n	8018894 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018890:	2300      	movs	r3, #0
 8018892:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018894:	697b      	ldr	r3, [r7, #20]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d017      	beq.n	80188ca <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801889a:	4b4d      	ldr	r3, [pc, #308]	@ (80189d0 <ip4_input+0x294>)
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d013      	beq.n	80188ca <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80188a2:	4b4b      	ldr	r3, [pc, #300]	@ (80189d0 <ip4_input+0x294>)
 80188a4:	691b      	ldr	r3, [r3, #16]
 80188a6:	6839      	ldr	r1, [r7, #0]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f000 f9d5 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 80188ae:	4603      	mov	r3, r0
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d105      	bne.n	80188c0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80188b4:	4b46      	ldr	r3, [pc, #280]	@ (80189d0 <ip4_input+0x294>)
 80188b6:	691b      	ldr	r3, [r3, #16]
 80188b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80188bc:	2be0      	cmp	r3, #224	@ 0xe0
 80188be:	d104      	bne.n	80188ca <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f7f5 ff95 	bl	800e7f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80188c6:	2300      	movs	r3, #0
 80188c8:	e07e      	b.n	80189c8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80188ca:	69fb      	ldr	r3, [r7, #28]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d104      	bne.n	80188da <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f7f5 ff8d 	bl	800e7f0 <pbuf_free>
    return ERR_OK;
 80188d6:	2300      	movs	r3, #0
 80188d8:	e076      	b.n	80189c8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	88db      	ldrh	r3, [r3, #6]
 80188de:	b29b      	uxth	r3, r3
 80188e0:	461a      	mov	r2, r3
 80188e2:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80188e6:	4013      	ands	r3, r2
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d00b      	beq.n	8018904 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 fcf9 	bl	80192e4 <ip4_reass>
 80188f2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d101      	bne.n	80188fe <ip4_input+0x1c2>
      return ERR_OK;
 80188fa:	2300      	movs	r3, #0
 80188fc:	e064      	b.n	80189c8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018904:	4a32      	ldr	r2, [pc, #200]	@ (80189d0 <ip4_input+0x294>)
 8018906:	69fb      	ldr	r3, [r7, #28]
 8018908:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801890a:	4a31      	ldr	r2, [pc, #196]	@ (80189d0 <ip4_input+0x294>)
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018910:	4a2f      	ldr	r2, [pc, #188]	@ (80189d0 <ip4_input+0x294>)
 8018912:	693b      	ldr	r3, [r7, #16]
 8018914:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018916:	693b      	ldr	r3, [r7, #16]
 8018918:	781b      	ldrb	r3, [r3, #0]
 801891a:	f003 030f 	and.w	r3, r3, #15
 801891e:	b2db      	uxtb	r3, r3
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	b2db      	uxtb	r3, r3
 8018924:	461a      	mov	r2, r3
 8018926:	4b2a      	ldr	r3, [pc, #168]	@ (80189d0 <ip4_input+0x294>)
 8018928:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801892a:	89fb      	ldrh	r3, [r7, #14]
 801892c:	4619      	mov	r1, r3
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f7f5 fed8 	bl	800e6e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018934:	693b      	ldr	r3, [r7, #16]
 8018936:	7a5b      	ldrb	r3, [r3, #9]
 8018938:	2b11      	cmp	r3, #17
 801893a:	d006      	beq.n	801894a <ip4_input+0x20e>
 801893c:	2b11      	cmp	r3, #17
 801893e:	dc13      	bgt.n	8018968 <ip4_input+0x22c>
 8018940:	2b01      	cmp	r3, #1
 8018942:	d00c      	beq.n	801895e <ip4_input+0x222>
 8018944:	2b06      	cmp	r3, #6
 8018946:	d005      	beq.n	8018954 <ip4_input+0x218>
 8018948:	e00e      	b.n	8018968 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801894a:	6839      	ldr	r1, [r7, #0]
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7fc fa37 	bl	8014dc0 <udp_input>
        break;
 8018952:	e026      	b.n	80189a2 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018954:	6839      	ldr	r1, [r7, #0]
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f7f8 f908 	bl	8010b6c <tcp_input>
        break;
 801895c:	e021      	b.n	80189a2 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801895e:	6839      	ldr	r1, [r7, #0]
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f7ff fc8f 	bl	8018284 <icmp_input>
        break;
 8018966:	e01c      	b.n	80189a2 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018968:	4b19      	ldr	r3, [pc, #100]	@ (80189d0 <ip4_input+0x294>)
 801896a:	695b      	ldr	r3, [r3, #20]
 801896c:	69f9      	ldr	r1, [r7, #28]
 801896e:	4618      	mov	r0, r3
 8018970:	f000 f972 	bl	8018c58 <ip4_addr_isbroadcast_u32>
 8018974:	4603      	mov	r3, r0
 8018976:	2b00      	cmp	r3, #0
 8018978:	d10f      	bne.n	801899a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801897a:	4b15      	ldr	r3, [pc, #84]	@ (80189d0 <ip4_input+0x294>)
 801897c:	695b      	ldr	r3, [r3, #20]
 801897e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018982:	2be0      	cmp	r3, #224	@ 0xe0
 8018984:	d009      	beq.n	801899a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801898a:	4619      	mov	r1, r3
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f7f5 ff1c 	bl	800e7ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018992:	2102      	movs	r1, #2
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f7ff fda3 	bl	80184e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801899a:	6878      	ldr	r0, [r7, #4]
 801899c:	f7f5 ff28 	bl	800e7f0 <pbuf_free>
        break;
 80189a0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80189a2:	4b0b      	ldr	r3, [pc, #44]	@ (80189d0 <ip4_input+0x294>)
 80189a4:	2200      	movs	r2, #0
 80189a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80189a8:	4b09      	ldr	r3, [pc, #36]	@ (80189d0 <ip4_input+0x294>)
 80189aa:	2200      	movs	r2, #0
 80189ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80189ae:	4b08      	ldr	r3, [pc, #32]	@ (80189d0 <ip4_input+0x294>)
 80189b0:	2200      	movs	r2, #0
 80189b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80189b4:	4b06      	ldr	r3, [pc, #24]	@ (80189d0 <ip4_input+0x294>)
 80189b6:	2200      	movs	r2, #0
 80189b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80189ba:	4b05      	ldr	r3, [pc, #20]	@ (80189d0 <ip4_input+0x294>)
 80189bc:	2200      	movs	r2, #0
 80189be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80189c0:	4b03      	ldr	r3, [pc, #12]	@ (80189d0 <ip4_input+0x294>)
 80189c2:	2200      	movs	r2, #0
 80189c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80189c6:	2300      	movs	r3, #0
}
 80189c8:	4618      	mov	r0, r3
 80189ca:	3720      	adds	r7, #32
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	2000b148 	.word	0x2000b148
 80189d4:	20017660 	.word	0x20017660

080189d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b08a      	sub	sp, #40	@ 0x28
 80189dc:	af04      	add	r7, sp, #16
 80189de:	60f8      	str	r0, [r7, #12]
 80189e0:	60b9      	str	r1, [r7, #8]
 80189e2:	607a      	str	r2, [r7, #4]
 80189e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d009      	beq.n	8018a04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d003      	beq.n	80189fe <ip4_output_if+0x26>
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d102      	bne.n	8018a04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80189fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a00:	3304      	adds	r3, #4
 8018a02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018a04:	78fa      	ldrb	r2, [r7, #3]
 8018a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a08:	9302      	str	r3, [sp, #8]
 8018a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018a0e:	9301      	str	r3, [sp, #4]
 8018a10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018a14:	9300      	str	r3, [sp, #0]
 8018a16:	4613      	mov	r3, r2
 8018a18:	687a      	ldr	r2, [r7, #4]
 8018a1a:	6979      	ldr	r1, [r7, #20]
 8018a1c:	68f8      	ldr	r0, [r7, #12]
 8018a1e:	f000 f805 	bl	8018a2c <ip4_output_if_src>
 8018a22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3718      	adds	r7, #24
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b088      	sub	sp, #32
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	60f8      	str	r0, [r7, #12]
 8018a34:	60b9      	str	r1, [r7, #8]
 8018a36:	607a      	str	r2, [r7, #4]
 8018a38:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	7b9b      	ldrb	r3, [r3, #14]
 8018a42:	2b01      	cmp	r3, #1
 8018a44:	d006      	beq.n	8018a54 <ip4_output_if_src+0x28>
 8018a46:	4b7e      	ldr	r3, [pc, #504]	@ (8018c40 <ip4_output_if_src+0x214>)
 8018a48:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8018a4c:	497d      	ldr	r1, [pc, #500]	@ (8018c44 <ip4_output_if_src+0x218>)
 8018a4e:	487e      	ldr	r0, [pc, #504]	@ (8018c48 <ip4_output_if_src+0x21c>)
 8018a50:	f001 fb60 	bl	801a114 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	f000 80c6 	beq.w	8018be8 <ip4_output_if_src+0x1bc>
    u16_t ip_hlen = IP_HLEN;
 8018a5c:	2314      	movs	r3, #20
 8018a5e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018a60:	2114      	movs	r1, #20
 8018a62:	68f8      	ldr	r0, [r7, #12]
 8018a64:	f7f5 fe2e 	bl	800e6c4 <pbuf_add_header>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d002      	beq.n	8018a74 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018a6e:	f06f 0301 	mvn.w	r3, #1
 8018a72:	e0e1      	b.n	8018c38 <ip4_output_if_src+0x20c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	685b      	ldr	r3, [r3, #4]
 8018a78:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	895b      	ldrh	r3, [r3, #10]
 8018a7e:	2b13      	cmp	r3, #19
 8018a80:	d806      	bhi.n	8018a90 <ip4_output_if_src+0x64>
 8018a82:	4b6f      	ldr	r3, [pc, #444]	@ (8018c40 <ip4_output_if_src+0x214>)
 8018a84:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8018a88:	4970      	ldr	r1, [pc, #448]	@ (8018c4c <ip4_output_if_src+0x220>)
 8018a8a:	486f      	ldr	r0, [pc, #444]	@ (8018c48 <ip4_output_if_src+0x21c>)
 8018a8c:	f001 fb42 	bl	801a114 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018a90:	69bb      	ldr	r3, [r7, #24]
 8018a92:	78fa      	ldrb	r2, [r7, #3]
 8018a94:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018a96:	69bb      	ldr	r3, [r7, #24]
 8018a98:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018a9c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8018a9e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018aa2:	78fb      	ldrb	r3, [r7, #3]
 8018aa4:	021b      	lsls	r3, r3, #8
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	b21b      	sxth	r3, r3
 8018aaa:	021b      	lsls	r3, r3, #8
 8018aac:	b21a      	sxth	r2, r3
 8018aae:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8018ab2:	78fb      	ldrb	r3, [r7, #3]
 8018ab4:	021b      	lsls	r3, r3, #8
 8018ab6:	430b      	orrs	r3, r1
 8018ab8:	121b      	asrs	r3, r3, #8
 8018aba:	b21b      	sxth	r3, r3
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	b21b      	sxth	r3, r3
 8018ac0:	4313      	orrs	r3, r2
 8018ac2:	b21b      	sxth	r3, r3
 8018ac4:	b29b      	uxth	r3, r3
 8018ac6:	461a      	mov	r2, r3
 8018ac8:	69fb      	ldr	r3, [r7, #28]
 8018aca:	4413      	add	r3, r2
 8018acc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681a      	ldr	r2, [r3, #0]
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8018ad6:	69bb      	ldr	r3, [r7, #24]
 8018ad8:	691b      	ldr	r3, [r3, #16]
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	69fa      	ldr	r2, [r7, #28]
 8018ade:	4413      	add	r3, r2
 8018ae0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8018ae2:	69bb      	ldr	r3, [r7, #24]
 8018ae4:	691b      	ldr	r3, [r3, #16]
 8018ae6:	0c1b      	lsrs	r3, r3, #16
 8018ae8:	69fa      	ldr	r2, [r7, #28]
 8018aea:	4413      	add	r3, r2
 8018aec:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018aee:	8afb      	ldrh	r3, [r7, #22]
 8018af0:	089b      	lsrs	r3, r3, #2
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018afa:	b2da      	uxtb	r2, r3
 8018afc:	69bb      	ldr	r3, [r7, #24]
 8018afe:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018b00:	69bb      	ldr	r3, [r7, #24]
 8018b02:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018b06:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8018b08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018b0c:	69bb      	ldr	r3, [r7, #24]
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	021b      	lsls	r3, r3, #8
 8018b12:	4313      	orrs	r3, r2
 8018b14:	b21b      	sxth	r3, r3
 8018b16:	021b      	lsls	r3, r3, #8
 8018b18:	b21a      	sxth	r2, r3
 8018b1a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	781b      	ldrb	r3, [r3, #0]
 8018b22:	021b      	lsls	r3, r3, #8
 8018b24:	430b      	orrs	r3, r1
 8018b26:	121b      	asrs	r3, r3, #8
 8018b28:	b21b      	sxth	r3, r3
 8018b2a:	b2db      	uxtb	r3, r3
 8018b2c:	b21b      	sxth	r3, r3
 8018b2e:	4313      	orrs	r3, r2
 8018b30:	b21b      	sxth	r3, r3
 8018b32:	b29b      	uxth	r3, r3
 8018b34:	461a      	mov	r2, r3
 8018b36:	69fb      	ldr	r3, [r7, #28]
 8018b38:	4413      	add	r3, r2
 8018b3a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	891b      	ldrh	r3, [r3, #8]
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7f4 f97d 	bl	800ce40 <lwip_htons>
 8018b46:	4603      	mov	r3, r0
 8018b48:	461a      	mov	r2, r3
 8018b4a:	69bb      	ldr	r3, [r7, #24]
 8018b4c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8018b4e:	69bb      	ldr	r3, [r7, #24]
 8018b50:	885b      	ldrh	r3, [r3, #2]
 8018b52:	b29b      	uxth	r3, r3
 8018b54:	461a      	mov	r2, r3
 8018b56:	69fb      	ldr	r3, [r7, #28]
 8018b58:	4413      	add	r3, r2
 8018b5a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018b5c:	69bb      	ldr	r3, [r7, #24]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	719a      	strb	r2, [r3, #6]
 8018b62:	2200      	movs	r2, #0
 8018b64:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018b66:	4b3a      	ldr	r3, [pc, #232]	@ (8018c50 <ip4_output_if_src+0x224>)
 8018b68:	881b      	ldrh	r3, [r3, #0]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f4 f968 	bl	800ce40 <lwip_htons>
 8018b70:	4603      	mov	r3, r0
 8018b72:	461a      	mov	r2, r3
 8018b74:	69bb      	ldr	r3, [r7, #24]
 8018b76:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8018b78:	69bb      	ldr	r3, [r7, #24]
 8018b7a:	889b      	ldrh	r3, [r3, #4]
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	461a      	mov	r2, r3
 8018b80:	69fb      	ldr	r3, [r7, #28]
 8018b82:	4413      	add	r3, r2
 8018b84:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018b86:	4b32      	ldr	r3, [pc, #200]	@ (8018c50 <ip4_output_if_src+0x224>)
 8018b88:	881b      	ldrh	r3, [r3, #0]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	4b30      	ldr	r3, [pc, #192]	@ (8018c50 <ip4_output_if_src+0x224>)
 8018b90:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d104      	bne.n	8018ba2 <ip4_output_if_src+0x176>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018b98:	4b2e      	ldr	r3, [pc, #184]	@ (8018c54 <ip4_output_if_src+0x228>)
 8018b9a:	681a      	ldr	r2, [r3, #0]
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	60da      	str	r2, [r3, #12]
 8018ba0:	e003      	b.n	8018baa <ip4_output_if_src+0x17e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	681a      	ldr	r2, [r3, #0]
 8018ba6:	69bb      	ldr	r3, [r7, #24]
 8018ba8:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8018baa:	69bb      	ldr	r3, [r7, #24]
 8018bac:	68db      	ldr	r3, [r3, #12]
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	69fa      	ldr	r2, [r7, #28]
 8018bb2:	4413      	add	r3, r2
 8018bb4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8018bb6:	69bb      	ldr	r3, [r7, #24]
 8018bb8:	68db      	ldr	r3, [r3, #12]
 8018bba:	0c1b      	lsrs	r3, r3, #16
 8018bbc:	69fa      	ldr	r2, [r7, #28]
 8018bbe:	4413      	add	r3, r2
 8018bc0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8018bc2:	69fb      	ldr	r3, [r7, #28]
 8018bc4:	0c1a      	lsrs	r2, r3, #16
 8018bc6:	69fb      	ldr	r3, [r7, #28]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	4413      	add	r3, r2
 8018bcc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8018bce:	69fb      	ldr	r3, [r7, #28]
 8018bd0:	0c1b      	lsrs	r3, r3, #16
 8018bd2:	69fa      	ldr	r2, [r7, #28]
 8018bd4:	4413      	add	r3, r2
 8018bd6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8018bd8:	69fb      	ldr	r3, [r7, #28]
 8018bda:	43db      	mvns	r3, r3
 8018bdc:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8018bde:	69fb      	ldr	r3, [r7, #28]
 8018be0:	b29a      	uxth	r2, r3
 8018be2:	69bb      	ldr	r3, [r7, #24]
 8018be4:	815a      	strh	r2, [r3, #10]
 8018be6:	e00f      	b.n	8018c08 <ip4_output_if_src+0x1dc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	895b      	ldrh	r3, [r3, #10]
 8018bec:	2b13      	cmp	r3, #19
 8018bee:	d802      	bhi.n	8018bf6 <ip4_output_if_src+0x1ca>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018bf0:	f06f 0301 	mvn.w	r3, #1
 8018bf4:	e020      	b.n	8018c38 <ip4_output_if_src+0x20c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	685b      	ldr	r3, [r3, #4]
 8018bfa:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018bfc:	69bb      	ldr	r3, [r7, #24]
 8018bfe:	691b      	ldr	r3, [r3, #16]
 8018c00:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8018c02:	f107 0310 	add.w	r3, r7, #16
 8018c06:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00c      	beq.n	8018c2a <ip4_output_if_src+0x1fe>
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	891a      	ldrh	r2, [r3, #8]
 8018c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018c18:	429a      	cmp	r2, r3
 8018c1a:	d906      	bls.n	8018c2a <ip4_output_if_src+0x1fe>
    return ip4_frag(p, netif, dest);
 8018c1c:	687a      	ldr	r2, [r7, #4]
 8018c1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018c20:	68f8      	ldr	r0, [r7, #12]
 8018c22:	f000 fd5b 	bl	80196dc <ip4_frag>
 8018c26:	4603      	mov	r3, r0
 8018c28:	e006      	b.n	8018c38 <ip4_output_if_src+0x20c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c2c:	695b      	ldr	r3, [r3, #20]
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	68f9      	ldr	r1, [r7, #12]
 8018c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018c34:	4798      	blx	r3
 8018c36:	4603      	mov	r3, r0
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	3720      	adds	r7, #32
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	0801ece4 	.word	0x0801ece4
 8018c44:	0801ed18 	.word	0x0801ed18
 8018c48:	0801ed24 	.word	0x0801ed24
 8018c4c:	0801ed4c 	.word	0x0801ed4c
 8018c50:	200177f6 	.word	0x200177f6
 8018c54:	08023034 	.word	0x08023034

08018c58 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018c58:	b480      	push	{r7}
 8018c5a:	b085      	sub	sp, #20
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c6c:	d002      	beq.n	8018c74 <ip4_addr_isbroadcast_u32+0x1c>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d101      	bne.n	8018c78 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018c74:	2301      	movs	r3, #1
 8018c76:	e02a      	b.n	8018cce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018c7e:	f003 0302 	and.w	r3, r3, #2
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d101      	bne.n	8018c8a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018c86:	2300      	movs	r3, #0
 8018c88:	e021      	b.n	8018cce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	3304      	adds	r3, #4
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d101      	bne.n	8018c9a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018c96:	2300      	movs	r3, #0
 8018c98:	e019      	b.n	8018cce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018c9a:	68fa      	ldr	r2, [r7, #12]
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	3304      	adds	r3, #4
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	405a      	eors	r2, r3
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	3308      	adds	r3, #8
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4013      	ands	r3, r2
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d10d      	bne.n	8018ccc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	3308      	adds	r3, #8
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	43da      	mvns	r2, r3
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	3308      	adds	r3, #8
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d101      	bne.n	8018ccc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018cc8:	2301      	movs	r3, #1
 8018cca:	e000      	b.n	8018cce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018ccc:	2300      	movs	r3, #0
  }
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	3714      	adds	r7, #20
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd8:	4770      	bx	lr
	...

08018cdc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018ce6:	4b12      	ldr	r3, [pc, #72]	@ (8018d30 <ip_reass_tmr+0x54>)
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018cec:	e018      	b.n	8018d20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	7fdb      	ldrb	r3, [r3, #31]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d00b      	beq.n	8018d0e <ip_reass_tmr+0x32>
      r->timer--;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	7fdb      	ldrb	r3, [r3, #31]
 8018cfa:	3b01      	subs	r3, #1
 8018cfc:	b2da      	uxtb	r2, r3
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	60fb      	str	r3, [r7, #12]
 8018d0c:	e008      	b.n	8018d20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018d18:	68b9      	ldr	r1, [r7, #8]
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f000 f80a 	bl	8018d34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d1e3      	bne.n	8018cee <ip_reass_tmr+0x12>
    }
  }
}
 8018d26:	bf00      	nop
 8018d28:	bf00      	nop
 8018d2a:	3710      	adds	r7, #16
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	200177f8 	.word	0x200177f8

08018d34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b088      	sub	sp, #32
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018d42:	683a      	ldr	r2, [r7, #0]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d105      	bne.n	8018d56 <ip_reass_free_complete_datagram+0x22>
 8018d4a:	4b45      	ldr	r3, [pc, #276]	@ (8018e60 <ip_reass_free_complete_datagram+0x12c>)
 8018d4c:	22ab      	movs	r2, #171	@ 0xab
 8018d4e:	4945      	ldr	r1, [pc, #276]	@ (8018e64 <ip_reass_free_complete_datagram+0x130>)
 8018d50:	4845      	ldr	r0, [pc, #276]	@ (8018e68 <ip_reass_free_complete_datagram+0x134>)
 8018d52:	f001 f9df 	bl	801a114 <iprintf>
  if (prev != NULL) {
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d00a      	beq.n	8018d72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d005      	beq.n	8018d72 <ip_reass_free_complete_datagram+0x3e>
 8018d66:	4b3e      	ldr	r3, [pc, #248]	@ (8018e60 <ip_reass_free_complete_datagram+0x12c>)
 8018d68:	22ad      	movs	r2, #173	@ 0xad
 8018d6a:	4940      	ldr	r1, [pc, #256]	@ (8018e6c <ip_reass_free_complete_datagram+0x138>)
 8018d6c:	483e      	ldr	r0, [pc, #248]	@ (8018e68 <ip_reass_free_complete_datagram+0x134>)
 8018d6e:	f001 f9d1 	bl	801a114 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	685b      	ldr	r3, [r3, #4]
 8018d78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	889b      	ldrh	r3, [r3, #4]
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d12a      	bne.n	8018dda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	685b      	ldr	r3, [r3, #4]
 8018d88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018d8a:	697b      	ldr	r3, [r7, #20]
 8018d8c:	681a      	ldr	r2, [r3, #0]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018d92:	69bb      	ldr	r3, [r7, #24]
 8018d94:	6858      	ldr	r0, [r3, #4]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	3308      	adds	r3, #8
 8018d9a:	2214      	movs	r2, #20
 8018d9c:	4619      	mov	r1, r3
 8018d9e:	f001 fc1e 	bl	801a5de <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018da2:	2101      	movs	r1, #1
 8018da4:	69b8      	ldr	r0, [r7, #24]
 8018da6:	f7ff fbab 	bl	8018500 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018daa:	69b8      	ldr	r0, [r7, #24]
 8018dac:	f7f5 fdae 	bl	800e90c <pbuf_clen>
 8018db0:	4603      	mov	r3, r0
 8018db2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018db4:	8bfa      	ldrh	r2, [r7, #30]
 8018db6:	8a7b      	ldrh	r3, [r7, #18]
 8018db8:	4413      	add	r3, r2
 8018dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018dbe:	db05      	blt.n	8018dcc <ip_reass_free_complete_datagram+0x98>
 8018dc0:	4b27      	ldr	r3, [pc, #156]	@ (8018e60 <ip_reass_free_complete_datagram+0x12c>)
 8018dc2:	22bc      	movs	r2, #188	@ 0xbc
 8018dc4:	492a      	ldr	r1, [pc, #168]	@ (8018e70 <ip_reass_free_complete_datagram+0x13c>)
 8018dc6:	4828      	ldr	r0, [pc, #160]	@ (8018e68 <ip_reass_free_complete_datagram+0x134>)
 8018dc8:	f001 f9a4 	bl	801a114 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018dcc:	8bfa      	ldrh	r2, [r7, #30]
 8018dce:	8a7b      	ldrh	r3, [r7, #18]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018dd4:	69b8      	ldr	r0, [r7, #24]
 8018dd6:	f7f5 fd0b 	bl	800e7f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018de0:	e01f      	b.n	8018e22 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018de2:	69bb      	ldr	r3, [r7, #24]
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018de8:	69bb      	ldr	r3, [r7, #24]
 8018dea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018df2:	68f8      	ldr	r0, [r7, #12]
 8018df4:	f7f5 fd8a 	bl	800e90c <pbuf_clen>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018dfc:	8bfa      	ldrh	r2, [r7, #30]
 8018dfe:	8a7b      	ldrh	r3, [r7, #18]
 8018e00:	4413      	add	r3, r2
 8018e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018e06:	db05      	blt.n	8018e14 <ip_reass_free_complete_datagram+0xe0>
 8018e08:	4b15      	ldr	r3, [pc, #84]	@ (8018e60 <ip_reass_free_complete_datagram+0x12c>)
 8018e0a:	22cc      	movs	r2, #204	@ 0xcc
 8018e0c:	4918      	ldr	r1, [pc, #96]	@ (8018e70 <ip_reass_free_complete_datagram+0x13c>)
 8018e0e:	4816      	ldr	r0, [pc, #88]	@ (8018e68 <ip_reass_free_complete_datagram+0x134>)
 8018e10:	f001 f980 	bl	801a114 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018e14:	8bfa      	ldrh	r2, [r7, #30]
 8018e16:	8a7b      	ldrh	r3, [r7, #18]
 8018e18:	4413      	add	r3, r2
 8018e1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018e1c:	68f8      	ldr	r0, [r7, #12]
 8018e1e:	f7f5 fce7 	bl	800e7f0 <pbuf_free>
  while (p != NULL) {
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d1dc      	bne.n	8018de2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018e28:	6839      	ldr	r1, [r7, #0]
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f000 f8c2 	bl	8018fb4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018e30:	4b10      	ldr	r3, [pc, #64]	@ (8018e74 <ip_reass_free_complete_datagram+0x140>)
 8018e32:	881b      	ldrh	r3, [r3, #0]
 8018e34:	8bfa      	ldrh	r2, [r7, #30]
 8018e36:	429a      	cmp	r2, r3
 8018e38:	d905      	bls.n	8018e46 <ip_reass_free_complete_datagram+0x112>
 8018e3a:	4b09      	ldr	r3, [pc, #36]	@ (8018e60 <ip_reass_free_complete_datagram+0x12c>)
 8018e3c:	22d2      	movs	r2, #210	@ 0xd2
 8018e3e:	490e      	ldr	r1, [pc, #56]	@ (8018e78 <ip_reass_free_complete_datagram+0x144>)
 8018e40:	4809      	ldr	r0, [pc, #36]	@ (8018e68 <ip_reass_free_complete_datagram+0x134>)
 8018e42:	f001 f967 	bl	801a114 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018e46:	4b0b      	ldr	r3, [pc, #44]	@ (8018e74 <ip_reass_free_complete_datagram+0x140>)
 8018e48:	881a      	ldrh	r2, [r3, #0]
 8018e4a:	8bfb      	ldrh	r3, [r7, #30]
 8018e4c:	1ad3      	subs	r3, r2, r3
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	4b08      	ldr	r3, [pc, #32]	@ (8018e74 <ip_reass_free_complete_datagram+0x140>)
 8018e52:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018e54:	8bfb      	ldrh	r3, [r7, #30]
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3720      	adds	r7, #32
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	0801ed7c 	.word	0x0801ed7c
 8018e64:	0801edb8 	.word	0x0801edb8
 8018e68:	0801edc4 	.word	0x0801edc4
 8018e6c:	0801edec 	.word	0x0801edec
 8018e70:	0801ee00 	.word	0x0801ee00
 8018e74:	200177fc 	.word	0x200177fc
 8018e78:	0801ee20 	.word	0x0801ee20

08018e7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b08a      	sub	sp, #40	@ 0x28
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018e86:	2300      	movs	r3, #0
 8018e88:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018e92:	2300      	movs	r3, #0
 8018e94:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018e96:	2300      	movs	r3, #0
 8018e98:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018e9a:	4b28      	ldr	r3, [pc, #160]	@ (8018f3c <ip_reass_remove_oldest_datagram+0xc0>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018ea0:	e030      	b.n	8018f04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea4:	695a      	ldr	r2, [r3, #20]
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d10c      	bne.n	8018ec8 <ip_reass_remove_oldest_datagram+0x4c>
 8018eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eb0:	699a      	ldr	r2, [r3, #24]
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	691b      	ldr	r3, [r3, #16]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d106      	bne.n	8018ec8 <ip_reass_remove_oldest_datagram+0x4c>
 8018eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ebc:	899a      	ldrh	r2, [r3, #12]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	889b      	ldrh	r3, [r3, #4]
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	429a      	cmp	r2, r3
 8018ec6:	d014      	beq.n	8018ef2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	3301      	adds	r3, #1
 8018ecc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018ece:	6a3b      	ldr	r3, [r7, #32]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d104      	bne.n	8018ede <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ed6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018ed8:	69fb      	ldr	r3, [r7, #28]
 8018eda:	61bb      	str	r3, [r7, #24]
 8018edc:	e009      	b.n	8018ef2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ee0:	7fda      	ldrb	r2, [r3, #31]
 8018ee2:	6a3b      	ldr	r3, [r7, #32]
 8018ee4:	7fdb      	ldrb	r3, [r3, #31]
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	d803      	bhi.n	8018ef2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018eee:	69fb      	ldr	r3, [r7, #28]
 8018ef0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d001      	beq.n	8018efe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018efc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d1cb      	bne.n	8018ea2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018f0a:	6a3b      	ldr	r3, [r7, #32]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d008      	beq.n	8018f22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018f10:	69b9      	ldr	r1, [r7, #24]
 8018f12:	6a38      	ldr	r0, [r7, #32]
 8018f14:	f7ff ff0e 	bl	8018d34 <ip_reass_free_complete_datagram>
 8018f18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018f1a:	697a      	ldr	r2, [r7, #20]
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	4413      	add	r3, r2
 8018f20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018f22:	697a      	ldr	r2, [r7, #20]
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	da02      	bge.n	8018f30 <ip_reass_remove_oldest_datagram+0xb4>
 8018f2a:	693b      	ldr	r3, [r7, #16]
 8018f2c:	2b01      	cmp	r3, #1
 8018f2e:	dcac      	bgt.n	8018e8a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018f30:	697b      	ldr	r3, [r7, #20]
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3728      	adds	r7, #40	@ 0x28
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bd80      	pop	{r7, pc}
 8018f3a:	bf00      	nop
 8018f3c:	200177f8 	.word	0x200177f8

08018f40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f4a:	2004      	movs	r0, #4
 8018f4c:	f7f4 fda8 	bl	800daa0 <memp_malloc>
 8018f50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d110      	bne.n	8018f7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018f58:	6839      	ldr	r1, [r7, #0]
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f7ff ff8e 	bl	8018e7c <ip_reass_remove_oldest_datagram>
 8018f60:	4602      	mov	r2, r0
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	4293      	cmp	r3, r2
 8018f66:	dc03      	bgt.n	8018f70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f68:	2004      	movs	r0, #4
 8018f6a:	f7f4 fd99 	bl	800daa0 <memp_malloc>
 8018f6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d101      	bne.n	8018f7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018f76:	2300      	movs	r3, #0
 8018f78:	e016      	b.n	8018fa8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018f7a:	2220      	movs	r2, #32
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	68f8      	ldr	r0, [r7, #12]
 8018f80:	f001 fa92 	bl	801a4a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	220f      	movs	r2, #15
 8018f88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018f8a:	4b09      	ldr	r3, [pc, #36]	@ (8018fb0 <ip_reass_enqueue_new_datagram+0x70>)
 8018f8c:	681a      	ldr	r2, [r3, #0]
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018f92:	4a07      	ldr	r2, [pc, #28]	@ (8018fb0 <ip_reass_enqueue_new_datagram+0x70>)
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	3308      	adds	r3, #8
 8018f9c:	2214      	movs	r2, #20
 8018f9e:	6879      	ldr	r1, [r7, #4]
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f001 fb1c 	bl	801a5de <memcpy>
  return ipr;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3710      	adds	r7, #16
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	200177f8 	.word	0x200177f8

08018fb4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018fbe:	4b10      	ldr	r3, [pc, #64]	@ (8019000 <ip_reass_dequeue_datagram+0x4c>)
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	687a      	ldr	r2, [r7, #4]
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	d104      	bne.n	8018fd2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8019000 <ip_reass_dequeue_datagram+0x4c>)
 8018fce:	6013      	str	r3, [r2, #0]
 8018fd0:	e00d      	b.n	8018fee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d106      	bne.n	8018fe6 <ip_reass_dequeue_datagram+0x32>
 8018fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8019004 <ip_reass_dequeue_datagram+0x50>)
 8018fda:	f240 1245 	movw	r2, #325	@ 0x145
 8018fde:	490a      	ldr	r1, [pc, #40]	@ (8019008 <ip_reass_dequeue_datagram+0x54>)
 8018fe0:	480a      	ldr	r0, [pc, #40]	@ (801900c <ip_reass_dequeue_datagram+0x58>)
 8018fe2:	f001 f897 	bl	801a114 <iprintf>
    prev->next = ipr->next;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681a      	ldr	r2, [r3, #0]
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018fee:	6879      	ldr	r1, [r7, #4]
 8018ff0:	2004      	movs	r0, #4
 8018ff2:	f7f4 fda7 	bl	800db44 <memp_free>
}
 8018ff6:	bf00      	nop
 8018ff8:	3708      	adds	r7, #8
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	200177f8 	.word	0x200177f8
 8019004:	0801ed7c 	.word	0x0801ed7c
 8019008:	0801ee44 	.word	0x0801ee44
 801900c:	0801edc4 	.word	0x0801edc4

08019010 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b08c      	sub	sp, #48	@ 0x30
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801901c:	2300      	movs	r3, #0
 801901e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019020:	2301      	movs	r3, #1
 8019022:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801902a:	69fb      	ldr	r3, [r7, #28]
 801902c:	885b      	ldrh	r3, [r3, #2]
 801902e:	b29b      	uxth	r3, r3
 8019030:	4618      	mov	r0, r3
 8019032:	f7f3 ff05 	bl	800ce40 <lwip_htons>
 8019036:	4603      	mov	r3, r0
 8019038:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801903a:	69fb      	ldr	r3, [r7, #28]
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	f003 030f 	and.w	r3, r3, #15
 8019042:	b2db      	uxtb	r3, r3
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019048:	7e7b      	ldrb	r3, [r7, #25]
 801904a:	b29b      	uxth	r3, r3
 801904c:	8b7a      	ldrh	r2, [r7, #26]
 801904e:	429a      	cmp	r2, r3
 8019050:	d202      	bcs.n	8019058 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019052:	f04f 33ff 	mov.w	r3, #4294967295
 8019056:	e135      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019058:	7e7b      	ldrb	r3, [r7, #25]
 801905a:	b29b      	uxth	r3, r3
 801905c:	8b7a      	ldrh	r2, [r7, #26]
 801905e:	1ad3      	subs	r3, r2, r3
 8019060:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019062:	69fb      	ldr	r3, [r7, #28]
 8019064:	88db      	ldrh	r3, [r3, #6]
 8019066:	b29b      	uxth	r3, r3
 8019068:	4618      	mov	r0, r3
 801906a:	f7f3 fee9 	bl	800ce40 <lwip_htons>
 801906e:	4603      	mov	r3, r0
 8019070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019074:	b29b      	uxth	r3, r3
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019082:	2200      	movs	r2, #0
 8019084:	701a      	strb	r2, [r3, #0]
 8019086:	2200      	movs	r2, #0
 8019088:	705a      	strb	r2, [r3, #1]
 801908a:	2200      	movs	r2, #0
 801908c:	709a      	strb	r2, [r3, #2]
 801908e:	2200      	movs	r2, #0
 8019090:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019094:	8afa      	ldrh	r2, [r7, #22]
 8019096:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019098:	8afa      	ldrh	r2, [r7, #22]
 801909a:	8b7b      	ldrh	r3, [r7, #26]
 801909c:	4413      	add	r3, r2
 801909e:	b29a      	uxth	r2, r3
 80190a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80190a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a6:	88db      	ldrh	r3, [r3, #6]
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	8afa      	ldrh	r2, [r7, #22]
 80190ac:	429a      	cmp	r2, r3
 80190ae:	d902      	bls.n	80190b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80190b0:	f04f 33ff 	mov.w	r3, #4294967295
 80190b4:	e106      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80190bc:	e068      	b.n	8019190 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80190be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190c0:	685b      	ldr	r3, [r3, #4]
 80190c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80190c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190c6:	889b      	ldrh	r3, [r3, #4]
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	693b      	ldr	r3, [r7, #16]
 80190cc:	889b      	ldrh	r3, [r3, #4]
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	429a      	cmp	r2, r3
 80190d2:	d235      	bcs.n	8019140 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80190d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80190d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80190da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d020      	beq.n	8019122 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80190e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190e2:	889b      	ldrh	r3, [r3, #4]
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190e8:	88db      	ldrh	r3, [r3, #6]
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d307      	bcc.n	8019100 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80190f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190f2:	88db      	ldrh	r3, [r3, #6]
 80190f4:	b29a      	uxth	r2, r3
 80190f6:	693b      	ldr	r3, [r7, #16]
 80190f8:	889b      	ldrh	r3, [r3, #4]
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d902      	bls.n	8019106 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019100:	f04f 33ff 	mov.w	r3, #4294967295
 8019104:	e0de      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019108:	68ba      	ldr	r2, [r7, #8]
 801910a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801910e:	88db      	ldrh	r3, [r3, #6]
 8019110:	b29a      	uxth	r2, r3
 8019112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019114:	889b      	ldrh	r3, [r3, #4]
 8019116:	b29b      	uxth	r3, r3
 8019118:	429a      	cmp	r2, r3
 801911a:	d03d      	beq.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801911c:	2300      	movs	r3, #0
 801911e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019120:	e03a      	b.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019124:	88db      	ldrh	r3, [r3, #6]
 8019126:	b29a      	uxth	r2, r3
 8019128:	693b      	ldr	r3, [r7, #16]
 801912a:	889b      	ldrh	r3, [r3, #4]
 801912c:	b29b      	uxth	r3, r3
 801912e:	429a      	cmp	r2, r3
 8019130:	d902      	bls.n	8019138 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019132:	f04f 33ff 	mov.w	r3, #4294967295
 8019136:	e0c5      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	68ba      	ldr	r2, [r7, #8]
 801913c:	605a      	str	r2, [r3, #4]
      break;
 801913e:	e02b      	b.n	8019198 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019142:	889b      	ldrh	r3, [r3, #4]
 8019144:	b29a      	uxth	r2, r3
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	889b      	ldrh	r3, [r3, #4]
 801914a:	b29b      	uxth	r3, r3
 801914c:	429a      	cmp	r2, r3
 801914e:	d102      	bne.n	8019156 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019150:	f04f 33ff 	mov.w	r3, #4294967295
 8019154:	e0b6      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019158:	889b      	ldrh	r3, [r3, #4]
 801915a:	b29a      	uxth	r2, r3
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	88db      	ldrh	r3, [r3, #6]
 8019160:	b29b      	uxth	r3, r3
 8019162:	429a      	cmp	r2, r3
 8019164:	d202      	bcs.n	801916c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019166:	f04f 33ff 	mov.w	r3, #4294967295
 801916a:	e0ab      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801916e:	2b00      	cmp	r3, #0
 8019170:	d009      	beq.n	8019186 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019174:	88db      	ldrh	r3, [r3, #6]
 8019176:	b29a      	uxth	r2, r3
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	889b      	ldrh	r3, [r3, #4]
 801917c:	b29b      	uxth	r3, r3
 801917e:	429a      	cmp	r2, r3
 8019180:	d001      	beq.n	8019186 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019182:	2300      	movs	r3, #0
 8019184:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8019190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019192:	2b00      	cmp	r3, #0
 8019194:	d193      	bne.n	80190be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019196:	e000      	b.n	801919a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019198:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801919c:	2b00      	cmp	r3, #0
 801919e:	d12d      	bne.n	80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80191a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d01c      	beq.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80191a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191a8:	88db      	ldrh	r3, [r3, #6]
 80191aa:	b29a      	uxth	r2, r3
 80191ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191ae:	889b      	ldrh	r3, [r3, #4]
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	429a      	cmp	r2, r3
 80191b4:	d906      	bls.n	80191c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80191b6:	4b45      	ldr	r3, [pc, #276]	@ (80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191b8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80191bc:	4944      	ldr	r1, [pc, #272]	@ (80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80191be:	4845      	ldr	r0, [pc, #276]	@ (80192d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191c0:	f000 ffa8 	bl	801a114 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80191c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c6:	68ba      	ldr	r2, [r7, #8]
 80191c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80191ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191cc:	88db      	ldrh	r3, [r3, #6]
 80191ce:	b29a      	uxth	r2, r3
 80191d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191d2:	889b      	ldrh	r3, [r3, #4]
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d010      	beq.n	80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80191da:	2300      	movs	r3, #0
 80191dc:	623b      	str	r3, [r7, #32]
 80191de:	e00d      	b.n	80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	685b      	ldr	r3, [r3, #4]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d006      	beq.n	80191f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80191e8:	4b38      	ldr	r3, [pc, #224]	@ (80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191ea:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80191ee:	493a      	ldr	r1, [pc, #232]	@ (80192d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80191f0:	4838      	ldr	r0, [pc, #224]	@ (80192d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191f2:	f000 ff8f 	bl	801a114 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	68ba      	ldr	r2, [r7, #8]
 80191fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d105      	bne.n	801920e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	7f9b      	ldrb	r3, [r3, #30]
 8019206:	f003 0301 	and.w	r3, r3, #1
 801920a:	2b00      	cmp	r3, #0
 801920c:	d059      	beq.n	80192c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801920e:	6a3b      	ldr	r3, [r7, #32]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d04f      	beq.n	80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	685b      	ldr	r3, [r3, #4]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d006      	beq.n	801922a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	685b      	ldr	r3, [r3, #4]
 8019222:	889b      	ldrh	r3, [r3, #4]
 8019224:	b29b      	uxth	r3, r3
 8019226:	2b00      	cmp	r3, #0
 8019228:	d002      	beq.n	8019230 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801922a:	2300      	movs	r3, #0
 801922c:	623b      	str	r3, [r7, #32]
 801922e:	e041      	b.n	80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019232:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8019234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801923a:	e012      	b.n	8019262 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801923e:	685b      	ldr	r3, [r3, #4]
 8019240:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8019242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019244:	88db      	ldrh	r3, [r3, #6]
 8019246:	b29a      	uxth	r2, r3
 8019248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801924a:	889b      	ldrh	r3, [r3, #4]
 801924c:	b29b      	uxth	r3, r3
 801924e:	429a      	cmp	r2, r3
 8019250:	d002      	beq.n	8019258 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019252:	2300      	movs	r3, #0
 8019254:	623b      	str	r3, [r7, #32]
            break;
 8019256:	e007      	b.n	8019268 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801925a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801925c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8019262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019264:	2b00      	cmp	r3, #0
 8019266:	d1e9      	bne.n	801923c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019268:	6a3b      	ldr	r3, [r7, #32]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d022      	beq.n	80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d106      	bne.n	8019284 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019276:	4b15      	ldr	r3, [pc, #84]	@ (80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019278:	f240 12df 	movw	r2, #479	@ 0x1df
 801927c:	4917      	ldr	r1, [pc, #92]	@ (80192dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801927e:	4815      	ldr	r0, [pc, #84]	@ (80192d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019280:	f000 ff48 	bl	801a114 <iprintf>
          LWIP_ASSERT("sanity check",
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801928c:	429a      	cmp	r2, r3
 801928e:	d106      	bne.n	801929e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019290:	4b0e      	ldr	r3, [pc, #56]	@ (80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019292:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019296:	4911      	ldr	r1, [pc, #68]	@ (80192dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019298:	480e      	ldr	r0, [pc, #56]	@ (80192d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801929a:	f000 ff3b 	bl	801a114 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d006      	beq.n	80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80192a6:	4b09      	ldr	r3, [pc, #36]	@ (80192cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80192a8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80192ac:	490c      	ldr	r1, [pc, #48]	@ (80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80192ae:	4809      	ldr	r0, [pc, #36]	@ (80192d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80192b0:	f000 ff30 	bl	801a114 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80192b4:	6a3b      	ldr	r3, [r7, #32]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	bf14      	ite	ne
 80192ba:	2301      	movne	r3, #1
 80192bc:	2300      	moveq	r3, #0
 80192be:	b2db      	uxtb	r3, r3
 80192c0:	e000      	b.n	80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80192c2:	2300      	movs	r3, #0
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3730      	adds	r7, #48	@ 0x30
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	0801ed7c 	.word	0x0801ed7c
 80192d0:	0801ee60 	.word	0x0801ee60
 80192d4:	0801edc4 	.word	0x0801edc4
 80192d8:	0801ee80 	.word	0x0801ee80
 80192dc:	0801eeb8 	.word	0x0801eeb8
 80192e0:	0801eec8 	.word	0x0801eec8

080192e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b08e      	sub	sp, #56	@ 0x38
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	685b      	ldr	r3, [r3, #4]
 80192f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80192f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192f4:	781b      	ldrb	r3, [r3, #0]
 80192f6:	f003 030f 	and.w	r3, r3, #15
 80192fa:	b2db      	uxtb	r3, r3
 80192fc:	009b      	lsls	r3, r3, #2
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	2b14      	cmp	r3, #20
 8019302:	f040 8179 	bne.w	80195f8 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019308:	88db      	ldrh	r3, [r3, #6]
 801930a:	b29b      	uxth	r3, r3
 801930c:	4618      	mov	r0, r3
 801930e:	f7f3 fd97 	bl	800ce40 <lwip_htons>
 8019312:	4603      	mov	r3, r0
 8019314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019318:	b29b      	uxth	r3, r3
 801931a:	00db      	lsls	r3, r3, #3
 801931c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019320:	885b      	ldrh	r3, [r3, #2]
 8019322:	b29b      	uxth	r3, r3
 8019324:	4618      	mov	r0, r3
 8019326:	f7f3 fd8b 	bl	800ce40 <lwip_htons>
 801932a:	4603      	mov	r3, r0
 801932c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019330:	781b      	ldrb	r3, [r3, #0]
 8019332:	f003 030f 	and.w	r3, r3, #15
 8019336:	b2db      	uxtb	r3, r3
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801933e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019342:	b29b      	uxth	r3, r3
 8019344:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019346:	429a      	cmp	r2, r3
 8019348:	f0c0 8158 	bcc.w	80195fc <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801934c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019350:	b29b      	uxth	r3, r3
 8019352:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019354:	1ad3      	subs	r3, r2, r3
 8019356:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019358:	6878      	ldr	r0, [r7, #4]
 801935a:	f7f5 fad7 	bl	800e90c <pbuf_clen>
 801935e:	4603      	mov	r3, r0
 8019360:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019362:	4b90      	ldr	r3, [pc, #576]	@ (80195a4 <ip4_reass+0x2c0>)
 8019364:	881b      	ldrh	r3, [r3, #0]
 8019366:	461a      	mov	r2, r3
 8019368:	8c3b      	ldrh	r3, [r7, #32]
 801936a:	4413      	add	r3, r2
 801936c:	2b0a      	cmp	r3, #10
 801936e:	dd10      	ble.n	8019392 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019370:	8c3b      	ldrh	r3, [r7, #32]
 8019372:	4619      	mov	r1, r3
 8019374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019376:	f7ff fd81 	bl	8018e7c <ip_reass_remove_oldest_datagram>
 801937a:	4603      	mov	r3, r0
 801937c:	2b00      	cmp	r3, #0
 801937e:	f000 813f 	beq.w	8019600 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019382:	4b88      	ldr	r3, [pc, #544]	@ (80195a4 <ip4_reass+0x2c0>)
 8019384:	881b      	ldrh	r3, [r3, #0]
 8019386:	461a      	mov	r2, r3
 8019388:	8c3b      	ldrh	r3, [r7, #32]
 801938a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801938c:	2b0a      	cmp	r3, #10
 801938e:	f300 8137 	bgt.w	8019600 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019392:	4b85      	ldr	r3, [pc, #532]	@ (80195a8 <ip4_reass+0x2c4>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	633b      	str	r3, [r7, #48]	@ 0x30
 8019398:	e015      	b.n	80193c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801939c:	695a      	ldr	r2, [r3, #20]
 801939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193a0:	68db      	ldr	r3, [r3, #12]
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d10c      	bne.n	80193c0 <ip4_reass+0xdc>
 80193a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193a8:	699a      	ldr	r2, [r3, #24]
 80193aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ac:	691b      	ldr	r3, [r3, #16]
 80193ae:	429a      	cmp	r2, r3
 80193b0:	d106      	bne.n	80193c0 <ip4_reass+0xdc>
 80193b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193b4:	899a      	ldrh	r2, [r3, #12]
 80193b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193b8:	889b      	ldrh	r3, [r3, #4]
 80193ba:	b29b      	uxth	r3, r3
 80193bc:	429a      	cmp	r2, r3
 80193be:	d006      	beq.n	80193ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80193c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80193c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d1e6      	bne.n	801939a <ip4_reass+0xb6>
 80193cc:	e000      	b.n	80193d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80193ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80193d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d109      	bne.n	80193ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80193d6:	8c3b      	ldrh	r3, [r7, #32]
 80193d8:	4619      	mov	r1, r3
 80193da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80193dc:	f7ff fdb0 	bl	8018f40 <ip_reass_enqueue_new_datagram>
 80193e0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80193e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d11c      	bne.n	8019422 <ip4_reass+0x13e>
      goto nullreturn;
 80193e8:	e10d      	b.n	8019606 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80193ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ec:	88db      	ldrh	r3, [r3, #6]
 80193ee:	b29b      	uxth	r3, r3
 80193f0:	4618      	mov	r0, r3
 80193f2:	f7f3 fd25 	bl	800ce40 <lwip_htons>
 80193f6:	4603      	mov	r3, r0
 80193f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d110      	bne.n	8019422 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019402:	89db      	ldrh	r3, [r3, #14]
 8019404:	4618      	mov	r0, r3
 8019406:	f7f3 fd1b 	bl	800ce40 <lwip_htons>
 801940a:	4603      	mov	r3, r0
 801940c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019410:	2b00      	cmp	r3, #0
 8019412:	d006      	beq.n	8019422 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019416:	3308      	adds	r3, #8
 8019418:	2214      	movs	r2, #20
 801941a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801941c:	4618      	mov	r0, r3
 801941e:	f001 f8de 	bl	801a5de <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019424:	88db      	ldrh	r3, [r3, #6]
 8019426:	b29b      	uxth	r3, r3
 8019428:	f003 0320 	and.w	r3, r3, #32
 801942c:	2b00      	cmp	r3, #0
 801942e:	bf0c      	ite	eq
 8019430:	2301      	moveq	r3, #1
 8019432:	2300      	movne	r3, #0
 8019434:	b2db      	uxtb	r3, r3
 8019436:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019438:	69fb      	ldr	r3, [r7, #28]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d00e      	beq.n	801945c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801943e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019440:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019442:	4413      	add	r3, r2
 8019444:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019446:	8b7a      	ldrh	r2, [r7, #26]
 8019448:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801944a:	429a      	cmp	r2, r3
 801944c:	f0c0 80a8 	bcc.w	80195a0 <ip4_reass+0x2bc>
 8019450:	8b7b      	ldrh	r3, [r7, #26]
 8019452:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8019456:	4293      	cmp	r3, r2
 8019458:	f200 80a2 	bhi.w	80195a0 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801945c:	69fa      	ldr	r2, [r7, #28]
 801945e:	6879      	ldr	r1, [r7, #4]
 8019460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019462:	f7ff fdd5 	bl	8019010 <ip_reass_chain_frag_into_datagram_and_validate>
 8019466:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019468:	697b      	ldr	r3, [r7, #20]
 801946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801946e:	f000 80a3 	beq.w	80195b8 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019472:	4b4c      	ldr	r3, [pc, #304]	@ (80195a4 <ip4_reass+0x2c0>)
 8019474:	881a      	ldrh	r2, [r3, #0]
 8019476:	8c3b      	ldrh	r3, [r7, #32]
 8019478:	4413      	add	r3, r2
 801947a:	b29a      	uxth	r2, r3
 801947c:	4b49      	ldr	r3, [pc, #292]	@ (80195a4 <ip4_reass+0x2c0>)
 801947e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019480:	69fb      	ldr	r3, [r7, #28]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d00d      	beq.n	80194a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019486:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019488:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801948a:	4413      	add	r3, r2
 801948c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019490:	8a7a      	ldrh	r2, [r7, #18]
 8019492:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019496:	7f9b      	ldrb	r3, [r3, #30]
 8019498:	f043 0301 	orr.w	r3, r3, #1
 801949c:	b2da      	uxtb	r2, r3
 801949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d179      	bne.n	801959c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80194a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194aa:	8b9b      	ldrh	r3, [r3, #28]
 80194ac:	3314      	adds	r3, #20
 80194ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80194b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	685b      	ldr	r3, [r3, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80194ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80194c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194c4:	3308      	adds	r3, #8
 80194c6:	2214      	movs	r2, #20
 80194c8:	4619      	mov	r1, r3
 80194ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80194cc:	f001 f887 	bl	801a5de <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80194d0:	8a3b      	ldrh	r3, [r7, #16]
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7f3 fcb4 	bl	800ce40 <lwip_htons>
 80194d8:	4603      	mov	r3, r0
 80194da:	461a      	mov	r2, r3
 80194dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80194e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194e2:	2200      	movs	r2, #0
 80194e4:	719a      	strb	r2, [r3, #6]
 80194e6:	2200      	movs	r2, #0
 80194e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80194ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ec:	2200      	movs	r2, #0
 80194ee:	729a      	strb	r2, [r3, #10]
 80194f0:	2200      	movs	r2, #0
 80194f2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80194f4:	2114      	movs	r1, #20
 80194f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80194f8:	f7f3 fdeb 	bl	800d0d2 <inet_chksum>
 80194fc:	4603      	mov	r3, r0
 80194fe:	461a      	mov	r2, r3
 8019500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019502:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801950a:	e00d      	b.n	8019528 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801950c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801950e:	685b      	ldr	r3, [r3, #4]
 8019510:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019512:	2114      	movs	r1, #20
 8019514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019516:	f7f5 f8e5 	bl	800e6e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801951a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801951c:	6878      	ldr	r0, [r7, #4]
 801951e:	f7f5 fa35 	bl	800e98c <pbuf_cat>
      r = iprh->next_pbuf;
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8019528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1ee      	bne.n	801950c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801952e:	4b1e      	ldr	r3, [pc, #120]	@ (80195a8 <ip4_reass+0x2c4>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019534:	429a      	cmp	r2, r3
 8019536:	d102      	bne.n	801953e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019538:	2300      	movs	r3, #0
 801953a:	637b      	str	r3, [r7, #52]	@ 0x34
 801953c:	e010      	b.n	8019560 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801953e:	4b1a      	ldr	r3, [pc, #104]	@ (80195a8 <ip4_reass+0x2c4>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	637b      	str	r3, [r7, #52]	@ 0x34
 8019544:	e007      	b.n	8019556 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801954c:	429a      	cmp	r2, r3
 801954e:	d006      	beq.n	801955e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	637b      	str	r3, [r7, #52]	@ 0x34
 8019556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019558:	2b00      	cmp	r3, #0
 801955a:	d1f4      	bne.n	8019546 <ip4_reass+0x262>
 801955c:	e000      	b.n	8019560 <ip4_reass+0x27c>
          break;
 801955e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019560:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019562:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019564:	f7ff fd26 	bl	8018fb4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7f5 f9cf 	bl	800e90c <pbuf_clen>
 801956e:	4603      	mov	r3, r0
 8019570:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019572:	4b0c      	ldr	r3, [pc, #48]	@ (80195a4 <ip4_reass+0x2c0>)
 8019574:	881b      	ldrh	r3, [r3, #0]
 8019576:	8c3a      	ldrh	r2, [r7, #32]
 8019578:	429a      	cmp	r2, r3
 801957a:	d906      	bls.n	801958a <ip4_reass+0x2a6>
 801957c:	4b0b      	ldr	r3, [pc, #44]	@ (80195ac <ip4_reass+0x2c8>)
 801957e:	f240 229b 	movw	r2, #667	@ 0x29b
 8019582:	490b      	ldr	r1, [pc, #44]	@ (80195b0 <ip4_reass+0x2cc>)
 8019584:	480b      	ldr	r0, [pc, #44]	@ (80195b4 <ip4_reass+0x2d0>)
 8019586:	f000 fdc5 	bl	801a114 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801958a:	4b06      	ldr	r3, [pc, #24]	@ (80195a4 <ip4_reass+0x2c0>)
 801958c:	881a      	ldrh	r2, [r3, #0]
 801958e:	8c3b      	ldrh	r3, [r7, #32]
 8019590:	1ad3      	subs	r3, r2, r3
 8019592:	b29a      	uxth	r2, r3
 8019594:	4b03      	ldr	r3, [pc, #12]	@ (80195a4 <ip4_reass+0x2c0>)
 8019596:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	e038      	b.n	801960e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801959c:	2300      	movs	r3, #0
 801959e:	e036      	b.n	801960e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 80195a0:	bf00      	nop
 80195a2:	e00a      	b.n	80195ba <ip4_reass+0x2d6>
 80195a4:	200177fc 	.word	0x200177fc
 80195a8:	200177f8 	.word	0x200177f8
 80195ac:	0801ed7c 	.word	0x0801ed7c
 80195b0:	0801eeec 	.word	0x0801eeec
 80195b4:	0801edc4 	.word	0x0801edc4
    goto nullreturn_ipr;
 80195b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80195ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d106      	bne.n	80195ce <ip4_reass+0x2ea>
 80195c0:	4b15      	ldr	r3, [pc, #84]	@ (8019618 <ip4_reass+0x334>)
 80195c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80195c6:	4915      	ldr	r1, [pc, #84]	@ (801961c <ip4_reass+0x338>)
 80195c8:	4815      	ldr	r0, [pc, #84]	@ (8019620 <ip4_reass+0x33c>)
 80195ca:	f000 fda3 	bl	801a114 <iprintf>
  if (ipr->p == NULL) {
 80195ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d116      	bne.n	8019604 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80195d6:	4b13      	ldr	r3, [pc, #76]	@ (8019624 <ip4_reass+0x340>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80195dc:	429a      	cmp	r2, r3
 80195de:	d006      	beq.n	80195ee <ip4_reass+0x30a>
 80195e0:	4b0d      	ldr	r3, [pc, #52]	@ (8019618 <ip4_reass+0x334>)
 80195e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80195e6:	4910      	ldr	r1, [pc, #64]	@ (8019628 <ip4_reass+0x344>)
 80195e8:	480d      	ldr	r0, [pc, #52]	@ (8019620 <ip4_reass+0x33c>)
 80195ea:	f000 fd93 	bl	801a114 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80195ee:	2100      	movs	r1, #0
 80195f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80195f2:	f7ff fcdf 	bl	8018fb4 <ip_reass_dequeue_datagram>
 80195f6:	e006      	b.n	8019606 <ip4_reass+0x322>
    goto nullreturn;
 80195f8:	bf00      	nop
 80195fa:	e004      	b.n	8019606 <ip4_reass+0x322>
    goto nullreturn;
 80195fc:	bf00      	nop
 80195fe:	e002      	b.n	8019606 <ip4_reass+0x322>
      goto nullreturn;
 8019600:	bf00      	nop
 8019602:	e000      	b.n	8019606 <ip4_reass+0x322>
  }

nullreturn:
 8019604:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	f7f5 f8f2 	bl	800e7f0 <pbuf_free>
  return NULL;
 801960c:	2300      	movs	r3, #0
}
 801960e:	4618      	mov	r0, r3
 8019610:	3738      	adds	r7, #56	@ 0x38
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	0801ed7c 	.word	0x0801ed7c
 801961c:	0801ef08 	.word	0x0801ef08
 8019620:	0801edc4 	.word	0x0801edc4
 8019624:	200177f8 	.word	0x200177f8
 8019628:	0801ef14 	.word	0x0801ef14

0801962c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019630:	2005      	movs	r0, #5
 8019632:	f7f4 fa35 	bl	800daa0 <memp_malloc>
 8019636:	4603      	mov	r3, r0
}
 8019638:	4618      	mov	r0, r3
 801963a:	bd80      	pop	{r7, pc}

0801963c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d106      	bne.n	8019658 <ip_frag_free_pbuf_custom_ref+0x1c>
 801964a:	4b07      	ldr	r3, [pc, #28]	@ (8019668 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801964c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8019650:	4906      	ldr	r1, [pc, #24]	@ (801966c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019652:	4807      	ldr	r0, [pc, #28]	@ (8019670 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019654:	f000 fd5e 	bl	801a114 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019658:	6879      	ldr	r1, [r7, #4]
 801965a:	2005      	movs	r0, #5
 801965c:	f7f4 fa72 	bl	800db44 <memp_free>
}
 8019660:	bf00      	nop
 8019662:	3708      	adds	r7, #8
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	0801ed7c 	.word	0x0801ed7c
 801966c:	0801ef34 	.word	0x0801ef34
 8019670:	0801edc4 	.word	0x0801edc4

08019674 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b084      	sub	sp, #16
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d106      	bne.n	8019694 <ipfrag_free_pbuf_custom+0x20>
 8019686:	4b11      	ldr	r3, [pc, #68]	@ (80196cc <ipfrag_free_pbuf_custom+0x58>)
 8019688:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801968c:	4910      	ldr	r1, [pc, #64]	@ (80196d0 <ipfrag_free_pbuf_custom+0x5c>)
 801968e:	4811      	ldr	r0, [pc, #68]	@ (80196d4 <ipfrag_free_pbuf_custom+0x60>)
 8019690:	f000 fd40 	bl	801a114 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019694:	68fa      	ldr	r2, [r7, #12]
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	429a      	cmp	r2, r3
 801969a:	d006      	beq.n	80196aa <ipfrag_free_pbuf_custom+0x36>
 801969c:	4b0b      	ldr	r3, [pc, #44]	@ (80196cc <ipfrag_free_pbuf_custom+0x58>)
 801969e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80196a2:	490d      	ldr	r1, [pc, #52]	@ (80196d8 <ipfrag_free_pbuf_custom+0x64>)
 80196a4:	480b      	ldr	r0, [pc, #44]	@ (80196d4 <ipfrag_free_pbuf_custom+0x60>)
 80196a6:	f000 fd35 	bl	801a114 <iprintf>
  if (pcr->original != NULL) {
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	695b      	ldr	r3, [r3, #20]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d004      	beq.n	80196bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	695b      	ldr	r3, [r3, #20]
 80196b6:	4618      	mov	r0, r3
 80196b8:	f7f5 f89a 	bl	800e7f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80196bc:	68f8      	ldr	r0, [r7, #12]
 80196be:	f7ff ffbd 	bl	801963c <ip_frag_free_pbuf_custom_ref>
}
 80196c2:	bf00      	nop
 80196c4:	3710      	adds	r7, #16
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}
 80196ca:	bf00      	nop
 80196cc:	0801ed7c 	.word	0x0801ed7c
 80196d0:	0801ef40 	.word	0x0801ef40
 80196d4:	0801edc4 	.word	0x0801edc4
 80196d8:	0801ef4c 	.word	0x0801ef4c

080196dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b094      	sub	sp, #80	@ 0x50
 80196e0:	af02      	add	r7, sp, #8
 80196e2:	60f8      	str	r0, [r7, #12]
 80196e4:	60b9      	str	r1, [r7, #8]
 80196e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80196e8:	2300      	movs	r3, #0
 80196ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80196ee:	68bb      	ldr	r3, [r7, #8]
 80196f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80196f2:	3b14      	subs	r3, #20
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	da00      	bge.n	80196fa <ip4_frag+0x1e>
 80196f8:	3307      	adds	r3, #7
 80196fa:	10db      	asrs	r3, r3, #3
 80196fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80196fe:	2314      	movs	r3, #20
 8019700:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8019708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801970a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801970c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	f003 030f 	and.w	r3, r3, #15
 8019714:	b2db      	uxtb	r3, r3
 8019716:	009b      	lsls	r3, r3, #2
 8019718:	b2db      	uxtb	r3, r3
 801971a:	2b14      	cmp	r3, #20
 801971c:	d002      	beq.n	8019724 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801971e:	f06f 0305 	mvn.w	r3, #5
 8019722:	e118      	b.n	8019956 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	895b      	ldrh	r3, [r3, #10]
 8019728:	2b13      	cmp	r3, #19
 801972a:	d809      	bhi.n	8019740 <ip4_frag+0x64>
 801972c:	4b8c      	ldr	r3, [pc, #560]	@ (8019960 <ip4_frag+0x284>)
 801972e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8019732:	498c      	ldr	r1, [pc, #560]	@ (8019964 <ip4_frag+0x288>)
 8019734:	488c      	ldr	r0, [pc, #560]	@ (8019968 <ip4_frag+0x28c>)
 8019736:	f000 fced 	bl	801a114 <iprintf>
 801973a:	f06f 0305 	mvn.w	r3, #5
 801973e:	e10a      	b.n	8019956 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019742:	88db      	ldrh	r3, [r3, #6]
 8019744:	b29b      	uxth	r3, r3
 8019746:	4618      	mov	r0, r3
 8019748:	f7f3 fb7a 	bl	800ce40 <lwip_htons>
 801974c:	4603      	mov	r3, r0
 801974e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019750:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019756:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801975a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801975c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019760:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	891b      	ldrh	r3, [r3, #8]
 8019766:	3b14      	subs	r3, #20
 8019768:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801976c:	e0e9      	b.n	8019942 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801976e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019770:	00db      	lsls	r3, r3, #3
 8019772:	b29b      	uxth	r3, r3
 8019774:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019778:	4293      	cmp	r3, r2
 801977a:	bf28      	it	cs
 801977c:	4613      	movcs	r3, r2
 801977e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019780:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019784:	2114      	movs	r1, #20
 8019786:	200e      	movs	r0, #14
 8019788:	f7f4 fd4e 	bl	800e228 <pbuf_alloc>
 801978c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019790:	2b00      	cmp	r3, #0
 8019792:	f000 80dd 	beq.w	8019950 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019798:	895b      	ldrh	r3, [r3, #10]
 801979a:	2b13      	cmp	r3, #19
 801979c:	d806      	bhi.n	80197ac <ip4_frag+0xd0>
 801979e:	4b70      	ldr	r3, [pc, #448]	@ (8019960 <ip4_frag+0x284>)
 80197a0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80197a4:	4971      	ldr	r1, [pc, #452]	@ (801996c <ip4_frag+0x290>)
 80197a6:	4870      	ldr	r0, [pc, #448]	@ (8019968 <ip4_frag+0x28c>)
 80197a8:	f000 fcb4 	bl	801a114 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80197ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ae:	685b      	ldr	r3, [r3, #4]
 80197b0:	2214      	movs	r2, #20
 80197b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80197b4:	4618      	mov	r0, r3
 80197b6:	f000 ff12 	bl	801a5de <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80197ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197bc:	685b      	ldr	r3, [r3, #4]
 80197be:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80197c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80197c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80197c6:	e064      	b.n	8019892 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	895a      	ldrh	r2, [r3, #10]
 80197cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	895b      	ldrh	r3, [r3, #10]
 80197d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80197d8:	429a      	cmp	r2, r3
 80197da:	d906      	bls.n	80197ea <ip4_frag+0x10e>
 80197dc:	4b60      	ldr	r3, [pc, #384]	@ (8019960 <ip4_frag+0x284>)
 80197de:	f240 322d 	movw	r2, #813	@ 0x32d
 80197e2:	4963      	ldr	r1, [pc, #396]	@ (8019970 <ip4_frag+0x294>)
 80197e4:	4860      	ldr	r0, [pc, #384]	@ (8019968 <ip4_frag+0x28c>)
 80197e6:	f000 fc95 	bl	801a114 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80197ea:	8bfa      	ldrh	r2, [r7, #30]
 80197ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80197f0:	4293      	cmp	r3, r2
 80197f2:	bf28      	it	cs
 80197f4:	4613      	movcs	r3, r2
 80197f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80197fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d105      	bne.n	801980e <ip4_frag+0x132>
        poff = 0;
 8019802:	2300      	movs	r3, #0
 8019804:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	60fb      	str	r3, [r7, #12]
        continue;
 801980c:	e041      	b.n	8019892 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801980e:	f7ff ff0d 	bl	801962c <ip_frag_alloc_pbuf_custom_ref>
 8019812:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019814:	69bb      	ldr	r3, [r7, #24]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d103      	bne.n	8019822 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801981a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801981c:	f7f4 ffe8 	bl	800e7f0 <pbuf_free>
        goto memerr;
 8019820:	e097      	b.n	8019952 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019822:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019828:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801982a:	4413      	add	r3, r2
 801982c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8019830:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019834:	9201      	str	r2, [sp, #4]
 8019836:	9300      	str	r3, [sp, #0]
 8019838:	4603      	mov	r3, r0
 801983a:	2241      	movs	r2, #65	@ 0x41
 801983c:	2000      	movs	r0, #0
 801983e:	f7f4 fe1d 	bl	800e47c <pbuf_alloced_custom>
 8019842:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d106      	bne.n	8019858 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801984a:	69b8      	ldr	r0, [r7, #24]
 801984c:	f7ff fef6 	bl	801963c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019850:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019852:	f7f4 ffcd 	bl	800e7f0 <pbuf_free>
        goto memerr;
 8019856:	e07c      	b.n	8019952 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019858:	68f8      	ldr	r0, [r7, #12]
 801985a:	f7f5 f86f 	bl	800e93c <pbuf_ref>
      pcr->original = p;
 801985e:	69bb      	ldr	r3, [r7, #24]
 8019860:	68fa      	ldr	r2, [r7, #12]
 8019862:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019864:	69bb      	ldr	r3, [r7, #24]
 8019866:	4a43      	ldr	r2, [pc, #268]	@ (8019974 <ip4_frag+0x298>)
 8019868:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801986a:	6979      	ldr	r1, [r7, #20]
 801986c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801986e:	f7f5 f88d 	bl	800e98c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019872:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8019876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801987a:	1ad3      	subs	r3, r2, r3
 801987c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019884:	2b00      	cmp	r3, #0
 8019886:	d004      	beq.n	8019892 <ip4_frag+0x1b6>
        poff = 0;
 8019888:	2300      	movs	r3, #0
 801988a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019896:	2b00      	cmp	r3, #0
 8019898:	d196      	bne.n	80197c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801989a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801989c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80198a0:	4413      	add	r3, r2
 80198a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80198a8:	f1a3 0213 	sub.w	r2, r3, #19
 80198ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80198b0:	429a      	cmp	r2, r3
 80198b2:	bfcc      	ite	gt
 80198b4:	2301      	movgt	r3, #1
 80198b6:	2300      	movle	r3, #0
 80198b8:	b2db      	uxtb	r3, r3
 80198ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80198bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80198c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80198c6:	6a3b      	ldr	r3, [r7, #32]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d002      	beq.n	80198d2 <ip4_frag+0x1f6>
 80198cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d003      	beq.n	80198da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80198d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80198d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80198d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80198da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80198dc:	4618      	mov	r0, r3
 80198de:	f7f3 faaf 	bl	800ce40 <lwip_htons>
 80198e2:	4603      	mov	r3, r0
 80198e4:	461a      	mov	r2, r3
 80198e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80198ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80198ec:	3314      	adds	r3, #20
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7f3 faa5 	bl	800ce40 <lwip_htons>
 80198f6:	4603      	mov	r3, r0
 80198f8:	461a      	mov	r2, r3
 80198fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80198fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019900:	2200      	movs	r2, #0
 8019902:	729a      	strb	r2, [r3, #10]
 8019904:	2200      	movs	r2, #0
 8019906:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8019908:	2114      	movs	r1, #20
 801990a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801990c:	f7f3 fbe1 	bl	800d0d2 <inet_chksum>
 8019910:	4603      	mov	r3, r0
 8019912:	461a      	mov	r2, r3
 8019914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019916:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	695b      	ldr	r3, [r3, #20]
 801991c:	687a      	ldr	r2, [r7, #4]
 801991e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019920:	68b8      	ldr	r0, [r7, #8]
 8019922:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019926:	f7f4 ff63 	bl	800e7f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801992a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801992e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8019936:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801993a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801993c:	4413      	add	r3, r2
 801993e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8019942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019946:	2b00      	cmp	r3, #0
 8019948:	f47f af11 	bne.w	801976e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801994c:	2300      	movs	r3, #0
 801994e:	e002      	b.n	8019956 <ip4_frag+0x27a>
      goto memerr;
 8019950:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019956:	4618      	mov	r0, r3
 8019958:	3748      	adds	r7, #72	@ 0x48
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	0801ed7c 	.word	0x0801ed7c
 8019964:	0801ef58 	.word	0x0801ef58
 8019968:	0801edc4 	.word	0x0801edc4
 801996c:	0801ef74 	.word	0x0801ef74
 8019970:	0801ef94 	.word	0x0801ef94
 8019974:	08019675 	.word	0x08019675

08019978 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b086      	sub	sp, #24
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019982:	230e      	movs	r3, #14
 8019984:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	895b      	ldrh	r3, [r3, #10]
 801998a:	2b0e      	cmp	r3, #14
 801998c:	d96e      	bls.n	8019a6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	7bdb      	ldrb	r3, [r3, #15]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d106      	bne.n	80199a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801999c:	3301      	adds	r3, #1
 801999e:	b2da      	uxtb	r2, r3
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	685b      	ldr	r3, [r3, #4]
 80199a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80199aa:	693b      	ldr	r3, [r7, #16]
 80199ac:	7b1a      	ldrb	r2, [r3, #12]
 80199ae:	7b5b      	ldrb	r3, [r3, #13]
 80199b0:	021b      	lsls	r3, r3, #8
 80199b2:	4313      	orrs	r3, r2
 80199b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80199b6:	693b      	ldr	r3, [r7, #16]
 80199b8:	781b      	ldrb	r3, [r3, #0]
 80199ba:	f003 0301 	and.w	r3, r3, #1
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d023      	beq.n	8019a0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80199c2:	693b      	ldr	r3, [r7, #16]
 80199c4:	781b      	ldrb	r3, [r3, #0]
 80199c6:	2b01      	cmp	r3, #1
 80199c8:	d10f      	bne.n	80199ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80199ca:	693b      	ldr	r3, [r7, #16]
 80199cc:	785b      	ldrb	r3, [r3, #1]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d11b      	bne.n	8019a0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80199d2:	693b      	ldr	r3, [r7, #16]
 80199d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80199d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80199d8:	d117      	bne.n	8019a0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	7b5b      	ldrb	r3, [r3, #13]
 80199de:	f043 0310 	orr.w	r3, r3, #16
 80199e2:	b2da      	uxtb	r2, r3
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	735a      	strb	r2, [r3, #13]
 80199e8:	e00f      	b.n	8019a0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80199ea:	693b      	ldr	r3, [r7, #16]
 80199ec:	2206      	movs	r2, #6
 80199ee:	4928      	ldr	r1, [pc, #160]	@ (8019a90 <ethernet_input+0x118>)
 80199f0:	4618      	mov	r0, r3
 80199f2:	f000 fd2f 	bl	801a454 <memcmp>
 80199f6:	4603      	mov	r3, r0
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d106      	bne.n	8019a0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	7b5b      	ldrb	r3, [r3, #13]
 8019a00:	f043 0308 	orr.w	r3, r3, #8
 8019a04:	b2da      	uxtb	r2, r3
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019a0a:	89fb      	ldrh	r3, [r7, #14]
 8019a0c:	2b08      	cmp	r3, #8
 8019a0e:	d003      	beq.n	8019a18 <ethernet_input+0xa0>
 8019a10:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8019a14:	d014      	beq.n	8019a40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019a16:	e032      	b.n	8019a7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019a1e:	f003 0308 	and.w	r3, r3, #8
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d024      	beq.n	8019a70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019a26:	8afb      	ldrh	r3, [r7, #22]
 8019a28:	4619      	mov	r1, r3
 8019a2a:	6878      	ldr	r0, [r7, #4]
 8019a2c:	f7f4 fe5a 	bl	800e6e4 <pbuf_remove_header>
 8019a30:	4603      	mov	r3, r0
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d11e      	bne.n	8019a74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019a36:	6839      	ldr	r1, [r7, #0]
 8019a38:	6878      	ldr	r0, [r7, #4]
 8019a3a:	f7fe fe7f 	bl	801873c <ip4_input>
      break;
 8019a3e:	e013      	b.n	8019a68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019a46:	f003 0308 	and.w	r3, r3, #8
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d014      	beq.n	8019a78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019a4e:	8afb      	ldrh	r3, [r7, #22]
 8019a50:	4619      	mov	r1, r3
 8019a52:	6878      	ldr	r0, [r7, #4]
 8019a54:	f7f4 fe46 	bl	800e6e4 <pbuf_remove_header>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d10e      	bne.n	8019a7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8019a5e:	6839      	ldr	r1, [r7, #0]
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f7fd ffe7 	bl	8017a34 <etharp_input>
      break;
 8019a66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	e00c      	b.n	8019a86 <ethernet_input+0x10e>
    goto free_and_return;
 8019a6c:	bf00      	nop
 8019a6e:	e006      	b.n	8019a7e <ethernet_input+0x106>
        goto free_and_return;
 8019a70:	bf00      	nop
 8019a72:	e004      	b.n	8019a7e <ethernet_input+0x106>
        goto free_and_return;
 8019a74:	bf00      	nop
 8019a76:	e002      	b.n	8019a7e <ethernet_input+0x106>
        goto free_and_return;
 8019a78:	bf00      	nop
 8019a7a:	e000      	b.n	8019a7e <ethernet_input+0x106>
        goto free_and_return;
 8019a7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f7f4 feb6 	bl	800e7f0 <pbuf_free>
  return ERR_OK;
 8019a84:	2300      	movs	r3, #0
}
 8019a86:	4618      	mov	r0, r3
 8019a88:	3718      	adds	r7, #24
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}
 8019a8e:	bf00      	nop
 8019a90:	0802303c 	.word	0x0802303c

08019a94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b086      	sub	sp, #24
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	60f8      	str	r0, [r7, #12]
 8019a9c:	60b9      	str	r1, [r7, #8]
 8019a9e:	607a      	str	r2, [r7, #4]
 8019aa0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019aa2:	8c3b      	ldrh	r3, [r7, #32]
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7f3 f9cb 	bl	800ce40 <lwip_htons>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019aae:	210e      	movs	r1, #14
 8019ab0:	68b8      	ldr	r0, [r7, #8]
 8019ab2:	f7f4 fe07 	bl	800e6c4 <pbuf_add_header>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d125      	bne.n	8019b08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	8afa      	ldrh	r2, [r7, #22]
 8019ac6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019ac8:	693b      	ldr	r3, [r7, #16]
 8019aca:	2206      	movs	r2, #6
 8019acc:	6839      	ldr	r1, [r7, #0]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f000 fd85 	bl	801a5de <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019ad4:	693b      	ldr	r3, [r7, #16]
 8019ad6:	3306      	adds	r3, #6
 8019ad8:	2206      	movs	r2, #6
 8019ada:	6879      	ldr	r1, [r7, #4]
 8019adc:	4618      	mov	r0, r3
 8019ade:	f000 fd7e 	bl	801a5de <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019ae8:	2b06      	cmp	r3, #6
 8019aea:	d006      	beq.n	8019afa <ethernet_output+0x66>
 8019aec:	4b0a      	ldr	r3, [pc, #40]	@ (8019b18 <ethernet_output+0x84>)
 8019aee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8019af2:	490a      	ldr	r1, [pc, #40]	@ (8019b1c <ethernet_output+0x88>)
 8019af4:	480a      	ldr	r0, [pc, #40]	@ (8019b20 <ethernet_output+0x8c>)
 8019af6:	f000 fb0d 	bl	801a114 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	699b      	ldr	r3, [r3, #24]
 8019afe:	68b9      	ldr	r1, [r7, #8]
 8019b00:	68f8      	ldr	r0, [r7, #12]
 8019b02:	4798      	blx	r3
 8019b04:	4603      	mov	r3, r0
 8019b06:	e002      	b.n	8019b0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019b08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019b0a:	f06f 0301 	mvn.w	r3, #1
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3718      	adds	r7, #24
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	0801efa4 	.word	0x0801efa4
 8019b1c:	0801efdc 	.word	0x0801efdc
 8019b20:	0801f010 	.word	0x0801f010

08019b24 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b086      	sub	sp, #24
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
 8019b2c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	60bb      	str	r3, [r7, #8]
 8019b32:	2304      	movs	r3, #4
 8019b34:	60fb      	str	r3, [r7, #12]
 8019b36:	2300      	movs	r3, #0
 8019b38:	613b      	str	r3, [r7, #16]
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019b3e:	f107 0308 	add.w	r3, r7, #8
 8019b42:	2100      	movs	r1, #0
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7ed fe46 	bl	80077d6 <osMessageCreate>
 8019b4a:	4602      	mov	r2, r0
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d102      	bne.n	8019b5e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019b58:	f04f 33ff 	mov.w	r3, #4294967295
 8019b5c:	e000      	b.n	8019b60 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019b5e:	2300      	movs	r3, #0
}
 8019b60:	4618      	mov	r0, r3
 8019b62:	3718      	adds	r7, #24
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}

08019b68 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b082      	sub	sp, #8
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	4618      	mov	r0, r3
 8019b76:	f7ed ff0b 	bl	8007990 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7ed ff1c 	bl	80079bc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019b84:	bf00      	nop
 8019b86:	3708      	adds	r7, #8
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}

08019b8c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b082      	sub	sp, #8
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	6078      	str	r0, [r7, #4]
 8019b94:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019b96:	bf00      	nop
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	6839      	ldr	r1, [r7, #0]
 8019b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7ed fe40 	bl	8007828 <osMessagePut>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d1f4      	bne.n	8019b98 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8019bae:	bf00      	nop
 8019bb0:	bf00      	nop
 8019bb2:	3708      	adds	r7, #8
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b084      	sub	sp, #16
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	6839      	ldr	r1, [r7, #0]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7ed fe2c 	bl	8007828 <osMessagePut>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d102      	bne.n	8019bdc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	73fb      	strb	r3, [r7, #15]
 8019bda:	e001      	b.n	8019be0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019bdc:	23ff      	movs	r3, #255	@ 0xff
 8019bde:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	3710      	adds	r7, #16
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bd80      	pop	{r7, pc}

08019bec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b08c      	sub	sp, #48	@ 0x30
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	61f8      	str	r0, [r7, #28]
 8019bf4:	61b9      	str	r1, [r7, #24]
 8019bf6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019bf8:	f7ed fbfe 	bl	80073f8 <osKernelSysTick>
 8019bfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d017      	beq.n	8019c34 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	6819      	ldr	r1, [r3, #0]
 8019c08:	f107 0320 	add.w	r3, r7, #32
 8019c0c:	697a      	ldr	r2, [r7, #20]
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7ed fe4a 	bl	80078a8 <osMessageGet>

    if(event.status == osEventMessage)
 8019c14:	6a3b      	ldr	r3, [r7, #32]
 8019c16:	2b10      	cmp	r3, #16
 8019c18:	d109      	bne.n	8019c2e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c1c:	461a      	mov	r2, r3
 8019c1e:	69bb      	ldr	r3, [r7, #24]
 8019c20:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019c22:	f7ed fbe9 	bl	80073f8 <osKernelSysTick>
 8019c26:	4602      	mov	r2, r0
 8019c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	e019      	b.n	8019c62 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c32:	e016      	b.n	8019c62 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019c34:	69fb      	ldr	r3, [r7, #28]
 8019c36:	6819      	ldr	r1, [r3, #0]
 8019c38:	463b      	mov	r3, r7
 8019c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7ed fe32 	bl	80078a8 <osMessageGet>
 8019c44:	f107 0320 	add.w	r3, r7, #32
 8019c48:	463a      	mov	r2, r7
 8019c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c52:	461a      	mov	r2, r3
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019c58:	f7ed fbce 	bl	80073f8 <osKernelSysTick>
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c60:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019c62:	4618      	mov	r0, r3
 8019c64:	3730      	adds	r7, #48	@ 0x30
 8019c66:	46bd      	mov	sp, r7
 8019c68:	bd80      	pop	{r7, pc}

08019c6a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019c6a:	b580      	push	{r7, lr}
 8019c6c:	b086      	sub	sp, #24
 8019c6e:	af00      	add	r7, sp, #0
 8019c70:	6078      	str	r0, [r7, #4]
 8019c72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6819      	ldr	r1, [r3, #0]
 8019c78:	f107 030c 	add.w	r3, r7, #12
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7ed fe12 	bl	80078a8 <osMessageGet>

  if(event.status == osEventMessage)
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	2b10      	cmp	r3, #16
 8019c88:	d105      	bne.n	8019c96 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019c8a:	693b      	ldr	r3, [r7, #16]
 8019c8c:	461a      	mov	r2, r3
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8019c92:	2300      	movs	r3, #0
 8019c94:	e001      	b.n	8019c9a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019c96:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	3718      	adds	r7, #24
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}

08019ca2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019ca2:	b480      	push	{r7}
 8019ca4:	b083      	sub	sp, #12
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d101      	bne.n	8019cb6 <sys_mbox_valid+0x14>
    return 0;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	e000      	b.n	8019cb8 <sys_mbox_valid+0x16>
  else
    return 1;
 8019cb6:	2301      	movs	r3, #1
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	370c      	adds	r7, #12
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc2:	4770      	bx	lr

08019cc4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019cc4:	b480      	push	{r7}
 8019cc6:	b083      	sub	sp, #12
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	601a      	str	r2, [r3, #0]
}
 8019cd2:	bf00      	nop
 8019cd4:	370c      	adds	r7, #12
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr

08019cde <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019cde:	b580      	push	{r7, lr}
 8019ce0:	b084      	sub	sp, #16
 8019ce2:	af00      	add	r7, sp, #0
 8019ce4:	6078      	str	r0, [r7, #4]
 8019ce6:	460b      	mov	r3, r1
 8019ce8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019cea:	2300      	movs	r3, #0
 8019cec:	60bb      	str	r3, [r7, #8]
 8019cee:	2300      	movs	r3, #0
 8019cf0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019cf2:	f107 0308 	add.w	r3, r7, #8
 8019cf6:	2101      	movs	r1, #1
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f7ed fc95 	bl	8007628 <osSemaphoreCreate>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d102      	bne.n	8019d12 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d10:	e009      	b.n	8019d26 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019d12:	78fb      	ldrb	r3, [r7, #3]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d105      	bne.n	8019d24 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f7ed fcc2 	bl	80076a8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019d24:	2300      	movs	r3, #0
}
 8019d26:	4618      	mov	r0, r3
 8019d28:	3710      	adds	r7, #16
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}

08019d2e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019d2e:	b580      	push	{r7, lr}
 8019d30:	b084      	sub	sp, #16
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
 8019d36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019d38:	f7ed fb5e 	bl	80073f8 <osKernelSysTick>
 8019d3c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d011      	beq.n	8019d68 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	6839      	ldr	r1, [r7, #0]
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	f7ed fcac 	bl	80076a8 <osSemaphoreWait>
 8019d50:	4603      	mov	r3, r0
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d105      	bne.n	8019d62 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019d56:	f7ed fb4f 	bl	80073f8 <osKernelSysTick>
 8019d5a:	4602      	mov	r2, r0
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	1ad3      	subs	r3, r2, r3
 8019d60:	e012      	b.n	8019d88 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019d62:	f04f 33ff 	mov.w	r3, #4294967295
 8019d66:	e00f      	b.n	8019d88 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019d68:	bf00      	nop
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8019d72:	4618      	mov	r0, r3
 8019d74:	f7ed fc98 	bl	80076a8 <osSemaphoreWait>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d1f5      	bne.n	8019d6a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019d7e:	f7ed fb3b 	bl	80073f8 <osKernelSysTick>
 8019d82:	4602      	mov	r2, r0
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3710      	adds	r7, #16
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b082      	sub	sp, #8
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7ed fcd1 	bl	8007744 <osSemaphoreRelease>
}
 8019da2:	bf00      	nop
 8019da4:	3708      	adds	r7, #8
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bd80      	pop	{r7, pc}

08019daa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019daa:	b580      	push	{r7, lr}
 8019dac:	b082      	sub	sp, #8
 8019dae:	af00      	add	r7, sp, #0
 8019db0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7ed fcfa 	bl	80077b0 <osSemaphoreDelete>
}
 8019dbc:	bf00      	nop
 8019dbe:	3708      	adds	r7, #8
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019dc4:	b480      	push	{r7}
 8019dc6:	b083      	sub	sp, #12
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d101      	bne.n	8019dd8 <sys_sem_valid+0x14>
    return 0;
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	e000      	b.n	8019dda <sys_sem_valid+0x16>
  else
    return 1;
 8019dd8:	2301      	movs	r3, #1
}
 8019dda:	4618      	mov	r0, r3
 8019ddc:	370c      	adds	r7, #12
 8019dde:	46bd      	mov	sp, r7
 8019de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de4:	4770      	bx	lr

08019de6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019de6:	b480      	push	{r7}
 8019de8:	b083      	sub	sp, #12
 8019dea:	af00      	add	r7, sp, #0
 8019dec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2200      	movs	r2, #0
 8019df2:	601a      	str	r2, [r3, #0]
}
 8019df4:	bf00      	nop
 8019df6:	370c      	adds	r7, #12
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfe:	4770      	bx	lr

08019e00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019e04:	4803      	ldr	r0, [pc, #12]	@ (8019e14 <sys_init+0x14>)
 8019e06:	f7ed fb73 	bl	80074f0 <osMutexCreate>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	4a02      	ldr	r2, [pc, #8]	@ (8019e18 <sys_init+0x18>)
 8019e0e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019e10:	bf00      	nop
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	0802304c 	.word	0x0802304c
 8019e18:	20017804 	.word	0x20017804

08019e1c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b084      	sub	sp, #16
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019e24:	2300      	movs	r3, #0
 8019e26:	60bb      	str	r3, [r7, #8]
 8019e28:	2300      	movs	r3, #0
 8019e2a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019e2c:	f107 0308 	add.w	r3, r7, #8
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7ed fb5d 	bl	80074f0 <osMutexCreate>
 8019e36:	4602      	mov	r2, r0
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d102      	bne.n	8019e4a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019e44:	f04f 33ff 	mov.w	r3, #4294967295
 8019e48:	e000      	b.n	8019e4c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019e4a:	2300      	movs	r3, #0
}
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	3710      	adds	r7, #16
 8019e50:	46bd      	mov	sp, r7
 8019e52:	bd80      	pop	{r7, pc}

08019e54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f04f 31ff 	mov.w	r1, #4294967295
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7ed fb5b 	bl	8007520 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019e6a:	bf00      	nop
 8019e6c:	3708      	adds	r7, #8
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}

08019e72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b082      	sub	sp, #8
 8019e76:	af00      	add	r7, sp, #0
 8019e78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7ed fb9c 	bl	80075bc <osMutexRelease>
}
 8019e84:	bf00      	nop
 8019e86:	3708      	adds	r7, #8
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}

08019e8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b08c      	sub	sp, #48	@ 0x30
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	60f8      	str	r0, [r7, #12]
 8019e94:	60b9      	str	r1, [r7, #8]
 8019e96:	607a      	str	r2, [r7, #4]
 8019e98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019e9a:	f107 0314 	add.w	r3, r7, #20
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	601a      	str	r2, [r3, #0]
 8019ea2:	605a      	str	r2, [r3, #4]
 8019ea4:	609a      	str	r2, [r3, #8]
 8019ea6:	60da      	str	r2, [r3, #12]
 8019ea8:	611a      	str	r2, [r3, #16]
 8019eaa:	615a      	str	r2, [r3, #20]
 8019eac:	619a      	str	r2, [r3, #24]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	617b      	str	r3, [r7, #20]
 8019eb2:	68bb      	ldr	r3, [r7, #8]
 8019eb4:	61bb      	str	r3, [r7, #24]
 8019eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eb8:	b21b      	sxth	r3, r3
 8019eba:	83bb      	strh	r3, [r7, #28]
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019ec0:	f107 0314 	add.w	r3, r7, #20
 8019ec4:	6879      	ldr	r1, [r7, #4]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7ed faa6 	bl	8007418 <osThreadCreate>
 8019ecc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3730      	adds	r7, #48	@ 0x30
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}
	...

08019ed8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019edc:	4b04      	ldr	r3, [pc, #16]	@ (8019ef0 <sys_arch_protect+0x18>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f7ed fb1b 	bl	8007520 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019eea:	2301      	movs	r3, #1
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	bd80      	pop	{r7, pc}
 8019ef0:	20017804 	.word	0x20017804

08019ef4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019efc:	4b04      	ldr	r3, [pc, #16]	@ (8019f10 <sys_arch_unprotect+0x1c>)
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	4618      	mov	r0, r3
 8019f02:	f7ed fb5b 	bl	80075bc <osMutexRelease>
}
 8019f06:	bf00      	nop
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}
 8019f0e:	bf00      	nop
 8019f10:	20017804 	.word	0x20017804

08019f14 <rand>:
 8019f14:	4b16      	ldr	r3, [pc, #88]	@ (8019f70 <rand+0x5c>)
 8019f16:	b510      	push	{r4, lr}
 8019f18:	681c      	ldr	r4, [r3, #0]
 8019f1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019f1c:	b9b3      	cbnz	r3, 8019f4c <rand+0x38>
 8019f1e:	2018      	movs	r0, #24
 8019f20:	f000 fbd4 	bl	801a6cc <malloc>
 8019f24:	4602      	mov	r2, r0
 8019f26:	6320      	str	r0, [r4, #48]	@ 0x30
 8019f28:	b920      	cbnz	r0, 8019f34 <rand+0x20>
 8019f2a:	4b12      	ldr	r3, [pc, #72]	@ (8019f74 <rand+0x60>)
 8019f2c:	4812      	ldr	r0, [pc, #72]	@ (8019f78 <rand+0x64>)
 8019f2e:	2152      	movs	r1, #82	@ 0x52
 8019f30:	f000 fb64 	bl	801a5fc <__assert_func>
 8019f34:	4911      	ldr	r1, [pc, #68]	@ (8019f7c <rand+0x68>)
 8019f36:	4b12      	ldr	r3, [pc, #72]	@ (8019f80 <rand+0x6c>)
 8019f38:	e9c0 1300 	strd	r1, r3, [r0]
 8019f3c:	4b11      	ldr	r3, [pc, #68]	@ (8019f84 <rand+0x70>)
 8019f3e:	6083      	str	r3, [r0, #8]
 8019f40:	230b      	movs	r3, #11
 8019f42:	8183      	strh	r3, [r0, #12]
 8019f44:	2100      	movs	r1, #0
 8019f46:	2001      	movs	r0, #1
 8019f48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019f4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019f4e:	480e      	ldr	r0, [pc, #56]	@ (8019f88 <rand+0x74>)
 8019f50:	690b      	ldr	r3, [r1, #16]
 8019f52:	694c      	ldr	r4, [r1, #20]
 8019f54:	4a0d      	ldr	r2, [pc, #52]	@ (8019f8c <rand+0x78>)
 8019f56:	4358      	muls	r0, r3
 8019f58:	fb02 0004 	mla	r0, r2, r4, r0
 8019f5c:	fba3 3202 	umull	r3, r2, r3, r2
 8019f60:	3301      	adds	r3, #1
 8019f62:	eb40 0002 	adc.w	r0, r0, r2
 8019f66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019f6a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019f6e:	bd10      	pop	{r4, pc}
 8019f70:	20000038 	.word	0x20000038
 8019f74:	08023054 	.word	0x08023054
 8019f78:	0802306b 	.word	0x0802306b
 8019f7c:	abcd330e 	.word	0xabcd330e
 8019f80:	e66d1234 	.word	0xe66d1234
 8019f84:	0005deec 	.word	0x0005deec
 8019f88:	5851f42d 	.word	0x5851f42d
 8019f8c:	4c957f2d 	.word	0x4c957f2d

08019f90 <std>:
 8019f90:	2300      	movs	r3, #0
 8019f92:	b510      	push	{r4, lr}
 8019f94:	4604      	mov	r4, r0
 8019f96:	e9c0 3300 	strd	r3, r3, [r0]
 8019f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f9e:	6083      	str	r3, [r0, #8]
 8019fa0:	8181      	strh	r1, [r0, #12]
 8019fa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8019fa4:	81c2      	strh	r2, [r0, #14]
 8019fa6:	6183      	str	r3, [r0, #24]
 8019fa8:	4619      	mov	r1, r3
 8019faa:	2208      	movs	r2, #8
 8019fac:	305c      	adds	r0, #92	@ 0x5c
 8019fae:	f000 fa7b 	bl	801a4a8 <memset>
 8019fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8019fe8 <std+0x58>)
 8019fb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8019fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8019fec <std+0x5c>)
 8019fb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019fba:	4b0d      	ldr	r3, [pc, #52]	@ (8019ff0 <std+0x60>)
 8019fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8019ff4 <std+0x64>)
 8019fc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8019fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8019ff8 <std+0x68>)
 8019fc4:	6224      	str	r4, [r4, #32]
 8019fc6:	429c      	cmp	r4, r3
 8019fc8:	d006      	beq.n	8019fd8 <std+0x48>
 8019fca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019fce:	4294      	cmp	r4, r2
 8019fd0:	d002      	beq.n	8019fd8 <std+0x48>
 8019fd2:	33d0      	adds	r3, #208	@ 0xd0
 8019fd4:	429c      	cmp	r4, r3
 8019fd6:	d105      	bne.n	8019fe4 <std+0x54>
 8019fd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fe0:	f000 bafa 	b.w	801a5d8 <__retarget_lock_init_recursive>
 8019fe4:	bd10      	pop	{r4, pc}
 8019fe6:	bf00      	nop
 8019fe8:	0801a2a5 	.word	0x0801a2a5
 8019fec:	0801a2c7 	.word	0x0801a2c7
 8019ff0:	0801a2ff 	.word	0x0801a2ff
 8019ff4:	0801a323 	.word	0x0801a323
 8019ff8:	20017808 	.word	0x20017808

08019ffc <stdio_exit_handler>:
 8019ffc:	4a02      	ldr	r2, [pc, #8]	@ (801a008 <stdio_exit_handler+0xc>)
 8019ffe:	4903      	ldr	r1, [pc, #12]	@ (801a00c <stdio_exit_handler+0x10>)
 801a000:	4803      	ldr	r0, [pc, #12]	@ (801a010 <stdio_exit_handler+0x14>)
 801a002:	f000 b869 	b.w	801a0d8 <_fwalk_sglue>
 801a006:	bf00      	nop
 801a008:	2000002c 	.word	0x2000002c
 801a00c:	0801b18d 	.word	0x0801b18d
 801a010:	2000003c 	.word	0x2000003c

0801a014 <cleanup_stdio>:
 801a014:	6841      	ldr	r1, [r0, #4]
 801a016:	4b0c      	ldr	r3, [pc, #48]	@ (801a048 <cleanup_stdio+0x34>)
 801a018:	4299      	cmp	r1, r3
 801a01a:	b510      	push	{r4, lr}
 801a01c:	4604      	mov	r4, r0
 801a01e:	d001      	beq.n	801a024 <cleanup_stdio+0x10>
 801a020:	f001 f8b4 	bl	801b18c <_fflush_r>
 801a024:	68a1      	ldr	r1, [r4, #8]
 801a026:	4b09      	ldr	r3, [pc, #36]	@ (801a04c <cleanup_stdio+0x38>)
 801a028:	4299      	cmp	r1, r3
 801a02a:	d002      	beq.n	801a032 <cleanup_stdio+0x1e>
 801a02c:	4620      	mov	r0, r4
 801a02e:	f001 f8ad 	bl	801b18c <_fflush_r>
 801a032:	68e1      	ldr	r1, [r4, #12]
 801a034:	4b06      	ldr	r3, [pc, #24]	@ (801a050 <cleanup_stdio+0x3c>)
 801a036:	4299      	cmp	r1, r3
 801a038:	d004      	beq.n	801a044 <cleanup_stdio+0x30>
 801a03a:	4620      	mov	r0, r4
 801a03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a040:	f001 b8a4 	b.w	801b18c <_fflush_r>
 801a044:	bd10      	pop	{r4, pc}
 801a046:	bf00      	nop
 801a048:	20017808 	.word	0x20017808
 801a04c:	20017870 	.word	0x20017870
 801a050:	200178d8 	.word	0x200178d8

0801a054 <global_stdio_init.part.0>:
 801a054:	b510      	push	{r4, lr}
 801a056:	4b0b      	ldr	r3, [pc, #44]	@ (801a084 <global_stdio_init.part.0+0x30>)
 801a058:	4c0b      	ldr	r4, [pc, #44]	@ (801a088 <global_stdio_init.part.0+0x34>)
 801a05a:	4a0c      	ldr	r2, [pc, #48]	@ (801a08c <global_stdio_init.part.0+0x38>)
 801a05c:	601a      	str	r2, [r3, #0]
 801a05e:	4620      	mov	r0, r4
 801a060:	2200      	movs	r2, #0
 801a062:	2104      	movs	r1, #4
 801a064:	f7ff ff94 	bl	8019f90 <std>
 801a068:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a06c:	2201      	movs	r2, #1
 801a06e:	2109      	movs	r1, #9
 801a070:	f7ff ff8e 	bl	8019f90 <std>
 801a074:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a078:	2202      	movs	r2, #2
 801a07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a07e:	2112      	movs	r1, #18
 801a080:	f7ff bf86 	b.w	8019f90 <std>
 801a084:	20017940 	.word	0x20017940
 801a088:	20017808 	.word	0x20017808
 801a08c:	08019ffd 	.word	0x08019ffd

0801a090 <__sfp_lock_acquire>:
 801a090:	4801      	ldr	r0, [pc, #4]	@ (801a098 <__sfp_lock_acquire+0x8>)
 801a092:	f000 baa2 	b.w	801a5da <__retarget_lock_acquire_recursive>
 801a096:	bf00      	nop
 801a098:	20017945 	.word	0x20017945

0801a09c <__sfp_lock_release>:
 801a09c:	4801      	ldr	r0, [pc, #4]	@ (801a0a4 <__sfp_lock_release+0x8>)
 801a09e:	f000 ba9d 	b.w	801a5dc <__retarget_lock_release_recursive>
 801a0a2:	bf00      	nop
 801a0a4:	20017945 	.word	0x20017945

0801a0a8 <__sinit>:
 801a0a8:	b510      	push	{r4, lr}
 801a0aa:	4604      	mov	r4, r0
 801a0ac:	f7ff fff0 	bl	801a090 <__sfp_lock_acquire>
 801a0b0:	6a23      	ldr	r3, [r4, #32]
 801a0b2:	b11b      	cbz	r3, 801a0bc <__sinit+0x14>
 801a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0b8:	f7ff bff0 	b.w	801a09c <__sfp_lock_release>
 801a0bc:	4b04      	ldr	r3, [pc, #16]	@ (801a0d0 <__sinit+0x28>)
 801a0be:	6223      	str	r3, [r4, #32]
 801a0c0:	4b04      	ldr	r3, [pc, #16]	@ (801a0d4 <__sinit+0x2c>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d1f5      	bne.n	801a0b4 <__sinit+0xc>
 801a0c8:	f7ff ffc4 	bl	801a054 <global_stdio_init.part.0>
 801a0cc:	e7f2      	b.n	801a0b4 <__sinit+0xc>
 801a0ce:	bf00      	nop
 801a0d0:	0801a015 	.word	0x0801a015
 801a0d4:	20017940 	.word	0x20017940

0801a0d8 <_fwalk_sglue>:
 801a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0dc:	4607      	mov	r7, r0
 801a0de:	4688      	mov	r8, r1
 801a0e0:	4614      	mov	r4, r2
 801a0e2:	2600      	movs	r6, #0
 801a0e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a0e8:	f1b9 0901 	subs.w	r9, r9, #1
 801a0ec:	d505      	bpl.n	801a0fa <_fwalk_sglue+0x22>
 801a0ee:	6824      	ldr	r4, [r4, #0]
 801a0f0:	2c00      	cmp	r4, #0
 801a0f2:	d1f7      	bne.n	801a0e4 <_fwalk_sglue+0xc>
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0fa:	89ab      	ldrh	r3, [r5, #12]
 801a0fc:	2b01      	cmp	r3, #1
 801a0fe:	d907      	bls.n	801a110 <_fwalk_sglue+0x38>
 801a100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a104:	3301      	adds	r3, #1
 801a106:	d003      	beq.n	801a110 <_fwalk_sglue+0x38>
 801a108:	4629      	mov	r1, r5
 801a10a:	4638      	mov	r0, r7
 801a10c:	47c0      	blx	r8
 801a10e:	4306      	orrs	r6, r0
 801a110:	3568      	adds	r5, #104	@ 0x68
 801a112:	e7e9      	b.n	801a0e8 <_fwalk_sglue+0x10>

0801a114 <iprintf>:
 801a114:	b40f      	push	{r0, r1, r2, r3}
 801a116:	b507      	push	{r0, r1, r2, lr}
 801a118:	4906      	ldr	r1, [pc, #24]	@ (801a134 <iprintf+0x20>)
 801a11a:	ab04      	add	r3, sp, #16
 801a11c:	6808      	ldr	r0, [r1, #0]
 801a11e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a122:	6881      	ldr	r1, [r0, #8]
 801a124:	9301      	str	r3, [sp, #4]
 801a126:	f000 fd09 	bl	801ab3c <_vfiprintf_r>
 801a12a:	b003      	add	sp, #12
 801a12c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a130:	b004      	add	sp, #16
 801a132:	4770      	bx	lr
 801a134:	20000038 	.word	0x20000038

0801a138 <_puts_r>:
 801a138:	6a03      	ldr	r3, [r0, #32]
 801a13a:	b570      	push	{r4, r5, r6, lr}
 801a13c:	6884      	ldr	r4, [r0, #8]
 801a13e:	4605      	mov	r5, r0
 801a140:	460e      	mov	r6, r1
 801a142:	b90b      	cbnz	r3, 801a148 <_puts_r+0x10>
 801a144:	f7ff ffb0 	bl	801a0a8 <__sinit>
 801a148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a14a:	07db      	lsls	r3, r3, #31
 801a14c:	d405      	bmi.n	801a15a <_puts_r+0x22>
 801a14e:	89a3      	ldrh	r3, [r4, #12]
 801a150:	0598      	lsls	r0, r3, #22
 801a152:	d402      	bmi.n	801a15a <_puts_r+0x22>
 801a154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a156:	f000 fa40 	bl	801a5da <__retarget_lock_acquire_recursive>
 801a15a:	89a3      	ldrh	r3, [r4, #12]
 801a15c:	0719      	lsls	r1, r3, #28
 801a15e:	d502      	bpl.n	801a166 <_puts_r+0x2e>
 801a160:	6923      	ldr	r3, [r4, #16]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d135      	bne.n	801a1d2 <_puts_r+0x9a>
 801a166:	4621      	mov	r1, r4
 801a168:	4628      	mov	r0, r5
 801a16a:	f000 f91d 	bl	801a3a8 <__swsetup_r>
 801a16e:	b380      	cbz	r0, 801a1d2 <_puts_r+0x9a>
 801a170:	f04f 35ff 	mov.w	r5, #4294967295
 801a174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a176:	07da      	lsls	r2, r3, #31
 801a178:	d405      	bmi.n	801a186 <_puts_r+0x4e>
 801a17a:	89a3      	ldrh	r3, [r4, #12]
 801a17c:	059b      	lsls	r3, r3, #22
 801a17e:	d402      	bmi.n	801a186 <_puts_r+0x4e>
 801a180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a182:	f000 fa2b 	bl	801a5dc <__retarget_lock_release_recursive>
 801a186:	4628      	mov	r0, r5
 801a188:	bd70      	pop	{r4, r5, r6, pc}
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	da04      	bge.n	801a198 <_puts_r+0x60>
 801a18e:	69a2      	ldr	r2, [r4, #24]
 801a190:	429a      	cmp	r2, r3
 801a192:	dc17      	bgt.n	801a1c4 <_puts_r+0x8c>
 801a194:	290a      	cmp	r1, #10
 801a196:	d015      	beq.n	801a1c4 <_puts_r+0x8c>
 801a198:	6823      	ldr	r3, [r4, #0]
 801a19a:	1c5a      	adds	r2, r3, #1
 801a19c:	6022      	str	r2, [r4, #0]
 801a19e:	7019      	strb	r1, [r3, #0]
 801a1a0:	68a3      	ldr	r3, [r4, #8]
 801a1a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a1a6:	3b01      	subs	r3, #1
 801a1a8:	60a3      	str	r3, [r4, #8]
 801a1aa:	2900      	cmp	r1, #0
 801a1ac:	d1ed      	bne.n	801a18a <_puts_r+0x52>
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	da11      	bge.n	801a1d6 <_puts_r+0x9e>
 801a1b2:	4622      	mov	r2, r4
 801a1b4:	210a      	movs	r1, #10
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	f000 f8b7 	bl	801a32a <__swbuf_r>
 801a1bc:	3001      	adds	r0, #1
 801a1be:	d0d7      	beq.n	801a170 <_puts_r+0x38>
 801a1c0:	250a      	movs	r5, #10
 801a1c2:	e7d7      	b.n	801a174 <_puts_r+0x3c>
 801a1c4:	4622      	mov	r2, r4
 801a1c6:	4628      	mov	r0, r5
 801a1c8:	f000 f8af 	bl	801a32a <__swbuf_r>
 801a1cc:	3001      	adds	r0, #1
 801a1ce:	d1e7      	bne.n	801a1a0 <_puts_r+0x68>
 801a1d0:	e7ce      	b.n	801a170 <_puts_r+0x38>
 801a1d2:	3e01      	subs	r6, #1
 801a1d4:	e7e4      	b.n	801a1a0 <_puts_r+0x68>
 801a1d6:	6823      	ldr	r3, [r4, #0]
 801a1d8:	1c5a      	adds	r2, r3, #1
 801a1da:	6022      	str	r2, [r4, #0]
 801a1dc:	220a      	movs	r2, #10
 801a1de:	701a      	strb	r2, [r3, #0]
 801a1e0:	e7ee      	b.n	801a1c0 <_puts_r+0x88>
	...

0801a1e4 <puts>:
 801a1e4:	4b02      	ldr	r3, [pc, #8]	@ (801a1f0 <puts+0xc>)
 801a1e6:	4601      	mov	r1, r0
 801a1e8:	6818      	ldr	r0, [r3, #0]
 801a1ea:	f7ff bfa5 	b.w	801a138 <_puts_r>
 801a1ee:	bf00      	nop
 801a1f0:	20000038 	.word	0x20000038

0801a1f4 <sniprintf>:
 801a1f4:	b40c      	push	{r2, r3}
 801a1f6:	b530      	push	{r4, r5, lr}
 801a1f8:	4b18      	ldr	r3, [pc, #96]	@ (801a25c <sniprintf+0x68>)
 801a1fa:	1e0c      	subs	r4, r1, #0
 801a1fc:	681d      	ldr	r5, [r3, #0]
 801a1fe:	b09d      	sub	sp, #116	@ 0x74
 801a200:	da08      	bge.n	801a214 <sniprintf+0x20>
 801a202:	238b      	movs	r3, #139	@ 0x8b
 801a204:	602b      	str	r3, [r5, #0]
 801a206:	f04f 30ff 	mov.w	r0, #4294967295
 801a20a:	b01d      	add	sp, #116	@ 0x74
 801a20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a210:	b002      	add	sp, #8
 801a212:	4770      	bx	lr
 801a214:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a218:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a21c:	f04f 0300 	mov.w	r3, #0
 801a220:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a222:	bf14      	ite	ne
 801a224:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a228:	4623      	moveq	r3, r4
 801a22a:	9304      	str	r3, [sp, #16]
 801a22c:	9307      	str	r3, [sp, #28]
 801a22e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a232:	9002      	str	r0, [sp, #8]
 801a234:	9006      	str	r0, [sp, #24]
 801a236:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a23a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a23c:	ab21      	add	r3, sp, #132	@ 0x84
 801a23e:	a902      	add	r1, sp, #8
 801a240:	4628      	mov	r0, r5
 801a242:	9301      	str	r3, [sp, #4]
 801a244:	f000 fb54 	bl	801a8f0 <_svfiprintf_r>
 801a248:	1c43      	adds	r3, r0, #1
 801a24a:	bfbc      	itt	lt
 801a24c:	238b      	movlt	r3, #139	@ 0x8b
 801a24e:	602b      	strlt	r3, [r5, #0]
 801a250:	2c00      	cmp	r4, #0
 801a252:	d0da      	beq.n	801a20a <sniprintf+0x16>
 801a254:	9b02      	ldr	r3, [sp, #8]
 801a256:	2200      	movs	r2, #0
 801a258:	701a      	strb	r2, [r3, #0]
 801a25a:	e7d6      	b.n	801a20a <sniprintf+0x16>
 801a25c:	20000038 	.word	0x20000038

0801a260 <siprintf>:
 801a260:	b40e      	push	{r1, r2, r3}
 801a262:	b510      	push	{r4, lr}
 801a264:	b09d      	sub	sp, #116	@ 0x74
 801a266:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a268:	9002      	str	r0, [sp, #8]
 801a26a:	9006      	str	r0, [sp, #24]
 801a26c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a270:	480a      	ldr	r0, [pc, #40]	@ (801a29c <siprintf+0x3c>)
 801a272:	9107      	str	r1, [sp, #28]
 801a274:	9104      	str	r1, [sp, #16]
 801a276:	490a      	ldr	r1, [pc, #40]	@ (801a2a0 <siprintf+0x40>)
 801a278:	f853 2b04 	ldr.w	r2, [r3], #4
 801a27c:	9105      	str	r1, [sp, #20]
 801a27e:	2400      	movs	r4, #0
 801a280:	a902      	add	r1, sp, #8
 801a282:	6800      	ldr	r0, [r0, #0]
 801a284:	9301      	str	r3, [sp, #4]
 801a286:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a288:	f000 fb32 	bl	801a8f0 <_svfiprintf_r>
 801a28c:	9b02      	ldr	r3, [sp, #8]
 801a28e:	701c      	strb	r4, [r3, #0]
 801a290:	b01d      	add	sp, #116	@ 0x74
 801a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a296:	b003      	add	sp, #12
 801a298:	4770      	bx	lr
 801a29a:	bf00      	nop
 801a29c:	20000038 	.word	0x20000038
 801a2a0:	ffff0208 	.word	0xffff0208

0801a2a4 <__sread>:
 801a2a4:	b510      	push	{r4, lr}
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2ac:	f000 f94c 	bl	801a548 <_read_r>
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	bfab      	itete	ge
 801a2b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a2b6:	89a3      	ldrhlt	r3, [r4, #12]
 801a2b8:	181b      	addge	r3, r3, r0
 801a2ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a2be:	bfac      	ite	ge
 801a2c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a2c2:	81a3      	strhlt	r3, [r4, #12]
 801a2c4:	bd10      	pop	{r4, pc}

0801a2c6 <__swrite>:
 801a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ca:	461f      	mov	r7, r3
 801a2cc:	898b      	ldrh	r3, [r1, #12]
 801a2ce:	05db      	lsls	r3, r3, #23
 801a2d0:	4605      	mov	r5, r0
 801a2d2:	460c      	mov	r4, r1
 801a2d4:	4616      	mov	r6, r2
 801a2d6:	d505      	bpl.n	801a2e4 <__swrite+0x1e>
 801a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2dc:	2302      	movs	r3, #2
 801a2de:	2200      	movs	r2, #0
 801a2e0:	f000 f920 	bl	801a524 <_lseek_r>
 801a2e4:	89a3      	ldrh	r3, [r4, #12]
 801a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a2ee:	81a3      	strh	r3, [r4, #12]
 801a2f0:	4632      	mov	r2, r6
 801a2f2:	463b      	mov	r3, r7
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2fa:	f000 b937 	b.w	801a56c <_write_r>

0801a2fe <__sseek>:
 801a2fe:	b510      	push	{r4, lr}
 801a300:	460c      	mov	r4, r1
 801a302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a306:	f000 f90d 	bl	801a524 <_lseek_r>
 801a30a:	1c43      	adds	r3, r0, #1
 801a30c:	89a3      	ldrh	r3, [r4, #12]
 801a30e:	bf15      	itete	ne
 801a310:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a31a:	81a3      	strheq	r3, [r4, #12]
 801a31c:	bf18      	it	ne
 801a31e:	81a3      	strhne	r3, [r4, #12]
 801a320:	bd10      	pop	{r4, pc}

0801a322 <__sclose>:
 801a322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a326:	f000 b8ed 	b.w	801a504 <_close_r>

0801a32a <__swbuf_r>:
 801a32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32c:	460e      	mov	r6, r1
 801a32e:	4614      	mov	r4, r2
 801a330:	4605      	mov	r5, r0
 801a332:	b118      	cbz	r0, 801a33c <__swbuf_r+0x12>
 801a334:	6a03      	ldr	r3, [r0, #32]
 801a336:	b90b      	cbnz	r3, 801a33c <__swbuf_r+0x12>
 801a338:	f7ff feb6 	bl	801a0a8 <__sinit>
 801a33c:	69a3      	ldr	r3, [r4, #24]
 801a33e:	60a3      	str	r3, [r4, #8]
 801a340:	89a3      	ldrh	r3, [r4, #12]
 801a342:	071a      	lsls	r2, r3, #28
 801a344:	d501      	bpl.n	801a34a <__swbuf_r+0x20>
 801a346:	6923      	ldr	r3, [r4, #16]
 801a348:	b943      	cbnz	r3, 801a35c <__swbuf_r+0x32>
 801a34a:	4621      	mov	r1, r4
 801a34c:	4628      	mov	r0, r5
 801a34e:	f000 f82b 	bl	801a3a8 <__swsetup_r>
 801a352:	b118      	cbz	r0, 801a35c <__swbuf_r+0x32>
 801a354:	f04f 37ff 	mov.w	r7, #4294967295
 801a358:	4638      	mov	r0, r7
 801a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a35c:	6823      	ldr	r3, [r4, #0]
 801a35e:	6922      	ldr	r2, [r4, #16]
 801a360:	1a98      	subs	r0, r3, r2
 801a362:	6963      	ldr	r3, [r4, #20]
 801a364:	b2f6      	uxtb	r6, r6
 801a366:	4283      	cmp	r3, r0
 801a368:	4637      	mov	r7, r6
 801a36a:	dc05      	bgt.n	801a378 <__swbuf_r+0x4e>
 801a36c:	4621      	mov	r1, r4
 801a36e:	4628      	mov	r0, r5
 801a370:	f000 ff0c 	bl	801b18c <_fflush_r>
 801a374:	2800      	cmp	r0, #0
 801a376:	d1ed      	bne.n	801a354 <__swbuf_r+0x2a>
 801a378:	68a3      	ldr	r3, [r4, #8]
 801a37a:	3b01      	subs	r3, #1
 801a37c:	60a3      	str	r3, [r4, #8]
 801a37e:	6823      	ldr	r3, [r4, #0]
 801a380:	1c5a      	adds	r2, r3, #1
 801a382:	6022      	str	r2, [r4, #0]
 801a384:	701e      	strb	r6, [r3, #0]
 801a386:	6962      	ldr	r2, [r4, #20]
 801a388:	1c43      	adds	r3, r0, #1
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d004      	beq.n	801a398 <__swbuf_r+0x6e>
 801a38e:	89a3      	ldrh	r3, [r4, #12]
 801a390:	07db      	lsls	r3, r3, #31
 801a392:	d5e1      	bpl.n	801a358 <__swbuf_r+0x2e>
 801a394:	2e0a      	cmp	r6, #10
 801a396:	d1df      	bne.n	801a358 <__swbuf_r+0x2e>
 801a398:	4621      	mov	r1, r4
 801a39a:	4628      	mov	r0, r5
 801a39c:	f000 fef6 	bl	801b18c <_fflush_r>
 801a3a0:	2800      	cmp	r0, #0
 801a3a2:	d0d9      	beq.n	801a358 <__swbuf_r+0x2e>
 801a3a4:	e7d6      	b.n	801a354 <__swbuf_r+0x2a>
	...

0801a3a8 <__swsetup_r>:
 801a3a8:	b538      	push	{r3, r4, r5, lr}
 801a3aa:	4b29      	ldr	r3, [pc, #164]	@ (801a450 <__swsetup_r+0xa8>)
 801a3ac:	4605      	mov	r5, r0
 801a3ae:	6818      	ldr	r0, [r3, #0]
 801a3b0:	460c      	mov	r4, r1
 801a3b2:	b118      	cbz	r0, 801a3bc <__swsetup_r+0x14>
 801a3b4:	6a03      	ldr	r3, [r0, #32]
 801a3b6:	b90b      	cbnz	r3, 801a3bc <__swsetup_r+0x14>
 801a3b8:	f7ff fe76 	bl	801a0a8 <__sinit>
 801a3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3c0:	0719      	lsls	r1, r3, #28
 801a3c2:	d422      	bmi.n	801a40a <__swsetup_r+0x62>
 801a3c4:	06da      	lsls	r2, r3, #27
 801a3c6:	d407      	bmi.n	801a3d8 <__swsetup_r+0x30>
 801a3c8:	2209      	movs	r2, #9
 801a3ca:	602a      	str	r2, [r5, #0]
 801a3cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3d0:	81a3      	strh	r3, [r4, #12]
 801a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3d6:	e033      	b.n	801a440 <__swsetup_r+0x98>
 801a3d8:	0758      	lsls	r0, r3, #29
 801a3da:	d512      	bpl.n	801a402 <__swsetup_r+0x5a>
 801a3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a3de:	b141      	cbz	r1, 801a3f2 <__swsetup_r+0x4a>
 801a3e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a3e4:	4299      	cmp	r1, r3
 801a3e6:	d002      	beq.n	801a3ee <__swsetup_r+0x46>
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	f000 f925 	bl	801a638 <_free_r>
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 801a3f2:	89a3      	ldrh	r3, [r4, #12]
 801a3f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a3f8:	81a3      	strh	r3, [r4, #12]
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	6063      	str	r3, [r4, #4]
 801a3fe:	6923      	ldr	r3, [r4, #16]
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	89a3      	ldrh	r3, [r4, #12]
 801a404:	f043 0308 	orr.w	r3, r3, #8
 801a408:	81a3      	strh	r3, [r4, #12]
 801a40a:	6923      	ldr	r3, [r4, #16]
 801a40c:	b94b      	cbnz	r3, 801a422 <__swsetup_r+0x7a>
 801a40e:	89a3      	ldrh	r3, [r4, #12]
 801a410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a418:	d003      	beq.n	801a422 <__swsetup_r+0x7a>
 801a41a:	4621      	mov	r1, r4
 801a41c:	4628      	mov	r0, r5
 801a41e:	f000 ff15 	bl	801b24c <__smakebuf_r>
 801a422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a426:	f013 0201 	ands.w	r2, r3, #1
 801a42a:	d00a      	beq.n	801a442 <__swsetup_r+0x9a>
 801a42c:	2200      	movs	r2, #0
 801a42e:	60a2      	str	r2, [r4, #8]
 801a430:	6962      	ldr	r2, [r4, #20]
 801a432:	4252      	negs	r2, r2
 801a434:	61a2      	str	r2, [r4, #24]
 801a436:	6922      	ldr	r2, [r4, #16]
 801a438:	b942      	cbnz	r2, 801a44c <__swsetup_r+0xa4>
 801a43a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a43e:	d1c5      	bne.n	801a3cc <__swsetup_r+0x24>
 801a440:	bd38      	pop	{r3, r4, r5, pc}
 801a442:	0799      	lsls	r1, r3, #30
 801a444:	bf58      	it	pl
 801a446:	6962      	ldrpl	r2, [r4, #20]
 801a448:	60a2      	str	r2, [r4, #8]
 801a44a:	e7f4      	b.n	801a436 <__swsetup_r+0x8e>
 801a44c:	2000      	movs	r0, #0
 801a44e:	e7f7      	b.n	801a440 <__swsetup_r+0x98>
 801a450:	20000038 	.word	0x20000038

0801a454 <memcmp>:
 801a454:	b510      	push	{r4, lr}
 801a456:	3901      	subs	r1, #1
 801a458:	4402      	add	r2, r0
 801a45a:	4290      	cmp	r0, r2
 801a45c:	d101      	bne.n	801a462 <memcmp+0xe>
 801a45e:	2000      	movs	r0, #0
 801a460:	e005      	b.n	801a46e <memcmp+0x1a>
 801a462:	7803      	ldrb	r3, [r0, #0]
 801a464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a468:	42a3      	cmp	r3, r4
 801a46a:	d001      	beq.n	801a470 <memcmp+0x1c>
 801a46c:	1b18      	subs	r0, r3, r4
 801a46e:	bd10      	pop	{r4, pc}
 801a470:	3001      	adds	r0, #1
 801a472:	e7f2      	b.n	801a45a <memcmp+0x6>

0801a474 <memmove>:
 801a474:	4288      	cmp	r0, r1
 801a476:	b510      	push	{r4, lr}
 801a478:	eb01 0402 	add.w	r4, r1, r2
 801a47c:	d902      	bls.n	801a484 <memmove+0x10>
 801a47e:	4284      	cmp	r4, r0
 801a480:	4623      	mov	r3, r4
 801a482:	d807      	bhi.n	801a494 <memmove+0x20>
 801a484:	1e43      	subs	r3, r0, #1
 801a486:	42a1      	cmp	r1, r4
 801a488:	d008      	beq.n	801a49c <memmove+0x28>
 801a48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a492:	e7f8      	b.n	801a486 <memmove+0x12>
 801a494:	4402      	add	r2, r0
 801a496:	4601      	mov	r1, r0
 801a498:	428a      	cmp	r2, r1
 801a49a:	d100      	bne.n	801a49e <memmove+0x2a>
 801a49c:	bd10      	pop	{r4, pc}
 801a49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4a6:	e7f7      	b.n	801a498 <memmove+0x24>

0801a4a8 <memset>:
 801a4a8:	4402      	add	r2, r0
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	d100      	bne.n	801a4b2 <memset+0xa>
 801a4b0:	4770      	bx	lr
 801a4b2:	f803 1b01 	strb.w	r1, [r3], #1
 801a4b6:	e7f9      	b.n	801a4ac <memset+0x4>

0801a4b8 <strncmp>:
 801a4b8:	b510      	push	{r4, lr}
 801a4ba:	b16a      	cbz	r2, 801a4d8 <strncmp+0x20>
 801a4bc:	3901      	subs	r1, #1
 801a4be:	1884      	adds	r4, r0, r2
 801a4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	d103      	bne.n	801a4d4 <strncmp+0x1c>
 801a4cc:	42a0      	cmp	r0, r4
 801a4ce:	d001      	beq.n	801a4d4 <strncmp+0x1c>
 801a4d0:	2a00      	cmp	r2, #0
 801a4d2:	d1f5      	bne.n	801a4c0 <strncmp+0x8>
 801a4d4:	1ad0      	subs	r0, r2, r3
 801a4d6:	bd10      	pop	{r4, pc}
 801a4d8:	4610      	mov	r0, r2
 801a4da:	e7fc      	b.n	801a4d6 <strncmp+0x1e>

0801a4dc <strncpy>:
 801a4dc:	b510      	push	{r4, lr}
 801a4de:	3901      	subs	r1, #1
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	b132      	cbz	r2, 801a4f2 <strncpy+0x16>
 801a4e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a4e8:	f803 4b01 	strb.w	r4, [r3], #1
 801a4ec:	3a01      	subs	r2, #1
 801a4ee:	2c00      	cmp	r4, #0
 801a4f0:	d1f7      	bne.n	801a4e2 <strncpy+0x6>
 801a4f2:	441a      	add	r2, r3
 801a4f4:	2100      	movs	r1, #0
 801a4f6:	4293      	cmp	r3, r2
 801a4f8:	d100      	bne.n	801a4fc <strncpy+0x20>
 801a4fa:	bd10      	pop	{r4, pc}
 801a4fc:	f803 1b01 	strb.w	r1, [r3], #1
 801a500:	e7f9      	b.n	801a4f6 <strncpy+0x1a>
	...

0801a504 <_close_r>:
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	4d06      	ldr	r5, [pc, #24]	@ (801a520 <_close_r+0x1c>)
 801a508:	2300      	movs	r3, #0
 801a50a:	4604      	mov	r4, r0
 801a50c:	4608      	mov	r0, r1
 801a50e:	602b      	str	r3, [r5, #0]
 801a510:	f7e7 fd5a 	bl	8001fc8 <_close>
 801a514:	1c43      	adds	r3, r0, #1
 801a516:	d102      	bne.n	801a51e <_close_r+0x1a>
 801a518:	682b      	ldr	r3, [r5, #0]
 801a51a:	b103      	cbz	r3, 801a51e <_close_r+0x1a>
 801a51c:	6023      	str	r3, [r4, #0]
 801a51e:	bd38      	pop	{r3, r4, r5, pc}
 801a520:	20017800 	.word	0x20017800

0801a524 <_lseek_r>:
 801a524:	b538      	push	{r3, r4, r5, lr}
 801a526:	4d07      	ldr	r5, [pc, #28]	@ (801a544 <_lseek_r+0x20>)
 801a528:	4604      	mov	r4, r0
 801a52a:	4608      	mov	r0, r1
 801a52c:	4611      	mov	r1, r2
 801a52e:	2200      	movs	r2, #0
 801a530:	602a      	str	r2, [r5, #0]
 801a532:	461a      	mov	r2, r3
 801a534:	f7e7 fd6f 	bl	8002016 <_lseek>
 801a538:	1c43      	adds	r3, r0, #1
 801a53a:	d102      	bne.n	801a542 <_lseek_r+0x1e>
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	b103      	cbz	r3, 801a542 <_lseek_r+0x1e>
 801a540:	6023      	str	r3, [r4, #0]
 801a542:	bd38      	pop	{r3, r4, r5, pc}
 801a544:	20017800 	.word	0x20017800

0801a548 <_read_r>:
 801a548:	b538      	push	{r3, r4, r5, lr}
 801a54a:	4d07      	ldr	r5, [pc, #28]	@ (801a568 <_read_r+0x20>)
 801a54c:	4604      	mov	r4, r0
 801a54e:	4608      	mov	r0, r1
 801a550:	4611      	mov	r1, r2
 801a552:	2200      	movs	r2, #0
 801a554:	602a      	str	r2, [r5, #0]
 801a556:	461a      	mov	r2, r3
 801a558:	f7e7 fcfd 	bl	8001f56 <_read>
 801a55c:	1c43      	adds	r3, r0, #1
 801a55e:	d102      	bne.n	801a566 <_read_r+0x1e>
 801a560:	682b      	ldr	r3, [r5, #0]
 801a562:	b103      	cbz	r3, 801a566 <_read_r+0x1e>
 801a564:	6023      	str	r3, [r4, #0]
 801a566:	bd38      	pop	{r3, r4, r5, pc}
 801a568:	20017800 	.word	0x20017800

0801a56c <_write_r>:
 801a56c:	b538      	push	{r3, r4, r5, lr}
 801a56e:	4d07      	ldr	r5, [pc, #28]	@ (801a58c <_write_r+0x20>)
 801a570:	4604      	mov	r4, r0
 801a572:	4608      	mov	r0, r1
 801a574:	4611      	mov	r1, r2
 801a576:	2200      	movs	r2, #0
 801a578:	602a      	str	r2, [r5, #0]
 801a57a:	461a      	mov	r2, r3
 801a57c:	f7e7 fd08 	bl	8001f90 <_write>
 801a580:	1c43      	adds	r3, r0, #1
 801a582:	d102      	bne.n	801a58a <_write_r+0x1e>
 801a584:	682b      	ldr	r3, [r5, #0]
 801a586:	b103      	cbz	r3, 801a58a <_write_r+0x1e>
 801a588:	6023      	str	r3, [r4, #0]
 801a58a:	bd38      	pop	{r3, r4, r5, pc}
 801a58c:	20017800 	.word	0x20017800

0801a590 <__libc_init_array>:
 801a590:	b570      	push	{r4, r5, r6, lr}
 801a592:	4d0d      	ldr	r5, [pc, #52]	@ (801a5c8 <__libc_init_array+0x38>)
 801a594:	4c0d      	ldr	r4, [pc, #52]	@ (801a5cc <__libc_init_array+0x3c>)
 801a596:	1b64      	subs	r4, r4, r5
 801a598:	10a4      	asrs	r4, r4, #2
 801a59a:	2600      	movs	r6, #0
 801a59c:	42a6      	cmp	r6, r4
 801a59e:	d109      	bne.n	801a5b4 <__libc_init_array+0x24>
 801a5a0:	4d0b      	ldr	r5, [pc, #44]	@ (801a5d0 <__libc_init_array+0x40>)
 801a5a2:	4c0c      	ldr	r4, [pc, #48]	@ (801a5d4 <__libc_init_array+0x44>)
 801a5a4:	f000 ff42 	bl	801b42c <_init>
 801a5a8:	1b64      	subs	r4, r4, r5
 801a5aa:	10a4      	asrs	r4, r4, #2
 801a5ac:	2600      	movs	r6, #0
 801a5ae:	42a6      	cmp	r6, r4
 801a5b0:	d105      	bne.n	801a5be <__libc_init_array+0x2e>
 801a5b2:	bd70      	pop	{r4, r5, r6, pc}
 801a5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5b8:	4798      	blx	r3
 801a5ba:	3601      	adds	r6, #1
 801a5bc:	e7ee      	b.n	801a59c <__libc_init_array+0xc>
 801a5be:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5c2:	4798      	blx	r3
 801a5c4:	3601      	adds	r6, #1
 801a5c6:	e7f2      	b.n	801a5ae <__libc_init_array+0x1e>
 801a5c8:	0802313c 	.word	0x0802313c
 801a5cc:	0802313c 	.word	0x0802313c
 801a5d0:	0802313c 	.word	0x0802313c
 801a5d4:	08023140 	.word	0x08023140

0801a5d8 <__retarget_lock_init_recursive>:
 801a5d8:	4770      	bx	lr

0801a5da <__retarget_lock_acquire_recursive>:
 801a5da:	4770      	bx	lr

0801a5dc <__retarget_lock_release_recursive>:
 801a5dc:	4770      	bx	lr

0801a5de <memcpy>:
 801a5de:	440a      	add	r2, r1
 801a5e0:	4291      	cmp	r1, r2
 801a5e2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a5e6:	d100      	bne.n	801a5ea <memcpy+0xc>
 801a5e8:	4770      	bx	lr
 801a5ea:	b510      	push	{r4, lr}
 801a5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5f4:	4291      	cmp	r1, r2
 801a5f6:	d1f9      	bne.n	801a5ec <memcpy+0xe>
 801a5f8:	bd10      	pop	{r4, pc}
	...

0801a5fc <__assert_func>:
 801a5fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5fe:	4614      	mov	r4, r2
 801a600:	461a      	mov	r2, r3
 801a602:	4b09      	ldr	r3, [pc, #36]	@ (801a628 <__assert_func+0x2c>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4605      	mov	r5, r0
 801a608:	68d8      	ldr	r0, [r3, #12]
 801a60a:	b14c      	cbz	r4, 801a620 <__assert_func+0x24>
 801a60c:	4b07      	ldr	r3, [pc, #28]	@ (801a62c <__assert_func+0x30>)
 801a60e:	9100      	str	r1, [sp, #0]
 801a610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a614:	4906      	ldr	r1, [pc, #24]	@ (801a630 <__assert_func+0x34>)
 801a616:	462b      	mov	r3, r5
 801a618:	f000 fde0 	bl	801b1dc <fiprintf>
 801a61c:	f000 fe84 	bl	801b328 <abort>
 801a620:	4b04      	ldr	r3, [pc, #16]	@ (801a634 <__assert_func+0x38>)
 801a622:	461c      	mov	r4, r3
 801a624:	e7f3      	b.n	801a60e <__assert_func+0x12>
 801a626:	bf00      	nop
 801a628:	20000038 	.word	0x20000038
 801a62c:	080230c3 	.word	0x080230c3
 801a630:	080230d0 	.word	0x080230d0
 801a634:	080230fe 	.word	0x080230fe

0801a638 <_free_r>:
 801a638:	b538      	push	{r3, r4, r5, lr}
 801a63a:	4605      	mov	r5, r0
 801a63c:	2900      	cmp	r1, #0
 801a63e:	d041      	beq.n	801a6c4 <_free_r+0x8c>
 801a640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a644:	1f0c      	subs	r4, r1, #4
 801a646:	2b00      	cmp	r3, #0
 801a648:	bfb8      	it	lt
 801a64a:	18e4      	addlt	r4, r4, r3
 801a64c:	f000 f8e8 	bl	801a820 <__malloc_lock>
 801a650:	4a1d      	ldr	r2, [pc, #116]	@ (801a6c8 <_free_r+0x90>)
 801a652:	6813      	ldr	r3, [r2, #0]
 801a654:	b933      	cbnz	r3, 801a664 <_free_r+0x2c>
 801a656:	6063      	str	r3, [r4, #4]
 801a658:	6014      	str	r4, [r2, #0]
 801a65a:	4628      	mov	r0, r5
 801a65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a660:	f000 b8e4 	b.w	801a82c <__malloc_unlock>
 801a664:	42a3      	cmp	r3, r4
 801a666:	d908      	bls.n	801a67a <_free_r+0x42>
 801a668:	6820      	ldr	r0, [r4, #0]
 801a66a:	1821      	adds	r1, r4, r0
 801a66c:	428b      	cmp	r3, r1
 801a66e:	bf01      	itttt	eq
 801a670:	6819      	ldreq	r1, [r3, #0]
 801a672:	685b      	ldreq	r3, [r3, #4]
 801a674:	1809      	addeq	r1, r1, r0
 801a676:	6021      	streq	r1, [r4, #0]
 801a678:	e7ed      	b.n	801a656 <_free_r+0x1e>
 801a67a:	461a      	mov	r2, r3
 801a67c:	685b      	ldr	r3, [r3, #4]
 801a67e:	b10b      	cbz	r3, 801a684 <_free_r+0x4c>
 801a680:	42a3      	cmp	r3, r4
 801a682:	d9fa      	bls.n	801a67a <_free_r+0x42>
 801a684:	6811      	ldr	r1, [r2, #0]
 801a686:	1850      	adds	r0, r2, r1
 801a688:	42a0      	cmp	r0, r4
 801a68a:	d10b      	bne.n	801a6a4 <_free_r+0x6c>
 801a68c:	6820      	ldr	r0, [r4, #0]
 801a68e:	4401      	add	r1, r0
 801a690:	1850      	adds	r0, r2, r1
 801a692:	4283      	cmp	r3, r0
 801a694:	6011      	str	r1, [r2, #0]
 801a696:	d1e0      	bne.n	801a65a <_free_r+0x22>
 801a698:	6818      	ldr	r0, [r3, #0]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	6053      	str	r3, [r2, #4]
 801a69e:	4408      	add	r0, r1
 801a6a0:	6010      	str	r0, [r2, #0]
 801a6a2:	e7da      	b.n	801a65a <_free_r+0x22>
 801a6a4:	d902      	bls.n	801a6ac <_free_r+0x74>
 801a6a6:	230c      	movs	r3, #12
 801a6a8:	602b      	str	r3, [r5, #0]
 801a6aa:	e7d6      	b.n	801a65a <_free_r+0x22>
 801a6ac:	6820      	ldr	r0, [r4, #0]
 801a6ae:	1821      	adds	r1, r4, r0
 801a6b0:	428b      	cmp	r3, r1
 801a6b2:	bf04      	itt	eq
 801a6b4:	6819      	ldreq	r1, [r3, #0]
 801a6b6:	685b      	ldreq	r3, [r3, #4]
 801a6b8:	6063      	str	r3, [r4, #4]
 801a6ba:	bf04      	itt	eq
 801a6bc:	1809      	addeq	r1, r1, r0
 801a6be:	6021      	streq	r1, [r4, #0]
 801a6c0:	6054      	str	r4, [r2, #4]
 801a6c2:	e7ca      	b.n	801a65a <_free_r+0x22>
 801a6c4:	bd38      	pop	{r3, r4, r5, pc}
 801a6c6:	bf00      	nop
 801a6c8:	2001794c 	.word	0x2001794c

0801a6cc <malloc>:
 801a6cc:	4b02      	ldr	r3, [pc, #8]	@ (801a6d8 <malloc+0xc>)
 801a6ce:	4601      	mov	r1, r0
 801a6d0:	6818      	ldr	r0, [r3, #0]
 801a6d2:	f000 b825 	b.w	801a720 <_malloc_r>
 801a6d6:	bf00      	nop
 801a6d8:	20000038 	.word	0x20000038

0801a6dc <sbrk_aligned>:
 801a6dc:	b570      	push	{r4, r5, r6, lr}
 801a6de:	4e0f      	ldr	r6, [pc, #60]	@ (801a71c <sbrk_aligned+0x40>)
 801a6e0:	460c      	mov	r4, r1
 801a6e2:	6831      	ldr	r1, [r6, #0]
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	b911      	cbnz	r1, 801a6ee <sbrk_aligned+0x12>
 801a6e8:	f000 fe0e 	bl	801b308 <_sbrk_r>
 801a6ec:	6030      	str	r0, [r6, #0]
 801a6ee:	4621      	mov	r1, r4
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	f000 fe09 	bl	801b308 <_sbrk_r>
 801a6f6:	1c43      	adds	r3, r0, #1
 801a6f8:	d103      	bne.n	801a702 <sbrk_aligned+0x26>
 801a6fa:	f04f 34ff 	mov.w	r4, #4294967295
 801a6fe:	4620      	mov	r0, r4
 801a700:	bd70      	pop	{r4, r5, r6, pc}
 801a702:	1cc4      	adds	r4, r0, #3
 801a704:	f024 0403 	bic.w	r4, r4, #3
 801a708:	42a0      	cmp	r0, r4
 801a70a:	d0f8      	beq.n	801a6fe <sbrk_aligned+0x22>
 801a70c:	1a21      	subs	r1, r4, r0
 801a70e:	4628      	mov	r0, r5
 801a710:	f000 fdfa 	bl	801b308 <_sbrk_r>
 801a714:	3001      	adds	r0, #1
 801a716:	d1f2      	bne.n	801a6fe <sbrk_aligned+0x22>
 801a718:	e7ef      	b.n	801a6fa <sbrk_aligned+0x1e>
 801a71a:	bf00      	nop
 801a71c:	20017948 	.word	0x20017948

0801a720 <_malloc_r>:
 801a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a724:	1ccd      	adds	r5, r1, #3
 801a726:	f025 0503 	bic.w	r5, r5, #3
 801a72a:	3508      	adds	r5, #8
 801a72c:	2d0c      	cmp	r5, #12
 801a72e:	bf38      	it	cc
 801a730:	250c      	movcc	r5, #12
 801a732:	2d00      	cmp	r5, #0
 801a734:	4606      	mov	r6, r0
 801a736:	db01      	blt.n	801a73c <_malloc_r+0x1c>
 801a738:	42a9      	cmp	r1, r5
 801a73a:	d904      	bls.n	801a746 <_malloc_r+0x26>
 801a73c:	230c      	movs	r3, #12
 801a73e:	6033      	str	r3, [r6, #0]
 801a740:	2000      	movs	r0, #0
 801a742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a81c <_malloc_r+0xfc>
 801a74a:	f000 f869 	bl	801a820 <__malloc_lock>
 801a74e:	f8d8 3000 	ldr.w	r3, [r8]
 801a752:	461c      	mov	r4, r3
 801a754:	bb44      	cbnz	r4, 801a7a8 <_malloc_r+0x88>
 801a756:	4629      	mov	r1, r5
 801a758:	4630      	mov	r0, r6
 801a75a:	f7ff ffbf 	bl	801a6dc <sbrk_aligned>
 801a75e:	1c43      	adds	r3, r0, #1
 801a760:	4604      	mov	r4, r0
 801a762:	d158      	bne.n	801a816 <_malloc_r+0xf6>
 801a764:	f8d8 4000 	ldr.w	r4, [r8]
 801a768:	4627      	mov	r7, r4
 801a76a:	2f00      	cmp	r7, #0
 801a76c:	d143      	bne.n	801a7f6 <_malloc_r+0xd6>
 801a76e:	2c00      	cmp	r4, #0
 801a770:	d04b      	beq.n	801a80a <_malloc_r+0xea>
 801a772:	6823      	ldr	r3, [r4, #0]
 801a774:	4639      	mov	r1, r7
 801a776:	4630      	mov	r0, r6
 801a778:	eb04 0903 	add.w	r9, r4, r3
 801a77c:	f000 fdc4 	bl	801b308 <_sbrk_r>
 801a780:	4581      	cmp	r9, r0
 801a782:	d142      	bne.n	801a80a <_malloc_r+0xea>
 801a784:	6821      	ldr	r1, [r4, #0]
 801a786:	1a6d      	subs	r5, r5, r1
 801a788:	4629      	mov	r1, r5
 801a78a:	4630      	mov	r0, r6
 801a78c:	f7ff ffa6 	bl	801a6dc <sbrk_aligned>
 801a790:	3001      	adds	r0, #1
 801a792:	d03a      	beq.n	801a80a <_malloc_r+0xea>
 801a794:	6823      	ldr	r3, [r4, #0]
 801a796:	442b      	add	r3, r5
 801a798:	6023      	str	r3, [r4, #0]
 801a79a:	f8d8 3000 	ldr.w	r3, [r8]
 801a79e:	685a      	ldr	r2, [r3, #4]
 801a7a0:	bb62      	cbnz	r2, 801a7fc <_malloc_r+0xdc>
 801a7a2:	f8c8 7000 	str.w	r7, [r8]
 801a7a6:	e00f      	b.n	801a7c8 <_malloc_r+0xa8>
 801a7a8:	6822      	ldr	r2, [r4, #0]
 801a7aa:	1b52      	subs	r2, r2, r5
 801a7ac:	d420      	bmi.n	801a7f0 <_malloc_r+0xd0>
 801a7ae:	2a0b      	cmp	r2, #11
 801a7b0:	d917      	bls.n	801a7e2 <_malloc_r+0xc2>
 801a7b2:	1961      	adds	r1, r4, r5
 801a7b4:	42a3      	cmp	r3, r4
 801a7b6:	6025      	str	r5, [r4, #0]
 801a7b8:	bf18      	it	ne
 801a7ba:	6059      	strne	r1, [r3, #4]
 801a7bc:	6863      	ldr	r3, [r4, #4]
 801a7be:	bf08      	it	eq
 801a7c0:	f8c8 1000 	streq.w	r1, [r8]
 801a7c4:	5162      	str	r2, [r4, r5]
 801a7c6:	604b      	str	r3, [r1, #4]
 801a7c8:	4630      	mov	r0, r6
 801a7ca:	f000 f82f 	bl	801a82c <__malloc_unlock>
 801a7ce:	f104 000b 	add.w	r0, r4, #11
 801a7d2:	1d23      	adds	r3, r4, #4
 801a7d4:	f020 0007 	bic.w	r0, r0, #7
 801a7d8:	1ac2      	subs	r2, r0, r3
 801a7da:	bf1c      	itt	ne
 801a7dc:	1a1b      	subne	r3, r3, r0
 801a7de:	50a3      	strne	r3, [r4, r2]
 801a7e0:	e7af      	b.n	801a742 <_malloc_r+0x22>
 801a7e2:	6862      	ldr	r2, [r4, #4]
 801a7e4:	42a3      	cmp	r3, r4
 801a7e6:	bf0c      	ite	eq
 801a7e8:	f8c8 2000 	streq.w	r2, [r8]
 801a7ec:	605a      	strne	r2, [r3, #4]
 801a7ee:	e7eb      	b.n	801a7c8 <_malloc_r+0xa8>
 801a7f0:	4623      	mov	r3, r4
 801a7f2:	6864      	ldr	r4, [r4, #4]
 801a7f4:	e7ae      	b.n	801a754 <_malloc_r+0x34>
 801a7f6:	463c      	mov	r4, r7
 801a7f8:	687f      	ldr	r7, [r7, #4]
 801a7fa:	e7b6      	b.n	801a76a <_malloc_r+0x4a>
 801a7fc:	461a      	mov	r2, r3
 801a7fe:	685b      	ldr	r3, [r3, #4]
 801a800:	42a3      	cmp	r3, r4
 801a802:	d1fb      	bne.n	801a7fc <_malloc_r+0xdc>
 801a804:	2300      	movs	r3, #0
 801a806:	6053      	str	r3, [r2, #4]
 801a808:	e7de      	b.n	801a7c8 <_malloc_r+0xa8>
 801a80a:	230c      	movs	r3, #12
 801a80c:	6033      	str	r3, [r6, #0]
 801a80e:	4630      	mov	r0, r6
 801a810:	f000 f80c 	bl	801a82c <__malloc_unlock>
 801a814:	e794      	b.n	801a740 <_malloc_r+0x20>
 801a816:	6005      	str	r5, [r0, #0]
 801a818:	e7d6      	b.n	801a7c8 <_malloc_r+0xa8>
 801a81a:	bf00      	nop
 801a81c:	2001794c 	.word	0x2001794c

0801a820 <__malloc_lock>:
 801a820:	4801      	ldr	r0, [pc, #4]	@ (801a828 <__malloc_lock+0x8>)
 801a822:	f7ff beda 	b.w	801a5da <__retarget_lock_acquire_recursive>
 801a826:	bf00      	nop
 801a828:	20017944 	.word	0x20017944

0801a82c <__malloc_unlock>:
 801a82c:	4801      	ldr	r0, [pc, #4]	@ (801a834 <__malloc_unlock+0x8>)
 801a82e:	f7ff bed5 	b.w	801a5dc <__retarget_lock_release_recursive>
 801a832:	bf00      	nop
 801a834:	20017944 	.word	0x20017944

0801a838 <__ssputs_r>:
 801a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a83c:	688e      	ldr	r6, [r1, #8]
 801a83e:	461f      	mov	r7, r3
 801a840:	42be      	cmp	r6, r7
 801a842:	680b      	ldr	r3, [r1, #0]
 801a844:	4682      	mov	sl, r0
 801a846:	460c      	mov	r4, r1
 801a848:	4690      	mov	r8, r2
 801a84a:	d82d      	bhi.n	801a8a8 <__ssputs_r+0x70>
 801a84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a854:	d026      	beq.n	801a8a4 <__ssputs_r+0x6c>
 801a856:	6965      	ldr	r5, [r4, #20]
 801a858:	6909      	ldr	r1, [r1, #16]
 801a85a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a85e:	eba3 0901 	sub.w	r9, r3, r1
 801a862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a866:	1c7b      	adds	r3, r7, #1
 801a868:	444b      	add	r3, r9
 801a86a:	106d      	asrs	r5, r5, #1
 801a86c:	429d      	cmp	r5, r3
 801a86e:	bf38      	it	cc
 801a870:	461d      	movcc	r5, r3
 801a872:	0553      	lsls	r3, r2, #21
 801a874:	d527      	bpl.n	801a8c6 <__ssputs_r+0x8e>
 801a876:	4629      	mov	r1, r5
 801a878:	f7ff ff52 	bl	801a720 <_malloc_r>
 801a87c:	4606      	mov	r6, r0
 801a87e:	b360      	cbz	r0, 801a8da <__ssputs_r+0xa2>
 801a880:	6921      	ldr	r1, [r4, #16]
 801a882:	464a      	mov	r2, r9
 801a884:	f7ff feab 	bl	801a5de <memcpy>
 801a888:	89a3      	ldrh	r3, [r4, #12]
 801a88a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a892:	81a3      	strh	r3, [r4, #12]
 801a894:	6126      	str	r6, [r4, #16]
 801a896:	6165      	str	r5, [r4, #20]
 801a898:	444e      	add	r6, r9
 801a89a:	eba5 0509 	sub.w	r5, r5, r9
 801a89e:	6026      	str	r6, [r4, #0]
 801a8a0:	60a5      	str	r5, [r4, #8]
 801a8a2:	463e      	mov	r6, r7
 801a8a4:	42be      	cmp	r6, r7
 801a8a6:	d900      	bls.n	801a8aa <__ssputs_r+0x72>
 801a8a8:	463e      	mov	r6, r7
 801a8aa:	6820      	ldr	r0, [r4, #0]
 801a8ac:	4632      	mov	r2, r6
 801a8ae:	4641      	mov	r1, r8
 801a8b0:	f7ff fde0 	bl	801a474 <memmove>
 801a8b4:	68a3      	ldr	r3, [r4, #8]
 801a8b6:	1b9b      	subs	r3, r3, r6
 801a8b8:	60a3      	str	r3, [r4, #8]
 801a8ba:	6823      	ldr	r3, [r4, #0]
 801a8bc:	4433      	add	r3, r6
 801a8be:	6023      	str	r3, [r4, #0]
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8c6:	462a      	mov	r2, r5
 801a8c8:	f000 fd35 	bl	801b336 <_realloc_r>
 801a8cc:	4606      	mov	r6, r0
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d1e0      	bne.n	801a894 <__ssputs_r+0x5c>
 801a8d2:	6921      	ldr	r1, [r4, #16]
 801a8d4:	4650      	mov	r0, sl
 801a8d6:	f7ff feaf 	bl	801a638 <_free_r>
 801a8da:	230c      	movs	r3, #12
 801a8dc:	f8ca 3000 	str.w	r3, [sl]
 801a8e0:	89a3      	ldrh	r3, [r4, #12]
 801a8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a8e6:	81a3      	strh	r3, [r4, #12]
 801a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ec:	e7e9      	b.n	801a8c2 <__ssputs_r+0x8a>
	...

0801a8f0 <_svfiprintf_r>:
 801a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f4:	4698      	mov	r8, r3
 801a8f6:	898b      	ldrh	r3, [r1, #12]
 801a8f8:	061b      	lsls	r3, r3, #24
 801a8fa:	b09d      	sub	sp, #116	@ 0x74
 801a8fc:	4607      	mov	r7, r0
 801a8fe:	460d      	mov	r5, r1
 801a900:	4614      	mov	r4, r2
 801a902:	d510      	bpl.n	801a926 <_svfiprintf_r+0x36>
 801a904:	690b      	ldr	r3, [r1, #16]
 801a906:	b973      	cbnz	r3, 801a926 <_svfiprintf_r+0x36>
 801a908:	2140      	movs	r1, #64	@ 0x40
 801a90a:	f7ff ff09 	bl	801a720 <_malloc_r>
 801a90e:	6028      	str	r0, [r5, #0]
 801a910:	6128      	str	r0, [r5, #16]
 801a912:	b930      	cbnz	r0, 801a922 <_svfiprintf_r+0x32>
 801a914:	230c      	movs	r3, #12
 801a916:	603b      	str	r3, [r7, #0]
 801a918:	f04f 30ff 	mov.w	r0, #4294967295
 801a91c:	b01d      	add	sp, #116	@ 0x74
 801a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a922:	2340      	movs	r3, #64	@ 0x40
 801a924:	616b      	str	r3, [r5, #20]
 801a926:	2300      	movs	r3, #0
 801a928:	9309      	str	r3, [sp, #36]	@ 0x24
 801a92a:	2320      	movs	r3, #32
 801a92c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a930:	f8cd 800c 	str.w	r8, [sp, #12]
 801a934:	2330      	movs	r3, #48	@ 0x30
 801a936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801aad4 <_svfiprintf_r+0x1e4>
 801a93a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a93e:	f04f 0901 	mov.w	r9, #1
 801a942:	4623      	mov	r3, r4
 801a944:	469a      	mov	sl, r3
 801a946:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a94a:	b10a      	cbz	r2, 801a950 <_svfiprintf_r+0x60>
 801a94c:	2a25      	cmp	r2, #37	@ 0x25
 801a94e:	d1f9      	bne.n	801a944 <_svfiprintf_r+0x54>
 801a950:	ebba 0b04 	subs.w	fp, sl, r4
 801a954:	d00b      	beq.n	801a96e <_svfiprintf_r+0x7e>
 801a956:	465b      	mov	r3, fp
 801a958:	4622      	mov	r2, r4
 801a95a:	4629      	mov	r1, r5
 801a95c:	4638      	mov	r0, r7
 801a95e:	f7ff ff6b 	bl	801a838 <__ssputs_r>
 801a962:	3001      	adds	r0, #1
 801a964:	f000 80a7 	beq.w	801aab6 <_svfiprintf_r+0x1c6>
 801a968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a96a:	445a      	add	r2, fp
 801a96c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a96e:	f89a 3000 	ldrb.w	r3, [sl]
 801a972:	2b00      	cmp	r3, #0
 801a974:	f000 809f 	beq.w	801aab6 <_svfiprintf_r+0x1c6>
 801a978:	2300      	movs	r3, #0
 801a97a:	f04f 32ff 	mov.w	r2, #4294967295
 801a97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a982:	f10a 0a01 	add.w	sl, sl, #1
 801a986:	9304      	str	r3, [sp, #16]
 801a988:	9307      	str	r3, [sp, #28]
 801a98a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a98e:	931a      	str	r3, [sp, #104]	@ 0x68
 801a990:	4654      	mov	r4, sl
 801a992:	2205      	movs	r2, #5
 801a994:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a998:	484e      	ldr	r0, [pc, #312]	@ (801aad4 <_svfiprintf_r+0x1e4>)
 801a99a:	f7e5 fc31 	bl	8000200 <memchr>
 801a99e:	9a04      	ldr	r2, [sp, #16]
 801a9a0:	b9d8      	cbnz	r0, 801a9da <_svfiprintf_r+0xea>
 801a9a2:	06d0      	lsls	r0, r2, #27
 801a9a4:	bf44      	itt	mi
 801a9a6:	2320      	movmi	r3, #32
 801a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9ac:	0711      	lsls	r1, r2, #28
 801a9ae:	bf44      	itt	mi
 801a9b0:	232b      	movmi	r3, #43	@ 0x2b
 801a9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9b6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9bc:	d015      	beq.n	801a9ea <_svfiprintf_r+0xfa>
 801a9be:	9a07      	ldr	r2, [sp, #28]
 801a9c0:	4654      	mov	r4, sl
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	f04f 0c0a 	mov.w	ip, #10
 801a9c8:	4621      	mov	r1, r4
 801a9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ce:	3b30      	subs	r3, #48	@ 0x30
 801a9d0:	2b09      	cmp	r3, #9
 801a9d2:	d94b      	bls.n	801aa6c <_svfiprintf_r+0x17c>
 801a9d4:	b1b0      	cbz	r0, 801aa04 <_svfiprintf_r+0x114>
 801a9d6:	9207      	str	r2, [sp, #28]
 801a9d8:	e014      	b.n	801aa04 <_svfiprintf_r+0x114>
 801a9da:	eba0 0308 	sub.w	r3, r0, r8
 801a9de:	fa09 f303 	lsl.w	r3, r9, r3
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	9304      	str	r3, [sp, #16]
 801a9e6:	46a2      	mov	sl, r4
 801a9e8:	e7d2      	b.n	801a990 <_svfiprintf_r+0xa0>
 801a9ea:	9b03      	ldr	r3, [sp, #12]
 801a9ec:	1d19      	adds	r1, r3, #4
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	9103      	str	r1, [sp, #12]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	bfbb      	ittet	lt
 801a9f6:	425b      	neglt	r3, r3
 801a9f8:	f042 0202 	orrlt.w	r2, r2, #2
 801a9fc:	9307      	strge	r3, [sp, #28]
 801a9fe:	9307      	strlt	r3, [sp, #28]
 801aa00:	bfb8      	it	lt
 801aa02:	9204      	strlt	r2, [sp, #16]
 801aa04:	7823      	ldrb	r3, [r4, #0]
 801aa06:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa08:	d10a      	bne.n	801aa20 <_svfiprintf_r+0x130>
 801aa0a:	7863      	ldrb	r3, [r4, #1]
 801aa0c:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa0e:	d132      	bne.n	801aa76 <_svfiprintf_r+0x186>
 801aa10:	9b03      	ldr	r3, [sp, #12]
 801aa12:	1d1a      	adds	r2, r3, #4
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	9203      	str	r2, [sp, #12]
 801aa18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa1c:	3402      	adds	r4, #2
 801aa1e:	9305      	str	r3, [sp, #20]
 801aa20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801aae4 <_svfiprintf_r+0x1f4>
 801aa24:	7821      	ldrb	r1, [r4, #0]
 801aa26:	2203      	movs	r2, #3
 801aa28:	4650      	mov	r0, sl
 801aa2a:	f7e5 fbe9 	bl	8000200 <memchr>
 801aa2e:	b138      	cbz	r0, 801aa40 <_svfiprintf_r+0x150>
 801aa30:	9b04      	ldr	r3, [sp, #16]
 801aa32:	eba0 000a 	sub.w	r0, r0, sl
 801aa36:	2240      	movs	r2, #64	@ 0x40
 801aa38:	4082      	lsls	r2, r0
 801aa3a:	4313      	orrs	r3, r2
 801aa3c:	3401      	adds	r4, #1
 801aa3e:	9304      	str	r3, [sp, #16]
 801aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa44:	4824      	ldr	r0, [pc, #144]	@ (801aad8 <_svfiprintf_r+0x1e8>)
 801aa46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aa4a:	2206      	movs	r2, #6
 801aa4c:	f7e5 fbd8 	bl	8000200 <memchr>
 801aa50:	2800      	cmp	r0, #0
 801aa52:	d036      	beq.n	801aac2 <_svfiprintf_r+0x1d2>
 801aa54:	4b21      	ldr	r3, [pc, #132]	@ (801aadc <_svfiprintf_r+0x1ec>)
 801aa56:	bb1b      	cbnz	r3, 801aaa0 <_svfiprintf_r+0x1b0>
 801aa58:	9b03      	ldr	r3, [sp, #12]
 801aa5a:	3307      	adds	r3, #7
 801aa5c:	f023 0307 	bic.w	r3, r3, #7
 801aa60:	3308      	adds	r3, #8
 801aa62:	9303      	str	r3, [sp, #12]
 801aa64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa66:	4433      	add	r3, r6
 801aa68:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa6a:	e76a      	b.n	801a942 <_svfiprintf_r+0x52>
 801aa6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa70:	460c      	mov	r4, r1
 801aa72:	2001      	movs	r0, #1
 801aa74:	e7a8      	b.n	801a9c8 <_svfiprintf_r+0xd8>
 801aa76:	2300      	movs	r3, #0
 801aa78:	3401      	adds	r4, #1
 801aa7a:	9305      	str	r3, [sp, #20]
 801aa7c:	4619      	mov	r1, r3
 801aa7e:	f04f 0c0a 	mov.w	ip, #10
 801aa82:	4620      	mov	r0, r4
 801aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa88:	3a30      	subs	r2, #48	@ 0x30
 801aa8a:	2a09      	cmp	r2, #9
 801aa8c:	d903      	bls.n	801aa96 <_svfiprintf_r+0x1a6>
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d0c6      	beq.n	801aa20 <_svfiprintf_r+0x130>
 801aa92:	9105      	str	r1, [sp, #20]
 801aa94:	e7c4      	b.n	801aa20 <_svfiprintf_r+0x130>
 801aa96:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa9a:	4604      	mov	r4, r0
 801aa9c:	2301      	movs	r3, #1
 801aa9e:	e7f0      	b.n	801aa82 <_svfiprintf_r+0x192>
 801aaa0:	ab03      	add	r3, sp, #12
 801aaa2:	9300      	str	r3, [sp, #0]
 801aaa4:	462a      	mov	r2, r5
 801aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (801aae0 <_svfiprintf_r+0x1f0>)
 801aaa8:	a904      	add	r1, sp, #16
 801aaaa:	4638      	mov	r0, r7
 801aaac:	f3af 8000 	nop.w
 801aab0:	1c42      	adds	r2, r0, #1
 801aab2:	4606      	mov	r6, r0
 801aab4:	d1d6      	bne.n	801aa64 <_svfiprintf_r+0x174>
 801aab6:	89ab      	ldrh	r3, [r5, #12]
 801aab8:	065b      	lsls	r3, r3, #25
 801aaba:	f53f af2d 	bmi.w	801a918 <_svfiprintf_r+0x28>
 801aabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aac0:	e72c      	b.n	801a91c <_svfiprintf_r+0x2c>
 801aac2:	ab03      	add	r3, sp, #12
 801aac4:	9300      	str	r3, [sp, #0]
 801aac6:	462a      	mov	r2, r5
 801aac8:	4b05      	ldr	r3, [pc, #20]	@ (801aae0 <_svfiprintf_r+0x1f0>)
 801aaca:	a904      	add	r1, sp, #16
 801aacc:	4638      	mov	r0, r7
 801aace:	f000 f9bb 	bl	801ae48 <_printf_i>
 801aad2:	e7ed      	b.n	801aab0 <_svfiprintf_r+0x1c0>
 801aad4:	080230ff 	.word	0x080230ff
 801aad8:	08023109 	.word	0x08023109
 801aadc:	00000000 	.word	0x00000000
 801aae0:	0801a839 	.word	0x0801a839
 801aae4:	08023105 	.word	0x08023105

0801aae8 <__sfputc_r>:
 801aae8:	6893      	ldr	r3, [r2, #8]
 801aaea:	3b01      	subs	r3, #1
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	b410      	push	{r4}
 801aaf0:	6093      	str	r3, [r2, #8]
 801aaf2:	da08      	bge.n	801ab06 <__sfputc_r+0x1e>
 801aaf4:	6994      	ldr	r4, [r2, #24]
 801aaf6:	42a3      	cmp	r3, r4
 801aaf8:	db01      	blt.n	801aafe <__sfputc_r+0x16>
 801aafa:	290a      	cmp	r1, #10
 801aafc:	d103      	bne.n	801ab06 <__sfputc_r+0x1e>
 801aafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab02:	f7ff bc12 	b.w	801a32a <__swbuf_r>
 801ab06:	6813      	ldr	r3, [r2, #0]
 801ab08:	1c58      	adds	r0, r3, #1
 801ab0a:	6010      	str	r0, [r2, #0]
 801ab0c:	7019      	strb	r1, [r3, #0]
 801ab0e:	4608      	mov	r0, r1
 801ab10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab14:	4770      	bx	lr

0801ab16 <__sfputs_r>:
 801ab16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab18:	4606      	mov	r6, r0
 801ab1a:	460f      	mov	r7, r1
 801ab1c:	4614      	mov	r4, r2
 801ab1e:	18d5      	adds	r5, r2, r3
 801ab20:	42ac      	cmp	r4, r5
 801ab22:	d101      	bne.n	801ab28 <__sfputs_r+0x12>
 801ab24:	2000      	movs	r0, #0
 801ab26:	e007      	b.n	801ab38 <__sfputs_r+0x22>
 801ab28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab2c:	463a      	mov	r2, r7
 801ab2e:	4630      	mov	r0, r6
 801ab30:	f7ff ffda 	bl	801aae8 <__sfputc_r>
 801ab34:	1c43      	adds	r3, r0, #1
 801ab36:	d1f3      	bne.n	801ab20 <__sfputs_r+0xa>
 801ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab3c <_vfiprintf_r>:
 801ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab40:	460d      	mov	r5, r1
 801ab42:	b09d      	sub	sp, #116	@ 0x74
 801ab44:	4614      	mov	r4, r2
 801ab46:	4698      	mov	r8, r3
 801ab48:	4606      	mov	r6, r0
 801ab4a:	b118      	cbz	r0, 801ab54 <_vfiprintf_r+0x18>
 801ab4c:	6a03      	ldr	r3, [r0, #32]
 801ab4e:	b90b      	cbnz	r3, 801ab54 <_vfiprintf_r+0x18>
 801ab50:	f7ff faaa 	bl	801a0a8 <__sinit>
 801ab54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab56:	07d9      	lsls	r1, r3, #31
 801ab58:	d405      	bmi.n	801ab66 <_vfiprintf_r+0x2a>
 801ab5a:	89ab      	ldrh	r3, [r5, #12]
 801ab5c:	059a      	lsls	r2, r3, #22
 801ab5e:	d402      	bmi.n	801ab66 <_vfiprintf_r+0x2a>
 801ab60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab62:	f7ff fd3a 	bl	801a5da <__retarget_lock_acquire_recursive>
 801ab66:	89ab      	ldrh	r3, [r5, #12]
 801ab68:	071b      	lsls	r3, r3, #28
 801ab6a:	d501      	bpl.n	801ab70 <_vfiprintf_r+0x34>
 801ab6c:	692b      	ldr	r3, [r5, #16]
 801ab6e:	b99b      	cbnz	r3, 801ab98 <_vfiprintf_r+0x5c>
 801ab70:	4629      	mov	r1, r5
 801ab72:	4630      	mov	r0, r6
 801ab74:	f7ff fc18 	bl	801a3a8 <__swsetup_r>
 801ab78:	b170      	cbz	r0, 801ab98 <_vfiprintf_r+0x5c>
 801ab7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab7c:	07dc      	lsls	r4, r3, #31
 801ab7e:	d504      	bpl.n	801ab8a <_vfiprintf_r+0x4e>
 801ab80:	f04f 30ff 	mov.w	r0, #4294967295
 801ab84:	b01d      	add	sp, #116	@ 0x74
 801ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab8a:	89ab      	ldrh	r3, [r5, #12]
 801ab8c:	0598      	lsls	r0, r3, #22
 801ab8e:	d4f7      	bmi.n	801ab80 <_vfiprintf_r+0x44>
 801ab90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab92:	f7ff fd23 	bl	801a5dc <__retarget_lock_release_recursive>
 801ab96:	e7f3      	b.n	801ab80 <_vfiprintf_r+0x44>
 801ab98:	2300      	movs	r3, #0
 801ab9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab9c:	2320      	movs	r3, #32
 801ab9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aba2:	f8cd 800c 	str.w	r8, [sp, #12]
 801aba6:	2330      	movs	r3, #48	@ 0x30
 801aba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ad58 <_vfiprintf_r+0x21c>
 801abac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801abb0:	f04f 0901 	mov.w	r9, #1
 801abb4:	4623      	mov	r3, r4
 801abb6:	469a      	mov	sl, r3
 801abb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abbc:	b10a      	cbz	r2, 801abc2 <_vfiprintf_r+0x86>
 801abbe:	2a25      	cmp	r2, #37	@ 0x25
 801abc0:	d1f9      	bne.n	801abb6 <_vfiprintf_r+0x7a>
 801abc2:	ebba 0b04 	subs.w	fp, sl, r4
 801abc6:	d00b      	beq.n	801abe0 <_vfiprintf_r+0xa4>
 801abc8:	465b      	mov	r3, fp
 801abca:	4622      	mov	r2, r4
 801abcc:	4629      	mov	r1, r5
 801abce:	4630      	mov	r0, r6
 801abd0:	f7ff ffa1 	bl	801ab16 <__sfputs_r>
 801abd4:	3001      	adds	r0, #1
 801abd6:	f000 80a7 	beq.w	801ad28 <_vfiprintf_r+0x1ec>
 801abda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abdc:	445a      	add	r2, fp
 801abde:	9209      	str	r2, [sp, #36]	@ 0x24
 801abe0:	f89a 3000 	ldrb.w	r3, [sl]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	f000 809f 	beq.w	801ad28 <_vfiprintf_r+0x1ec>
 801abea:	2300      	movs	r3, #0
 801abec:	f04f 32ff 	mov.w	r2, #4294967295
 801abf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801abf4:	f10a 0a01 	add.w	sl, sl, #1
 801abf8:	9304      	str	r3, [sp, #16]
 801abfa:	9307      	str	r3, [sp, #28]
 801abfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac00:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac02:	4654      	mov	r4, sl
 801ac04:	2205      	movs	r2, #5
 801ac06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac0a:	4853      	ldr	r0, [pc, #332]	@ (801ad58 <_vfiprintf_r+0x21c>)
 801ac0c:	f7e5 faf8 	bl	8000200 <memchr>
 801ac10:	9a04      	ldr	r2, [sp, #16]
 801ac12:	b9d8      	cbnz	r0, 801ac4c <_vfiprintf_r+0x110>
 801ac14:	06d1      	lsls	r1, r2, #27
 801ac16:	bf44      	itt	mi
 801ac18:	2320      	movmi	r3, #32
 801ac1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac1e:	0713      	lsls	r3, r2, #28
 801ac20:	bf44      	itt	mi
 801ac22:	232b      	movmi	r3, #43	@ 0x2b
 801ac24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac28:	f89a 3000 	ldrb.w	r3, [sl]
 801ac2c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac2e:	d015      	beq.n	801ac5c <_vfiprintf_r+0x120>
 801ac30:	9a07      	ldr	r2, [sp, #28]
 801ac32:	4654      	mov	r4, sl
 801ac34:	2000      	movs	r0, #0
 801ac36:	f04f 0c0a 	mov.w	ip, #10
 801ac3a:	4621      	mov	r1, r4
 801ac3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac40:	3b30      	subs	r3, #48	@ 0x30
 801ac42:	2b09      	cmp	r3, #9
 801ac44:	d94b      	bls.n	801acde <_vfiprintf_r+0x1a2>
 801ac46:	b1b0      	cbz	r0, 801ac76 <_vfiprintf_r+0x13a>
 801ac48:	9207      	str	r2, [sp, #28]
 801ac4a:	e014      	b.n	801ac76 <_vfiprintf_r+0x13a>
 801ac4c:	eba0 0308 	sub.w	r3, r0, r8
 801ac50:	fa09 f303 	lsl.w	r3, r9, r3
 801ac54:	4313      	orrs	r3, r2
 801ac56:	9304      	str	r3, [sp, #16]
 801ac58:	46a2      	mov	sl, r4
 801ac5a:	e7d2      	b.n	801ac02 <_vfiprintf_r+0xc6>
 801ac5c:	9b03      	ldr	r3, [sp, #12]
 801ac5e:	1d19      	adds	r1, r3, #4
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	9103      	str	r1, [sp, #12]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	bfbb      	ittet	lt
 801ac68:	425b      	neglt	r3, r3
 801ac6a:	f042 0202 	orrlt.w	r2, r2, #2
 801ac6e:	9307      	strge	r3, [sp, #28]
 801ac70:	9307      	strlt	r3, [sp, #28]
 801ac72:	bfb8      	it	lt
 801ac74:	9204      	strlt	r2, [sp, #16]
 801ac76:	7823      	ldrb	r3, [r4, #0]
 801ac78:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac7a:	d10a      	bne.n	801ac92 <_vfiprintf_r+0x156>
 801ac7c:	7863      	ldrb	r3, [r4, #1]
 801ac7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac80:	d132      	bne.n	801ace8 <_vfiprintf_r+0x1ac>
 801ac82:	9b03      	ldr	r3, [sp, #12]
 801ac84:	1d1a      	adds	r2, r3, #4
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	9203      	str	r2, [sp, #12]
 801ac8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ac8e:	3402      	adds	r4, #2
 801ac90:	9305      	str	r3, [sp, #20]
 801ac92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ad68 <_vfiprintf_r+0x22c>
 801ac96:	7821      	ldrb	r1, [r4, #0]
 801ac98:	2203      	movs	r2, #3
 801ac9a:	4650      	mov	r0, sl
 801ac9c:	f7e5 fab0 	bl	8000200 <memchr>
 801aca0:	b138      	cbz	r0, 801acb2 <_vfiprintf_r+0x176>
 801aca2:	9b04      	ldr	r3, [sp, #16]
 801aca4:	eba0 000a 	sub.w	r0, r0, sl
 801aca8:	2240      	movs	r2, #64	@ 0x40
 801acaa:	4082      	lsls	r2, r0
 801acac:	4313      	orrs	r3, r2
 801acae:	3401      	adds	r4, #1
 801acb0:	9304      	str	r3, [sp, #16]
 801acb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acb6:	4829      	ldr	r0, [pc, #164]	@ (801ad5c <_vfiprintf_r+0x220>)
 801acb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801acbc:	2206      	movs	r2, #6
 801acbe:	f7e5 fa9f 	bl	8000200 <memchr>
 801acc2:	2800      	cmp	r0, #0
 801acc4:	d03f      	beq.n	801ad46 <_vfiprintf_r+0x20a>
 801acc6:	4b26      	ldr	r3, [pc, #152]	@ (801ad60 <_vfiprintf_r+0x224>)
 801acc8:	bb1b      	cbnz	r3, 801ad12 <_vfiprintf_r+0x1d6>
 801acca:	9b03      	ldr	r3, [sp, #12]
 801accc:	3307      	adds	r3, #7
 801acce:	f023 0307 	bic.w	r3, r3, #7
 801acd2:	3308      	adds	r3, #8
 801acd4:	9303      	str	r3, [sp, #12]
 801acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acd8:	443b      	add	r3, r7
 801acda:	9309      	str	r3, [sp, #36]	@ 0x24
 801acdc:	e76a      	b.n	801abb4 <_vfiprintf_r+0x78>
 801acde:	fb0c 3202 	mla	r2, ip, r2, r3
 801ace2:	460c      	mov	r4, r1
 801ace4:	2001      	movs	r0, #1
 801ace6:	e7a8      	b.n	801ac3a <_vfiprintf_r+0xfe>
 801ace8:	2300      	movs	r3, #0
 801acea:	3401      	adds	r4, #1
 801acec:	9305      	str	r3, [sp, #20]
 801acee:	4619      	mov	r1, r3
 801acf0:	f04f 0c0a 	mov.w	ip, #10
 801acf4:	4620      	mov	r0, r4
 801acf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acfa:	3a30      	subs	r2, #48	@ 0x30
 801acfc:	2a09      	cmp	r2, #9
 801acfe:	d903      	bls.n	801ad08 <_vfiprintf_r+0x1cc>
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d0c6      	beq.n	801ac92 <_vfiprintf_r+0x156>
 801ad04:	9105      	str	r1, [sp, #20]
 801ad06:	e7c4      	b.n	801ac92 <_vfiprintf_r+0x156>
 801ad08:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	2301      	movs	r3, #1
 801ad10:	e7f0      	b.n	801acf4 <_vfiprintf_r+0x1b8>
 801ad12:	ab03      	add	r3, sp, #12
 801ad14:	9300      	str	r3, [sp, #0]
 801ad16:	462a      	mov	r2, r5
 801ad18:	4b12      	ldr	r3, [pc, #72]	@ (801ad64 <_vfiprintf_r+0x228>)
 801ad1a:	a904      	add	r1, sp, #16
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	f3af 8000 	nop.w
 801ad22:	4607      	mov	r7, r0
 801ad24:	1c78      	adds	r0, r7, #1
 801ad26:	d1d6      	bne.n	801acd6 <_vfiprintf_r+0x19a>
 801ad28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad2a:	07d9      	lsls	r1, r3, #31
 801ad2c:	d405      	bmi.n	801ad3a <_vfiprintf_r+0x1fe>
 801ad2e:	89ab      	ldrh	r3, [r5, #12]
 801ad30:	059a      	lsls	r2, r3, #22
 801ad32:	d402      	bmi.n	801ad3a <_vfiprintf_r+0x1fe>
 801ad34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad36:	f7ff fc51 	bl	801a5dc <__retarget_lock_release_recursive>
 801ad3a:	89ab      	ldrh	r3, [r5, #12]
 801ad3c:	065b      	lsls	r3, r3, #25
 801ad3e:	f53f af1f 	bmi.w	801ab80 <_vfiprintf_r+0x44>
 801ad42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad44:	e71e      	b.n	801ab84 <_vfiprintf_r+0x48>
 801ad46:	ab03      	add	r3, sp, #12
 801ad48:	9300      	str	r3, [sp, #0]
 801ad4a:	462a      	mov	r2, r5
 801ad4c:	4b05      	ldr	r3, [pc, #20]	@ (801ad64 <_vfiprintf_r+0x228>)
 801ad4e:	a904      	add	r1, sp, #16
 801ad50:	4630      	mov	r0, r6
 801ad52:	f000 f879 	bl	801ae48 <_printf_i>
 801ad56:	e7e4      	b.n	801ad22 <_vfiprintf_r+0x1e6>
 801ad58:	080230ff 	.word	0x080230ff
 801ad5c:	08023109 	.word	0x08023109
 801ad60:	00000000 	.word	0x00000000
 801ad64:	0801ab17 	.word	0x0801ab17
 801ad68:	08023105 	.word	0x08023105

0801ad6c <_printf_common>:
 801ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad70:	4616      	mov	r6, r2
 801ad72:	4698      	mov	r8, r3
 801ad74:	688a      	ldr	r2, [r1, #8]
 801ad76:	690b      	ldr	r3, [r1, #16]
 801ad78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad7c:	4293      	cmp	r3, r2
 801ad7e:	bfb8      	it	lt
 801ad80:	4613      	movlt	r3, r2
 801ad82:	6033      	str	r3, [r6, #0]
 801ad84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ad88:	4607      	mov	r7, r0
 801ad8a:	460c      	mov	r4, r1
 801ad8c:	b10a      	cbz	r2, 801ad92 <_printf_common+0x26>
 801ad8e:	3301      	adds	r3, #1
 801ad90:	6033      	str	r3, [r6, #0]
 801ad92:	6823      	ldr	r3, [r4, #0]
 801ad94:	0699      	lsls	r1, r3, #26
 801ad96:	bf42      	ittt	mi
 801ad98:	6833      	ldrmi	r3, [r6, #0]
 801ad9a:	3302      	addmi	r3, #2
 801ad9c:	6033      	strmi	r3, [r6, #0]
 801ad9e:	6825      	ldr	r5, [r4, #0]
 801ada0:	f015 0506 	ands.w	r5, r5, #6
 801ada4:	d106      	bne.n	801adb4 <_printf_common+0x48>
 801ada6:	f104 0a19 	add.w	sl, r4, #25
 801adaa:	68e3      	ldr	r3, [r4, #12]
 801adac:	6832      	ldr	r2, [r6, #0]
 801adae:	1a9b      	subs	r3, r3, r2
 801adb0:	42ab      	cmp	r3, r5
 801adb2:	dc26      	bgt.n	801ae02 <_printf_common+0x96>
 801adb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801adb8:	6822      	ldr	r2, [r4, #0]
 801adba:	3b00      	subs	r3, #0
 801adbc:	bf18      	it	ne
 801adbe:	2301      	movne	r3, #1
 801adc0:	0692      	lsls	r2, r2, #26
 801adc2:	d42b      	bmi.n	801ae1c <_printf_common+0xb0>
 801adc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801adc8:	4641      	mov	r1, r8
 801adca:	4638      	mov	r0, r7
 801adcc:	47c8      	blx	r9
 801adce:	3001      	adds	r0, #1
 801add0:	d01e      	beq.n	801ae10 <_printf_common+0xa4>
 801add2:	6823      	ldr	r3, [r4, #0]
 801add4:	6922      	ldr	r2, [r4, #16]
 801add6:	f003 0306 	and.w	r3, r3, #6
 801adda:	2b04      	cmp	r3, #4
 801addc:	bf02      	ittt	eq
 801adde:	68e5      	ldreq	r5, [r4, #12]
 801ade0:	6833      	ldreq	r3, [r6, #0]
 801ade2:	1aed      	subeq	r5, r5, r3
 801ade4:	68a3      	ldr	r3, [r4, #8]
 801ade6:	bf0c      	ite	eq
 801ade8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801adec:	2500      	movne	r5, #0
 801adee:	4293      	cmp	r3, r2
 801adf0:	bfc4      	itt	gt
 801adf2:	1a9b      	subgt	r3, r3, r2
 801adf4:	18ed      	addgt	r5, r5, r3
 801adf6:	2600      	movs	r6, #0
 801adf8:	341a      	adds	r4, #26
 801adfa:	42b5      	cmp	r5, r6
 801adfc:	d11a      	bne.n	801ae34 <_printf_common+0xc8>
 801adfe:	2000      	movs	r0, #0
 801ae00:	e008      	b.n	801ae14 <_printf_common+0xa8>
 801ae02:	2301      	movs	r3, #1
 801ae04:	4652      	mov	r2, sl
 801ae06:	4641      	mov	r1, r8
 801ae08:	4638      	mov	r0, r7
 801ae0a:	47c8      	blx	r9
 801ae0c:	3001      	adds	r0, #1
 801ae0e:	d103      	bne.n	801ae18 <_printf_common+0xac>
 801ae10:	f04f 30ff 	mov.w	r0, #4294967295
 801ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae18:	3501      	adds	r5, #1
 801ae1a:	e7c6      	b.n	801adaa <_printf_common+0x3e>
 801ae1c:	18e1      	adds	r1, r4, r3
 801ae1e:	1c5a      	adds	r2, r3, #1
 801ae20:	2030      	movs	r0, #48	@ 0x30
 801ae22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae26:	4422      	add	r2, r4
 801ae28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae30:	3302      	adds	r3, #2
 801ae32:	e7c7      	b.n	801adc4 <_printf_common+0x58>
 801ae34:	2301      	movs	r3, #1
 801ae36:	4622      	mov	r2, r4
 801ae38:	4641      	mov	r1, r8
 801ae3a:	4638      	mov	r0, r7
 801ae3c:	47c8      	blx	r9
 801ae3e:	3001      	adds	r0, #1
 801ae40:	d0e6      	beq.n	801ae10 <_printf_common+0xa4>
 801ae42:	3601      	adds	r6, #1
 801ae44:	e7d9      	b.n	801adfa <_printf_common+0x8e>
	...

0801ae48 <_printf_i>:
 801ae48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae4c:	7e0f      	ldrb	r7, [r1, #24]
 801ae4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae50:	2f78      	cmp	r7, #120	@ 0x78
 801ae52:	4691      	mov	r9, r2
 801ae54:	4680      	mov	r8, r0
 801ae56:	460c      	mov	r4, r1
 801ae58:	469a      	mov	sl, r3
 801ae5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae5e:	d807      	bhi.n	801ae70 <_printf_i+0x28>
 801ae60:	2f62      	cmp	r7, #98	@ 0x62
 801ae62:	d80a      	bhi.n	801ae7a <_printf_i+0x32>
 801ae64:	2f00      	cmp	r7, #0
 801ae66:	f000 80d1 	beq.w	801b00c <_printf_i+0x1c4>
 801ae6a:	2f58      	cmp	r7, #88	@ 0x58
 801ae6c:	f000 80b8 	beq.w	801afe0 <_printf_i+0x198>
 801ae70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae78:	e03a      	b.n	801aef0 <_printf_i+0xa8>
 801ae7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae7e:	2b15      	cmp	r3, #21
 801ae80:	d8f6      	bhi.n	801ae70 <_printf_i+0x28>
 801ae82:	a101      	add	r1, pc, #4	@ (adr r1, 801ae88 <_printf_i+0x40>)
 801ae84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae88:	0801aee1 	.word	0x0801aee1
 801ae8c:	0801aef5 	.word	0x0801aef5
 801ae90:	0801ae71 	.word	0x0801ae71
 801ae94:	0801ae71 	.word	0x0801ae71
 801ae98:	0801ae71 	.word	0x0801ae71
 801ae9c:	0801ae71 	.word	0x0801ae71
 801aea0:	0801aef5 	.word	0x0801aef5
 801aea4:	0801ae71 	.word	0x0801ae71
 801aea8:	0801ae71 	.word	0x0801ae71
 801aeac:	0801ae71 	.word	0x0801ae71
 801aeb0:	0801ae71 	.word	0x0801ae71
 801aeb4:	0801aff3 	.word	0x0801aff3
 801aeb8:	0801af1f 	.word	0x0801af1f
 801aebc:	0801afad 	.word	0x0801afad
 801aec0:	0801ae71 	.word	0x0801ae71
 801aec4:	0801ae71 	.word	0x0801ae71
 801aec8:	0801b015 	.word	0x0801b015
 801aecc:	0801ae71 	.word	0x0801ae71
 801aed0:	0801af1f 	.word	0x0801af1f
 801aed4:	0801ae71 	.word	0x0801ae71
 801aed8:	0801ae71 	.word	0x0801ae71
 801aedc:	0801afb5 	.word	0x0801afb5
 801aee0:	6833      	ldr	r3, [r6, #0]
 801aee2:	1d1a      	adds	r2, r3, #4
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	6032      	str	r2, [r6, #0]
 801aee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aeec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aef0:	2301      	movs	r3, #1
 801aef2:	e09c      	b.n	801b02e <_printf_i+0x1e6>
 801aef4:	6833      	ldr	r3, [r6, #0]
 801aef6:	6820      	ldr	r0, [r4, #0]
 801aef8:	1d19      	adds	r1, r3, #4
 801aefa:	6031      	str	r1, [r6, #0]
 801aefc:	0606      	lsls	r6, r0, #24
 801aefe:	d501      	bpl.n	801af04 <_printf_i+0xbc>
 801af00:	681d      	ldr	r5, [r3, #0]
 801af02:	e003      	b.n	801af0c <_printf_i+0xc4>
 801af04:	0645      	lsls	r5, r0, #25
 801af06:	d5fb      	bpl.n	801af00 <_printf_i+0xb8>
 801af08:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af0c:	2d00      	cmp	r5, #0
 801af0e:	da03      	bge.n	801af18 <_printf_i+0xd0>
 801af10:	232d      	movs	r3, #45	@ 0x2d
 801af12:	426d      	negs	r5, r5
 801af14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af18:	4858      	ldr	r0, [pc, #352]	@ (801b07c <_printf_i+0x234>)
 801af1a:	230a      	movs	r3, #10
 801af1c:	e011      	b.n	801af42 <_printf_i+0xfa>
 801af1e:	6821      	ldr	r1, [r4, #0]
 801af20:	6833      	ldr	r3, [r6, #0]
 801af22:	0608      	lsls	r0, r1, #24
 801af24:	f853 5b04 	ldr.w	r5, [r3], #4
 801af28:	d402      	bmi.n	801af30 <_printf_i+0xe8>
 801af2a:	0649      	lsls	r1, r1, #25
 801af2c:	bf48      	it	mi
 801af2e:	b2ad      	uxthmi	r5, r5
 801af30:	2f6f      	cmp	r7, #111	@ 0x6f
 801af32:	4852      	ldr	r0, [pc, #328]	@ (801b07c <_printf_i+0x234>)
 801af34:	6033      	str	r3, [r6, #0]
 801af36:	bf14      	ite	ne
 801af38:	230a      	movne	r3, #10
 801af3a:	2308      	moveq	r3, #8
 801af3c:	2100      	movs	r1, #0
 801af3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af42:	6866      	ldr	r6, [r4, #4]
 801af44:	60a6      	str	r6, [r4, #8]
 801af46:	2e00      	cmp	r6, #0
 801af48:	db05      	blt.n	801af56 <_printf_i+0x10e>
 801af4a:	6821      	ldr	r1, [r4, #0]
 801af4c:	432e      	orrs	r6, r5
 801af4e:	f021 0104 	bic.w	r1, r1, #4
 801af52:	6021      	str	r1, [r4, #0]
 801af54:	d04b      	beq.n	801afee <_printf_i+0x1a6>
 801af56:	4616      	mov	r6, r2
 801af58:	fbb5 f1f3 	udiv	r1, r5, r3
 801af5c:	fb03 5711 	mls	r7, r3, r1, r5
 801af60:	5dc7      	ldrb	r7, [r0, r7]
 801af62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af66:	462f      	mov	r7, r5
 801af68:	42bb      	cmp	r3, r7
 801af6a:	460d      	mov	r5, r1
 801af6c:	d9f4      	bls.n	801af58 <_printf_i+0x110>
 801af6e:	2b08      	cmp	r3, #8
 801af70:	d10b      	bne.n	801af8a <_printf_i+0x142>
 801af72:	6823      	ldr	r3, [r4, #0]
 801af74:	07df      	lsls	r7, r3, #31
 801af76:	d508      	bpl.n	801af8a <_printf_i+0x142>
 801af78:	6923      	ldr	r3, [r4, #16]
 801af7a:	6861      	ldr	r1, [r4, #4]
 801af7c:	4299      	cmp	r1, r3
 801af7e:	bfde      	ittt	le
 801af80:	2330      	movle	r3, #48	@ 0x30
 801af82:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af86:	f106 36ff 	addle.w	r6, r6, #4294967295
 801af8a:	1b92      	subs	r2, r2, r6
 801af8c:	6122      	str	r2, [r4, #16]
 801af8e:	f8cd a000 	str.w	sl, [sp]
 801af92:	464b      	mov	r3, r9
 801af94:	aa03      	add	r2, sp, #12
 801af96:	4621      	mov	r1, r4
 801af98:	4640      	mov	r0, r8
 801af9a:	f7ff fee7 	bl	801ad6c <_printf_common>
 801af9e:	3001      	adds	r0, #1
 801afa0:	d14a      	bne.n	801b038 <_printf_i+0x1f0>
 801afa2:	f04f 30ff 	mov.w	r0, #4294967295
 801afa6:	b004      	add	sp, #16
 801afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afac:	6823      	ldr	r3, [r4, #0]
 801afae:	f043 0320 	orr.w	r3, r3, #32
 801afb2:	6023      	str	r3, [r4, #0]
 801afb4:	4832      	ldr	r0, [pc, #200]	@ (801b080 <_printf_i+0x238>)
 801afb6:	2778      	movs	r7, #120	@ 0x78
 801afb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801afbc:	6823      	ldr	r3, [r4, #0]
 801afbe:	6831      	ldr	r1, [r6, #0]
 801afc0:	061f      	lsls	r7, r3, #24
 801afc2:	f851 5b04 	ldr.w	r5, [r1], #4
 801afc6:	d402      	bmi.n	801afce <_printf_i+0x186>
 801afc8:	065f      	lsls	r7, r3, #25
 801afca:	bf48      	it	mi
 801afcc:	b2ad      	uxthmi	r5, r5
 801afce:	6031      	str	r1, [r6, #0]
 801afd0:	07d9      	lsls	r1, r3, #31
 801afd2:	bf44      	itt	mi
 801afd4:	f043 0320 	orrmi.w	r3, r3, #32
 801afd8:	6023      	strmi	r3, [r4, #0]
 801afda:	b11d      	cbz	r5, 801afe4 <_printf_i+0x19c>
 801afdc:	2310      	movs	r3, #16
 801afde:	e7ad      	b.n	801af3c <_printf_i+0xf4>
 801afe0:	4826      	ldr	r0, [pc, #152]	@ (801b07c <_printf_i+0x234>)
 801afe2:	e7e9      	b.n	801afb8 <_printf_i+0x170>
 801afe4:	6823      	ldr	r3, [r4, #0]
 801afe6:	f023 0320 	bic.w	r3, r3, #32
 801afea:	6023      	str	r3, [r4, #0]
 801afec:	e7f6      	b.n	801afdc <_printf_i+0x194>
 801afee:	4616      	mov	r6, r2
 801aff0:	e7bd      	b.n	801af6e <_printf_i+0x126>
 801aff2:	6833      	ldr	r3, [r6, #0]
 801aff4:	6825      	ldr	r5, [r4, #0]
 801aff6:	6961      	ldr	r1, [r4, #20]
 801aff8:	1d18      	adds	r0, r3, #4
 801affa:	6030      	str	r0, [r6, #0]
 801affc:	062e      	lsls	r6, r5, #24
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	d501      	bpl.n	801b006 <_printf_i+0x1be>
 801b002:	6019      	str	r1, [r3, #0]
 801b004:	e002      	b.n	801b00c <_printf_i+0x1c4>
 801b006:	0668      	lsls	r0, r5, #25
 801b008:	d5fb      	bpl.n	801b002 <_printf_i+0x1ba>
 801b00a:	8019      	strh	r1, [r3, #0]
 801b00c:	2300      	movs	r3, #0
 801b00e:	6123      	str	r3, [r4, #16]
 801b010:	4616      	mov	r6, r2
 801b012:	e7bc      	b.n	801af8e <_printf_i+0x146>
 801b014:	6833      	ldr	r3, [r6, #0]
 801b016:	1d1a      	adds	r2, r3, #4
 801b018:	6032      	str	r2, [r6, #0]
 801b01a:	681e      	ldr	r6, [r3, #0]
 801b01c:	6862      	ldr	r2, [r4, #4]
 801b01e:	2100      	movs	r1, #0
 801b020:	4630      	mov	r0, r6
 801b022:	f7e5 f8ed 	bl	8000200 <memchr>
 801b026:	b108      	cbz	r0, 801b02c <_printf_i+0x1e4>
 801b028:	1b80      	subs	r0, r0, r6
 801b02a:	6060      	str	r0, [r4, #4]
 801b02c:	6863      	ldr	r3, [r4, #4]
 801b02e:	6123      	str	r3, [r4, #16]
 801b030:	2300      	movs	r3, #0
 801b032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b036:	e7aa      	b.n	801af8e <_printf_i+0x146>
 801b038:	6923      	ldr	r3, [r4, #16]
 801b03a:	4632      	mov	r2, r6
 801b03c:	4649      	mov	r1, r9
 801b03e:	4640      	mov	r0, r8
 801b040:	47d0      	blx	sl
 801b042:	3001      	adds	r0, #1
 801b044:	d0ad      	beq.n	801afa2 <_printf_i+0x15a>
 801b046:	6823      	ldr	r3, [r4, #0]
 801b048:	079b      	lsls	r3, r3, #30
 801b04a:	d413      	bmi.n	801b074 <_printf_i+0x22c>
 801b04c:	68e0      	ldr	r0, [r4, #12]
 801b04e:	9b03      	ldr	r3, [sp, #12]
 801b050:	4298      	cmp	r0, r3
 801b052:	bfb8      	it	lt
 801b054:	4618      	movlt	r0, r3
 801b056:	e7a6      	b.n	801afa6 <_printf_i+0x15e>
 801b058:	2301      	movs	r3, #1
 801b05a:	4632      	mov	r2, r6
 801b05c:	4649      	mov	r1, r9
 801b05e:	4640      	mov	r0, r8
 801b060:	47d0      	blx	sl
 801b062:	3001      	adds	r0, #1
 801b064:	d09d      	beq.n	801afa2 <_printf_i+0x15a>
 801b066:	3501      	adds	r5, #1
 801b068:	68e3      	ldr	r3, [r4, #12]
 801b06a:	9903      	ldr	r1, [sp, #12]
 801b06c:	1a5b      	subs	r3, r3, r1
 801b06e:	42ab      	cmp	r3, r5
 801b070:	dcf2      	bgt.n	801b058 <_printf_i+0x210>
 801b072:	e7eb      	b.n	801b04c <_printf_i+0x204>
 801b074:	2500      	movs	r5, #0
 801b076:	f104 0619 	add.w	r6, r4, #25
 801b07a:	e7f5      	b.n	801b068 <_printf_i+0x220>
 801b07c:	08023110 	.word	0x08023110
 801b080:	08023121 	.word	0x08023121

0801b084 <__sflush_r>:
 801b084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08c:	0716      	lsls	r6, r2, #28
 801b08e:	4605      	mov	r5, r0
 801b090:	460c      	mov	r4, r1
 801b092:	d454      	bmi.n	801b13e <__sflush_r+0xba>
 801b094:	684b      	ldr	r3, [r1, #4]
 801b096:	2b00      	cmp	r3, #0
 801b098:	dc02      	bgt.n	801b0a0 <__sflush_r+0x1c>
 801b09a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	dd48      	ble.n	801b132 <__sflush_r+0xae>
 801b0a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0a2:	2e00      	cmp	r6, #0
 801b0a4:	d045      	beq.n	801b132 <__sflush_r+0xae>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b0ac:	682f      	ldr	r7, [r5, #0]
 801b0ae:	6a21      	ldr	r1, [r4, #32]
 801b0b0:	602b      	str	r3, [r5, #0]
 801b0b2:	d030      	beq.n	801b116 <__sflush_r+0x92>
 801b0b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b0b6:	89a3      	ldrh	r3, [r4, #12]
 801b0b8:	0759      	lsls	r1, r3, #29
 801b0ba:	d505      	bpl.n	801b0c8 <__sflush_r+0x44>
 801b0bc:	6863      	ldr	r3, [r4, #4]
 801b0be:	1ad2      	subs	r2, r2, r3
 801b0c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b0c2:	b10b      	cbz	r3, 801b0c8 <__sflush_r+0x44>
 801b0c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b0c6:	1ad2      	subs	r2, r2, r3
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0cc:	6a21      	ldr	r1, [r4, #32]
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	47b0      	blx	r6
 801b0d2:	1c43      	adds	r3, r0, #1
 801b0d4:	89a3      	ldrh	r3, [r4, #12]
 801b0d6:	d106      	bne.n	801b0e6 <__sflush_r+0x62>
 801b0d8:	6829      	ldr	r1, [r5, #0]
 801b0da:	291d      	cmp	r1, #29
 801b0dc:	d82b      	bhi.n	801b136 <__sflush_r+0xb2>
 801b0de:	4a2a      	ldr	r2, [pc, #168]	@ (801b188 <__sflush_r+0x104>)
 801b0e0:	40ca      	lsrs	r2, r1
 801b0e2:	07d6      	lsls	r6, r2, #31
 801b0e4:	d527      	bpl.n	801b136 <__sflush_r+0xb2>
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	6062      	str	r2, [r4, #4]
 801b0ea:	04d9      	lsls	r1, r3, #19
 801b0ec:	6922      	ldr	r2, [r4, #16]
 801b0ee:	6022      	str	r2, [r4, #0]
 801b0f0:	d504      	bpl.n	801b0fc <__sflush_r+0x78>
 801b0f2:	1c42      	adds	r2, r0, #1
 801b0f4:	d101      	bne.n	801b0fa <__sflush_r+0x76>
 801b0f6:	682b      	ldr	r3, [r5, #0]
 801b0f8:	b903      	cbnz	r3, 801b0fc <__sflush_r+0x78>
 801b0fa:	6560      	str	r0, [r4, #84]	@ 0x54
 801b0fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b0fe:	602f      	str	r7, [r5, #0]
 801b100:	b1b9      	cbz	r1, 801b132 <__sflush_r+0xae>
 801b102:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b106:	4299      	cmp	r1, r3
 801b108:	d002      	beq.n	801b110 <__sflush_r+0x8c>
 801b10a:	4628      	mov	r0, r5
 801b10c:	f7ff fa94 	bl	801a638 <_free_r>
 801b110:	2300      	movs	r3, #0
 801b112:	6363      	str	r3, [r4, #52]	@ 0x34
 801b114:	e00d      	b.n	801b132 <__sflush_r+0xae>
 801b116:	2301      	movs	r3, #1
 801b118:	4628      	mov	r0, r5
 801b11a:	47b0      	blx	r6
 801b11c:	4602      	mov	r2, r0
 801b11e:	1c50      	adds	r0, r2, #1
 801b120:	d1c9      	bne.n	801b0b6 <__sflush_r+0x32>
 801b122:	682b      	ldr	r3, [r5, #0]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d0c6      	beq.n	801b0b6 <__sflush_r+0x32>
 801b128:	2b1d      	cmp	r3, #29
 801b12a:	d001      	beq.n	801b130 <__sflush_r+0xac>
 801b12c:	2b16      	cmp	r3, #22
 801b12e:	d11e      	bne.n	801b16e <__sflush_r+0xea>
 801b130:	602f      	str	r7, [r5, #0]
 801b132:	2000      	movs	r0, #0
 801b134:	e022      	b.n	801b17c <__sflush_r+0xf8>
 801b136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b13a:	b21b      	sxth	r3, r3
 801b13c:	e01b      	b.n	801b176 <__sflush_r+0xf2>
 801b13e:	690f      	ldr	r7, [r1, #16]
 801b140:	2f00      	cmp	r7, #0
 801b142:	d0f6      	beq.n	801b132 <__sflush_r+0xae>
 801b144:	0793      	lsls	r3, r2, #30
 801b146:	680e      	ldr	r6, [r1, #0]
 801b148:	bf08      	it	eq
 801b14a:	694b      	ldreq	r3, [r1, #20]
 801b14c:	600f      	str	r7, [r1, #0]
 801b14e:	bf18      	it	ne
 801b150:	2300      	movne	r3, #0
 801b152:	eba6 0807 	sub.w	r8, r6, r7
 801b156:	608b      	str	r3, [r1, #8]
 801b158:	f1b8 0f00 	cmp.w	r8, #0
 801b15c:	dde9      	ble.n	801b132 <__sflush_r+0xae>
 801b15e:	6a21      	ldr	r1, [r4, #32]
 801b160:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b162:	4643      	mov	r3, r8
 801b164:	463a      	mov	r2, r7
 801b166:	4628      	mov	r0, r5
 801b168:	47b0      	blx	r6
 801b16a:	2800      	cmp	r0, #0
 801b16c:	dc08      	bgt.n	801b180 <__sflush_r+0xfc>
 801b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b176:	81a3      	strh	r3, [r4, #12]
 801b178:	f04f 30ff 	mov.w	r0, #4294967295
 801b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b180:	4407      	add	r7, r0
 801b182:	eba8 0800 	sub.w	r8, r8, r0
 801b186:	e7e7      	b.n	801b158 <__sflush_r+0xd4>
 801b188:	20400001 	.word	0x20400001

0801b18c <_fflush_r>:
 801b18c:	b538      	push	{r3, r4, r5, lr}
 801b18e:	690b      	ldr	r3, [r1, #16]
 801b190:	4605      	mov	r5, r0
 801b192:	460c      	mov	r4, r1
 801b194:	b913      	cbnz	r3, 801b19c <_fflush_r+0x10>
 801b196:	2500      	movs	r5, #0
 801b198:	4628      	mov	r0, r5
 801b19a:	bd38      	pop	{r3, r4, r5, pc}
 801b19c:	b118      	cbz	r0, 801b1a6 <_fflush_r+0x1a>
 801b19e:	6a03      	ldr	r3, [r0, #32]
 801b1a0:	b90b      	cbnz	r3, 801b1a6 <_fflush_r+0x1a>
 801b1a2:	f7fe ff81 	bl	801a0a8 <__sinit>
 801b1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d0f3      	beq.n	801b196 <_fflush_r+0xa>
 801b1ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b1b0:	07d0      	lsls	r0, r2, #31
 801b1b2:	d404      	bmi.n	801b1be <_fflush_r+0x32>
 801b1b4:	0599      	lsls	r1, r3, #22
 801b1b6:	d402      	bmi.n	801b1be <_fflush_r+0x32>
 801b1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1ba:	f7ff fa0e 	bl	801a5da <__retarget_lock_acquire_recursive>
 801b1be:	4628      	mov	r0, r5
 801b1c0:	4621      	mov	r1, r4
 801b1c2:	f7ff ff5f 	bl	801b084 <__sflush_r>
 801b1c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1c8:	07da      	lsls	r2, r3, #31
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	d4e4      	bmi.n	801b198 <_fflush_r+0xc>
 801b1ce:	89a3      	ldrh	r3, [r4, #12]
 801b1d0:	059b      	lsls	r3, r3, #22
 801b1d2:	d4e1      	bmi.n	801b198 <_fflush_r+0xc>
 801b1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1d6:	f7ff fa01 	bl	801a5dc <__retarget_lock_release_recursive>
 801b1da:	e7dd      	b.n	801b198 <_fflush_r+0xc>

0801b1dc <fiprintf>:
 801b1dc:	b40e      	push	{r1, r2, r3}
 801b1de:	b503      	push	{r0, r1, lr}
 801b1e0:	4601      	mov	r1, r0
 801b1e2:	ab03      	add	r3, sp, #12
 801b1e4:	4805      	ldr	r0, [pc, #20]	@ (801b1fc <fiprintf+0x20>)
 801b1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1ea:	6800      	ldr	r0, [r0, #0]
 801b1ec:	9301      	str	r3, [sp, #4]
 801b1ee:	f7ff fca5 	bl	801ab3c <_vfiprintf_r>
 801b1f2:	b002      	add	sp, #8
 801b1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1f8:	b003      	add	sp, #12
 801b1fa:	4770      	bx	lr
 801b1fc:	20000038 	.word	0x20000038

0801b200 <__swhatbuf_r>:
 801b200:	b570      	push	{r4, r5, r6, lr}
 801b202:	460c      	mov	r4, r1
 801b204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b208:	2900      	cmp	r1, #0
 801b20a:	b096      	sub	sp, #88	@ 0x58
 801b20c:	4615      	mov	r5, r2
 801b20e:	461e      	mov	r6, r3
 801b210:	da0d      	bge.n	801b22e <__swhatbuf_r+0x2e>
 801b212:	89a3      	ldrh	r3, [r4, #12]
 801b214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b218:	f04f 0100 	mov.w	r1, #0
 801b21c:	bf14      	ite	ne
 801b21e:	2340      	movne	r3, #64	@ 0x40
 801b220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b224:	2000      	movs	r0, #0
 801b226:	6031      	str	r1, [r6, #0]
 801b228:	602b      	str	r3, [r5, #0]
 801b22a:	b016      	add	sp, #88	@ 0x58
 801b22c:	bd70      	pop	{r4, r5, r6, pc}
 801b22e:	466a      	mov	r2, sp
 801b230:	f000 f848 	bl	801b2c4 <_fstat_r>
 801b234:	2800      	cmp	r0, #0
 801b236:	dbec      	blt.n	801b212 <__swhatbuf_r+0x12>
 801b238:	9901      	ldr	r1, [sp, #4]
 801b23a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b23e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b242:	4259      	negs	r1, r3
 801b244:	4159      	adcs	r1, r3
 801b246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b24a:	e7eb      	b.n	801b224 <__swhatbuf_r+0x24>

0801b24c <__smakebuf_r>:
 801b24c:	898b      	ldrh	r3, [r1, #12]
 801b24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b250:	079d      	lsls	r5, r3, #30
 801b252:	4606      	mov	r6, r0
 801b254:	460c      	mov	r4, r1
 801b256:	d507      	bpl.n	801b268 <__smakebuf_r+0x1c>
 801b258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b25c:	6023      	str	r3, [r4, #0]
 801b25e:	6123      	str	r3, [r4, #16]
 801b260:	2301      	movs	r3, #1
 801b262:	6163      	str	r3, [r4, #20]
 801b264:	b003      	add	sp, #12
 801b266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b268:	ab01      	add	r3, sp, #4
 801b26a:	466a      	mov	r2, sp
 801b26c:	f7ff ffc8 	bl	801b200 <__swhatbuf_r>
 801b270:	9f00      	ldr	r7, [sp, #0]
 801b272:	4605      	mov	r5, r0
 801b274:	4639      	mov	r1, r7
 801b276:	4630      	mov	r0, r6
 801b278:	f7ff fa52 	bl	801a720 <_malloc_r>
 801b27c:	b948      	cbnz	r0, 801b292 <__smakebuf_r+0x46>
 801b27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b282:	059a      	lsls	r2, r3, #22
 801b284:	d4ee      	bmi.n	801b264 <__smakebuf_r+0x18>
 801b286:	f023 0303 	bic.w	r3, r3, #3
 801b28a:	f043 0302 	orr.w	r3, r3, #2
 801b28e:	81a3      	strh	r3, [r4, #12]
 801b290:	e7e2      	b.n	801b258 <__smakebuf_r+0xc>
 801b292:	89a3      	ldrh	r3, [r4, #12]
 801b294:	6020      	str	r0, [r4, #0]
 801b296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b29a:	81a3      	strh	r3, [r4, #12]
 801b29c:	9b01      	ldr	r3, [sp, #4]
 801b29e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b2a2:	b15b      	cbz	r3, 801b2bc <__smakebuf_r+0x70>
 801b2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2a8:	4630      	mov	r0, r6
 801b2aa:	f000 f81d 	bl	801b2e8 <_isatty_r>
 801b2ae:	b128      	cbz	r0, 801b2bc <__smakebuf_r+0x70>
 801b2b0:	89a3      	ldrh	r3, [r4, #12]
 801b2b2:	f023 0303 	bic.w	r3, r3, #3
 801b2b6:	f043 0301 	orr.w	r3, r3, #1
 801b2ba:	81a3      	strh	r3, [r4, #12]
 801b2bc:	89a3      	ldrh	r3, [r4, #12]
 801b2be:	431d      	orrs	r5, r3
 801b2c0:	81a5      	strh	r5, [r4, #12]
 801b2c2:	e7cf      	b.n	801b264 <__smakebuf_r+0x18>

0801b2c4 <_fstat_r>:
 801b2c4:	b538      	push	{r3, r4, r5, lr}
 801b2c6:	4d07      	ldr	r5, [pc, #28]	@ (801b2e4 <_fstat_r+0x20>)
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	4604      	mov	r4, r0
 801b2cc:	4608      	mov	r0, r1
 801b2ce:	4611      	mov	r1, r2
 801b2d0:	602b      	str	r3, [r5, #0]
 801b2d2:	f7e6 fe85 	bl	8001fe0 <_fstat>
 801b2d6:	1c43      	adds	r3, r0, #1
 801b2d8:	d102      	bne.n	801b2e0 <_fstat_r+0x1c>
 801b2da:	682b      	ldr	r3, [r5, #0]
 801b2dc:	b103      	cbz	r3, 801b2e0 <_fstat_r+0x1c>
 801b2de:	6023      	str	r3, [r4, #0]
 801b2e0:	bd38      	pop	{r3, r4, r5, pc}
 801b2e2:	bf00      	nop
 801b2e4:	20017800 	.word	0x20017800

0801b2e8 <_isatty_r>:
 801b2e8:	b538      	push	{r3, r4, r5, lr}
 801b2ea:	4d06      	ldr	r5, [pc, #24]	@ (801b304 <_isatty_r+0x1c>)
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	4604      	mov	r4, r0
 801b2f0:	4608      	mov	r0, r1
 801b2f2:	602b      	str	r3, [r5, #0]
 801b2f4:	f7e6 fe84 	bl	8002000 <_isatty>
 801b2f8:	1c43      	adds	r3, r0, #1
 801b2fa:	d102      	bne.n	801b302 <_isatty_r+0x1a>
 801b2fc:	682b      	ldr	r3, [r5, #0]
 801b2fe:	b103      	cbz	r3, 801b302 <_isatty_r+0x1a>
 801b300:	6023      	str	r3, [r4, #0]
 801b302:	bd38      	pop	{r3, r4, r5, pc}
 801b304:	20017800 	.word	0x20017800

0801b308 <_sbrk_r>:
 801b308:	b538      	push	{r3, r4, r5, lr}
 801b30a:	4d06      	ldr	r5, [pc, #24]	@ (801b324 <_sbrk_r+0x1c>)
 801b30c:	2300      	movs	r3, #0
 801b30e:	4604      	mov	r4, r0
 801b310:	4608      	mov	r0, r1
 801b312:	602b      	str	r3, [r5, #0]
 801b314:	f7e6 fe8c 	bl	8002030 <_sbrk>
 801b318:	1c43      	adds	r3, r0, #1
 801b31a:	d102      	bne.n	801b322 <_sbrk_r+0x1a>
 801b31c:	682b      	ldr	r3, [r5, #0]
 801b31e:	b103      	cbz	r3, 801b322 <_sbrk_r+0x1a>
 801b320:	6023      	str	r3, [r4, #0]
 801b322:	bd38      	pop	{r3, r4, r5, pc}
 801b324:	20017800 	.word	0x20017800

0801b328 <abort>:
 801b328:	b508      	push	{r3, lr}
 801b32a:	2006      	movs	r0, #6
 801b32c:	f000 f85a 	bl	801b3e4 <raise>
 801b330:	2001      	movs	r0, #1
 801b332:	f7e6 fe05 	bl	8001f40 <_exit>

0801b336 <_realloc_r>:
 801b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b33a:	4607      	mov	r7, r0
 801b33c:	4614      	mov	r4, r2
 801b33e:	460d      	mov	r5, r1
 801b340:	b921      	cbnz	r1, 801b34c <_realloc_r+0x16>
 801b342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b346:	4611      	mov	r1, r2
 801b348:	f7ff b9ea 	b.w	801a720 <_malloc_r>
 801b34c:	b92a      	cbnz	r2, 801b35a <_realloc_r+0x24>
 801b34e:	f7ff f973 	bl	801a638 <_free_r>
 801b352:	4625      	mov	r5, r4
 801b354:	4628      	mov	r0, r5
 801b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b35a:	f000 f85f 	bl	801b41c <_malloc_usable_size_r>
 801b35e:	4284      	cmp	r4, r0
 801b360:	4606      	mov	r6, r0
 801b362:	d802      	bhi.n	801b36a <_realloc_r+0x34>
 801b364:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b368:	d8f4      	bhi.n	801b354 <_realloc_r+0x1e>
 801b36a:	4621      	mov	r1, r4
 801b36c:	4638      	mov	r0, r7
 801b36e:	f7ff f9d7 	bl	801a720 <_malloc_r>
 801b372:	4680      	mov	r8, r0
 801b374:	b908      	cbnz	r0, 801b37a <_realloc_r+0x44>
 801b376:	4645      	mov	r5, r8
 801b378:	e7ec      	b.n	801b354 <_realloc_r+0x1e>
 801b37a:	42b4      	cmp	r4, r6
 801b37c:	4622      	mov	r2, r4
 801b37e:	4629      	mov	r1, r5
 801b380:	bf28      	it	cs
 801b382:	4632      	movcs	r2, r6
 801b384:	f7ff f92b 	bl	801a5de <memcpy>
 801b388:	4629      	mov	r1, r5
 801b38a:	4638      	mov	r0, r7
 801b38c:	f7ff f954 	bl	801a638 <_free_r>
 801b390:	e7f1      	b.n	801b376 <_realloc_r+0x40>

0801b392 <_raise_r>:
 801b392:	291f      	cmp	r1, #31
 801b394:	b538      	push	{r3, r4, r5, lr}
 801b396:	4605      	mov	r5, r0
 801b398:	460c      	mov	r4, r1
 801b39a:	d904      	bls.n	801b3a6 <_raise_r+0x14>
 801b39c:	2316      	movs	r3, #22
 801b39e:	6003      	str	r3, [r0, #0]
 801b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3a4:	bd38      	pop	{r3, r4, r5, pc}
 801b3a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b3a8:	b112      	cbz	r2, 801b3b0 <_raise_r+0x1e>
 801b3aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3ae:	b94b      	cbnz	r3, 801b3c4 <_raise_r+0x32>
 801b3b0:	4628      	mov	r0, r5
 801b3b2:	f000 f831 	bl	801b418 <_getpid_r>
 801b3b6:	4622      	mov	r2, r4
 801b3b8:	4601      	mov	r1, r0
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3c0:	f000 b818 	b.w	801b3f4 <_kill_r>
 801b3c4:	2b01      	cmp	r3, #1
 801b3c6:	d00a      	beq.n	801b3de <_raise_r+0x4c>
 801b3c8:	1c59      	adds	r1, r3, #1
 801b3ca:	d103      	bne.n	801b3d4 <_raise_r+0x42>
 801b3cc:	2316      	movs	r3, #22
 801b3ce:	6003      	str	r3, [r0, #0]
 801b3d0:	2001      	movs	r0, #1
 801b3d2:	e7e7      	b.n	801b3a4 <_raise_r+0x12>
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b3da:	4620      	mov	r0, r4
 801b3dc:	4798      	blx	r3
 801b3de:	2000      	movs	r0, #0
 801b3e0:	e7e0      	b.n	801b3a4 <_raise_r+0x12>
	...

0801b3e4 <raise>:
 801b3e4:	4b02      	ldr	r3, [pc, #8]	@ (801b3f0 <raise+0xc>)
 801b3e6:	4601      	mov	r1, r0
 801b3e8:	6818      	ldr	r0, [r3, #0]
 801b3ea:	f7ff bfd2 	b.w	801b392 <_raise_r>
 801b3ee:	bf00      	nop
 801b3f0:	20000038 	.word	0x20000038

0801b3f4 <_kill_r>:
 801b3f4:	b538      	push	{r3, r4, r5, lr}
 801b3f6:	4d07      	ldr	r5, [pc, #28]	@ (801b414 <_kill_r+0x20>)
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	4604      	mov	r4, r0
 801b3fc:	4608      	mov	r0, r1
 801b3fe:	4611      	mov	r1, r2
 801b400:	602b      	str	r3, [r5, #0]
 801b402:	f7e6 fd8b 	bl	8001f1c <_kill>
 801b406:	1c43      	adds	r3, r0, #1
 801b408:	d102      	bne.n	801b410 <_kill_r+0x1c>
 801b40a:	682b      	ldr	r3, [r5, #0]
 801b40c:	b103      	cbz	r3, 801b410 <_kill_r+0x1c>
 801b40e:	6023      	str	r3, [r4, #0]
 801b410:	bd38      	pop	{r3, r4, r5, pc}
 801b412:	bf00      	nop
 801b414:	20017800 	.word	0x20017800

0801b418 <_getpid_r>:
 801b418:	f7e6 bd78 	b.w	8001f0c <_getpid>

0801b41c <_malloc_usable_size_r>:
 801b41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b420:	1f18      	subs	r0, r3, #4
 801b422:	2b00      	cmp	r3, #0
 801b424:	bfbc      	itt	lt
 801b426:	580b      	ldrlt	r3, [r1, r0]
 801b428:	18c0      	addlt	r0, r0, r3
 801b42a:	4770      	bx	lr

0801b42c <_init>:
 801b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b42e:	bf00      	nop
 801b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b432:	bc08      	pop	{r3}
 801b434:	469e      	mov	lr, r3
 801b436:	4770      	bx	lr

0801b438 <_fini>:
 801b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b43a:	bf00      	nop
 801b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b43e:	bc08      	pop	{r3}
 801b440:	469e      	mov	lr, r3
 801b442:	4770      	bx	lr
