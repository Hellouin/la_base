
basile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001972c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d018  080198bc  080198bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080268d4  080268d4  00028080  2**0
                  CONTENTS
  4 .ARM          00000008  080268d4  080268d4  000278d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080268dc  080268dc  00028080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080268dc  080268dc  000278dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080268e0  080268e0  000278e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080268e4  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015a28  20000080  08026964  00028080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015aa8  08026964  00028aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032057  00000000  00000000  000280b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000865c  00000000  00000000  0005a107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  00062768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f36  00000000  00000000  00064f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036812  00000000  00000000  00066e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039875  00000000  00000000  0009d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001148e3  00000000  00000000  000d6ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eb7b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad30  00000000  00000000  001eb7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001f6524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080198a4 	.word	0x080198a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080198a4 	.word	0x080198a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SPIx_TxRx>:
#define SPIx_DS   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

extern SPI_HandleTypeDef hspi2;

static uint8_t SPIx_TxRx(uint8_t cmd)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800059a:	2017      	movs	r0, #23
 800059c:	f001 fda8 	bl	80020f0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80005a0:	2028      	movs	r0, #40	@ 0x28
 80005a2:	f001 fda5 	bl	80020f0 <HAL_NVIC_DisableIRQ>

	HAL_SPI_TransmitReceive(&hspi2, &cmd, &cmd, 1, SPIx_TIMEOUT);
 80005a6:	1dfa      	adds	r2, r7, #7
 80005a8:	1df9      	adds	r1, r7, #7
 80005aa:	230a      	movs	r3, #10
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	4806      	ldr	r0, [pc, #24]	@ (80005cc <SPIx_TxRx+0x3c>)
 80005b2:	f003 fe42 	bl	800423a <HAL_SPI_TransmitReceive>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005b6:	2017      	movs	r0, #23
 80005b8:	f001 fd8c 	bl	80020d4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005bc:	2028      	movs	r0, #40	@ 0x28
 80005be:	f001 fd89 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  return cmd;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000504 	.word	0x20000504

080005d0 <SPIx_TxBuf>:

static void SPIx_TxBuf(uint8_t *m2s, uint8_t *s2m, uint16_t bufflen)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80005de:	2017      	movs	r0, #23
 80005e0:	f001 fd86 	bl	80020f0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80005e4:	2028      	movs	r0, #40	@ 0x28
 80005e6:	f001 fd83 	bl	80020f0 <HAL_NVIC_DisableIRQ>

  SPIx_CS;
 80005ea:	2200      	movs	r2, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	4818      	ldr	r0, [pc, #96]	@ (8000650 <SPIx_TxBuf+0x80>)
 80005f0:	f001 ff36 	bl	8002460 <HAL_GPIO_WritePin>

  if((s2m == NULL) && (m2s != NULL))
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d109      	bne.n	800060e <SPIx_TxBuf+0x3e>
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <SPIx_TxBuf+0x3e>
  {
    HAL_SPI_Transmit(&hspi2, m2s, bufflen, SPIx_TIMEOUT);
 8000600:	88fa      	ldrh	r2, [r7, #6]
 8000602:	230a      	movs	r3, #10
 8000604:	68f9      	ldr	r1, [r7, #12]
 8000606:	4813      	ldr	r0, [pc, #76]	@ (8000654 <SPIx_TxBuf+0x84>)
 8000608:	f003 fb69 	bl	8003cde <HAL_SPI_Transmit>
 800060c:	e011      	b.n	8000632 <SPIx_TxBuf+0x62>
  }
  else if(m2s == NULL)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d106      	bne.n	8000622 <SPIx_TxBuf+0x52>
  {
    HAL_SPI_Receive(&hspi2, s2m, bufflen, SPIx_TIMEOUT);
 8000614:	88fa      	ldrh	r2, [r7, #6]
 8000616:	230a      	movs	r3, #10
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <SPIx_TxBuf+0x84>)
 800061c:	f003 fcd5 	bl	8003fca <HAL_SPI_Receive>
 8000620:	e007      	b.n	8000632 <SPIx_TxBuf+0x62>
  }
  else
  {
    HAL_SPI_TransmitReceive(&hspi2, m2s, s2m, bufflen, SPIx_TIMEOUT);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	220a      	movs	r2, #10
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	68f9      	ldr	r1, [r7, #12]
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <SPIx_TxBuf+0x84>)
 800062e:	f003 fe04 	bl	800423a <HAL_SPI_TransmitReceive>
  }

  SPIx_DS;
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <SPIx_TxBuf+0x80>)
 8000638:	f001 ff12 	bl	8002460 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800063c:	2017      	movs	r0, #23
 800063e:	f001 fd49 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000642:	2028      	movs	r0, #40	@ 0x28
 8000644:	f001 fd46 	bl	80020d4 <HAL_NVIC_EnableIRQ>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	48000400 	.word	0x48000400
 8000654:	20000504 	.word	0x20000504

08000658 <init_udelay>:

/* Initialize STM32 watchdog timer */
static void init_udelay(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <init_udelay+0x4c>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <init_udelay+0x4c>)
 8000662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000666:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <init_udelay+0x4c>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <init_udelay+0x4c>)
 800066e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000672:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <init_udelay+0x50>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0b      	ldr	r2, [pc, #44]	@ (80006a8 <init_udelay+0x50>)
 800067a:	f023 0301 	bic.w	r3, r3, #1
 800067e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <init_udelay+0x50>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <init_udelay+0x50>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <init_udelay+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000692:	bf00      	nop
  __ASM volatile ("NOP");
 8000694:	bf00      	nop
  __ASM volatile ("NOP");
 8000696:	bf00      	nop

}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000edf0 	.word	0xe000edf0
 80006a8:	e0001000 	.word	0xe0001000

080006ac <udelay>:

/* Software delay in us */
void udelay(uint32_t us)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <udelay+0x44>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <udelay+0x48>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9a      	lsrs	r2, r3, #18
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <udelay+0x4c>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <udelay+0x4c>)
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f6      	bhi.n	80006ce <udelay+0x22>

}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000
 80006f4:	431bde83 	.word	0x431bde83
 80006f8:	e0001000 	.word	0xe0001000

080006fc <enc_reset>:
static void enc_rdbuffer(void *buffer, int16_t buflen);
static void enc_linkstatus(ENC_HandleTypeDef *handle);

/* Send the single byte system reset command (SRC). */
void enc_reset(ENC_HandleTypeDef *handle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Send the system reset command. */

  SPIx_CS;
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	480a      	ldr	r0, [pc, #40]	@ (8000734 <enc_reset+0x38>)
 800070a:	f001 fea9 	bl	8002460 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_SRC);
 800070e:	20ff      	movs	r0, #255	@ 0xff
 8000710:	f7ff ff3e 	bl	8000590 <SPIx_TxRx>
  SPIx_DS;
 8000714:	2201      	movs	r2, #1
 8000716:	2101      	movs	r1, #1
 8000718:	4806      	ldr	r0, [pc, #24]	@ (8000734 <enc_reset+0x38>)
 800071a:	f001 fea1 	bl	8002460 <HAL_GPIO_WritePin>

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	741a      	strb	r2, [r3, #16]
  udelay(2);
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff ffc1 	bl	80006ac <udelay>
  //HAL_Delay(2); /* >1000 us, conforms to errata #2 */
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <enc_start>:

/* Initialize the enc28j60 and configure the needed hardware resources */
bool enc_start(ENC_HandleTypeDef *handle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint8_t regval;

  /* Initialize watchdog timer */
  init_udelay();
 8000740:	f7ff ff8a 	bl	8000658 <init_udelay>

  /* System reset */
  enc_reset(handle);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ffd9 	bl	80006fc <enc_reset>

  /* Use bank 0 */
  enc_setbank(handle, 0);
 800074a:	2100      	movs	r1, #0
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 fab8 	bl	8000cc2 <enc_setbank>

  /* Check if we are actually communicating with the ENC28J60. */
  regval = enc_rdbreg(handle, ENC_EREVID);
 8000752:	2172      	movs	r1, #114	@ 0x72
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fb63 	bl	8000e20 <enc_rdbreg>
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
  if(regval == 0x00 || regval == 0xff)
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <enc_start+0x32>
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2bff      	cmp	r3, #255	@ 0xff
 8000768:	d101      	bne.n	800076e <enc_start+0x36>
  {
    return false;
 800076a:	2300      	movs	r3, #0
 800076c:	e0cc      	b.n	8000908 <enc_start+0x1d0>
  }

  /* Initialize ECON2: Enable address auto increment. */
  enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 800076e:	2180      	movs	r1, #128	@ 0x80
 8000770:	205e      	movs	r0, #94	@ 0x5e
 8000772:	f000 fad8 	bl	8000d26 <enc_wrgreg2>

  /* Initialize receive buffer. */
  handle->nextpkt = PKTMEM_RX_START;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	829a      	strh	r2, [r3, #20]
  enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fb7b 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8000786:	2200      	movs	r2, #0
 8000788:	2109      	movs	r1, #9
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 fb76 	bl	8000e7c <enc_wrbreg>

  /* Set the receive data pointer */
  /* Errata 14 */
  enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8000790:	22ff      	movs	r2, #255	@ 0xff
 8000792:	210c      	movs	r1, #12
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fb71 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 800079a:	2219      	movs	r2, #25
 800079c:	210d      	movs	r1, #13
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 fb6c 	bl	8000e7c <enc_wrbreg>

  /* Set the receive buffer end. */
  enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 80007a4:	22ff      	movs	r2, #255	@ 0xff
 80007a6:	210a      	movs	r1, #10
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fb67 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 80007ae:	2219      	movs	r2, #25
 80007b0:	210b      	movs	r1, #11
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 fb62 	bl	8000e7c <enc_wrbreg>

  /* Set transmit buffer start. */
  handle->transmitLength = 0;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	831a      	strh	r2, [r3, #24]
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 80007be:	2200      	movs	r2, #0
 80007c0:	2104      	movs	r1, #4
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fb5a 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 80007c8:	221a      	movs	r2, #26
 80007ca:	2105      	movs	r1, #5
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fb55 	bl	8000e7c <enc_wrbreg>

  /* Set filter mode: unicast OR broadcast AND crc valid */
  enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 80007d2:	22a1      	movs	r2, #161	@ 0xa1
 80007d4:	2138      	movs	r1, #56	@ 0x38
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 fb50 	bl	8000e7c <enc_wrbreg>

  do
  {
	udelay(10); //HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 80007dc:	200a      	movs	r0, #10
 80007de:	f7ff ff65 	bl	80006ac <udelay>
    regval = enc_rdbreg(handle, ENC_ESTAT);
 80007e2:	211d      	movs	r1, #29
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 fb1b 	bl	8000e20 <enc_rdbreg>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
  }while((regval & ESTAT_CLKRDY) == 0);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f1      	beq.n	80007dc <enc_start+0xa4>

  /* Enable MAC receive */
  enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 80007f8:	220d      	movs	r2, #13
 80007fa:	21c0      	movs	r1, #192	@ 0xc0
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 fb3d 	bl	8000e7c <enc_wrbreg>

  /* Enable automatic padding and CRC operations */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d120      	bne.n	800084c <enc_start+0x114>
  {
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <enc_start+0xde>
 8000812:	2332      	movs	r3, #50	@ 0x32
 8000814:	e000      	b.n	8000818 <enc_start+0xe0>
 8000816:	2302      	movs	r3, #2
 8000818:	461a      	mov	r2, r3
 800081a:	21c2      	movs	r1, #194	@ 0xc2
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 fb2d 	bl	8000e7c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER); /* Defer transmission enable */
 8000822:	2240      	movs	r2, #64	@ 0x40
 8000824:	21c3      	movs	r1, #195	@ 0xc3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 fb28 	bl	8000e7c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 800082c:	2212      	movs	r2, #18
 800082e:	21c6      	movs	r1, #198	@ 0xc6
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 fb23 	bl	8000e7c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 8000836:	220c      	movs	r2, #12
 8000838:	21c7      	movs	r1, #199	@ 0xc7
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 fb1e 	bl	8000e7c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 8000840:	2212      	movs	r2, #18
 8000842:	21c4      	movs	r1, #196	@ 0xc4
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 fb19 	bl	8000e7c <enc_wrbreg>
 800084a:	e015      	b.n	8000878 <enc_start+0x140>
  }
  else
  {
    /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN | MACON3_FULDPX);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <enc_start+0x120>
 8000854:	2333      	movs	r3, #51	@ 0x33
 8000856:	e000      	b.n	800085a <enc_start+0x122>
 8000858:	2303      	movs	r3, #3
 800085a:	461a      	mov	r2, r3
 800085c:	21c2      	movs	r1, #194	@ 0xc2
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 fb0c 	bl	8000e7c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000864:	2212      	movs	r2, #18
 8000866:	21c6      	movs	r1, #198	@ 0xc6
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 fb07 	bl	8000e7c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 800086e:	2215      	movs	r2, #21
 8000870:	21c4      	movs	r1, #196	@ 0xc4
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 fb02 	bl	8000e7c <enc_wrbreg>
  }

  /* Set the maximum packet size which the controller will accept */
  enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU + 18) & 0xff);
 8000878:	22ee      	movs	r2, #238	@ 0xee
 800087a:	21ca      	movs	r1, #202	@ 0xca
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 fafd 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU + 18) >> 8);
 8000882:	2205      	movs	r2, #5
 8000884:	21cb      	movs	r1, #203	@ 0xcb
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 faf8 	bl	8000e7c <enc_wrbreg>

  /* Setup up PHCON1 & 2 */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10b      	bne.n	80008ac <enc_start+0x174>
  {
    enc_wrphy(handle, ENC_PHCON1, 0x00);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 fb88 	bl	8000fae <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 800089e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008a2:	2110      	movs	r1, #16
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 fb82 	bl	8000fae <enc_wrphy>
 80008aa:	e00a      	b.n	80008c2 <enc_start+0x18a>
  }
  else
  {
    enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 80008ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b0:	2100      	movs	r1, #0
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 fb7b 	bl	8000fae <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, 0x00);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 fb76 	bl	8000fae <enc_wrphy>
  }

  /* Process interrupt settings */
  if(handle->Init.InterruptEnableBits & EIE_LINKIE)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7b1b      	ldrb	r3, [r3, #12]
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <enc_start+0x1a0>
  {
    /* Enable link change interrupt in PHY module */
    enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 80008ce:	2212      	movs	r2, #18
 80008d0:	2112      	movs	r1, #18
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fb6b 	bl	8000fae <enc_wrphy>
  }

  /* Reset all interrupt flags */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 80008d8:	213b      	movs	r1, #59	@ 0x3b
 80008da:	20bc      	movs	r0, #188	@ 0xbc
 80008dc:	f000 fa23 	bl	8000d26 <enc_wrgreg2>

  regval = handle->Init.InterruptEnableBits;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7b1b      	ldrb	r3, [r3, #12]
 80008e4:	73fb      	strb	r3, [r7, #15]
  if(regval)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <enc_start+0x1bc>
  {
    /* Ensure INTIE is set when at least an interruption is selected */
    regval |= EIE_INTIE;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f2:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable selected interrupts in ethernet controller module */
  enc_bfsgreg(ENC_EIE, regval);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4619      	mov	r1, r3
 80008f8:	209b      	movs	r0, #155	@ 0x9b
 80008fa:	f000 fa14 	bl	8000d26 <enc_wrgreg2>

  /* Enable the receiver */
  enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 80008fe:	2104      	movs	r1, #4
 8000900:	209f      	movs	r0, #159	@ 0x9f
 8000902:	f000 fa10 	bl	8000d26 <enc_wrgreg2>

  return true;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <enc_set_MAC>:

/* Set the MAC address to the configured value. */
void enc_set_MAC(ENC_HandleTypeDef *handle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	21e4      	movs	r1, #228	@ 0xe4
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 faaa 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	3301      	adds	r3, #1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	21e5      	movs	r1, #229	@ 0xe5
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 faa1 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	3302      	adds	r3, #2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	21e2      	movs	r1, #226	@ 0xe2
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 fa98 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	3303      	adds	r3, #3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	21e3      	movs	r1, #227	@ 0xe3
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 fa8f 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	3304      	adds	r3, #4
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	21e0      	movs	r1, #224	@ 0xe0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 fa86 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	3305      	adds	r3, #5
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	21e1      	movs	r1, #225	@ 0xe1
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 fa7d 	bl	8000e7c <enc_wrbreg>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <enc_prepare_txbuffer>:

/* Prepare TX buffer */
int8_t enc_prepare_txbuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if(!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0))
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	201f      	movs	r0, #31
 800099c:	f000 f9da 	bl	8000d54 <enc_waitgreg>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f083 0301 	eor.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <enc_prepare_txbuffer+0x28>
  {
    return ERR_TIMEOUT;
 80009ac:	f06f 0302 	mvn.w	r3, #2
 80009b0:	e03c      	b.n	8000a2c <enc_prepare_txbuffer+0xa2>
  }

  /* Set transmit buffer start (is this necessary?). */
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2104      	movs	r1, #4
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 fa60 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 80009bc:	221a      	movs	r2, #26
 80009be:	2105      	movs	r1, #5
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fa5b 	bl	8000e7c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */
  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 fa56 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 80009d0:	221a      	movs	r2, #26
 80009d2:	2103      	movs	r1, #3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 fa51 	bl	8000e7c <enc_wrbreg>

  txend = PKTMEM_TX_START + len;
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 80009e0:	81fb      	strh	r3, [r7, #14]

  if(txend + 8 > PKTMEM_TX_ENDP1)
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d902      	bls.n	80009f2 <enc_prepare_txbuffer+0x68>
  {
    return ERR_MEM;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	e01c      	b.n	8000a2c <enc_prepare_txbuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	2106      	movs	r1, #6
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 fa3e 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fa35 	bl	8000e7c <enc_wrbreg>

  control_write[0] = ENC_WBM;
 8000a12:	237a      	movs	r3, #122	@ 0x7a
 8000a14:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 8000a16:	230e      	movs	r3, #14
 8000a18:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(control_write, control_write, 2);
 8000a1a:	f107 010c 	add.w	r1, r7, #12
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2202      	movs	r2, #2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fdd3 	bl	80005d0 <SPIx_TxBuf>

  return ERR_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <enc_wrbuffer>:

/* Write a buffer of data. */
void enc_wrbuffer(void *buffer, uint16_t buflen)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <enc_wrbuffer+0x30>)
 8000a46:	f001 fd0b 	bl	8002460 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_WBM);
 8000a4a:	207a      	movs	r0, #122	@ 0x7a
 8000a4c:	f7ff fda0 	bl	8000590 <SPIx_TxRx>
  SPIx_TxBuf(buffer, NULL, buflen);
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	461a      	mov	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fdba 	bl	80005d0 <SPIx_TxBuf>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000400 	.word	0x48000400

08000a68 <enc_transmit>:

/* Start hardware transmission. */
void enc_transmit(ENC_HandleTypeDef *handle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(handle->transmitLength != 0)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	8b1b      	ldrh	r3, [r3, #24]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d053      	beq.n	8000b20 <enc_transmit+0xb8>
  {
    handle->retries = 16;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    do
    {
      enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	209f      	movs	r0, #159	@ 0x9f
 8000a82:	f000 f950 	bl	8000d26 <enc_wrgreg2>
      enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	20bf      	movs	r0, #191	@ 0xbf
 8000a8a:	f000 f94c 	bl	8000d26 <enc_wrgreg2>
      enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000a8e:	210a      	movs	r1, #10
 8000a90:	20bc      	movs	r0, #188	@ 0xbc
 8000a92:	f000 f948 	bl	8000d26 <enc_wrgreg2>

      /* Start transmission */
      enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000a96:	2108      	movs	r1, #8
 8000a98:	209f      	movs	r0, #159	@ 0x9f
 8000a9a:	f000 f944 	bl	8000d26 <enc_wrgreg2>

      /* Wait for end of transmission */
      enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210a      	movs	r1, #10
 8000aa2:	201c      	movs	r0, #28
 8000aa4:	f000 f989 	bl	8000dba <enc_waitwhilegreg>

      /* Stop transmission */
      enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	20bf      	movs	r0, #191	@ 0xbf
 8000aac:	f000 f93b 	bl	8000d26 <enc_wrgreg2>
      {
        uint16_t addtTsv4;
        uint8_t tsv4, regval;

        /* read tsv */
        addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	8b1b      	ldrh	r3, [r3, #24]
 8000ab4:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000ab8:	3304      	adds	r3, #4
 8000aba:	81fb      	strh	r3, [r7, #14]

        enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f9d9 	bl	8000e7c <enc_wrbreg>
        enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 f9d0 	bl	8000e7c <enc_wrbreg>

        enc_rdbuffer(&tsv4, 1);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa8e 	bl	8001004 <enc_rdbuffer>
        regval = enc_rdgreg(ENC_EIR);
 8000ae8:	201c      	movs	r0, #28
 8000aea:	f000 f908 	bl	8000cfe <enc_rdgreg2>
 8000aee:	4603      	mov	r3, r0
 8000af0:	737b      	strb	r3, [r7, #13]
        if(!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL))
 8000af2:	7b7b      	ldrb	r3, [r7, #13]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00e      	beq.n	8000b1a <enc_transmit+0xb2>
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d009      	beq.n	8000b1a <enc_transmit+0xb2>
        {
          break;
        }
      }
      handle->retries--;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	849a      	strh	r2, [r3, #36]	@ 0x24
    }while(handle->retries > 0);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1b1      	bne.n	8000a7e <enc_transmit+0x16>
    handle->transmitLength = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	831a      	strh	r2, [r3, #24]
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <enc_get_received_frame>:

/* Check if we have received packet, and if so, retrieve them. */
bool enc_get_received_frame(ENC_HandleTypeDef *handle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint8_t rsv[6];
  uint16_t pktlen;
  uint16_t rxstat;
  uint8_t pktcnt;

  bool result = true;
 8000b30:	2301      	movs	r3, #1
 8000b32:	757b      	strb	r3, [r7, #21]

  pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 8000b34:	2139      	movs	r1, #57	@ 0x39
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f972 	bl	8000e20 <enc_rdbreg>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	753b      	strb	r3, [r7, #20]
  if(pktcnt == 0)
 8000b40:	7d3b      	ldrb	r3, [r7, #20]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <enc_get_received_frame+0x22>
  {
    return false;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e078      	b.n	8000c3c <enc_get_received_frame+0x114>
  };

  /* Set the read pointer to the start of the received packet (ERDPT) */
  enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	8a9b      	ldrh	r3, [r3, #20]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f991 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	8a9b      	ldrh	r3, [r3, #20]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f987 	bl	8000e7c <enc_wrbreg>
  enc_rdbuffer(rsv, 6);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2106      	movs	r1, #6
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fa45 	bl	8001004 <enc_rdbuffer>

  handle->nextpkt = (uint16_t) rsv[1] << 8 | (uint16_t) rsv[0];
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	021b      	lsls	r3, r3, #8
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	829a      	strh	r2, [r3, #20]
  pktlen = (uint16_t) rsv[3] << 8 | (uint16_t) rsv[2];
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	827b      	strh	r3, [r7, #18]
  rxstat = (uint16_t) rsv[5] << 8 | (uint16_t) rsv[4];
 8000b9e:	7c7b      	ldrb	r3, [r7, #17]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	7c3b      	ldrb	r3, [r7, #16]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */
  if((rxstat & RXSTAT_OK) == 0)
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <enc_get_received_frame+0x96>
  {
    result = false;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	757b      	strb	r3, [r7, #21]
 8000bbc:	e018      	b.n	8000bf0 <enc_get_received_frame+0xc8>
  }
  else
  { /* Check for a usable packet length (4 added for the CRC) */
    if(pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4))
 8000bbe:	8a7b      	ldrh	r3, [r7, #18]
 8000bc0:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8000bc4:	d802      	bhi.n	8000bcc <enc_get_received_frame+0xa4>
 8000bc6:	8a7b      	ldrh	r3, [r7, #18]
 8000bc8:	2b12      	cmp	r3, #18
 8000bca:	d802      	bhi.n	8000bd2 <enc_get_received_frame+0xaa>
    {
      result = false;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	757b      	strb	r3, [r7, #21]
 8000bd0:	e00e      	b.n	8000bf0 <enc_get_received_frame+0xc8>
    }
    else
    {
      handle->RxFrameInfos.length = pktlen - 4;
 8000bd2:	8a7b      	ldrh	r3, [r7, #18]
 8000bd4:	3b04      	subs	r3, #4
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
      enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	4610      	mov	r0, r2
 8000bec:	f000 fa0a 	bl	8001004 <enc_rdbuffer>
    }
  }

  /* Errata 14 (on se sert de rxstat comme variable temporaire */
  rxstat = handle->nextpkt;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	8a9b      	ldrh	r3, [r3, #20]
 8000bf4:	82fb      	strh	r3, [r7, #22]
  if(rxstat == PKTMEM_RX_START)
 8000bf6:	8afb      	ldrh	r3, [r7, #22]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <enc_get_received_frame+0xdc>
  {
    rxstat = PKTMEM_RX_END;
 8000bfc:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 8000c00:	82fb      	strh	r3, [r7, #22]
 8000c02:	e002      	b.n	8000c0a <enc_get_received_frame+0xe2>
  }
  else
  {
    rxstat--;
 8000c04:	8afb      	ldrh	r3, [r7, #22]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	82fb      	strh	r3, [r7, #22]
  }
  enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8000c0a:	8afb      	ldrh	r3, [r7, #22]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	210c      	movs	r1, #12
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f92e 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8000c20:	8afb      	ldrh	r3, [r7, #22]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	210d      	movs	r1, #13
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f925 	bl	8000e7c <enc_wrbreg>

  /* Decrement the packet counter indicate we are done with this packet */
  enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 8000c32:	2140      	movs	r1, #64	@ 0x40
 8000c34:	209e      	movs	r0, #158	@ 0x9e
 8000c36:	f000 f876 	bl	8000d26 <enc_wrgreg2>

  return result;
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <enc_enable_interrupts>:

/* Enable individual ENC28J60 interrupts */
void enc_enable_interrupts(uint8_t bits)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  enc_bfsgreg(ENC_EIE, bits);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4619      	mov	r1, r3
 8000c52:	209b      	movs	r0, #155	@ 0x9b
 8000c54:	f000 f867 	bl	8000d26 <enc_wrgreg2>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <enc_irq_handler>:

/* Perform interrupt handling logic outside of the interrupt handler */
void enc_irq_handler(ENC_HandleTypeDef *handle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint8_t eir;

  enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	20bb      	movs	r0, #187	@ 0xbb
 8000c6c:	f000 f85b 	bl	8000d26 <enc_wrgreg2>

  /* Read EIR for interrupt flags */
  eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8000c70:	201c      	movs	r0, #28
 8000c72:	f000 f844 	bl	8000cfe <enc_rdgreg2>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8000c7c:	73fb      	strb	r3, [r7, #15]

  /* PKTIF is not reliable, check PKCNT instead */
  if(enc_rdbreg(handle, ENC_EPKTCNT) != 0)
 8000c7e:	2139      	movs	r1, #57	@ 0x39
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f8cd 	bl	8000e20 <enc_rdbreg>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <enc_irq_handler+0x34>
  {
    /* Manage EIR_PKTIF by software */
    eir |= EIR_PKTIF;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Store interrupt flags in handle */
  handle->interruptFlags = eir;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	745a      	strb	r2, [r3, #17]

  /* If link status has changed, read it */
  if((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <enc_irq_handler+0x52>
  {
    enc_linkstatus(handle); /* Get current link status */
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f9c7 	bl	8001038 <enc_linkstatus>
    enc_rdphy(handle, ENC_PHIR); /* Clear the LINKIF interrupt */
 8000caa:	2113      	movs	r1, #19
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f943 	bl	8000f38 <enc_rdphy>
  }

  /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000cb2:	213b      	movs	r1, #59	@ 0x3b
 8000cb4:	20bc      	movs	r0, #188	@ 0xbc
 8000cb6:	f000 f836 	bl	8000d26 <enc_wrgreg2>

  /* Enable Ethernet interrupts */
  /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <enc_setbank>:

/* Set the bank for these next control register access. */
static void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
  if(bank != handle->bank)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7c1b      	ldrb	r3, [r3, #16]
 8000cd2:	78fa      	ldrb	r2, [r7, #3]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d00e      	beq.n	8000cf6 <enc_setbank+0x34>
  {
    /* Select bank 0 (just so that all of the bits are cleared) */
    enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8000cd8:	2103      	movs	r1, #3
 8000cda:	20bf      	movs	r0, #191	@ 0xbf
 8000cdc:	f000 f823 	bl	8000d26 <enc_wrgreg2>

    if(bank != 0)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <enc_setbank+0x2e>
    {
      enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	209f      	movs	r0, #159	@ 0x9f
 8000cec:	f000 f81b 	bl	8000d26 <enc_wrgreg2>
    }

    handle->bank = bank;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	741a      	strb	r2, [r3, #16]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <enc_rdgreg2>:

/* Read a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(cmdpdata, cmdpdata, 2);
 8000d0c:	f107 010c 	add.w	r1, r7, #12
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2202      	movs	r2, #2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc5a 	bl	80005d0 <SPIx_TxBuf>

  return cmdpdata[1];
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <enc_wrgreg2>:

/* Write to a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460a      	mov	r2, r1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71bb      	strb	r3, [r7, #6]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	733b      	strb	r3, [r7, #12]
  cmdpdata[1] = wrdata;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(cmdpdata, NULL, 2);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2202      	movs	r2, #2
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fc42 	bl	80005d0 <SPIx_TxBuf>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <enc_waitgreg>:

/* Wait until grouped register bit(s) take a specific value */
static bool enc_waitgreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d66:	f001 f8b1 	bl	8001ecc <HAL_GetTick>
 8000d6a:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 031f 	and.w	r3, r3, #31
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffc2 	bl	8000cfe <enc_rdgreg2>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d7e:	f001 f8a5 	bl	8001ecc <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000d8a:	7cfa      	ldrb	r2, [r7, #19]
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	797a      	ldrb	r2, [r7, #5]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d002      	beq.n	8000d9e <enc_waitgreg+0x4a>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b31      	cmp	r3, #49	@ 0x31
 8000d9c:	d9e6      	bls.n	8000d6c <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000d9e:	7cfa      	ldrb	r2, [r7, #19]
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	4013      	ands	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	797a      	ldrb	r2, [r7, #5]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <enc_waitwhilegreg>:

/* Wait while grouped register bit(s) have a specific value */
static bool enc_waitwhilegreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000dcc:	f001 f87e 	bl	8001ecc <HAL_GetTick>
 8000dd0:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff8f 	bl	8000cfe <enc_rdgreg2>
 8000de0:	4603      	mov	r3, r0
 8000de2:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000de4:	f001 f872 	bl	8001ecc <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000df0:	7cfa      	ldrb	r2, [r7, #19]
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	4013      	ands	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	797a      	ldrb	r2, [r7, #5]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d102      	bne.n	8000e04 <enc_waitwhilegreg+0x4a>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b31      	cmp	r3, #49	@ 0x31
 8000e02:	d9e6      	bls.n	8000dd2 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	797a      	ldrb	r2, [r7, #5]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <enc_rdbreg>:

/* Read from a banked control register using the RCR command. */
static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  enc_setbank(handle, GETBANK(ctrlreg));
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff41 	bl	8000cc2 <enc_setbank>
  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(data, data, (ISPHYMAC(ctrlreg)) ? 3 : 2);
 8000e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da01      	bge.n	8000e56 <enc_rdbreg+0x36>
 8000e52:	2203      	movs	r2, #3
 8000e54:	e000      	b.n	8000e58 <enc_rdbreg+0x38>
 8000e56:	2202      	movs	r2, #2
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fbb5 	bl	80005d0 <SPIx_TxBuf>
  return (ISPHYMAC(ctrlreg)) ? data[2] : data[1];
 8000e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da01      	bge.n	8000e72 <enc_rdbreg+0x52>
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	e000      	b.n	8000e74 <enc_rdbreg+0x54>
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <enc_wrbreg>:

/* Write to a banked control register using the WCR command. */
static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t wrdata)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];
  enc_setbank(handle, GETBANK(ctrlreg));
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff11 	bl	8000cc2 <enc_setbank>
  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8000ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(data, NULL, 2);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb85 	bl	80005d0 <SPIx_TxBuf>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <enc_waitbreg>:

/* Wait until banked register bit(s) take a specific value */
static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4611      	mov	r1, r2
 8000eda:	461a      	mov	r2, r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	70fb      	strb	r3, [r7, #3]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70bb      	strb	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8000ee8:	f000 fff0 	bl	8001ecc <HAL_GetTick>
 8000eec:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdbreg(handle, ctrlreg);
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff94 	bl	8000e20 <enc_rdbreg>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000efc:	f000 ffe6 	bl	8001ecc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000f08:	7cfa      	ldrb	r2, [r7, #19]
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	787a      	ldrb	r2, [r7, #1]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d002      	beq.n	8000f1c <enc_waitbreg+0x4e>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b31      	cmp	r3, #49	@ 0x31
 8000f1a:	d9e8      	bls.n	8000eee <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8000f1c:	7cfa      	ldrb	r2, [r7, #19]
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	4013      	ands	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	787a      	ldrb	r2, [r7, #1]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	bf0c      	ite	eq
 8000f2a:	2301      	moveq	r3, #1
 8000f2c:	2300      	movne	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <enc_rdphy>:

/* Read 16-bits of PHY data. */
static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	81fb      	strh	r3, [r7, #14]

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	21d4      	movs	r1, #212	@ 0xd4
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff94 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8000f54:	2201      	movs	r2, #1
 8000f56:	21d2      	movs	r1, #210	@ 0xd2
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff8f 	bl	8000e7c <enc_wrbreg>
  udelay(12);
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f7ff fba4 	bl	80006ac <udelay>

  if(enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8000f64:	2300      	movs	r3, #0
 8000f66:	2201      	movs	r2, #1
 8000f68:	21ea      	movs	r1, #234	@ 0xea
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffaf 	bl	8000ece <enc_waitbreg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d016      	beq.n	8000fa4 <enc_rdphy+0x6c>
  {
    enc_wrbreg(handle, ENC_MICMD, 0x00);
 8000f76:	2200      	movs	r2, #0
 8000f78:	21d2      	movs	r1, #210	@ 0xd2
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff7e 	bl	8000e7c <enc_wrbreg>
    data = (uint16_t) enc_rdbreg(handle, ENC_MIRDL);
 8000f80:	21d8      	movs	r1, #216	@ 0xd8
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff4c 	bl	8000e20 <enc_rdbreg>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t) enc_rdbreg(handle, ENC_MIRDH) << 8;
 8000f8c:	21d9      	movs	r1, #217	@ 0xd9
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff46 	bl	8000e20 <enc_rdbreg>
 8000f94:	4603      	mov	r3, r0
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	81fb      	strh	r3, [r7, #14]
  }

  return data;
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <enc_wrphy>:

/* write 16-bits of PHY data. */
static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr, uint16_t phydata)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	803b      	strh	r3, [r7, #0]
  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	21d4      	movs	r1, #212	@ 0xd4
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff59 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	21d6      	movs	r1, #214	@ 0xd6
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff52 	bl	8000e7c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	21d7      	movs	r1, #215	@ 0xd7
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff49 	bl	8000e7c <enc_wrbreg>
  udelay(12);
 8000fea:	200c      	movs	r0, #12
 8000fec:	f7ff fb5e 	bl	80006ac <udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	21ea      	movs	r1, #234	@ 0xea
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff69 	bl	8000ece <enc_waitbreg>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <enc_rdbuffer>:

/* Read a buffer of data. */
static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <enc_rdbuffer+0x30>)
 8001016:	f001 fa23 	bl	8002460 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_RBM);
 800101a:	203a      	movs	r0, #58	@ 0x3a
 800101c:	f7ff fab8 	bl	8000590 <SPIx_TxRx>
  SPIx_TxBuf(NULL, buffer, buflen);
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	461a      	mov	r2, r3
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fad2 	bl	80005d0 <SPIx_TxBuf>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	48000400 	.word	0x48000400

08001038 <enc_linkstatus>:

/* The current link status can be obtained from the PHSTAT1.LLSTAT or PHSTAT2.LSTAT.*/
static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8001040:	2111      	movs	r1, #17
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff78 	bl	8000f38 <enc_rdphy>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	82da      	strh	r2, [r3, #22]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <vApplicationGetIdleTaskMemory+0x2c>)
 8001068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <vApplicationGetIdleTaskMemory+0x30>)
 800106e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001076:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	2000009c 	.word	0x2000009c
 8001088:	20000100 	.word	0x20000100

0800108c <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn) 
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	@ 0x38
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;
  
  /* Read the data from the port, blocking if nothing yet there. 
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8001094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f008 fb94 	bl	80097c8 <netconn_recv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (recv_err == ERR_OK)
 80010a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 80bf 	bne.w	800122e <http_server_serve+0x1a2>
  {
    if (netconn_err(conn) == ERR_OK) 
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f008 fd12 	bl	8009ada <netconn_err>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f040 80b8 	bne.w	800122e <http_server_serve+0x1a2>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 80010be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c0:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80010c4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a f919 	bl	800b300 <netbuf_data>
    
      // Is this an HTTP GET command? (only check the first 5 chars, since  there are other formats for GET, and we're keeping it very simple )
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 80010ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	f240 80ac 	bls.w	800122e <http_server_serve+0x1a2>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	2205      	movs	r2, #5
 80010da:	495a      	ldr	r1, [pc, #360]	@ (8001244 <http_server_serve+0x1b8>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f017 fba5 	bl	801882c <strncmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f040 80a2 	bne.w	800122e <http_server_serve+0x1a2>
      {
        // Check if request to get ST.gif
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	221b      	movs	r2, #27
 80010ee:	4956      	ldr	r1, [pc, #344]	@ (8001248 <http_server_serve+0x1bc>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f017 fb9b 	bl	801882c <strncmp>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d114      	bne.n	8001126 <http_server_serve+0x9a>
        {
          fs_open(&file, "/STM32F7xx_files/ST.gif"); 
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4952      	ldr	r1, [pc, #328]	@ (800124c <http_server_serve+0x1c0>)
 8001102:	4618      	mov	r0, r3
 8001104:	f00a faf4 	bl	800b6f0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	461a      	mov	r2, r3
 800110e:	2300      	movs	r3, #0
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f008 fbd1 	bl	80098bc <netconn_write_partly>
          fs_close(&file);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f00a fb24 	bl	800b76c <fs_close>
 8001124:	e083      	b.n	800122e <http_server_serve+0x1a2>
        }   
        // Check if request to get stm32.jpeg
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	221e      	movs	r2, #30
 800112a:	4949      	ldr	r1, [pc, #292]	@ (8001250 <http_server_serve+0x1c4>)
 800112c:	4618      	mov	r0, r3
 800112e:	f017 fb7d 	bl	801882c <strncmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d114      	bne.n	8001162 <http_server_serve+0xd6>
        {
          fs_open(&file, "/STM32F7xx_files/stm32.jpg"); 
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4945      	ldr	r1, [pc, #276]	@ (8001254 <http_server_serve+0x1c8>)
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fad6 	bl	800b6f0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	461a      	mov	r2, r3
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f008 fbb3 	bl	80098bc <netconn_write_partly>
          fs_close(&file);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4618      	mov	r0, r3
 800115c:	f00a fb06 	bl	800b76c <fs_close>
 8001160:	e065      	b.n	800122e <http_server_serve+0x1a2>
        }
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)                                           
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	221d      	movs	r2, #29
 8001166:	493c      	ldr	r1, [pc, #240]	@ (8001258 <http_server_serve+0x1cc>)
 8001168:	4618      	mov	r0, r3
 800116a:	f017 fb5f 	bl	801882c <strncmp>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d114      	bne.n	800119e <http_server_serve+0x112>
        {
          // Check if request to get ST logo.jpg
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4938      	ldr	r1, [pc, #224]	@ (800125c <http_server_serve+0x1d0>)
 800117a:	4618      	mov	r0, r3
 800117c:	f00a fab8 	bl	800b6f0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001180:	68f9      	ldr	r1, [r7, #12]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	461a      	mov	r2, r3
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f008 fb95 	bl	80098bc <netconn_write_partly>
          fs_close(&file);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f00a fae8 	bl	800b76c <fs_close>
 800119c:	e047      	b.n	800122e <http_server_serve+0x1a2>
        }
        else if(strncmp(buf, "GET /STM32F7xxTASKS.html", 24) == 0)
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	2218      	movs	r2, #24
 80011a2:	492f      	ldr	r1, [pc, #188]	@ (8001260 <http_server_serve+0x1d4>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f017 fb41 	bl	801882c <strncmp>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <http_server_serve+0x12c>
        {
           // Load dynamic page
           DynWebPage(conn);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f8a7 	bl	8001304 <DynWebPage>
 80011b6:	e03a      	b.n	800122e <http_server_serve+0x1a2>
        }
        else if((strncmp(buf, "GET /STM32F7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	2213      	movs	r2, #19
 80011bc:	4929      	ldr	r1, [pc, #164]	@ (8001264 <http_server_serve+0x1d8>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f017 fb34 	bl	801882c <strncmp>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <http_server_serve+0x150>
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	2206      	movs	r2, #6
 80011ce:	4926      	ldr	r1, [pc, #152]	@ (8001268 <http_server_serve+0x1dc>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f017 fb2b 	bl	801882c <strncmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d114      	bne.n	8001206 <http_server_serve+0x17a>
        {
          // Load STM32F7xx page
          //fs_open(&file, "/STM32F7xx.html");
        	 fs_open(&file, "/404.html");
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4922      	ldr	r1, [pc, #136]	@ (800126c <http_server_serve+0x1e0>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00a fa84 	bl	800b6f0 <fs_open>
        /*  uint8_t datadebug[10000];
          memcpy(&datadebug,file.data,file.len );
          */
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f008 fb61 	bl	80098bc <netconn_write_partly>
          fs_close(&file);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4618      	mov	r0, r3
 8001200:	f00a fab4 	bl	800b76c <fs_close>
 8001204:	e013      	b.n	800122e <http_server_serve+0x1a2>
        }
        else 
        {
          // Load Error page
          fs_open(&file, "/404.html"); 
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4918      	ldr	r1, [pc, #96]	@ (800126c <http_server_serve+0x1e0>)
 800120c:	4618      	mov	r0, r3
 800120e:	f00a fa6f 	bl	800b6f0 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	461a      	mov	r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f008 fb4c 	bl	80098bc <netconn_write_partly>
          fs_close(&file);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f00a fa9f 	bl	800b76c <fs_close>
      }      
    }
  }

  // Close the connection (server closes in HTTP)
  netconn_close(conn);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f008 fc46 	bl	8009ac0 <netconn_close>
  
  // Delete the buffer (netconn_recv gives us ownership,so we have to make sure to deallocate the buffer)
  netbuf_delete(inbuf);
 8001234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001236:	4618      	mov	r0, r3
 8001238:	f00a f842 	bl	800b2c0 <netbuf_delete>
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	@ 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080198bc 	.word	0x080198bc
 8001248:	080198c4 	.word	0x080198c4
 800124c:	080198e0 	.word	0x080198e0
 8001250:	080198f8 	.word	0x080198f8
 8001254:	08019918 	.word	0x08019918
 8001258:	08019934 	.word	0x08019934
 800125c:	08019954 	.word	0x08019954
 8001260:	08019970 	.word	0x08019970
 8001264:	0801998c 	.word	0x0801998c
 8001268:	080199a0 	.word	0x080199a0
 800126c:	080199a8 	.word	0x080199a8

08001270 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2010      	movs	r0, #16
 800127e:	f007 ff7d 	bl	800917c <netconn_new_with_proto_and_callback>
 8001282:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d023      	beq.n	80012d2 <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 800128a:	2250      	movs	r2, #80	@ 0x50
 800128c:	2100      	movs	r1, #0
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f008 f82e 	bl	80092f0 <netconn_bind>
 8001294:	4603      	mov	r3, r0
 8001296:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8001298:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d118      	bne.n	80012d2 <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 80012a0:	21ff      	movs	r1, #255	@ 0xff
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f008 f85c 	bl	8009360 <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f008 f882 	bl	80093b8 <netconn_accept>
 80012b4:	4603      	mov	r3, r0
 80012b6:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 80012b8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f3      	bne.n	80012a8 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fee2 	bl	800108c <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 fff4 	bl	80092b8 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 80012d0:	e7ea      	b.n	80012a8 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL,2048/* DEFAULT_THREAD_STACKSIZE*/, WEBSERVER_THREAD_PRIO);
 80012e2:	2301      	movs	r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012ea:	2200      	movs	r2, #0
 80012ec:	4903      	ldr	r1, [pc, #12]	@ (80012fc <http_server_netconn_init+0x20>)
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <http_server_netconn_init+0x24>)
 80012f0:	f017 f8a2 	bl	8018438 <sys_thread_new>
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	08001271 	.word	0x08001271
 8001300:	080199b4 	.word	0x080199b4

08001304 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800130a:	af02      	add	r7, sp, #8
 800130c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001310:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001314:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8001316:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800131a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f017 fa62 	bl	80187fe <memset>

  /* Update the hit count */
  nPageHits++;
 800133a:	4b65      	ldr	r3, [pc, #404]	@ (80014d0 <DynWebPage+0x1cc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a63      	ldr	r2, [pc, #396]	@ (80014d0 <DynWebPage+0x1cc>)
 8001342:	6013      	str	r3, [r2, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8001344:	4b62      	ldr	r3, [pc, #392]	@ (80014d0 <DynWebPage+0x1cc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4961      	ldr	r1, [pc, #388]	@ (80014d4 <DynWebPage+0x1d0>)
 8001350:	4618      	mov	r0, r3
 8001352:	f017 f9c7 	bl	80186e4 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f017 fa54 	bl	801880e <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ff3a 	bl	80001e4 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4413      	add	r3, r2
 800137a:	4a57      	ldr	r2, [pc, #348]	@ (80014d8 <DynWebPage+0x1d4>)
 800137c:	4614      	mov	r4, r2
 800137e:	469c      	mov	ip, r3
 8001380:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001384:	4665      	mov	r5, ip
 8001386:	4626      	mov	r6, r4
 8001388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800138a:	6028      	str	r0, [r5, #0]
 800138c:	6069      	str	r1, [r5, #4]
 800138e:	60aa      	str	r2, [r5, #8]
 8001390:	60eb      	str	r3, [r5, #12]
 8001392:	3410      	adds	r4, #16
 8001394:	f10c 0c10 	add.w	ip, ip, #16
 8001398:	4574      	cmp	r4, lr
 800139a:	d1f3      	bne.n	8001384 <DynWebPage+0x80>
 800139c:	4663      	mov	r3, ip
 800139e:	4622      	mov	r2, r4
 80013a0:	6810      	ldr	r0, [r2, #0]
 80013a2:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff1b 	bl	80001e4 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	4413      	add	r3, r2
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <DynWebPage+0x1d8>)
 80013ba:	4614      	mov	r4, r2
 80013bc:	469c      	mov	ip, r3
 80013be:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80013c2:	4665      	mov	r5, ip
 80013c4:	4626      	mov	r6, r4
 80013c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013c8:	6028      	str	r0, [r5, #0]
 80013ca:	6069      	str	r1, [r5, #4]
 80013cc:	60aa      	str	r2, [r5, #8]
 80013ce:	60eb      	str	r3, [r5, #12]
 80013d0:	3410      	adds	r4, #16
 80013d2:	f10c 0c10 	add.w	ip, ip, #16
 80013d6:	4574      	cmp	r4, lr
 80013d8:	d1f3      	bne.n	80013c2 <DynWebPage+0xbe>
 80013da:	4663      	mov	r3, ip
 80013dc:	4622      	mov	r2, r4
 80013de:	6810      	ldr	r0, [r2, #0]
 80013e0:	6018      	str	r0, [r3, #0]
 80013e2:	8892      	ldrh	r2, [r2, #4]
 80013e4:	809a      	strh	r2, [r3, #4]
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fefa 	bl	80001e4 <strlen>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4413      	add	r3, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f917 	bl	800662c <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe feee 	bl	80001e4 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4413      	add	r3, r2
 8001412:	4a33      	ldr	r2, [pc, #204]	@ (80014e0 <DynWebPage+0x1dc>)
 8001414:	4614      	mov	r4, r2
 8001416:	469c      	mov	ip, r3
 8001418:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800141c:	4665      	mov	r5, ip
 800141e:	4626      	mov	r6, r4
 8001420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001422:	6028      	str	r0, [r5, #0]
 8001424:	6069      	str	r1, [r5, #4]
 8001426:	60aa      	str	r2, [r5, #8]
 8001428:	60eb      	str	r3, [r5, #12]
 800142a:	3410      	adds	r4, #16
 800142c:	f10c 0c10 	add.w	ip, ip, #16
 8001430:	4574      	cmp	r4, lr
 8001432:	d1f3      	bne.n	800141c <DynWebPage+0x118>
 8001434:	4663      	mov	r3, ip
 8001436:	4622      	mov	r2, r4
 8001438:	6810      	ldr	r0, [r2, #0]
 800143a:	6018      	str	r0, [r3, #0]
 800143c:	8892      	ldrh	r2, [r2, #4]
 800143e:	809a      	strh	r2, [r3, #4]
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe fecd 	bl	80001e4 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4413      	add	r3, r2
 8001454:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <DynWebPage+0x1e0>)
 8001456:	4614      	mov	r4, r2
 8001458:	469c      	mov	ip, r3
 800145a:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800145e:	4665      	mov	r5, ip
 8001460:	4626      	mov	r6, r4
 8001462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001464:	6028      	str	r0, [r5, #0]
 8001466:	6069      	str	r1, [r5, #4]
 8001468:	60aa      	str	r2, [r5, #8]
 800146a:	60eb      	str	r3, [r5, #12]
 800146c:	3410      	adds	r4, #16
 800146e:	f10c 0c10 	add.w	ip, ip, #16
 8001472:	4574      	cmp	r4, lr
 8001474:	d1f3      	bne.n	800145e <DynWebPage+0x15a>
 8001476:	4662      	mov	r2, ip
 8001478:	4623      	mov	r3, r4
 800147a:	cb03      	ldmia	r3!, {r0, r1}
 800147c:	6010      	str	r0, [r2, #0]
 800147e:	6051      	str	r1, [r2, #4]
 8001480:	8819      	ldrh	r1, [r3, #0]
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	8111      	strh	r1, [r2, #8]
 8001486:	7293      	strb	r3, [r2, #10]

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8001488:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800148c:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	f240 623b 	movw	r2, #1595	@ 0x63b
 800149a:	4913      	ldr	r1, [pc, #76]	@ (80014e8 <DynWebPage+0x1e4>)
 800149c:	6800      	ldr	r0, [r0, #0]
 800149e:	f008 fa0d 	bl	80098bc <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fe9c 	bl	80001e4 <strlen>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f107 0118 	add.w	r1, r7, #24
 80014b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014b6:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 80014ba:	2300      	movs	r3, #0
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	6800      	ldr	r0, [r0, #0]
 80014c2:	f008 f9fb 	bl	80098bc <netconn_write_partly>
}
 80014c6:	bf00      	nop
 80014c8:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	20000500 	.word	0x20000500
 80014d4:	080199bc 	.word	0x080199bc
 80014d8:	080199c0 	.word	0x080199c0
 80014dc:	080199f4 	.word	0x080199f4
 80014e0:	08019a2c 	.word	0x08019a2c
 80014e4:	08019a64 	.word	0x08019a64
 80014e8:	0801d358 	.word	0x0801d358

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fcb7 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f821 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 f8df 	bl	80016bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 f8ad 	bl	800165c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001502:	f000 f86d 	bl	80015e0 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <main+0x48>)
 8001508:	1d3c      	adds	r4, r7, #4
 800150a:	461d      	mov	r5, r3
 800150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001514:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fdc9 	bl	80060b4 <osThreadCreate>
 8001522:	4603      	mov	r3, r0
 8001524:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <main+0x4c>)
 8001526:	6013      	str	r3, [r2, #0]

 // xSemaphore = xSemaphoreCreateBinary();
  //StaticSemaphore_t xSemaphoreBuffer;
  //xSemaphore = xSemaphoreCreateBinaryStatic(&xSemaphoreBuffer);

  initRTOS();
 8001528:	f000 f9e2 	bl	80018f0 <initRTOS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800152c:	f004 fdab 	bl	8006086 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <main+0x44>
 8001534:	08019aac 	.word	0x08019aac
 8001538:	200005f0 	.word	0x200005f0

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b096      	sub	sp, #88	@ 0x58
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2244      	movs	r2, #68	@ 0x44
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f017 f957 	bl	80187fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800155e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001562:	f000 ffd5 	bl	8002510 <HAL_PWREx_ControlVoltageScaling>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800156c:	f000 f9ba 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157a:	2310      	movs	r3, #16
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001582:	2302      	movs	r3, #2
 8001584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800158a:	230a      	movs	r3, #10
 800158c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800158e:	2307      	movs	r3, #7
 8001590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 f80c 	bl	80025bc <HAL_RCC_OscConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015aa:	f000 f99b 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	230f      	movs	r3, #15
 80015b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b2:	2303      	movs	r3, #3
 80015b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2104      	movs	r1, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fbd4 	bl	8002d74 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015d2:	f000 f987 	bl	80018e4 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	@ 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <MX_SPI2_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <MX_SPI2_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_SPI2_Init+0x74>)
 80015ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_SPI2_Init+0x74>)
 80015fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_SPI2_Init+0x74>)
 800160e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001612:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001616:	2230      	movs	r2, #48	@ 0x30
 8001618:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_SPI2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_SPI2_Init+0x74>)
 800162e:	2207      	movs	r2, #7
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_SPI2_Init+0x74>)
 800163a:	2208      	movs	r2, #8
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_SPI2_Init+0x74>)
 8001640:	f002 faaa 	bl	8003b98 <HAL_SPI_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 f94b 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000504 	.word	0x20000504
 8001658:	40003800 	.word	0x40003800

0800165c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001662:	4a15      	ldr	r2, [pc, #84]	@ (80016b8 <MX_USART2_UART_Init+0x5c>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_USART2_UART_Init+0x58>)
 80016a0:	f003 fc6c 	bl	8004f7c <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016aa:	f000 f91b 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000568 	.word	0x20000568
 80016b8:	40004400 	.word	0x40004400

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b44      	ldr	r3, [pc, #272]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a43      	ldr	r2, [pc, #268]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b41      	ldr	r3, [pc, #260]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a3d      	ldr	r2, [pc, #244]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <MX_GPIO_Init+0x128>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <MX_GPIO_Init+0x128>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	4a37      	ldr	r2, [pc, #220]	@ (80017e4 <MX_GPIO_Init+0x128>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170e:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <MX_GPIO_Init+0x128>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <MX_GPIO_Init+0x128>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4a31      	ldr	r2, [pc, #196]	@ (80017e4 <MX_GPIO_Init+0x128>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <MX_GPIO_Init+0x128>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2120      	movs	r1, #32
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f000 fe91 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2101      	movs	r1, #1
 8001742:	4829      	ldr	r0, [pc, #164]	@ (80017e8 <MX_GPIO_Init+0x12c>)
 8001744:	f000 fe8c 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4823      	ldr	r0, [pc, #140]	@ (80017ec <MX_GPIO_Init+0x130>)
 8001760:	f000 fcd4 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001764:	2320      	movs	r3, #32
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177e:	f000 fcc5 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_GPIO_Init+0x12c>)
 800179a:	f000 fcb7 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800179e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f000 fca8 	bl	800210c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2106      	movs	r1, #6
 80017c0:	2017      	movs	r0, #23
 80017c2:	f000 fc6b 	bl	800209c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c6:	2017      	movs	r0, #23
 80017c8:	f000 fc84 	bl	80020d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2106      	movs	r1, #6
 80017d0:	2028      	movs	r0, #40	@ 0x28
 80017d2:	f000 fc63 	bl	800209c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d6:	2028      	movs	r0, #40	@ 0x28
 80017d8:	f000 fc7c 	bl	80020d4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800

080017f0 <StartTask03>:
  * @param  None
  * @retval None
  */

void StartTask03(void const * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();	//disable IRQ
 80017f8:	f007 fa8e 	bl	8008d18 <vPortEnterCritical>
	xSemaphore = xSemaphoreCreateBinaryStatic(&xSemaphoreBuffer);
 80017fc:	2303      	movs	r3, #3
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <StartTask03+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2001      	movs	r0, #1
 8001808:	f005 f862 	bl	80068d0 <xQueueGenericCreateStatic>
 800180c:	4603      	mov	r3, r0
 800180e:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <StartTask03+0x44>)
 8001810:	6013      	str	r3, [r2, #0]
	/* Create tcp_ip stack thread */
	tcpip_init(NULL, NULL);
 8001812:	2100      	movs	r1, #0
 8001814:	2000      	movs	r0, #0
 8001816:	f009 ff21 	bl	800b65c <tcpip_init>

	/* Initialize the LwIP stack */
	Netif_Config();
 800181a:	f004 f9cb 	bl	8005bb4 <Netif_Config>

	/* start App thread (tcp echo here) */
	//tcpecho_init();

	/* Initialize webserver demo */
	http_server_netconn_init();
 800181e:	f7ff fd5d 	bl	80012dc <http_server_netconn_init>

	taskEXIT_CRITICAL();
 8001822:	f007 faab 	bl	8008d7c <vPortExitCritical>

	/* infinite loop but pas trop quand même */
	for(;;)
	{
		osThreadTerminate(NULL);
 8001826:	2000      	movs	r0, #0
 8001828:	f004 fc90 	bl	800614c <osThreadTerminate>
 800182c:	e7fb      	b.n	8001826 <StartTask03+0x36>
 800182e:	bf00      	nop
 8001830:	20000a5c 	.word	0x20000a5c
 8001834:	20000a58 	.word	0x20000a58

08001838 <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == 256)// pin PA8
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001848:	d109      	bne.n	800185e <HAL_GPIO_EXTI_Callback+0x26>
  {
	  if (ethernetTaskHandleGlobal!=NULL)
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_GPIO_EXTI_Callback+0x30>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_GPIO_EXTI_Callback+0x26>
		  xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_GPIO_EXTI_Callback+0x34>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4906      	ldr	r1, [pc, #24]	@ (8001870 <HAL_GPIO_EXTI_Callback+0x38>)
 8001858:	4618      	mov	r0, r3
 800185a:	f005 fb6b 	bl	8006f34 <xQueueGiveFromISR>
  }
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000aa4 	.word	0x20000aa4
 800186c:	20000a58 	.word	0x20000a58
 8001870:	20000aa8 	.word	0x20000aa8

08001874 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
    printf("Stack overflow in task: %s\n", pcTaskName);
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <vApplicationStackOverflowHook+0x18>)
 8001882:	f016 ff1d 	bl	80186c0 <iprintf>
    while (1);  // Bloque l'exécution si débordement détecté
 8001886:	bf00      	nop
 8001888:	e7fd      	b.n	8001886 <vApplicationStackOverflowHook+0x12>
 800188a:	bf00      	nop
 800188c:	08019ac8 	.word	0x08019ac8

08001890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int i=0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  i++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018a2:	2120      	movs	r1, #32
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f000 fdf2 	bl	8002490 <HAL_GPIO_TogglePin>
	  vTaskDelay(500);
 80018ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018b0:	f006 fa52 	bl	8007d58 <vTaskDelay>
	  //HAL_UART_Transmit(&huart2, &i, sizeof(i), 1000);
    osDelay(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f004 fc55 	bl	8006164 <osDelay>
	  i++;
 80018ba:	bf00      	nop
 80018bc:	e7ee      	b.n	800189c <StartDefaultTask+0xc>
	...

080018c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018d2:	f000 fae7 	bl	8001ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40001000 	.word	0x40001000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <Error_Handler+0x8>

080018f0 <initRTOS>:
 * param : nop
 *
 * return: nop
 */
status_t initRTOS()
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
	/* definition and creation of tache_bacasable */
	//osThreadDef(tache_UartDebug, StartTask02, osPriorityLow, 0, 128);
	//UartDebug_Handle = osThreadCreate( osThread(tache_UartDebug) , NULL );

	/* definition and creation of tache_bacasable */
	osThreadDef(tache_StartThread, StartTask03, osPriorityHigh, 0, 512);
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <initRTOS+0x34>)
 80018f8:	1d3c      	adds	r4, r7, #4
 80018fa:	461d      	mov	r5, r3
 80018fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	StartThread_Handle = osThreadCreate( osThread(tache_StartThread) , NULL );
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fbd1 	bl	80060b4 <osThreadCreate>
 8001912:	4603      	mov	r3, r0
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <initRTOS+0x38>)
 8001916:	6013      	str	r3, [r2, #0]


	return kStatus_Success;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bdb0      	pop	{r4, r5, r7, pc}
 8001922:	bf00      	nop
 8001924:	08019af8 	.word	0x08019af8
 8001928:	20000aac 	.word	0x20000aac

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_MspInit+0x4c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	@ 0x60
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6593      	str	r3, [r2, #88]	@ 0x58
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	210f      	movs	r1, #15
 8001966:	f06f 0001 	mvn.w	r0, #1
 800196a:	f000 fb97 	bl	800209c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a25      	ldr	r2, [pc, #148]	@ (8001a30 <HAL_SPI_MspInit+0xb4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d144      	bne.n	8001a28 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_SPI_MspInit+0xb8>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e6:	230c      	movs	r3, #12
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f6:	2305      	movs	r3, #5
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <HAL_SPI_MspInit+0xbc>)
 8001a02:	f000 fb83 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <HAL_SPI_MspInit+0xc0>)
 8001a24:	f000 fb72 	bl	800210c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	@ 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40003800 	.word	0x40003800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000400 	.word	0x48000400

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0ac      	sub	sp, #176	@ 0xb0
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2288      	movs	r2, #136	@ 0x88
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f016 fecc 	bl	80187fe <memset>
  if(huart->Instance==USART2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <HAL_UART_MspInit+0xb0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13b      	bne.n	8001ae8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fbcf 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a88:	f7ff ff2c 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_UART_MspInit+0xb4>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001abc:	230c      	movs	r3, #12
 8001abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae4:	f000 fb12 	bl	800210c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ae8:	bf00      	nop
 8001aea:	37b0      	adds	r7, #176	@ 0xb0
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40004400 	.word	0x40004400
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	@ 0x38
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	4a33      	ldr	r2, [pc, #204]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b12:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b1e:	f107 0210 	add.w	r2, r7, #16
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fae7 	bl	80030fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b38:	f001 fab4 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8001b3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b3e:	e004      	b.n	8001b4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b40:	f001 fab0 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_InitTick+0xe4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b5a:	4a22      	ldr	r2, [pc, #136]	@ (8001be4 <HAL_InitTick+0xec>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a1e      	ldr	r2, [pc, #120]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b80:	f002 ff36 	bl	80049f0 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b92:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b94:	f002 ff8e 	bl	8004ab4 <HAL_TIM_Base_Start_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d111      	bne.n	8001bca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ba6:	2036      	movs	r0, #54	@ 0x36
 8001ba8:	f000 fa94 	bl	80020d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	d808      	bhi.n	8001bc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	2036      	movs	r0, #54	@ 0x36
 8001bb8:	f000 fa70 	bl	800209c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_InitTick+0xf0>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e002      	b.n	8001bca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3738      	adds	r7, #56	@ 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	20000ab0 	.word	0x20000ab0
 8001be4:	40001000 	.word	0x40001000
 8001be8:	20000004 	.word	0x20000004

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c26:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c2a:	f000 fc4b 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c36:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c3a:	f000 fc43 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <TIM6_DAC_IRQHandler+0x10>)
 8001c4a:	f002 ffa3 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000ab0 	.word	0x20000ab0

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <_kill+0x20>)
 8001c74:	2216      	movs	r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
  return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20015958 	.word	0x20015958

08001c8c <_exit>:

void _exit (int status)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffe5 	bl	8001c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <_exit+0x12>

08001ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e00a      	b.n	8001cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	4601      	mov	r1, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	b2ca      	uxtb	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf0      	blt.n	8001cb4 <_read+0x12>
  }

  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e009      	b.n	8001d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf1      	blt.n	8001cee <_write+0x12>
  }
  return len;
 8001d0a:	687b      	ldr	r3, [r7, #4]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_close>:

int _close(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_isatty>:

int _isatty(int file)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d205      	bcs.n	8001db8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <_sbrk+0x6c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	20018000 	.word	0x20018000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	20000afc 	.word	0x20000afc
 8001de4:	20015aa8 	.word	0x20015aa8
 8001de8:	20015958 	.word	0x20015958

08001dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <SystemInit+0x20>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <SystemInit+0x20>)
 8001df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e14:	f7ff ffea 	bl	8001dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e54 <LoopForever+0xe>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	@ (8001e5c <LoopForever+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f016 fd4d 	bl	80188dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e42:	f7ff fb53 	bl	80014ec <main>

08001e46 <LoopForever>:

LoopForever:
    b LoopForever
 8001e46:	e7fe      	b.n	8001e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e54:	080268e4 	.word	0x080268e4
  ldr r2, =_sbss
 8001e58:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e5c:	20015aa8 	.word	0x20015aa8

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_Init+0x3c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_Init+0x3c>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f000 f903 	bl	8002086 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e80:	200f      	movs	r0, #15
 8001e82:	f7ff fe39 	bl	8001af8 <HAL_InitTick>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	e001      	b.n	8001e96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e92:	f7ff fd4b 	bl	800192c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000b00 	.word	0x20000b00

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000b00 	.word	0x20000b00

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	@ (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db12      	blt.n	8001fbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	490a      	ldr	r1, [pc, #40]	@ (8001fc8 <__NVIC_DisableIRQ+0x44>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	3320      	adds	r3, #32
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb0:	f3bf 8f4f 	dsb	sy
}
 8001fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fb6:	f3bf 8f6f 	isb	sy
}
 8001fba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	@ (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	@ (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	@ 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	@ 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff28 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ae:	f7ff ff3d 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7ff ffb1 	bl	8002020 <NVIC_EncodePriority>
 80020be:	4602      	mov	r2, r0
 80020c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff80 	bl	8001fcc <__NVIC_SetPriority>
}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff30 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff40 	bl	8001f84 <__NVIC_DisableIRQ>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e17f      	b.n	800241c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8171 	beq.w	8002416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d005      	beq.n	800214c <HAL_GPIO_Init+0x40>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0201 	and.w	r2, r3, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d118      	bne.n	80021ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	6939      	ldr	r1, [r7, #16]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80ac 	beq.w	8002416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c2:	4a5e      	ldr	r2, [pc, #376]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <HAL_GPIO_Init+0x330>)
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x242>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	@ (8002444 <HAL_GPIO_Init+0x338>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x23e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_GPIO_Init+0x33c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x23a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	@ (800244c <HAL_GPIO_Init+0x340>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x236>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x344>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x232>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <HAL_GPIO_Init+0x348>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x22e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4a      	ldr	r2, [pc, #296]	@ (8002458 <HAL_GPIO_Init+0x34c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x22a>
 8002332:	2306      	movs	r3, #6
 8002334:	e00c      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002336:	2307      	movs	r3, #7
 8002338:	e00a      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800233a:	2305      	movs	r3, #5
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800233e:	2304      	movs	r3, #4
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x244>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x244>
 800234e:	2300      	movs	r3, #0
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_GPIO_Init+0x334>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002392:	4a32      	ldr	r2, [pc, #200]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_GPIO_Init+0x350>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023bc:	4a27      	ldr	r2, [pc, #156]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c2:	4b26      	ldr	r3, [pc, #152]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e6:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_GPIO_Init+0x350>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <HAL_GPIO_Init+0x350>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	f47f ae78 	bne.w	800211c <HAL_GPIO_Init+0x10>
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800
 800244c:	48000c00 	.word	0x48000c00
 8002450:	48001000 	.word	0x48001000
 8002454:	48001400 	.word	0x48001400
 8002458:	48001800 	.word	0x48001800
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800247c:	e002      	b.n	8002484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43d9      	mvns	r1, r3
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	400b      	ands	r3, r1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f9a8 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HAL_PWREx_GetVoltageRange+0x18>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40007000 	.word	0x40007000

08002510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800251e:	d130      	bne.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002520:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800252c:	d038      	beq.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002536:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002538:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2232      	movs	r2, #50	@ 0x32
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9b      	lsrs	r3, r3, #18
 8002550:	3301      	adds	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002554:	e002      	b.n	800255c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3b01      	subs	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002568:	d102      	bne.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f2      	bne.n	8002556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257c:	d110      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e00f      	b.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258e:	d007      	beq.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002590:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002598:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000
 80025b4:	20000000 	.word	0x20000000
 80025b8:	431bde83 	.word	0x431bde83

080025bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e3ca      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ce:	4b97      	ldr	r3, [pc, #604]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d8:	4b94      	ldr	r3, [pc, #592]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80e4 	beq.w	80027b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_RCC_OscConfig+0x4a>
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	f040 808b 	bne.w	8002714 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 8087 	bne.w	8002714 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e3a2      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	4b82      	ldr	r3, [pc, #520]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_RCC_OscConfig+0x7c>
 800262e:	4b7f      	ldr	r3, [pc, #508]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002636:	e005      	b.n	8002644 <HAL_RCC_OscConfig+0x88>
 8002638:	4b7c      	ldr	r3, [pc, #496]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002644:	4293      	cmp	r3, r2
 8002646:	d223      	bcs.n	8002690 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fd87 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e383      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265c:	4b73      	ldr	r3, [pc, #460]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a72      	ldr	r2, [pc, #456]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b70      	ldr	r3, [pc, #448]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	496d      	ldr	r1, [pc, #436]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267a:	4b6c      	ldr	r3, [pc, #432]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4968      	ldr	r1, [pc, #416]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
 800268e:	e025      	b.n	80026dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002690:	4b66      	ldr	r3, [pc, #408]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a65      	ldr	r2, [pc, #404]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b63      	ldr	r3, [pc, #396]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4960      	ldr	r1, [pc, #384]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	4b5f      	ldr	r3, [pc, #380]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	495b      	ldr	r1, [pc, #364]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fd47 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e343      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026dc:	f000 fc4a 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b52      	ldr	r3, [pc, #328]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	4950      	ldr	r1, [pc, #320]	@ (8002830 <HAL_RCC_OscConfig+0x274>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002834 <HAL_RCC_OscConfig+0x278>)
 80026fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f9f9 	bl	8001af8 <HAL_InitTick>
 8002706:	4603      	mov	r3, r0
 8002708:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d052      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	e327      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d032      	beq.n	8002782 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800271c:	4b43      	ldr	r3, [pc, #268]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a42      	ldr	r2, [pc, #264]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002728:	f7ff fbd0 	bl	8001ecc <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002730:	f7ff fbcc 	bl	8001ecc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e310      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002742:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a36      	ldr	r2, [pc, #216]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b34      	ldr	r3, [pc, #208]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4931      	ldr	r1, [pc, #196]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276c:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	492c      	ldr	r1, [pc, #176]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e01a      	b.n	80027b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a29      	ldr	r2, [pc, #164]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800278e:	f7ff fb9d 	bl	8001ecc <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002796:	f7ff fb99 	bl	8001ecc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e2dd      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a8:	4b20      	ldr	r3, [pc, #128]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x1da>
 80027b4:	e000      	b.n	80027b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d074      	beq.n	80028ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x21a>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d10e      	bne.n	80027ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d10b      	bne.n	80027ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d064      	beq.n	80028ac <HAL_RCC_OscConfig+0x2f0>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d160      	bne.n	80028ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e2ba      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x24a>
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0b      	ldr	r2, [pc, #44]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e026      	b.n	8002854 <HAL_RCC_OscConfig+0x298>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800280e:	d115      	bne.n	800283c <HAL_RCC_OscConfig+0x280>
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a05      	ldr	r2, [pc, #20]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002816:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a02      	ldr	r2, [pc, #8]	@ (800282c <HAL_RCC_OscConfig+0x270>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x298>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	0801d994 	.word	0x0801d994
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004
 800283c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a9f      	ldr	r2, [pc, #636]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b9d      	ldr	r3, [pc, #628]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff fb36 	bl	8001ecc <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff fb32 	bl	8001ecc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e276      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002876:	4b92      	ldr	r3, [pc, #584]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x2a8>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff fb22 	bl	8001ecc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7ff fb1e 	bl	8001ecc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e262      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289e:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x2d0>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d060      	beq.n	800297c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x310>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d116      	bne.n	80028fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028cc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x328>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e23f      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	4973      	ldr	r1, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f8:	e040      	b.n	800297c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d023      	beq.n	800294a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002902:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff fadd 	bl	8001ecc <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff fad9 	bl	8001ecc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e21d      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002928:	4b65      	ldr	r3, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b62      	ldr	r3, [pc, #392]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	495f      	ldr	r1, [pc, #380]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e018      	b.n	800297c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7ff fab9 	bl	8001ecc <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295e:	f7ff fab5 	bl	8001ecc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1f9      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01c      	beq.n	80029ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002990:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002996:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7ff fa94 	bl	8001ecc <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fa90 	bl	8001ecc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1d4      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCC_OscConfig+0x3ec>
 80029c8:	e01b      	b.n	8002a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7ff fa77 	bl	8001ecc <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff fa73 	bl	8001ecc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e1b7      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f4:	4b32      	ldr	r3, [pc, #200]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ef      	bne.n	80029e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80a6 	beq.w	8002b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a14:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <HAL_RCC_OscConfig+0x508>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d118      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <HAL_RCC_OscConfig+0x508>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_RCC_OscConfig+0x508>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a54:	f7ff fa3a 	bl	8001ecc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5c:	f7ff fa36 	bl	8001ecc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e17a      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_RCC_OscConfig+0x508>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d108      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4d8>
 8002a82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a92:	e029      	b.n	8002ae8 <HAL_RCC_OscConfig+0x52c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d115      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x50c>
 8002a9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	4a07      	ldr	r2, [pc, #28]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a03      	ldr	r2, [pc, #12]	@ (8002ac0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x52c>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	4a9b      	ldr	r2, [pc, #620]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ad8:	4b98      	ldr	r3, [pc, #608]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	4a97      	ldr	r2, [pc, #604]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7ff f9ec 	bl	8001ecc <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7ff f9e8 	bl	8001ecc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e12a      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ed      	beq.n	8002af8 <HAL_RCC_OscConfig+0x53c>
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7ff f9d5 	bl	8001ecc <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7ff f9d1 	bl	8001ecc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e113      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ed      	bne.n	8002b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b7a      	ldr	r3, [pc, #488]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b54:	4a79      	ldr	r2, [pc, #484]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80fe 	beq.w	8002d62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f040 80d0 	bne.w	8002d10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b70:	4b72      	ldr	r3, [pc, #456]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d130      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d127      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11f      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb0:	2a07      	cmp	r2, #7
 8002bb2:	bf14      	ite	ne
 8002bb4:	2201      	movne	r2, #1
 8002bb6:	2200      	moveq	r2, #0
 8002bb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	3b01      	subs	r3, #1
 8002be0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d06e      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d069      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bec:	4b53      	ldr	r3, [pc, #332]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bf8:	4b50      	ldr	r3, [pc, #320]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0ad      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c08:	4b4c      	ldr	r3, [pc, #304]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c14:	f7ff f95a 	bl	8001ecc <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff f956 	bl	8001ecc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e09a      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2e:	4b43      	ldr	r3, [pc, #268]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3a:	4b40      	ldr	r3, [pc, #256]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <HAL_RCC_OscConfig+0x784>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c4a:	3a01      	subs	r2, #1
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c5c:	0852      	lsrs	r2, r2, #1
 8002c5e:	3a01      	subs	r2, #1
 8002c60:	0552      	lsls	r2, r2, #21
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c68:	0852      	lsrs	r2, r2, #1
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0652      	lsls	r2, r2, #25
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c74:	0912      	lsrs	r2, r2, #4
 8002c76:	0452      	lsls	r2, r2, #17
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4930      	ldr	r1, [pc, #192]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c80:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2d      	ldr	r2, [pc, #180]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a2a      	ldr	r2, [pc, #168]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c98:	f7ff f918 	bl	8001ecc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff f914 	bl	8001ecc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e058      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb2:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cbe:	e050      	b.n	8002d62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e04f      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d148      	bne.n	8002d62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce8:	f7ff f8f0 	bl	8001ecc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7ff f8ec 	bl	8001ecc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e030      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x734>
 8002d0e:	e028      	b.n	8002d62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d023      	beq.n	8002d5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <HAL_RCC_OscConfig+0x780>)
 8002d1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff f8d3 	bl	8001ecc <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d28:	e00c      	b.n	8002d44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7ff f8cf 	bl	8001ecc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d905      	bls.n	8002d44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e013      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_OscConfig+0x7b0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ec      	bne.n	8002d2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <HAL_RCC_OscConfig+0x7b0>)
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	4905      	ldr	r1, [pc, #20]	@ (8002d6c <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_RCC_OscConfig+0x7b4>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e001      	b.n	8002d62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	feeefffc 	.word	0xfeeefffc

08002d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0e7      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b75      	ldr	r3, [pc, #468]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b72      	ldr	r3, [pc, #456]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4970      	ldr	r1, [pc, #448]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0cf      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4960      	ldr	r1, [pc, #384]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d04c      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0a6      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e12:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d115      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e09a      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e08e      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e086      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b46      	ldr	r3, [pc, #280]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4943      	ldr	r1, [pc, #268]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f836 	bl	8001ecc <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff f832 	bl	8001ecc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e06e      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	4b31      	ldr	r3, [pc, #196]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d208      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	492b      	ldr	r1, [pc, #172]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d210      	bcs.n	8002eea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec8:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 0207 	bic.w	r2, r3, #7
 8002ed0:	4923      	ldr	r1, [pc, #140]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed8:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_RCC_ClockConfig+0x1ec>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e036      	b.n	8002f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4918      	ldr	r1, [pc, #96]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f14:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4910      	ldr	r1, [pc, #64]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f28:	f000 f824 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	490b      	ldr	r1, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x1f4>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f8>)
 8002f46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1fc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fdd3 	bl	8001af8 <HAL_InitTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	0801d994 	.word	0x0801d994
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	4b3e      	ldr	r3, [pc, #248]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d121      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d11e      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa8:	4b34      	ldr	r3, [pc, #208]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb4:	4b31      	ldr	r3, [pc, #196]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d102      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e004      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff8:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d134      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003002:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0xa6>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d003      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xac>
 8003018:	e005      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8003022:	617b      	str	r3, [r7, #20]
      break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302c:	4b13      	ldr	r3, [pc, #76]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	3301      	adds	r3, #1
 8003038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	fb03 f202 	mul.w	r2, r3, r2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0e5b      	lsrs	r3, r3, #25
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	3301      	adds	r3, #1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800306c:	69bb      	ldr	r3, [r7, #24]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	0801d9ac 	.word	0x0801d9ac
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4904      	ldr	r1, [pc, #16]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0801d9a4 	.word	0x0801d9a4

080030d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030d4:	f7ff ffda 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0adb      	lsrs	r3, r3, #11
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	@ (80030f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0801d9a4 	.word	0x0801d9a4

080030fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	220f      	movs	r2, #15
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800313e:	4b07      	ldr	r3, [pc, #28]	@ (800315c <HAL_RCC_GetClockConfig+0x60>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	40022000 	.word	0x40022000

08003160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800316c:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003178:	f7ff f9bc 	bl	80024f4 <HAL_PWREx_GetVoltageRange>
 800317c:	6178      	str	r0, [r7, #20]
 800317e:	e014      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	4a24      	ldr	r2, [pc, #144]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	@ 0x58
 800318c:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003198:	f7ff f9ac 	bl	80024f4 <HAL_PWREx_GetVoltageRange>
 800319c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b0:	d10b      	bne.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	d919      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80031bc:	d902      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031be:	2302      	movs	r3, #2
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e013      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e010      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b80      	cmp	r3, #128	@ 0x80
 80031ce:	d902      	bls.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031d0:	2303      	movs	r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e00a      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	@ 0x80
 80031da:	d102      	bne.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e004      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b70      	cmp	r3, #112	@ 0x70
 80031e6:	d101      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 0207 	bic.w	r2, r3, #7
 80031f4:	4909      	ldr	r1, [pc, #36]	@ (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031fc:	4b07      	ldr	r3, [pc, #28]	@ (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40022000 	.word	0x40022000

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003228:	2300      	movs	r3, #0
 800322a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800322c:	2300      	movs	r3, #0
 800322e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003238:	2b00      	cmp	r3, #0
 800323a:	d041      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003240:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003244:	d02a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003246:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800324a:	d824      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800324c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003250:	d008      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003256:	d81e      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003260:	d010      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003262:	e018      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003264:	4b86      	ldr	r3, [pc, #536]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a85      	ldr	r2, [pc, #532]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e015      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fabb 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003282:	e00c      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3320      	adds	r3, #32
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fba6 	bl	80039dc <RCCEx_PLLSAI2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	74fb      	strb	r3, [r7, #19]
      break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a4:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032b2:	4973      	ldr	r1, [pc, #460]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d041      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032d4:	d02a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032da:	d824      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e6:	d81e      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f0:	d010      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032f2:	e018      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f4:	4b62      	ldr	r3, [pc, #392]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a61      	ldr	r2, [pc, #388]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e015      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fa73 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003312:	e00c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3320      	adds	r3, #32
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb5e 	bl	80039dc <RCCEx_PLLSAI2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	74fb      	strb	r3, [r7, #19]
      break;
 800332a:	e000      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800332c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003334:	4b52      	ldr	r3, [pc, #328]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003342:	494f      	ldr	r1, [pc, #316]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a0 	beq.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b41      	ldr	r3, [pc, #260]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	4a40      	ldr	r2, [pc, #256]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6593      	str	r3, [r2, #88]	@ 0x58
 8003384:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003390:	2301      	movs	r3, #1
 8003392:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3a      	ldr	r2, [pc, #232]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033a0:	f7fe fd94 	bl	8001ecc <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a6:	e009      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fe fd90 	bl	8001ecc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ba:	e005      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033bc:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d15c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d019      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ec:	4b24      	ldr	r3, [pc, #144]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a20      	ldr	r2, [pc, #128]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003408:	4b1d      	ldr	r3, [pc, #116]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fd4f 	bl	8001ecc <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003430:	e00b      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe fd4b 	bl	8001ecc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d902      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	74fb      	strb	r3, [r7, #19]
            break;
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ec      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346e:	4904      	ldr	r1, [pc, #16]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003476:	e009      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348c:	7c7b      	ldrb	r3, [r7, #17]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b9e      	ldr	r3, [pc, #632]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	4a9d      	ldr	r2, [pc, #628]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034aa:	4b98      	ldr	r3, [pc, #608]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f023 0203 	bic.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	4994      	ldr	r1, [pc, #592]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034cc:	4b8f      	ldr	r3, [pc, #572]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	f023 020c 	bic.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034da:	498c      	ldr	r1, [pc, #560]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ee:	4b87      	ldr	r3, [pc, #540]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	4983      	ldr	r1, [pc, #524]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003510:	4b7e      	ldr	r3, [pc, #504]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	497b      	ldr	r1, [pc, #492]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003540:	4972      	ldr	r1, [pc, #456]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003554:	4b6d      	ldr	r3, [pc, #436]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	496a      	ldr	r1, [pc, #424]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003576:	4b65      	ldr	r3, [pc, #404]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	4961      	ldr	r1, [pc, #388]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003598:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	4959      	ldr	r1, [pc, #356]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ba:	4b54      	ldr	r3, [pc, #336]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c8:	4950      	ldr	r1, [pc, #320]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035dc:	4b4b      	ldr	r3, [pc, #300]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	4948      	ldr	r1, [pc, #288]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fe:	4b43      	ldr	r3, [pc, #268]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	493f      	ldr	r1, [pc, #252]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d028      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003620:	4b3a      	ldr	r3, [pc, #232]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363e:	d106      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003640:	4b32      	ldr	r3, [pc, #200]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a31      	ldr	r2, [pc, #196]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364a:	60d3      	str	r3, [r2, #12]
 800364c:	e011      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003656:	d10c      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8c8 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800367e:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	491f      	ldr	r1, [pc, #124]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369c:	d106      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a8:	60d3      	str	r3, [r2, #12]
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f899 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ea:	4908      	ldr	r1, [pc, #32]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036fa:	d109      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a02      	ldr	r2, [pc, #8]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
 8003708:	e014      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003718:	d10c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f867 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800374e:	4928      	ldr	r1, [pc, #160]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800375e:	d10d      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f844 	bl	80037f4 <RCCEx_PLLSAI1_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d014      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	74bb      	strb	r3, [r7, #18]
 800377a:	e011      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3320      	adds	r3, #32
 800378a:	2102      	movs	r1, #2
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f925 	bl	80039dc <RCCEx_PLLSAI2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037ac:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ba:	490d      	ldr	r1, [pc, #52]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ce:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037de:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000

080037f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003802:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800380e:	4b72      	ldr	r3, [pc, #456]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0203 	and.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d10d      	bne.n	800383a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
       ||
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003826:	4b6c      	ldr	r3, [pc, #432]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
       ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d047      	beq.n	80038ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
 800383e:	e044      	b.n	80038ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d018      	beq.n	800387a <RCCEx_PLLSAI1_Config+0x86>
 8003848:	2b03      	cmp	r3, #3
 800384a:	d825      	bhi.n	8003898 <RCCEx_PLLSAI1_Config+0xa4>
 800384c:	2b01      	cmp	r3, #1
 800384e:	d002      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x62>
 8003850:	2b02      	cmp	r3, #2
 8003852:	d009      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x74>
 8003854:	e020      	b.n	8003898 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003856:	4b60      	ldr	r3, [pc, #384]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11d      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003866:	e01a      	b.n	800389e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003868:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d116      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003878:	e013      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800387a:	4b57      	ldr	r3, [pc, #348]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003886:	4b54      	ldr	r3, [pc, #336]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003896:	e006      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e004      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ae:	4b4a      	ldr	r3, [pc, #296]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	430b      	orrs	r3, r1
 80038c4:	4944      	ldr	r1, [pc, #272]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d17d      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038d0:	4b41      	ldr	r3, [pc, #260]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a40      	ldr	r2, [pc, #256]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038dc:	f7fe faf6 	bl	8001ecc <HAL_GetTick>
 80038e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e2:	e009      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e4:	f7fe faf2 	bl	8001ecc <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d902      	bls.n	80038f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	73fb      	strb	r3, [r7, #15]
        break;
 80038f6:	e005      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f8:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ef      	bne.n	80038e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d160      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d111      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003910:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	0211      	lsls	r1, r2, #8
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d2      	ldr	r2, [r2, #12]
 8003926:	0912      	lsrs	r2, r2, #4
 8003928:	0452      	lsls	r2, r2, #17
 800392a:	430a      	orrs	r2, r1
 800392c:	492a      	ldr	r1, [pc, #168]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]
 8003932:	e027      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d112      	bne.n	8003960 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393a:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003942:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6892      	ldr	r2, [r2, #8]
 800394a:	0211      	lsls	r1, r2, #8
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6912      	ldr	r2, [r2, #16]
 8003950:	0852      	lsrs	r2, r2, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	0552      	lsls	r2, r2, #21
 8003956:	430a      	orrs	r2, r1
 8003958:	491f      	ldr	r1, [pc, #124]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	4313      	orrs	r3, r2
 800395c:	610b      	str	r3, [r1, #16]
 800395e:	e011      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003968:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6952      	ldr	r2, [r2, #20]
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0652      	lsls	r2, r2, #25
 800397c:	430a      	orrs	r2, r1
 800397e:	4916      	ldr	r1, [pc, #88]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800398e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fe fa9c 	bl	8001ecc <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003996:	e009      	b.n	80039ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003998:	f7fe fa98 	bl	8001ecc <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d902      	bls.n	80039ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	73fb      	strb	r3, [r7, #15]
          break;
 80039aa:	e005      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4904      	ldr	r1, [pc, #16]	@ (80039d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000

080039dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039f6:	4b67      	ldr	r3, [pc, #412]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
       ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a0e:	4b61      	ldr	r3, [pc, #388]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d047      	beq.n	8003ab2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e044      	b.n	8003ab2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d018      	beq.n	8003a62 <RCCEx_PLLSAI2_Config+0x86>
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d825      	bhi.n	8003a80 <RCCEx_PLLSAI2_Config+0xa4>
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d002      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x62>
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d009      	beq.n	8003a50 <RCCEx_PLLSAI2_Config+0x74>
 8003a3c:	e020      	b.n	8003a80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a3e:	4b55      	ldr	r3, [pc, #340]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11d      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e01a      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a50:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e013      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a62:	4b4c      	ldr	r3, [pc, #304]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a7e:	e006      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e004      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a96:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	4939      	ldr	r1, [pc, #228]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d167      	bne.n	8003b88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a35      	ldr	r2, [pc, #212]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fa02 	bl	8001ecc <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aca:	e009      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003acc:	f7fe f9fe 	bl	8001ecc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ade:	e005      	b.n	8003aec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ef      	bne.n	8003acc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14a      	bne.n	8003b88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d111      	bne.n	8003b1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	0912      	lsrs	r2, r2, #4
 8003b10:	0452      	lsls	r2, r2, #17
 8003b12:	430a      	orrs	r2, r1
 8003b14:	491f      	ldr	r1, [pc, #124]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	614b      	str	r3, [r1, #20]
 8003b1a:	e011      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	0211      	lsls	r1, r2, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6912      	ldr	r2, [r2, #16]
 8003b32:	0852      	lsrs	r2, r2, #1
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0652      	lsls	r2, r2, #25
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4916      	ldr	r1, [pc, #88]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b40:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe f9be 	bl	8001ecc <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b54:	f7fe f9ba 	bl	8001ecc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
          break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4904      	ldr	r1, [pc, #16]	@ (8003b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e095      	b.n	8003cd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fec6 	bl	800197c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c10:	d902      	bls.n	8003c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e002      	b.n	8003c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c26:	d007      	beq.n	8003c38 <HAL_SPI_Init+0xa0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	f003 0204 	and.w	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cb4:	ea42 0103 	orr.w	r1, r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b088      	sub	sp, #32
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cee:	f7fe f8ed 	bl	8001ecc <HAL_GetTick>
 8003cf2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d001      	beq.n	8003d08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
 8003d06:	e15c      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Transmit+0x36>
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e154      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Transmit+0x48>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e14d      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d78:	d10f      	bne.n	8003d9a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b40      	cmp	r3, #64	@ 0x40
 8003da6:	d007      	beq.n	8003db8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dc0:	d952      	bls.n	8003e68 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Transmit+0xf2>
 8003dca:	8b7b      	ldrh	r3, [r7, #26]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d145      	bne.n	8003e5c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	881a      	ldrh	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df4:	e032      	b.n	8003e5c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d112      	bne.n	8003e2a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e28:	e018      	b.n	8003e5c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2a:	f7fe f84f 	bl	8001ecc <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d803      	bhi.n	8003e42 <HAL_SPI_Transmit+0x164>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d102      	bne.n	8003e48 <HAL_SPI_Transmit+0x16a>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0b2      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1c7      	bne.n	8003df6 <HAL_SPI_Transmit+0x118>
 8003e66:	e083      	b.n	8003f70 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SPI_Transmit+0x198>
 8003e70:	8b7b      	ldrh	r3, [r7, #26]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d177      	bne.n	8003f66 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d912      	bls.n	8003ea6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ea4:	e05f      	b.n	8003f66 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ecc:	e04b      	b.n	8003f66 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d12b      	bne.n	8003f34 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d912      	bls.n	8003f0c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b02      	subs	r3, #2
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f0a:	e02c      	b.n	8003f66 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f32:	e018      	b.n	8003f66 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f34:	f7fd ffca 	bl	8001ecc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d803      	bhi.n	8003f4c <HAL_SPI_Transmit+0x26e>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d102      	bne.n	8003f52 <HAL_SPI_Transmit+0x274>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e02d      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ae      	bne.n	8003ece <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fcf5 	bl	8004964 <SPI_EndRxTxTransaction>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e123      	b.n	8004232 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff2:	d112      	bne.n	800401a <HAL_SPI_Receive+0x50>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10e      	bne.n	800401a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2204      	movs	r2, #4
 8004000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f912 	bl	800423a <HAL_SPI_TransmitReceive>
 8004016:	4603      	mov	r3, r0
 8004018:	e10b      	b.n	8004232 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401a:	f7fd ff57 	bl	8001ecc <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_Receive+0x62>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e100      	b.n	8004232 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_SPI_Receive+0x74>
 800403a:	2302      	movs	r3, #2
 800403c:	e0f9      	b.n	8004232 <HAL_SPI_Receive+0x268>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2204      	movs	r2, #4
 800404a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004090:	d908      	bls.n	80040a4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e007      	b.n	80040b4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040bc:	d10f      	bne.n	80040de <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004104:	d875      	bhi.n	80041f2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004106:	e037      	b.n	8004178 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d117      	bne.n	8004146 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f103 020c 	add.w	r2, r3, #12
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004144:	e018      	b.n	8004178 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004146:	f7fd fec1 	bl	8001ecc <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_Receive+0x194>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d102      	bne.n	8004164 <HAL_SPI_Receive+0x19a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e05c      	b.n	8004232 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1c1      	bne.n	8004108 <HAL_SPI_Receive+0x13e>
 8004184:	e03b      	b.n	80041fe <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d115      	bne.n	80041c0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	b292      	uxth	r2, r2
 80041a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80041be:	e018      	b.n	80041f2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c0:	f7fd fe84 	bl	8001ecc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d803      	bhi.n	80041d8 <HAL_SPI_Receive+0x20e>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d102      	bne.n	80041de <HAL_SPI_Receive+0x214>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e01f      	b.n	8004232 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1c3      	bne.n	8004186 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fb56 	bl	80048b4 <SPI_EndRxTransaction>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004230:	2300      	movs	r3, #0
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b08a      	sub	sp, #40	@ 0x28
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004248:	2301      	movs	r3, #1
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424c:	f7fd fe3e 	bl	8001ecc <HAL_GetTick>
 8004250:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004258:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d00c      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x4e>
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004274:	d106      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x4a>
 800427e:	7ffb      	ldrb	r3, [r7, #31]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d001      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
 8004286:	e1f3      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_SPI_TransmitReceive+0x60>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_TransmitReceive+0x60>
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e1e8      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x72>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e1e1      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d003      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2205      	movs	r2, #5
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800430a:	d802      	bhi.n	8004312 <HAL_SPI_TransmitReceive+0xd8>
 800430c:	8abb      	ldrh	r3, [r7, #20]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d908      	bls.n	8004324 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	e007      	b.n	8004334 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	2b40      	cmp	r3, #64	@ 0x40
 8004340:	d007      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800435a:	f240 8083 	bls.w	8004464 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_TransmitReceive+0x132>
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d16f      	bne.n	800444c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	e05c      	b.n	800444c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11b      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x19e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x19e>
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d113      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d11c      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x1e6>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	b292      	uxth	r2, r2
 80043fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004420:	f7fd fd54 	bl	8001ecc <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442c:	429a      	cmp	r2, r3
 800442e:	d80d      	bhi.n	800444c <HAL_SPI_TransmitReceive+0x212>
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d009      	beq.n	800444c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e111      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d19d      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x158>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d197      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x158>
 8004462:	e0e5      	b.n	8004630 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x23a>
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	2b01      	cmp	r3, #1
 8004470:	f040 80d1 	bne.w	8004616 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d912      	bls.n	80044a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b02      	subs	r3, #2
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044a2:	e0b8      	b.n	8004616 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ca:	e0a4      	b.n	8004616 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d134      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x30a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x30a>
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d12c      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d912      	bls.n	800451a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b02      	subs	r3, #2
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004518:	e012      	b.n	8004540 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d148      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x3aa>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d042      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d923      	bls.n	80045b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b02      	subs	r3, #2
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d81f      	bhi.n	80045e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	e016      	b.n	80045e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f103 020c 	add.w	r2, r3, #12
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045e4:	f7fd fc72 	bl	8001ecc <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d803      	bhi.n	80045fc <HAL_SPI_TransmitReceive+0x3c2>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x3c8>
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e02c      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f af55 	bne.w	80044cc <HAL_SPI_TransmitReceive+0x292>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f47f af4e 	bne.w	80044cc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f995 	bl	8004964 <SPI_EndRxTxTransaction>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e00e      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004688:	f7fd fc20 	bl	8001ecc <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	4413      	add	r3, r2
 8004696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004698:	f7fd fc18 	bl	8001ecc <HAL_GetTick>
 800469c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800469e:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	015b      	lsls	r3, r3, #5
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	fb02 f303 	mul.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ae:	e054      	b.n	800475a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d050      	beq.n	800475a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046b8:	f7fd fc08 	bl	8001ecc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d13d      	bne.n	800474a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e6:	d111      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0x94>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f0:	d004      	beq.n	80046fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d107      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800470a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d10f      	bne.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e017      	b.n	800477a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3b01      	subs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d19b      	bne.n	80046b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000000 	.word	0x20000000

08004788 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800479a:	f7fd fb97 	bl	8001ecc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4413      	add	r3, r2
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80047aa:	f7fd fb8f 	bl	8001ecc <HAL_GetTick>
 80047ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047b8:	4b3d      	ldr	r3, [pc, #244]	@ (80048b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	0d1b      	lsrs	r3, r3, #20
 80047c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047d0:	e060      	b.n	8004894 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80047d8:	d107      	bne.n	80047ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d050      	beq.n	8004894 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047f2:	f7fd fb6b 	bl	8001ecc <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fe:	429a      	cmp	r2, r3
 8004800:	d902      	bls.n	8004808 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d13d      	bne.n	8004884 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004820:	d111      	bne.n	8004846 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800482a:	d004      	beq.n	8004836 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004834:	d107      	bne.n	8004846 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484e:	d10f      	bne.n	8004870 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800486e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e010      	b.n	80048a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3b01      	subs	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d196      	bne.n	80047d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3728      	adds	r7, #40	@ 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000000 	.word	0x20000000

080048b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048c8:	d111      	bne.n	80048ee <SPI_EndRxTransaction+0x3a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d2:	d004      	beq.n	80048de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d107      	bne.n	80048ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	@ 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff febd 	bl	8004678 <SPI_WaitFlagStateUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e023      	b.n	800495c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491c:	d11d      	bne.n	800495a <SPI_EndRxTransaction+0xa6>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004926:	d004      	beq.n	8004932 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004930:	d113      	bne.n	800495a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff22 	bl	8004788 <SPI_WaitFifoStateUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e000      	b.n	800495c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ff03 	bl	8004788 <SPI_WaitFifoStateUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e027      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	@ 0x80
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff fe68 	bl	8004678 <SPI_WaitFlagStateUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e014      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff fedc 	bl	8004788 <SPI_WaitFifoStateUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049da:	f043 0220 	orr.w	r2, r3, #32
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e000      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f841 	bl	8004a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f9e0 	bl	8004df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e04f      	b.n	8004b6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a23      	ldr	r2, [pc, #140]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d018      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0x76>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a19      	ldr	r2, [pc, #100]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d115      	bne.n	8004b56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d015      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0xb4>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b42:	d011      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	e008      	b.n	8004b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e000      	b.n	8004b6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	00010007 	.word	0x00010007

08004b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d020      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01b      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0202 	mvn.w	r2, #2
 8004bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8e9 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8db 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f8ec 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d020      	beq.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01b      	beq.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0204 	mvn.w	r2, #4
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8c3 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8b5 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8c6 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d020      	beq.n	8004c90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0208 	mvn.w	r2, #8
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f89d 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f88f 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8a0 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d020      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0210 	mvn.w	r2, #16
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f877 	bl	8004db6 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f869 	bl	8004da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f87a 	bl	8004dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0201 	mvn.w	r2, #1
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fde0 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f913 	bl	8004f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f90b 	bl	8004f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00c      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f834 	bl	8004dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0220 	mvn.w	r2, #32
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8d3 	bl	8004f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a46      	ldr	r2, [pc, #280]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a43      	ldr	r2, [pc, #268]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a41      	ldr	r2, [pc, #260]	@ (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a40      	ldr	r2, [pc, #256]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a35      	ldr	r2, [pc, #212]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d01b      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a32      	ldr	r2, [pc, #200]	@ (8004f24 <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a31      	ldr	r2, [pc, #196]	@ (8004f28 <TIM_Base_SetConfig+0x134>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a30      	ldr	r2, [pc, #192]	@ (8004f2c <TIM_Base_SetConfig+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <TIM_Base_SetConfig+0x140>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2d      	ldr	r2, [pc, #180]	@ (8004f38 <TIM_Base_SetConfig+0x144>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	@ (8004f3c <TIM_Base_SetConfig+0x148>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <TIM_Base_SetConfig+0x12c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <TIM_Base_SetConfig+0x13c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a17      	ldr	r2, [pc, #92]	@ (8004f34 <TIM_Base_SetConfig+0x140>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <TIM_Base_SetConfig+0x144>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0xf8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <TIM_Base_SetConfig+0x148>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
  }
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40013400 	.word	0x40013400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e040      	b.n	8005010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fd4e 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	@ 0x24
 8004fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fae0 	bl	8005588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f825 	bl	8005018 <UART_SetConfig>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e01b      	b.n	8005010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb5f 	bl	80056cc <UART_CheckIdleState>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b08a      	sub	sp, #40	@ 0x28
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	4313      	orrs	r3, r2
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4ba4      	ldr	r3, [pc, #656]	@ (80052d8 <UART_SetConfig+0x2c0>)
 8005048:	4013      	ands	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005050:	430b      	orrs	r3, r1
 8005052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a99      	ldr	r2, [pc, #612]	@ (80052dc <UART_SetConfig+0x2c4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005080:	4313      	orrs	r3, r2
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a90      	ldr	r2, [pc, #576]	@ (80052e0 <UART_SetConfig+0x2c8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d126      	bne.n	80050f0 <UART_SetConfig+0xd8>
 80050a2:	4b90      	ldr	r3, [pc, #576]	@ (80052e4 <UART_SetConfig+0x2cc>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d81b      	bhi.n	80050e8 <UART_SetConfig+0xd0>
 80050b0:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <UART_SetConfig+0xa0>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e116      	b.n	80052fe <UART_SetConfig+0x2e6>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e112      	b.n	80052fe <UART_SetConfig+0x2e6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e10e      	b.n	80052fe <UART_SetConfig+0x2e6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e10a      	b.n	80052fe <UART_SetConfig+0x2e6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e106      	b.n	80052fe <UART_SetConfig+0x2e6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a7c      	ldr	r2, [pc, #496]	@ (80052e8 <UART_SetConfig+0x2d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d138      	bne.n	800516c <UART_SetConfig+0x154>
 80050fa:	4b7a      	ldr	r3, [pc, #488]	@ (80052e4 <UART_SetConfig+0x2cc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d82d      	bhi.n	8005164 <UART_SetConfig+0x14c>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0xf8>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005145 	.word	0x08005145
 8005114:	08005165 	.word	0x08005165
 8005118:	08005165 	.word	0x08005165
 800511c:	08005165 	.word	0x08005165
 8005120:	08005155 	.word	0x08005155
 8005124:	08005165 	.word	0x08005165
 8005128:	08005165 	.word	0x08005165
 800512c:	08005165 	.word	0x08005165
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005165 	.word	0x08005165
 8005138:	08005165 	.word	0x08005165
 800513c:	08005165 	.word	0x08005165
 8005140:	0800515d 	.word	0x0800515d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e0d8      	b.n	80052fe <UART_SetConfig+0x2e6>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e0d4      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e0d0      	b.n	80052fe <UART_SetConfig+0x2e6>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005162:	e0cc      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516a:	e0c8      	b.n	80052fe <UART_SetConfig+0x2e6>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5e      	ldr	r2, [pc, #376]	@ (80052ec <UART_SetConfig+0x2d4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d125      	bne.n	80051c2 <UART_SetConfig+0x1aa>
 8005176:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <UART_SetConfig+0x2cc>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005180:	2b30      	cmp	r3, #48	@ 0x30
 8005182:	d016      	beq.n	80051b2 <UART_SetConfig+0x19a>
 8005184:	2b30      	cmp	r3, #48	@ 0x30
 8005186:	d818      	bhi.n	80051ba <UART_SetConfig+0x1a2>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d00a      	beq.n	80051a2 <UART_SetConfig+0x18a>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d814      	bhi.n	80051ba <UART_SetConfig+0x1a2>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <UART_SetConfig+0x182>
 8005194:	2b10      	cmp	r3, #16
 8005196:	d008      	beq.n	80051aa <UART_SetConfig+0x192>
 8005198:	e00f      	b.n	80051ba <UART_SetConfig+0x1a2>
 800519a:	2300      	movs	r3, #0
 800519c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a0:	e0ad      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051a2:	2302      	movs	r3, #2
 80051a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a8:	e0a9      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051aa:	2304      	movs	r3, #4
 80051ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b0:	e0a5      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051b2:	2308      	movs	r3, #8
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b8:	e0a1      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051ba:	2310      	movs	r3, #16
 80051bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c0:	e09d      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a4a      	ldr	r2, [pc, #296]	@ (80052f0 <UART_SetConfig+0x2d8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d125      	bne.n	8005218 <UART_SetConfig+0x200>
 80051cc:	4b45      	ldr	r3, [pc, #276]	@ (80052e4 <UART_SetConfig+0x2cc>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051d8:	d016      	beq.n	8005208 <UART_SetConfig+0x1f0>
 80051da:	2bc0      	cmp	r3, #192	@ 0xc0
 80051dc:	d818      	bhi.n	8005210 <UART_SetConfig+0x1f8>
 80051de:	2b80      	cmp	r3, #128	@ 0x80
 80051e0:	d00a      	beq.n	80051f8 <UART_SetConfig+0x1e0>
 80051e2:	2b80      	cmp	r3, #128	@ 0x80
 80051e4:	d814      	bhi.n	8005210 <UART_SetConfig+0x1f8>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <UART_SetConfig+0x1d8>
 80051ea:	2b40      	cmp	r3, #64	@ 0x40
 80051ec:	d008      	beq.n	8005200 <UART_SetConfig+0x1e8>
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x1f8>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f6:	e082      	b.n	80052fe <UART_SetConfig+0x2e6>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fe:	e07e      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005206:	e07a      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520e:	e076      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005216:	e072      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <UART_SetConfig+0x2dc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d12a      	bne.n	8005278 <UART_SetConfig+0x260>
 8005222:	4b30      	ldr	r3, [pc, #192]	@ (80052e4 <UART_SetConfig+0x2cc>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005230:	d01a      	beq.n	8005268 <UART_SetConfig+0x250>
 8005232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005236:	d81b      	bhi.n	8005270 <UART_SetConfig+0x258>
 8005238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523c:	d00c      	beq.n	8005258 <UART_SetConfig+0x240>
 800523e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005242:	d815      	bhi.n	8005270 <UART_SetConfig+0x258>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <UART_SetConfig+0x238>
 8005248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x248>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x258>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005256:	e052      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525e:	e04e      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e04a      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800526e:	e046      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005276:	e042      	b.n	80052fe <UART_SetConfig+0x2e6>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a17      	ldr	r2, [pc, #92]	@ (80052dc <UART_SetConfig+0x2c4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d13a      	bne.n	80052f8 <UART_SetConfig+0x2e0>
 8005282:	4b18      	ldr	r3, [pc, #96]	@ (80052e4 <UART_SetConfig+0x2cc>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800528c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005290:	d01a      	beq.n	80052c8 <UART_SetConfig+0x2b0>
 8005292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005296:	d81b      	bhi.n	80052d0 <UART_SetConfig+0x2b8>
 8005298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529c:	d00c      	beq.n	80052b8 <UART_SetConfig+0x2a0>
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a2:	d815      	bhi.n	80052d0 <UART_SetConfig+0x2b8>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <UART_SetConfig+0x298>
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ac:	d008      	beq.n	80052c0 <UART_SetConfig+0x2a8>
 80052ae:	e00f      	b.n	80052d0 <UART_SetConfig+0x2b8>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b6:	e022      	b.n	80052fe <UART_SetConfig+0x2e6>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052be:	e01e      	b.n	80052fe <UART_SetConfig+0x2e6>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c6:	e01a      	b.n	80052fe <UART_SetConfig+0x2e6>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ce:	e016      	b.n	80052fe <UART_SetConfig+0x2e6>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d6:	e012      	b.n	80052fe <UART_SetConfig+0x2e6>
 80052d8:	efff69f3 	.word	0xefff69f3
 80052dc:	40008000 	.word	0x40008000
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40004800 	.word	0x40004800
 80052f0:	40004c00 	.word	0x40004c00
 80052f4:	40005000 	.word	0x40005000
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a9f      	ldr	r2, [pc, #636]	@ (8005580 <UART_SetConfig+0x568>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d17a      	bne.n	80053fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800530c:	2b08      	cmp	r3, #8
 800530e:	d824      	bhi.n	800535a <UART_SetConfig+0x342>
 8005310:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <UART_SetConfig+0x300>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800535b 	.word	0x0800535b
 8005320:	08005345 	.word	0x08005345
 8005324:	0800535b 	.word	0x0800535b
 8005328:	0800534b 	.word	0x0800534b
 800532c:	0800535b 	.word	0x0800535b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800535b 	.word	0x0800535b
 8005338:	08005353 	.word	0x08005353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fd feb2 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8005340:	61f8      	str	r0, [r7, #28]
        break;
 8005342:	e010      	b.n	8005366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005344:	4b8f      	ldr	r3, [pc, #572]	@ (8005584 <UART_SetConfig+0x56c>)
 8005346:	61fb      	str	r3, [r7, #28]
        break;
 8005348:	e00d      	b.n	8005366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fd fe13 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 800534e:	61f8      	str	r0, [r7, #28]
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005356:	61fb      	str	r3, [r7, #28]
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80fb 	beq.w	8005564 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	429a      	cmp	r2, r3
 800537c:	d305      	bcc.n	800538a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	d903      	bls.n	8005392 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005390:	e0e8      	b.n	8005564 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2200      	movs	r2, #0
 8005396:	461c      	mov	r4, r3
 8005398:	4615      	mov	r5, r2
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	022b      	lsls	r3, r5, #8
 80053a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053a8:	0222      	lsls	r2, r4, #8
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	6849      	ldr	r1, [r1, #4]
 80053ae:	0849      	lsrs	r1, r1, #1
 80053b0:	2000      	movs	r0, #0
 80053b2:	4688      	mov	r8, r1
 80053b4:	4681      	mov	r9, r0
 80053b6:	eb12 0a08 	adds.w	sl, r2, r8
 80053ba:	eb43 0b09 	adc.w	fp, r3, r9
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fa ff66 	bl	80002a0 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e2:	d308      	bcc.n	80053f6 <UART_SetConfig+0x3de>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ea:	d204      	bcs.n	80053f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e0b6      	b.n	8005564 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053fc:	e0b2      	b.n	8005564 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005406:	d15e      	bne.n	80054c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005408:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800540c:	2b08      	cmp	r3, #8
 800540e:	d828      	bhi.n	8005462 <UART_SetConfig+0x44a>
 8005410:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0x400>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800543d 	.word	0x0800543d
 800541c:	08005445 	.word	0x08005445
 8005420:	0800544d 	.word	0x0800544d
 8005424:	08005463 	.word	0x08005463
 8005428:	08005453 	.word	0x08005453
 800542c:	08005463 	.word	0x08005463
 8005430:	08005463 	.word	0x08005463
 8005434:	08005463 	.word	0x08005463
 8005438:	0800545b 	.word	0x0800545b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800543c:	f7fd fe32 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8005440:	61f8      	str	r0, [r7, #28]
        break;
 8005442:	e014      	b.n	800546e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7fd fe44 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8005448:	61f8      	str	r0, [r7, #28]
        break;
 800544a:	e010      	b.n	800546e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800544c:	4b4d      	ldr	r3, [pc, #308]	@ (8005584 <UART_SetConfig+0x56c>)
 800544e:	61fb      	str	r3, [r7, #28]
        break;
 8005450:	e00d      	b.n	800546e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005452:	f7fd fd8f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8005456:	61f8      	str	r0, [r7, #28]
        break;
 8005458:	e009      	b.n	800546e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e005      	b.n	800546e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800546c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d077      	beq.n	8005564 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	005a      	lsls	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	441a      	add	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b0f      	cmp	r3, #15
 800548e:	d916      	bls.n	80054be <UART_SetConfig+0x4a6>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005496:	d212      	bcs.n	80054be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f023 030f 	bic.w	r3, r3, #15
 80054a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	8afb      	ldrh	r3, [r7, #22]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	8afa      	ldrh	r2, [r7, #22]
 80054ba:	60da      	str	r2, [r3, #12]
 80054bc:	e052      	b.n	8005564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054c4:	e04e      	b.n	8005564 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d827      	bhi.n	800551e <UART_SetConfig+0x506>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x4bc>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005509 	.word	0x08005509
 80054e0:	0800551f 	.word	0x0800551f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	0800551f 	.word	0x0800551f
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	08005517 	.word	0x08005517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fd fdd4 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 80054fc:	61f8      	str	r0, [r7, #28]
        break;
 80054fe:	e014      	b.n	800552a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fd fde6 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8005504:	61f8      	str	r0, [r7, #28]
        break;
 8005506:	e010      	b.n	800552a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005508:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <UART_SetConfig+0x56c>)
 800550a:	61fb      	str	r3, [r7, #28]
        break;
 800550c:	e00d      	b.n	800552a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550e:	f7fd fd31 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8005512:	61f8      	str	r0, [r7, #28]
        break;
 8005514:	e009      	b.n	800552a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800551a:	61fb      	str	r3, [r7, #28]
        break;
 800551c:	e005      	b.n	800552a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005528:	bf00      	nop
    }

    if (pclk != 0U)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	085a      	lsrs	r2, r3, #1
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	441a      	add	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d909      	bls.n	800555e <UART_SetConfig+0x546>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005550:	d205      	bcs.n	800555e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e002      	b.n	8005564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	@ 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	40008000 	.word	0x40008000
 8005584:	00f42400 	.word	0x00f42400

08005588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005686:	d10a      	bne.n	800569e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	@ 0x60
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056dc:	f7fc fbf6 	bl	8001ecc <HAL_GetTick>
 80056e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d12e      	bne.n	800574e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f88c 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d021      	beq.n	800574e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005728:	647b      	str	r3, [r7, #68]	@ 0x44
 800572a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800572e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e6      	bne.n	800570a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e062      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d149      	bne.n	80057f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f856 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d03c      	beq.n	80057f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	623b      	str	r3, [r7, #32]
   return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30
 8005796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e011      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3758      	adds	r7, #88	@ 0x58
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e04f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d04b      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc fb49 	bl	8001ecc <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e04e      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d034      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d031      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d110      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f838 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2208      	movs	r2, #8
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d111      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f81e 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a0      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b095      	sub	sp, #84	@ 0x54
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
 800591e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005968:	2b01      	cmp	r3, #1
 800596a:	d118      	bne.n	800599e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60bb      	str	r3, [r7, #8]
   return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	647b      	str	r3, [r7, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059b2:	bf00      	nop
 80059b4:	3754      	adds	r7, #84	@ 0x54
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80d9 	beq.w	8005b8e <ethernetif_notify_conn_changed+0x1ce>
  {
#ifndef USE_DHCP
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80059dc:	4b6f      	ldr	r3, [pc, #444]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	061a      	lsls	r2, r3, #24
 80059e2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	431a      	orrs	r2, r3
 80059ea:	4b6c      	ldr	r3, [pc, #432]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	4313      	orrs	r3, r2
 80059f2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 80059f4:	78d2      	ldrb	r2, [r2, #3]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	061a      	lsls	r2, r3, #24
 80059fa:	4b68      	ldr	r3, [pc, #416]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	0619      	lsls	r1, r3, #24
 8005a00:	4b66      	ldr	r3, [pc, #408]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	4319      	orrs	r1, r3
 8005a08:	4b64      	ldr	r3, [pc, #400]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a0a:	789b      	ldrb	r3, [r3, #2]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	4962      	ldr	r1, [pc, #392]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a12:	78c9      	ldrb	r1, [r1, #3]
 8005a14:	430b      	orrs	r3, r1
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	0619      	lsls	r1, r3, #24
 8005a24:	4b5d      	ldr	r3, [pc, #372]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	4319      	orrs	r1, r3
 8005a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a2e:	789b      	ldrb	r3, [r3, #2]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	430b      	orrs	r3, r1
 8005a34:	4959      	ldr	r1, [pc, #356]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a36:	78c9      	ldrb	r1, [r1, #3]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a40:	431a      	orrs	r2, r3
 8005a42:	4b56      	ldr	r3, [pc, #344]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	0619      	lsls	r1, r3, #24
 8005a48:	4b54      	ldr	r3, [pc, #336]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	4319      	orrs	r1, r3
 8005a50:	4b52      	ldr	r3, [pc, #328]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a52:	789b      	ldrb	r3, [r3, #2]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	430b      	orrs	r3, r1
 8005a58:	4950      	ldr	r1, [pc, #320]	@ (8005b9c <ethernetif_notify_conn_changed+0x1dc>)
 8005a5a:	78c9      	ldrb	r1, [r1, #3]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	0e1b      	lsrs	r3, r3, #24
 8005a60:	4313      	orrs	r3, r2
 8005a62:	4a4f      	ldr	r2, [pc, #316]	@ (8005ba0 <ethernetif_notify_conn_changed+0x1e0>)
 8005a64:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a66:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	061a      	lsls	r2, r3, #24
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	431a      	orrs	r2, r3
 8005a74:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a76:	789b      	ldrb	r3, [r3, #2]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	4a49      	ldr	r2, [pc, #292]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a7e:	78d2      	ldrb	r2, [r2, #3]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	061a      	lsls	r2, r3, #24
 8005a84:	4b47      	ldr	r3, [pc, #284]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	0619      	lsls	r1, r3, #24
 8005a8a:	4b46      	ldr	r3, [pc, #280]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	4319      	orrs	r1, r3
 8005a92:	4b44      	ldr	r3, [pc, #272]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a94:	789b      	ldrb	r3, [r3, #2]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	4942      	ldr	r1, [pc, #264]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005a9c:	78c9      	ldrb	r1, [r1, #3]
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	0619      	lsls	r1, r3, #24
 8005aae:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	4319      	orrs	r1, r3
 8005ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ab8:	789b      	ldrb	r3, [r3, #2]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	430b      	orrs	r3, r1
 8005abe:	4939      	ldr	r1, [pc, #228]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ac0:	78c9      	ldrb	r1, [r1, #3]
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005aca:	431a      	orrs	r2, r3
 8005acc:	4b35      	ldr	r3, [pc, #212]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	0619      	lsls	r1, r3, #24
 8005ad2:	4b34      	ldr	r3, [pc, #208]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	4319      	orrs	r1, r3
 8005ada:	4b32      	ldr	r3, [pc, #200]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005adc:	789b      	ldrb	r3, [r3, #2]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	4930      	ldr	r1, [pc, #192]	@ (8005ba4 <ethernetif_notify_conn_changed+0x1e4>)
 8005ae4:	78c9      	ldrb	r1, [r1, #3]
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	0e1b      	lsrs	r3, r3, #24
 8005aea:	4313      	orrs	r3, r2
 8005aec:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <ethernetif_notify_conn_changed+0x1e8>)
 8005aee:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005af0:	4b2e      	ldr	r3, [pc, #184]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	061a      	lsls	r2, r3, #24
 8005af6:	4b2d      	ldr	r3, [pc, #180]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	4b2b      	ldr	r3, [pc, #172]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b00:	789b      	ldrb	r3, [r3, #2]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a29      	ldr	r2, [pc, #164]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b08:	78d2      	ldrb	r2, [r2, #3]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	061a      	lsls	r2, r3, #24
 8005b0e:	4b27      	ldr	r3, [pc, #156]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	0619      	lsls	r1, r3, #24
 8005b14:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	041b      	lsls	r3, r3, #16
 8005b1a:	4319      	orrs	r1, r3
 8005b1c:	4b23      	ldr	r3, [pc, #140]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b1e:	789b      	ldrb	r3, [r3, #2]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	430b      	orrs	r3, r1
 8005b24:	4921      	ldr	r1, [pc, #132]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b26:	78c9      	ldrb	r1, [r1, #3]
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b30:	431a      	orrs	r2, r3
 8005b32:	4b1e      	ldr	r3, [pc, #120]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	0619      	lsls	r1, r3, #24
 8005b38:	4b1c      	ldr	r3, [pc, #112]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	4319      	orrs	r1, r3
 8005b40:	4b1a      	ldr	r3, [pc, #104]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	430b      	orrs	r3, r1
 8005b48:	4918      	ldr	r1, [pc, #96]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b4a:	78c9      	ldrb	r1, [r1, #3]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b54:	431a      	orrs	r2, r3
 8005b56:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	0619      	lsls	r1, r3, #24
 8005b5c:	4b13      	ldr	r3, [pc, #76]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	4319      	orrs	r1, r3
 8005b64:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b66:	789b      	ldrb	r3, [r3, #2]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	490f      	ldr	r1, [pc, #60]	@ (8005bac <ethernetif_notify_conn_changed+0x1ec>)
 8005b6e:	78c9      	ldrb	r1, [r1, #3]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	0e1b      	lsrs	r3, r3, #24
 8005b74:	4313      	orrs	r3, r2
 8005b76:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb0 <ethernetif_notify_conn_changed+0x1f0>)
 8005b78:	6013      	str	r3, [r2, #0]
#endif
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <ethernetif_notify_conn_changed+0x1f0>)
 8005b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <ethernetif_notify_conn_changed+0x1e8>)
 8005b7e:	4908      	ldr	r1, [pc, #32]	@ (8005ba0 <ethernetif_notify_conn_changed+0x1e0>)
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f006 fe1f 	bl	800c7c4 <netif_set_addr>

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f006 fe76 	bl	800c878 <netif_set_up>
    netif_set_down(netif);

    /* led off */
   // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  }
}
 8005b8c:	e002      	b.n	8005b94 <ethernetif_notify_conn_changed+0x1d4>
    netif_set_down(netif);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f006 fede 	bl	800c950 <netif_set_down>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000b50 	.word	0x20000b50
 8005ba0:	20000b44 	.word	0x20000b44
 8005ba4:	20000b54 	.word	0x20000b54
 8005ba8:	20000b48 	.word	0x20000b48
 8005bac:	20000b58 	.word	0x20000b58
 8005bb0:	20000b4c 	.word	0x20000b4c

08005bb4 <Netif_Config>:

/* USER CODE END 2 */

/* find appropriate file for this on day */
void Netif_Config(void)
{
 8005bb4:	b5b0      	push	{r4, r5, r7, lr}
 8005bb6:	b08e      	sub	sp, #56	@ 0x38
 8005bb8:	af04      	add	r7, sp, #16
#ifdef USE_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8005bba:	4b27      	ldr	r3, [pc, #156]	@ (8005c58 <Netif_Config+0xa4>)
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8005bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bc2:	623b      	str	r3, [r7, #32]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8005bc4:	4b25      	ldr	r3, [pc, #148]	@ (8005c5c <Netif_Config+0xa8>)
 8005bc6:	61fb      	str	r3, [r7, #28]
#endif /* USE_DHCP */


  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005bc8:	f107 031c 	add.w	r3, r7, #28
 8005bcc:	f107 0220 	add.w	r2, r7, #32
 8005bd0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005bd4:	4822      	ldr	r0, [pc, #136]	@ (8005c60 <Netif_Config+0xac>)
 8005bd6:	9002      	str	r0, [sp, #8]
 8005bd8:	4822      	ldr	r0, [pc, #136]	@ (8005c64 <Netif_Config+0xb0>)
 8005bda:	9001      	str	r0, [sp, #4]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	9000      	str	r0, [sp, #0]
 8005be0:	4821      	ldr	r0, [pc, #132]	@ (8005c68 <Netif_Config+0xb4>)
 8005be2:	f006 fc7f 	bl	800c4e4 <netif_add>

  /* create a binary semaphore used for informing ethernetif of frame reception */

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8005be6:	4820      	ldr	r0, [pc, #128]	@ (8005c68 <Netif_Config+0xb4>)
 8005be8:	f006 fe36 	bl	800c858 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005bec:	4b1e      	ldr	r3, [pc, #120]	@ (8005c68 <Netif_Config+0xb4>)
 8005bee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <Netif_Config+0x52>
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8005bfe:	481a      	ldr	r0, [pc, #104]	@ (8005c68 <Netif_Config+0xb4>)
 8005c00:	f006 fe3a 	bl	800c878 <netif_set_up>
 8005c04:	e002      	b.n	8005c0c <Netif_Config+0x58>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005c06:	4818      	ldr	r0, [pc, #96]	@ (8005c68 <Netif_Config+0xb4>)
 8005c08:	f006 fea2 	bl	800c950 <netif_set_down>
  }
  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005c0c:	4917      	ldr	r1, [pc, #92]	@ (8005c6c <Netif_Config+0xb8>)
 8005c0e:	4816      	ldr	r0, [pc, #88]	@ (8005c68 <Netif_Config+0xb4>)
 8005c10:	f006 ff38 	bl	800ca84 <netif_set_link_callback>

  /* Create the Ethernet IRQ handler thread */
  vQueueAddToRegistry(xSemaphore, "osSemaphore"); // permet le debug via l'interface dedié
 8005c14:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <Netif_Config+0xbc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4916      	ldr	r1, [pc, #88]	@ (8005c74 <Netif_Config+0xc0>)
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fe18 	bl	8007850 <vQueueAddToRegistry>
  irq_arg.netif = &gnetif;
 8005c20:	4b15      	ldr	r3, [pc, #84]	@ (8005c78 <Netif_Config+0xc4>)
 8005c22:	4a11      	ldr	r2, [pc, #68]	@ (8005c68 <Netif_Config+0xb4>)
 8005c24:	601a      	str	r2, [r3, #0]
  irq_arg.semaphore = xSemaphore;
 8005c26:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <Netif_Config+0xbc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <Netif_Config+0xc4>)
 8005c2c:	6053      	str	r3, [r2, #4]

  osThreadDef(EthernetTsk, ethernetif_process_irq, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE *2);
 8005c2e:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <Netif_Config+0xc8>)
 8005c30:	463c      	mov	r4, r7
 8005c32:	461d      	mov	r5, r3
 8005c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandleGlobal = osThreadCreate (osThread(EthernetTsk), &irq_arg);
 8005c40:	463b      	mov	r3, r7
 8005c42:	490d      	ldr	r1, [pc, #52]	@ (8005c78 <Netif_Config+0xc4>)
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fa35 	bl	80060b4 <osThreadCreate>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <Netif_Config+0xcc>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bdb0      	pop	{r4, r5, r7, pc}
 8005c58:	64a8fea9 	.word	0x64a8fea9
 8005c5c:	46a8fea9 	.word	0x46a8fea9
 8005c60:	0800b581 	.word	0x0800b581
 8005c64:	08005f01 	.word	0x08005f01
 8005c68:	20000b0c 	.word	0x20000b0c
 8005c6c:	08006005 	.word	0x08006005
 8005c70:	20000a58 	.word	0x20000a58
 8005c74:	08019b14 	.word	0x08019b14
 8005c78:	20000b04 	.word	0x20000b04
 8005c7c:	08019b2c 	.word	0x08019b2c
 8005c80:	20000aa4 	.word	0x20000aa4

08005c84 <ENC_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void ENC_MspInit(ENC_HandleTypeDef* encHandle)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c8c:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <ENC_MspInit+0x54>)
 8005c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c90:	4a11      	ldr	r2, [pc, #68]	@ (8005cd8 <ENC_MspInit+0x54>)
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c98:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd8 <ENC_MspInit+0x54>)
 8005c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	68bb      	ldr	r3, [r7, #8]

  /* ENC28J60_CS ----------------------> PB12 */
  /*Configure GPIO pins : PB12 */
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8005ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005caa:	2301      	movs	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4807      	ldr	r0, [pc, #28]	@ (8005cdc <ENC_MspInit+0x58>)
 8005cbe:	f7fc fa25 	bl	800210c <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005cc8:	4804      	ldr	r0, [pc, #16]	@ (8005cdc <ENC_MspInit+0x58>)
 8005cca:	f7fc fbc9 	bl	8002460 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
}
 8005cce:	bf00      	nop
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	48000400 	.word	0x48000400

08005ce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2206      	movs	r2, #6
 8005cec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC address */
  netif->hwaddr[0] = 0x00;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] = 0x80;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2280      	movs	r2, #128	@ 0x80
 8005cfc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] = 0xE1;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	22e1      	movs	r2, #225	@ 0xe1
 8005d04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] = 0x00;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] = 0x00;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] = 0x00;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  EncHandle.Init.MACAddr = netif->hwaddr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	332a      	adds	r3, #42	@ 0x2a
 8005d24:	4a18      	ldr	r2, [pc, #96]	@ (8005d88 <low_level_init+0xa8>)
 8005d26:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005d28:	4b17      	ldr	r3, [pc, #92]	@ (8005d88 <low_level_init+0xa8>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005d2e:	4b16      	ldr	r3, [pc, #88]	@ (8005d88 <low_level_init+0xa8>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits = EIE_LINKIE | EIE_PKTIE;
 8005d34:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <low_level_init+0xa8>)
 8005d36:	2250      	movs	r2, #80	@ 0x50
 8005d38:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MspInit(&EncHandle);
 8005d3a:	4813      	ldr	r0, [pc, #76]	@ (8005d88 <low_level_init+0xa8>)
 8005d3c:	f7ff ffa2 	bl	8005c84 <ENC_MspInit>

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d4e:	f043 030a 	orr.w	r3, r3, #10
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Start the EN28J60 module */
  if(enc_start(&EncHandle))
 8005d5a:	480b      	ldr	r0, [pc, #44]	@ (8005d88 <low_level_init+0xa8>)
 8005d5c:	f7fa fcec 	bl	8000738 <enc_start>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <low_level_init+0x9e>
  {
    /* Set the MAC address */
    enc_set_MAC(&EncHandle);
 8005d66:	4808      	ldr	r0, [pc, #32]	@ (8005d88 <low_level_init+0xa8>)
 8005d68:	f7fa fdd2 	bl	8000910 <enc_set_MAC>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d72:	f043 0304 	orr.w	r3, r3, #4
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000b5c 	.word	0x20000b5c

08005d8c <low_level_output>:

  return ERR_OK;
}
*/
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]

  if (EncHandle.transmitLength != 0) {
 8005d9a:	4b23      	ldr	r3, [pc, #140]	@ (8005e28 <low_level_output+0x9c>)
 8005d9c:	8b1b      	ldrh	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d006      	beq.n	8005db0 <low_level_output+0x24>
     while (PT_SCHEDULE(enc_transmit(&transmit_pt, &EncHandle))) {
         /* Wait for end of previous transmission */
     }
#else
     do {
         enc_transmit(&EncHandle);
 8005da2:	4821      	ldr	r0, [pc, #132]	@ (8005e28 <low_level_output+0x9c>)
 8005da4:	f7fa fe60 	bl	8000a68 <enc_transmit>
     } while (EncHandle.transmitLength != 0);
 8005da8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e28 <low_level_output+0x9c>)
 8005daa:	8b1b      	ldrh	r3, [r3, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f8      	bne.n	8005da2 <low_level_output+0x16>
#endif
  }

  /* Prepare ENC28J60 Tx buffer */
  errval = enc_prepare_txbuffer(&EncHandle, p->tot_len);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	891b      	ldrh	r3, [r3, #8]
 8005db4:	4619      	mov	r1, r3
 8005db6:	481c      	ldr	r0, [pc, #112]	@ (8005e28 <low_level_output+0x9c>)
 8005db8:	f7fa fde7 	bl	800098a <enc_prepare_txbuffer>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 8005dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <low_level_output+0x42>
      return errval;
 8005dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dcc:	e027      	b.n	8005e1e <low_level_output+0x92>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e010      	b.n	8005df6 <low_level_output+0x6a>
    enc_wrbuffer(q->payload, q->len);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	895b      	ldrh	r3, [r3, #10]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7fa fe28 	bl	8000a34 <enc_wrbuffer>
    framelength += q->len;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	461a      	mov	r2, r3
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1eb      	bne.n	8005dd4 <low_level_output+0x48>
  }

  if (framelength != p->tot_len) {
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	891b      	ldrh	r3, [r3, #8]
 8005e00:	461a      	mov	r2, r3
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d002      	beq.n	8005e0e <low_level_output+0x82>
     return ERR_BUF;
 8005e08:	f06f 0301 	mvn.w	r3, #1
 8005e0c:	e007      	b.n	8005e1e <low_level_output+0x92>
  }

  EncHandle.transmitLength = p->tot_len;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	891a      	ldrh	r2, [r3, #8]
 8005e12:	4b05      	ldr	r3, [pc, #20]	@ (8005e28 <low_level_output+0x9c>)
 8005e14:	831a      	strh	r2, [r3, #24]

  /* If PROTOTHREADS are use, actual transmission is triggered in main loop */
#ifndef USE_PROTOTHREADS
    enc_transmit(&EncHandle);
 8005e16:	4804      	ldr	r0, [pc, #16]	@ (8005e28 <low_level_output+0x9c>)
 8005e18:	f7fa fe26 	bl	8000a68 <enc_transmit>
#endif

  return ERR_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000b5c 	.word	0x20000b5c

08005e2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]

  if(!enc_get_received_frame(&EncHandle))
 8005e3c:	481e      	ldr	r0, [pc, #120]	@ (8005eb8 <low_level_input+0x8c>)
 8005e3e:	f7fa fe73 	bl	8000b28 <enc_get_received_frame>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f083 0301 	eor.w	r3, r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <low_level_input+0x26>
  {
    return NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e02e      	b.n	8005eb0 <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 8005e52:	4b19      	ldr	r3, [pc, #100]	@ (8005eb8 <low_level_input+0x8c>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t*) EncHandle.RxFrameInfos.buffer;
 8005e58:	4b18      	ldr	r3, [pc, #96]	@ (8005ebc <low_level_input+0x90>)
 8005e5a:	60fb      	str	r3, [r7, #12]

  if(len > 0)
 8005e5c:	8a7b      	ldrh	r3, [r7, #18]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005e62:	8a7b      	ldrh	r3, [r7, #18]
 8005e64:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005e68:	4619      	mov	r1, r3
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f006 fe7a 	bl	800cb64 <pbuf_alloc>
 8005e70:	61f8      	str	r0, [r7, #28]
  }

  if(p != NULL)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01a      	beq.n	8005eae <low_level_input+0x82>
  {
    bufferoffset = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]

    for(q = p;q != NULL;q = q->next)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e012      	b.n	8005ea8 <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy((uint8_t*) ((uint8_t*) q->payload), (uint8_t*) ((uint8_t*) buffer + bufferoffset), q->len);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6858      	ldr	r0, [r3, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	18d1      	adds	r1, r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	895b      	ldrh	r3, [r3, #10]
 8005e90:	461a      	mov	r2, r3
 8005e92:	f012 fd4a 	bl	801892a <memcpy>
      bufferoffset = bufferoffset + q->len;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	895b      	ldrh	r3, [r3, #10]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    for(q = p;q != NULL;q = q->next)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e9      	bne.n	8005e82 <low_level_input+0x56>
    }
  }

  return p;
 8005eae:	69fb      	ldr	r3, [r7, #28]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000b5c 	.word	0x20000b5c
 8005ebc:	20000b88 	.word	0x20000b88

08005ec0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ffaf 	bl	8005e2c <low_level_input>
 8005ece:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if(p == NULL)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d010      	beq.n	8005ef8 <ethernetif_input+0x38>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	4798      	blx	r3
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	72fb      	strb	r3, [r7, #11]

  if(err != ERR_OK)
 8005ee4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f007 f91d 	bl	800d12c <pbuf_free>
    p = NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e000      	b.n	8005efa <ethernetif_input+0x3a>
    return;
 8005ef8:	bf00      	nop
  }
}
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <ethernetif_init+0x1c>
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <ethernetif_init+0x48>)
 8005f10:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005f14:	490d      	ldr	r1, [pc, #52]	@ (8005f4c <ethernetif_init+0x4c>)
 8005f16:	480e      	ldr	r0, [pc, #56]	@ (8005f50 <ethernetif_init+0x50>)
 8005f18:	f012 fbd2 	bl	80186c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2265      	movs	r2, #101	@ 0x65
 8005f20:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	226e      	movs	r2, #110	@ 0x6e
 8005f28:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a09      	ldr	r2, [pc, #36]	@ (8005f54 <ethernetif_init+0x54>)
 8005f30:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a08      	ldr	r2, [pc, #32]	@ (8005f58 <ethernetif_init+0x58>)
 8005f36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fed1 	bl	8005ce0 <low_level_init>

  return ERR_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08019b48 	.word	0x08019b48
 8005f4c:	08019b64 	.word	0x08019b64
 8005f50:	08019b74 	.word	0x08019b74
 8005f54:	08016241 	.word	0x08016241
 8005f58:	08005d8d 	.word	0x08005d8d

08005f5c <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f60:	f7fb ffb4 	bl	8001ecc <HAL_GetTick>
 8005f64:	4603      	mov	r3, r0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <ethernetif_process_irq_do>:
  * @brief  This function actually process pending IRQs.
  * @param  handler: Reference to the driver state structure
  * @retval None
  */
void ethernetif_process_irq_do(void const *argument)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
    struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

    /* Handle ENC28J60 interrupt */
    enc_irq_handler(&EncHandle);
 8005f78:	4815      	ldr	r0, [pc, #84]	@ (8005fd0 <ethernetif_process_irq_do+0x64>)
 8005f7a:	f7fa fe71 	bl	8000c60 <enc_irq_handler>

    /* Check whether the link is up or down*/
    if ((EncHandle.interruptFlags & EIE_LINKIE) != 0) {
 8005f7e:	4b14      	ldr	r3, [pc, #80]	@ (8005fd0 <ethernetif_process_irq_do+0x64>)
 8005f80:	7c5b      	ldrb	r3, [r3, #17]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <ethernetif_process_irq_do+0x40>
        if((EncHandle.LinkStatus & PHSTAT2_LSTAT)!= 0) {
 8005f8a:	4b11      	ldr	r3, [pc, #68]	@ (8005fd0 <ethernetif_process_irq_do+0x64>)
 8005f8c:	8adb      	ldrh	r3, [r3, #22]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <ethernetif_process_irq_do+0x36>
            netif_set_link_up(irq_arg->netif);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f006 fd0a 	bl	800c9b4 <netif_set_link_up>
 8005fa0:	e004      	b.n	8005fac <ethernetif_process_irq_do+0x40>
        } else {
            netif_set_link_down(irq_arg->netif);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f006 fd3c 	bl	800ca24 <netif_set_link_down>
        }
    }

    /* Check whether we have received a packet */
    if((EncHandle.interruptFlags & EIR_PKTIF) != 0) {
 8005fac:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <ethernetif_process_irq_do+0x64>)
 8005fae:	7c5b      	ldrb	r3, [r3, #17]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <ethernetif_process_irq_do+0x56>
        ethernetif_input(irq_arg->netif);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff ff7f 	bl	8005ec0 <ethernetif_input>
    }

    /* Renable global interrupts */
    enc_enable_interrupts(EIE_INTIE);
 8005fc2:	2080      	movs	r0, #128	@ 0x80
 8005fc4:	f7fa fe3e 	bl	8000c44 <enc_enable_interrupts>
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000b5c 	.word	0x20000b5c

08005fd4 <ethernetif_process_irq>:
  * @brief  This function triggers the interrupt service callback.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_process_irq(void const *argument)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	//if (xSemaphoreTake( xSemaphore, ( TickType_t )portMAX_DELAY ) == pdTRUE)
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 f9ab 	bl	8006344 <osSemaphoreWait>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f5      	bne.n	8005fe0 <ethernetif_process_irq+0xc>
	  {
    	/* Handle ENC28J60 interrupt */
    	tcpip_callback((tcpip_callback_fn) ethernetif_process_irq_do, (void *) argument);
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4802      	ldr	r0, [pc, #8]	@ (8006000 <ethernetif_process_irq+0x2c>)
 8005ff8:	f005 fae4 	bl	800b5c4 <tcpip_callback>
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8005ffc:	e7f0      	b.n	8005fe0 <ethernetif_process_irq+0xc>
 8005ffe:	bf00      	nop
 8006000:	08005f6d 	.word	0x08005f6d

08006004 <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <ethernetif_update_config+0x20>
  {
    /* Restart the EN28J60 module */
    low_level_init(netif);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff fe5e 	bl	8005ce0 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fccb 	bl	80059c0 <ethernetif_notify_conn_changed>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006044:	2b84      	cmp	r3, #132	@ 0x84
 8006046:	d005      	beq.n	8006054 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	3303      	adds	r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006068:	f3ef 8305 	mrs	r3, IPSR
 800606c:	607b      	str	r3, [r7, #4]
  return(result);
 800606e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800608a:	f001 fe9b 	bl	8007dc4 <vTaskStartScheduler>
  
  return osOK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}

08006094 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006098:	f7ff ffe3 	bl	8006062 <inHandlerMode>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80060a2:	f001 ffad 	bl	8008000 <xTaskGetTickCountFromISR>
 80060a6:	4603      	mov	r3, r0
 80060a8:	e002      	b.n	80060b0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80060aa:	f001 ff99 	bl	8007fe0 <xTaskGetTickCount>
 80060ae:	4603      	mov	r3, r0
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b6:	b089      	sub	sp, #36	@ 0x24
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <osThreadCreate+0x54>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01c      	beq.n	8006108 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685c      	ldr	r4, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691e      	ldr	r6, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff ffa6 	bl	8006032 <makeFreeRtosPriority>
 80060e6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	9100      	str	r1, [sp, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	4632      	mov	r2, r6
 80060fa:	4629      	mov	r1, r5
 80060fc:	4620      	mov	r0, r4
 80060fe:	f001 fbfb 	bl	80078f8 <xTaskCreateStatic>
 8006102:	4603      	mov	r3, r0
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e01c      	b.n	8006142 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685c      	ldr	r4, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006114:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ff88 	bl	8006032 <makeFreeRtosPriority>
 8006122:	4602      	mov	r2, r0
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	9200      	str	r2, [sp, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4632      	mov	r2, r6
 8006130:	4629      	mov	r1, r5
 8006132:	4620      	mov	r0, r4
 8006134:	f001 fc40 	bl	80079b8 <xTaskCreate>
 8006138:	4603      	mov	r3, r0
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006142:	68fb      	ldr	r3, [r7, #12]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800614c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fd6f 	bl	8007c38 <vTaskDelete>
  return osOK;
 800615a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <osDelay+0x16>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	e000      	b.n	800617c <osDelay+0x18>
 800617a:	2301      	movs	r3, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fdeb 	bl	8007d58 <vTaskDelay>
  
  return osOK;
 8006182:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4619      	mov	r1, r3
 80061a2:	2001      	movs	r0, #1
 80061a4:	f000 fc9d 	bl	8006ae2 <xQueueCreateMutexStatic>
 80061a8:	4603      	mov	r3, r0
 80061aa:	e003      	b.n	80061b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80061ac:	2001      	movs	r0, #1
 80061ae:	f000 fc80 	bl	8006ab2 <xQueueCreateMutex>
 80061b2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <osMutexWait+0x18>
    return osErrorParameter;
 80061d0:	2380      	movs	r3, #128	@ 0x80
 80061d2:	e03a      	b.n	800624a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d103      	bne.n	80061e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80061e0:	f04f 33ff 	mov.w	r3, #4294967295
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e009      	b.n	80061fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <osMutexWait+0x40>
      ticks = 1;
 80061f8:	2301      	movs	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80061fc:	f7ff ff31 	bl	8006062 <inHandlerMode>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d017      	beq.n	8006236 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	461a      	mov	r2, r3
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f912 	bl	8007438 <xQueueReceiveFromISR>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d001      	beq.n	800621e <osMutexWait+0x62>
      return osErrorOS;
 800621a:	23ff      	movs	r3, #255	@ 0xff
 800621c:	e015      	b.n	800624a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d011      	beq.n	8006248 <osMutexWait+0x8c>
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <osMutexWait+0x98>)
 8006226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	e008      	b.n	8006248 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 ffed 	bl	8007218 <xQueueSemaphoreTake>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d001      	beq.n	8006248 <osMutexWait+0x8c>
    return osErrorOS;
 8006244:	23ff      	movs	r3, #255	@ 0xff
 8006246:	e000      	b.n	800624a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006264:	2300      	movs	r3, #0
 8006266:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006268:	f7ff fefb 	bl	8006062 <inHandlerMode>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fe5b 	bl	8006f34 <xQueueGiveFromISR>
 800627e:	4603      	mov	r3, r0
 8006280:	2b01      	cmp	r3, #1
 8006282:	d001      	beq.n	8006288 <osMutexRelease+0x30>
      return osErrorOS;
 8006284:	23ff      	movs	r3, #255	@ 0xff
 8006286:	e017      	b.n	80062b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <osMutexRelease+0x5e>
 800628e:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <osMutexRelease+0x68>)
 8006290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	e00a      	b.n	80062b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80062a0:	2300      	movs	r3, #0
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fca4 	bl	8006bf4 <xQueueGenericSend>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80062b2:	23ff      	movs	r3, #255	@ 0xff
 80062b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10a      	bne.n	80062f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2203      	movs	r2, #3
 80062e2:	9200      	str	r2, [sp, #0]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2100      	movs	r1, #0
 80062e8:	2001      	movs	r0, #1
 80062ea:	f000 faf1 	bl	80068d0 <xQueueGenericCreateStatic>
 80062ee:	4603      	mov	r3, r0
 80062f0:	e023      	b.n	800633a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80062f2:	6838      	ldr	r0, [r7, #0]
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 fc0c 	bl	8006b18 <xQueueCreateCountingSemaphoreStatic>
 8006300:	4603      	mov	r3, r0
 8006302:	e01a      	b.n	800633a <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d110      	bne.n	800632c <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800630a:	2203      	movs	r2, #3
 800630c:	2100      	movs	r1, #0
 800630e:	2001      	movs	r0, #1
 8006310:	f000 fb5b 	bl	80069ca <xQueueGenericCreate>
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <osSemaphoreCreate+0x64>
 800631c:	2300      	movs	r3, #0
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fc66 	bl	8006bf4 <xQueueGenericSend>
      return sema;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e006      	b.n	800633a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fc29 	bl	8006b8a <xQueueCreateCountingSemaphore>
 8006338:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006358:	2380      	movs	r3, #128	@ 0x80
 800635a:	e03a      	b.n	80063d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d103      	bne.n	8006370 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e009      	b.n	8006384 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d006      	beq.n	8006384 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <osSemaphoreWait+0x40>
      ticks = 1;
 8006380:	2301      	movs	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006384:	f7ff fe6d 	bl	8006062 <inHandlerMode>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d017      	beq.n	80063be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	461a      	mov	r2, r3
 8006394:	2100      	movs	r1, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f84e 	bl	8007438 <xQueueReceiveFromISR>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80063a2:	23ff      	movs	r3, #255	@ 0xff
 80063a4:	e015      	b.n	80063d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <osSemaphoreWait+0x8c>
 80063ac:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <osSemaphoreWait+0x98>)
 80063ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	e008      	b.n	80063d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ff29 	bl	8007218 <xQueueSemaphoreTake>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d001      	beq.n	80063d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80063cc:	23ff      	movs	r3, #255	@ 0xff
 80063ce:	e000      	b.n	80063d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80063f0:	f7ff fe37 	bl	8006062 <inHandlerMode>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fd97 	bl	8006f34 <xQueueGiveFromISR>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d001      	beq.n	8006410 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800640c:	23ff      	movs	r3, #255	@ 0xff
 800640e:	e017      	b.n	8006440 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d013      	beq.n	800643e <osSemaphoreRelease+0x5e>
 8006416:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <osSemaphoreRelease+0x68>)
 8006418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	e00a      	b.n	800643e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fbe0 	bl	8006bf4 <xQueueGenericSend>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d001      	beq.n	800643e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800643a:	23ff      	movs	r3, #255	@ 0xff
 800643c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006454:	f7ff fe05 	bl	8006062 <inHandlerMode>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800645e:	2382      	movs	r3, #130	@ 0x82
 8006460:	e003      	b.n	800646a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f8a8 	bl	80075b8 <vQueueDelete>

  return osOK; 
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006472:	b590      	push	{r4, r7, lr}
 8006474:	b085      	sub	sp, #20
 8006476:	af02      	add	r7, sp, #8
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d011      	beq.n	80064a8 <osMessageCreate+0x36>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2400      	movs	r4, #0
 800649e:	9400      	str	r4, [sp, #0]
 80064a0:	f000 fa16 	bl	80068d0 <xQueueGenericCreateStatic>
 80064a4:	4603      	mov	r3, r0
 80064a6:	e008      	b.n	80064ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	4619      	mov	r1, r3
 80064b4:	f000 fa89 	bl	80069ca <xQueueGenericCreate>
 80064b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd90      	pop	{r4, r7, pc}
	...

080064c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <osMessagePut+0x1e>
    ticks = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80064e2:	f7ff fdbe 	bl	8006062 <inHandlerMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d018      	beq.n	800651e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80064ec:	f107 0210 	add.w	r2, r7, #16
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	2300      	movs	r3, #0
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 fc7e 	bl	8006df8 <xQueueGenericSendFromISR>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d001      	beq.n	8006506 <osMessagePut+0x42>
      return osErrorOS;
 8006502:	23ff      	movs	r3, #255	@ 0xff
 8006504:	e018      	b.n	8006538 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d014      	beq.n	8006536 <osMessagePut+0x72>
 800650c:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <osMessagePut+0x7c>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	e00b      	b.n	8006536 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800651e:	f107 0108 	add.w	r1, r7, #8
 8006522:	2300      	movs	r3, #0
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fb64 	bl	8006bf4 <xQueueGenericSend>
 800652c:	4603      	mov	r3, r0
 800652e:	2b01      	cmp	r3, #1
 8006530:	d001      	beq.n	8006536 <osMessagePut+0x72>
      return osErrorOS;
 8006532:	23ff      	movs	r3, #255	@ 0xff
 8006534:	e000      	b.n	8006538 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b08b      	sub	sp, #44	@ 0x2c
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	617b      	str	r3, [r7, #20]
    return event;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	461c      	mov	r4, r3
 8006566:	f107 0314 	add.w	r3, r7, #20
 800656a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800656e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006572:	e054      	b.n	800661e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d103      	bne.n	800658c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
 800658a:	e009      	b.n	80065a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <osMessageGet+0x5c>
      ticks = 1;
 800659c:	2301      	movs	r3, #1
 800659e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80065a0:	f7ff fd5f 	bl	8006062 <inHandlerMode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01c      	beq.n	80065e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80065aa:	f107 0220 	add.w	r2, r7, #32
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	f000 ff3e 	bl	8007438 <xQueueReceiveFromISR>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d102      	bne.n	80065c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80065c2:	2310      	movs	r3, #16
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e001      	b.n	80065cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01d      	beq.n	800660e <osMessageGet+0xca>
 80065d2:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <osMessageGet+0xe4>)
 80065d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	e014      	b.n	800660e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	3304      	adds	r3, #4
 80065ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ec:	4619      	mov	r1, r3
 80065ee:	68b8      	ldr	r0, [r7, #8]
 80065f0:	f000 fd30 	bl	8007054 <xQueueReceive>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d102      	bne.n	8006600 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80065fa:	2310      	movs	r3, #16
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e006      	b.n	800660e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <osMessageGet+0xc6>
 8006606:	2300      	movs	r3, #0
 8006608:	e000      	b.n	800660c <osMessageGet+0xc8>
 800660a:	2340      	movs	r3, #64	@ 0x40
 800660c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	461c      	mov	r4, r3
 8006612:	f107 0314 	add.w	r3, r7, #20
 8006616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800661a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	372c      	adds	r7, #44	@ 0x2c
 8006622:	46bd      	mov	sp, r7
 8006624:	bd90      	pop	{r4, r7, pc}
 8006626:	bf00      	nop
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
#endif
  return osOK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800664a:	f7ff fd0a 	bl	8006062 <inHandlerMode>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 ff90 	bl	800757a <uxQueueMessagesWaitingFromISR>
 800665a:	4603      	mov	r3, r0
 800665c:	e003      	b.n	8006666 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ff6c 	bl	800753c <uxQueueMessagesWaiting>
 8006664:	4603      	mov	r3, r0
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006676:	f7ff fcf4 	bl	8006062 <inHandlerMode>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <osMessageDelete+0x16>
    return osErrorISR;
 8006680:	2382      	movs	r3, #130	@ 0x82
 8006682:	e003      	b.n	800668c <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 ff97 	bl	80075b8 <vQueueDelete>

  return osOK; 
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f103 0208 	add.w	r2, r3, #8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f103 0208 	add.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d103      	bne.n	8006756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e00c      	b.n	8006770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3308      	adds	r3, #8
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e002      	b.n	8006764 <vListInsert+0x2e>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	429a      	cmp	r2, r3
 800676e:	d2f6      	bcs.n	800675e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	601a      	str	r2, [r3, #0]
}
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6892      	ldr	r2, [r2, #8]
 80067be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6852      	ldr	r2, [r2, #4]
 80067c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d103      	bne.n	80067dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	1e5a      	subs	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006828:	f002 fa76 	bl	8008d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	3b01      	subs	r3, #1
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	441a      	add	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	22ff      	movs	r2, #255	@ 0xff
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	22ff      	movs	r2, #255	@ 0xff
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d114      	bne.n	80068a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01a      	beq.n	80068bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fd2c 	bl	80082e8 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d012      	beq.n	80068bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006896:	4b0d      	ldr	r3, [pc, #52]	@ (80068cc <xQueueGenericReset+0xd0>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	e009      	b.n	80068bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3310      	adds	r3, #16
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fef1 	bl	8006694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3324      	adds	r3, #36	@ 0x24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff feec 	bl	8006694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068bc:	f002 fa5e 	bl	8008d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068c0:	2301      	movs	r3, #1
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	@ 0x38
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <xQueueGenericCreateStatic+0x56>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <xQueueGenericCreateStatic+0x5a>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <xQueueGenericCreateStatic+0x5c>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	e7fd      	b.n	8006944 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <xQueueGenericCreateStatic+0x84>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <xQueueGenericCreateStatic+0x88>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <xQueueGenericCreateStatic+0x8a>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	61fb      	str	r3, [r7, #28]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006976:	2348      	movs	r3, #72	@ 0x48
 8006978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b48      	cmp	r3, #72	@ 0x48
 800697e:	d00b      	beq.n	8006998 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61bb      	str	r3, [r7, #24]
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006998:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800699e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f840 	bl	8006a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3730      	adds	r7, #48	@ 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08a      	sub	sp, #40	@ 0x28
 80069ce:	af02      	add	r7, sp, #8
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	613b      	str	r3, [r7, #16]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	3348      	adds	r3, #72	@ 0x48
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 faa9 	bl	8008f5c <pvPortMalloc>
 8006a0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3348      	adds	r3, #72	@ 0x48
 8006a1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a24:	79fa      	ldrb	r2, [r7, #7]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f805 	bl	8006a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a36:	69bb      	ldr	r3, [r7, #24]
	}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6e:	2101      	movs	r1, #1
 8006a70:	69b8      	ldr	r0, [r7, #24]
 8006a72:	f7ff fec3 	bl	80067fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8a5 	bl	8006bf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006abc:	2301      	movs	r3, #1
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6939      	ldr	r1, [r7, #16]
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f7ff ff7d 	bl	80069ca <xQueueGenericCreate>
 8006ad0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff ffd3 	bl	8006a7e <prvInitialiseMutex>

		return xNewQueue;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
	}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b088      	sub	sp, #32
 8006ae6:	af02      	add	r7, sp, #8
 8006ae8:	4603      	mov	r3, r0
 8006aea:	6039      	str	r1, [r7, #0]
 8006aec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2200      	movs	r2, #0
 8006afe:	6939      	ldr	r1, [r7, #16]
 8006b00:	6978      	ldr	r0, [r7, #20]
 8006b02:	f7ff fee5 	bl	80068d0 <xQueueGenericCreateStatic>
 8006b06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff ffb8 	bl	8006a7e <prvInitialiseMutex>

		return xNewQueue;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	@ 0x28
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	61bb      	str	r3, [r7, #24]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d90b      	bls.n	8006b62 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	617b      	str	r3, [r7, #20]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b62:	2302      	movs	r3, #2
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff feaf 	bl	80068d0 <xQueueGenericCreateStatic>
 8006b72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b80:	69fb      	ldr	r3, [r7, #28]
	}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	613b      	str	r3, [r7, #16]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90b      	bls.n	8006bd2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60fb      	str	r3, [r7, #12]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fef7 	bl	80069ca <xQueueGenericCreate>
 8006bdc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006bea:	697b      	ldr	r3, [r7, #20]
	}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08e      	sub	sp, #56	@ 0x38
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c02:	2300      	movs	r3, #0
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10b      	bne.n	8006c28 <xQueueGenericSend+0x34>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <xQueueGenericSend+0x42>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueGenericSend+0x46>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueGenericSend+0x48>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xQueueGenericSend+0x64>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x72>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSend+0x76>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSend+0x78>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <xQueueGenericSend+0x94>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	623b      	str	r3, [r7, #32]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c88:	f001 fcee 	bl	8008668 <xTaskGetSchedulerState>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <xQueueGenericSend+0xa4>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <xQueueGenericSend+0xa8>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <xQueueGenericSend+0xaa>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <xQueueGenericSend+0xc6>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	61fb      	str	r3, [r7, #28]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cba:	f002 f82d 	bl	8008d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <xQueueGenericSend+0xdc>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d129      	bne.n	8006d24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cd6:	f000 fcab 	bl	8007630 <prvCopyDataToQueue>
 8006cda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	3324      	adds	r3, #36	@ 0x24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fafd 	bl	80082e8 <xTaskRemoveFromEventList>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d013      	beq.n	8006d1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8006df4 <xQueueGenericSend+0x200>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	e00a      	b.n	8006d1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d0c:	4b39      	ldr	r3, [pc, #228]	@ (8006df4 <xQueueGenericSend+0x200>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d1c:	f002 f82e 	bl	8008d7c <vPortExitCritical>
				return pdPASS;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e063      	b.n	8006dec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d2a:	f002 f827 	bl	8008d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e05c      	b.n	8006dec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fb37 	bl	80083b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d42:	2301      	movs	r3, #1
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d46:	f002 f819 	bl	8008d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d4a:	f001 f89d 	bl	8007e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d4e:	f001 ffe3 	bl	8008d18 <vPortEnterCritical>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d103      	bne.n	8006d68 <xQueueGenericSend+0x174>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d103      	bne.n	8006d7e <xQueueGenericSend+0x18a>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d7e:	f001 fffd 	bl	8008d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d82:	1d3a      	adds	r2, r7, #4
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fb26 	bl	80083dc <xTaskCheckForTimeOut>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d124      	bne.n	8006de0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d98:	f000 fd42 	bl	8007820 <prvIsQueueFull>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	3310      	adds	r3, #16
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fa76 	bl	800829c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006db2:	f000 fccd 	bl	8007750 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006db6:	f001 f875 	bl	8007ea4 <xTaskResumeAll>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f47f af7c 	bne.w	8006cba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <xQueueGenericSend+0x200>)
 8006dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	e772      	b.n	8006cba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dd6:	f000 fcbb 	bl	8007750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dda:	f001 f863 	bl	8007ea4 <xTaskResumeAll>
 8006dde:	e76c      	b.n	8006cba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006de2:	f000 fcb5 	bl	8007750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006de6:	f001 f85d 	bl	8007ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3738      	adds	r7, #56	@ 0x38
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b090      	sub	sp, #64	@ 0x40
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10b      	bne.n	8006e28 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <xQueueGenericSendFromISR+0x3e>
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <xQueueGenericSendFromISR+0x42>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueGenericSendFromISR+0x44>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10b      	bne.n	8006e58 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d103      	bne.n	8006e66 <xQueueGenericSendFromISR+0x6e>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <xQueueGenericSendFromISR+0x72>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <xQueueGenericSendFromISR+0x74>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	623b      	str	r3, [r7, #32]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e88:	f002 f826 	bl	8008ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e8c:	f3ef 8211 	mrs	r2, BASEPRI
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	61fa      	str	r2, [r7, #28]
 8006ea2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d302      	bcc.n	8006eba <xQueueGenericSendFromISR+0xc2>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d12f      	bne.n	8006f1a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ed0:	f000 fbae 	bl	8007630 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ed4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d112      	bne.n	8006f04 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d016      	beq.n	8006f14 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	3324      	adds	r3, #36	@ 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f9fc 	bl	80082e8 <xTaskRemoveFromEventList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e007      	b.n	8006f14 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f08:	3301      	adds	r3, #1
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	b25a      	sxtb	r2, r3
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f14:	2301      	movs	r3, #1
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f18:	e001      	b.n	8006f1e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3740      	adds	r7, #64	@ 0x40
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08e      	sub	sp, #56	@ 0x38
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	623b      	str	r3, [r7, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	61fb      	str	r3, [r7, #28]
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <xQueueGiveFromISR+0x5c>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <xQueueGiveFromISR+0x60>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <xQueueGiveFromISR+0x62>
 8006f94:	2300      	movs	r3, #0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	61bb      	str	r3, [r7, #24]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fb2:	f001 ff91 	bl	8008ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8006fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	617a      	str	r2, [r7, #20]
 8006fcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d22b      	bcs.n	800703a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d112      	bne.n	8007024 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d016      	beq.n	8007034 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	3324      	adds	r3, #36	@ 0x24
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f96c 	bl	80082e8 <xTaskRemoveFromEventList>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00e      	beq.n	8007034 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	e007      	b.n	8007034 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007028:	3301      	adds	r3, #1
 800702a:	b2db      	uxtb	r3, r3
 800702c:	b25a      	sxtb	r2, r3
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007034:	2301      	movs	r3, #1
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
 8007038:	e001      	b.n	800703e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800703a:	2300      	movs	r3, #0
 800703c:	637b      	str	r3, [r7, #52]	@ 0x34
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007040:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f383 8811 	msr	BASEPRI, r3
}
 8007048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800704a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800704c:	4618      	mov	r0, r3
 800704e:	3738      	adds	r7, #56	@ 0x38
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	@ 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <xQueueReceive+0x32>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	623b      	str	r3, [r7, #32]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <xQueueReceive+0x40>
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <xQueueReceive+0x44>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <xQueueReceive+0x46>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <xQueueReceive+0x62>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	61fb      	str	r3, [r7, #28]
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b6:	f001 fad7 	bl	8008668 <xTaskGetSchedulerState>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <xQueueReceive+0x72>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <xQueueReceive+0x76>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueReceive+0x78>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xQueueReceive+0x94>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	61bb      	str	r3, [r7, #24]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e8:	f001 fe16 	bl	8008d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01f      	beq.n	8007138 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070fc:	f000 fb02 	bl	8007704 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00f      	beq.n	8007130 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	3310      	adds	r3, #16
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f8e7 	bl	80082e8 <xTaskRemoveFromEventList>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007120:	4b3c      	ldr	r3, [pc, #240]	@ (8007214 <xQueueReceive+0x1c0>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007130:	f001 fe24 	bl	8008d7c <vPortExitCritical>
				return pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	e069      	b.n	800720c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800713e:	f001 fe1d 	bl	8008d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007142:	2300      	movs	r3, #0
 8007144:	e062      	b.n	800720c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800714c:	f107 0310 	add.w	r3, r7, #16
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f92d 	bl	80083b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800715a:	f001 fe0f 	bl	8008d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800715e:	f000 fe93 	bl	8007e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007162:	f001 fdd9 	bl	8008d18 <vPortEnterCritical>
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800716c:	b25b      	sxtb	r3, r3
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d103      	bne.n	800717c <xQueueReceive+0x128>
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007182:	b25b      	sxtb	r3, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d103      	bne.n	8007192 <xQueueReceive+0x13e>
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007192:	f001 fdf3 	bl	8008d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007196:	1d3a      	adds	r2, r7, #4
 8007198:	f107 0310 	add.w	r3, r7, #16
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 f91c 	bl	80083dc <xTaskCheckForTimeOut>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d123      	bne.n	80071f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ac:	f000 fb22 	bl	80077f4 <prvIsQueueEmpty>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d017      	beq.n	80071e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	3324      	adds	r3, #36	@ 0x24
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f86c 	bl	800829c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c6:	f000 fac3 	bl	8007750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ca:	f000 fe6b 	bl	8007ea4 <xTaskResumeAll>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d189      	bne.n	80070e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80071d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <xQueueReceive+0x1c0>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	e780      	b.n	80070e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e8:	f000 fab2 	bl	8007750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ec:	f000 fe5a 	bl	8007ea4 <xTaskResumeAll>
 80071f0:	e77a      	b.n	80070e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f4:	f000 faac 	bl	8007750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071f8:	f000 fe54 	bl	8007ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fe:	f000 faf9 	bl	80077f4 <prvIsQueueEmpty>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	f43f af6f 	beq.w	80070e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800720a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800720c:	4618      	mov	r0, r3
 800720e:	3730      	adds	r7, #48	@ 0x30
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08e      	sub	sp, #56	@ 0x38
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	623b      	str	r3, [r7, #32]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800724c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61fb      	str	r3, [r7, #28]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800726c:	f001 f9fc 	bl	8008668 <xTaskGetSchedulerState>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <xQueueSemaphoreTake+0x64>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <xQueueSemaphoreTake+0x68>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <xQueueSemaphoreTake+0x6a>
 8007280:	2300      	movs	r3, #0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	61bb      	str	r3, [r7, #24]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800729e:	f001 fd3b 	bl	8008d18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d024      	beq.n	80072f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	1e5a      	subs	r2, r3, #1
 80072b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072be:	f001 fb7f 	bl	80089c0 <pvTaskIncrementMutexHeldCount>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00f      	beq.n	80072f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	3310      	adds	r3, #16
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 f807 	bl	80082e8 <xTaskRemoveFromEventList>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072e0:	4b54      	ldr	r3, [pc, #336]	@ (8007434 <xQueueSemaphoreTake+0x21c>)
 80072e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072f0:	f001 fd44 	bl	8008d7c <vPortExitCritical>
				return pdPASS;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e098      	b.n	800742a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d112      	bne.n	8007324 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	617b      	str	r3, [r7, #20]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800731c:	f001 fd2e 	bl	8008d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007320:	2300      	movs	r3, #0
 8007322:	e082      	b.n	800742a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f83e 	bl	80083b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007338:	f001 fd20 	bl	8008d7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800733c:	f000 fda4 	bl	8007e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007340:	f001 fcea 	bl	8008d18 <vPortEnterCritical>
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800734a:	b25b      	sxtb	r3, r3
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <xQueueSemaphoreTake+0x142>
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007360:	b25b      	sxtb	r3, r3
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d103      	bne.n	8007370 <xQueueSemaphoreTake+0x158>
 8007368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007370:	f001 fd04 	bl	8008d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007374:	463a      	mov	r2, r7
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f001 f82d 	bl	80083dc <xTaskCheckForTimeOut>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d132      	bne.n	80073ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007388:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800738a:	f000 fa33 	bl	80077f4 <prvIsQueueEmpty>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d026      	beq.n	80073e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d109      	bne.n	80073b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800739c:	f001 fcbc 	bl	8008d18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f97d 	bl	80086a4 <xTaskPriorityInherit>
 80073aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80073ac:	f001 fce6 	bl	8008d7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	3324      	adds	r3, #36	@ 0x24
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 ff6f 	bl	800829c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073c0:	f000 f9c6 	bl	8007750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073c4:	f000 fd6e 	bl	8007ea4 <xTaskResumeAll>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f47f af67 	bne.w	800729e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80073d0:	4b18      	ldr	r3, [pc, #96]	@ (8007434 <xQueueSemaphoreTake+0x21c>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	e75d      	b.n	800729e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073e4:	f000 f9b4 	bl	8007750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e8:	f000 fd5c 	bl	8007ea4 <xTaskResumeAll>
 80073ec:	e757      	b.n	800729e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073f0:	f000 f9ae 	bl	8007750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073f4:	f000 fd56 	bl	8007ea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073fa:	f000 f9fb 	bl	80077f4 <prvIsQueueEmpty>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f43f af4c 	beq.w	800729e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00d      	beq.n	8007428 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800740c:	f001 fc84 	bl	8008d18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007412:	f000 f8f5 	bl	8007600 <prvGetDisinheritPriorityAfterTimeout>
 8007416:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa3e 	bl	80088a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007424:	f001 fcaa 	bl	8008d7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800742a:	4618      	mov	r0, r3
 800742c:	3738      	adds	r7, #56	@ 0x38
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08e      	sub	sp, #56	@ 0x38
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10b      	bne.n	8007466 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	623b      	str	r3, [r7, #32]
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	e7fd      	b.n	8007462 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <xQueueReceiveFromISR+0x3c>
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueReceiveFromISR+0x40>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueReceiveFromISR+0x42>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007496:	f001 fd1f 	bl	8008ed8 <vPortValidateInterruptPriority>
	__asm volatile
 800749a:	f3ef 8211 	mrs	r2, BASEPRI
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	61ba      	str	r2, [r7, #24]
 80074b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d02f      	beq.n	8007522 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074d0:	f000 f918 	bl	8007704 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d112      	bne.n	800750c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	3310      	adds	r3, #16
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fef8 	bl	80082e8 <xTaskRemoveFromEventList>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e007      	b.n	800751c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007510:	3301      	adds	r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	b25a      	sxtb	r2, r3
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800751c:	2301      	movs	r3, #1
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007520:	e001      	b.n	8007526 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	613b      	str	r3, [r7, #16]
	__asm volatile
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f383 8811 	msr	BASEPRI, r3
}
 8007530:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007534:	4618      	mov	r0, r3
 8007536:	3738      	adds	r7, #56	@ 0x38
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007562:	f001 fbd9 	bl	8008d18 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800756c:	f001 fc06 	bl	8008d7c <vPortExitCritical>

	return uxReturn;
 8007570:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60fb      	str	r3, [r7, #12]
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80075aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075ac:	4618      	mov	r0, r3
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <vQueueDelete+0x2a>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60bb      	str	r3, [r7, #8]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f95e 	bl	80078a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f001 fd40 	bl	8009078 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1c3 0307 	rsb	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e001      	b.n	8007622 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007622:	68fb      	ldr	r3, [r7, #12]
	}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10d      	bne.n	800766a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d14d      	bne.n	80076f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f898 	bl	8008790 <xTaskPriorityDisinherit>
 8007660:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	609a      	str	r2, [r3, #8]
 8007668:	e043      	b.n	80076f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d119      	bne.n	80076a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6858      	ldr	r0, [r3, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	461a      	mov	r2, r3
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	f011 f955 	bl	801892a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	441a      	add	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	d32b      	bcc.n	80076f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	e026      	b.n	80076f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68d8      	ldr	r0, [r3, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ac:	461a      	mov	r2, r3
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	f011 f93b 	bl	801892a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076bc:	425b      	negs	r3, r3
 80076be:	441a      	add	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d207      	bcs.n	80076e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	425b      	negs	r3, r3
 80076da:	441a      	add	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d105      	bne.n	80076f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076fa:	697b      	ldr	r3, [r7, #20]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d018      	beq.n	8007748 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	441a      	add	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	429a      	cmp	r2, r3
 800772e:	d303      	bcc.n	8007738 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68d9      	ldr	r1, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007740:	461a      	mov	r2, r3
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f011 f8f1 	bl	801892a <memcpy>
	}
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007758:	f001 fade 	bl	8008d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007762:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007764:	e011      	b.n	800778a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d012      	beq.n	8007794 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3324      	adds	r3, #36	@ 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fdb8 	bl	80082e8 <xTaskRemoveFromEventList>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800777e:	f000 fe91 	bl	80084a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	3b01      	subs	r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800778a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778e:	2b00      	cmp	r3, #0
 8007790:	dce9      	bgt.n	8007766 <prvUnlockQueue+0x16>
 8007792:	e000      	b.n	8007796 <prvUnlockQueue+0x46>
					break;
 8007794:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	22ff      	movs	r2, #255	@ 0xff
 800779a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800779e:	f001 faed 	bl	8008d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077a2:	f001 fab9 	bl	8008d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ae:	e011      	b.n	80077d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d012      	beq.n	80077de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3310      	adds	r3, #16
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 fd93 	bl	80082e8 <xTaskRemoveFromEventList>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077c8:	f000 fe6c 	bl	80084a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dce9      	bgt.n	80077b0 <prvUnlockQueue+0x60>
 80077dc:	e000      	b.n	80077e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	22ff      	movs	r2, #255	@ 0xff
 80077e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80077e8:	f001 fac8 	bl	8008d7c <vPortExitCritical>
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077fc:	f001 fa8c 	bl	8008d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e001      	b.n	8007812 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007812:	f001 fab3 	bl	8008d7c <vPortExitCritical>

	return xReturn;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007828:	f001 fa76 	bl	8008d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	429a      	cmp	r2, r3
 8007836:	d102      	bne.n	800783e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e001      	b.n	8007842 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f001 fa9b 	bl	8008d7c <vPortExitCritical>

	return xReturn;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	e014      	b.n	800788a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007860:	4a0f      	ldr	r2, [pc, #60]	@ (80078a0 <vQueueAddToRegistry+0x50>)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10b      	bne.n	8007884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800786c:	490c      	ldr	r1, [pc, #48]	@ (80078a0 <vQueueAddToRegistry+0x50>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007876:	4a0a      	ldr	r2, [pc, #40]	@ (80078a0 <vQueueAddToRegistry+0x50>)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007882:	e006      	b.n	8007892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b07      	cmp	r3, #7
 800788e:	d9e7      	bls.n	8007860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	2000118c 	.word	0x2000118c

080078a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e016      	b.n	80078e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80078b2:	4a10      	ldr	r2, [pc, #64]	@ (80078f4 <vQueueUnregisterQueue+0x50>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	4413      	add	r3, r2
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d10b      	bne.n	80078da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80078c2:	4a0c      	ldr	r2, [pc, #48]	@ (80078f4 <vQueueUnregisterQueue+0x50>)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2100      	movs	r1, #0
 80078c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80078cc:	4a09      	ldr	r2, [pc, #36]	@ (80078f4 <vQueueUnregisterQueue+0x50>)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4413      	add	r3, r2
 80078d4:	2200      	movs	r2, #0
 80078d6:	605a      	str	r2, [r3, #4]
				break;
 80078d8:	e006      	b.n	80078e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b07      	cmp	r3, #7
 80078e4:	d9e5      	bls.n	80078b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	2000118c 	.word	0x2000118c

080078f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08e      	sub	sp, #56	@ 0x38
 80078fc:	af04      	add	r7, sp, #16
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <xTaskCreateStatic+0x2c>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	623b      	str	r3, [r7, #32]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xTaskCreateStatic+0x4a>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	61fb      	str	r3, [r7, #28]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007942:	2364      	movs	r3, #100	@ 0x64
 8007944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b64      	cmp	r3, #100	@ 0x64
 800794a:	d00b      	beq.n	8007964 <xTaskCreateStatic+0x6c>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61bb      	str	r3, [r7, #24]
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01e      	beq.n	80079aa <xTaskCreateStatic+0xb2>
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800797a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007984:	2300      	movs	r3, #0
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	9302      	str	r3, [sp, #8]
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f850 	bl	8007a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079a4:	f000 f8de 	bl	8007b64 <prvAddNewTaskToReadyList>
 80079a8:	e001      	b.n	80079ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079ae:	697b      	ldr	r3, [r7, #20]
	}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3728      	adds	r7, #40	@ 0x28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08c      	sub	sp, #48	@ 0x30
 80079bc:	af04      	add	r7, sp, #16
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 fac5 	bl	8008f5c <pvPortMalloc>
 80079d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079da:	2064      	movs	r0, #100	@ 0x64
 80079dc:	f001 fabe 	bl	8008f5c <pvPortMalloc>
 80079e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80079ee:	e005      	b.n	80079fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079f0:	6978      	ldr	r0, [r7, #20]
 80079f2:	f001 fb41 	bl	8009078 <vPortFree>
 80079f6:	e001      	b.n	80079fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d017      	beq.n	8007a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f80e 	bl	8007a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a26:	69f8      	ldr	r0, [r7, #28]
 8007a28:	f000 f89c 	bl	8007b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	e002      	b.n	8007a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a38:	69bb      	ldr	r3, [r7, #24]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	21a5      	movs	r1, #165	@ 0xa5
 8007a5c:	f010 fecf 	bl	80187fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f023 0307 	bic.w	r3, r3, #7
 8007a78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	617b      	str	r3, [r7, #20]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01f      	beq.n	8007ae2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	e012      	b.n	8007ace <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	7819      	ldrb	r1, [r3, #0]
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3334      	adds	r3, #52	@ 0x34
 8007ab8:	460a      	mov	r2, r1
 8007aba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d006      	beq.n	8007ad6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	3301      	adds	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b1f      	cmp	r3, #31
 8007ad2:	d9e9      	bls.n	8007aa8 <prvInitialiseNewTask+0x66>
 8007ad4:	e000      	b.n	8007ad8 <prvInitialiseNewTask+0x96>
			{
				break;
 8007ad6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007ae0:	e003      	b.n	8007aea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	2b06      	cmp	r3, #6
 8007aee:	d901      	bls.n	8007af4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007af0:	2306      	movs	r3, #6
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007afe:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	2200      	movs	r2, #0
 8007b04:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fde2 	bl	80066d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	3318      	adds	r3, #24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fddd 	bl	80066d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	f1c3 0207 	rsb	r2, r3, #7
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	2200      	movs	r2, #0
 8007b34:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	69b8      	ldr	r0, [r7, #24]
 8007b44:	f000 ffb6 	bl	8008ab4 <pxPortInitialiseStack>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b5a:	bf00      	nop
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b6c:	f001 f8d4 	bl	8008d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b70:	4b2a      	ldr	r3, [pc, #168]	@ (8007c1c <prvAddNewTaskToReadyList+0xb8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	4a29      	ldr	r2, [pc, #164]	@ (8007c1c <prvAddNewTaskToReadyList+0xb8>)
 8007b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b7a:	4b29      	ldr	r3, [pc, #164]	@ (8007c20 <prvAddNewTaskToReadyList+0xbc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b82:	4a27      	ldr	r2, [pc, #156]	@ (8007c20 <prvAddNewTaskToReadyList+0xbc>)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b88:	4b24      	ldr	r3, [pc, #144]	@ (8007c1c <prvAddNewTaskToReadyList+0xb8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d110      	bne.n	8007bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b90:	f000 fcac 	bl	80084ec <prvInitialiseTaskLists>
 8007b94:	e00d      	b.n	8007bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b96:	4b23      	ldr	r3, [pc, #140]	@ (8007c24 <prvAddNewTaskToReadyList+0xc0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b9e:	4b20      	ldr	r3, [pc, #128]	@ (8007c20 <prvAddNewTaskToReadyList+0xbc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d802      	bhi.n	8007bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bac:	4a1c      	ldr	r2, [pc, #112]	@ (8007c20 <prvAddNewTaskToReadyList+0xbc>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c28 <prvAddNewTaskToReadyList+0xc4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c28 <prvAddNewTaskToReadyList+0xc4>)
 8007bba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	4b19      	ldr	r3, [pc, #100]	@ (8007c2c <prvAddNewTaskToReadyList+0xc8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <prvAddNewTaskToReadyList+0xc8>)
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4a15      	ldr	r2, [pc, #84]	@ (8007c30 <prvAddNewTaskToReadyList+0xcc>)
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe fd82 	bl	80066ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bea:	f001 f8c7 	bl	8008d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <prvAddNewTaskToReadyList+0xc0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8007c20 <prvAddNewTaskToReadyList+0xbc>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d207      	bcs.n	8007c14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <prvAddNewTaskToReadyList+0xd0>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200012cc 	.word	0x200012cc
 8007c20:	200011cc 	.word	0x200011cc
 8007c24:	200012d8 	.word	0x200012d8
 8007c28:	200012e8 	.word	0x200012e8
 8007c2c:	200012d4 	.word	0x200012d4
 8007c30:	200011d0 	.word	0x200011d0
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c40:	f001 f86a 	bl	8008d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <vTaskDelete+0x18>
 8007c4a:	4b39      	ldr	r3, [pc, #228]	@ (8007d30 <vTaskDelete+0xf8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	e000      	b.n	8007c52 <vTaskDelete+0x1a>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fda5 	bl	80067a8 <uxListRemove>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d115      	bne.n	8007c90 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4932      	ldr	r1, [pc, #200]	@ (8007d34 <vTaskDelete+0xfc>)
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <vTaskDelete+0x58>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	2201      	movs	r2, #1
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	43da      	mvns	r2, r3
 8007c86:	4b2c      	ldr	r3, [pc, #176]	@ (8007d38 <vTaskDelete+0x100>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007d38 <vTaskDelete+0x100>)
 8007c8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fd83 	bl	80067a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007ca2:	4b26      	ldr	r3, [pc, #152]	@ (8007d3c <vTaskDelete+0x104>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	4a24      	ldr	r2, [pc, #144]	@ (8007d3c <vTaskDelete+0x104>)
 8007caa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007cac:	4b20      	ldr	r3, [pc, #128]	@ (8007d30 <vTaskDelete+0xf8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d10b      	bne.n	8007cce <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4820      	ldr	r0, [pc, #128]	@ (8007d40 <vTaskDelete+0x108>)
 8007cbe:	f7fe fd16 	bl	80066ee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007cc2:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <vTaskDelete+0x10c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d44 <vTaskDelete+0x10c>)
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	e009      	b.n	8007ce2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <vTaskDelete+0x110>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d48 <vTaskDelete+0x110>)
 8007cd6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fc75 	bl	80085c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007cde:	f000 fca3 	bl	8008628 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007ce2:	f001 f84b 	bl	8008d7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007ce6:	4b19      	ldr	r3, [pc, #100]	@ (8007d4c <vTaskDelete+0x114>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01c      	beq.n	8007d28 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007cee:	4b10      	ldr	r3, [pc, #64]	@ (8007d30 <vTaskDelete+0xf8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d117      	bne.n	8007d28 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007cf8:	4b15      	ldr	r3, [pc, #84]	@ (8007d50 <vTaskDelete+0x118>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <vTaskDelete+0xe0>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60bb      	str	r3, [r7, #8]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007d18:	4b0e      	ldr	r3, [pc, #56]	@ (8007d54 <vTaskDelete+0x11c>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200011cc 	.word	0x200011cc
 8007d34:	200011d0 	.word	0x200011d0
 8007d38:	200012d4 	.word	0x200012d4
 8007d3c:	200012e8 	.word	0x200012e8
 8007d40:	200012a0 	.word	0x200012a0
 8007d44:	200012b4 	.word	0x200012b4
 8007d48:	200012cc 	.word	0x200012cc
 8007d4c:	200012d8 	.word	0x200012d8
 8007d50:	200012f4 	.word	0x200012f4
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d018      	beq.n	8007d9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d6a:	4b14      	ldr	r3, [pc, #80]	@ (8007dbc <vTaskDelay+0x64>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00b      	beq.n	8007d8a <vTaskDelay+0x32>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60bb      	str	r3, [r7, #8]
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d8a:	f000 f87d 	bl	8007e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fe29 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d96:	f000 f885 	bl	8007ea4 <xTaskResumeAll>
 8007d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d107      	bne.n	8007db2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007da2:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <vTaskDelay+0x68>)
 8007da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200012f4 	.word	0x200012f4
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	@ 0x28
 8007dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	1d39      	adds	r1, r7, #4
 8007dd6:	f107 0308 	add.w	r3, r7, #8
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7f9 f93c 	bl	8001058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	9202      	str	r2, [sp, #8]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	2300      	movs	r3, #0
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	460a      	mov	r2, r1
 8007df2:	491f      	ldr	r1, [pc, #124]	@ (8007e70 <vTaskStartScheduler+0xac>)
 8007df4:	481f      	ldr	r0, [pc, #124]	@ (8007e74 <vTaskStartScheduler+0xb0>)
 8007df6:	f7ff fd7f 	bl	80078f8 <xTaskCreateStatic>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <vTaskStartScheduler+0xb4>)
 8007dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e00:	4b1d      	ldr	r3, [pc, #116]	@ (8007e78 <vTaskStartScheduler+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	e001      	b.n	8007e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d116      	bne.n	8007e46 <vTaskStartScheduler+0x82>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	613b      	str	r3, [r7, #16]
}
 8007e2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e2c:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <vTaskStartScheduler+0xb8>)
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e34:	4b12      	ldr	r3, [pc, #72]	@ (8007e80 <vTaskStartScheduler+0xbc>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <vTaskStartScheduler+0xc0>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e40:	f000 fec6 	bl	8008bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e44:	e00f      	b.n	8007e66 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d10b      	bne.n	8007e66 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60fb      	str	r3, [r7, #12]
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <vTaskStartScheduler+0x9e>
}
 8007e66:	bf00      	nop
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	08019b9c 	.word	0x08019b9c
 8007e74:	080084bd 	.word	0x080084bd
 8007e78:	200012f0 	.word	0x200012f0
 8007e7c:	200012ec 	.word	0x200012ec
 8007e80:	200012d8 	.word	0x200012d8
 8007e84:	200012d0 	.word	0x200012d0

08007e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ea0 <vTaskSuspendAll+0x18>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	4a03      	ldr	r2, [pc, #12]	@ (8007ea0 <vTaskSuspendAll+0x18>)
 8007e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e96:	bf00      	nop
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	200012f4 	.word	0x200012f4

08007ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007eb2:	4b42      	ldr	r3, [pc, #264]	@ (8007fbc <xTaskResumeAll+0x118>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	603b      	str	r3, [r7, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ed2:	f000 ff21 	bl	8008d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ed6:	4b39      	ldr	r3, [pc, #228]	@ (8007fbc <xTaskResumeAll+0x118>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4a37      	ldr	r2, [pc, #220]	@ (8007fbc <xTaskResumeAll+0x118>)
 8007ede:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee0:	4b36      	ldr	r3, [pc, #216]	@ (8007fbc <xTaskResumeAll+0x118>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d161      	bne.n	8007fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ee8:	4b35      	ldr	r3, [pc, #212]	@ (8007fc0 <xTaskResumeAll+0x11c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05d      	beq.n	8007fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ef0:	e02e      	b.n	8007f50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b34      	ldr	r3, [pc, #208]	@ (8007fc4 <xTaskResumeAll+0x120>)
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3318      	adds	r3, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fc52 	bl	80067a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fc4d 	bl	80067a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	2201      	movs	r2, #1
 8007f14:	409a      	lsls	r2, r3
 8007f16:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc8 <xTaskResumeAll+0x124>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc8 <xTaskResumeAll+0x124>)
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4a27      	ldr	r2, [pc, #156]	@ (8007fcc <xTaskResumeAll+0x128>)
 8007f2e:	441a      	add	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f7fe fbd9 	bl	80066ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f40:	4b23      	ldr	r3, [pc, #140]	@ (8007fd0 <xTaskResumeAll+0x12c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f4a:	4b22      	ldr	r3, [pc, #136]	@ (8007fd4 <xTaskResumeAll+0x130>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f50:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc4 <xTaskResumeAll+0x120>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1cc      	bne.n	8007ef2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f5e:	f000 fb63 	bl	8008628 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f62:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd8 <xTaskResumeAll+0x134>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d010      	beq.n	8007f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f6e:	f000 f859 	bl	8008024 <xTaskIncrementTick>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f78:	4b16      	ldr	r3, [pc, #88]	@ (8007fd4 <xTaskResumeAll+0x130>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f1      	bne.n	8007f6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f8a:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <xTaskResumeAll+0x134>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f90:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <xTaskResumeAll+0x130>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fdc <xTaskResumeAll+0x138>)
 8007f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fac:	f000 fee6 	bl	8008d7c <vPortExitCritical>

	return xAlreadyYielded;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	200012f4 	.word	0x200012f4
 8007fc0:	200012cc 	.word	0x200012cc
 8007fc4:	2000128c 	.word	0x2000128c
 8007fc8:	200012d4 	.word	0x200012d4
 8007fcc:	200011d0 	.word	0x200011d0
 8007fd0:	200011cc 	.word	0x200011cc
 8007fd4:	200012e0 	.word	0x200012e0
 8007fd8:	200012dc 	.word	0x200012dc
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fe6:	4b05      	ldr	r3, [pc, #20]	@ (8007ffc <xTaskGetTickCount+0x1c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fec:	687b      	ldr	r3, [r7, #4]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	200012d0 	.word	0x200012d0

08008000 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008006:	f000 ff67 	bl	8008ed8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800800a:	2300      	movs	r3, #0
 800800c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800800e:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <xTaskGetTickCountFromISR+0x20>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008014:	683b      	ldr	r3, [r7, #0]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	200012d0 	.word	0x200012d0

08008024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800802e:	4b4f      	ldr	r3, [pc, #316]	@ (800816c <xTaskIncrementTick+0x148>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f040 808f 	bne.w	8008156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008038:	4b4d      	ldr	r3, [pc, #308]	@ (8008170 <xTaskIncrementTick+0x14c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3301      	adds	r3, #1
 800803e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008040:	4a4b      	ldr	r2, [pc, #300]	@ (8008170 <xTaskIncrementTick+0x14c>)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d121      	bne.n	8008090 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800804c:	4b49      	ldr	r3, [pc, #292]	@ (8008174 <xTaskIncrementTick+0x150>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	603b      	str	r3, [r7, #0]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <xTaskIncrementTick+0x46>
 800806e:	4b41      	ldr	r3, [pc, #260]	@ (8008174 <xTaskIncrementTick+0x150>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	4b40      	ldr	r3, [pc, #256]	@ (8008178 <xTaskIncrementTick+0x154>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3e      	ldr	r2, [pc, #248]	@ (8008174 <xTaskIncrementTick+0x150>)
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	4a3e      	ldr	r2, [pc, #248]	@ (8008178 <xTaskIncrementTick+0x154>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	4b3e      	ldr	r3, [pc, #248]	@ (800817c <xTaskIncrementTick+0x158>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	4a3c      	ldr	r2, [pc, #240]	@ (800817c <xTaskIncrementTick+0x158>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	f000 facc 	bl	8008628 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008090:	4b3b      	ldr	r3, [pc, #236]	@ (8008180 <xTaskIncrementTick+0x15c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	d348      	bcc.n	800812c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809a:	4b36      	ldr	r3, [pc, #216]	@ (8008174 <xTaskIncrementTick+0x150>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a4:	4b36      	ldr	r3, [pc, #216]	@ (8008180 <xTaskIncrementTick+0x15c>)
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295
 80080aa:	601a      	str	r2, [r3, #0]
					break;
 80080ac:	e03e      	b.n	800812c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ae:	4b31      	ldr	r3, [pc, #196]	@ (8008174 <xTaskIncrementTick+0x150>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d203      	bcs.n	80080ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008180 <xTaskIncrementTick+0x15c>)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080cc:	e02e      	b.n	800812c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fb68 	bl	80067a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3318      	adds	r3, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fb5f 	bl	80067a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ee:	2201      	movs	r2, #1
 80080f0:	409a      	lsls	r2, r3
 80080f2:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <xTaskIncrementTick+0x160>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	4a22      	ldr	r2, [pc, #136]	@ (8008184 <xTaskIncrementTick+0x160>)
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4a1f      	ldr	r2, [pc, #124]	@ (8008188 <xTaskIncrementTick+0x164>)
 800810a:	441a      	add	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	3304      	adds	r3, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f7fe faeb 	bl	80066ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811c:	4b1b      	ldr	r3, [pc, #108]	@ (800818c <xTaskIncrementTick+0x168>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	429a      	cmp	r2, r3
 8008124:	d3b9      	bcc.n	800809a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800812a:	e7b6      	b.n	800809a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800812c:	4b17      	ldr	r3, [pc, #92]	@ (800818c <xTaskIncrementTick+0x168>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008132:	4915      	ldr	r1, [pc, #84]	@ (8008188 <xTaskIncrementTick+0x164>)
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d901      	bls.n	8008148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008148:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <xTaskIncrementTick+0x16c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e004      	b.n	8008160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <xTaskIncrementTick+0x170>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a0d      	ldr	r2, [pc, #52]	@ (8008194 <xTaskIncrementTick+0x170>)
 800815e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008160:	697b      	ldr	r3, [r7, #20]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	200012f4 	.word	0x200012f4
 8008170:	200012d0 	.word	0x200012d0
 8008174:	20001284 	.word	0x20001284
 8008178:	20001288 	.word	0x20001288
 800817c:	200012e4 	.word	0x200012e4
 8008180:	200012ec 	.word	0x200012ec
 8008184:	200012d4 	.word	0x200012d4
 8008188:	200011d0 	.word	0x200011d0
 800818c:	200011cc 	.word	0x200011cc
 8008190:	200012e0 	.word	0x200012e0
 8008194:	200012dc 	.word	0x200012dc

08008198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800819e:	4b3a      	ldr	r3, [pc, #232]	@ (8008288 <vTaskSwitchContext+0xf0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081a6:	4b39      	ldr	r3, [pc, #228]	@ (800828c <vTaskSwitchContext+0xf4>)
 80081a8:	2201      	movs	r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081ac:	e067      	b.n	800827e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80081ae:	4b37      	ldr	r3, [pc, #220]	@ (800828c <vTaskSwitchContext+0xf4>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80081b4:	4b36      	ldr	r3, [pc, #216]	@ (8008290 <vTaskSwitchContext+0xf8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d111      	bne.n	80081f0 <vTaskSwitchContext+0x58>
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3304      	adds	r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d10b      	bne.n	80081f0 <vTaskSwitchContext+0x58>
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3308      	adds	r3, #8
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d105      	bne.n	80081f0 <vTaskSwitchContext+0x58>
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	330c      	adds	r3, #12
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d008      	beq.n	8008202 <vTaskSwitchContext+0x6a>
 80081f0:	4b27      	ldr	r3, [pc, #156]	@ (8008290 <vTaskSwitchContext+0xf8>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b26      	ldr	r3, [pc, #152]	@ (8008290 <vTaskSwitchContext+0xf8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3334      	adds	r3, #52	@ 0x34
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7f9 fb39 	bl	8001874 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008202:	4b24      	ldr	r3, [pc, #144]	@ (8008294 <vTaskSwitchContext+0xfc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	fab3 f383 	clz	r3, r3
 800820e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	f1c3 031f 	rsb	r3, r3, #31
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	491f      	ldr	r1, [pc, #124]	@ (8008298 <vTaskSwitchContext+0x100>)
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <vTaskSwitchContext+0xac>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	607b      	str	r3, [r7, #4]
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <vTaskSwitchContext+0xa8>
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4a12      	ldr	r2, [pc, #72]	@ (8008298 <vTaskSwitchContext+0x100>)
 8008250:	4413      	add	r3, r2
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3308      	adds	r3, #8
 8008266:	429a      	cmp	r2, r3
 8008268:	d104      	bne.n	8008274 <vTaskSwitchContext+0xdc>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	605a      	str	r2, [r3, #4]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	4a05      	ldr	r2, [pc, #20]	@ (8008290 <vTaskSwitchContext+0xf8>)
 800827c:	6013      	str	r3, [r2, #0]
}
 800827e:	bf00      	nop
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200012f4 	.word	0x200012f4
 800828c:	200012e0 	.word	0x200012e0
 8008290:	200011cc 	.word	0x200011cc
 8008294:	200012d4 	.word	0x200012d4
 8008298:	200011d0 	.word	0x200011d0

0800829c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10b      	bne.n	80082c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60fb      	str	r3, [r7, #12]
}
 80082be:	bf00      	nop
 80082c0:	bf00      	nop
 80082c2:	e7fd      	b.n	80082c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <vTaskPlaceOnEventList+0x48>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3318      	adds	r3, #24
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fe fa32 	bl	8006736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082d2:	2101      	movs	r1, #1
 80082d4:	6838      	ldr	r0, [r7, #0]
 80082d6:	f000 fb87 	bl	80089e8 <prvAddCurrentTaskToDelayedList>
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200011cc 	.word	0x200011cc

080082e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60fb      	str	r3, [r7, #12]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3318      	adds	r3, #24
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fa44 	bl	80067a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008320:	4b1d      	ldr	r3, [pc, #116]	@ (8008398 <xTaskRemoveFromEventList+0xb0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11c      	bne.n	8008362 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	3304      	adds	r3, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fa3b 	bl	80067a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	2201      	movs	r2, #1
 8008338:	409a      	lsls	r2, r3
 800833a:	4b18      	ldr	r3, [pc, #96]	@ (800839c <xTaskRemoveFromEventList+0xb4>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4313      	orrs	r3, r2
 8008340:	4a16      	ldr	r2, [pc, #88]	@ (800839c <xTaskRemoveFromEventList+0xb4>)
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4a13      	ldr	r2, [pc, #76]	@ (80083a0 <xTaskRemoveFromEventList+0xb8>)
 8008352:	441a      	add	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3304      	adds	r3, #4
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f7fe f9c7 	bl	80066ee <vListInsertEnd>
 8008360:	e005      	b.n	800836e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3318      	adds	r3, #24
 8008366:	4619      	mov	r1, r3
 8008368:	480e      	ldr	r0, [pc, #56]	@ (80083a4 <xTaskRemoveFromEventList+0xbc>)
 800836a:	f7fe f9c0 	bl	80066ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <xTaskRemoveFromEventList+0xc0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	429a      	cmp	r2, r3
 800837a:	d905      	bls.n	8008388 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008380:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <xTaskRemoveFromEventList+0xc4>)
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e001      	b.n	800838c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800838c:	697b      	ldr	r3, [r7, #20]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200012f4 	.word	0x200012f4
 800839c:	200012d4 	.word	0x200012d4
 80083a0:	200011d0 	.word	0x200011d0
 80083a4:	2000128c 	.word	0x2000128c
 80083a8:	200011cc 	.word	0x200011cc
 80083ac:	200012e0 	.word	0x200012e0

080083b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083b8:	4b06      	ldr	r3, [pc, #24]	@ (80083d4 <vTaskInternalSetTimeOutState+0x24>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083c0:	4b05      	ldr	r3, [pc, #20]	@ (80083d8 <vTaskInternalSetTimeOutState+0x28>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	605a      	str	r2, [r3, #4]
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	200012e4 	.word	0x200012e4
 80083d8:	200012d0 	.word	0x200012d0

080083dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	613b      	str	r3, [r7, #16]
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	60fb      	str	r3, [r7, #12]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008422:	f000 fc79 	bl	8008d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008426:	4b1d      	ldr	r3, [pc, #116]	@ (800849c <xTaskCheckForTimeOut+0xc0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d102      	bne.n	8008446 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	e023      	b.n	800848e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <xTaskCheckForTimeOut+0xc4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d007      	beq.n	8008462 <xTaskCheckForTimeOut+0x86>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	429a      	cmp	r2, r3
 800845a:	d302      	bcc.n	8008462 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	e015      	b.n	800848e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	429a      	cmp	r2, r3
 800846a:	d20b      	bcs.n	8008484 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff99 	bl	80083b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e004      	b.n	800848e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800848e:	f000 fc75 	bl	8008d7c <vPortExitCritical>

	return xReturn;
 8008492:	69fb      	ldr	r3, [r7, #28]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200012d0 	.word	0x200012d0
 80084a0:	200012e4 	.word	0x200012e4

080084a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084a8:	4b03      	ldr	r3, [pc, #12]	@ (80084b8 <vTaskMissedYield+0x14>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	200012e0 	.word	0x200012e0

080084bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084c4:	f000 f852 	bl	800856c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084c8:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <prvIdleTask+0x28>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d9f9      	bls.n	80084c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084d0:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <prvIdleTask+0x2c>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084e0:	e7f0      	b.n	80084c4 <prvIdleTask+0x8>
 80084e2:	bf00      	nop
 80084e4:	200011d0 	.word	0x200011d0
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	e00c      	b.n	8008512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4a12      	ldr	r2, [pc, #72]	@ (800854c <prvInitialiseTaskLists+0x60>)
 8008504:	4413      	add	r3, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f8c4 	bl	8006694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3301      	adds	r3, #1
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b06      	cmp	r3, #6
 8008516:	d9ef      	bls.n	80084f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008518:	480d      	ldr	r0, [pc, #52]	@ (8008550 <prvInitialiseTaskLists+0x64>)
 800851a:	f7fe f8bb 	bl	8006694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800851e:	480d      	ldr	r0, [pc, #52]	@ (8008554 <prvInitialiseTaskLists+0x68>)
 8008520:	f7fe f8b8 	bl	8006694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008524:	480c      	ldr	r0, [pc, #48]	@ (8008558 <prvInitialiseTaskLists+0x6c>)
 8008526:	f7fe f8b5 	bl	8006694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800852a:	480c      	ldr	r0, [pc, #48]	@ (800855c <prvInitialiseTaskLists+0x70>)
 800852c:	f7fe f8b2 	bl	8006694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008530:	480b      	ldr	r0, [pc, #44]	@ (8008560 <prvInitialiseTaskLists+0x74>)
 8008532:	f7fe f8af 	bl	8006694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008536:	4b0b      	ldr	r3, [pc, #44]	@ (8008564 <prvInitialiseTaskLists+0x78>)
 8008538:	4a05      	ldr	r2, [pc, #20]	@ (8008550 <prvInitialiseTaskLists+0x64>)
 800853a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <prvInitialiseTaskLists+0x7c>)
 800853e:	4a05      	ldr	r2, [pc, #20]	@ (8008554 <prvInitialiseTaskLists+0x68>)
 8008540:	601a      	str	r2, [r3, #0]
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200011d0 	.word	0x200011d0
 8008550:	2000125c 	.word	0x2000125c
 8008554:	20001270 	.word	0x20001270
 8008558:	2000128c 	.word	0x2000128c
 800855c:	200012a0 	.word	0x200012a0
 8008560:	200012b8 	.word	0x200012b8
 8008564:	20001284 	.word	0x20001284
 8008568:	20001288 	.word	0x20001288

0800856c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008572:	e019      	b.n	80085a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008574:	f000 fbd0 	bl	8008d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	4b10      	ldr	r3, [pc, #64]	@ (80085bc <prvCheckTasksWaitingTermination+0x50>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe f90f 	bl	80067a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <prvCheckTasksWaitingTermination+0x54>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3b01      	subs	r3, #1
 8008590:	4a0b      	ldr	r2, [pc, #44]	@ (80085c0 <prvCheckTasksWaitingTermination+0x54>)
 8008592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008594:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3b01      	subs	r3, #1
 800859a:	4a0a      	ldr	r2, [pc, #40]	@ (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 800859c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800859e:	f000 fbed 	bl	8008d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f810 	bl	80085c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085a8:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <prvCheckTasksWaitingTermination+0x58>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e1      	bne.n	8008574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200012a0 	.word	0x200012a0
 80085c0:	200012cc 	.word	0x200012cc
 80085c4:	200012b4 	.word	0x200012b4

080085c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fd4a 	bl	8009078 <vPortFree>
				vPortFree( pxTCB );
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fd47 	bl	8009078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085ea:	e019      	b.n	8008620 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d103      	bne.n	80085fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fd3e 	bl	8009078 <vPortFree>
	}
 80085fc:	e010      	b.n	8008620 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008604:	2b02      	cmp	r3, #2
 8008606:	d00b      	beq.n	8008620 <prvDeleteTCB+0x58>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60fb      	str	r3, [r7, #12]
}
 800861a:	bf00      	nop
 800861c:	bf00      	nop
 800861e:	e7fd      	b.n	800861c <prvDeleteTCB+0x54>
	}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800862e:	4b0c      	ldr	r3, [pc, #48]	@ (8008660 <prvResetNextTaskUnblockTime+0x38>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008638:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <prvResetNextTaskUnblockTime+0x3c>)
 800863a:	f04f 32ff 	mov.w	r2, #4294967295
 800863e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008640:	e008      	b.n	8008654 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008642:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <prvResetNextTaskUnblockTime+0x38>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <prvResetNextTaskUnblockTime+0x3c>)
 8008652:	6013      	str	r3, [r2, #0]
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20001284 	.word	0x20001284
 8008664:	200012ec 	.word	0x200012ec

08008668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800866e:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <xTaskGetSchedulerState+0x34>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008676:	2301      	movs	r3, #1
 8008678:	607b      	str	r3, [r7, #4]
 800867a:	e008      	b.n	800868e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800867c:	4b08      	ldr	r3, [pc, #32]	@ (80086a0 <xTaskGetSchedulerState+0x38>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008684:	2302      	movs	r3, #2
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	e001      	b.n	800868e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800868a:	2300      	movs	r3, #0
 800868c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800868e:	687b      	ldr	r3, [r7, #4]
	}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	200012d8 	.word	0x200012d8
 80086a0:	200012f4 	.word	0x200012f4

080086a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d05e      	beq.n	8008778 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086be:	4b31      	ldr	r3, [pc, #196]	@ (8008784 <xTaskPriorityInherit+0xe0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d24e      	bcs.n	8008766 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	db06      	blt.n	80086de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008784 <xTaskPriorityInherit+0xe0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d6:	f1c3 0207 	rsb	r2, r3, #7
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6959      	ldr	r1, [r3, #20]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4a26      	ldr	r2, [pc, #152]	@ (8008788 <xTaskPriorityInherit+0xe4>)
 80086f0:	4413      	add	r3, r2
 80086f2:	4299      	cmp	r1, r3
 80086f4:	d12f      	bne.n	8008756 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe f854 	bl	80067a8 <uxListRemove>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870a:	2201      	movs	r2, #1
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	43da      	mvns	r2, r3
 8008712:	4b1e      	ldr	r3, [pc, #120]	@ (800878c <xTaskPriorityInherit+0xe8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4013      	ands	r3, r2
 8008718:	4a1c      	ldr	r2, [pc, #112]	@ (800878c <xTaskPriorityInherit+0xe8>)
 800871a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800871c:	4b19      	ldr	r3, [pc, #100]	@ (8008784 <xTaskPriorityInherit+0xe0>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	2201      	movs	r2, #1
 800872c:	409a      	lsls	r2, r3
 800872e:	4b17      	ldr	r3, [pc, #92]	@ (800878c <xTaskPriorityInherit+0xe8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4313      	orrs	r3, r2
 8008734:	4a15      	ldr	r2, [pc, #84]	@ (800878c <xTaskPriorityInherit+0xe8>)
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4a10      	ldr	r2, [pc, #64]	@ (8008788 <xTaskPriorityInherit+0xe4>)
 8008746:	441a      	add	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fd ffcd 	bl	80066ee <vListInsertEnd>
 8008754:	e004      	b.n	8008760 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008756:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <xTaskPriorityInherit+0xe0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	e008      	b.n	8008778 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800876a:	4b06      	ldr	r3, [pc, #24]	@ (8008784 <xTaskPriorityInherit+0xe0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008770:	429a      	cmp	r2, r3
 8008772:	d201      	bcs.n	8008778 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008778:	68fb      	ldr	r3, [r7, #12]
	}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200011cc 	.word	0x200011cc
 8008788:	200011d0 	.word	0x200011d0
 800878c:	200012d4 	.word	0x200012d4

08008790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d070      	beq.n	8008888 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008894 <xTaskPriorityDisinherit+0x104>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d00b      	beq.n	80087c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60bb      	str	r3, [r7, #8]
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ec:	1e5a      	subs	r2, r3, #1
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d044      	beq.n	8008888 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008802:	2b00      	cmp	r3, #0
 8008804:	d140      	bne.n	8008888 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	3304      	adds	r3, #4
 800880a:	4618      	mov	r0, r3
 800880c:	f7fd ffcc 	bl	80067a8 <uxListRemove>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d115      	bne.n	8008842 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881a:	491f      	ldr	r1, [pc, #124]	@ (8008898 <xTaskPriorityDisinherit+0x108>)
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xTaskPriorityDisinherit+0xb2>
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008830:	2201      	movs	r2, #1
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	43da      	mvns	r2, r3
 8008838:	4b18      	ldr	r3, [pc, #96]	@ (800889c <xTaskPriorityDisinherit+0x10c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4013      	ands	r3, r2
 800883e:	4a17      	ldr	r2, [pc, #92]	@ (800889c <xTaskPriorityDisinherit+0x10c>)
 8008840:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884e:	f1c3 0207 	rsb	r2, r3, #7
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885a:	2201      	movs	r2, #1
 800885c:	409a      	lsls	r2, r3
 800885e:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <xTaskPriorityDisinherit+0x10c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4313      	orrs	r3, r2
 8008864:	4a0d      	ldr	r2, [pc, #52]	@ (800889c <xTaskPriorityDisinherit+0x10c>)
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4a08      	ldr	r2, [pc, #32]	@ (8008898 <xTaskPriorityDisinherit+0x108>)
 8008876:	441a      	add	r2, r3
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3304      	adds	r3, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fd ff35 	bl	80066ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008888:	697b      	ldr	r3, [r7, #20]
	}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	200011cc 	.word	0x200011cc
 8008898:	200011d0 	.word	0x200011d0
 800889c:	200012d4 	.word	0x200012d4

080088a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d079      	beq.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10b      	bne.n	80088d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	e7fd      	b.n	80088d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d902      	bls.n	80088e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	e002      	b.n	80088ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d059      	beq.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d154      	bne.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008902:	4b2c      	ldr	r3, [pc, #176]	@ (80089b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	d10b      	bne.n	8008924 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	e7fd      	b.n	8008920 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	db04      	blt.n	8008942 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f1c3 0207 	rsb	r2, r3, #7
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	6959      	ldr	r1, [r3, #20]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4a19      	ldr	r2, [pc, #100]	@ (80089b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008952:	4413      	add	r3, r2
 8008954:	4299      	cmp	r1, r3
 8008956:	d129      	bne.n	80089ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd ff23 	bl	80067a8 <uxListRemove>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	4b11      	ldr	r3, [pc, #68]	@ (80089bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4013      	ands	r3, r2
 800897a:	4a10      	ldr	r2, [pc, #64]	@ (80089bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800897c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008982:	2201      	movs	r2, #1
 8008984:	409a      	lsls	r2, r3
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4313      	orrs	r3, r2
 800898c:	4a0b      	ldr	r2, [pc, #44]	@ (80089bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4a06      	ldr	r2, [pc, #24]	@ (80089b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800899e:	441a      	add	r2, r3
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fd fea1 	bl	80066ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089ac:	bf00      	nop
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200011cc 	.word	0x200011cc
 80089b8:	200011d0 	.word	0x200011d0
 80089bc:	200012d4 	.word	0x200012d4

080089c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80089c4:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089d2:	3201      	adds	r2, #1
 80089d4:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		return pxCurrentTCB;
 80089d6:	4b03      	ldr	r3, [pc, #12]	@ (80089e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80089d8:	681b      	ldr	r3, [r3, #0]
	}
 80089da:	4618      	mov	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	200011cc 	.word	0x200011cc

080089e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089f2:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <prvAddCurrentTaskToDelayedList+0xb0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f8:	4b28      	ldr	r3, [pc, #160]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd fed2 	bl	80067a8 <uxListRemove>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a0a:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	2201      	movs	r2, #1
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	43da      	mvns	r2, r3
 8008a18:	4b21      	ldr	r3, [pc, #132]	@ (8008aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	4a20      	ldr	r2, [pc, #128]	@ (8008aa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d10a      	bne.n	8008a40 <prvAddCurrentTaskToDelayedList+0x58>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3304      	adds	r3, #4
 8008a36:	4619      	mov	r1, r3
 8008a38:	481a      	ldr	r0, [pc, #104]	@ (8008aa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a3a:	f7fd fe58 	bl	80066ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a3e:	e026      	b.n	8008a8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4413      	add	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a48:	4b14      	ldr	r3, [pc, #80]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d209      	bcs.n	8008a6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a58:	4b13      	ldr	r3, [pc, #76]	@ (8008aa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7fd fe66 	bl	8006736 <vListInsert>
}
 8008a6a:	e010      	b.n	8008a8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008aac <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7fd fe5c 	bl	8006736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d202      	bcs.n	8008a8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a88:	4a09      	ldr	r2, [pc, #36]	@ (8008ab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6013      	str	r3, [r2, #0]
}
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200012d0 	.word	0x200012d0
 8008a9c:	200011cc 	.word	0x200011cc
 8008aa0:	200012d4 	.word	0x200012d4
 8008aa4:	200012b8 	.word	0x200012b8
 8008aa8:	20001288 	.word	0x20001288
 8008aac:	20001284 	.word	0x20001284
 8008ab0:	200012ec 	.word	0x200012ec

08008ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3b04      	subs	r3, #4
 8008ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3b04      	subs	r3, #4
 8008ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f023 0201 	bic.w	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8008b18 <pxPortInitialiseStack+0x64>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3b14      	subs	r3, #20
 8008aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f06f 0202 	mvn.w	r2, #2
 8008b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3b20      	subs	r3, #32
 8008b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	08008b1d 	.word	0x08008b1d

08008b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b26:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <prvTaskExitError+0x58>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d00b      	beq.n	8008b48 <prvTaskExitError+0x2c>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <prvTaskExitError+0x28>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60bb      	str	r3, [r7, #8]
}
 8008b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b5c:	bf00      	nop
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0fc      	beq.n	8008b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000000c 	.word	0x2000000c
	...

08008b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <pxCurrentTCBConst2>)
 8008b82:	6819      	ldr	r1, [r3, #0]
 8008b84:	6808      	ldr	r0, [r1, #0]
 8008b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	f380 8809 	msr	PSP, r0
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8811 	msr	BASEPRI, r0
 8008b9a:	4770      	bx	lr
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst2>:
 8008ba0:	200011cc 	.word	0x200011cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ba8:	4808      	ldr	r0, [pc, #32]	@ (8008bcc <prvPortStartFirstTask+0x24>)
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	f380 8808 	msr	MSP, r0
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8814 	msr	CONTROL, r0
 8008bba:	b662      	cpsie	i
 8008bbc:	b661      	cpsie	f
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	df00      	svc	0
 8008bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bca:	bf00      	nop
 8008bcc:	e000ed08 	.word	0xe000ed08

08008bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bd6:	4b47      	ldr	r3, [pc, #284]	@ (8008cf4 <xPortStartScheduler+0x124>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a47      	ldr	r2, [pc, #284]	@ (8008cf8 <xPortStartScheduler+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10b      	bne.n	8008bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	613b      	str	r3, [r7, #16]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8008cf4 <xPortStartScheduler+0x124>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8008cfc <xPortStartScheduler+0x12c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d10b      	bne.n	8008c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60fb      	str	r3, [r7, #12]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c1a:	4b39      	ldr	r3, [pc, #228]	@ (8008d00 <xPortStartScheduler+0x130>)
 8008c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	22ff      	movs	r2, #255	@ 0xff
 8008c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	4b31      	ldr	r3, [pc, #196]	@ (8008d04 <xPortStartScheduler+0x134>)
 8008c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c42:	4b31      	ldr	r3, [pc, #196]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c44:	2207      	movs	r2, #7
 8008c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c48:	e009      	b.n	8008c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	4a2d      	ldr	r2, [pc, #180]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c66:	2b80      	cmp	r3, #128	@ 0x80
 8008c68:	d0ef      	beq.n	8008c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c6a:	4b27      	ldr	r3, [pc, #156]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1c3 0307 	rsb	r3, r3, #7
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d00b      	beq.n	8008c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60bb      	str	r3, [r7, #8]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	4a1c      	ldr	r2, [pc, #112]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c98:	4b1b      	ldr	r3, [pc, #108]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ca0:	4a19      	ldr	r2, [pc, #100]	@ (8008d08 <xPortStartScheduler+0x138>)
 8008ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cac:	4b17      	ldr	r3, [pc, #92]	@ (8008d0c <xPortStartScheduler+0x13c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a16      	ldr	r2, [pc, #88]	@ (8008d0c <xPortStartScheduler+0x13c>)
 8008cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cb8:	4b14      	ldr	r3, [pc, #80]	@ (8008d0c <xPortStartScheduler+0x13c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a13      	ldr	r2, [pc, #76]	@ (8008d0c <xPortStartScheduler+0x13c>)
 8008cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cc4:	f000 f8da 	bl	8008e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	@ (8008d10 <xPortStartScheduler+0x140>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cce:	f000 f8f9 	bl	8008ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <xPortStartScheduler+0x144>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008d14 <xPortStartScheduler+0x144>)
 8008cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cde:	f7ff ff63 	bl	8008ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ce2:	f7ff fa59 	bl	8008198 <vTaskSwitchContext>
	prvTaskExitError();
 8008ce6:	f7ff ff19 	bl	8008b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	e000ed00 	.word	0xe000ed00
 8008cf8:	410fc271 	.word	0x410fc271
 8008cfc:	410fc270 	.word	0x410fc270
 8008d00:	e000e400 	.word	0xe000e400
 8008d04:	200012f8 	.word	0x200012f8
 8008d08:	200012fc 	.word	0x200012fc
 8008d0c:	e000ed20 	.word	0xe000ed20
 8008d10:	2000000c 	.word	0x2000000c
 8008d14:	e000ef34 	.word	0xe000ef34

08008d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <vPortEnterCritical+0x5c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3301      	adds	r3, #1
 8008d38:	4a0e      	ldr	r2, [pc, #56]	@ (8008d74 <vPortEnterCritical+0x5c>)
 8008d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d74 <vPortEnterCritical+0x5c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d110      	bne.n	8008d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d44:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <vPortEnterCritical+0x60>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	603b      	str	r3, [r7, #0]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <vPortEnterCritical+0x4a>
	}
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	2000000c 	.word	0x2000000c
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d82:	4b12      	ldr	r3, [pc, #72]	@ (8008dcc <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <vPortExitCritical+0x26>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	607b      	str	r3, [r7, #4]
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	e7fd      	b.n	8008d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008da2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <vPortExitCritical+0x50>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	4a08      	ldr	r2, [pc, #32]	@ (8008dcc <vPortExitCritical+0x50>)
 8008daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dac:	4b07      	ldr	r3, [pc, #28]	@ (8008dcc <vPortExitCritical+0x50>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <vPortExitCritical+0x44>
 8008db4:	2300      	movs	r3, #0
 8008db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f383 8811 	msr	BASEPRI, r3
}
 8008dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	2000000c 	.word	0x2000000c

08008dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dd0:	f3ef 8009 	mrs	r0, PSP
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <pxCurrentTCBConst>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	f01e 0f10 	tst.w	lr, #16
 8008de0:	bf08      	it	eq
 8008de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	6010      	str	r0, [r2, #0]
 8008dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008df4:	f380 8811 	msr	BASEPRI, r0
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f7ff f9ca 	bl	8008198 <vTaskSwitchContext>
 8008e04:	f04f 0000 	mov.w	r0, #0
 8008e08:	f380 8811 	msr	BASEPRI, r0
 8008e0c:	bc09      	pop	{r0, r3}
 8008e0e:	6819      	ldr	r1, [r3, #0]
 8008e10:	6808      	ldr	r0, [r1, #0]
 8008e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e16:	f01e 0f10 	tst.w	lr, #16
 8008e1a:	bf08      	it	eq
 8008e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e20:	f380 8809 	msr	PSP, r0
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst>:
 8008e30:	200011cc 	.word	0x200011cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	607b      	str	r3, [r7, #4]
}
 8008e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e52:	f7ff f8e7 	bl	8008024 <xTaskIncrementTick>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <SysTick_Handler+0x40>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	2300      	movs	r3, #0
 8008e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f383 8811 	msr	BASEPRI, r3
}
 8008e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e80:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb0 <vPortSetupTimerInterrupt+0x34>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb4 <vPortSetupTimerInterrupt+0x38>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <vPortSetupTimerInterrupt+0x3c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a0a      	ldr	r2, [pc, #40]	@ (8008ebc <vPortSetupTimerInterrupt+0x40>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	099b      	lsrs	r3, r3, #6
 8008e98:	4a09      	ldr	r2, [pc, #36]	@ (8008ec0 <vPortSetupTimerInterrupt+0x44>)
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e9e:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <vPortSetupTimerInterrupt+0x34>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	e000e010 	.word	0xe000e010
 8008eb4:	e000e018 	.word	0xe000e018
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	10624dd3 	.word	0x10624dd3
 8008ec0:	e000e014 	.word	0xe000e014

08008ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ed4 <vPortEnableVFP+0x10>
 8008ec8:	6801      	ldr	r1, [r0, #0]
 8008eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ece:	6001      	str	r1, [r0, #0]
 8008ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ed2:	bf00      	nop
 8008ed4:	e000ed88 	.word	0xe000ed88

08008ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ede:	f3ef 8305 	mrs	r3, IPSR
 8008ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b0f      	cmp	r3, #15
 8008ee8:	d915      	bls.n	8008f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eea:	4a18      	ldr	r2, [pc, #96]	@ (8008f4c <vPortValidateInterruptPriority+0x74>)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ef4:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <vPortValidateInterruptPriority+0x78>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	7afa      	ldrb	r2, [r7, #11]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d20b      	bcs.n	8008f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f16:	4b0f      	ldr	r3, [pc, #60]	@ (8008f54 <vPortValidateInterruptPriority+0x7c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <vPortValidateInterruptPriority+0x80>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d90b      	bls.n	8008f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	603b      	str	r3, [r7, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <vPortValidateInterruptPriority+0x62>
	}
 8008f3e:	bf00      	nop
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	e000e3f0 	.word	0xe000e3f0
 8008f50:	200012f8 	.word	0x200012f8
 8008f54:	e000ed0c 	.word	0xe000ed0c
 8008f58:	200012fc 	.word	0x200012fc

08008f5c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8008f68:	f7fe ff8e 	bl	8007e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8008f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8009068 <pvPortMalloc+0x10c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8008f74:	f000 f8ba 	bl	80090ec <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8008f78:	4b3b      	ldr	r3, [pc, #236]	@ (8009068 <pvPortMalloc+0x10c>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00e      	beq.n	8008fa2 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8008f84:	2308      	movs	r3, #8
 8008f86:	461a      	mov	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f023 0307 	bic.w	r3, r3, #7
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d057      	beq.n	8009058 <pvPortMalloc+0xfc>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f647 72f7 	movw	r2, #32759	@ 0x7ff7
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d852      	bhi.n	8009058 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8008fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800906c <pvPortMalloc+0x110>)
 8008fb4:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8008fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800906c <pvPortMalloc+0x110>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fbc:	e004      	b.n	8008fc8 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d903      	bls.n	8008fda <pvPortMalloc+0x7e>
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f1      	bne.n	8008fbe <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4a24      	ldr	r2, [pc, #144]	@ (8009070 <pvPortMalloc+0x114>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d03a      	beq.n	8009058 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	4413      	add	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	0052      	lsls	r2, r2, #1
 8009000:	4293      	cmp	r3, r2
 8009002:	d922      	bls.n	800904a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4413      	add	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	1ad2      	subs	r2, r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	4b11      	ldr	r3, [pc, #68]	@ (800906c <pvPortMalloc+0x110>)
 8009026:	613b      	str	r3, [r7, #16]
 8009028:	e002      	b.n	8009030 <pvPortMalloc+0xd4>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	429a      	cmp	r2, r3
 800903a:	d8f6      	bhi.n	800902a <pvPortMalloc+0xce>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800904a:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <pvPortMalloc+0x118>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	4a07      	ldr	r2, [pc, #28]	@ (8009074 <pvPortMalloc+0x118>)
 8009056:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009058:	f7fe ff24 	bl	8007ea4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800905c:	697b      	ldr	r3, [r7, #20]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20009310 	.word	0x20009310
 800906c:	20009300 	.word	0x20009300
 8009070:	20009308 	.word	0x20009308
 8009074:	20000010 	.word	0x20000010

08009078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d027      	beq.n	80090da <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800908a:	2308      	movs	r3, #8
 800908c:	425b      	negs	r3, r3
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8009098:	f7fe fef6 	bl	8007e88 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	4b10      	ldr	r3, [pc, #64]	@ (80090e4 <vPortFree+0x6c>)
 80090a4:	617b      	str	r3, [r7, #20]
 80090a6:	e002      	b.n	80090ae <vPortFree+0x36>
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d8f6      	bhi.n	80090a8 <vPortFree+0x30>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <vPortFree+0x70>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4413      	add	r3, r2
 80090d2:	4a05      	ldr	r2, [pc, #20]	@ (80090e8 <vPortFree+0x70>)
 80090d4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80090d6:	f7fe fee5 	bl	8007ea4 <xTaskResumeAll>
	}
}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20009300 	.word	0x20009300
 80090e8:	20000010 	.word	0x20000010

080090ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <prvHeapInit+0x48>)
 80090f4:	f023 0307 	bic.w	r3, r3, #7
 80090f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090fa:	4a0f      	ldr	r2, [pc, #60]	@ (8009138 <prvHeapInit+0x4c>)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009100:	4b0d      	ldr	r3, [pc, #52]	@ (8009138 <prvHeapInit+0x4c>)
 8009102:	2200      	movs	r2, #0
 8009104:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8009106:	4b0d      	ldr	r3, [pc, #52]	@ (800913c <prvHeapInit+0x50>)
 8009108:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800910c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800910e:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <prvHeapInit+0x50>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800911e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	4a06      	ldr	r2, [pc, #24]	@ (800913c <prvHeapInit+0x50>)
 8009124:	601a      	str	r2, [r3, #0]
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20001308 	.word	0x20001308
 8009138:	20009300 	.word	0x20009300
 800913c:	20009308 	.word	0x20009308

08009140 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	461a      	mov	r2, r3
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 fa6b 	bl	800b630 <tcpip_send_msg_wait_sem>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800915e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <netconn_apimsg+0x2e>
    return apimsg->err;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800916c:	e001      	b.n	8009172 <netconn_apimsg+0x32>
  }
  return err;
 800916e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08c      	sub	sp, #48	@ 0x30
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	603a      	str	r2, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
 8009188:	460b      	mov	r3, r1
 800918a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f001 f927 	bl	800a3e4 <netconn_alloc>
 8009196:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d054      	beq.n	8009248 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800919e:	79bb      	ldrb	r3, [r7, #6]
 80091a0:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80091a6:	f107 0308 	add.w	r3, r7, #8
 80091aa:	4619      	mov	r1, r3
 80091ac:	4829      	ldr	r0, [pc, #164]	@ (8009254 <netconn_new_with_proto_and_callback+0xd8>)
 80091ae:	f7ff ffc7 	bl	8009140 <netconn_apimsg>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80091b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d043      	beq.n	8009248 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80091c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <netconn_new_with_proto_and_callback+0x58>
 80091c8:	4b23      	ldr	r3, [pc, #140]	@ (8009258 <netconn_new_with_proto_and_callback+0xdc>)
 80091ca:	22a3      	movs	r2, #163	@ 0xa3
 80091cc:	4923      	ldr	r1, [pc, #140]	@ (800925c <netconn_new_with_proto_and_callback+0xe0>)
 80091ce:	4824      	ldr	r0, [pc, #144]	@ (8009260 <netconn_new_with_proto_and_callback+0xe4>)
 80091d0:	f00f fa76 	bl	80186c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80091d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d6:	3310      	adds	r3, #16
 80091d8:	4618      	mov	r0, r3
 80091da:	f00f f838 	bl	801824e <sys_mbox_valid>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d105      	bne.n	80091f0 <netconn_new_with_proto_and_callback+0x74>
 80091e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009258 <netconn_new_with_proto_and_callback+0xdc>)
 80091e6:	22a4      	movs	r2, #164	@ 0xa4
 80091e8:	491e      	ldr	r1, [pc, #120]	@ (8009264 <netconn_new_with_proto_and_callback+0xe8>)
 80091ea:	481d      	ldr	r0, [pc, #116]	@ (8009260 <netconn_new_with_proto_and_callback+0xe4>)
 80091ec:	f00f fa68 	bl	80186c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	3314      	adds	r3, #20
 80091f4:	4618      	mov	r0, r3
 80091f6:	f00f f82a 	bl	801824e <sys_mbox_valid>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <netconn_new_with_proto_and_callback+0x90>
 8009200:	4b15      	ldr	r3, [pc, #84]	@ (8009258 <netconn_new_with_proto_and_callback+0xdc>)
 8009202:	22a6      	movs	r2, #166	@ 0xa6
 8009204:	4918      	ldr	r1, [pc, #96]	@ (8009268 <netconn_new_with_proto_and_callback+0xec>)
 8009206:	4816      	ldr	r0, [pc, #88]	@ (8009260 <netconn_new_with_proto_and_callback+0xe4>)
 8009208:	f00f fa5a 	bl	80186c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800920c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920e:	330c      	adds	r3, #12
 8009210:	4618      	mov	r0, r3
 8009212:	f00f f8ad 	bl	8018370 <sys_sem_valid>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d105      	bne.n	8009228 <netconn_new_with_proto_and_callback+0xac>
 800921c:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <netconn_new_with_proto_and_callback+0xdc>)
 800921e:	22a9      	movs	r2, #169	@ 0xa9
 8009220:	4912      	ldr	r1, [pc, #72]	@ (800926c <netconn_new_with_proto_and_callback+0xf0>)
 8009222:	480f      	ldr	r0, [pc, #60]	@ (8009260 <netconn_new_with_proto_and_callback+0xe4>)
 8009224:	f00f fa4c 	bl	80186c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922a:	330c      	adds	r3, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f00f f892 	bl	8018356 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009234:	3310      	adds	r3, #16
 8009236:	4618      	mov	r0, r3
 8009238:	f00e ff6c 	bl	8018114 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800923c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800923e:	2007      	movs	r0, #7
 8009240:	f003 f91e 	bl	800c480 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800924a:	4618      	mov	r0, r3
 800924c:	3730      	adds	r7, #48	@ 0x30
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	0800a3b9 	.word	0x0800a3b9
 8009258:	08019ba4 	.word	0x08019ba4
 800925c:	08019bd8 	.word	0x08019bd8
 8009260:	08019bfc 	.word	0x08019bfc
 8009264:	08019c24 	.word	0x08019c24
 8009268:	08019c3c 	.word	0x08019c3c
 800926c:	08019c60 	.word	0x08019c60

08009270 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08c      	sub	sp, #48	@ 0x30
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	e014      	b.n	80092ac <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009286:	2329      	movs	r3, #41	@ 0x29
 8009288:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800928a:	f107 030c 	add.w	r3, r7, #12
 800928e:	4619      	mov	r1, r3
 8009290:	4808      	ldr	r0, [pc, #32]	@ (80092b4 <netconn_prepare_delete+0x44>)
 8009292:	f7ff ff55 	bl	8009140 <netconn_apimsg>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800929c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <netconn_prepare_delete+0x3a>
    return err;
 80092a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80092a8:	e000      	b.n	80092ac <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3730      	adds	r7, #48	@ 0x30
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	0800a91d 	.word	0x0800a91d

080092b8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <netconn_delete+0x12>
    return ERR_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e00d      	b.n	80092e6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ffd0 	bl	8009270 <netconn_prepare_delete>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80092d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <netconn_delete+0x2a>
    netconn_free(conn);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f8eb 	bl	800a4b8 <netconn_free>
  }
  return err;
 80092e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08e      	sub	sp, #56	@ 0x38
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d109      	bne.n	8009318 <netconn_bind+0x28>
 8009304:	4b11      	ldr	r3, [pc, #68]	@ (800934c <netconn_bind+0x5c>)
 8009306:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800930a:	4911      	ldr	r1, [pc, #68]	@ (8009350 <netconn_bind+0x60>)
 800930c:	4811      	ldr	r0, [pc, #68]	@ (8009354 <netconn_bind+0x64>)
 800930e:	f00f f9d7 	bl	80186c0 <iprintf>
 8009312:	f06f 030f 	mvn.w	r3, #15
 8009316:	e015      	b.n	8009344 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800931e:	4b0e      	ldr	r3, [pc, #56]	@ (8009358 <netconn_bind+0x68>)
 8009320:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800932e:	f107 0314 	add.w	r3, r7, #20
 8009332:	4619      	mov	r1, r3
 8009334:	4809      	ldr	r0, [pc, #36]	@ (800935c <netconn_bind+0x6c>)
 8009336:	f7ff ff03 	bl	8009140 <netconn_apimsg>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009340:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009344:	4618      	mov	r0, r3
 8009346:	3738      	adds	r7, #56	@ 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	08019ba4 	.word	0x08019ba4
 8009350:	08019cdc 	.word	0x08019cdc
 8009354:	08019bfc 	.word	0x08019bfc
 8009358:	080267d4 	.word	0x080267d4
 800935c:	0800aae5 	.word	0x0800aae5

08009360 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	@ 0x30
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d109      	bne.n	8009386 <netconn_listen_with_backlog+0x26>
 8009372:	4b0d      	ldr	r3, [pc, #52]	@ (80093a8 <netconn_listen_with_backlog+0x48>)
 8009374:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009378:	490c      	ldr	r1, [pc, #48]	@ (80093ac <netconn_listen_with_backlog+0x4c>)
 800937a:	480d      	ldr	r0, [pc, #52]	@ (80093b0 <netconn_listen_with_backlog+0x50>)
 800937c:	f00f f9a0 	bl	80186c0 <iprintf>
 8009380:	f06f 030f 	mvn.w	r3, #15
 8009384:	e00c      	b.n	80093a0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	4619      	mov	r1, r3
 8009390:	4808      	ldr	r0, [pc, #32]	@ (80093b4 <netconn_listen_with_backlog+0x54>)
 8009392:	f7ff fed5 	bl	8009140 <netconn_apimsg>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800939c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	@ 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	08019ba4 	.word	0x08019ba4
 80093ac:	08019d5c 	.word	0x08019d5c
 80093b0:	08019bfc 	.word	0x08019bfc
 80093b4:	0800ab59 	.word	0x0800ab59

080093b8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <netconn_accept+0x24>
 80093c8:	4b3d      	ldr	r3, [pc, #244]	@ (80094c0 <netconn_accept+0x108>)
 80093ca:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80093ce:	493d      	ldr	r1, [pc, #244]	@ (80094c4 <netconn_accept+0x10c>)
 80093d0:	483d      	ldr	r0, [pc, #244]	@ (80094c8 <netconn_accept+0x110>)
 80093d2:	f00f f975 	bl	80186c0 <iprintf>
 80093d6:	f06f 030f 	mvn.w	r3, #15
 80093da:	e06c      	b.n	80094b6 <netconn_accept+0xfe>
  *new_conn = NULL;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <netconn_accept+0x44>
 80093e8:	4b35      	ldr	r3, [pc, #212]	@ (80094c0 <netconn_accept+0x108>)
 80093ea:	f240 12e3 	movw	r2, #483	@ 0x1e3
 80093ee:	4937      	ldr	r1, [pc, #220]	@ (80094cc <netconn_accept+0x114>)
 80093f0:	4835      	ldr	r0, [pc, #212]	@ (80094c8 <netconn_accept+0x110>)
 80093f2:	f00f f965 	bl	80186c0 <iprintf>
 80093f6:	f06f 030f 	mvn.w	r3, #15
 80093fa:	e05c      	b.n	80094b6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fb6c 	bl	8009ada <netconn_err>
 8009402:	4603      	mov	r3, r0
 8009404:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009406:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800940e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009412:	e050      	b.n	80094b6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3314      	adds	r3, #20
 8009418:	4618      	mov	r0, r3
 800941a:	f00e ff18 	bl	801824e <sys_mbox_valid>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <netconn_accept+0x78>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7e1b      	ldrb	r3, [r3, #24]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009430:	f06f 030e 	mvn.w	r3, #14
 8009434:	e03f      	b.n	80094b6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7e1b      	ldrb	r3, [r3, #24]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3314      	adds	r3, #20
 8009446:	f107 020c 	add.w	r2, r7, #12
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f00e fee2 	bl	8018216 <sys_arch_mbox_tryfetch>
 8009452:	4603      	mov	r3, r0
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d10a      	bne.n	8009470 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800945a:	f06f 0306 	mvn.w	r3, #6
 800945e:	e02a      	b.n	80094b6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3314      	adds	r3, #20
 8009464:	f107 010c 	add.w	r1, r7, #12
 8009468:	2200      	movs	r2, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f00e fe94 	bl	8018198 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <netconn_accept+0xcc>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	2200      	movs	r2, #0
 800947e:	2101      	movs	r1, #1
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f107 0213 	add.w	r2, r7, #19
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fb75 	bl	8009b7c <lwip_netconn_is_err_msg>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009498:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800949c:	e00b      	b.n	80094b6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80094a4:	f06f 030e 	mvn.w	r3, #14
 80094a8:	e005      	b.n	80094b6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80094b4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	08019ba4 	.word	0x08019ba4
 80094c4:	08019d7c 	.word	0x08019d7c
 80094c8:	08019bfc 	.word	0x08019bfc
 80094cc:	08019d9c 	.word	0x08019d9c

080094d0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <netconn_recv_data+0x2c>
 80094e8:	4b58      	ldr	r3, [pc, #352]	@ (800964c <netconn_recv_data+0x17c>)
 80094ea:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80094ee:	4958      	ldr	r1, [pc, #352]	@ (8009650 <netconn_recv_data+0x180>)
 80094f0:	4858      	ldr	r0, [pc, #352]	@ (8009654 <netconn_recv_data+0x184>)
 80094f2:	f00f f8e5 	bl	80186c0 <iprintf>
 80094f6:	f06f 030f 	mvn.w	r3, #15
 80094fa:	e0a2      	b.n	8009642 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <netconn_recv_data+0x4c>
 8009508:	4b50      	ldr	r3, [pc, #320]	@ (800964c <netconn_recv_data+0x17c>)
 800950a:	f240 224a 	movw	r2, #586	@ 0x24a
 800950e:	4952      	ldr	r1, [pc, #328]	@ (8009658 <netconn_recv_data+0x188>)
 8009510:	4850      	ldr	r0, [pc, #320]	@ (8009654 <netconn_recv_data+0x184>)
 8009512:	f00f f8d5 	bl	80186c0 <iprintf>
 8009516:	f06f 030f 	mvn.w	r3, #15
 800951a:	e092      	b.n	8009642 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3310      	adds	r3, #16
 8009520:	4618      	mov	r0, r3
 8009522:	f00e fe94 	bl	801824e <sys_mbox_valid>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10e      	bne.n	800954a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fad4 	bl	8009ada <netconn_err>
 8009532:	4603      	mov	r3, r0
 8009534:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009536:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800953e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009542:	e07e      	b.n	8009642 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009544:	f06f 030a 	mvn.w	r3, #10
 8009548:	e07b      	b.n	8009642 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7e1b      	ldrb	r3, [r3, #24]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10f      	bne.n	8009576 <netconn_recv_data+0xa6>
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	7e1b      	ldrb	r3, [r3, #24]
 8009564:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d023      	beq.n	80095be <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3310      	adds	r3, #16
 800957a:	f107 0218 	add.w	r2, r7, #24
 800957e:	4611      	mov	r1, r2
 8009580:	4618      	mov	r0, r3
 8009582:	f00e fe48 	bl	8018216 <sys_arch_mbox_tryfetch>
 8009586:	4603      	mov	r3, r0
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d11f      	bne.n	80095ce <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 faa3 	bl	8009ada <netconn_err>
 8009594:	4603      	mov	r3, r0
 8009596:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009598:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80095a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80095a4:	e04d      	b.n	8009642 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7e1b      	ldrb	r3, [r3, #24]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80095b2:	f06f 030a 	mvn.w	r3, #10
 80095b6:	e044      	b.n	8009642 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80095b8:	f06f 0306 	mvn.w	r3, #6
 80095bc:	e041      	b.n	8009642 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3310      	adds	r3, #16
 80095c2:	f107 0118 	add.w	r1, r7, #24
 80095c6:	2200      	movs	r2, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f00e fde5 	bl	8018198 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d117      	bne.n	800960a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f107 0217 	add.w	r2, r7, #23
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 faca 	bl	8009b7c <lwip_netconn_is_err_msg>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80095ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095f2:	f113 0f0f 	cmn.w	r3, #15
 80095f6:	d101      	bne.n	80095fc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e022      	b.n	8009642 <netconn_recv_data+0x172>
      }
      return err;
 80095fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009600:	e01f      	b.n	8009642 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	891b      	ldrh	r3, [r3, #8]
 8009606:	83fb      	strh	r3, [r7, #30]
 8009608:	e00d      	b.n	8009626 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <netconn_recv_data+0x14e>
 8009610:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <netconn_recv_data+0x17c>)
 8009612:	f240 2291 	movw	r2, #657	@ 0x291
 8009616:	4911      	ldr	r1, [pc, #68]	@ (800965c <netconn_recv_data+0x18c>)
 8009618:	480e      	ldr	r0, [pc, #56]	@ (8009654 <netconn_recv_data+0x184>)
 800961a:	f00f f851 	bl	80186c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	891b      	ldrh	r3, [r3, #8]
 8009624:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <netconn_recv_data+0x16a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	8bfa      	ldrh	r2, [r7, #30]
 8009634:	2101      	movs	r1, #1
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	08019ba4 	.word	0x08019ba4
 8009650:	08019dbc 	.word	0x08019dbc
 8009654:	08019bfc 	.word	0x08019bfc
 8009658:	08019ddc 	.word	0x08019ddc
 800965c:	08019df8 	.word	0x08019df8

08009660 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <netconn_tcp_recvd_msg+0x1e>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800967a:	2b10      	cmp	r3, #16
 800967c:	d009      	beq.n	8009692 <netconn_tcp_recvd_msg+0x32>
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <netconn_tcp_recvd_msg+0x50>)
 8009680:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8009684:	490b      	ldr	r1, [pc, #44]	@ (80096b4 <netconn_tcp_recvd_msg+0x54>)
 8009686:	480c      	ldr	r0, [pc, #48]	@ (80096b8 <netconn_tcp_recvd_msg+0x58>)
 8009688:	f00f f81a 	bl	80186c0 <iprintf>
 800968c:	f06f 030f 	mvn.w	r3, #15
 8009690:	e00a      	b.n	80096a8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4806      	ldr	r0, [pc, #24]	@ (80096bc <netconn_tcp_recvd_msg+0x5c>)
 80096a2:	f7ff fd4d 	bl	8009140 <netconn_apimsg>
 80096a6:	4603      	mov	r3, r0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	08019ba4 	.word	0x08019ba4
 80096b4:	08019e04 	.word	0x08019e04
 80096b8:	08019bfc 	.word	0x08019bfc
 80096bc:	0800ac89 	.word	0x0800ac89

080096c0 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b090      	sub	sp, #64	@ 0x40
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3310      	adds	r3, #16
 80096d2:	4618      	mov	r0, r3
 80096d4:	f00e fdbb 	bl	801824e <sys_mbox_valid>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80096de:	f06f 030a 	mvn.w	r3, #10
 80096e2:	e06d      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	7e1b      	ldrb	r3, [r3, #24]
 80096e8:	b25b      	sxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	da07      	bge.n	80096fe <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	7e1b      	ldrb	r3, [r3, #24]
 80096f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	761a      	strb	r2, [r3, #24]
    goto handle_fin;
 80096fc:	e039      	b.n	8009772 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	461a      	mov	r2, r3
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff fee3 	bl	80094d0 <netconn_recv_data>
 800970a:	4603      	mov	r3, r0
 800970c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009710:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009718:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800971c:	e050      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10e      	bne.n	800974c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <netconn_recv_data_tcp+0x7a>
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	891b      	ldrh	r3, [r3, #8]
 8009738:	e000      	b.n	800973c <netconn_recv_data_tcp+0x7c>
 800973a:	2301      	movs	r3, #1
 800973c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800973e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009740:	f107 0214 	add.w	r2, r7, #20
 8009744:	4619      	mov	r1, r3
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff ff8a 	bl	8009660 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	2b00      	cmp	r3, #0
 8009750:	d134      	bne.n	80097bc <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7e1b      	ldrb	r3, [r3, #24]
 8009760:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009764:	b2da      	uxtb	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	761a      	strb	r2, [r3, #24]
      return ERR_WOULDBLOCK;
 800976a:	f06f 0306 	mvn.w	r3, #6
 800976e:	e027      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009770:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <netconn_recv_data_tcp+0xc6>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	2200      	movs	r2, #0
 8009780:	2101      	movs	r1, #1
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10f      	bne.n	80097ae <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f9a3 	bl	8009ada <netconn_err>
 8009794:	4603      	mov	r3, r0
 8009796:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800979a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <netconn_recv_data_tcp+0xe8>
          return err;
 80097a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80097a6:	e00b      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80097a8:	f06f 030d 	mvn.w	r3, #13
 80097ac:	e008      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80097ae:	2101      	movs	r1, #1
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f955 	bl	8009a60 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80097b6:	f06f 030e 	mvn.w	r3, #14
 80097ba:	e001      	b.n	80097c0 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80097bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3740      	adds	r7, #64	@ 0x40
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <netconn_recv+0x28>
 80097dc:	4b32      	ldr	r3, [pc, #200]	@ (80098a8 <netconn_recv+0xe0>)
 80097de:	f240 3263 	movw	r2, #867	@ 0x363
 80097e2:	4932      	ldr	r1, [pc, #200]	@ (80098ac <netconn_recv+0xe4>)
 80097e4:	4832      	ldr	r0, [pc, #200]	@ (80098b0 <netconn_recv+0xe8>)
 80097e6:	f00e ff6b 	bl	80186c0 <iprintf>
 80097ea:	f06f 030f 	mvn.w	r3, #15
 80097ee:	e056      	b.n	800989e <netconn_recv+0xd6>
  *new_buf = NULL;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d109      	bne.n	8009810 <netconn_recv+0x48>
 80097fc:	4b2a      	ldr	r3, [pc, #168]	@ (80098a8 <netconn_recv+0xe0>)
 80097fe:	f240 3265 	movw	r2, #869	@ 0x365
 8009802:	492c      	ldr	r1, [pc, #176]	@ (80098b4 <netconn_recv+0xec>)
 8009804:	482a      	ldr	r0, [pc, #168]	@ (80098b0 <netconn_recv+0xe8>)
 8009806:	f00e ff5b 	bl	80186c0 <iprintf>
 800980a:	f06f 030f 	mvn.w	r3, #15
 800980e:	e046      	b.n	800989e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009818:	2b10      	cmp	r3, #16
 800981a:	d13a      	bne.n	8009892 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009820:	2006      	movs	r0, #6
 8009822:	f002 fddb 	bl	800c3dc <memp_malloc>
 8009826:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <netconn_recv+0x6c>
      return ERR_MEM;
 800982e:	f04f 33ff 	mov.w	r3, #4294967295
 8009832:	e034      	b.n	800989e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009834:	f107 030c 	add.w	r3, r7, #12
 8009838:	2200      	movs	r2, #0
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff ff3f 	bl	80096c0 <netconn_recv_data_tcp>
 8009842:	4603      	mov	r3, r0
 8009844:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d006      	beq.n	800985c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800984e:	6979      	ldr	r1, [r7, #20]
 8009850:	2006      	movs	r0, #6
 8009852:	f002 fe15 	bl	800c480 <memp_free>
      return err;
 8009856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800985a:	e020      	b.n	800989e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <netconn_recv+0xa8>
 8009862:	4b11      	ldr	r3, [pc, #68]	@ (80098a8 <netconn_recv+0xe0>)
 8009864:	f240 3279 	movw	r2, #889	@ 0x379
 8009868:	4913      	ldr	r1, [pc, #76]	@ (80098b8 <netconn_recv+0xf0>)
 800986a:	4811      	ldr	r0, [pc, #68]	@ (80098b0 <netconn_recv+0xe8>)
 800986c:	f00e ff28 	bl	80186c0 <iprintf>

    buf->p = p;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2200      	movs	r2, #0
 8009880:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2200      	movs	r2, #0
 8009886:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	e005      	b.n	800989e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009892:	2200      	movs	r2, #0
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff fe1a 	bl	80094d0 <netconn_recv_data>
 800989c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	08019ba4 	.word	0x08019ba4
 80098ac:	08019dbc 	.word	0x08019dbc
 80098b0:	08019bfc 	.word	0x08019bfc
 80098b4:	08019ddc 	.word	0x08019ddc
 80098b8:	08019e54 	.word	0x08019e54

080098bc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	f107 0110 	add.w	r1, r7, #16
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	2201      	movs	r2, #1
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f805 	bl	80098f0 <netconn_write_vectors_partly>
 80098e6:	4603      	mov	r3, r0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b092      	sub	sp, #72	@ 0x48
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4611      	mov	r1, r2
 80098fc:	461a      	mov	r2, r3
 80098fe:	460b      	mov	r3, r1
 8009900:	80fb      	strh	r3, [r7, #6]
 8009902:	4613      	mov	r3, r2
 8009904:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <netconn_write_vectors_partly+0x30>
 800990c:	4b4e      	ldr	r3, [pc, #312]	@ (8009a48 <netconn_write_vectors_partly+0x158>)
 800990e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009912:	494e      	ldr	r1, [pc, #312]	@ (8009a4c <netconn_write_vectors_partly+0x15c>)
 8009914:	484e      	ldr	r0, [pc, #312]	@ (8009a50 <netconn_write_vectors_partly+0x160>)
 8009916:	f00e fed3 	bl	80186c0 <iprintf>
 800991a:	f06f 030f 	mvn.w	r3, #15
 800991e:	e08e      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009928:	2b10      	cmp	r3, #16
 800992a:	d009      	beq.n	8009940 <netconn_write_vectors_partly+0x50>
 800992c:	4b46      	ldr	r3, [pc, #280]	@ (8009a48 <netconn_write_vectors_partly+0x158>)
 800992e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009932:	4948      	ldr	r1, [pc, #288]	@ (8009a54 <netconn_write_vectors_partly+0x164>)
 8009934:	4846      	ldr	r0, [pc, #280]	@ (8009a50 <netconn_write_vectors_partly+0x160>)
 8009936:	f00e fec3 	bl	80186c0 <iprintf>
 800993a:	f06f 0305 	mvn.w	r3, #5
 800993e:	e07e      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	7e1b      	ldrb	r3, [r3, #24]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <netconn_write_vectors_partly+0x66>
 800994c:	797b      	ldrb	r3, [r7, #5]
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <netconn_write_vectors_partly+0x6a>
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <netconn_write_vectors_partly+0x6c>
 800995a:	2300      	movs	r3, #0
 800995c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009960:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <netconn_write_vectors_partly+0x84>
 8009968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800996e:	f06f 0305 	mvn.w	r3, #5
 8009972:	e064      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009978:	2300      	movs	r3, #0
 800997a:	643b      	str	r3, [r7, #64]	@ 0x40
 800997c:	e015      	b.n	80099aa <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800997e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	4413      	add	r3, r2
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800998a:	4413      	add	r3, r2
 800998c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800998e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	4413      	add	r3, r2
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800999a:	429a      	cmp	r2, r3
 800999c:	d202      	bcs.n	80099a4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800999e:	f06f 0305 	mvn.w	r3, #5
 80099a2:	e04c      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80099a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a6:	3301      	adds	r3, #1
 80099a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ae:	429a      	cmp	r2, r3
 80099b0:	dbe5      	blt.n	800997e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80099b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e040      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80099bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da0a      	bge.n	80099d8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80099c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80099c8:	f06f 0305 	mvn.w	r3, #5
 80099cc:	e037      	b.n	8009a3e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80099ce:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80099d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80099e8:	797b      	ldrb	r3, [r7, #5]
 80099ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80099ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80099f6:	f107 0314 	add.w	r3, r7, #20
 80099fa:	4619      	mov	r1, r3
 80099fc:	4816      	ldr	r0, [pc, #88]	@ (8009a58 <netconn_write_vectors_partly+0x168>)
 80099fe:	f7ff fb9f 	bl	8009140 <netconn_apimsg>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009a08:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d114      	bne.n	8009a3a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d006      	beq.n	8009a3a <netconn_write_vectors_partly+0x14a>
 8009a2c:	4b06      	ldr	r3, [pc, #24]	@ (8009a48 <netconn_write_vectors_partly+0x158>)
 8009a2e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009a32:	490a      	ldr	r1, [pc, #40]	@ (8009a5c <netconn_write_vectors_partly+0x16c>)
 8009a34:	4806      	ldr	r0, [pc, #24]	@ (8009a50 <netconn_write_vectors_partly+0x160>)
 8009a36:	f00e fe43 	bl	80186c0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009a3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3748      	adds	r7, #72	@ 0x48
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	08019ba4 	.word	0x08019ba4
 8009a4c:	08019e7c 	.word	0x08019e7c
 8009a50:	08019bfc 	.word	0x08019bfc
 8009a54:	08019e98 	.word	0x08019e98
 8009a58:	0800b091 	.word	0x0800b091
 8009a5c:	08019ebc 	.word	0x08019ebc

08009a60 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	@ 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d109      	bne.n	8009a86 <netconn_close_shutdown+0x26>
 8009a72:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <netconn_close_shutdown+0x50>)
 8009a74:	f240 4247 	movw	r2, #1095	@ 0x447
 8009a78:	490e      	ldr	r1, [pc, #56]	@ (8009ab4 <netconn_close_shutdown+0x54>)
 8009a7a:	480f      	ldr	r0, [pc, #60]	@ (8009ab8 <netconn_close_shutdown+0x58>)
 8009a7c:	f00e fe20 	bl	80186c0 <iprintf>
 8009a80:	f06f 030f 	mvn.w	r3, #15
 8009a84:	e010      	b.n	8009aa8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009a8e:	2329      	movs	r3, #41	@ 0x29
 8009a90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4619      	mov	r1, r3
 8009a98:	4808      	ldr	r0, [pc, #32]	@ (8009abc <netconn_close_shutdown+0x5c>)
 8009a9a:	f7ff fb51 	bl	8009140 <netconn_apimsg>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3730      	adds	r7, #48	@ 0x30
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	08019ba4 	.word	0x08019ba4
 8009ab4:	08019ee0 	.word	0x08019ee0
 8009ab8:	08019bfc 	.word	0x08019bfc
 8009abc:	0800b1a9 	.word	0x0800b1a9

08009ac0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009ac8:	2103      	movs	r1, #3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff ffc8 	bl	8009a60 <netconn_close_shutdown>
 8009ad0:	4603      	mov	r3, r0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <netconn_err+0x12>
    return ERR_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e00d      	b.n	8009b08 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009aec:	f00e fcca 	bl	8018484 <sys_arch_protect>
 8009af0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7a1b      	ldrb	r3, [r3, #8]
 8009af6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f00e fcce 	bl	80184a0 <sys_arch_unprotect>
  return err;
 8009b04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b1e:	f113 0f0d 	cmn.w	r3, #13
 8009b22:	d009      	beq.n	8009b38 <lwip_netconn_err_to_msg+0x28>
 8009b24:	f113 0f0d 	cmn.w	r3, #13
 8009b28:	dc0c      	bgt.n	8009b44 <lwip_netconn_err_to_msg+0x34>
 8009b2a:	f113 0f0f 	cmn.w	r3, #15
 8009b2e:	d007      	beq.n	8009b40 <lwip_netconn_err_to_msg+0x30>
 8009b30:	f113 0f0e 	cmn.w	r3, #14
 8009b34:	d002      	beq.n	8009b3c <lwip_netconn_err_to_msg+0x2c>
 8009b36:	e005      	b.n	8009b44 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009b38:	4b0a      	ldr	r3, [pc, #40]	@ (8009b64 <lwip_netconn_err_to_msg+0x54>)
 8009b3a:	e00e      	b.n	8009b5a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <lwip_netconn_err_to_msg+0x58>)
 8009b3e:	e00c      	b.n	8009b5a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009b40:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <lwip_netconn_err_to_msg+0x5c>)
 8009b42:	e00a      	b.n	8009b5a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <lwip_netconn_err_to_msg+0x48>
 8009b4c:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <lwip_netconn_err_to_msg+0x60>)
 8009b4e:	227d      	movs	r2, #125	@ 0x7d
 8009b50:	4908      	ldr	r1, [pc, #32]	@ (8009b74 <lwip_netconn_err_to_msg+0x64>)
 8009b52:	4809      	ldr	r0, [pc, #36]	@ (8009b78 <lwip_netconn_err_to_msg+0x68>)
 8009b54:	f00e fdb4 	bl	80186c0 <iprintf>
      return NULL;
 8009b58:	2300      	movs	r3, #0
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0801d9dc 	.word	0x0801d9dc
 8009b68:	0801d9dd 	.word	0x0801d9dd
 8009b6c:	0801d9de 	.word	0x0801d9de
 8009b70:	08019efc 	.word	0x08019efc
 8009b74:	08019f30 	.word	0x08019f30
 8009b78:	08019f40 	.word	0x08019f40

08009b7c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <lwip_netconn_is_err_msg+0x1c>
 8009b8c:	4b12      	ldr	r3, [pc, #72]	@ (8009bd8 <lwip_netconn_is_err_msg+0x5c>)
 8009b8e:	2285      	movs	r2, #133	@ 0x85
 8009b90:	4912      	ldr	r1, [pc, #72]	@ (8009bdc <lwip_netconn_is_err_msg+0x60>)
 8009b92:	4813      	ldr	r0, [pc, #76]	@ (8009be0 <lwip_netconn_is_err_msg+0x64>)
 8009b94:	f00e fd94 	bl	80186c0 <iprintf>

  if (msg == &netconn_aborted) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a12      	ldr	r2, [pc, #72]	@ (8009be4 <lwip_netconn_is_err_msg+0x68>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d104      	bne.n	8009baa <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	22f3      	movs	r2, #243	@ 0xf3
 8009ba4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e012      	b.n	8009bd0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a0e      	ldr	r2, [pc, #56]	@ (8009be8 <lwip_netconn_is_err_msg+0x6c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d104      	bne.n	8009bbc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	22f2      	movs	r2, #242	@ 0xf2
 8009bb6:	701a      	strb	r2, [r3, #0]
    return 1;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e009      	b.n	8009bd0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8009bec <lwip_netconn_is_err_msg+0x70>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d104      	bne.n	8009bce <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	22f1      	movs	r2, #241	@ 0xf1
 8009bc8:	701a      	strb	r2, [r3, #0]
    return 1;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	08019efc 	.word	0x08019efc
 8009bdc:	08019f68 	.word	0x08019f68
 8009be0:	08019f40 	.word	0x08019f40
 8009be4:	0801d9dc 	.word	0x0801d9dc
 8009be8:	0801d9dd 	.word	0x0801d9dd
 8009bec:	0801d9de 	.word	0x0801d9de

08009bf0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <recv_udp+0x20>
 8009c04:	4b34      	ldr	r3, [pc, #208]	@ (8009cd8 <recv_udp+0xe8>)
 8009c06:	22e5      	movs	r2, #229	@ 0xe5
 8009c08:	4934      	ldr	r1, [pc, #208]	@ (8009cdc <recv_udp+0xec>)
 8009c0a:	4835      	ldr	r0, [pc, #212]	@ (8009ce0 <recv_udp+0xf0>)
 8009c0c:	f00e fd58 	bl	80186c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <recv_udp+0x32>
 8009c16:	4b30      	ldr	r3, [pc, #192]	@ (8009cd8 <recv_udp+0xe8>)
 8009c18:	22e6      	movs	r2, #230	@ 0xe6
 8009c1a:	4932      	ldr	r1, [pc, #200]	@ (8009ce4 <recv_udp+0xf4>)
 8009c1c:	4830      	ldr	r0, [pc, #192]	@ (8009ce0 <recv_udp+0xf0>)
 8009c1e:	f00e fd4f 	bl	80186c0 <iprintf>
  conn = (struct netconn *)arg;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d103      	bne.n	8009c34 <recv_udp+0x44>
    pbuf_free(p);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f003 fa7d 	bl	800d12c <pbuf_free>
    return;
 8009c32:	e04d      	b.n	8009cd0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d005      	beq.n	8009c4a <recv_udp+0x5a>
 8009c3e:	4b26      	ldr	r3, [pc, #152]	@ (8009cd8 <recv_udp+0xe8>)
 8009c40:	22ee      	movs	r2, #238	@ 0xee
 8009c42:	4929      	ldr	r1, [pc, #164]	@ (8009ce8 <recv_udp+0xf8>)
 8009c44:	4826      	ldr	r0, [pc, #152]	@ (8009ce0 <recv_udp+0xf0>)
 8009c46:	f00e fd3b 	bl	80186c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	3310      	adds	r3, #16
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f00e fafd 	bl	801824e <sys_mbox_valid>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d103      	bne.n	8009c62 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f003 fa66 	bl	800d12c <pbuf_free>
    return;
 8009c60:	e036      	b.n	8009cd0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c62:	2006      	movs	r0, #6
 8009c64:	f002 fbba 	bl	800c3dc <memp_malloc>
 8009c68:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <recv_udp+0x88>
    pbuf_free(p);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f003 fa5b 	bl	800d12c <pbuf_free>
    return;
 8009c76:	e02b      	b.n	8009cd0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <recv_udp+0xa0>
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	e000      	b.n	8009c92 <recv_udp+0xa2>
 8009c90:	2300      	movs	r3, #0
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009c9a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	891b      	ldrh	r3, [r3, #8]
 8009ca0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	3310      	adds	r3, #16
 8009ca6:	69b9      	ldr	r1, [r7, #24]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f00e fa5b 	bl	8018164 <sys_mbox_trypost>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <recv_udp+0xcc>
    netbuf_delete(buf);
 8009cb4:	69b8      	ldr	r0, [r7, #24]
 8009cb6:	f001 fb03 	bl	800b2c0 <netbuf_delete>
    return;
 8009cba:	e009      	b.n	8009cd0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <recv_udp+0xe0>
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	8afa      	ldrh	r2, [r7, #22]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	69f8      	ldr	r0, [r7, #28]
 8009cce:	4798      	blx	r3
  }
}
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	08019efc 	.word	0x08019efc
 8009cdc:	08019f74 	.word	0x08019f74
 8009ce0:	08019f40 	.word	0x08019f40
 8009ce4:	08019f98 	.word	0x08019f98
 8009ce8:	08019fb8 	.word	0x08019fb8

08009cec <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d106      	bne.n	8009d0e <recv_tcp+0x22>
 8009d00:	4b36      	ldr	r3, [pc, #216]	@ (8009ddc <recv_tcp+0xf0>)
 8009d02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009d06:	4936      	ldr	r1, [pc, #216]	@ (8009de0 <recv_tcp+0xf4>)
 8009d08:	4836      	ldr	r0, [pc, #216]	@ (8009de4 <recv_tcp+0xf8>)
 8009d0a:	f00e fcd9 	bl	80186c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d106      	bne.n	8009d22 <recv_tcp+0x36>
 8009d14:	4b31      	ldr	r3, [pc, #196]	@ (8009ddc <recv_tcp+0xf0>)
 8009d16:	f240 122d 	movw	r2, #301	@ 0x12d
 8009d1a:	4933      	ldr	r1, [pc, #204]	@ (8009de8 <recv_tcp+0xfc>)
 8009d1c:	4831      	ldr	r0, [pc, #196]	@ (8009de4 <recv_tcp+0xf8>)
 8009d1e:	f00e fccf 	bl	80186c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <recv_tcp+0x4c>
 8009d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009ddc <recv_tcp+0xf0>)
 8009d2c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009d30:	492e      	ldr	r1, [pc, #184]	@ (8009dec <recv_tcp+0x100>)
 8009d32:	482c      	ldr	r0, [pc, #176]	@ (8009de4 <recv_tcp+0xf8>)
 8009d34:	f00e fcc4 	bl	80186c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <recv_tcp+0x5c>
    return ERR_VAL;
 8009d42:	f06f 0305 	mvn.w	r3, #5
 8009d46:	e045      	b.n	8009dd4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d006      	beq.n	8009d60 <recv_tcp+0x74>
 8009d52:	4b22      	ldr	r3, [pc, #136]	@ (8009ddc <recv_tcp+0xf0>)
 8009d54:	f240 1235 	movw	r2, #309	@ 0x135
 8009d58:	4925      	ldr	r1, [pc, #148]	@ (8009df0 <recv_tcp+0x104>)
 8009d5a:	4822      	ldr	r0, [pc, #136]	@ (8009de4 <recv_tcp+0xf8>)
 8009d5c:	f00e fcb0 	bl	80186c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f00e fa72 	bl	801824e <sys_mbox_valid>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10d      	bne.n	8009d8c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d008      	beq.n	8009d88 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	891b      	ldrh	r3, [r3, #8]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	68b8      	ldr	r0, [r7, #8]
 8009d7e:	f004 f993 	bl	800e0a8 <tcp_recved>
      pbuf_free(p);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f003 f9d2 	bl	800d12c <pbuf_free>
    }
    return ERR_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e023      	b.n	8009dd4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d005      	beq.n	8009d9e <recv_tcp+0xb2>
    msg = p;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	891b      	ldrh	r3, [r3, #8]
 8009d9a:	83fb      	strh	r3, [r7, #30]
 8009d9c:	e003      	b.n	8009da6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009d9e:	4b15      	ldr	r3, [pc, #84]	@ (8009df4 <recv_tcp+0x108>)
 8009da0:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	3310      	adds	r3, #16
 8009daa:	69b9      	ldr	r1, [r7, #24]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f00e f9d9 	bl	8018164 <sys_mbox_trypost>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	e00a      	b.n	8009dd4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <recv_tcp+0xe6>
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	8bfa      	ldrh	r2, [r7, #30]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	6978      	ldr	r0, [r7, #20]
 8009dd0:	4798      	blx	r3
  }

  return ERR_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3720      	adds	r7, #32
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	08019efc 	.word	0x08019efc
 8009de0:	08019fd8 	.word	0x08019fd8
 8009de4:	08019f40 	.word	0x08019f40
 8009de8:	08019ffc 	.word	0x08019ffc
 8009dec:	0801a01c 	.word	0x0801a01c
 8009df0:	0801a034 	.word	0x0801a034
 8009df4:	0801d9de 	.word	0x0801d9de

08009df8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <poll_tcp+0x22>
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009eb8 <poll_tcp+0xc0>)
 8009e0e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009e12:	492a      	ldr	r1, [pc, #168]	@ (8009ebc <poll_tcp+0xc4>)
 8009e14:	482a      	ldr	r0, [pc, #168]	@ (8009ec0 <poll_tcp+0xc8>)
 8009e16:	f00e fc53 	bl	80186c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d104      	bne.n	8009e2c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e22:	2101      	movs	r1, #1
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 ff65 	bl	800acf4 <lwip_netconn_do_writemore>
 8009e2a:	e016      	b.n	8009e5a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d112      	bne.n	8009e5a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <poll_tcp+0x5a>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	7a5b      	ldrb	r3, [r3, #9]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	7a5a      	ldrb	r2, [r3, #9]
 8009e4c:	3a01      	subs	r2, #1
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009e52:	2101      	movs	r1, #1
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fbf7 	bl	800a648 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	7e1b      	ldrb	r3, [r3, #24]
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d022      	beq.n	8009eac <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d01e      	beq.n	8009eac <poll_tcp+0xb4>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009e76:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d916      	bls.n	8009eac <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e86:	2b07      	cmp	r3, #7
 8009e88:	d810      	bhi.n	8009eac <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	7e1b      	ldrb	r3, [r3, #24]
 8009e8e:	f023 0310 	bic.w	r3, r3, #16
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <poll_tcp+0xb4>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	08019efc 	.word	0x08019efc
 8009ebc:	0801a054 	.word	0x0801a054
 8009ec0:	08019f40 	.word	0x08019f40

08009ec4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <sent_tcp+0x26>
 8009edc:	4b21      	ldr	r3, [pc, #132]	@ (8009f64 <sent_tcp+0xa0>)
 8009ede:	f240 1293 	movw	r2, #403	@ 0x193
 8009ee2:	4921      	ldr	r1, [pc, #132]	@ (8009f68 <sent_tcp+0xa4>)
 8009ee4:	4821      	ldr	r0, [pc, #132]	@ (8009f6c <sent_tcp+0xa8>)
 8009ee6:	f00e fbeb 	bl	80186c0 <iprintf>

  if (conn) {
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d033      	beq.n	8009f58 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d104      	bne.n	8009f02 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ef8:	2101      	movs	r1, #1
 8009efa:	6978      	ldr	r0, [r7, #20]
 8009efc:	f000 fefa 	bl	800acf4 <lwip_netconn_do_writemore>
 8009f00:	e007      	b.n	8009f12 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d103      	bne.n	8009f12 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f000 fb9b 	bl	800a648 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01e      	beq.n	8009f58 <sent_tcp+0x94>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f22:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d916      	bls.n	8009f58 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f32:	2b07      	cmp	r3, #7
 8009f34:	d810      	bhi.n	8009f58 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	7e1b      	ldrb	r3, [r3, #24]
 8009f3a:	f023 0310 	bic.w	r3, r3, #16
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d005      	beq.n	8009f58 <sent_tcp+0x94>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	2102      	movs	r1, #2
 8009f54:	6978      	ldr	r0, [r7, #20]
 8009f56:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	08019efc 	.word	0x08019efc
 8009f68:	0801a054 	.word	0x0801a054
 8009f6c:	08019f40 	.word	0x08019f40

08009f70 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <err_tcp+0x24>
 8009f86:	4b5f      	ldr	r3, [pc, #380]	@ (800a104 <err_tcp+0x194>)
 8009f88:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009f8c:	495e      	ldr	r1, [pc, #376]	@ (800a108 <err_tcp+0x198>)
 8009f8e:	485f      	ldr	r0, [pc, #380]	@ (800a10c <err_tcp+0x19c>)
 8009f90:	f00e fb96 	bl	80186c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009f94:	f00e fa76 	bl	8018484 <sys_arch_protect>
 8009f98:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	7e1b      	ldrb	r3, [r3, #24]
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009fc0:	69b8      	ldr	r0, [r7, #24]
 8009fc2:	f00e fa6d 	bl	80184a0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <err_tcp+0x6a>
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2104      	movs	r1, #4
 8009fd6:	69f8      	ldr	r0, [r7, #28]
 8009fd8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <err_tcp+0x7e>
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	69f8      	ldr	r0, [r7, #28]
 8009fec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <err_tcp+0x92>
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	69f8      	ldr	r0, [r7, #28]
 800a000:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fd82 	bl	8009b10 <lwip_netconn_err_to_msg>
 800a00c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	3310      	adds	r3, #16
 800a012:	4618      	mov	r0, r3
 800a014:	f00e f91b 	bl	801824e <sys_mbox_valid>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3310      	adds	r3, #16
 800a022:	6939      	ldr	r1, [r7, #16]
 800a024:	4618      	mov	r0, r3
 800a026:	f00e f89d 	bl	8018164 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	3314      	adds	r3, #20
 800a02e:	4618      	mov	r0, r3
 800a030:	f00e f90d 	bl	801824e <sys_mbox_valid>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3314      	adds	r3, #20
 800a03e:	6939      	ldr	r1, [r7, #16]
 800a040:	4618      	mov	r0, r3
 800a042:	f00e f88f 	bl	8018164 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d005      	beq.n	800a058 <err_tcp+0xe8>
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d002      	beq.n	800a058 <err_tcp+0xe8>
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d143      	bne.n	800a0e0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	7e1b      	ldrb	r3, [r3, #24]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	bf14      	ite	ne
 800a064:	2301      	movne	r3, #1
 800a066:	2300      	moveq	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	7e1b      	ldrb	r3, [r3, #24]
 800a070:	f023 0304 	bic.w	r3, r3, #4
 800a074:	b2da      	uxtb	r2, r3
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d13b      	bne.n	800a0f8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <err_tcp+0x126>
 800a088:	4b1e      	ldr	r3, [pc, #120]	@ (800a104 <err_tcp+0x194>)
 800a08a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a08e:	4920      	ldr	r1, [pc, #128]	@ (800a110 <err_tcp+0x1a0>)
 800a090:	481e      	ldr	r0, [pc, #120]	@ (800a10c <err_tcp+0x19c>)
 800a092:	f00e fb15 	bl	80186c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d104      	bne.n	800a0a6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	711a      	strb	r2, [r3, #4]
 800a0a4:	e003      	b.n	800a0ae <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a0b8:	68b8      	ldr	r0, [r7, #8]
 800a0ba:	f00e f959 	bl	8018370 <sys_sem_valid>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <err_tcp+0x162>
 800a0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a104 <err_tcp+0x194>)
 800a0c6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a0ca:	4912      	ldr	r1, [pc, #72]	@ (800a114 <err_tcp+0x1a4>)
 800a0cc:	480f      	ldr	r0, [pc, #60]	@ (800a10c <err_tcp+0x19c>)
 800a0ce:	f00e faf7 	bl	80186c0 <iprintf>
      conn->current_msg = NULL;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f00e f92f 	bl	801833c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a0de:	e00b      	b.n	800a0f8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d008      	beq.n	800a0fa <err_tcp+0x18a>
 800a0e8:	4b06      	ldr	r3, [pc, #24]	@ (800a104 <err_tcp+0x194>)
 800a0ea:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a0ee:	490a      	ldr	r1, [pc, #40]	@ (800a118 <err_tcp+0x1a8>)
 800a0f0:	4806      	ldr	r0, [pc, #24]	@ (800a10c <err_tcp+0x19c>)
 800a0f2:	f00e fae5 	bl	80186c0 <iprintf>
  }
}
 800a0f6:	e000      	b.n	800a0fa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a0f8:	bf00      	nop
}
 800a0fa:	bf00      	nop
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	08019efc 	.word	0x08019efc
 800a108:	0801a054 	.word	0x0801a054
 800a10c:	08019f40 	.word	0x08019f40
 800a110:	0801a064 	.word	0x0801a064
 800a114:	0801a080 	.word	0x0801a080
 800a118:	0801a09c 	.word	0x0801a09c

0800a11c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f004 fe45 	bl	800edbc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a132:	490a      	ldr	r1, [pc, #40]	@ (800a15c <setup_tcp+0x40>)
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f004 fe53 	bl	800ede0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a13a:	4909      	ldr	r1, [pc, #36]	@ (800a160 <setup_tcp+0x44>)
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f004 fe71 	bl	800ee24 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a142:	2202      	movs	r2, #2
 800a144:	4907      	ldr	r1, [pc, #28]	@ (800a164 <setup_tcp+0x48>)
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f004 fec6 	bl	800eed8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a14c:	4906      	ldr	r1, [pc, #24]	@ (800a168 <setup_tcp+0x4c>)
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f004 fe88 	bl	800ee64 <tcp_err>
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08009ced 	.word	0x08009ced
 800a160:	08009ec5 	.word	0x08009ec5
 800a164:	08009df9 	.word	0x08009df9
 800a168:	08009f71 	.word	0x08009f71

0800a16c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a16c:	b590      	push	{r4, r7, lr}
 800a16e:	b089      	sub	sp, #36	@ 0x24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <accept_function+0x1e>
    return ERR_VAL;
 800a184:	f06f 0305 	mvn.w	r3, #5
 800a188:	e0a1      	b.n	800a2ce <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	3314      	adds	r3, #20
 800a18e:	4618      	mov	r0, r3
 800a190:	f00e f85d 	bl	801824e <sys_mbox_valid>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d102      	bne.n	800a1a0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a19a:	f06f 0305 	mvn.w	r3, #5
 800a19e:	e096      	b.n	800a2ce <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d11b      	bne.n	800a1de <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	f103 0414 	add.w	r4, r3, #20
 800a1ac:	f06f 000c 	mvn.w	r0, #12
 800a1b0:	f7ff fcae 	bl	8009b10 <lwip_netconn_err_to_msg>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f00d ffd3 	bl	8018164 <sys_mbox_trypost>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d109      	bne.n	800a1d8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d005      	beq.n	800a1d8 <accept_function+0x6c>
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	69f8      	ldr	r0, [r7, #28]
 800a1d6:	4798      	blx	r3
    }
    return ERR_VAL;
 800a1d8:	f06f 0305 	mvn.w	r3, #5
 800a1dc:	e077      	b.n	800a2ce <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <accept_function+0x88>
 800a1e6:	4b3c      	ldr	r3, [pc, #240]	@ (800a2d8 <accept_function+0x16c>)
 800a1e8:	f240 222a 	movw	r2, #554	@ 0x22a
 800a1ec:	493b      	ldr	r1, [pc, #236]	@ (800a2dc <accept_function+0x170>)
 800a1ee:	483c      	ldr	r0, [pc, #240]	@ (800a2e0 <accept_function+0x174>)
 800a1f0:	f00e fa66 	bl	80186c0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f000 f8f0 	bl	800a3e4 <netconn_alloc>
 800a204:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11b      	bne.n	800a244 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f103 0414 	add.w	r4, r3, #20
 800a212:	f06f 000c 	mvn.w	r0, #12
 800a216:	f7ff fc7b 	bl	8009b10 <lwip_netconn_err_to_msg>
 800a21a:	4603      	mov	r3, r0
 800a21c:	4619      	mov	r1, r3
 800a21e:	4620      	mov	r0, r4
 800a220:	f00d ffa0 	bl	8018164 <sys_mbox_trypost>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <accept_function+0xd2>
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	69f8      	ldr	r0, [r7, #28]
 800a23c:	4798      	blx	r3
    }
    return ERR_MEM;
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295
 800a242:	e044      	b.n	800a2ce <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a24a:	69b8      	ldr	r0, [r7, #24]
 800a24c:	f7ff ff66 	bl	800a11c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	3314      	adds	r3, #20
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	4618      	mov	r0, r3
 800a258:	f00d ff84 	bl	8018164 <sys_mbox_trypost>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d02a      	beq.n	800a2b8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a268:	2100      	movs	r1, #0
 800a26a:	6978      	ldr	r0, [r7, #20]
 800a26c:	f004 fda6 	bl	800edbc <tcp_arg>
    tcp_recv(pcb, NULL);
 800a270:	2100      	movs	r1, #0
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f004 fdb4 	bl	800ede0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a278:	2100      	movs	r1, #0
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f004 fdd2 	bl	800ee24 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a280:	2200      	movs	r2, #0
 800a282:	2100      	movs	r1, #0
 800a284:	6978      	ldr	r0, [r7, #20]
 800a286:	f004 fe27 	bl	800eed8 <tcp_poll>
    tcp_err(pcb, NULL);
 800a28a:	2100      	movs	r1, #0
 800a28c:	6978      	ldr	r0, [r7, #20]
 800a28e:	f004 fde9 	bl	800ee64 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f00d ff39 	bl	8018114 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f00d ffe2 	bl	8018270 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a2ac:	69b8      	ldr	r0, [r7, #24]
 800a2ae:	f000 f903 	bl	800a4b8 <netconn_free>
    return ERR_MEM;
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b6:	e00a      	b.n	800a2ce <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <accept_function+0x160>
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	69f8      	ldr	r0, [r7, #28]
 800a2ca:	4798      	blx	r3
  }

  return ERR_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3724      	adds	r7, #36	@ 0x24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd90      	pop	{r4, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	08019efc 	.word	0x08019efc
 800a2dc:	0801a0b8 	.word	0x0801a0b8
 800a2e0:	08019f40 	.word	0x08019f40

0800a2e4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <pcb_new+0x24>
 800a2fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a3a8 <pcb_new+0xc4>)
 800a2fc:	f240 2265 	movw	r2, #613	@ 0x265
 800a300:	492a      	ldr	r1, [pc, #168]	@ (800a3ac <pcb_new+0xc8>)
 800a302:	482b      	ldr	r0, [pc, #172]	@ (800a3b0 <pcb_new+0xcc>)
 800a304:	f00e f9dc 	bl	80186c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a312:	2b10      	cmp	r3, #16
 800a314:	d022      	beq.n	800a35c <pcb_new+0x78>
 800a316:	2b20      	cmp	r3, #32
 800a318:	d133      	bne.n	800a382 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681c      	ldr	r4, [r3, #0]
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	4618      	mov	r0, r3
 800a322:	f009 fc74 	bl	8013c0e <udp_new_ip_type>
 800a326:	4603      	mov	r3, r0
 800a328:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d02a      	beq.n	800a38a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b22      	cmp	r3, #34	@ 0x22
 800a33c:	d104      	bne.n	800a348 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6858      	ldr	r0, [r3, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	4917      	ldr	r1, [pc, #92]	@ (800a3b4 <pcb_new+0xd0>)
 800a356:	f009 fbe1 	bl	8013b1c <udp_recv>
      }
      break;
 800a35a:	e016      	b.n	800a38a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681c      	ldr	r4, [r3, #0]
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f004 fd1c 	bl	800eda0 <tcp_new_ip_type>
 800a368:	4603      	mov	r3, r0
 800a36a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fece 	bl	800a11c <setup_tcp>
      }
      break;
 800a380:	e005      	b.n	800a38e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	22fa      	movs	r2, #250	@ 0xfa
 800a386:	711a      	strb	r2, [r3, #4]
      return;
 800a388:	e00a      	b.n	800a3a0 <pcb_new+0xbc>
      break;
 800a38a:	bf00      	nop
 800a38c:	e000      	b.n	800a390 <pcb_new+0xac>
      break;
 800a38e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d102      	bne.n	800a3a0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	22ff      	movs	r2, #255	@ 0xff
 800a39e:	711a      	strb	r2, [r3, #4]
  }
}
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd90      	pop	{r4, r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08019efc 	.word	0x08019efc
 800a3ac:	0801a0e0 	.word	0x0801a0e0
 800a3b0:	08019f40 	.word	0x08019f40
 800a3b4:	08009bf1 	.word	0x08009bf1

0800a3b8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff ff85 	bl	800a2e4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a3f4:	2007      	movs	r0, #7
 800a3f6:	f001 fff1 	bl	800c3dc <memp_malloc>
 800a3fa:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <netconn_alloc+0x22>
    return NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	e04e      	b.n	800a4a4 <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	79fa      	ldrb	r2, [r7, #7]
 800a410:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d004      	beq.n	800a42c <netconn_alloc+0x48>
 800a422:	2b20      	cmp	r3, #32
 800a424:	d105      	bne.n	800a432 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a426:	2306      	movs	r3, #6
 800a428:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a42a:	e00a      	b.n	800a442 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a42c:	2306      	movs	r3, #6
 800a42e:	617b      	str	r3, [r7, #20]
      break;
 800a430:	e007      	b.n	800a442 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a432:	4b1e      	ldr	r3, [pc, #120]	@ (800a4ac <netconn_alloc+0xc8>)
 800a434:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a438:	491d      	ldr	r1, [pc, #116]	@ (800a4b0 <netconn_alloc+0xcc>)
 800a43a:	481e      	ldr	r0, [pc, #120]	@ (800a4b4 <netconn_alloc+0xd0>)
 800a43c:	f00e f940 	bl	80186c0 <iprintf>
      goto free_and_return;
 800a440:	e02b      	b.n	800a49a <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3310      	adds	r3, #16
 800a446:	6979      	ldr	r1, [r7, #20]
 800a448:	4618      	mov	r0, r3
 800a44a:	f00d fe41 	bl	80180d0 <sys_mbox_new>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d121      	bne.n	800a498 <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	330c      	adds	r3, #12
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f00d ff15 	bl	801828a <sys_sem_new>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3310      	adds	r3, #16
 800a46a:	4618      	mov	r0, r3
 800a46c:	f00d fe52 	bl	8018114 <sys_mbox_free>
    goto free_and_return;
 800a470:	e013      	b.n	800a49a <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3314      	adds	r3, #20
 800a476:	4618      	mov	r0, r3
 800a478:	f00d fefa 	bl	8018270 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	7cfa      	ldrb	r2, [r7, #19]
 800a492:	761a      	strb	r2, [r3, #24]
  return conn;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	e005      	b.n	800a4a4 <netconn_alloc+0xc0>
    goto free_and_return;
 800a498:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	2007      	movs	r0, #7
 800a49e:	f001 ffef 	bl	800c480 <memp_free>
  return NULL;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	08019efc 	.word	0x08019efc
 800a4b0:	0801a100 	.word	0x0801a100
 800a4b4:	08019f40 	.word	0x08019f40

0800a4b8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <netconn_free+0x1e>
 800a4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <netconn_free+0x80>)
 800a4ca:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a4ce:	491b      	ldr	r1, [pc, #108]	@ (800a53c <netconn_free+0x84>)
 800a4d0:	481b      	ldr	r0, [pc, #108]	@ (800a540 <netconn_free+0x88>)
 800a4d2:	f00e f8f5 	bl	80186c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3310      	adds	r3, #16
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f00d feb7 	bl	801824e <sys_mbox_valid>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d006      	beq.n	800a4f4 <netconn_free+0x3c>
 800a4e6:	4b14      	ldr	r3, [pc, #80]	@ (800a538 <netconn_free+0x80>)
 800a4e8:	f240 3223 	movw	r2, #803	@ 0x323
 800a4ec:	4915      	ldr	r1, [pc, #84]	@ (800a544 <netconn_free+0x8c>)
 800a4ee:	4814      	ldr	r0, [pc, #80]	@ (800a540 <netconn_free+0x88>)
 800a4f0:	f00e f8e6 	bl	80186c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f00d fea8 	bl	801824e <sys_mbox_valid>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d006      	beq.n	800a512 <netconn_free+0x5a>
 800a504:	4b0c      	ldr	r3, [pc, #48]	@ (800a538 <netconn_free+0x80>)
 800a506:	f240 3226 	movw	r2, #806	@ 0x326
 800a50a:	490f      	ldr	r1, [pc, #60]	@ (800a548 <netconn_free+0x90>)
 800a50c:	480c      	ldr	r0, [pc, #48]	@ (800a540 <netconn_free+0x88>)
 800a50e:	f00e f8d7 	bl	80186c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	330c      	adds	r3, #12
 800a516:	4618      	mov	r0, r3
 800a518:	f00d ff1d 	bl	8018356 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	330c      	adds	r3, #12
 800a520:	4618      	mov	r0, r3
 800a522:	f00d ff36 	bl	8018392 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	2007      	movs	r0, #7
 800a52a:	f001 ffa9 	bl	800c480 <memp_free>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	08019efc 	.word	0x08019efc
 800a53c:	0801a128 	.word	0x0801a128
 800a540:	08019f40 	.word	0x08019f40
 800a544:	0801a158 	.word	0x0801a158
 800a548:	0801a194 	.word	0x0801a194

0800a54c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3310      	adds	r3, #16
 800a558:	4618      	mov	r0, r3
 800a55a:	f00d fe78 	bl	801824e <sys_mbox_valid>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d02f      	beq.n	800a5c4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a564:	e018      	b.n	800a598 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a56e:	2b10      	cmp	r3, #16
 800a570:	d10e      	bne.n	800a590 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	f107 020f 	add.w	r2, r7, #15
 800a578:	4611      	mov	r1, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fafe 	bl	8009b7c <lwip_netconn_is_err_msg>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d108      	bne.n	800a598 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4618      	mov	r0, r3
 800a58a:	f002 fdcf 	bl	800d12c <pbuf_free>
 800a58e:	e003      	b.n	800a598 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fe94 	bl	800b2c0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3310      	adds	r3, #16
 800a59c:	f107 0210 	add.w	r2, r7, #16
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f00d fe37 	bl	8018216 <sys_arch_mbox_tryfetch>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d1da      	bne.n	800a566 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3310      	adds	r3, #16
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00d fdad 	bl	8018114 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3310      	adds	r3, #16
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f00d fe56 	bl	8018270 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3314      	adds	r3, #20
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f00d fe40 	bl	801824e <sys_mbox_valid>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d034      	beq.n	800a63e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5d4:	e01d      	b.n	800a612 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f107 020e 	add.w	r2, r7, #14
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff facc 	bl	8009b7c <lwip_netconn_is_err_msg>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d113      	bne.n	800a612 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f7ff ffac 	bl	800a54c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d007      	beq.n	800a60c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	4618      	mov	r0, r3
 800a602:	f003 fb89 	bl	800dd18 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2200      	movs	r2, #0
 800a60a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f7ff ff53 	bl	800a4b8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3314      	adds	r3, #20
 800a616:	f107 0210 	add.w	r2, r7, #16
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00d fdfa 	bl	8018216 <sys_arch_mbox_tryfetch>
 800a622:	4603      	mov	r3, r0
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d1d5      	bne.n	800a5d6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3314      	adds	r3, #20
 800a62e:	4618      	mov	r0, r3
 800a630:	f00d fd70 	bl	8018114 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3314      	adds	r3, #20
 800a638:	4618      	mov	r0, r3
 800a63a:	f00d fe19 	bl	8018270 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <lwip_netconn_do_close_internal+0x24>
 800a65e:	4b87      	ldr	r3, [pc, #540]	@ (800a87c <lwip_netconn_do_close_internal+0x234>)
 800a660:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a664:	4986      	ldr	r1, [pc, #536]	@ (800a880 <lwip_netconn_do_close_internal+0x238>)
 800a666:	4887      	ldr	r0, [pc, #540]	@ (800a884 <lwip_netconn_do_close_internal+0x23c>)
 800a668:	f00e f82a 	bl	80186c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a674:	2b10      	cmp	r3, #16
 800a676:	d006      	beq.n	800a686 <lwip_netconn_do_close_internal+0x3e>
 800a678:	4b80      	ldr	r3, [pc, #512]	@ (800a87c <lwip_netconn_do_close_internal+0x234>)
 800a67a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a67e:	4982      	ldr	r1, [pc, #520]	@ (800a888 <lwip_netconn_do_close_internal+0x240>)
 800a680:	4880      	ldr	r0, [pc, #512]	@ (800a884 <lwip_netconn_do_close_internal+0x23c>)
 800a682:	f00e f81d 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	785b      	ldrb	r3, [r3, #1]
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d006      	beq.n	800a69c <lwip_netconn_do_close_internal+0x54>
 800a68e:	4b7b      	ldr	r3, [pc, #492]	@ (800a87c <lwip_netconn_do_close_internal+0x234>)
 800a690:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a694:	497d      	ldr	r1, [pc, #500]	@ (800a88c <lwip_netconn_do_close_internal+0x244>)
 800a696:	487b      	ldr	r0, [pc, #492]	@ (800a884 <lwip_netconn_do_close_internal+0x23c>)
 800a698:	f00e f812 	bl	80186c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <lwip_netconn_do_close_internal+0x6a>
 800a6a4:	4b75      	ldr	r3, [pc, #468]	@ (800a87c <lwip_netconn_do_close_internal+0x234>)
 800a6a6:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a6aa:	4979      	ldr	r1, [pc, #484]	@ (800a890 <lwip_netconn_do_close_internal+0x248>)
 800a6ac:	4875      	ldr	r0, [pc, #468]	@ (800a884 <lwip_netconn_do_close_internal+0x23c>)
 800a6ae:	f00e f807 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <lwip_netconn_do_close_internal+0x80>
 800a6ba:	4b70      	ldr	r3, [pc, #448]	@ (800a87c <lwip_netconn_do_close_internal+0x234>)
 800a6bc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a6c0:	4974      	ldr	r1, [pc, #464]	@ (800a894 <lwip_netconn_do_close_internal+0x24c>)
 800a6c2:	4870      	ldr	r0, [pc, #448]	@ (800a884 <lwip_netconn_do_close_internal+0x23c>)
 800a6c4:	f00d fffc 	bl	80186c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	7a1b      	ldrb	r3, [r3, #8]
 800a6d4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d102      	bne.n	800a6f2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	75bb      	strb	r3, [r7, #22]
 800a6f0:	e01f      	b.n	800a732 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00e      	beq.n	800a716 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a6fc:	2b05      	cmp	r3, #5
 800a6fe:	d007      	beq.n	800a710 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a704:	2b06      	cmp	r3, #6
 800a706:	d003      	beq.n	800a710 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d102      	bne.n	800a716 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a710:	2301      	movs	r3, #1
 800a712:	75bb      	strb	r3, [r7, #22]
 800a714:	e00d      	b.n	800a732 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a716:	7b7b      	ldrb	r3, [r7, #13]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <lwip_netconn_do_close_internal+0xe6>
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	8b5b      	ldrh	r3, [r3, #26]
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a728:	2301      	movs	r3, #1
 800a72a:	75bb      	strb	r3, [r7, #22]
 800a72c:	e001      	b.n	800a732 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a732:	7dbb      	ldrb	r3, [r7, #22]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a738:	2100      	movs	r1, #0
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f004 fb3e 	bl	800edbc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	7d1b      	ldrb	r3, [r3, #20]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d104      	bne.n	800a752 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a748:	2100      	movs	r1, #0
 800a74a:	6938      	ldr	r0, [r7, #16]
 800a74c:	f004 fbac 	bl	800eea8 <tcp_accept>
 800a750:	e01d      	b.n	800a78e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a758:	2100      	movs	r1, #0
 800a75a:	6938      	ldr	r0, [r7, #16]
 800a75c:	f004 fb40 	bl	800ede0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a760:	2100      	movs	r1, #0
 800a762:	6938      	ldr	r0, [r7, #16]
 800a764:	f004 fba0 	bl	800eea8 <tcp_accept>
    }
    if (shut_tx) {
 800a768:	7b7b      	ldrb	r3, [r7, #13]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a76e:	2100      	movs	r1, #0
 800a770:	6938      	ldr	r0, [r7, #16]
 800a772:	f004 fb57 	bl	800ee24 <tcp_sent>
    }
    if (shut_close) {
 800a776:	7dbb      	ldrb	r3, [r7, #22]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a77c:	2200      	movs	r2, #0
 800a77e:	2100      	movs	r1, #0
 800a780:	6938      	ldr	r0, [r7, #16]
 800a782:	f004 fba9 	bl	800eed8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a786:	2100      	movs	r1, #0
 800a788:	6938      	ldr	r0, [r7, #16]
 800a78a:	f004 fb6b 	bl	800ee64 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a78e:	7dbb      	ldrb	r3, [r7, #22]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a794:	6938      	ldr	r0, [r7, #16]
 800a796:	f003 f983 	bl	800daa0 <tcp_close>
 800a79a:	4603      	mov	r3, r0
 800a79c:	75fb      	strb	r3, [r7, #23]
 800a79e:	e007      	b.n	800a7b0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	7b7a      	ldrb	r2, [r7, #13]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6938      	ldr	r0, [r7, #16]
 800a7a8:	f003 f9a6 	bl	800daf8 <tcp_shutdown>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a7b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	757b      	strb	r3, [r7, #21]
 800a7bc:	e016      	b.n	800a7ec <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a7be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c6:	d10f      	bne.n	800a7e8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	7a5b      	ldrb	r3, [r3, #9]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10c      	bne.n	800a7ec <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a7d6:	7dbb      	ldrb	r3, [r7, #22]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d007      	beq.n	800a7ec <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a7dc:	6938      	ldr	r0, [r7, #16]
 800a7de:	f003 fa9b 	bl	800dd18 <tcp_abort>
          err = ERR_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
 800a7e6:	e001      	b.n	800a7ec <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a7ec:	7d7b      	ldrb	r3, [r7, #21]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d052      	beq.n	800a898 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	7dfa      	ldrb	r2, [r7, #23]
 800a802:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d129      	bne.n	800a86c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a818:	7dbb      	ldrb	r3, [r7, #22]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <lwip_netconn_do_close_internal+0x1f0>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	2200      	movs	r2, #0
 800a832:	2104      	movs	r1, #4
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
      }
      if (shut_rx) {
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <lwip_netconn_do_close_internal+0x20a>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
      }
      if (shut_tx) {
 800a852:	7b7b      	ldrb	r3, [r7, #13]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <lwip_netconn_do_close_internal+0x224>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	2200      	movs	r2, #0
 800a866:	2102      	movs	r1, #2
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a872:	68b8      	ldr	r0, [r7, #8]
 800a874:	f00d fd62 	bl	801833c <sys_sem_signal>
    }
    return ERR_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	e03c      	b.n	800a8f6 <lwip_netconn_do_close_internal+0x2ae>
 800a87c:	08019efc 	.word	0x08019efc
 800a880:	0801a1d0 	.word	0x0801a1d0
 800a884:	08019f40 	.word	0x08019f40
 800a888:	0801a1e0 	.word	0x0801a1e0
 800a88c:	0801a200 	.word	0x0801a200
 800a890:	0801a224 	.word	0x0801a224
 800a894:	0801a064 	.word	0x0801a064
  }
  if (!close_finished) {
 800a898:	7d7b      	ldrb	r3, [r7, #21]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d11e      	bne.n	800a8dc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	7d1b      	ldrb	r3, [r3, #20]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d106      	bne.n	800a8b4 <lwip_netconn_do_close_internal+0x26c>
 800a8a6:	4b16      	ldr	r3, [pc, #88]	@ (800a900 <lwip_netconn_do_close_internal+0x2b8>)
 800a8a8:	f240 4241 	movw	r2, #1089	@ 0x441
 800a8ac:	4915      	ldr	r1, [pc, #84]	@ (800a904 <lwip_netconn_do_close_internal+0x2bc>)
 800a8ae:	4816      	ldr	r0, [pc, #88]	@ (800a908 <lwip_netconn_do_close_internal+0x2c0>)
 800a8b0:	f00d ff06 	bl	80186c0 <iprintf>
    if (shut_tx) {
 800a8b4:	7b7b      	ldrb	r3, [r7, #13]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a8ba:	4914      	ldr	r1, [pc, #80]	@ (800a90c <lwip_netconn_do_close_internal+0x2c4>)
 800a8bc:	6938      	ldr	r0, [r7, #16]
 800a8be:	f004 fab1 	bl	800ee24 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4912      	ldr	r1, [pc, #72]	@ (800a910 <lwip_netconn_do_close_internal+0x2c8>)
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f004 fb06 	bl	800eed8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a8cc:	4911      	ldr	r1, [pc, #68]	@ (800a914 <lwip_netconn_do_close_internal+0x2cc>)
 800a8ce:	6938      	ldr	r0, [r7, #16]
 800a8d0:	f004 fac8 	bl	800ee64 <tcp_err>
    tcp_arg(tpcb, conn);
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	6938      	ldr	r0, [r7, #16]
 800a8d8:	f004 fa70 	bl	800edbc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a8dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <lwip_netconn_do_close_internal+0x2aa>
 800a8e4:	4b06      	ldr	r3, [pc, #24]	@ (800a900 <lwip_netconn_do_close_internal+0x2b8>)
 800a8e6:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a8ea:	490b      	ldr	r1, [pc, #44]	@ (800a918 <lwip_netconn_do_close_internal+0x2d0>)
 800a8ec:	4806      	ldr	r0, [pc, #24]	@ (800a908 <lwip_netconn_do_close_internal+0x2c0>)
 800a8ee:	f00d fee7 	bl	80186c0 <iprintf>
  return err;
 800a8f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	08019efc 	.word	0x08019efc
 800a904:	0801a238 	.word	0x0801a238
 800a908:	08019f40 	.word	0x08019f40
 800a90c:	08009ec5 	.word	0x08009ec5
 800a910:	08009df9 	.word	0x08009df9
 800a914:	08009f71 	.word	0x08009f71
 800a918:	0801a25c 	.word	0x0801a25c

0800a91c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a930:	7afb      	ldrb	r3, [r7, #11]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <lwip_netconn_do_delconn+0x36>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a940:	2b10      	cmp	r3, #16
 800a942:	d006      	beq.n	800a952 <lwip_netconn_do_delconn+0x36>
 800a944:	4b60      	ldr	r3, [pc, #384]	@ (800aac8 <lwip_netconn_do_delconn+0x1ac>)
 800a946:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a94a:	4960      	ldr	r1, [pc, #384]	@ (800aacc <lwip_netconn_do_delconn+0x1b0>)
 800a94c:	4860      	ldr	r0, [pc, #384]	@ (800aad0 <lwip_netconn_do_delconn+0x1b4>)
 800a94e:	f00d feb7 	bl	80186c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d005      	beq.n	800a964 <lwip_netconn_do_delconn+0x48>
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d002      	beq.n	800a964 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	2b03      	cmp	r3, #3
 800a962:	d109      	bne.n	800a978 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a964:	7afb      	ldrb	r3, [r7, #11]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d10a      	bne.n	800a980 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	7e1b      	ldrb	r3, [r3, #24]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d103      	bne.n	800a980 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	22fb      	movs	r2, #251	@ 0xfb
 800a97c:	711a      	strb	r2, [r3, #4]
 800a97e:	e097      	b.n	800aab0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	2b03      	cmp	r3, #3
 800a984:	d10d      	bne.n	800a9a2 <lwip_netconn_do_delconn+0x86>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	7e1b      	ldrb	r3, [r3, #24]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <lwip_netconn_do_delconn+0x86>
 800a994:	4b4c      	ldr	r3, [pc, #304]	@ (800aac8 <lwip_netconn_do_delconn+0x1ac>)
 800a996:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a99a:	494e      	ldr	r1, [pc, #312]	@ (800aad4 <lwip_netconn_do_delconn+0x1b8>)
 800a99c:	484c      	ldr	r0, [pc, #304]	@ (800aad0 <lwip_netconn_do_delconn+0x1b4>)
 800a99e:	f00d fe8f 	bl	80186c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff fdcd 	bl	800a54c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d05f      	beq.n	800aa7c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9c6:	2b10      	cmp	r3, #16
 800a9c8:	d00d      	beq.n	800a9e6 <lwip_netconn_do_delconn+0xca>
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d151      	bne.n	800aa72 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f009 f8bc 	bl	8013b5c <udp_remove>
          break;
 800a9e4:	e046      	b.n	800aa74 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <lwip_netconn_do_delconn+0xe2>
 800a9f0:	4b35      	ldr	r3, [pc, #212]	@ (800aac8 <lwip_netconn_do_delconn+0x1ac>)
 800a9f2:	f240 4294 	movw	r2, #1172	@ 0x494
 800a9f6:	4938      	ldr	r1, [pc, #224]	@ (800aad8 <lwip_netconn_do_delconn+0x1bc>)
 800a9f8:	4835      	ldr	r0, [pc, #212]	@ (800aad0 <lwip_netconn_do_delconn+0x1b4>)
 800a9fa:	f00d fe61 	bl	80186c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2204      	movs	r2, #4
 800aa04:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2203      	movs	r2, #3
 800aa0a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fe14 	bl	800a648 <lwip_netconn_do_close_internal>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d04b      	beq.n	800aabe <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d006      	beq.n	800aa3e <lwip_netconn_do_delconn+0x122>
 800aa30:	4b25      	ldr	r3, [pc, #148]	@ (800aac8 <lwip_netconn_do_delconn+0x1ac>)
 800aa32:	f240 429a 	movw	r2, #1178	@ 0x49a
 800aa36:	4929      	ldr	r1, [pc, #164]	@ (800aadc <lwip_netconn_do_delconn+0x1c0>)
 800aa38:	4825      	ldr	r0, [pc, #148]	@ (800aad0 <lwip_netconn_do_delconn+0x1b4>)
 800aa3a:	f00d fe41 	bl	80186c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aa3e:	4828      	ldr	r0, [pc, #160]	@ (800aae0 <lwip_netconn_do_delconn+0x1c4>)
 800aa40:	f00d fced 	bl	801841e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	330c      	adds	r3, #12
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f00d fc44 	bl	80182da <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aa52:	4823      	ldr	r0, [pc, #140]	@ (800aae0 <lwip_netconn_do_delconn+0x1c4>)
 800aa54:	f00d fcd4 	bl	8018400 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d02d      	beq.n	800aabe <lwip_netconn_do_delconn+0x1a2>
 800aa62:	4b19      	ldr	r3, [pc, #100]	@ (800aac8 <lwip_netconn_do_delconn+0x1ac>)
 800aa64:	f240 429e 	movw	r2, #1182	@ 0x49e
 800aa68:	491c      	ldr	r1, [pc, #112]	@ (800aadc <lwip_netconn_do_delconn+0x1c0>)
 800aa6a:	4819      	ldr	r0, [pc, #100]	@ (800aad0 <lwip_netconn_do_delconn+0x1b4>)
 800aa6c:	f00d fe28 	bl	80186c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aa70:	e025      	b.n	800aabe <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aa72:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <lwip_netconn_do_delconn+0x17a>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	6810      	ldr	r0, [r2, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	2100      	movs	r1, #0
 800aa94:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d007      	beq.n	800aab0 <lwip_netconn_do_delconn+0x194>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	6810      	ldr	r0, [r2, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2102      	movs	r1, #2
 800aaae:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	330c      	adds	r3, #12
 800aab6:	4618      	mov	r0, r3
 800aab8:	f00d fc5a 	bl	8018370 <sys_sem_valid>
 800aabc:	e000      	b.n	800aac0 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aabe:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	08019efc 	.word	0x08019efc
 800aacc:	0801a26c 	.word	0x0801a26c
 800aad0:	08019f40 	.word	0x08019f40
 800aad4:	0801a280 	.word	0x0801a280
 800aad8:	0801a2a0 	.word	0x0801a2a0
 800aadc:	0801a2bc 	.word	0x0801a2bc
 800aae0:	20009320 	.word	0x20009320

0800aae4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d025      	beq.n	800ab46 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab04:	2b10      	cmp	r3, #16
 800ab06:	d00e      	beq.n	800ab26 <lwip_netconn_do_bind+0x42>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d119      	bne.n	800ab40 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6858      	ldr	r0, [r3, #4]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6899      	ldr	r1, [r3, #8]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	899b      	ldrh	r3, [r3, #12]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f008 ff08 	bl	8013930 <udp_bind>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]
        break;
 800ab24:	e011      	b.n	800ab4a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6858      	ldr	r0, [r3, #4]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6899      	ldr	r1, [r3, #8]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	899b      	ldrh	r3, [r3, #12]
 800ab34:	461a      	mov	r2, r3
 800ab36:	f003 f8fb 	bl	800dd30 <tcp_bind>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]
        break;
 800ab3e:	e004      	b.n	800ab4a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ab40:	23fa      	movs	r3, #250	@ 0xfa
 800ab42:	73fb      	strb	r3, [r7, #15]
        break;
 800ab44:	e001      	b.n	800ab4a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ab46:	23fa      	movs	r3, #250	@ 0xfa
 800ab48:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	7bfa      	ldrb	r2, [r7, #15]
 800ab4e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d07f      	beq.n	800ac6e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	d175      	bne.n	800ac68 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d165      	bne.n	800ac52 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	7d1b      	ldrb	r3, [r3, #20]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ab92:	23fa      	movs	r3, #250	@ 0xfa
 800ab94:	72fb      	strb	r3, [r7, #11]
 800ab96:	e06c      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ab98:	23ff      	movs	r3, #255	@ 0xff
 800ab9a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f107 020b 	add.w	r2, r7, #11
 800aba6:	7cf9      	ldrb	r1, [r7, #19]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f003 f979 	bl	800dea0 <tcp_listen_with_backlog_and_err>
 800abae:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d05d      	beq.n	800ac72 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3310      	adds	r3, #16
 800abbc:	4618      	mov	r0, r3
 800abbe:	f00d fb46 	bl	801824e <sys_mbox_valid>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3310      	adds	r3, #16
 800abce:	4618      	mov	r0, r3
 800abd0:	f00d faa0 	bl	8018114 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3310      	adds	r3, #16
 800abda:	4618      	mov	r0, r3
 800abdc:	f00d fb48 	bl	8018270 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3314      	adds	r3, #20
 800abea:	4618      	mov	r0, r3
 800abec:	f00d fb2f 	bl	801824e <sys_mbox_valid>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d108      	bne.n	800ac08 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3314      	adds	r3, #20
 800abfc:	2106      	movs	r1, #6
 800abfe:	4618      	mov	r0, r3
 800ac00:	f00d fa66 	bl	80180d0 <sys_mbox_new>
 800ac04:	4603      	mov	r3, r0
 800ac06:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ac08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d118      	bne.n	800ac42 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2202      	movs	r2, #2
 800ac16:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f004 f8c5 	bl	800edbc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	4912      	ldr	r1, [pc, #72]	@ (800ac84 <lwip_netconn_do_listen+0x12c>)
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f004 f934 	bl	800eea8 <tcp_accept>
 800ac40:	e017      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f002 ff2c 	bl	800daa0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	605a      	str	r2, [r3, #4]
 800ac50:	e00f      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d102      	bne.n	800ac62 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	72fb      	strb	r3, [r7, #11]
 800ac60:	e007      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ac62:	23f5      	movs	r3, #245	@ 0xf5
 800ac64:	72fb      	strb	r3, [r7, #11]
 800ac66:	e004      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ac68:	23f0      	movs	r3, #240	@ 0xf0
 800ac6a:	72fb      	strb	r3, [r7, #11]
 800ac6c:	e001      	b.n	800ac72 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ac6e:	23f5      	movs	r3, #245	@ 0xf5
 800ac70:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ac72:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac7a:	bf00      	nop
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	0800a16d 	.word	0x0800a16d

0800ac88 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2200      	movs	r2, #0
 800ac98:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d022      	beq.n	800acea <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acae:	2b10      	cmp	r3, #16
 800acb0:	d11b      	bne.n	800acea <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acbe:	d202      	bcs.n	800acc6 <lwip_netconn_do_recv+0x3e>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	e001      	b.n	800acca <lwip_netconn_do_recv+0x42>
 800acc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acca:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	89fa      	ldrh	r2, [r7, #14]
 800acd4:	4611      	mov	r1, r2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f003 f9e6 	bl	800e0a8 <tcp_recved>
        remaining -= recved;
 800acdc:	89fb      	ldrh	r3, [r7, #14]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e6      	bne.n	800acb8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800acea:	bf00      	nop
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <lwip_netconn_do_writemore+0x24>
 800ad0a:	4b96      	ldr	r3, [pc, #600]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad0c:	f240 6273 	movw	r2, #1651	@ 0x673
 800ad10:	4995      	ldr	r1, [pc, #596]	@ (800af68 <lwip_netconn_do_writemore+0x274>)
 800ad12:	4896      	ldr	r0, [pc, #600]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad14:	f00d fcd4 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d006      	beq.n	800ad2e <lwip_netconn_do_writemore+0x3a>
 800ad20:	4b90      	ldr	r3, [pc, #576]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad22:	f240 6274 	movw	r2, #1652	@ 0x674
 800ad26:	4992      	ldr	r1, [pc, #584]	@ (800af70 <lwip_netconn_do_writemore+0x27c>)
 800ad28:	4890      	ldr	r0, [pc, #576]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad2a:	f00d fcc9 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <lwip_netconn_do_writemore+0x50>
 800ad36:	4b8b      	ldr	r3, [pc, #556]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad38:	f240 6275 	movw	r2, #1653	@ 0x675
 800ad3c:	498d      	ldr	r1, [pc, #564]	@ (800af74 <lwip_netconn_do_writemore+0x280>)
 800ad3e:	488b      	ldr	r0, [pc, #556]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad40:	f00d fcbe 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <lwip_netconn_do_writemore+0x66>
 800ad4c:	4b85      	ldr	r3, [pc, #532]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad4e:	f240 6276 	movw	r2, #1654	@ 0x676
 800ad52:	4989      	ldr	r1, [pc, #548]	@ (800af78 <lwip_netconn_do_writemore+0x284>)
 800ad54:	4885      	ldr	r0, [pc, #532]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad56:	f00d fcb3 	bl	80186c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d306      	bcc.n	800ad78 <lwip_netconn_do_writemore+0x84>
 800ad6a:	4b7e      	ldr	r3, [pc, #504]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad6c:	f240 6277 	movw	r2, #1655	@ 0x677
 800ad70:	4982      	ldr	r1, [pc, #520]	@ (800af7c <lwip_netconn_do_writemore+0x288>)
 800ad72:	487e      	ldr	r0, [pc, #504]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad74:	f00d fca4 	bl	80186c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	899b      	ldrh	r3, [r3, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <lwip_netconn_do_writemore+0x9c>
 800ad82:	4b78      	ldr	r3, [pc, #480]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ad84:	f240 6279 	movw	r2, #1657	@ 0x679
 800ad88:	497d      	ldr	r1, [pc, #500]	@ (800af80 <lwip_netconn_do_writemore+0x28c>)
 800ad8a:	4878      	ldr	r0, [pc, #480]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ad8c:	f00d fc98 	bl	80186c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	7f1b      	ldrb	r3, [r3, #28]
 800ad96:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7e1b      	ldrb	r3, [r3, #24]
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d104      	bne.n	800adae <lwip_netconn_do_writemore+0xba>
 800ada4:	7ebb      	ldrb	r3, [r7, #26]
 800ada6:	f003 0304 	and.w	r3, r3, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <lwip_netconn_do_writemore+0xbe>
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <lwip_netconn_do_writemore+0xc0>
 800adb2:	2300      	movs	r3, #0
 800adb4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	4413      	add	r3, r2
 800adc6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	69db      	ldr	r3, [r3, #28]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ade0:	d307      	bcc.n	800adf2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ade2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ade6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ade8:	7ebb      	ldrb	r3, [r7, #26]
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	76bb      	strb	r3, [r7, #26]
 800adf0:	e001      	b.n	800adf6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800adfe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae00:	89fa      	ldrh	r2, [r7, #14]
 800ae02:	8bbb      	ldrh	r3, [r7, #28]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d216      	bcs.n	800ae36 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae08:	89fb      	ldrh	r3, [r7, #14]
 800ae0a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae0c:	7e3b      	ldrb	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00d      	beq.n	800ae2e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae12:	8bbb      	ldrh	r3, [r7, #28]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10e      	bne.n	800ae36 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	69db      	ldr	r3, [r3, #28]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <lwip_netconn_do_writemore+0x134>
 800ae22:	f06f 0306 	mvn.w	r3, #6
 800ae26:	e000      	b.n	800ae2a <lwip_netconn_do_writemore+0x136>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae2c:	e07d      	b.n	800af2a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae2e:	7ebb      	ldrb	r3, [r7, #26]
 800ae30:	f043 0302 	orr.w	r3, r3, #2
 800ae34:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	8bbb      	ldrh	r3, [r7, #28]
 800ae3e:	441a      	add	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d906      	bls.n	800ae5a <lwip_netconn_do_writemore+0x166>
 800ae4c:	4b45      	ldr	r3, [pc, #276]	@ (800af64 <lwip_netconn_do_writemore+0x270>)
 800ae4e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ae52:	494c      	ldr	r1, [pc, #304]	@ (800af84 <lwip_netconn_do_writemore+0x290>)
 800ae54:	4845      	ldr	r0, [pc, #276]	@ (800af6c <lwip_netconn_do_writemore+0x278>)
 800ae56:	f00d fc33 	bl	80186c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae5a:	8bbb      	ldrh	r3, [r7, #28]
 800ae5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d103      	bne.n	800ae6c <lwip_netconn_do_writemore+0x178>
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae6a:	d209      	bcs.n	800ae80 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae70:	8bba      	ldrh	r2, [r7, #28]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d10b      	bne.n	800ae8e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	899b      	ldrh	r3, [r3, #12]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d906      	bls.n	800ae8e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae84:	7ebb      	ldrb	r3, [r7, #26]
 800ae86:	f043 0302 	orr.w	r3, r3, #2
 800ae8a:	76bb      	strb	r3, [r7, #26]
 800ae8c:	e001      	b.n	800ae92 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6858      	ldr	r0, [r3, #4]
 800ae96:	7ebb      	ldrb	r3, [r7, #26]
 800ae98:	8bba      	ldrh	r2, [r7, #28]
 800ae9a:	6979      	ldr	r1, [r7, #20]
 800ae9c:	f006 fafe 	bl	801149c <tcp_write>
 800aea0:	4603      	mov	r3, r0
 800aea2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d12c      	bne.n	800af06 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	6999      	ldr	r1, [r3, #24]
 800aeb2:	8bba      	ldrh	r2, [r7, #28]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	440a      	add	r2, r1
 800aeba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	6919      	ldr	r1, [r3, #16]
 800aec2:	8bba      	ldrh	r2, [r7, #28]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	440a      	add	r2, r1
 800aeca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	691a      	ldr	r2, [r3, #16]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d113      	bne.n	800af06 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	899a      	ldrh	r2, [r3, #12]
 800aee4:	3a01      	subs	r2, #1
 800aee6:	b292      	uxth	r2, r2
 800aee8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	899b      	ldrh	r3, [r3, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d008      	beq.n	800af06 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	689a      	ldr	r2, [r3, #8]
 800aefa:	3208      	adds	r2, #8
 800aefc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	2200      	movs	r2, #0
 800af04:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af06:	7e7b      	ldrb	r3, [r7, #25]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d004      	beq.n	800af16 <lwip_netconn_do_writemore+0x222>
 800af0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f43f af50 	beq.w	800adb6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <lwip_netconn_do_writemore+0x234>
 800af1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af26:	d147      	bne.n	800afb8 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800af28:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af2a:	7e3b      	ldrb	r3, [r7, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d02b      	beq.n	800af88 <lwip_netconn_do_writemore+0x294>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d223      	bcs.n	800af88 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <lwip_netconn_do_writemore+0x260>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	2200      	movs	r2, #0
 800af4e:	2103      	movs	r1, #3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7e1b      	ldrb	r3, [r3, #24]
 800af58:	f043 0310 	orr.w	r3, r3, #16
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	761a      	strb	r2, [r3, #24]
 800af62:	e029      	b.n	800afb8 <lwip_netconn_do_writemore+0x2c4>
 800af64:	08019efc 	.word	0x08019efc
 800af68:	0801a054 	.word	0x0801a054
 800af6c:	08019f40 	.word	0x08019f40
 800af70:	0801a35c 	.word	0x0801a35c
 800af74:	0801a064 	.word	0x0801a064
 800af78:	0801a37c 	.word	0x0801a37c
 800af7c:	0801a394 	.word	0x0801a394
 800af80:	0801a3d4 	.word	0x0801a3d4
 800af84:	0801a3fc 	.word	0x0801a3fc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af90:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800af94:	4293      	cmp	r3, r2
 800af96:	d905      	bls.n	800afa4 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	d909      	bls.n	800afb8 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <lwip_netconn_do_writemore+0x2c4>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	2200      	movs	r2, #0
 800afb2:	2103      	movs	r1, #3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800afb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11d      	bne.n	800affc <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	699a      	ldr	r2, [r3, #24]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d002      	beq.n	800afd6 <lwip_netconn_do_writemore+0x2e2>
 800afd0:	7e3b      	ldrb	r3, [r7, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800afd6:	2301      	movs	r3, #1
 800afd8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f007 f846 	bl	8012070 <tcp_output>
 800afe4:	4603      	mov	r3, r0
 800afe6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800afe8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afec:	f113 0f04 	cmn.w	r3, #4
 800aff0:	d12c      	bne.n	800b04c <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800aff2:	7b3b      	ldrb	r3, [r7, #12]
 800aff4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	76fb      	strb	r3, [r7, #27]
 800affa:	e027      	b.n	800b04c <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800affc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b004:	d120      	bne.n	800b048 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f007 f830 	bl	8012070 <tcp_output>
 800b010:	4603      	mov	r3, r0
 800b012:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b014:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b018:	f113 0f04 	cmn.w	r3, #4
 800b01c:	d104      	bne.n	800b028 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b01e:	7b7b      	ldrb	r3, [r7, #13]
 800b020:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b022:	2301      	movs	r3, #1
 800b024:	76fb      	strb	r3, [r7, #27]
 800b026:	e011      	b.n	800b04c <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800b028:	7e3b      	ldrb	r3, [r7, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00e      	beq.n	800b04c <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <lwip_netconn_do_writemore+0x34a>
 800b038:	f06f 0306 	mvn.w	r3, #6
 800b03c:	e000      	b.n	800b040 <lwip_netconn_do_writemore+0x34c>
 800b03e:	2300      	movs	r3, #0
 800b040:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b042:	2301      	movs	r3, #1
 800b044:	76fb      	strb	r3, [r7, #27]
 800b046:	e001      	b.n	800b04c <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b048:	2301      	movs	r3, #1
 800b04a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b04c:	7efb      	ldrb	r3, [r7, #27]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d015      	beq.n	800b07e <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	330c      	adds	r3, #12
 800b05a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	7ffa      	ldrb	r2, [r7, #31]
 800b062:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d006      	beq.n	800b084 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b076:	68b8      	ldr	r0, [r7, #8]
 800b078:	f00d f960 	bl	801833c <sys_sem_signal>
 800b07c:	e002      	b.n	800b084 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	e000      	b.n	800b086 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop

0800b090 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fe fd1a 	bl	8009ada <netconn_err>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d166      	bne.n	800b180 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d15d      	bne.n	800b17c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	785b      	ldrb	r3, [r3, #1]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b0ca:	23fb      	movs	r3, #251	@ 0xfb
 800b0cc:	73fb      	strb	r3, [r7, #15]
 800b0ce:	e057      	b.n	800b180 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d04d      	beq.n	800b176 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <lwip_netconn_do_write+0x6a>
 800b0ec:	4b28      	ldr	r3, [pc, #160]	@ (800b190 <lwip_netconn_do_write+0x100>)
 800b0ee:	f240 7223 	movw	r2, #1827	@ 0x723
 800b0f2:	4928      	ldr	r1, [pc, #160]	@ (800b194 <lwip_netconn_do_write+0x104>)
 800b0f4:	4828      	ldr	r0, [pc, #160]	@ (800b198 <lwip_netconn_do_write+0x108>)
 800b0f6:	f00d fae3 	bl	80186c0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <lwip_netconn_do_write+0x80>
 800b102:	4b23      	ldr	r3, [pc, #140]	@ (800b190 <lwip_netconn_do_write+0x100>)
 800b104:	f240 7224 	movw	r2, #1828	@ 0x724
 800b108:	4924      	ldr	r1, [pc, #144]	@ (800b19c <lwip_netconn_do_write+0x10c>)
 800b10a:	4823      	ldr	r0, [pc, #140]	@ (800b198 <lwip_netconn_do_write+0x108>)
 800b10c:	f00d fad8 	bl	80186c0 <iprintf>
        msg->conn->current_msg = msg;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fde8 	bl	800acf4 <lwip_netconn_do_writemore>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d02e      	beq.n	800b188 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d006      	beq.n	800b142 <lwip_netconn_do_write+0xb2>
 800b134:	4b16      	ldr	r3, [pc, #88]	@ (800b190 <lwip_netconn_do_write+0x100>)
 800b136:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b13a:	4919      	ldr	r1, [pc, #100]	@ (800b1a0 <lwip_netconn_do_write+0x110>)
 800b13c:	4816      	ldr	r0, [pc, #88]	@ (800b198 <lwip_netconn_do_write+0x108>)
 800b13e:	f00d fabf 	bl	80186c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b142:	4818      	ldr	r0, [pc, #96]	@ (800b1a4 <lwip_netconn_do_write+0x114>)
 800b144:	f00d f96b 	bl	801841e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	330c      	adds	r3, #12
 800b14e:	2100      	movs	r1, #0
 800b150:	4618      	mov	r0, r3
 800b152:	f00d f8c2 	bl	80182da <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b156:	4813      	ldr	r0, [pc, #76]	@ (800b1a4 <lwip_netconn_do_write+0x114>)
 800b158:	f00d f952 	bl	8018400 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d110      	bne.n	800b188 <lwip_netconn_do_write+0xf8>
 800b166:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <lwip_netconn_do_write+0x100>)
 800b168:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b16c:	490c      	ldr	r1, [pc, #48]	@ (800b1a0 <lwip_netconn_do_write+0x110>)
 800b16e:	480a      	ldr	r0, [pc, #40]	@ (800b198 <lwip_netconn_do_write+0x108>)
 800b170:	f00d faa6 	bl	80186c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b174:	e008      	b.n	800b188 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b176:	23f5      	movs	r3, #245	@ 0xf5
 800b178:	73fb      	strb	r3, [r7, #15]
 800b17a:	e001      	b.n	800b180 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b17c:	23fa      	movs	r3, #250	@ 0xfa
 800b17e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	7bfa      	ldrb	r2, [r7, #15]
 800b184:	711a      	strb	r2, [r3, #4]
 800b186:	e000      	b.n	800b18a <lwip_netconn_do_write+0xfa>
        return;
 800b188:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	08019efc 	.word	0x08019efc
 800b194:	0801a2a0 	.word	0x0801a2a0
 800b198:	08019f40 	.word	0x08019f40
 800b19c:	0801a428 	.word	0x0801a428
 800b1a0:	0801a2bc 	.word	0x0801a2bc
 800b1a4:	20009320 	.word	0x20009320

0800b1a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d069      	beq.n	800b29a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d162      	bne.n	800b29a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d002      	beq.n	800b1e2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d05b      	beq.n	800b29a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b1e2:	7afb      	ldrb	r3, [r7, #11]
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d103      	bne.n	800b1f0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	22f5      	movs	r2, #245	@ 0xf5
 800b1ec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1ee:	e059      	b.n	800b2a4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b1f0:	7afb      	ldrb	r3, [r7, #11]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d103      	bne.n	800b1fe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	22fb      	movs	r2, #251	@ 0xfb
 800b1fa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1fc:	e052      	b.n	800b2a4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	7a1b      	ldrb	r3, [r3, #8]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff f99c 	bl	800a54c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d006      	beq.n	800b22c <lwip_netconn_do_close+0x84>
 800b21e:	4b23      	ldr	r3, [pc, #140]	@ (800b2ac <lwip_netconn_do_close+0x104>)
 800b220:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b224:	4922      	ldr	r1, [pc, #136]	@ (800b2b0 <lwip_netconn_do_close+0x108>)
 800b226:	4823      	ldr	r0, [pc, #140]	@ (800b2b4 <lwip_netconn_do_close+0x10c>)
 800b228:	f00d fa4a 	bl	80186c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2204      	movs	r2, #4
 800b232:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2100      	movs	r1, #0
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fa00 	bl	800a648 <lwip_netconn_do_close_internal>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d029      	beq.n	800b2a2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	2b04      	cmp	r3, #4
 800b256:	d006      	beq.n	800b266 <lwip_netconn_do_close+0xbe>
 800b258:	4b14      	ldr	r3, [pc, #80]	@ (800b2ac <lwip_netconn_do_close+0x104>)
 800b25a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b25e:	4916      	ldr	r1, [pc, #88]	@ (800b2b8 <lwip_netconn_do_close+0x110>)
 800b260:	4814      	ldr	r0, [pc, #80]	@ (800b2b4 <lwip_netconn_do_close+0x10c>)
 800b262:	f00d fa2d 	bl	80186c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b266:	4815      	ldr	r0, [pc, #84]	@ (800b2bc <lwip_netconn_do_close+0x114>)
 800b268:	f00d f8d9 	bl	801841e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	330c      	adds	r3, #12
 800b272:	2100      	movs	r1, #0
 800b274:	4618      	mov	r0, r3
 800b276:	f00d f830 	bl	80182da <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b27a:	4810      	ldr	r0, [pc, #64]	@ (800b2bc <lwip_netconn_do_close+0x114>)
 800b27c:	f00d f8c0 	bl	8018400 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	785b      	ldrb	r3, [r3, #1]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00b      	beq.n	800b2a2 <lwip_netconn_do_close+0xfa>
 800b28a:	4b08      	ldr	r3, [pc, #32]	@ (800b2ac <lwip_netconn_do_close+0x104>)
 800b28c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b290:	4909      	ldr	r1, [pc, #36]	@ (800b2b8 <lwip_netconn_do_close+0x110>)
 800b292:	4808      	ldr	r0, [pc, #32]	@ (800b2b4 <lwip_netconn_do_close+0x10c>)
 800b294:	f00d fa14 	bl	80186c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b298:	e003      	b.n	800b2a2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	22f5      	movs	r2, #245	@ 0xf5
 800b29e:	711a      	strb	r2, [r3, #4]
 800b2a0:	e000      	b.n	800b2a4 <lwip_netconn_do_close+0xfc>
      return;
 800b2a2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	08019efc 	.word	0x08019efc
 800b2b0:	0801a2a0 	.word	0x0801a2a0
 800b2b4:	08019f40 	.word	0x08019f40
 800b2b8:	0801a2bc 	.word	0x0801a2bc
 800b2bc:	20009320 	.word	0x20009320

0800b2c0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d013      	beq.n	800b2f6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 ff26 	bl	800d12c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	2006      	movs	r0, #6
 800b2f2:	f001 f8c5 	bl	800c480 <memp_free>
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d108      	bne.n	800b324 <netbuf_data+0x24>
 800b312:	4b1b      	ldr	r3, [pc, #108]	@ (800b380 <netbuf_data+0x80>)
 800b314:	22c6      	movs	r2, #198	@ 0xc6
 800b316:	491b      	ldr	r1, [pc, #108]	@ (800b384 <netbuf_data+0x84>)
 800b318:	481b      	ldr	r0, [pc, #108]	@ (800b388 <netbuf_data+0x88>)
 800b31a:	f00d f9d1 	bl	80186c0 <iprintf>
 800b31e:	f06f 030f 	mvn.w	r3, #15
 800b322:	e029      	b.n	800b378 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d108      	bne.n	800b33c <netbuf_data+0x3c>
 800b32a:	4b15      	ldr	r3, [pc, #84]	@ (800b380 <netbuf_data+0x80>)
 800b32c:	22c7      	movs	r2, #199	@ 0xc7
 800b32e:	4917      	ldr	r1, [pc, #92]	@ (800b38c <netbuf_data+0x8c>)
 800b330:	4815      	ldr	r0, [pc, #84]	@ (800b388 <netbuf_data+0x88>)
 800b332:	f00d f9c5 	bl	80186c0 <iprintf>
 800b336:	f06f 030f 	mvn.w	r3, #15
 800b33a:	e01d      	b.n	800b378 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d108      	bne.n	800b354 <netbuf_data+0x54>
 800b342:	4b0f      	ldr	r3, [pc, #60]	@ (800b380 <netbuf_data+0x80>)
 800b344:	22c8      	movs	r2, #200	@ 0xc8
 800b346:	4912      	ldr	r1, [pc, #72]	@ (800b390 <netbuf_data+0x90>)
 800b348:	480f      	ldr	r0, [pc, #60]	@ (800b388 <netbuf_data+0x88>)
 800b34a:	f00d f9b9 	bl	80186c0 <iprintf>
 800b34e:	f06f 030f 	mvn.w	r3, #15
 800b352:	e011      	b.n	800b378 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <netbuf_data+0x62>
    return ERR_BUF;
 800b35c:	f06f 0301 	mvn.w	r3, #1
 800b360:	e00a      	b.n	800b378 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	895a      	ldrh	r2, [r3, #10]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	0801a454 	.word	0x0801a454
 800b384:	0801a55c 	.word	0x0801a55c
 800b388:	0801a4a4 	.word	0x0801a4a4
 800b38c:	0801a578 	.word	0x0801a578
 800b390:	0801a598 	.word	0x0801a598

0800b394 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b39e:	f007 ff41 	bl	8013224 <sys_timeouts_sleeptime>
 800b3a2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d10b      	bne.n	800b3c4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b3ac:	4813      	ldr	r0, [pc, #76]	@ (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3ae:	f00d f836 	bl	801841e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f00c feee 	bl	8018198 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b3bc:	480f      	ldr	r0, [pc, #60]	@ (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3be:	f00d f81f 	bl	8018400 <sys_mutex_lock>
    return;
 800b3c2:	e018      	b.n	800b3f6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b3ca:	f007 fef1 	bl	80131b0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3ce:	e7e6      	b.n	800b39e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b3d0:	480a      	ldr	r0, [pc, #40]	@ (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3d2:	f00d f824 	bl	801841e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f00c fedc 	bl	8018198 <sys_arch_mbox_fetch>
 800b3e0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b3e2:	4806      	ldr	r0, [pc, #24]	@ (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3e4:	f00d f80c 	bl	8018400 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d102      	bne.n	800b3f6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b3f0:	f007 fede 	bl	80131b0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3f4:	e7d3      	b.n	800b39e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20009320 	.word	0x20009320

0800b400 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b408:	4810      	ldr	r0, [pc, #64]	@ (800b44c <tcpip_thread+0x4c>)
 800b40a:	f00c fff9 	bl	8018400 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b40e:	4b10      	ldr	r3, [pc, #64]	@ (800b450 <tcpip_thread+0x50>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b416:	4b0e      	ldr	r3, [pc, #56]	@ (800b450 <tcpip_thread+0x50>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a0e      	ldr	r2, [pc, #56]	@ (800b454 <tcpip_thread+0x54>)
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b422:	f107 030c 	add.w	r3, r7, #12
 800b426:	4619      	mov	r1, r3
 800b428:	480b      	ldr	r0, [pc, #44]	@ (800b458 <tcpip_thread+0x58>)
 800b42a:	f7ff ffb3 	bl	800b394 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b434:	4b09      	ldr	r3, [pc, #36]	@ (800b45c <tcpip_thread+0x5c>)
 800b436:	2291      	movs	r2, #145	@ 0x91
 800b438:	4909      	ldr	r1, [pc, #36]	@ (800b460 <tcpip_thread+0x60>)
 800b43a:	480a      	ldr	r0, [pc, #40]	@ (800b464 <tcpip_thread+0x64>)
 800b43c:	f00d f940 	bl	80186c0 <iprintf>
      continue;
 800b440:	e003      	b.n	800b44a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f80f 	bl	800b468 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b44a:	e7ea      	b.n	800b422 <tcpip_thread+0x22>
 800b44c:	20009320 	.word	0x20009320
 800b450:	20009314 	.word	0x20009314
 800b454:	20009318 	.word	0x20009318
 800b458:	2000931c 	.word	0x2000931c
 800b45c:	0801a5ec 	.word	0x0801a5ec
 800b460:	0801a61c 	.word	0x0801a61c
 800b464:	0801a63c 	.word	0x0801a63c

0800b468 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d026      	beq.n	800b4c6 <tcpip_thread_handle_msg+0x5e>
 800b478:	2b02      	cmp	r3, #2
 800b47a:	dc2b      	bgt.n	800b4d4 <tcpip_thread_handle_msg+0x6c>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <tcpip_thread_handle_msg+0x1e>
 800b480:	2b01      	cmp	r3, #1
 800b482:	d015      	beq.n	800b4b0 <tcpip_thread_handle_msg+0x48>
 800b484:	e026      	b.n	800b4d4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6850      	ldr	r0, [r2, #4]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6892      	ldr	r2, [r2, #8]
 800b492:	4611      	mov	r1, r2
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 fe43 	bl	800d12c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	2009      	movs	r0, #9
 800b4aa:	f000 ffe9 	bl	800c480 <memp_free>
      break;
 800b4ae:	e018      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	6892      	ldr	r2, [r2, #8]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b4bc:	6879      	ldr	r1, [r7, #4]
 800b4be:	2008      	movs	r0, #8
 800b4c0:	f000 ffde 	bl	800c480 <memp_free>
      break;
 800b4c4:	e00d      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6892      	ldr	r2, [r2, #8]
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4798      	blx	r3
      break;
 800b4d2:	e006      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4d4:	4b05      	ldr	r3, [pc, #20]	@ (800b4ec <tcpip_thread_handle_msg+0x84>)
 800b4d6:	22cf      	movs	r2, #207	@ 0xcf
 800b4d8:	4905      	ldr	r1, [pc, #20]	@ (800b4f0 <tcpip_thread_handle_msg+0x88>)
 800b4da:	4806      	ldr	r0, [pc, #24]	@ (800b4f4 <tcpip_thread_handle_msg+0x8c>)
 800b4dc:	f00d f8f0 	bl	80186c0 <iprintf>
      break;
 800b4e0:	bf00      	nop
  }
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	0801a5ec 	.word	0x0801a5ec
 800b4f0:	0801a61c 	.word	0x0801a61c
 800b4f4:	0801a63c 	.word	0x0801a63c

0800b4f8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b504:	481a      	ldr	r0, [pc, #104]	@ (800b570 <tcpip_inpkt+0x78>)
 800b506:	f00c fea2 	bl	801824e <sys_mbox_valid>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d105      	bne.n	800b51c <tcpip_inpkt+0x24>
 800b510:	4b18      	ldr	r3, [pc, #96]	@ (800b574 <tcpip_inpkt+0x7c>)
 800b512:	22fc      	movs	r2, #252	@ 0xfc
 800b514:	4918      	ldr	r1, [pc, #96]	@ (800b578 <tcpip_inpkt+0x80>)
 800b516:	4819      	ldr	r0, [pc, #100]	@ (800b57c <tcpip_inpkt+0x84>)
 800b518:	f00d f8d2 	bl	80186c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b51c:	2009      	movs	r0, #9
 800b51e:	f000 ff5d 	bl	800c3dc <memp_malloc>
 800b522:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	e01a      	b.n	800b566 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b548:	6979      	ldr	r1, [r7, #20]
 800b54a:	4809      	ldr	r0, [pc, #36]	@ (800b570 <tcpip_inpkt+0x78>)
 800b54c:	f00c fe0a 	bl	8018164 <sys_mbox_trypost>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d006      	beq.n	800b564 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b556:	6979      	ldr	r1, [r7, #20]
 800b558:	2009      	movs	r0, #9
 800b55a:	f000 ff91 	bl	800c480 <memp_free>
    return ERR_MEM;
 800b55e:	f04f 33ff 	mov.w	r3, #4294967295
 800b562:	e000      	b.n	800b566 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b564:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	2000931c 	.word	0x2000931c
 800b574:	0801a5ec 	.word	0x0801a5ec
 800b578:	0801a664 	.word	0x0801a664
 800b57c:	0801a63c 	.word	0x0801a63c

0800b580 <tcpip_input>:
 *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b590:	f003 0318 	and.w	r3, r3, #24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d006      	beq.n	800b5a6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b598:	4a08      	ldr	r2, [pc, #32]	@ (800b5bc <tcpip_input+0x3c>)
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ffab 	bl	800b4f8 <tcpip_inpkt>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	e005      	b.n	800b5b2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b5a6:	4a06      	ldr	r2, [pc, #24]	@ (800b5c0 <tcpip_input+0x40>)
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ffa4 	bl	800b4f8 <tcpip_inpkt>
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	08017f25 	.word	0x08017f25
 800b5c0:	08016ced 	.word	0x08016ced

0800b5c4 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b5ce:	4814      	ldr	r0, [pc, #80]	@ (800b620 <tcpip_callback+0x5c>)
 800b5d0:	f00c fe3d 	bl	801824e <sys_mbox_valid>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <tcpip_callback+0x24>
 800b5da:	4b12      	ldr	r3, [pc, #72]	@ (800b624 <tcpip_callback+0x60>)
 800b5dc:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800b5e0:	4911      	ldr	r1, [pc, #68]	@ (800b628 <tcpip_callback+0x64>)
 800b5e2:	4812      	ldr	r0, [pc, #72]	@ (800b62c <tcpip_callback+0x68>)
 800b5e4:	f00d f86c 	bl	80186c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b5e8:	2008      	movs	r0, #8
 800b5ea:	f000 fef7 	bl	800c3dc <memp_malloc>
 800b5ee:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d102      	bne.n	800b5fc <tcpip_callback+0x38>
    return ERR_MEM;
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fa:	e00d      	b.n	800b618 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	4803      	ldr	r0, [pc, #12]	@ (800b620 <tcpip_callback+0x5c>)
 800b612:	f00c fd91 	bl	8018138 <sys_mbox_post>
  return ERR_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	2000931c 	.word	0x2000931c
 800b624:	0801a5ec 	.word	0x0801a5ec
 800b628:	0801a664 	.word	0x0801a664
 800b62c:	0801a63c 	.word	0x0801a63c

0800b630 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b63c:	4806      	ldr	r0, [pc, #24]	@ (800b658 <tcpip_send_msg_wait_sem+0x28>)
 800b63e:	f00c fedf 	bl	8018400 <sys_mutex_lock>
  fn(apimsg);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68b8      	ldr	r0, [r7, #8]
 800b646:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b648:	4803      	ldr	r0, [pc, #12]	@ (800b658 <tcpip_send_msg_wait_sem+0x28>)
 800b64a:	f00c fee8 	bl	801841e <sys_mutex_unlock>
  return ERR_OK;
 800b64e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20009320 	.word	0x20009320

0800b65c <tcpip_init>:
 *
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af02      	add	r7, sp, #8
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b666:	f000 fa32 	bl	800bace <lwip_init>

  tcpip_init_done = initfunc;
 800b66a:	4a17      	ldr	r2, [pc, #92]	@ (800b6c8 <tcpip_init+0x6c>)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b670:	4a16      	ldr	r2, [pc, #88]	@ (800b6cc <tcpip_init+0x70>)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b676:	2106      	movs	r1, #6
 800b678:	4815      	ldr	r0, [pc, #84]	@ (800b6d0 <tcpip_init+0x74>)
 800b67a:	f00c fd29 	bl	80180d0 <sys_mbox_new>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b684:	4b13      	ldr	r3, [pc, #76]	@ (800b6d4 <tcpip_init+0x78>)
 800b686:	f240 225f 	movw	r2, #607	@ 0x25f
 800b68a:	4913      	ldr	r1, [pc, #76]	@ (800b6d8 <tcpip_init+0x7c>)
 800b68c:	4813      	ldr	r0, [pc, #76]	@ (800b6dc <tcpip_init+0x80>)
 800b68e:	f00d f817 	bl	80186c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b692:	4813      	ldr	r0, [pc, #76]	@ (800b6e0 <tcpip_init+0x84>)
 800b694:	f00c fe98 	bl	80183c8 <sys_mutex_new>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d006      	beq.n	800b6ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b69e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d4 <tcpip_init+0x78>)
 800b6a0:	f240 2263 	movw	r2, #611	@ 0x263
 800b6a4:	490f      	ldr	r1, [pc, #60]	@ (800b6e4 <tcpip_init+0x88>)
 800b6a6:	480d      	ldr	r0, [pc, #52]	@ (800b6dc <tcpip_init+0x80>)
 800b6a8:	f00d f80a 	bl	80186c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	490c      	ldr	r1, [pc, #48]	@ (800b6e8 <tcpip_init+0x8c>)
 800b6b8:	480c      	ldr	r0, [pc, #48]	@ (800b6ec <tcpip_init+0x90>)
 800b6ba:	f00c febd 	bl	8018438 <sys_thread_new>
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20009314 	.word	0x20009314
 800b6cc:	20009318 	.word	0x20009318
 800b6d0:	2000931c 	.word	0x2000931c
 800b6d4:	0801a5ec 	.word	0x0801a5ec
 800b6d8:	0801a674 	.word	0x0801a674
 800b6dc:	0801a63c 	.word	0x0801a63c
 800b6e0:	20009320 	.word	0x20009320
 800b6e4:	0801a698 	.word	0x0801a698
 800b6e8:	0800b401 	.word	0x0800b401
 800b6ec:	0801a6bc 	.word	0x0801a6bc

0800b6f0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <fs_open+0x16>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <fs_open+0x1c>
    return ERR_ARG;
 800b706:	f06f 030f 	mvn.w	r3, #15
 800b70a:	e028      	b.n	800b75e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b70c:	4b16      	ldr	r3, [pc, #88]	@ (800b768 <fs_open+0x78>)
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	e020      	b.n	800b754 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	4619      	mov	r1, r3
 800b718:	6838      	ldr	r0, [r7, #0]
 800b71a:	f7f4 fd59 	bl	80001d0 <strcmp>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d114      	bne.n	800b74e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	7c1a      	ldrb	r2, [r3, #16]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	e007      	b.n	800b75e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1db      	bne.n	800b712 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b75a:	f06f 0305 	mvn.w	r3, #5
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	080266a0 	.word	0x080266a0

0800b76c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	b21a      	sxth	r2, r3
 800b790:	88fb      	ldrh	r3, [r7, #6]
 800b792:	0a1b      	lsrs	r3, r3, #8
 800b794:	b29b      	uxth	r3, r3
 800b796:	b21b      	sxth	r3, r3
 800b798:	4313      	orrs	r3, r2
 800b79a:	b21b      	sxth	r3, r3
 800b79c:	b29b      	uxth	r3, r3
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	061a      	lsls	r2, r3, #24
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	021b      	lsls	r3, r3, #8
 800b7ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	0a1b      	lsrs	r3, r3, #8
 800b7c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	0e1b      	lsrs	r3, r3, #24
 800b7ce:	4313      	orrs	r3, r2
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b089      	sub	sp, #36	@ 0x24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00d      	beq.n	800b81c <lwip_standard_chksum+0x40>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	dd0a      	ble.n	800b81c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	1c53      	adds	r3, r2, #1
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	f107 030e 	add.w	r3, r7, #14
 800b810:	3301      	adds	r3, #1
 800b812:	7812      	ldrb	r2, [r2, #0]
 800b814:	701a      	strb	r2, [r3, #0]
    len--;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	3b01      	subs	r3, #1
 800b81a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b820:	e00a      	b.n	800b838 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	1c9a      	adds	r2, r3, #2
 800b826:	61ba      	str	r2, [r7, #24]
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	4413      	add	r3, r2
 800b830:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3b02      	subs	r3, #2
 800b836:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	dcf1      	bgt.n	800b822 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd04      	ble.n	800b84e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b844:	f107 030e 	add.w	r3, r7, #14
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	7812      	ldrb	r2, [r2, #0]
 800b84c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b84e:	89fb      	ldrh	r3, [r7, #14]
 800b850:	461a      	mov	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	4413      	add	r3, r2
 800b856:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	0c1a      	lsrs	r2, r3, #16
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	b29b      	uxth	r3, r3
 800b860:	4413      	add	r3, r2
 800b862:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	0c1a      	lsrs	r2, r3, #16
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4413      	add	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d007      	beq.n	800b886 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	b2db      	uxtb	r3, r3
 800b882:	4313      	orrs	r3, r2
 800b884:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	b29b      	uxth	r3, r3
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3724      	adds	r7, #36	@ 0x24
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	607b      	str	r3, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	72fb      	strb	r3, [r7, #11]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e02b      	b.n	800b90a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	895b      	ldrh	r3, [r3, #10]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4610      	mov	r0, r2
 800b8be:	f7ff ff8d 	bl	800b7dc <lwip_standard_chksum>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	0c1a      	lsrs	r2, r3, #16
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	895b      	ldrh	r3, [r3, #10]
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bf0c      	ite	eq
 800b8ec:	2301      	moveq	r3, #1
 800b8ee:	2300      	movne	r3, #0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	0a1b      	lsrs	r3, r3, #8
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	4313      	orrs	r3, r2
 800b902:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1d0      	bne.n	800b8b2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	0a1b      	lsrs	r3, r3, #8
 800b920:	b2db      	uxtb	r3, r3
 800b922:	4313      	orrs	r3, r2
 800b924:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800b926:	7afb      	ldrb	r3, [r7, #11]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff ff28 	bl	800b780 <lwip_htons>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4413      	add	r3, r2
 800b938:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800b93a:	893b      	ldrh	r3, [r7, #8]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ff1f 	bl	800b780 <lwip_htons>
 800b942:	4603      	mov	r3, r0
 800b944:	461a      	mov	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	0c1a      	lsrs	r2, r3, #16
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	b29b      	uxth	r3, r3
 800b954:	4413      	add	r3, r2
 800b956:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	0c1a      	lsrs	r2, r3, #16
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	b29b      	uxth	r3, r3
 800b960:	4413      	add	r3, r2
 800b962:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	b29b      	uxth	r3, r3
 800b968:	43db      	mvns	r3, r3
 800b96a:	b29b      	uxth	r3, r3
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	607b      	str	r3, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	72fb      	strb	r3, [r7, #11]
 800b982:	4613      	mov	r3, r2
 800b984:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	0c1b      	lsrs	r3, r3, #16
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	4413      	add	r3, r2
 800b99a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	0c1a      	lsrs	r2, r3, #16
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	0c1a      	lsrs	r2, r3, #16
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800b9ce:	893a      	ldrh	r2, [r7, #8]
 800b9d0:	7af9      	ldrb	r1, [r7, #11]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff ff5e 	bl	800b896 <inet_cksum_pseudo_base>
 800b9da:	4603      	mov	r3, r0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af02      	add	r7, sp, #8
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	72fb      	strb	r3, [r7, #11]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800b9f6:	893a      	ldrh	r2, [r7, #8]
 800b9f8:	7af9      	ldrb	r1, [r7, #11]
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7ff ffb7 	bl	800b974 <inet_chksum_pseudo>
 800ba06:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ba1c:	887b      	ldrh	r3, [r7, #2]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff fedb 	bl	800b7dc <lwip_standard_chksum>
 800ba26:	4603      	mov	r3, r0
 800ba28:	43db      	mvns	r3, r3
 800ba2a:	b29b      	uxth	r3, r3
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	e02b      	b.n	800baa2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	895b      	ldrh	r3, [r3, #10]
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7ff fec1 	bl	800b7dc <lwip_standard_chksum>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	4413      	add	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	0c1a      	lsrs	r2, r3, #16
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4413      	add	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	895b      	ldrh	r3, [r3, #10]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00e      	beq.n	800ba9c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bf0c      	ite	eq
 800ba84:	2301      	moveq	r3, #1
 800ba86:	2300      	movne	r3, #0
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1d0      	bne.n	800ba4a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	43db      	mvns	r3, r3
 800bac4:	b29b      	uxth	r3, r3
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bad8:	f00c fc68 	bl	80183ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800badc:	f000 f8d4 	bl	800bc88 <mem_init>
  memp_init();
 800bae0:	f000 fc30 	bl	800c344 <memp_init>
  pbuf_init();
  netif_init();
 800bae4:	f000 fcf6 	bl	800c4d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bae8:	f007 fbd4 	bl	8013294 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800baec:	f001 fdc8 	bl	800d680 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800baf0:	f007 fb16 	bl	8013120 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb06:	4b05      	ldr	r3, [pc, #20]	@ (800bb1c <ptr_to_mem+0x20>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	4413      	add	r3, r2
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20011350 	.word	0x20011350

0800bb20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <mem_to_ptr+0x20>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	b29b      	uxth	r3, r3
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20011350 	.word	0x20011350

0800bb44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bb44:	b590      	push	{r4, r7, lr}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bb4c:	4b45      	ldr	r3, [pc, #276]	@ (800bc64 <plug_holes+0x120>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d206      	bcs.n	800bb64 <plug_holes+0x20>
 800bb56:	4b44      	ldr	r3, [pc, #272]	@ (800bc68 <plug_holes+0x124>)
 800bb58:	f240 12df 	movw	r2, #479	@ 0x1df
 800bb5c:	4943      	ldr	r1, [pc, #268]	@ (800bc6c <plug_holes+0x128>)
 800bb5e:	4844      	ldr	r0, [pc, #272]	@ (800bc70 <plug_holes+0x12c>)
 800bb60:	f00c fdae 	bl	80186c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bb64:	4b43      	ldr	r3, [pc, #268]	@ (800bc74 <plug_holes+0x130>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d306      	bcc.n	800bb7c <plug_holes+0x38>
 800bb6e:	4b3e      	ldr	r3, [pc, #248]	@ (800bc68 <plug_holes+0x124>)
 800bb70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bb74:	4940      	ldr	r1, [pc, #256]	@ (800bc78 <plug_holes+0x134>)
 800bb76:	483e      	ldr	r0, [pc, #248]	@ (800bc70 <plug_holes+0x12c>)
 800bb78:	f00c fda2 	bl	80186c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	791b      	ldrb	r3, [r3, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d006      	beq.n	800bb92 <plug_holes+0x4e>
 800bb84:	4b38      	ldr	r3, [pc, #224]	@ (800bc68 <plug_holes+0x124>)
 800bb86:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bb8a:	493c      	ldr	r1, [pc, #240]	@ (800bc7c <plug_holes+0x138>)
 800bb8c:	4838      	ldr	r0, [pc, #224]	@ (800bc70 <plug_holes+0x12c>)
 800bb8e:	f00c fd97 	bl	80186c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb9a:	d906      	bls.n	800bbaa <plug_holes+0x66>
 800bb9c:	4b32      	ldr	r3, [pc, #200]	@ (800bc68 <plug_holes+0x124>)
 800bb9e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800bba2:	4937      	ldr	r1, [pc, #220]	@ (800bc80 <plug_holes+0x13c>)
 800bba4:	4832      	ldr	r0, [pc, #200]	@ (800bc70 <plug_holes+0x12c>)
 800bba6:	f00c fd8b 	bl	80186c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff ffa4 	bl	800bafc <ptr_to_mem>
 800bbb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d024      	beq.n	800bc08 <plug_holes+0xc4>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	791b      	ldrb	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d120      	bne.n	800bc08 <plug_holes+0xc4>
 800bbc6:	4b2b      	ldr	r3, [pc, #172]	@ (800bc74 <plug_holes+0x130>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d01b      	beq.n	800bc08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bbd0:	4b2c      	ldr	r3, [pc, #176]	@ (800bc84 <plug_holes+0x140>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d102      	bne.n	800bbe0 <plug_holes+0x9c>
      lfree = mem;
 800bbda:	4a2a      	ldr	r2, [pc, #168]	@ (800bc84 <plug_holes+0x140>)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	881a      	ldrh	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbf0:	d00a      	beq.n	800bc08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff ff80 	bl	800bafc <ptr_to_mem>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff ff8e 	bl	800bb20 <mem_to_ptr>
 800bc04:	4603      	mov	r3, r0
 800bc06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	885b      	ldrh	r3, [r3, #2]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff ff75 	bl	800bafc <ptr_to_mem>
 800bc12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d01f      	beq.n	800bc5c <plug_holes+0x118>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	791b      	ldrb	r3, [r3, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d11b      	bne.n	800bc5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bc24:	4b17      	ldr	r3, [pc, #92]	@ (800bc84 <plug_holes+0x140>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d102      	bne.n	800bc34 <plug_holes+0xf0>
      lfree = pmem;
 800bc2e:	4a15      	ldr	r2, [pc, #84]	@ (800bc84 <plug_holes+0x140>)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	881a      	ldrh	r2, [r3, #0]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc44:	d00a      	beq.n	800bc5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff ff56 	bl	800bafc <ptr_to_mem>
 800bc50:	4604      	mov	r4, r0
 800bc52:	68b8      	ldr	r0, [r7, #8]
 800bc54:	f7ff ff64 	bl	800bb20 <mem_to_ptr>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc5c:	bf00      	nop
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd90      	pop	{r4, r7, pc}
 800bc64:	20011350 	.word	0x20011350
 800bc68:	0801a6d0 	.word	0x0801a6d0
 800bc6c:	0801a700 	.word	0x0801a700
 800bc70:	0801a718 	.word	0x0801a718
 800bc74:	20011354 	.word	0x20011354
 800bc78:	0801a740 	.word	0x0801a740
 800bc7c:	0801a75c 	.word	0x0801a75c
 800bc80:	0801a778 	.word	0x0801a778
 800bc84:	2001135c 	.word	0x2001135c

0800bc88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bc8e:	4b1f      	ldr	r3, [pc, #124]	@ (800bd0c <mem_init+0x84>)
 800bc90:	3303      	adds	r3, #3
 800bc92:	f023 0303 	bic.w	r3, r3, #3
 800bc96:	461a      	mov	r2, r3
 800bc98:	4b1d      	ldr	r3, [pc, #116]	@ (800bd10 <mem_init+0x88>)
 800bc9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	@ (800bd10 <mem_init+0x88>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bca8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bcb6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bcba:	f7ff ff1f 	bl	800bafc <ptr_to_mem>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4a14      	ldr	r2, [pc, #80]	@ (800bd14 <mem_init+0x8c>)
 800bcc2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bcc4:	4b13      	ldr	r3, [pc, #76]	@ (800bd14 <mem_init+0x8c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bccc:	4b11      	ldr	r3, [pc, #68]	@ (800bd14 <mem_init+0x8c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bcd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	@ (800bd14 <mem_init+0x8c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bcde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bce0:	4b0b      	ldr	r3, [pc, #44]	@ (800bd10 <mem_init+0x88>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a0c      	ldr	r2, [pc, #48]	@ (800bd18 <mem_init+0x90>)
 800bce6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bce8:	480c      	ldr	r0, [pc, #48]	@ (800bd1c <mem_init+0x94>)
 800bcea:	f00c fb6d 	bl	80183c8 <sys_mutex_new>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d006      	beq.n	800bd02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bcf4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <mem_init+0x98>)
 800bcf6:	f240 221f 	movw	r2, #543	@ 0x21f
 800bcfa:	490a      	ldr	r1, [pc, #40]	@ (800bd24 <mem_init+0x9c>)
 800bcfc:	480a      	ldr	r0, [pc, #40]	@ (800bd28 <mem_init+0xa0>)
 800bcfe:	f00c fcdf 	bl	80186c0 <iprintf>
  }
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2000933c 	.word	0x2000933c
 800bd10:	20011350 	.word	0x20011350
 800bd14:	20011354 	.word	0x20011354
 800bd18:	2001135c 	.word	0x2001135c
 800bd1c:	20011358 	.word	0x20011358
 800bd20:	0801a6d0 	.word	0x0801a6d0
 800bd24:	0801a7a4 	.word	0x0801a7a4
 800bd28:	0801a718 	.word	0x0801a718

0800bd2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff fef3 	bl	800bb20 <mem_to_ptr>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff feda 	bl	800bafc <ptr_to_mem>
 800bd48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff fed4 	bl	800bafc <ptr_to_mem>
 800bd54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd5e:	d818      	bhi.n	800bd92 <mem_link_valid+0x66>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	885b      	ldrh	r3, [r3, #2]
 800bd64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd68:	d813      	bhi.n	800bd92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd6e:	8afa      	ldrh	r2, [r7, #22]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d004      	beq.n	800bd7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	8afa      	ldrh	r2, [r7, #22]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d109      	bne.n	800bd92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd7e:	4b08      	ldr	r3, [pc, #32]	@ (800bda0 <mem_link_valid+0x74>)
 800bd80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d006      	beq.n	800bd96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	8afa      	ldrh	r2, [r7, #22]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d001      	beq.n	800bd96 <mem_link_valid+0x6a>
    return 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e000      	b.n	800bd98 <mem_link_valid+0x6c>
  }
  return 1;
 800bd96:	2301      	movs	r3, #1
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20011354 	.word	0x20011354

0800bda4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d070      	beq.n	800be94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f003 0303 	and.w	r3, r3, #3
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00d      	beq.n	800bdd8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bdbc:	4b37      	ldr	r3, [pc, #220]	@ (800be9c <mem_free+0xf8>)
 800bdbe:	f240 2273 	movw	r2, #627	@ 0x273
 800bdc2:	4937      	ldr	r1, [pc, #220]	@ (800bea0 <mem_free+0xfc>)
 800bdc4:	4837      	ldr	r0, [pc, #220]	@ (800bea4 <mem_free+0x100>)
 800bdc6:	f00c fc7b 	bl	80186c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdca:	f00c fb5b 	bl	8018484 <sys_arch_protect>
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f00c fb65 	bl	80184a0 <sys_arch_unprotect>
    return;
 800bdd6:	e05e      	b.n	800be96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3b08      	subs	r3, #8
 800bddc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bdde:	4b32      	ldr	r3, [pc, #200]	@ (800bea8 <mem_free+0x104>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	69fa      	ldr	r2, [r7, #28]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d306      	bcc.n	800bdf6 <mem_free+0x52>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f103 020c 	add.w	r2, r3, #12
 800bdee:	4b2f      	ldr	r3, [pc, #188]	@ (800beac <mem_free+0x108>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d90d      	bls.n	800be12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bdf6:	4b29      	ldr	r3, [pc, #164]	@ (800be9c <mem_free+0xf8>)
 800bdf8:	f240 227f 	movw	r2, #639	@ 0x27f
 800bdfc:	492c      	ldr	r1, [pc, #176]	@ (800beb0 <mem_free+0x10c>)
 800bdfe:	4829      	ldr	r0, [pc, #164]	@ (800bea4 <mem_free+0x100>)
 800be00:	f00c fc5e 	bl	80186c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be04:	f00c fb3e 	bl	8018484 <sys_arch_protect>
 800be08:	6138      	str	r0, [r7, #16]
 800be0a:	6938      	ldr	r0, [r7, #16]
 800be0c:	f00c fb48 	bl	80184a0 <sys_arch_unprotect>
    return;
 800be10:	e041      	b.n	800be96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be12:	4828      	ldr	r0, [pc, #160]	@ (800beb4 <mem_free+0x110>)
 800be14:	f00c faf4 	bl	8018400 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d110      	bne.n	800be42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800be20:	4b1e      	ldr	r3, [pc, #120]	@ (800be9c <mem_free+0xf8>)
 800be22:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800be26:	4924      	ldr	r1, [pc, #144]	@ (800beb8 <mem_free+0x114>)
 800be28:	481e      	ldr	r0, [pc, #120]	@ (800bea4 <mem_free+0x100>)
 800be2a:	f00c fc49 	bl	80186c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be2e:	4821      	ldr	r0, [pc, #132]	@ (800beb4 <mem_free+0x110>)
 800be30:	f00c faf5 	bl	801841e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be34:	f00c fb26 	bl	8018484 <sys_arch_protect>
 800be38:	6178      	str	r0, [r7, #20]
 800be3a:	6978      	ldr	r0, [r7, #20]
 800be3c:	f00c fb30 	bl	80184a0 <sys_arch_unprotect>
    return;
 800be40:	e029      	b.n	800be96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800be42:	69f8      	ldr	r0, [r7, #28]
 800be44:	f7ff ff72 	bl	800bd2c <mem_link_valid>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d110      	bne.n	800be70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be4e:	4b13      	ldr	r3, [pc, #76]	@ (800be9c <mem_free+0xf8>)
 800be50:	f240 2295 	movw	r2, #661	@ 0x295
 800be54:	4919      	ldr	r1, [pc, #100]	@ (800bebc <mem_free+0x118>)
 800be56:	4813      	ldr	r0, [pc, #76]	@ (800bea4 <mem_free+0x100>)
 800be58:	f00c fc32 	bl	80186c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be5c:	4815      	ldr	r0, [pc, #84]	@ (800beb4 <mem_free+0x110>)
 800be5e:	f00c fade 	bl	801841e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be62:	f00c fb0f 	bl	8018484 <sys_arch_protect>
 800be66:	61b8      	str	r0, [r7, #24]
 800be68:	69b8      	ldr	r0, [r7, #24]
 800be6a:	f00c fb19 	bl	80184a0 <sys_arch_unprotect>
    return;
 800be6e:	e012      	b.n	800be96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	2200      	movs	r2, #0
 800be74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800be76:	4b12      	ldr	r3, [pc, #72]	@ (800bec0 <mem_free+0x11c>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d202      	bcs.n	800be86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800be80:	4a0f      	ldr	r2, [pc, #60]	@ (800bec0 <mem_free+0x11c>)
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800be86:	69f8      	ldr	r0, [r7, #28]
 800be88:	f7ff fe5c 	bl	800bb44 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be8c:	4809      	ldr	r0, [pc, #36]	@ (800beb4 <mem_free+0x110>)
 800be8e:	f00c fac6 	bl	801841e <sys_mutex_unlock>
 800be92:	e000      	b.n	800be96 <mem_free+0xf2>
    return;
 800be94:	bf00      	nop
}
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	0801a6d0 	.word	0x0801a6d0
 800bea0:	0801a7c0 	.word	0x0801a7c0
 800bea4:	0801a718 	.word	0x0801a718
 800bea8:	20011350 	.word	0x20011350
 800beac:	20011354 	.word	0x20011354
 800beb0:	0801a7e4 	.word	0x0801a7e4
 800beb4:	20011358 	.word	0x20011358
 800beb8:	0801a800 	.word	0x0801a800
 800bebc:	0801a828 	.word	0x0801a828
 800bec0:	2001135c 	.word	0x2001135c

0800bec4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bed0:	887b      	ldrh	r3, [r7, #2]
 800bed2:	3303      	adds	r3, #3
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	f023 0303 	bic.w	r3, r3, #3
 800beda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bedc:	8bfb      	ldrh	r3, [r7, #30]
 800bede:	2b0b      	cmp	r3, #11
 800bee0:	d801      	bhi.n	800bee6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bee2:	230c      	movs	r3, #12
 800bee4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bee6:	8bfb      	ldrh	r3, [r7, #30]
 800bee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800beec:	d803      	bhi.n	800bef6 <mem_trim+0x32>
 800beee:	8bfa      	ldrh	r2, [r7, #30]
 800bef0:	887b      	ldrh	r3, [r7, #2]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d201      	bcs.n	800befa <mem_trim+0x36>
    return NULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e0d8      	b.n	800c0ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800befa:	4b6e      	ldr	r3, [pc, #440]	@ (800c0b4 <mem_trim+0x1f0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d304      	bcc.n	800bf0e <mem_trim+0x4a>
 800bf04:	4b6c      	ldr	r3, [pc, #432]	@ (800c0b8 <mem_trim+0x1f4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d306      	bcc.n	800bf1c <mem_trim+0x58>
 800bf0e:	4b6b      	ldr	r3, [pc, #428]	@ (800c0bc <mem_trim+0x1f8>)
 800bf10:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bf14:	496a      	ldr	r1, [pc, #424]	@ (800c0c0 <mem_trim+0x1fc>)
 800bf16:	486b      	ldr	r0, [pc, #428]	@ (800c0c4 <mem_trim+0x200>)
 800bf18:	f00c fbd2 	bl	80186c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf1c:	4b65      	ldr	r3, [pc, #404]	@ (800c0b4 <mem_trim+0x1f0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d304      	bcc.n	800bf30 <mem_trim+0x6c>
 800bf26:	4b64      	ldr	r3, [pc, #400]	@ (800c0b8 <mem_trim+0x1f4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d307      	bcc.n	800bf40 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf30:	f00c faa8 	bl	8018484 <sys_arch_protect>
 800bf34:	60b8      	str	r0, [r7, #8]
 800bf36:	68b8      	ldr	r0, [r7, #8]
 800bf38:	f00c fab2 	bl	80184a0 <sys_arch_unprotect>
    return rmem;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	e0b5      	b.n	800c0ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3b08      	subs	r3, #8
 800bf44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bf46:	69b8      	ldr	r0, [r7, #24]
 800bf48:	f7ff fdea 	bl	800bb20 <mem_to_ptr>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	881a      	ldrh	r2, [r3, #0]
 800bf54:	8afb      	ldrh	r3, [r7, #22]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	3b08      	subs	r3, #8
 800bf5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf5e:	8bfa      	ldrh	r2, [r7, #30]
 800bf60:	8abb      	ldrh	r3, [r7, #20]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d906      	bls.n	800bf74 <mem_trim+0xb0>
 800bf66:	4b55      	ldr	r3, [pc, #340]	@ (800c0bc <mem_trim+0x1f8>)
 800bf68:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bf6c:	4956      	ldr	r1, [pc, #344]	@ (800c0c8 <mem_trim+0x204>)
 800bf6e:	4855      	ldr	r0, [pc, #340]	@ (800c0c4 <mem_trim+0x200>)
 800bf70:	f00c fba6 	bl	80186c0 <iprintf>
  if (newsize > size) {
 800bf74:	8bfa      	ldrh	r2, [r7, #30]
 800bf76:	8abb      	ldrh	r3, [r7, #20]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d901      	bls.n	800bf80 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e095      	b.n	800c0ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bf80:	8bfa      	ldrh	r2, [r7, #30]
 800bf82:	8abb      	ldrh	r3, [r7, #20]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d101      	bne.n	800bf8c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	e08f      	b.n	800c0ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf8c:	484f      	ldr	r0, [pc, #316]	@ (800c0cc <mem_trim+0x208>)
 800bf8e:	f00c fa37 	bl	8018400 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fdb0 	bl	800bafc <ptr_to_mem>
 800bf9c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d13f      	bne.n	800c026 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	881b      	ldrh	r3, [r3, #0]
 800bfaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfae:	d106      	bne.n	800bfbe <mem_trim+0xfa>
 800bfb0:	4b42      	ldr	r3, [pc, #264]	@ (800c0bc <mem_trim+0x1f8>)
 800bfb2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bfb6:	4946      	ldr	r1, [pc, #280]	@ (800c0d0 <mem_trim+0x20c>)
 800bfb8:	4842      	ldr	r0, [pc, #264]	@ (800c0c4 <mem_trim+0x200>)
 800bfba:	f00c fb81 	bl	80186c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bfc4:	8afa      	ldrh	r2, [r7, #22]
 800bfc6:	8bfb      	ldrh	r3, [r7, #30]
 800bfc8:	4413      	add	r3, r2
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3308      	adds	r3, #8
 800bfce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bfd0:	4b40      	ldr	r3, [pc, #256]	@ (800c0d4 <mem_trim+0x210>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d106      	bne.n	800bfe8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bfda:	89fb      	ldrh	r3, [r7, #14]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff fd8d 	bl	800bafc <ptr_to_mem>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4a3b      	ldr	r2, [pc, #236]	@ (800c0d4 <mem_trim+0x210>)
 800bfe6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff fd86 	bl	800bafc <ptr_to_mem>
 800bff0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2200      	movs	r2, #0
 800bff6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	89ba      	ldrh	r2, [r7, #12]
 800bffc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	8afa      	ldrh	r2, [r7, #22]
 800c002:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	89fa      	ldrh	r2, [r7, #14]
 800c008:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c012:	d047      	beq.n	800c0a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff fd6f 	bl	800bafc <ptr_to_mem>
 800c01e:	4602      	mov	r2, r0
 800c020:	89fb      	ldrh	r3, [r7, #14]
 800c022:	8053      	strh	r3, [r2, #2]
 800c024:	e03e      	b.n	800c0a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c026:	8bfb      	ldrh	r3, [r7, #30]
 800c028:	f103 0214 	add.w	r2, r3, #20
 800c02c:	8abb      	ldrh	r3, [r7, #20]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d838      	bhi.n	800c0a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c032:	8afa      	ldrh	r2, [r7, #22]
 800c034:	8bfb      	ldrh	r3, [r7, #30]
 800c036:	4413      	add	r3, r2
 800c038:	b29b      	uxth	r3, r3
 800c03a:	3308      	adds	r3, #8
 800c03c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c046:	d106      	bne.n	800c056 <mem_trim+0x192>
 800c048:	4b1c      	ldr	r3, [pc, #112]	@ (800c0bc <mem_trim+0x1f8>)
 800c04a:	f240 3216 	movw	r2, #790	@ 0x316
 800c04e:	4920      	ldr	r1, [pc, #128]	@ (800c0d0 <mem_trim+0x20c>)
 800c050:	481c      	ldr	r0, [pc, #112]	@ (800c0c4 <mem_trim+0x200>)
 800c052:	f00c fb35 	bl	80186c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c056:	89fb      	ldrh	r3, [r7, #14]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fd4f 	bl	800bafc <ptr_to_mem>
 800c05e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c060:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d4 <mem_trim+0x210>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	d202      	bcs.n	800c070 <mem_trim+0x1ac>
      lfree = mem2;
 800c06a:	4a1a      	ldr	r2, [pc, #104]	@ (800c0d4 <mem_trim+0x210>)
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2200      	movs	r2, #0
 800c074:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	881a      	ldrh	r2, [r3, #0]
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	8afa      	ldrh	r2, [r7, #22]
 800c082:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	89fa      	ldrh	r2, [r7, #14]
 800c088:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c092:	d007      	beq.n	800c0a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fd2f 	bl	800bafc <ptr_to_mem>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0a4:	4809      	ldr	r0, [pc, #36]	@ (800c0cc <mem_trim+0x208>)
 800c0a6:	f00c f9ba 	bl	801841e <sys_mutex_unlock>
  return rmem;
 800c0aa:	687b      	ldr	r3, [r7, #4]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3720      	adds	r7, #32
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20011350 	.word	0x20011350
 800c0b8:	20011354 	.word	0x20011354
 800c0bc:	0801a6d0 	.word	0x0801a6d0
 800c0c0:	0801a85c 	.word	0x0801a85c
 800c0c4:	0801a718 	.word	0x0801a718
 800c0c8:	0801a874 	.word	0x0801a874
 800c0cc:	20011358 	.word	0x20011358
 800c0d0:	0801a894 	.word	0x0801a894
 800c0d4:	2001135c 	.word	0x2001135c

0800c0d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b088      	sub	sp, #32
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c0e2:	88fb      	ldrh	r3, [r7, #6]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <mem_malloc+0x14>
    return NULL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e0e2      	b.n	800c2b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c0ec:	88fb      	ldrh	r3, [r7, #6]
 800c0ee:	3303      	adds	r3, #3
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c0f8:	8bbb      	ldrh	r3, [r7, #28]
 800c0fa:	2b0b      	cmp	r3, #11
 800c0fc:	d801      	bhi.n	800c102 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c0fe:	230c      	movs	r3, #12
 800c100:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c102:	8bbb      	ldrh	r3, [r7, #28]
 800c104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c108:	d803      	bhi.n	800c112 <mem_malloc+0x3a>
 800c10a:	8bba      	ldrh	r2, [r7, #28]
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d201      	bcs.n	800c116 <mem_malloc+0x3e>
    return NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	e0cd      	b.n	800c2b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c116:	4869      	ldr	r0, [pc, #420]	@ (800c2bc <mem_malloc+0x1e4>)
 800c118:	f00c f972 	bl	8018400 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c11c:	4b68      	ldr	r3, [pc, #416]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fcfd 	bl	800bb20 <mem_to_ptr>
 800c126:	4603      	mov	r3, r0
 800c128:	83fb      	strh	r3, [r7, #30]
 800c12a:	e0b7      	b.n	800c29c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c12c:	8bfb      	ldrh	r3, [r7, #30]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fce4 	bl	800bafc <ptr_to_mem>
 800c134:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	791b      	ldrb	r3, [r3, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f040 80a7 	bne.w	800c28e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	461a      	mov	r2, r3
 800c146:	8bfb      	ldrh	r3, [r7, #30]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	f1a3 0208 	sub.w	r2, r3, #8
 800c14e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c150:	429a      	cmp	r2, r3
 800c152:	f0c0 809c 	bcc.w	800c28e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	8bfb      	ldrh	r3, [r7, #30]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	f1a3 0208 	sub.w	r2, r3, #8
 800c164:	8bbb      	ldrh	r3, [r7, #28]
 800c166:	3314      	adds	r3, #20
 800c168:	429a      	cmp	r2, r3
 800c16a:	d333      	bcc.n	800c1d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c16c:	8bfa      	ldrh	r2, [r7, #30]
 800c16e:	8bbb      	ldrh	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	b29b      	uxth	r3, r3
 800c174:	3308      	adds	r3, #8
 800c176:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c178:	8a7b      	ldrh	r3, [r7, #18]
 800c17a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c17e:	d106      	bne.n	800c18e <mem_malloc+0xb6>
 800c180:	4b50      	ldr	r3, [pc, #320]	@ (800c2c4 <mem_malloc+0x1ec>)
 800c182:	f240 3287 	movw	r2, #903	@ 0x387
 800c186:	4950      	ldr	r1, [pc, #320]	@ (800c2c8 <mem_malloc+0x1f0>)
 800c188:	4850      	ldr	r0, [pc, #320]	@ (800c2cc <mem_malloc+0x1f4>)
 800c18a:	f00c fa99 	bl	80186c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c18e:	8a7b      	ldrh	r3, [r7, #18]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff fcb3 	bl	800bafc <ptr_to_mem>
 800c196:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	881a      	ldrh	r2, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8bfa      	ldrh	r2, [r7, #30]
 800c1aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	8a7a      	ldrh	r2, [r7, #18]
 800c1b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1c0:	d00b      	beq.n	800c1da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff fc98 	bl	800bafc <ptr_to_mem>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	8a7b      	ldrh	r3, [r7, #18]
 800c1d0:	8053      	strh	r3, [r2, #2]
 800c1d2:	e002      	b.n	800c1da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c1da:	4b39      	ldr	r3, [pc, #228]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d127      	bne.n	800c234 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c1e4:	4b36      	ldr	r3, [pc, #216]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c1ea:	e005      	b.n	800c1f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff fc83 	bl	800bafc <ptr_to_mem>
 800c1f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	791b      	ldrb	r3, [r3, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d004      	beq.n	800c20a <mem_malloc+0x132>
 800c200:	4b33      	ldr	r3, [pc, #204]	@ (800c2d0 <mem_malloc+0x1f8>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	429a      	cmp	r2, r3
 800c208:	d1f0      	bne.n	800c1ec <mem_malloc+0x114>
          }
          lfree = cur;
 800c20a:	4a2d      	ldr	r2, [pc, #180]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c210:	4b2b      	ldr	r3, [pc, #172]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d0 <mem_malloc+0x1f8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d00b      	beq.n	800c234 <mem_malloc+0x15c>
 800c21c:	4b28      	ldr	r3, [pc, #160]	@ (800c2c0 <mem_malloc+0x1e8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	791b      	ldrb	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <mem_malloc+0x15c>
 800c226:	4b27      	ldr	r3, [pc, #156]	@ (800c2c4 <mem_malloc+0x1ec>)
 800c228:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c22c:	4929      	ldr	r1, [pc, #164]	@ (800c2d4 <mem_malloc+0x1fc>)
 800c22e:	4827      	ldr	r0, [pc, #156]	@ (800c2cc <mem_malloc+0x1f4>)
 800c230:	f00c fa46 	bl	80186c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c234:	4821      	ldr	r0, [pc, #132]	@ (800c2bc <mem_malloc+0x1e4>)
 800c236:	f00c f8f2 	bl	801841e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c23a:	8bba      	ldrh	r2, [r7, #28]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	4413      	add	r3, r2
 800c240:	3308      	adds	r3, #8
 800c242:	4a23      	ldr	r2, [pc, #140]	@ (800c2d0 <mem_malloc+0x1f8>)
 800c244:	6812      	ldr	r2, [r2, #0]
 800c246:	4293      	cmp	r3, r2
 800c248:	d906      	bls.n	800c258 <mem_malloc+0x180>
 800c24a:	4b1e      	ldr	r3, [pc, #120]	@ (800c2c4 <mem_malloc+0x1ec>)
 800c24c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c250:	4921      	ldr	r1, [pc, #132]	@ (800c2d8 <mem_malloc+0x200>)
 800c252:	481e      	ldr	r0, [pc, #120]	@ (800c2cc <mem_malloc+0x1f4>)
 800c254:	f00c fa34 	bl	80186c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d006      	beq.n	800c270 <mem_malloc+0x198>
 800c262:	4b18      	ldr	r3, [pc, #96]	@ (800c2c4 <mem_malloc+0x1ec>)
 800c264:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c268:	491c      	ldr	r1, [pc, #112]	@ (800c2dc <mem_malloc+0x204>)
 800c26a:	4818      	ldr	r0, [pc, #96]	@ (800c2cc <mem_malloc+0x1f4>)
 800c26c:	f00c fa28 	bl	80186c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <mem_malloc+0x1b0>
 800c27a:	4b12      	ldr	r3, [pc, #72]	@ (800c2c4 <mem_malloc+0x1ec>)
 800c27c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c280:	4917      	ldr	r1, [pc, #92]	@ (800c2e0 <mem_malloc+0x208>)
 800c282:	4812      	ldr	r0, [pc, #72]	@ (800c2cc <mem_malloc+0x1f4>)
 800c284:	f00c fa1c 	bl	80186c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	3308      	adds	r3, #8
 800c28c:	e011      	b.n	800c2b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c28e:	8bfb      	ldrh	r3, [r7, #30]
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fc33 	bl	800bafc <ptr_to_mem>
 800c296:	4603      	mov	r3, r0
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c29c:	8bfa      	ldrh	r2, [r7, #30]
 800c29e:	8bbb      	ldrh	r3, [r7, #28]
 800c2a0:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	f4ff af41 	bcc.w	800c12c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c2aa:	4804      	ldr	r0, [pc, #16]	@ (800c2bc <mem_malloc+0x1e4>)
 800c2ac:	f00c f8b7 	bl	801841e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3720      	adds	r7, #32
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20011358 	.word	0x20011358
 800c2c0:	2001135c 	.word	0x2001135c
 800c2c4:	0801a6d0 	.word	0x0801a6d0
 800c2c8:	0801a894 	.word	0x0801a894
 800c2cc:	0801a718 	.word	0x0801a718
 800c2d0:	20011354 	.word	0x20011354
 800c2d4:	0801a8a8 	.word	0x0801a8a8
 800c2d8:	0801a8c4 	.word	0x0801a8c4
 800c2dc:	0801a8f4 	.word	0x0801a8f4
 800c2e0:	0801a924 	.word	0x0801a924

0800c2e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	3303      	adds	r3, #3
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e011      	b.n	800c32a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	461a      	mov	r2, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4413      	add	r3, r2
 800c322:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	461a      	mov	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4293      	cmp	r3, r2
 800c334:	dbe7      	blt.n	800c306 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c34a:	2300      	movs	r3, #0
 800c34c:	80fb      	strh	r3, [r7, #6]
 800c34e:	e009      	b.n	800c364 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c350:	88fb      	ldrh	r3, [r7, #6]
 800c352:	4a08      	ldr	r2, [pc, #32]	@ (800c374 <memp_init+0x30>)
 800c354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ffc3 	bl	800c2e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c35e:	88fb      	ldrh	r3, [r7, #6]
 800c360:	3301      	adds	r3, #1
 800c362:	80fb      	strh	r3, [r7, #6]
 800c364:	88fb      	ldrh	r3, [r7, #6]
 800c366:	2b0c      	cmp	r3, #12
 800c368:	d9f2      	bls.n	800c350 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	08026750 	.word	0x08026750

0800c378 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c380:	f00c f880 	bl	8018484 <sys_arch_protect>
 800c384:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d015      	beq.n	800c3c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	6812      	ldr	r2, [r2, #0]
 800c39c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d006      	beq.n	800c3b6 <do_memp_malloc_pool+0x3e>
 800c3a8:	4b09      	ldr	r3, [pc, #36]	@ (800c3d0 <do_memp_malloc_pool+0x58>)
 800c3aa:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c3ae:	4909      	ldr	r1, [pc, #36]	@ (800c3d4 <do_memp_malloc_pool+0x5c>)
 800c3b0:	4809      	ldr	r0, [pc, #36]	@ (800c3d8 <do_memp_malloc_pool+0x60>)
 800c3b2:	f00c f985 	bl	80186c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f00c f872 	bl	80184a0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	e003      	b.n	800c3c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f00c f86d 	bl	80184a0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	0801a948 	.word	0x0801a948
 800c3d4:	0801a978 	.word	0x0801a978
 800c3d8:	0801a99c 	.word	0x0801a99c

0800c3dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	2b0c      	cmp	r3, #12
 800c3ea:	d908      	bls.n	800c3fe <memp_malloc+0x22>
 800c3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c418 <memp_malloc+0x3c>)
 800c3ee:	f240 1257 	movw	r2, #343	@ 0x157
 800c3f2:	490a      	ldr	r1, [pc, #40]	@ (800c41c <memp_malloc+0x40>)
 800c3f4:	480a      	ldr	r0, [pc, #40]	@ (800c420 <memp_malloc+0x44>)
 800c3f6:	f00c f963 	bl	80186c0 <iprintf>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	e008      	b.n	800c410 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	4a08      	ldr	r2, [pc, #32]	@ (800c424 <memp_malloc+0x48>)
 800c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff ffb6 	bl	800c378 <do_memp_malloc_pool>
 800c40c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c40e:	68fb      	ldr	r3, [r7, #12]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	0801a948 	.word	0x0801a948
 800c41c:	0801a9d8 	.word	0x0801a9d8
 800c420:	0801a99c 	.word	0x0801a99c
 800c424:	08026750 	.word	0x08026750

0800c428 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <do_memp_free_pool+0x22>
 800c43c:	4b0d      	ldr	r3, [pc, #52]	@ (800c474 <do_memp_free_pool+0x4c>)
 800c43e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c442:	490d      	ldr	r1, [pc, #52]	@ (800c478 <do_memp_free_pool+0x50>)
 800c444:	480d      	ldr	r0, [pc, #52]	@ (800c47c <do_memp_free_pool+0x54>)
 800c446:	f00c f93b 	bl	80186c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c44e:	f00c f819 	bl	8018484 <sys_arch_protect>
 800c452:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c466:	68b8      	ldr	r0, [r7, #8]
 800c468:	f00c f81a 	bl	80184a0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c46c:	bf00      	nop
 800c46e:	3710      	adds	r7, #16
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	0801a948 	.word	0x0801a948
 800c478:	0801a9f8 	.word	0x0801a9f8
 800c47c:	0801a99c 	.word	0x0801a99c

0800c480 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	2b0c      	cmp	r3, #12
 800c490:	d907      	bls.n	800c4a2 <memp_free+0x22>
 800c492:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c4 <memp_free+0x44>)
 800c494:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c498:	490b      	ldr	r1, [pc, #44]	@ (800c4c8 <memp_free+0x48>)
 800c49a:	480c      	ldr	r0, [pc, #48]	@ (800c4cc <memp_free+0x4c>)
 800c49c:	f00c f910 	bl	80186c0 <iprintf>
 800c4a0:	e00c      	b.n	800c4bc <memp_free+0x3c>

  if (mem == NULL) {
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	4a09      	ldr	r2, [pc, #36]	@ (800c4d0 <memp_free+0x50>)
 800c4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff ffb8 	bl	800c428 <do_memp_free_pool>
 800c4b8:	e000      	b.n	800c4bc <memp_free+0x3c>
    return;
 800c4ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	0801a948 	.word	0x0801a948
 800c4c8:	0801aa18 	.word	0x0801aa18
 800c4cc:	0801a99c 	.word	0x0801a99c
 800c4d0:	08026750 	.word	0x08026750

0800c4d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c4d8:	bf00      	nop
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
	...

0800c4e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d108      	bne.n	800c50a <netif_add+0x26>
 800c4f8:	4b5b      	ldr	r3, [pc, #364]	@ (800c668 <netif_add+0x184>)
 800c4fa:	f240 1227 	movw	r2, #295	@ 0x127
 800c4fe:	495b      	ldr	r1, [pc, #364]	@ (800c66c <netif_add+0x188>)
 800c500:	485b      	ldr	r0, [pc, #364]	@ (800c670 <netif_add+0x18c>)
 800c502:	f00c f8dd 	bl	80186c0 <iprintf>
 800c506:	2300      	movs	r3, #0
 800c508:	e0a9      	b.n	800c65e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d108      	bne.n	800c522 <netif_add+0x3e>
 800c510:	4b55      	ldr	r3, [pc, #340]	@ (800c668 <netif_add+0x184>)
 800c512:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c516:	4957      	ldr	r1, [pc, #348]	@ (800c674 <netif_add+0x190>)
 800c518:	4855      	ldr	r0, [pc, #340]	@ (800c670 <netif_add+0x18c>)
 800c51a:	f00c f8d1 	bl	80186c0 <iprintf>
 800c51e:	2300      	movs	r3, #0
 800c520:	e09d      	b.n	800c65e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c528:	4b53      	ldr	r3, [pc, #332]	@ (800c678 <netif_add+0x194>)
 800c52a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c532:	4b51      	ldr	r3, [pc, #324]	@ (800c678 <netif_add+0x194>)
 800c534:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c53c:	4b4e      	ldr	r3, [pc, #312]	@ (800c678 <netif_add+0x194>)
 800c53e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4a49      	ldr	r2, [pc, #292]	@ (800c67c <netif_add+0x198>)
 800c556:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3324      	adds	r3, #36	@ 0x24
 800c56a:	2204      	movs	r2, #4
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f00c f945 	bl	80187fe <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a3a      	ldr	r2, [r7, #32]
 800c57e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c580:	4b3f      	ldr	r3, [pc, #252]	@ (800c680 <netif_add+0x19c>)
 800c582:	781a      	ldrb	r2, [r3, #0]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c58e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 f914 	bl	800c7c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	4798      	blx	r3
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <netif_add+0xc8>
    return NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e058      	b.n	800c65e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c5b2:	2bff      	cmp	r3, #255	@ 0xff
 800c5b4:	d103      	bne.n	800c5be <netif_add+0xda>
        netif->num = 0;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c5c2:	4b30      	ldr	r3, [pc, #192]	@ (800c684 <netif_add+0x1a0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	617b      	str	r3, [r7, #20]
 800c5c8:	e02b      	b.n	800c622 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d106      	bne.n	800c5e0 <netif_add+0xfc>
 800c5d2:	4b25      	ldr	r3, [pc, #148]	@ (800c668 <netif_add+0x184>)
 800c5d4:	f240 128b 	movw	r2, #395	@ 0x18b
 800c5d8:	492b      	ldr	r1, [pc, #172]	@ (800c688 <netif_add+0x1a4>)
 800c5da:	4825      	ldr	r0, [pc, #148]	@ (800c670 <netif_add+0x18c>)
 800c5dc:	f00c f870 	bl	80186c0 <iprintf>
        num_netifs++;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2bff      	cmp	r3, #255	@ 0xff
 800c5ea:	dd06      	ble.n	800c5fa <netif_add+0x116>
 800c5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <netif_add+0x184>)
 800c5ee:	f240 128d 	movw	r2, #397	@ 0x18d
 800c5f2:	4926      	ldr	r1, [pc, #152]	@ (800c68c <netif_add+0x1a8>)
 800c5f4:	481e      	ldr	r0, [pc, #120]	@ (800c670 <netif_add+0x18c>)
 800c5f6:	f00c f863 	bl	80186c0 <iprintf>
        if (netif2->num == netif->num) {
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c606:	429a      	cmp	r2, r3
 800c608:	d108      	bne.n	800c61c <netif_add+0x138>
          netif->num++;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c610:	3301      	adds	r3, #1
 800c612:	b2da      	uxtb	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800c61a:	e005      	b.n	800c628 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	617b      	str	r3, [r7, #20]
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1d0      	bne.n	800c5ca <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1be      	bne.n	800c5ac <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c634:	2bfe      	cmp	r3, #254	@ 0xfe
 800c636:	d103      	bne.n	800c640 <netif_add+0x15c>
    netif_num = 0;
 800c638:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <netif_add+0x19c>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	e006      	b.n	800c64e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c646:	3301      	adds	r3, #1
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	4b0d      	ldr	r3, [pc, #52]	@ (800c680 <netif_add+0x19c>)
 800c64c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c64e:	4b0d      	ldr	r3, [pc, #52]	@ (800c684 <netif_add+0x1a0>)
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c656:	4a0b      	ldr	r2, [pc, #44]	@ (800c684 <netif_add+0x1a0>)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c65c:	68fb      	ldr	r3, [r7, #12]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	0801aa34 	.word	0x0801aa34
 800c66c:	0801aac8 	.word	0x0801aac8
 800c670:	0801aa84 	.word	0x0801aa84
 800c674:	0801aae4 	.word	0x0801aae4
 800c678:	080267d4 	.word	0x080267d4
 800c67c:	0800caa7 	.word	0x0800caa7
 800c680:	200157c4 	.word	0x200157c4
 800c684:	200157bc 	.word	0x200157bc
 800c688:	0801ab08 	.word	0x0801ab08
 800c68c:	0801ab1c 	.word	0x0801ab1c

0800c690 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f002 fdad 	bl	800f1fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f007 fabf 	bl	8013c28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c6aa:	bf00      	nop
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <netif_do_set_ipaddr+0x20>
 800c6c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c73c <netif_do_set_ipaddr+0x88>)
 800c6c8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c6cc:	491c      	ldr	r1, [pc, #112]	@ (800c740 <netif_do_set_ipaddr+0x8c>)
 800c6ce:	481d      	ldr	r0, [pc, #116]	@ (800c744 <netif_do_set_ipaddr+0x90>)
 800c6d0:	f00b fff6 	bl	80186c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <netif_do_set_ipaddr+0x34>
 800c6da:	4b18      	ldr	r3, [pc, #96]	@ (800c73c <netif_do_set_ipaddr+0x88>)
 800c6dc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c6e0:	4917      	ldr	r1, [pc, #92]	@ (800c740 <netif_do_set_ipaddr+0x8c>)
 800c6e2:	4818      	ldr	r0, [pc, #96]	@ (800c744 <netif_do_set_ipaddr+0x90>)
 800c6e4:	f00b ffec 	bl	80186c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d01c      	beq.n	800c730 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3304      	adds	r3, #4
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c706:	f107 0314 	add.w	r3, r7, #20
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff ffbf 	bl	800c690 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <netif_do_set_ipaddr+0x6a>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	e000      	b.n	800c720 <netif_do_set_ipaddr+0x6c>
 800c71e:	2300      	movs	r3, #0
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c724:	2101      	movs	r1, #1
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 f8d2 	bl	800c8d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c72c:	2301      	movs	r3, #1
 800c72e:	e000      	b.n	800c732 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	0801aa34 	.word	0x0801aa34
 800c740:	0801ab4c 	.word	0x0801ab4c
 800c744:	0801aa84 	.word	0x0801aa84

0800c748 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3308      	adds	r3, #8
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d00a      	beq.n	800c778 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <netif_do_set_netmask+0x26>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	e000      	b.n	800c770 <netif_do_set_netmask+0x28>
 800c76e:	2300      	movs	r3, #0
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c774:	2301      	movs	r3, #1
 800c776:	e000      	b.n	800c77a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c786:	b480      	push	{r7}
 800c788:	b085      	sub	sp, #20
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	60f8      	str	r0, [r7, #12]
 800c78e:	60b9      	str	r1, [r7, #8]
 800c790:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	330c      	adds	r3, #12
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d00a      	beq.n	800c7b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <netif_do_set_gw+0x26>
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	e000      	b.n	800c7ae <netif_do_set_gw+0x28>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	@ (800c854 <netif_set_addr+0x90>)
 800c7e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c854 <netif_set_addr+0x90>)
 800c7ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c7f4:	4b17      	ldr	r3, [pc, #92]	@ (800c854 <netif_set_addr+0x90>)
 800c7f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <netif_set_addr+0x42>
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <netif_set_addr+0x46>
 800c806:	2301      	movs	r3, #1
 800c808:	e000      	b.n	800c80c <netif_set_addr+0x48>
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c814:	f107 0310 	add.w	r3, r7, #16
 800c818:	461a      	mov	r2, r3
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff ff49 	bl	800c6b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c822:	69fa      	ldr	r2, [r7, #28]
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f7ff ff8e 	bl	800c748 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c82c:	69ba      	ldr	r2, [r7, #24]
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f7ff ffa8 	bl	800c786 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d106      	bne.n	800c84a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c83c:	f107 0310 	add.w	r3, r7, #16
 800c840:	461a      	mov	r2, r3
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff ff35 	bl	800c6b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c84a:	bf00      	nop
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	080267d4 	.word	0x080267d4

0800c858 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c860:	4a04      	ldr	r2, [pc, #16]	@ (800c874 <netif_set_default+0x1c>)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c866:	bf00      	nop
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	200157c0 	.word	0x200157c0

0800c878 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d107      	bne.n	800c896 <netif_set_up+0x1e>
 800c886:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c4 <netif_set_up+0x4c>)
 800c888:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c88c:	490e      	ldr	r1, [pc, #56]	@ (800c8c8 <netif_set_up+0x50>)
 800c88e:	480f      	ldr	r0, [pc, #60]	@ (800c8cc <netif_set_up+0x54>)
 800c890:	f00b ff16 	bl	80186c0 <iprintf>
 800c894:	e013      	b.n	800c8be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10c      	bne.n	800c8be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c8b6:	2103      	movs	r1, #3
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f809 	bl	800c8d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	0801aa34 	.word	0x0801aa34
 800c8c8:	0801abbc 	.word	0x0801abbc
 800c8cc:	0801aa84 	.word	0x0801aa84

0800c8d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <netif_issue_reports+0x20>
 800c8e2:	4b18      	ldr	r3, [pc, #96]	@ (800c944 <netif_issue_reports+0x74>)
 800c8e4:	f240 326d 	movw	r2, #877	@ 0x36d
 800c8e8:	4917      	ldr	r1, [pc, #92]	@ (800c948 <netif_issue_reports+0x78>)
 800c8ea:	4818      	ldr	r0, [pc, #96]	@ (800c94c <netif_issue_reports+0x7c>)
 800c8ec:	f00b fee8 	bl	80186c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8f6:	f003 0304 	and.w	r3, r3, #4
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d01e      	beq.n	800c93c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c904:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d017      	beq.n	800c93c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d013      	beq.n	800c93e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3304      	adds	r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00e      	beq.n	800c93e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c926:	f003 0308 	and.w	r3, r3, #8
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d007      	beq.n	800c93e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3304      	adds	r3, #4
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f009 ff71 	bl	801681c <etharp_request>
 800c93a:	e000      	b.n	800c93e <netif_issue_reports+0x6e>
    return;
 800c93c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	0801aa34 	.word	0x0801aa34
 800c948:	0801abd8 	.word	0x0801abd8
 800c94c:	0801aa84 	.word	0x0801aa84

0800c950 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d107      	bne.n	800c96e <netif_set_down+0x1e>
 800c95e:	4b12      	ldr	r3, [pc, #72]	@ (800c9a8 <netif_set_down+0x58>)
 800c960:	f240 329b 	movw	r2, #923	@ 0x39b
 800c964:	4911      	ldr	r1, [pc, #68]	@ (800c9ac <netif_set_down+0x5c>)
 800c966:	4812      	ldr	r0, [pc, #72]	@ (800c9b0 <netif_set_down+0x60>)
 800c968:	f00b feaa 	bl	80186c0 <iprintf>
 800c96c:	e019      	b.n	800c9a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d012      	beq.n	800c9a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c982:	f023 0301 	bic.w	r3, r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c994:	f003 0308 	and.w	r3, r3, #8
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f009 faf7 	bl	8015f90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	0801aa34 	.word	0x0801aa34
 800c9ac:	0801abfc 	.word	0x0801abfc
 800c9b0:	0801aa84 	.word	0x0801aa84

0800c9b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d107      	bne.n	800c9d2 <netif_set_link_up+0x1e>
 800c9c2:	4b15      	ldr	r3, [pc, #84]	@ (800ca18 <netif_set_link_up+0x64>)
 800c9c4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c9c8:	4914      	ldr	r1, [pc, #80]	@ (800ca1c <netif_set_link_up+0x68>)
 800c9ca:	4815      	ldr	r0, [pc, #84]	@ (800ca20 <netif_set_link_up+0x6c>)
 800c9cc:	f00b fe78 	bl	80186c0 <iprintf>
 800c9d0:	e01e      	b.n	800ca10 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d117      	bne.n	800ca10 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c9e6:	f043 0304 	orr.w	r3, r3, #4
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f007 fd42 	bl	801447c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9f8:	2103      	movs	r1, #3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff68 	bl	800c8d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <netif_set_link_up+0x5c>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	69db      	ldr	r3, [r3, #28]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	0801aa34 	.word	0x0801aa34
 800ca1c:	0801ac1c 	.word	0x0801ac1c
 800ca20:	0801aa84 	.word	0x0801aa84

0800ca24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d107      	bne.n	800ca42 <netif_set_link_down+0x1e>
 800ca32:	4b11      	ldr	r3, [pc, #68]	@ (800ca78 <netif_set_link_down+0x54>)
 800ca34:	f240 4206 	movw	r2, #1030	@ 0x406
 800ca38:	4910      	ldr	r1, [pc, #64]	@ (800ca7c <netif_set_link_down+0x58>)
 800ca3a:	4811      	ldr	r0, [pc, #68]	@ (800ca80 <netif_set_link_down+0x5c>)
 800ca3c:	f00b fe40 	bl	80186c0 <iprintf>
 800ca40:	e017      	b.n	800ca72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d010      	beq.n	800ca72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ca56:	f023 0304 	bic.w	r3, r3, #4
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <netif_set_link_down+0x4e>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	69db      	ldr	r3, [r3, #28]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	0801aa34 	.word	0x0801aa34
 800ca7c:	0801ac40 	.word	0x0801ac40
 800ca80:	0801aa84 	.word	0x0801aa84

0800ca84 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	61da      	str	r2, [r3, #28]
  }
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b085      	sub	sp, #20
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cab2:	f06f 030b 	mvn.w	r3, #11
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
	...

0800cac4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	4603      	mov	r3, r0
 800cacc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cace:	79fb      	ldrb	r3, [r7, #7]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d013      	beq.n	800cafc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cad4:	4b0d      	ldr	r3, [pc, #52]	@ (800cb0c <netif_get_by_index+0x48>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e00c      	b.n	800caf6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cae2:	3301      	adds	r3, #1
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	79fa      	ldrb	r2, [r7, #7]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d101      	bne.n	800caf0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	e006      	b.n	800cafe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1ef      	bne.n	800cadc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	200157bc 	.word	0x200157bc

0800cb10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	460b      	mov	r3, r1
 800cb20:	80fb      	strh	r3, [r7, #6]
 800cb22:	4613      	mov	r3, r2
 800cb24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	88fa      	ldrh	r2, [r7, #6]
 800cb36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	88ba      	ldrh	r2, [r7, #4]
 800cb3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cb3e:	8b3b      	ldrh	r3, [r7, #24]
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	7f3a      	ldrb	r2, [r7, #28]
 800cb4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	73da      	strb	r2, [r3, #15]
}
 800cb58:	bf00      	nop
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b08c      	sub	sp, #48	@ 0x30
 800cb68:	af02      	add	r7, sp, #8
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	71fb      	strb	r3, [r7, #7]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	80bb      	strh	r3, [r7, #4]
 800cb72:	4613      	mov	r3, r2
 800cb74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cb7a:	887b      	ldrh	r3, [r7, #2]
 800cb7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cb80:	d07f      	beq.n	800cc82 <pbuf_alloc+0x11e>
 800cb82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cb86:	f300 80c8 	bgt.w	800cd1a <pbuf_alloc+0x1b6>
 800cb8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cb8e:	d010      	beq.n	800cbb2 <pbuf_alloc+0x4e>
 800cb90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cb94:	f300 80c1 	bgt.w	800cd1a <pbuf_alloc+0x1b6>
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d002      	beq.n	800cba2 <pbuf_alloc+0x3e>
 800cb9c:	2b41      	cmp	r3, #65	@ 0x41
 800cb9e:	f040 80bc 	bne.w	800cd1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cba2:	887a      	ldrh	r2, [r7, #2]
 800cba4:	88bb      	ldrh	r3, [r7, #4]
 800cba6:	4619      	mov	r1, r3
 800cba8:	2000      	movs	r0, #0
 800cbaa:	f000 f8d1 	bl	800cd50 <pbuf_alloc_reference>
 800cbae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cbb0:	e0bd      	b.n	800cd2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cbba:	88bb      	ldrh	r3, [r7, #4]
 800cbbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cbbe:	200c      	movs	r0, #12
 800cbc0:	f7ff fc0c 	bl	800c3dc <memp_malloc>
 800cbc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d107      	bne.n	800cbdc <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <pbuf_alloc+0x74>
            pbuf_free(p);
 800cbd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbd4:	f000 faaa 	bl	800d12c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e0a9      	b.n	800cd30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cbdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbde:	3303      	adds	r3, #3
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f023 0303 	bic.w	r3, r3, #3
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800cbec:	3304      	adds	r3, #4
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	8b7a      	ldrh	r2, [r7, #26]
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	bf28      	it	cs
 800cbf6:	4613      	movcs	r3, r2
 800cbf8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cbfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbfc:	3310      	adds	r3, #16
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	4413      	add	r3, r2
 800cc02:	3303      	adds	r3, #3
 800cc04:	f023 0303 	bic.w	r3, r3, #3
 800cc08:	4618      	mov	r0, r3
 800cc0a:	89f9      	ldrh	r1, [r7, #14]
 800cc0c:	8b7a      	ldrh	r2, [r7, #26]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	887b      	ldrh	r3, [r7, #2]
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	460b      	mov	r3, r1
 800cc18:	4601      	mov	r1, r0
 800cc1a:	6938      	ldr	r0, [r7, #16]
 800cc1c:	f7ff ff78 	bl	800cb10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d006      	beq.n	800cc3a <pbuf_alloc+0xd6>
 800cc2c:	4b42      	ldr	r3, [pc, #264]	@ (800cd38 <pbuf_alloc+0x1d4>)
 800cc2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc32:	4942      	ldr	r1, [pc, #264]	@ (800cd3c <pbuf_alloc+0x1d8>)
 800cc34:	4842      	ldr	r0, [pc, #264]	@ (800cd40 <pbuf_alloc+0x1dc>)
 800cc36:	f00b fd43 	bl	80186c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cc3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc3c:	3303      	adds	r3, #3
 800cc3e:	f023 0303 	bic.w	r3, r3, #3
 800cc42:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d106      	bne.n	800cc58 <pbuf_alloc+0xf4>
 800cc4a:	4b3b      	ldr	r3, [pc, #236]	@ (800cd38 <pbuf_alloc+0x1d4>)
 800cc4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cc50:	493c      	ldr	r1, [pc, #240]	@ (800cd44 <pbuf_alloc+0x1e0>)
 800cc52:	483b      	ldr	r0, [pc, #236]	@ (800cd40 <pbuf_alloc+0x1dc>)
 800cc54:	f00b fd34 	bl	80186c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d102      	bne.n	800cc64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc62:	e002      	b.n	800cc6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cc6e:	8b7a      	ldrh	r2, [r7, #26]
 800cc70:	89fb      	ldrh	r3, [r7, #14]
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800cc7a:	8b7b      	ldrh	r3, [r7, #26]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d19e      	bne.n	800cbbe <pbuf_alloc+0x5a>
      break;
 800cc80:	e055      	b.n	800cd2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cc82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc84:	3303      	adds	r3, #3
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	f023 0303 	bic.w	r3, r3, #3
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	88bb      	ldrh	r3, [r7, #4]
 800cc90:	3303      	adds	r3, #3
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	f023 0303 	bic.w	r3, r3, #3
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	4413      	add	r3, r2
 800cc9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cc9e:	8b3b      	ldrh	r3, [r7, #24]
 800cca0:	3310      	adds	r3, #16
 800cca2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cca4:	8b3a      	ldrh	r2, [r7, #24]
 800cca6:	88bb      	ldrh	r3, [r7, #4]
 800cca8:	3303      	adds	r3, #3
 800ccaa:	f023 0303 	bic.w	r3, r3, #3
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d306      	bcc.n	800ccc0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ccb2:	8afa      	ldrh	r2, [r7, #22]
 800ccb4:	88bb      	ldrh	r3, [r7, #4]
 800ccb6:	3303      	adds	r3, #3
 800ccb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d201      	bcs.n	800ccc4 <pbuf_alloc+0x160>
        return NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e035      	b.n	800cd30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ccc4:	8afb      	ldrh	r3, [r7, #22]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff fa06 	bl	800c0d8 <mem_malloc>
 800cccc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <pbuf_alloc+0x174>
        return NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	e02b      	b.n	800cd30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ccd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccda:	3310      	adds	r3, #16
 800ccdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccde:	4413      	add	r3, r2
 800cce0:	3303      	adds	r3, #3
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	4618      	mov	r0, r3
 800cce8:	88b9      	ldrh	r1, [r7, #4]
 800ccea:	88ba      	ldrh	r2, [r7, #4]
 800ccec:	2300      	movs	r3, #0
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	887b      	ldrh	r3, [r7, #2]
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4601      	mov	r1, r0
 800ccf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccfa:	f7ff ff09 	bl	800cb10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f003 0303 	and.w	r3, r3, #3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d010      	beq.n	800cd2c <pbuf_alloc+0x1c8>
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cd38 <pbuf_alloc+0x1d4>)
 800cd0c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cd10:	490d      	ldr	r1, [pc, #52]	@ (800cd48 <pbuf_alloc+0x1e4>)
 800cd12:	480b      	ldr	r0, [pc, #44]	@ (800cd40 <pbuf_alloc+0x1dc>)
 800cd14:	f00b fcd4 	bl	80186c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cd18:	e008      	b.n	800cd2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cd1a:	4b07      	ldr	r3, [pc, #28]	@ (800cd38 <pbuf_alloc+0x1d4>)
 800cd1c:	f240 1227 	movw	r2, #295	@ 0x127
 800cd20:	490a      	ldr	r1, [pc, #40]	@ (800cd4c <pbuf_alloc+0x1e8>)
 800cd22:	4807      	ldr	r0, [pc, #28]	@ (800cd40 <pbuf_alloc+0x1dc>)
 800cd24:	f00b fccc 	bl	80186c0 <iprintf>
      return NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e001      	b.n	800cd30 <pbuf_alloc+0x1cc>
      break;
 800cd2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3728      	adds	r7, #40	@ 0x28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	0801ac64 	.word	0x0801ac64
 800cd3c:	0801ac94 	.word	0x0801ac94
 800cd40:	0801acc4 	.word	0x0801acc4
 800cd44:	0801acec 	.word	0x0801acec
 800cd48:	0801ad20 	.word	0x0801ad20
 800cd4c:	0801ad4c 	.word	0x0801ad4c

0800cd50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	807b      	strh	r3, [r7, #2]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cd60:	883b      	ldrh	r3, [r7, #0]
 800cd62:	2b41      	cmp	r3, #65	@ 0x41
 800cd64:	d009      	beq.n	800cd7a <pbuf_alloc_reference+0x2a>
 800cd66:	883b      	ldrh	r3, [r7, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d006      	beq.n	800cd7a <pbuf_alloc_reference+0x2a>
 800cd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800cdac <pbuf_alloc_reference+0x5c>)
 800cd6e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cd72:	490f      	ldr	r1, [pc, #60]	@ (800cdb0 <pbuf_alloc_reference+0x60>)
 800cd74:	480f      	ldr	r0, [pc, #60]	@ (800cdb4 <pbuf_alloc_reference+0x64>)
 800cd76:	f00b fca3 	bl	80186c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cd7a:	200b      	movs	r0, #11
 800cd7c:	f7ff fb2e 	bl	800c3dc <memp_malloc>
 800cd80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	e00b      	b.n	800cda4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cd8c:	8879      	ldrh	r1, [r7, #2]
 800cd8e:	887a      	ldrh	r2, [r7, #2]
 800cd90:	2300      	movs	r3, #0
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	883b      	ldrh	r3, [r7, #0]
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f7ff feb7 	bl	800cb10 <pbuf_init_alloced_pbuf>
  return p;
 800cda2:	68fb      	ldr	r3, [r7, #12]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	0801ac64 	.word	0x0801ac64
 800cdb0:	0801ad68 	.word	0x0801ad68
 800cdb4:	0801acc4 	.word	0x0801acc4

0800cdb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	81bb      	strh	r3, [r7, #12]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
 800cdce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cdd0:	8a7b      	ldrh	r3, [r7, #18]
 800cdd2:	3303      	adds	r3, #3
 800cdd4:	f023 0203 	bic.w	r2, r3, #3
 800cdd8:	89bb      	ldrh	r3, [r7, #12]
 800cdda:	441a      	add	r2, r3
 800cddc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d901      	bls.n	800cde6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e018      	b.n	800ce18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d007      	beq.n	800cdfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cdec:	8a7b      	ldrh	r3, [r7, #18]
 800cdee:	3303      	adds	r3, #3
 800cdf0:	f023 0303 	bic.w	r3, r3, #3
 800cdf4:	6a3a      	ldr	r2, [r7, #32]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	e001      	b.n	800ce00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	89b9      	ldrh	r1, [r7, #12]
 800ce04:	89ba      	ldrh	r2, [r7, #12]
 800ce06:	2302      	movs	r3, #2
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	897b      	ldrh	r3, [r7, #10]
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	460b      	mov	r3, r1
 800ce10:	6979      	ldr	r1, [r7, #20]
 800ce12:	f7ff fe7d 	bl	800cb10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ce16:	687b      	ldr	r3, [r7, #4]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d106      	bne.n	800ce40 <pbuf_realloc+0x20>
 800ce32:	4b3a      	ldr	r3, [pc, #232]	@ (800cf1c <pbuf_realloc+0xfc>)
 800ce34:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ce38:	4939      	ldr	r1, [pc, #228]	@ (800cf20 <pbuf_realloc+0x100>)
 800ce3a:	483a      	ldr	r0, [pc, #232]	@ (800cf24 <pbuf_realloc+0x104>)
 800ce3c:	f00b fc40 	bl	80186c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	891b      	ldrh	r3, [r3, #8]
 800ce44:	887a      	ldrh	r2, [r7, #2]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d263      	bcs.n	800cf12 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	891a      	ldrh	r2, [r3, #8]
 800ce4e:	887b      	ldrh	r3, [r7, #2]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ce54:	887b      	ldrh	r3, [r7, #2]
 800ce56:	817b      	strh	r3, [r7, #10]
  q = p;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ce5c:	e018      	b.n	800ce90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	895b      	ldrh	r3, [r3, #10]
 800ce62:	897a      	ldrh	r2, [r7, #10]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	891a      	ldrh	r2, [r3, #8]
 800ce6c:	893b      	ldrh	r3, [r7, #8]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d106      	bne.n	800ce90 <pbuf_realloc+0x70>
 800ce82:	4b26      	ldr	r3, [pc, #152]	@ (800cf1c <pbuf_realloc+0xfc>)
 800ce84:	f240 12af 	movw	r2, #431	@ 0x1af
 800ce88:	4927      	ldr	r1, [pc, #156]	@ (800cf28 <pbuf_realloc+0x108>)
 800ce8a:	4826      	ldr	r0, [pc, #152]	@ (800cf24 <pbuf_realloc+0x104>)
 800ce8c:	f00b fc18 	bl	80186c0 <iprintf>
  while (rem_len > q->len) {
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	895b      	ldrh	r3, [r3, #10]
 800ce94:	897a      	ldrh	r2, [r7, #10]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d8e1      	bhi.n	800ce5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	7b1b      	ldrb	r3, [r3, #12]
 800ce9e:	f003 030f 	and.w	r3, r3, #15
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d121      	bne.n	800ceea <pbuf_realloc+0xca>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	895b      	ldrh	r3, [r3, #10]
 800ceaa:	897a      	ldrh	r2, [r7, #10]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d01c      	beq.n	800ceea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	7b5b      	ldrb	r3, [r3, #13]
 800ceb4:	f003 0302 	and.w	r3, r3, #2
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d116      	bne.n	800ceea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	897b      	ldrh	r3, [r7, #10]
 800cec8:	4413      	add	r3, r2
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	4619      	mov	r1, r3
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7fe fff8 	bl	800bec4 <mem_trim>
 800ced4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <pbuf_realloc+0xca>
 800cedc:	4b0f      	ldr	r3, [pc, #60]	@ (800cf1c <pbuf_realloc+0xfc>)
 800cede:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cee2:	4912      	ldr	r1, [pc, #72]	@ (800cf2c <pbuf_realloc+0x10c>)
 800cee4:	480f      	ldr	r0, [pc, #60]	@ (800cf24 <pbuf_realloc+0x104>)
 800cee6:	f00b fbeb 	bl	80186c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	897a      	ldrh	r2, [r7, #10]
 800ceee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	895a      	ldrh	r2, [r3, #10]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 f911 	bl	800d12c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	e000      	b.n	800cf14 <pbuf_realloc+0xf4>
    return;
 800cf12:	bf00      	nop

}
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0801ac64 	.word	0x0801ac64
 800cf20:	0801ad7c 	.word	0x0801ad7c
 800cf24:	0801acc4 	.word	0x0801acc4
 800cf28:	0801ad94 	.word	0x0801ad94
 800cf2c:	0801adac 	.word	0x0801adac

0800cf30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d106      	bne.n	800cf52 <pbuf_add_header_impl+0x22>
 800cf44:	4b2b      	ldr	r3, [pc, #172]	@ (800cff4 <pbuf_add_header_impl+0xc4>)
 800cf46:	f240 12df 	movw	r2, #479	@ 0x1df
 800cf4a:	492b      	ldr	r1, [pc, #172]	@ (800cff8 <pbuf_add_header_impl+0xc8>)
 800cf4c:	482b      	ldr	r0, [pc, #172]	@ (800cffc <pbuf_add_header_impl+0xcc>)
 800cf4e:	f00b fbb7 	bl	80186c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d003      	beq.n	800cf60 <pbuf_add_header_impl+0x30>
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf5e:	d301      	bcc.n	800cf64 <pbuf_add_header_impl+0x34>
    return 1;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e043      	b.n	800cfec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <pbuf_add_header_impl+0x3e>
    return 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e03e      	b.n	800cfec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	891a      	ldrh	r2, [r3, #8]
 800cf76:	8a7b      	ldrh	r3, [r7, #18]
 800cf78:	4413      	add	r3, r2
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	8a7a      	ldrh	r2, [r7, #18]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d901      	bls.n	800cf86 <pbuf_add_header_impl+0x56>
    return 1;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e032      	b.n	800cfec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	7b1b      	ldrb	r3, [r3, #12]
 800cf8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cf8c:	8a3b      	ldrh	r3, [r7, #16]
 800cf8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00c      	beq.n	800cfb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	685a      	ldr	r2, [r3, #4]
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	425b      	negs	r3, r3
 800cf9e:	4413      	add	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	3310      	adds	r3, #16
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d20d      	bcs.n	800cfc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e01d      	b.n	800cfec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d006      	beq.n	800cfc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	425b      	negs	r3, r3
 800cfbe:	4413      	add	r3, r2
 800cfc0:	617b      	str	r3, [r7, #20]
 800cfc2:	e001      	b.n	800cfc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e011      	b.n	800cfec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	895a      	ldrh	r2, [r3, #10]
 800cfd2:	8a7b      	ldrh	r3, [r7, #18]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	891a      	ldrh	r2, [r3, #8]
 800cfe0:	8a7b      	ldrh	r3, [r7, #18]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	811a      	strh	r2, [r3, #8]


  return 0;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	0801ac64 	.word	0x0801ac64
 800cff8:	0801adc8 	.word	0x0801adc8
 800cffc:	0801acc4 	.word	0x0801acc4

0800d000 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d00a:	2200      	movs	r2, #0
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff ff8e 	bl	800cf30 <pbuf_add_header_impl>
 800d014:	4603      	mov	r3, r0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d106      	bne.n	800d03e <pbuf_remove_header+0x1e>
 800d030:	4b20      	ldr	r3, [pc, #128]	@ (800d0b4 <pbuf_remove_header+0x94>)
 800d032:	f240 224b 	movw	r2, #587	@ 0x24b
 800d036:	4920      	ldr	r1, [pc, #128]	@ (800d0b8 <pbuf_remove_header+0x98>)
 800d038:	4820      	ldr	r0, [pc, #128]	@ (800d0bc <pbuf_remove_header+0x9c>)
 800d03a:	f00b fb41 	bl	80186c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <pbuf_remove_header+0x2c>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d04a:	d301      	bcc.n	800d050 <pbuf_remove_header+0x30>
    return 1;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e02c      	b.n	800d0aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <pbuf_remove_header+0x3a>
    return 0;
 800d056:	2300      	movs	r3, #0
 800d058:	e027      	b.n	800d0aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	89fa      	ldrh	r2, [r7, #14]
 800d064:	429a      	cmp	r2, r3
 800d066:	d908      	bls.n	800d07a <pbuf_remove_header+0x5a>
 800d068:	4b12      	ldr	r3, [pc, #72]	@ (800d0b4 <pbuf_remove_header+0x94>)
 800d06a:	f240 2255 	movw	r2, #597	@ 0x255
 800d06e:	4914      	ldr	r1, [pc, #80]	@ (800d0c0 <pbuf_remove_header+0xa0>)
 800d070:	4812      	ldr	r0, [pc, #72]	@ (800d0bc <pbuf_remove_header+0x9c>)
 800d072:	f00b fb25 	bl	80186c0 <iprintf>
 800d076:	2301      	movs	r3, #1
 800d078:	e017      	b.n	800d0aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	441a      	add	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	895a      	ldrh	r2, [r3, #10]
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	b29a      	uxth	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	891a      	ldrh	r2, [r3, #8]
 800d09e:	89fb      	ldrh	r3, [r7, #14]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0801ac64 	.word	0x0801ac64
 800d0b8:	0801adc8 	.word	0x0801adc8
 800d0bc:	0801acc4 	.word	0x0801acc4
 800d0c0:	0801add4 	.word	0x0801add4

0800d0c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	807b      	strh	r3, [r7, #2]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d0d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da08      	bge.n	800d0ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d0dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d0e0:	425b      	negs	r3, r3
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff ff9b 	bl	800d020 <pbuf_remove_header>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	e007      	b.n	800d0fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d0ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d0f2:	787a      	ldrb	r2, [r7, #1]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff ff1a 	bl	800cf30 <pbuf_add_header_impl>
 800d0fc:	4603      	mov	r3, r0
  }
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	460b      	mov	r3, r1
 800d110:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d116:	2201      	movs	r2, #1
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff ffd2 	bl	800d0c4 <pbuf_header_impl>
 800d120:	4603      	mov	r3, r0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10b      	bne.n	800d152 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <pbuf_free+0x22>
 800d140:	4b3b      	ldr	r3, [pc, #236]	@ (800d230 <pbuf_free+0x104>)
 800d142:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d146:	493b      	ldr	r1, [pc, #236]	@ (800d234 <pbuf_free+0x108>)
 800d148:	483b      	ldr	r0, [pc, #236]	@ (800d238 <pbuf_free+0x10c>)
 800d14a:	f00b fab9 	bl	80186c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	e069      	b.n	800d226 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d156:	e062      	b.n	800d21e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d158:	f00b f994 	bl	8018484 <sys_arch_protect>
 800d15c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7b9b      	ldrb	r3, [r3, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <pbuf_free+0x48>
 800d166:	4b32      	ldr	r3, [pc, #200]	@ (800d230 <pbuf_free+0x104>)
 800d168:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d16c:	4933      	ldr	r1, [pc, #204]	@ (800d23c <pbuf_free+0x110>)
 800d16e:	4832      	ldr	r0, [pc, #200]	@ (800d238 <pbuf_free+0x10c>)
 800d170:	f00b faa6 	bl	80186c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7b9b      	ldrb	r3, [r3, #14]
 800d178:	3b01      	subs	r3, #1
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	739a      	strb	r2, [r3, #14]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	7b9b      	ldrb	r3, [r3, #14]
 800d184:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d186:	69b8      	ldr	r0, [r7, #24]
 800d188:	f00b f98a 	bl	80184a0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d143      	bne.n	800d21a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7b1b      	ldrb	r3, [r3, #12]
 800d19c:	f003 030f 	and.w	r3, r3, #15
 800d1a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7b5b      	ldrb	r3, [r3, #13]
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d011      	beq.n	800d1d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <pbuf_free+0x9c>
 800d1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d230 <pbuf_free+0x104>)
 800d1bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d1c0:	491f      	ldr	r1, [pc, #124]	@ (800d240 <pbuf_free+0x114>)
 800d1c2:	481d      	ldr	r0, [pc, #116]	@ (800d238 <pbuf_free+0x10c>)
 800d1c4:	f00b fa7c 	bl	80186c0 <iprintf>
        pc->custom_free_function(p);
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	4798      	blx	r3
 800d1d0:	e01d      	b.n	800d20e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d104      	bne.n	800d1e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	200c      	movs	r0, #12
 800d1dc:	f7ff f950 	bl	800c480 <memp_free>
 800d1e0:	e015      	b.n	800d20e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d104      	bne.n	800d1f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	200b      	movs	r0, #11
 800d1ec:	f7ff f948 	bl	800c480 <memp_free>
 800d1f0:	e00d      	b.n	800d20e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <pbuf_free+0xd4>
          mem_free(p);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7fe fdd3 	bl	800bda4 <mem_free>
 800d1fe:	e006      	b.n	800d20e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d200:	4b0b      	ldr	r3, [pc, #44]	@ (800d230 <pbuf_free+0x104>)
 800d202:	f240 320f 	movw	r2, #783	@ 0x30f
 800d206:	490f      	ldr	r1, [pc, #60]	@ (800d244 <pbuf_free+0x118>)
 800d208:	480b      	ldr	r0, [pc, #44]	@ (800d238 <pbuf_free+0x10c>)
 800d20a:	f00b fa59 	bl	80186c0 <iprintf>
        }
      }
      count++;
 800d20e:	7ffb      	ldrb	r3, [r7, #31]
 800d210:	3301      	adds	r3, #1
 800d212:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	607b      	str	r3, [r7, #4]
 800d218:	e001      	b.n	800d21e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d199      	bne.n	800d158 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d224:	7ffb      	ldrb	r3, [r7, #31]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3720      	adds	r7, #32
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	0801ac64 	.word	0x0801ac64
 800d234:	0801adc8 	.word	0x0801adc8
 800d238:	0801acc4 	.word	0x0801acc4
 800d23c:	0801adf4 	.word	0x0801adf4
 800d240:	0801ae0c 	.word	0x0801ae0c
 800d244:	0801ae30 	.word	0x0801ae30

0800d248 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d254:	e005      	b.n	800d262 <pbuf_clen+0x1a>
    ++len;
 800d256:	89fb      	ldrh	r3, [r7, #14]
 800d258:	3301      	adds	r3, #1
 800d25a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1f6      	bne.n	800d256 <pbuf_clen+0xe>
  }
  return len;
 800d268:	89fb      	ldrh	r3, [r7, #14]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
	...

0800d278 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d016      	beq.n	800d2b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d286:	f00b f8fd 	bl	8018484 <sys_arch_protect>
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7b9b      	ldrb	r3, [r3, #14]
 800d290:	3301      	adds	r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	739a      	strb	r2, [r3, #14]
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f00b f901 	bl	80184a0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	7b9b      	ldrb	r3, [r3, #14]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d106      	bne.n	800d2b4 <pbuf_ref+0x3c>
 800d2a6:	4b05      	ldr	r3, [pc, #20]	@ (800d2bc <pbuf_ref+0x44>)
 800d2a8:	f240 3242 	movw	r2, #834	@ 0x342
 800d2ac:	4904      	ldr	r1, [pc, #16]	@ (800d2c0 <pbuf_ref+0x48>)
 800d2ae:	4805      	ldr	r0, [pc, #20]	@ (800d2c4 <pbuf_ref+0x4c>)
 800d2b0:	f00b fa06 	bl	80186c0 <iprintf>
  }
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	0801ac64 	.word	0x0801ac64
 800d2c0:	0801ae44 	.word	0x0801ae44
 800d2c4:	0801acc4 	.word	0x0801acc4

0800d2c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <pbuf_cat+0x16>
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d107      	bne.n	800d2ee <pbuf_cat+0x26>
 800d2de:	4b20      	ldr	r3, [pc, #128]	@ (800d360 <pbuf_cat+0x98>)
 800d2e0:	f240 3259 	movw	r2, #857	@ 0x359
 800d2e4:	491f      	ldr	r1, [pc, #124]	@ (800d364 <pbuf_cat+0x9c>)
 800d2e6:	4820      	ldr	r0, [pc, #128]	@ (800d368 <pbuf_cat+0xa0>)
 800d2e8:	f00b f9ea 	bl	80186c0 <iprintf>
 800d2ec:	e034      	b.n	800d358 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	e00a      	b.n	800d30a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	891a      	ldrh	r2, [r3, #8]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	891b      	ldrh	r3, [r3, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f0      	bne.n	800d2f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	891a      	ldrh	r2, [r3, #8]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	895b      	ldrh	r3, [r3, #10]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d006      	beq.n	800d32c <pbuf_cat+0x64>
 800d31e:	4b10      	ldr	r3, [pc, #64]	@ (800d360 <pbuf_cat+0x98>)
 800d320:	f240 3262 	movw	r2, #866	@ 0x362
 800d324:	4911      	ldr	r1, [pc, #68]	@ (800d36c <pbuf_cat+0xa4>)
 800d326:	4810      	ldr	r0, [pc, #64]	@ (800d368 <pbuf_cat+0xa0>)
 800d328:	f00b f9ca 	bl	80186c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d006      	beq.n	800d342 <pbuf_cat+0x7a>
 800d334:	4b0a      	ldr	r3, [pc, #40]	@ (800d360 <pbuf_cat+0x98>)
 800d336:	f240 3263 	movw	r2, #867	@ 0x363
 800d33a:	490d      	ldr	r1, [pc, #52]	@ (800d370 <pbuf_cat+0xa8>)
 800d33c:	480a      	ldr	r0, [pc, #40]	@ (800d368 <pbuf_cat+0xa0>)
 800d33e:	f00b f9bf 	bl	80186c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	891a      	ldrh	r2, [r3, #8]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	891b      	ldrh	r3, [r3, #8]
 800d34a:	4413      	add	r3, r2
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	683a      	ldr	r2, [r7, #0]
 800d356:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	0801ac64 	.word	0x0801ac64
 800d364:	0801ae58 	.word	0x0801ae58
 800d368:	0801acc4 	.word	0x0801acc4
 800d36c:	0801ae90 	.word	0x0801ae90
 800d370:	0801aec0 	.word	0x0801aec0

0800d374 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff ffa1 	bl	800d2c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f7ff ff76 	bl	800d278 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	617b      	str	r3, [r7, #20]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d008      	beq.n	800d3be <pbuf_copy+0x2a>
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <pbuf_copy+0x2a>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	891a      	ldrh	r2, [r3, #8]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	891b      	ldrh	r3, [r3, #8]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d209      	bcs.n	800d3d2 <pbuf_copy+0x3e>
 800d3be:	4b57      	ldr	r3, [pc, #348]	@ (800d51c <pbuf_copy+0x188>)
 800d3c0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d3c4:	4956      	ldr	r1, [pc, #344]	@ (800d520 <pbuf_copy+0x18c>)
 800d3c6:	4857      	ldr	r0, [pc, #348]	@ (800d524 <pbuf_copy+0x190>)
 800d3c8:	f00b f97a 	bl	80186c0 <iprintf>
 800d3cc:	f06f 030f 	mvn.w	r3, #15
 800d3d0:	e09f      	b.n	800d512 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	895b      	ldrh	r3, [r3, #10]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	1ad2      	subs	r2, r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	895b      	ldrh	r3, [r3, #10]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	1acb      	subs	r3, r1, r3
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d306      	bcc.n	800d3f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	895b      	ldrh	r3, [r3, #10]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	60fb      	str	r3, [r7, #12]
 800d3f6:	e005      	b.n	800d404 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	895b      	ldrh	r3, [r3, #10]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	18d0      	adds	r0, r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	685a      	ldr	r2, [r3, #4]
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	4413      	add	r3, r2
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4619      	mov	r1, r3
 800d418:	f00b fa87 	bl	801892a <memcpy>
    offset_to += len;
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4413      	add	r3, r2
 800d422:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	4413      	add	r3, r2
 800d42a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	895b      	ldrh	r3, [r3, #10]
 800d430:	461a      	mov	r2, r3
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	4293      	cmp	r3, r2
 800d436:	d906      	bls.n	800d446 <pbuf_copy+0xb2>
 800d438:	4b38      	ldr	r3, [pc, #224]	@ (800d51c <pbuf_copy+0x188>)
 800d43a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d43e:	493a      	ldr	r1, [pc, #232]	@ (800d528 <pbuf_copy+0x194>)
 800d440:	4838      	ldr	r0, [pc, #224]	@ (800d524 <pbuf_copy+0x190>)
 800d442:	f00b f93d 	bl	80186c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	895b      	ldrh	r3, [r3, #10]
 800d44a:	461a      	mov	r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d906      	bls.n	800d460 <pbuf_copy+0xcc>
 800d452:	4b32      	ldr	r3, [pc, #200]	@ (800d51c <pbuf_copy+0x188>)
 800d454:	f240 32da 	movw	r2, #986	@ 0x3da
 800d458:	4934      	ldr	r1, [pc, #208]	@ (800d52c <pbuf_copy+0x198>)
 800d45a:	4832      	ldr	r0, [pc, #200]	@ (800d524 <pbuf_copy+0x190>)
 800d45c:	f00b f930 	bl	80186c0 <iprintf>
    if (offset_from >= p_from->len) {
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	461a      	mov	r2, r3
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	4293      	cmp	r3, r2
 800d46a:	d304      	bcc.n	800d476 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	895b      	ldrh	r3, [r3, #10]
 800d47a:	461a      	mov	r2, r3
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	4293      	cmp	r3, r2
 800d480:	d114      	bne.n	800d4ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10c      	bne.n	800d4ac <pbuf_copy+0x118>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d009      	beq.n	800d4ac <pbuf_copy+0x118>
 800d498:	4b20      	ldr	r3, [pc, #128]	@ (800d51c <pbuf_copy+0x188>)
 800d49a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d49e:	4924      	ldr	r1, [pc, #144]	@ (800d530 <pbuf_copy+0x19c>)
 800d4a0:	4820      	ldr	r0, [pc, #128]	@ (800d524 <pbuf_copy+0x190>)
 800d4a2:	f00b f90d 	bl	80186c0 <iprintf>
 800d4a6:	f06f 030f 	mvn.w	r3, #15
 800d4aa:	e032      	b.n	800d512 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d013      	beq.n	800d4da <pbuf_copy+0x146>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	895a      	ldrh	r2, [r3, #10]
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	891b      	ldrh	r3, [r3, #8]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d10d      	bne.n	800d4da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d009      	beq.n	800d4da <pbuf_copy+0x146>
 800d4c6:	4b15      	ldr	r3, [pc, #84]	@ (800d51c <pbuf_copy+0x188>)
 800d4c8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d4cc:	4919      	ldr	r1, [pc, #100]	@ (800d534 <pbuf_copy+0x1a0>)
 800d4ce:	4815      	ldr	r0, [pc, #84]	@ (800d524 <pbuf_copy+0x190>)
 800d4d0:	f00b f8f6 	bl	80186c0 <iprintf>
 800d4d4:	f06f 0305 	mvn.w	r3, #5
 800d4d8:	e01b      	b.n	800d512 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d013      	beq.n	800d508 <pbuf_copy+0x174>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	895a      	ldrh	r2, [r3, #10]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	891b      	ldrh	r3, [r3, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d10d      	bne.n	800d508 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d009      	beq.n	800d508 <pbuf_copy+0x174>
 800d4f4:	4b09      	ldr	r3, [pc, #36]	@ (800d51c <pbuf_copy+0x188>)
 800d4f6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d4fa:	490e      	ldr	r1, [pc, #56]	@ (800d534 <pbuf_copy+0x1a0>)
 800d4fc:	4809      	ldr	r0, [pc, #36]	@ (800d524 <pbuf_copy+0x190>)
 800d4fe:	f00b f8df 	bl	80186c0 <iprintf>
 800d502:	f06f 0305 	mvn.w	r3, #5
 800d506:	e004      	b.n	800d512 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f47f af61 	bne.w	800d3d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	0801ac64 	.word	0x0801ac64
 800d520:	0801af0c 	.word	0x0801af0c
 800d524:	0801acc4 	.word	0x0801acc4
 800d528:	0801af3c 	.word	0x0801af3c
 800d52c:	0801af54 	.word	0x0801af54
 800d530:	0801af70 	.word	0x0801af70
 800d534:	0801af80 	.word	0x0801af80

0800d538 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4611      	mov	r1, r2
 800d544:	461a      	mov	r2, r3
 800d546:	460b      	mov	r3, r1
 800d548:	80fb      	strh	r3, [r7, #6]
 800d54a:	4613      	mov	r3, r2
 800d54c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d108      	bne.n	800d56e <pbuf_copy_partial+0x36>
 800d55c:	4b2b      	ldr	r3, [pc, #172]	@ (800d60c <pbuf_copy_partial+0xd4>)
 800d55e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d562:	492b      	ldr	r1, [pc, #172]	@ (800d610 <pbuf_copy_partial+0xd8>)
 800d564:	482b      	ldr	r0, [pc, #172]	@ (800d614 <pbuf_copy_partial+0xdc>)
 800d566:	f00b f8ab 	bl	80186c0 <iprintf>
 800d56a:	2300      	movs	r3, #0
 800d56c:	e04a      	b.n	800d604 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d108      	bne.n	800d586 <pbuf_copy_partial+0x4e>
 800d574:	4b25      	ldr	r3, [pc, #148]	@ (800d60c <pbuf_copy_partial+0xd4>)
 800d576:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d57a:	4927      	ldr	r1, [pc, #156]	@ (800d618 <pbuf_copy_partial+0xe0>)
 800d57c:	4825      	ldr	r0, [pc, #148]	@ (800d614 <pbuf_copy_partial+0xdc>)
 800d57e:	f00b f89f 	bl	80186c0 <iprintf>
 800d582:	2300      	movs	r3, #0
 800d584:	e03e      	b.n	800d604 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	e034      	b.n	800d5f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d58c:	88bb      	ldrh	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00a      	beq.n	800d5a8 <pbuf_copy_partial+0x70>
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	895b      	ldrh	r3, [r3, #10]
 800d596:	88ba      	ldrh	r2, [r7, #4]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d305      	bcc.n	800d5a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	88ba      	ldrh	r2, [r7, #4]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	80bb      	strh	r3, [r7, #4]
 800d5a6:	e023      	b.n	800d5f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	895a      	ldrh	r2, [r3, #10]
 800d5ac:	88bb      	ldrh	r3, [r7, #4]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d5b2:	8b3a      	ldrh	r2, [r7, #24]
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d901      	bls.n	800d5be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d5ba:	88fb      	ldrh	r3, [r7, #6]
 800d5bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d5be:	8b7b      	ldrh	r3, [r7, #26]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	18d0      	adds	r0, r2, r3
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	88bb      	ldrh	r3, [r7, #4]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	8b3a      	ldrh	r2, [r7, #24]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	f00b f9ab 	bl	801892a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d5d4:	8afa      	ldrh	r2, [r7, #22]
 800d5d6:	8b3b      	ldrh	r3, [r7, #24]
 800d5d8:	4413      	add	r3, r2
 800d5da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d5dc:	8b7a      	ldrh	r2, [r7, #26]
 800d5de:	8b3b      	ldrh	r3, [r7, #24]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d5e4:	88fa      	ldrh	r2, [r7, #6]
 800d5e6:	8b3b      	ldrh	r3, [r7, #24]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	61fb      	str	r3, [r7, #28]
 800d5f6:	88fb      	ldrh	r3, [r7, #6]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <pbuf_copy_partial+0xca>
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1c4      	bne.n	800d58c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d602:	8afb      	ldrh	r3, [r7, #22]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3720      	adds	r7, #32
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	0801ac64 	.word	0x0801ac64
 800d610:	0801afac 	.word	0x0801afac
 800d614:	0801acc4 	.word	0x0801acc4
 800d618:	0801afcc 	.word	0x0801afcc

0800d61c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	603a      	str	r2, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
 800d628:	460b      	mov	r3, r1
 800d62a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	8919      	ldrh	r1, [r3, #8]
 800d630:	88ba      	ldrh	r2, [r7, #4]
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff fa95 	bl	800cb64 <pbuf_alloc>
 800d63a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d101      	bne.n	800d646 <pbuf_clone+0x2a>
    return NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	e011      	b.n	800d66a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff fea3 	bl	800d394 <pbuf_copy>
 800d64e:	4603      	mov	r3, r0
 800d650:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d652:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d006      	beq.n	800d668 <pbuf_clone+0x4c>
 800d65a:	4b06      	ldr	r3, [pc, #24]	@ (800d674 <pbuf_clone+0x58>)
 800d65c:	f240 5224 	movw	r2, #1316	@ 0x524
 800d660:	4905      	ldr	r1, [pc, #20]	@ (800d678 <pbuf_clone+0x5c>)
 800d662:	4806      	ldr	r0, [pc, #24]	@ (800d67c <pbuf_clone+0x60>)
 800d664:	f00b f82c 	bl	80186c0 <iprintf>
  return q;
 800d668:	68fb      	ldr	r3, [r7, #12]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0801ac64 	.word	0x0801ac64
 800d678:	0801b0d8 	.word	0x0801b0d8
 800d67c:	0801acc4 	.word	0x0801acc4

0800d680 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d684:	f00a ff1c 	bl	80184c0 <rand>
 800d688:	4603      	mov	r3, r0
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d690:	b29b      	uxth	r3, r3
 800d692:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d696:	b29a      	uxth	r2, r3
 800d698:	4b01      	ldr	r3, [pc, #4]	@ (800d6a0 <tcp_init+0x20>)
 800d69a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d69c:	bf00      	nop
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000014 	.word	0x20000014

0800d6a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7d1b      	ldrb	r3, [r3, #20]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d105      	bne.n	800d6c0 <tcp_free+0x1c>
 800d6b4:	4b06      	ldr	r3, [pc, #24]	@ (800d6d0 <tcp_free+0x2c>)
 800d6b6:	22d4      	movs	r2, #212	@ 0xd4
 800d6b8:	4906      	ldr	r1, [pc, #24]	@ (800d6d4 <tcp_free+0x30>)
 800d6ba:	4807      	ldr	r0, [pc, #28]	@ (800d6d8 <tcp_free+0x34>)
 800d6bc:	f00b f800 	bl	80186c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	2001      	movs	r0, #1
 800d6c4:	f7fe fedc 	bl	800c480 <memp_free>
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	0801b164 	.word	0x0801b164
 800d6d4:	0801b194 	.word	0x0801b194
 800d6d8:	0801b1a8 	.word	0x0801b1a8

0800d6dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d105      	bne.n	800d6f8 <tcp_free_listen+0x1c>
 800d6ec:	4b06      	ldr	r3, [pc, #24]	@ (800d708 <tcp_free_listen+0x2c>)
 800d6ee:	22df      	movs	r2, #223	@ 0xdf
 800d6f0:	4906      	ldr	r1, [pc, #24]	@ (800d70c <tcp_free_listen+0x30>)
 800d6f2:	4807      	ldr	r0, [pc, #28]	@ (800d710 <tcp_free_listen+0x34>)
 800d6f4:	f00a ffe4 	bl	80186c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	2002      	movs	r0, #2
 800d6fc:	f7fe fec0 	bl	800c480 <memp_free>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	0801b164 	.word	0x0801b164
 800d70c:	0801b1d0 	.word	0x0801b1d0
 800d710:	0801b1a8 	.word	0x0801b1a8

0800d714 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d718:	f001 f88a 	bl	800e830 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d71c:	4b07      	ldr	r3, [pc, #28]	@ (800d73c <tcp_tmr+0x28>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	b2da      	uxtb	r2, r3
 800d724:	4b05      	ldr	r3, [pc, #20]	@ (800d73c <tcp_tmr+0x28>)
 800d726:	701a      	strb	r2, [r3, #0]
 800d728:	4b04      	ldr	r3, [pc, #16]	@ (800d73c <tcp_tmr+0x28>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d734:	f000 fd50 	bl	800e1d8 <tcp_slowtmr>
  }
}
 800d738:	bf00      	nop
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	200157dd 	.word	0x200157dd

0800d740 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d105      	bne.n	800d75c <tcp_remove_listener+0x1c>
 800d750:	4b0d      	ldr	r3, [pc, #52]	@ (800d788 <tcp_remove_listener+0x48>)
 800d752:	22ff      	movs	r2, #255	@ 0xff
 800d754:	490d      	ldr	r1, [pc, #52]	@ (800d78c <tcp_remove_listener+0x4c>)
 800d756:	480e      	ldr	r0, [pc, #56]	@ (800d790 <tcp_remove_listener+0x50>)
 800d758:	f00a ffb2 	bl	80186c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	e00a      	b.n	800d778 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d102      	bne.n	800d772 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1f1      	bne.n	800d762 <tcp_remove_listener+0x22>
    }
  }
}
 800d77e:	bf00      	nop
 800d780:	bf00      	nop
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	0801b164 	.word	0x0801b164
 800d78c:	0801b1ec 	.word	0x0801b1ec
 800d790:	0801b1a8 	.word	0x0801b1a8

0800d794 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <tcp_listen_closed+0x1c>
 800d7a2:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <tcp_listen_closed+0x60>)
 800d7a4:	f240 1211 	movw	r2, #273	@ 0x111
 800d7a8:	4913      	ldr	r1, [pc, #76]	@ (800d7f8 <tcp_listen_closed+0x64>)
 800d7aa:	4814      	ldr	r0, [pc, #80]	@ (800d7fc <tcp_listen_closed+0x68>)
 800d7ac:	f00a ff88 	bl	80186c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d006      	beq.n	800d7c6 <tcp_listen_closed+0x32>
 800d7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f4 <tcp_listen_closed+0x60>)
 800d7ba:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d7be:	4910      	ldr	r1, [pc, #64]	@ (800d800 <tcp_listen_closed+0x6c>)
 800d7c0:	480e      	ldr	r0, [pc, #56]	@ (800d7fc <tcp_listen_closed+0x68>)
 800d7c2:	f00a ff7d 	bl	80186c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	60fb      	str	r3, [r7, #12]
 800d7ca:	e00b      	b.n	800d7e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d7cc:	4a0d      	ldr	r2, [pc, #52]	@ (800d804 <tcp_listen_closed+0x70>)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff ffb1 	bl	800d740 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d9f0      	bls.n	800d7cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d7ea:	bf00      	nop
 800d7ec:	bf00      	nop
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	0801b164 	.word	0x0801b164
 800d7f8:	0801b214 	.word	0x0801b214
 800d7fc:	0801b1a8 	.word	0x0801b1a8
 800d800:	0801b220 	.word	0x0801b220
 800d804:	0802679c 	.word	0x0802679c

0800d808 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d808:	b5b0      	push	{r4, r5, r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af04      	add	r7, sp, #16
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <tcp_close_shutdown+0x20>
 800d81a:	4b63      	ldr	r3, [pc, #396]	@ (800d9a8 <tcp_close_shutdown+0x1a0>)
 800d81c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d820:	4962      	ldr	r1, [pc, #392]	@ (800d9ac <tcp_close_shutdown+0x1a4>)
 800d822:	4863      	ldr	r0, [pc, #396]	@ (800d9b0 <tcp_close_shutdown+0x1a8>)
 800d824:	f00a ff4c 	bl	80186c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d067      	beq.n	800d8fe <tcp_close_shutdown+0xf6>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	7d1b      	ldrb	r3, [r3, #20]
 800d832:	2b04      	cmp	r3, #4
 800d834:	d003      	beq.n	800d83e <tcp_close_shutdown+0x36>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	7d1b      	ldrb	r3, [r3, #20]
 800d83a:	2b07      	cmp	r3, #7
 800d83c:	d15f      	bne.n	800d8fe <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d842:	2b00      	cmp	r3, #0
 800d844:	d105      	bne.n	800d852 <tcp_close_shutdown+0x4a>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d84a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800d84e:	4293      	cmp	r3, r2
 800d850:	d055      	beq.n	800d8fe <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8b5b      	ldrh	r3, [r3, #26]
 800d856:	f003 0310 	and.w	r3, r3, #16
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <tcp_close_shutdown+0x64>
 800d85e:	4b52      	ldr	r3, [pc, #328]	@ (800d9a8 <tcp_close_shutdown+0x1a0>)
 800d860:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d864:	4953      	ldr	r1, [pc, #332]	@ (800d9b4 <tcp_close_shutdown+0x1ac>)
 800d866:	4852      	ldr	r0, [pc, #328]	@ (800d9b0 <tcp_close_shutdown+0x1a8>)
 800d868:	f00a ff2a 	bl	80186c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d874:	687d      	ldr	r5, [r7, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3304      	adds	r3, #4
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	8ad2      	ldrh	r2, [r2, #22]
 800d87e:	6879      	ldr	r1, [r7, #4]
 800d880:	8b09      	ldrh	r1, [r1, #24]
 800d882:	9102      	str	r1, [sp, #8]
 800d884:	9201      	str	r2, [sp, #4]
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	462b      	mov	r3, r5
 800d88a:	4622      	mov	r2, r4
 800d88c:	4601      	mov	r1, r0
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f005 f9c4 	bl	8012c1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f001 fb4f 	bl	800ef38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d89a:	4b47      	ldr	r3, [pc, #284]	@ (800d9b8 <tcp_close_shutdown+0x1b0>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d105      	bne.n	800d8b0 <tcp_close_shutdown+0xa8>
 800d8a4:	4b44      	ldr	r3, [pc, #272]	@ (800d9b8 <tcp_close_shutdown+0x1b0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	4a43      	ldr	r2, [pc, #268]	@ (800d9b8 <tcp_close_shutdown+0x1b0>)
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	e013      	b.n	800d8d8 <tcp_close_shutdown+0xd0>
 800d8b0:	4b41      	ldr	r3, [pc, #260]	@ (800d9b8 <tcp_close_shutdown+0x1b0>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	60fb      	str	r3, [r7, #12]
 800d8b6:	e00c      	b.n	800d8d2 <tcp_close_shutdown+0xca>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d104      	bne.n	800d8cc <tcp_close_shutdown+0xc4>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	60da      	str	r2, [r3, #12]
 800d8ca:	e005      	b.n	800d8d8 <tcp_close_shutdown+0xd0>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1ef      	bne.n	800d8b8 <tcp_close_shutdown+0xb0>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	60da      	str	r2, [r3, #12]
 800d8de:	4b37      	ldr	r3, [pc, #220]	@ (800d9bc <tcp_close_shutdown+0x1b4>)
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d8e4:	4b36      	ldr	r3, [pc, #216]	@ (800d9c0 <tcp_close_shutdown+0x1b8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d102      	bne.n	800d8f4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d8ee:	f003 fc19 	bl	8011124 <tcp_trigger_input_pcb_close>
 800d8f2:	e002      	b.n	800d8fa <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fed5 	bl	800d6a4 <tcp_free>
      }
      return ERR_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e050      	b.n	800d9a0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7d1b      	ldrb	r3, [r3, #20]
 800d902:	2b02      	cmp	r3, #2
 800d904:	d03b      	beq.n	800d97e <tcp_close_shutdown+0x176>
 800d906:	2b02      	cmp	r3, #2
 800d908:	dc44      	bgt.n	800d994 <tcp_close_shutdown+0x18c>
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d002      	beq.n	800d914 <tcp_close_shutdown+0x10c>
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d02a      	beq.n	800d968 <tcp_close_shutdown+0x160>
 800d912:	e03f      	b.n	800d994 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	8adb      	ldrh	r3, [r3, #22]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d021      	beq.n	800d960 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d91c:	4b29      	ldr	r3, [pc, #164]	@ (800d9c4 <tcp_close_shutdown+0x1bc>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	429a      	cmp	r2, r3
 800d924:	d105      	bne.n	800d932 <tcp_close_shutdown+0x12a>
 800d926:	4b27      	ldr	r3, [pc, #156]	@ (800d9c4 <tcp_close_shutdown+0x1bc>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	4a25      	ldr	r2, [pc, #148]	@ (800d9c4 <tcp_close_shutdown+0x1bc>)
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	e013      	b.n	800d95a <tcp_close_shutdown+0x152>
 800d932:	4b24      	ldr	r3, [pc, #144]	@ (800d9c4 <tcp_close_shutdown+0x1bc>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	60bb      	str	r3, [r7, #8]
 800d938:	e00c      	b.n	800d954 <tcp_close_shutdown+0x14c>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	d104      	bne.n	800d94e <tcp_close_shutdown+0x146>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	68da      	ldr	r2, [r3, #12]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	60da      	str	r2, [r3, #12]
 800d94c:	e005      	b.n	800d95a <tcp_close_shutdown+0x152>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	60bb      	str	r3, [r7, #8]
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1ef      	bne.n	800d93a <tcp_close_shutdown+0x132>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff fe9f 	bl	800d6a4 <tcp_free>
      break;
 800d966:	e01a      	b.n	800d99e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff ff13 	bl	800d794 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d96e:	6879      	ldr	r1, [r7, #4]
 800d970:	4815      	ldr	r0, [pc, #84]	@ (800d9c8 <tcp_close_shutdown+0x1c0>)
 800d972:	f001 fb2b 	bl	800efcc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff feb0 	bl	800d6dc <tcp_free_listen>
      break;
 800d97c:	e00f      	b.n	800d99e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	480d      	ldr	r0, [pc, #52]	@ (800d9b8 <tcp_close_shutdown+0x1b0>)
 800d982:	f001 fb23 	bl	800efcc <tcp_pcb_remove>
 800d986:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <tcp_close_shutdown+0x1b4>)
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fe89 	bl	800d6a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d992:	e004      	b.n	800d99e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f819 	bl	800d9cc <tcp_close_shutdown_fin>
 800d99a:	4603      	mov	r3, r0
 800d99c:	e000      	b.n	800d9a0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a8:	0801b164 	.word	0x0801b164
 800d9ac:	0801b238 	.word	0x0801b238
 800d9b0:	0801b1a8 	.word	0x0801b1a8
 800d9b4:	0801b258 	.word	0x0801b258
 800d9b8:	200157d4 	.word	0x200157d4
 800d9bc:	200157dc 	.word	0x200157dc
 800d9c0:	20015814 	.word	0x20015814
 800d9c4:	200157cc 	.word	0x200157cc
 800d9c8:	200157d0 	.word	0x200157d0

0800d9cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d106      	bne.n	800d9e8 <tcp_close_shutdown_fin+0x1c>
 800d9da:	4b2e      	ldr	r3, [pc, #184]	@ (800da94 <tcp_close_shutdown_fin+0xc8>)
 800d9dc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d9e0:	492d      	ldr	r1, [pc, #180]	@ (800da98 <tcp_close_shutdown_fin+0xcc>)
 800d9e2:	482e      	ldr	r0, [pc, #184]	@ (800da9c <tcp_close_shutdown_fin+0xd0>)
 800d9e4:	f00a fe6c 	bl	80186c0 <iprintf>

  switch (pcb->state) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	7d1b      	ldrb	r3, [r3, #20]
 800d9ec:	2b07      	cmp	r3, #7
 800d9ee:	d020      	beq.n	800da32 <tcp_close_shutdown_fin+0x66>
 800d9f0:	2b07      	cmp	r3, #7
 800d9f2:	dc2b      	bgt.n	800da4c <tcp_close_shutdown_fin+0x80>
 800d9f4:	2b03      	cmp	r3, #3
 800d9f6:	d002      	beq.n	800d9fe <tcp_close_shutdown_fin+0x32>
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	d00d      	beq.n	800da18 <tcp_close_shutdown_fin+0x4c>
 800d9fc:	e026      	b.n	800da4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f004 f9f8 	bl	8011df4 <tcp_send_fin>
 800da04:	4603      	mov	r3, r0
 800da06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d11f      	bne.n	800da50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2205      	movs	r2, #5
 800da14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da16:	e01b      	b.n	800da50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f004 f9eb 	bl	8011df4 <tcp_send_fin>
 800da1e:	4603      	mov	r3, r0
 800da20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d114      	bne.n	800da54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2205      	movs	r2, #5
 800da2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da30:	e010      	b.n	800da54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f004 f9de 	bl	8011df4 <tcp_send_fin>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d109      	bne.n	800da58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2209      	movs	r2, #9
 800da48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da4a:	e005      	b.n	800da58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	e01c      	b.n	800da8a <tcp_close_shutdown_fin+0xbe>
      break;
 800da50:	bf00      	nop
 800da52:	e002      	b.n	800da5a <tcp_close_shutdown_fin+0x8e>
      break;
 800da54:	bf00      	nop
 800da56:	e000      	b.n	800da5a <tcp_close_shutdown_fin+0x8e>
      break;
 800da58:	bf00      	nop
  }

  if (err == ERR_OK) {
 800da5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d103      	bne.n	800da6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f004 fb04 	bl	8012070 <tcp_output>
 800da68:	e00d      	b.n	800da86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800da6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da72:	d108      	bne.n	800da86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8b5b      	ldrh	r3, [r3, #26]
 800da78:	f043 0308 	orr.w	r3, r3, #8
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	e001      	b.n	800da8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800da86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	0801b164 	.word	0x0801b164
 800da98:	0801b214 	.word	0x0801b214
 800da9c:	0801b1a8 	.word	0x0801b1a8

0800daa0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d109      	bne.n	800dac2 <tcp_close+0x22>
 800daae:	4b0f      	ldr	r3, [pc, #60]	@ (800daec <tcp_close+0x4c>)
 800dab0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800dab4:	490e      	ldr	r1, [pc, #56]	@ (800daf0 <tcp_close+0x50>)
 800dab6:	480f      	ldr	r0, [pc, #60]	@ (800daf4 <tcp_close+0x54>)
 800dab8:	f00a fe02 	bl	80186c0 <iprintf>
 800dabc:	f06f 030f 	mvn.w	r3, #15
 800dac0:	e00f      	b.n	800dae2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	7d1b      	ldrb	r3, [r3, #20]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d006      	beq.n	800dad8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	8b5b      	ldrh	r3, [r3, #26]
 800dace:	f043 0310 	orr.w	r3, r3, #16
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dad8:	2101      	movs	r1, #1
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff fe94 	bl	800d808 <tcp_close_shutdown>
 800dae0:	4603      	mov	r3, r0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0801b164 	.word	0x0801b164
 800daf0:	0801b274 	.word	0x0801b274
 800daf4:	0801b1a8 	.word	0x0801b1a8

0800daf8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d109      	bne.n	800db1e <tcp_shutdown+0x26>
 800db0a:	4b26      	ldr	r3, [pc, #152]	@ (800dba4 <tcp_shutdown+0xac>)
 800db0c:	f240 2207 	movw	r2, #519	@ 0x207
 800db10:	4925      	ldr	r1, [pc, #148]	@ (800dba8 <tcp_shutdown+0xb0>)
 800db12:	4826      	ldr	r0, [pc, #152]	@ (800dbac <tcp_shutdown+0xb4>)
 800db14:	f00a fdd4 	bl	80186c0 <iprintf>
 800db18:	f06f 030f 	mvn.w	r3, #15
 800db1c:	e03d      	b.n	800db9a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	7d1b      	ldrb	r3, [r3, #20]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d102      	bne.n	800db2c <tcp_shutdown+0x34>
    return ERR_CONN;
 800db26:	f06f 030a 	mvn.w	r3, #10
 800db2a:	e036      	b.n	800db9a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d01b      	beq.n	800db6a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	8b5b      	ldrh	r3, [r3, #26]
 800db36:	f043 0310 	orr.w	r3, r3, #16
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d005      	beq.n	800db52 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800db46:	2101      	movs	r1, #1
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f7ff fe5d 	bl	800d808 <tcp_close_shutdown>
 800db4e:	4603      	mov	r3, r0
 800db50:	e023      	b.n	800db9a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db56:	2b00      	cmp	r3, #0
 800db58:	d007      	beq.n	800db6a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fae4 	bl	800d12c <pbuf_free>
      pcb->refused_data = NULL;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d013      	beq.n	800db98 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	7d1b      	ldrb	r3, [r3, #20]
 800db74:	2b04      	cmp	r3, #4
 800db76:	dc02      	bgt.n	800db7e <tcp_shutdown+0x86>
 800db78:	2b03      	cmp	r3, #3
 800db7a:	da02      	bge.n	800db82 <tcp_shutdown+0x8a>
 800db7c:	e009      	b.n	800db92 <tcp_shutdown+0x9a>
 800db7e:	2b07      	cmp	r3, #7
 800db80:	d107      	bne.n	800db92 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	4619      	mov	r1, r3
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7ff fe3d 	bl	800d808 <tcp_close_shutdown>
 800db8e:	4603      	mov	r3, r0
 800db90:	e003      	b.n	800db9a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800db92:	f06f 030a 	mvn.w	r3, #10
 800db96:	e000      	b.n	800db9a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	0801b164 	.word	0x0801b164
 800dba8:	0801b28c 	.word	0x0801b28c
 800dbac:	0801b1a8 	.word	0x0801b1a8

0800dbb0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b08e      	sub	sp, #56	@ 0x38
 800dbb4:	af04      	add	r7, sp, #16
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d107      	bne.n	800dbd0 <tcp_abandon+0x20>
 800dbc0:	4b4d      	ldr	r3, [pc, #308]	@ (800dcf8 <tcp_abandon+0x148>)
 800dbc2:	f240 223d 	movw	r2, #573	@ 0x23d
 800dbc6:	494d      	ldr	r1, [pc, #308]	@ (800dcfc <tcp_abandon+0x14c>)
 800dbc8:	484d      	ldr	r0, [pc, #308]	@ (800dd00 <tcp_abandon+0x150>)
 800dbca:	f00a fd79 	bl	80186c0 <iprintf>
 800dbce:	e090      	b.n	800dcf2 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7d1b      	ldrb	r3, [r3, #20]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d106      	bne.n	800dbe6 <tcp_abandon+0x36>
 800dbd8:	4b47      	ldr	r3, [pc, #284]	@ (800dcf8 <tcp_abandon+0x148>)
 800dbda:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800dbde:	4949      	ldr	r1, [pc, #292]	@ (800dd04 <tcp_abandon+0x154>)
 800dbe0:	4847      	ldr	r0, [pc, #284]	@ (800dd00 <tcp_abandon+0x150>)
 800dbe2:	f00a fd6d 	bl	80186c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7d1b      	ldrb	r3, [r3, #20]
 800dbea:	2b0a      	cmp	r3, #10
 800dbec:	d107      	bne.n	800dbfe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dbee:	6879      	ldr	r1, [r7, #4]
 800dbf0:	4845      	ldr	r0, [pc, #276]	@ (800dd08 <tcp_abandon+0x158>)
 800dbf2:	f001 f9eb 	bl	800efcc <tcp_pcb_remove>
    tcp_free(pcb);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fd54 	bl	800d6a4 <tcp_free>
 800dbfc:	e079      	b.n	800dcf2 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc18:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	7d1b      	ldrb	r3, [r3, #20]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d126      	bne.n	800dc76 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	8adb      	ldrh	r3, [r3, #22]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02e      	beq.n	800dc8e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc30:	4b36      	ldr	r3, [pc, #216]	@ (800dd0c <tcp_abandon+0x15c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d105      	bne.n	800dc46 <tcp_abandon+0x96>
 800dc3a:	4b34      	ldr	r3, [pc, #208]	@ (800dd0c <tcp_abandon+0x15c>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	4a32      	ldr	r2, [pc, #200]	@ (800dd0c <tcp_abandon+0x15c>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	e013      	b.n	800dc6e <tcp_abandon+0xbe>
 800dc46:	4b31      	ldr	r3, [pc, #196]	@ (800dd0c <tcp_abandon+0x15c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	61fb      	str	r3, [r7, #28]
 800dc4c:	e00c      	b.n	800dc68 <tcp_abandon+0xb8>
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d104      	bne.n	800dc62 <tcp_abandon+0xb2>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68da      	ldr	r2, [r3, #12]
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	60da      	str	r2, [r3, #12]
 800dc60:	e005      	b.n	800dc6e <tcp_abandon+0xbe>
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1ef      	bne.n	800dc4e <tcp_abandon+0x9e>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	e00b      	b.n	800dc8e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8adb      	ldrh	r3, [r3, #22]
 800dc7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc80:	6879      	ldr	r1, [r7, #4]
 800dc82:	4823      	ldr	r0, [pc, #140]	@ (800dd10 <tcp_abandon+0x160>)
 800dc84:	f001 f9a2 	bl	800efcc <tcp_pcb_remove>
 800dc88:	4b22      	ldr	r3, [pc, #136]	@ (800dd14 <tcp_abandon+0x164>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d004      	beq.n	800dca0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 feaa 	bl	800e9f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d004      	beq.n	800dcb2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcac:	4618      	mov	r0, r3
 800dcae:	f000 fea1 	bl	800e9f4 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00e      	beq.n	800dcd6 <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	8b12      	ldrh	r2, [r2, #24]
 800dcc2:	9202      	str	r2, [sp, #8]
 800dcc4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dcc6:	9201      	str	r2, [sp, #4]
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	460b      	mov	r3, r1
 800dccc:	697a      	ldr	r2, [r7, #20]
 800dcce:	69b9      	ldr	r1, [r7, #24]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f004 ffa3 	bl	8012c1c <tcp_rst>
    }
    last_state = pcb->state;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7d1b      	ldrb	r3, [r3, #20]
 800dcda:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff fce1 	bl	800d6a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <tcp_abandon+0x142>
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	f06f 010c 	mvn.w	r1, #12
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	4798      	blx	r3
  }
}
 800dcf2:	3728      	adds	r7, #40	@ 0x28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	0801b164 	.word	0x0801b164
 800dcfc:	0801b2a8 	.word	0x0801b2a8
 800dd00:	0801b1a8 	.word	0x0801b1a8
 800dd04:	0801b2c4 	.word	0x0801b2c4
 800dd08:	200157d8 	.word	0x200157d8
 800dd0c:	200157cc 	.word	0x200157cc
 800dd10:	200157d4 	.word	0x200157d4
 800dd14:	200157dc 	.word	0x200157dc

0800dd18 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd20:	2101      	movs	r1, #1
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff ff44 	bl	800dbb0 <tcp_abandon>
}
 800dd28:	bf00      	nop
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dd3e:	2304      	movs	r3, #4
 800dd40:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dd48:	4b3e      	ldr	r3, [pc, #248]	@ (800de44 <tcp_bind+0x114>)
 800dd4a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <tcp_bind+0x36>
 800dd52:	4b3d      	ldr	r3, [pc, #244]	@ (800de48 <tcp_bind+0x118>)
 800dd54:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800dd58:	493c      	ldr	r1, [pc, #240]	@ (800de4c <tcp_bind+0x11c>)
 800dd5a:	483d      	ldr	r0, [pc, #244]	@ (800de50 <tcp_bind+0x120>)
 800dd5c:	f00a fcb0 	bl	80186c0 <iprintf>
 800dd60:	f06f 030f 	mvn.w	r3, #15
 800dd64:	e06a      	b.n	800de3c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	7d1b      	ldrb	r3, [r3, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d009      	beq.n	800dd82 <tcp_bind+0x52>
 800dd6e:	4b36      	ldr	r3, [pc, #216]	@ (800de48 <tcp_bind+0x118>)
 800dd70:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800dd74:	4937      	ldr	r1, [pc, #220]	@ (800de54 <tcp_bind+0x124>)
 800dd76:	4836      	ldr	r0, [pc, #216]	@ (800de50 <tcp_bind+0x120>)
 800dd78:	f00a fca2 	bl	80186c0 <iprintf>
 800dd7c:	f06f 0305 	mvn.w	r3, #5
 800dd80:	e05c      	b.n	800de3c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dd82:	88fb      	ldrh	r3, [r7, #6]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d109      	bne.n	800dd9c <tcp_bind+0x6c>
    port = tcp_new_port();
 800dd88:	f000 f9e0 	bl	800e14c <tcp_new_port>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d135      	bne.n	800de02 <tcp_bind+0xd2>
      return ERR_BUF;
 800dd96:	f06f 0301 	mvn.w	r3, #1
 800dd9a:	e04f      	b.n	800de3c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	e02b      	b.n	800ddfa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dda2:	4a2d      	ldr	r2, [pc, #180]	@ (800de58 <tcp_bind+0x128>)
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	61bb      	str	r3, [r7, #24]
 800ddae:	e01e      	b.n	800ddee <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	8adb      	ldrh	r3, [r3, #22]
 800ddb4:	88fa      	ldrh	r2, [r7, #6]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d116      	bne.n	800dde8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ddba:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d010      	beq.n	800dde2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <tcp_bind+0xb2>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d009      	beq.n	800dde2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d005      	beq.n	800dde2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d102      	bne.n	800dde8 <tcp_bind+0xb8>
              return ERR_USE;
 800dde2:	f06f 0307 	mvn.w	r3, #7
 800dde6:	e029      	b.n	800de3c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	61bb      	str	r3, [r7, #24]
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1dd      	bne.n	800ddb0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	61fb      	str	r3, [r7, #28]
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	dbcf      	blt.n	800dda2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00c      	beq.n	800de22 <tcp_bind+0xf2>
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d008      	beq.n	800de22 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <tcp_bind+0xec>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	e000      	b.n	800de1e <tcp_bind+0xee>
 800de1c:	2300      	movs	r3, #0
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	88fa      	ldrh	r2, [r7, #6]
 800de26:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800de28:	4b0c      	ldr	r3, [pc, #48]	@ (800de5c <tcp_bind+0x12c>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	60da      	str	r2, [r3, #12]
 800de30:	4a0a      	ldr	r2, [pc, #40]	@ (800de5c <tcp_bind+0x12c>)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	f005 f8b3 	bl	8012fa0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3720      	adds	r7, #32
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	080267d4 	.word	0x080267d4
 800de48:	0801b164 	.word	0x0801b164
 800de4c:	0801b2f8 	.word	0x0801b2f8
 800de50:	0801b1a8 	.word	0x0801b1a8
 800de54:	0801b310 	.word	0x0801b310
 800de58:	0802679c 	.word	0x0802679c
 800de5c:	200157cc 	.word	0x200157cc

0800de60 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	4613      	mov	r3, r2
 800de6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <tcp_accept_null+0x22>
 800de74:	4b07      	ldr	r3, [pc, #28]	@ (800de94 <tcp_accept_null+0x34>)
 800de76:	f240 320f 	movw	r2, #783	@ 0x30f
 800de7a:	4907      	ldr	r1, [pc, #28]	@ (800de98 <tcp_accept_null+0x38>)
 800de7c:	4807      	ldr	r0, [pc, #28]	@ (800de9c <tcp_accept_null+0x3c>)
 800de7e:	f00a fc1f 	bl	80186c0 <iprintf>

  tcp_abort(pcb);
 800de82:	68b8      	ldr	r0, [r7, #8]
 800de84:	f7ff ff48 	bl	800dd18 <tcp_abort>

  return ERR_ABRT;
 800de88:	f06f 030c 	mvn.w	r3, #12
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	0801b164 	.word	0x0801b164
 800de98:	0801b338 	.word	0x0801b338
 800de9c:	0801b1a8 	.word	0x0801b1a8

0800dea0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	460b      	mov	r3, r1
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d109      	bne.n	800decc <tcp_listen_with_backlog_and_err+0x2c>
 800deb8:	4b47      	ldr	r3, [pc, #284]	@ (800dfd8 <tcp_listen_with_backlog_and_err+0x138>)
 800deba:	f240 3259 	movw	r2, #857	@ 0x359
 800debe:	4947      	ldr	r1, [pc, #284]	@ (800dfdc <tcp_listen_with_backlog_and_err+0x13c>)
 800dec0:	4847      	ldr	r0, [pc, #284]	@ (800dfe0 <tcp_listen_with_backlog_and_err+0x140>)
 800dec2:	f00a fbfd 	bl	80186c0 <iprintf>
 800dec6:	23f0      	movs	r3, #240	@ 0xf0
 800dec8:	76fb      	strb	r3, [r7, #27]
 800deca:	e079      	b.n	800dfc0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	7d1b      	ldrb	r3, [r3, #20]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d009      	beq.n	800dee8 <tcp_listen_with_backlog_and_err+0x48>
 800ded4:	4b40      	ldr	r3, [pc, #256]	@ (800dfd8 <tcp_listen_with_backlog_and_err+0x138>)
 800ded6:	f240 325a 	movw	r2, #858	@ 0x35a
 800deda:	4942      	ldr	r1, [pc, #264]	@ (800dfe4 <tcp_listen_with_backlog_and_err+0x144>)
 800dedc:	4840      	ldr	r0, [pc, #256]	@ (800dfe0 <tcp_listen_with_backlog_and_err+0x140>)
 800dede:	f00a fbef 	bl	80186c0 <iprintf>
 800dee2:	23f1      	movs	r3, #241	@ 0xf1
 800dee4:	76fb      	strb	r3, [r7, #27]
 800dee6:	e06b      	b.n	800dfc0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d104      	bne.n	800defa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800def4:	23f7      	movs	r3, #247	@ 0xf7
 800def6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800def8:	e062      	b.n	800dfc0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800defa:	2002      	movs	r0, #2
 800defc:	f7fe fa6e 	bl	800c3dc <memp_malloc>
 800df00:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800df08:	23ff      	movs	r3, #255	@ 0xff
 800df0a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df0c:	e058      	b.n	800dfc0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	691a      	ldr	r2, [r3, #16]
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8ada      	ldrh	r2, [r3, #22]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	2201      	movs	r2, #1
 800df22:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	7d5a      	ldrb	r2, [r3, #21]
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	7a5a      	ldrb	r2, [r3, #9]
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2200      	movs	r2, #0
 800df38:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	7ada      	ldrb	r2, [r3, #11]
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	7a9a      	ldrb	r2, [r3, #10]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8adb      	ldrh	r3, [r3, #22]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d021      	beq.n	800df9e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800df5a:	4b23      	ldr	r3, [pc, #140]	@ (800dfe8 <tcp_listen_with_backlog_and_err+0x148>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	429a      	cmp	r2, r3
 800df62:	d105      	bne.n	800df70 <tcp_listen_with_backlog_and_err+0xd0>
 800df64:	4b20      	ldr	r3, [pc, #128]	@ (800dfe8 <tcp_listen_with_backlog_and_err+0x148>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	4a1f      	ldr	r2, [pc, #124]	@ (800dfe8 <tcp_listen_with_backlog_and_err+0x148>)
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	e013      	b.n	800df98 <tcp_listen_with_backlog_and_err+0xf8>
 800df70:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <tcp_listen_with_backlog_and_err+0x148>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	e00c      	b.n	800df92 <tcp_listen_with_backlog_and_err+0xf2>
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d104      	bne.n	800df8c <tcp_listen_with_backlog_and_err+0xec>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	e005      	b.n	800df98 <tcp_listen_with_backlog_and_err+0xf8>
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	617b      	str	r3, [r7, #20]
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1ef      	bne.n	800df78 <tcp_listen_with_backlog_and_err+0xd8>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f7ff fb80 	bl	800d6a4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	4a11      	ldr	r2, [pc, #68]	@ (800dfec <tcp_listen_with_backlog_and_err+0x14c>)
 800dfa8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dfaa:	4b11      	ldr	r3, [pc, #68]	@ (800dff0 <tcp_listen_with_backlog_and_err+0x150>)
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	60da      	str	r2, [r3, #12]
 800dfb2:	4a0f      	ldr	r2, [pc, #60]	@ (800dff0 <tcp_listen_with_backlog_and_err+0x150>)
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	f004 fff2 	bl	8012fa0 <tcp_timer_needed>
  res = ERR_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	7efa      	ldrb	r2, [r7, #27]
 800dfca:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dfcc:	69fb      	ldr	r3, [r7, #28]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3720      	adds	r7, #32
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	0801b164 	.word	0x0801b164
 800dfdc:	0801b358 	.word	0x0801b358
 800dfe0:	0801b1a8 	.word	0x0801b1a8
 800dfe4:	0801b388 	.word	0x0801b388
 800dfe8:	200157cc 	.word	0x200157cc
 800dfec:	0800de61 	.word	0x0800de61
 800dff0:	200157d0 	.word	0x200157d0

0800dff4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <tcp_update_rcv_ann_wnd+0x1c>
 800e002:	4b25      	ldr	r3, [pc, #148]	@ (800e098 <tcp_update_rcv_ann_wnd+0xa4>)
 800e004:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e008:	4924      	ldr	r1, [pc, #144]	@ (800e09c <tcp_update_rcv_ann_wnd+0xa8>)
 800e00a:	4825      	ldr	r0, [pc, #148]	@ (800e0a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e00c:	f00a fb58 	bl	80186c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e018:	4413      	add	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e024:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e028:	428a      	cmp	r2, r1
 800e02a:	bf28      	it	cs
 800e02c:	460a      	movcs	r2, r1
 800e02e:	b292      	uxth	r2, r2
 800e030:	4413      	add	r3, r2
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	db08      	blt.n	800e04c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	e020      	b.n	800e08e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	dd03      	ble.n	800e062 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e060:	e014      	b.n	800e08c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e074:	d306      	bcc.n	800e084 <tcp_update_rcv_ann_wnd+0x90>
 800e076:	4b08      	ldr	r3, [pc, #32]	@ (800e098 <tcp_update_rcv_ann_wnd+0xa4>)
 800e078:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e07c:	4909      	ldr	r1, [pc, #36]	@ (800e0a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e07e:	4808      	ldr	r0, [pc, #32]	@ (800e0a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e080:	f00a fb1e 	bl	80186c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	b29a      	uxth	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e08c:	2300      	movs	r3, #0
  }
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	0801b164 	.word	0x0801b164
 800e09c:	0801b3c0 	.word	0x0801b3c0
 800e0a0:	0801b1a8 	.word	0x0801b1a8
 800e0a4:	0801b3e4 	.word	0x0801b3e4

0800e0a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d107      	bne.n	800e0ca <tcp_recved+0x22>
 800e0ba:	4b20      	ldr	r3, [pc, #128]	@ (800e13c <tcp_recved+0x94>)
 800e0bc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e0c0:	491f      	ldr	r1, [pc, #124]	@ (800e140 <tcp_recved+0x98>)
 800e0c2:	4820      	ldr	r0, [pc, #128]	@ (800e144 <tcp_recved+0x9c>)
 800e0c4:	f00a fafc 	bl	80186c0 <iprintf>
 800e0c8:	e034      	b.n	800e134 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	7d1b      	ldrb	r3, [r3, #20]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d106      	bne.n	800e0e0 <tcp_recved+0x38>
 800e0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <tcp_recved+0x94>)
 800e0d4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e0d8:	491b      	ldr	r1, [pc, #108]	@ (800e148 <tcp_recved+0xa0>)
 800e0da:	481a      	ldr	r0, [pc, #104]	@ (800e144 <tcp_recved+0x9c>)
 800e0dc:	f00a faf0 	bl	80186c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e0e4:	887b      	ldrh	r3, [r7, #2]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e0ea:	89fb      	ldrh	r3, [r7, #14]
 800e0ec:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d804      	bhi.n	800e0fe <tcp_recved+0x56>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0f8:	89fa      	ldrh	r2, [r7, #14]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d204      	bcs.n	800e108 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e104:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e106:	e002      	b.n	800e10e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	89fa      	ldrh	r2, [r7, #14]
 800e10c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff ff70 	bl	800dff4 <tcp_update_rcv_ann_wnd>
 800e114:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d909      	bls.n	800e134 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	8b5b      	ldrh	r3, [r3, #26]
 800e124:	f043 0302 	orr.w	r3, r3, #2
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f003 ff9e 	bl	8012070 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	0801b164 	.word	0x0801b164
 800e140:	0801b400 	.word	0x0801b400
 800e144:	0801b1a8 	.word	0x0801b1a8
 800e148:	0801b418 	.word	0x0801b418

0800e14c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e156:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d0 <tcp_new_port+0x84>)
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	3301      	adds	r3, #1
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d0 <tcp_new_port+0x84>)
 800e160:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e162:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d0 <tcp_new_port+0x84>)
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d103      	bne.n	800e176 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e16e:	4b18      	ldr	r3, [pc, #96]	@ (800e1d0 <tcp_new_port+0x84>)
 800e170:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e174:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e176:	2300      	movs	r3, #0
 800e178:	71fb      	strb	r3, [r7, #7]
 800e17a:	e01e      	b.n	800e1ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	4a15      	ldr	r2, [pc, #84]	@ (800e1d4 <tcp_new_port+0x88>)
 800e180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	603b      	str	r3, [r7, #0]
 800e188:	e011      	b.n	800e1ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	8ada      	ldrh	r2, [r3, #22]
 800e18e:	4b10      	ldr	r3, [pc, #64]	@ (800e1d0 <tcp_new_port+0x84>)
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	429a      	cmp	r2, r3
 800e194:	d108      	bne.n	800e1a8 <tcp_new_port+0x5c>
        n++;
 800e196:	88bb      	ldrh	r3, [r7, #4]
 800e198:	3301      	adds	r3, #1
 800e19a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e19c:	88bb      	ldrh	r3, [r7, #4]
 800e19e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1a2:	d3d8      	bcc.n	800e156 <tcp_new_port+0xa>
          return 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e00d      	b.n	800e1c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1ea      	bne.n	800e18a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1b4:	79fb      	ldrb	r3, [r7, #7]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	71fb      	strb	r3, [r7, #7]
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d9dd      	bls.n	800e17c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e1c0:	4b03      	ldr	r3, [pc, #12]	@ (800e1d0 <tcp_new_port+0x84>)
 800e1c2:	881b      	ldrh	r3, [r3, #0]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20000014 	.word	0x20000014
 800e1d4:	0802679c 	.word	0x0802679c

0800e1d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e1d8:	b5b0      	push	{r4, r5, r7, lr}
 800e1da:	b090      	sub	sp, #64	@ 0x40
 800e1dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e1e4:	4b95      	ldr	r3, [pc, #596]	@ (800e43c <tcp_slowtmr+0x264>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	4a94      	ldr	r2, [pc, #592]	@ (800e43c <tcp_slowtmr+0x264>)
 800e1ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e1ee:	4b94      	ldr	r3, [pc, #592]	@ (800e440 <tcp_slowtmr+0x268>)
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	4b92      	ldr	r3, [pc, #584]	@ (800e440 <tcp_slowtmr+0x268>)
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	e000      	b.n	800e1fe <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e1fc:	bf00      	nop
  prev = NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e202:	4b90      	ldr	r3, [pc, #576]	@ (800e444 <tcp_slowtmr+0x26c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e208:	e289      	b.n	800e71e <tcp_slowtmr+0x546>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20c:	7d1b      	ldrb	r3, [r3, #20]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <tcp_slowtmr+0x48>
 800e212:	4b8d      	ldr	r3, [pc, #564]	@ (800e448 <tcp_slowtmr+0x270>)
 800e214:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e218:	498c      	ldr	r1, [pc, #560]	@ (800e44c <tcp_slowtmr+0x274>)
 800e21a:	488d      	ldr	r0, [pc, #564]	@ (800e450 <tcp_slowtmr+0x278>)
 800e21c:	f00a fa50 	bl	80186c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d106      	bne.n	800e236 <tcp_slowtmr+0x5e>
 800e228:	4b87      	ldr	r3, [pc, #540]	@ (800e448 <tcp_slowtmr+0x270>)
 800e22a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e22e:	4989      	ldr	r1, [pc, #548]	@ (800e454 <tcp_slowtmr+0x27c>)
 800e230:	4887      	ldr	r0, [pc, #540]	@ (800e450 <tcp_slowtmr+0x278>)
 800e232:	f00a fa45 	bl	80186c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	7d1b      	ldrb	r3, [r3, #20]
 800e23a:	2b0a      	cmp	r3, #10
 800e23c:	d106      	bne.n	800e24c <tcp_slowtmr+0x74>
 800e23e:	4b82      	ldr	r3, [pc, #520]	@ (800e448 <tcp_slowtmr+0x270>)
 800e240:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e244:	4984      	ldr	r1, [pc, #528]	@ (800e458 <tcp_slowtmr+0x280>)
 800e246:	4882      	ldr	r0, [pc, #520]	@ (800e450 <tcp_slowtmr+0x278>)
 800e248:	f00a fa3a 	bl	80186c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e24e:	7f9a      	ldrb	r2, [r3, #30]
 800e250:	4b7b      	ldr	r3, [pc, #492]	@ (800e440 <tcp_slowtmr+0x268>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	429a      	cmp	r2, r3
 800e256:	d105      	bne.n	800e264 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e262:	e25c      	b.n	800e71e <tcp_slowtmr+0x546>
    pcb->last_timer = tcp_timer_ctr;
 800e264:	4b76      	ldr	r3, [pc, #472]	@ (800e440 <tcp_slowtmr+0x268>)
 800e266:	781a      	ldrb	r2, [r3, #0]
 800e268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e26c:	2300      	movs	r3, #0
 800e26e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d10a      	bne.n	800e296 <tcp_slowtmr+0xbe>
 800e280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e286:	2b05      	cmp	r3, #5
 800e288:	d905      	bls.n	800e296 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e28a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e28e:	3301      	adds	r3, #1
 800e290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e294:	e11e      	b.n	800e4d4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e298:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e29c:	2b0b      	cmp	r3, #11
 800e29e:	d905      	bls.n	800e2ac <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2aa:	e113      	b.n	800e4d4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ae:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d075      	beq.n	800e3a2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d006      	beq.n	800e2cc <tcp_slowtmr+0xf4>
 800e2be:	4b62      	ldr	r3, [pc, #392]	@ (800e448 <tcp_slowtmr+0x270>)
 800e2c0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e2c4:	4965      	ldr	r1, [pc, #404]	@ (800e45c <tcp_slowtmr+0x284>)
 800e2c6:	4862      	ldr	r0, [pc, #392]	@ (800e450 <tcp_slowtmr+0x278>)
 800e2c8:	f00a f9fa 	bl	80186c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d106      	bne.n	800e2e2 <tcp_slowtmr+0x10a>
 800e2d4:	4b5c      	ldr	r3, [pc, #368]	@ (800e448 <tcp_slowtmr+0x270>)
 800e2d6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e2da:	4961      	ldr	r1, [pc, #388]	@ (800e460 <tcp_slowtmr+0x288>)
 800e2dc:	485c      	ldr	r0, [pc, #368]	@ (800e450 <tcp_slowtmr+0x278>)
 800e2de:	f00a f9ef 	bl	80186c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e4:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800e2e8:	2b0b      	cmp	r3, #11
 800e2ea:	d905      	bls.n	800e2f8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2f6:	e0ed      	b.n	800e4d4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800e2fe:	3b01      	subs	r3, #1
 800e300:	4a58      	ldr	r2, [pc, #352]	@ (800e464 <tcp_slowtmr+0x28c>)
 800e302:	5cd3      	ldrb	r3, [r2, r3]
 800e304:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e308:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e30c:	7c7a      	ldrb	r2, [r7, #17]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d907      	bls.n	800e322 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e314:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e318:	3301      	adds	r3, #1
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800e322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e324:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800e328:	7c7a      	ldrb	r2, [r7, #17]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	f200 80d2 	bhi.w	800e4d4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e330:	2301      	movs	r3, #1
 800e332:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d108      	bne.n	800e350 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e33e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e340:	f004 fd60 	bl	8012e04 <tcp_zero_window_probe>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d014      	beq.n	800e374 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e34a:	2300      	movs	r3, #0
 800e34c:	623b      	str	r3, [r7, #32]
 800e34e:	e011      	b.n	800e374 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e352:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e356:	4619      	mov	r1, r3
 800e358:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e35a:	f003 fc03 	bl	8011b64 <tcp_split_unsent_seg>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d107      	bne.n	800e374 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e366:	f003 fe83 	bl	8012070 <tcp_output>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e370:	2300      	movs	r3, #0
 800e372:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 80ac 	beq.w	800e4d4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800e38a:	2b06      	cmp	r3, #6
 800e38c:	f200 80a2 	bhi.w	800e4d4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e392:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800e396:	3301      	adds	r3, #1
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800e3a0:	e098      	b.n	800e4d4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db0f      	blt.n	800e3cc <tcp_slowtmr+0x1f4>
 800e3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3b2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d008      	beq.n	800e3cc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	b21a      	sxth	r2, r3
 800e3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ca:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	db7b      	blt.n	800e4d4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e3dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3de:	f004 f94d 	bl	801267c <tcp_rexmit_rto_prepare>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <tcp_slowtmr+0x220>
 800e3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d171      	bne.n	800e4d4 <tcp_slowtmr+0x2fc>
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d06d      	beq.n	800e4d4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	7d1b      	ldrb	r3, [r3, #20]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d03a      	beq.n	800e476 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e406:	2b0c      	cmp	r3, #12
 800e408:	bf28      	it	cs
 800e40a:	230c      	movcs	r3, #12
 800e40c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e410:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e414:	10db      	asrs	r3, r3, #3
 800e416:	b21b      	sxth	r3, r3
 800e418:	461a      	mov	r2, r3
 800e41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e420:	4413      	add	r3, r2
 800e422:	7efa      	ldrb	r2, [r7, #27]
 800e424:	4910      	ldr	r1, [pc, #64]	@ (800e468 <tcp_slowtmr+0x290>)
 800e426:	5c8a      	ldrb	r2, [r1, r2]
 800e428:	4093      	lsls	r3, r2
 800e42a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e432:	4293      	cmp	r3, r2
 800e434:	dc1a      	bgt.n	800e46c <tcp_slowtmr+0x294>
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	b21a      	sxth	r2, r3
 800e43a:	e019      	b.n	800e470 <tcp_slowtmr+0x298>
 800e43c:	200157c8 	.word	0x200157c8
 800e440:	200157de 	.word	0x200157de
 800e444:	200157d4 	.word	0x200157d4
 800e448:	0801b164 	.word	0x0801b164
 800e44c:	0801b4a8 	.word	0x0801b4a8
 800e450:	0801b1a8 	.word	0x0801b1a8
 800e454:	0801b4d4 	.word	0x0801b4d4
 800e458:	0801b500 	.word	0x0801b500
 800e45c:	0801b530 	.word	0x0801b530
 800e460:	0801b564 	.word	0x0801b564
 800e464:	08026794 	.word	0x08026794
 800e468:	08026784 	.word	0x08026784
 800e46c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e478:	2200      	movs	r2, #0
 800e47a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e484:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e488:	4293      	cmp	r3, r2
 800e48a:	bf28      	it	cs
 800e48c:	4613      	movcs	r3, r2
 800e48e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e490:	8a7b      	ldrh	r3, [r7, #18]
 800e492:	085b      	lsrs	r3, r3, #1
 800e494:	b29a      	uxth	r2, r3
 800e496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e498:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d206      	bcs.n	800e4bc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4b2:	005b      	lsls	r3, r3, #1
 800e4b4:	b29a      	uxth	r2, r3
 800e4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4be:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e4ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4d0:	f004 f944 	bl	801275c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d6:	7d1b      	ldrb	r3, [r3, #20]
 800e4d8:	2b06      	cmp	r3, #6
 800e4da:	d111      	bne.n	800e500 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	8b5b      	ldrh	r3, [r3, #26]
 800e4e0:	f003 0310 	and.w	r3, r3, #16
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00b      	beq.n	800e500 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4e8:	4b92      	ldr	r3, [pc, #584]	@ (800e734 <tcp_slowtmr+0x55c>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	2b28      	cmp	r3, #40	@ 0x28
 800e4f4:	d904      	bls.n	800e500 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e4f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	7a5b      	ldrb	r3, [r3, #9]
 800e504:	f003 0308 	and.w	r3, r3, #8
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d04c      	beq.n	800e5a6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e510:	2b04      	cmp	r3, #4
 800e512:	d003      	beq.n	800e51c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e516:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e518:	2b07      	cmp	r3, #7
 800e51a:	d144      	bne.n	800e5a6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e51c:	4b85      	ldr	r3, [pc, #532]	@ (800e734 <tcp_slowtmr+0x55c>)
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e522:	6a1b      	ldr	r3, [r3, #32]
 800e524:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e52c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800e530:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800e534:	4980      	ldr	r1, [pc, #512]	@ (800e738 <tcp_slowtmr+0x560>)
 800e536:	fba1 1303 	umull	r1, r3, r1, r3
 800e53a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d90a      	bls.n	800e556 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800e540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e544:	3301      	adds	r3, #1
 800e546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e54a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e54e:	3301      	adds	r3, #1
 800e550:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e554:	e027      	b.n	800e5a6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e556:	4b77      	ldr	r3, [pc, #476]	@ (800e734 <tcp_slowtmr+0x55c>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800e566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e568:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800e56c:	4618      	mov	r0, r3
 800e56e:	4b73      	ldr	r3, [pc, #460]	@ (800e73c <tcp_slowtmr+0x564>)
 800e570:	fb00 f303 	mul.w	r3, r0, r3
 800e574:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e576:	4970      	ldr	r1, [pc, #448]	@ (800e738 <tcp_slowtmr+0x560>)
 800e578:	fba1 1303 	umull	r1, r3, r1, r3
 800e57c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e57e:	429a      	cmp	r2, r3
 800e580:	d911      	bls.n	800e5a6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800e582:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e584:	f004 fbfe 	bl	8012d84 <tcp_keepalive>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e58e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e592:	2b00      	cmp	r3, #0
 800e594:	d107      	bne.n	800e5a6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800e596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e598:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800e59c:	3301      	adds	r3, #1
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a2:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 800e5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a8:	7d1b      	ldrb	r3, [r3, #20]
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d10b      	bne.n	800e5c6 <tcp_slowtmr+0x3ee>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5ae:	4b61      	ldr	r3, [pc, #388]	@ (800e734 <tcp_slowtmr+0x55c>)
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b4:	6a1b      	ldr	r3, [r3, #32]
 800e5b6:	1ad3      	subs	r3, r2, r3
 800e5b8:	2b28      	cmp	r3, #40	@ 0x28
 800e5ba:	d904      	bls.n	800e5c6 <tcp_slowtmr+0x3ee>
        ++pcb_remove;
 800e5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ca:	2b09      	cmp	r3, #9
 800e5cc:	d10b      	bne.n	800e5e6 <tcp_slowtmr+0x40e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e5ce:	4b59      	ldr	r3, [pc, #356]	@ (800e734 <tcp_slowtmr+0x55c>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	2bf0      	cmp	r3, #240	@ 0xf0
 800e5da:	d904      	bls.n	800e5e6 <tcp_slowtmr+0x40e>
        ++pcb_remove;
 800e5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d060      	beq.n	800e6b0 <tcp_slowtmr+0x4d8>
      tcp_err_fn err_fn = pcb->errf;
 800e5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5f4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e5f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5f8:	f000 fc9e 	bl	800ef38 <tcp_pcb_purge>
      if (prev != NULL) {
 800e5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d010      	beq.n	800e624 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e602:	4b4f      	ldr	r3, [pc, #316]	@ (800e740 <tcp_slowtmr+0x568>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e608:	429a      	cmp	r2, r3
 800e60a:	d106      	bne.n	800e61a <tcp_slowtmr+0x442>
 800e60c:	4b4d      	ldr	r3, [pc, #308]	@ (800e744 <tcp_slowtmr+0x56c>)
 800e60e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e612:	494d      	ldr	r1, [pc, #308]	@ (800e748 <tcp_slowtmr+0x570>)
 800e614:	484d      	ldr	r0, [pc, #308]	@ (800e74c <tcp_slowtmr+0x574>)
 800e616:	f00a f853 	bl	80186c0 <iprintf>
        prev->next = pcb->next;
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e620:	60da      	str	r2, [r3, #12]
 800e622:	e00f      	b.n	800e644 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e624:	4b46      	ldr	r3, [pc, #280]	@ (800e740 <tcp_slowtmr+0x568>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d006      	beq.n	800e63c <tcp_slowtmr+0x464>
 800e62e:	4b45      	ldr	r3, [pc, #276]	@ (800e744 <tcp_slowtmr+0x56c>)
 800e630:	f240 5271 	movw	r2, #1393	@ 0x571
 800e634:	4946      	ldr	r1, [pc, #280]	@ (800e750 <tcp_slowtmr+0x578>)
 800e636:	4845      	ldr	r0, [pc, #276]	@ (800e74c <tcp_slowtmr+0x574>)
 800e638:	f00a f842 	bl	80186c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	4a3f      	ldr	r2, [pc, #252]	@ (800e740 <tcp_slowtmr+0x568>)
 800e642:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d013      	beq.n	800e674 <tcp_slowtmr+0x49c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e652:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e654:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e658:	3304      	adds	r3, #4
 800e65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e65c:	8ad2      	ldrh	r2, [r2, #22]
 800e65e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e660:	8b09      	ldrh	r1, [r1, #24]
 800e662:	9102      	str	r1, [sp, #8]
 800e664:	9201      	str	r2, [sp, #4]
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	462b      	mov	r3, r5
 800e66a:	4622      	mov	r2, r4
 800e66c:	4601      	mov	r1, r0
 800e66e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e670:	f004 fad4 	bl	8012c1c <tcp_rst>
      err_arg = pcb->callback_arg;
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67c:	7d1b      	ldrb	r3, [r3, #20]
 800e67e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e682:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e68a:	6838      	ldr	r0, [r7, #0]
 800e68c:	f7ff f80a 	bl	800d6a4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e690:	4b30      	ldr	r3, [pc, #192]	@ (800e754 <tcp_slowtmr+0x57c>)
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d004      	beq.n	800e6a6 <tcp_slowtmr+0x4ce>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f06f 010c 	mvn.w	r1, #12
 800e6a2:	68b8      	ldr	r0, [r7, #8]
 800e6a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e6a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e754 <tcp_slowtmr+0x57c>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d037      	beq.n	800e71e <tcp_slowtmr+0x546>
        goto tcp_slowtmr_start;
 800e6ae:	e5a6      	b.n	800e1fe <tcp_slowtmr+0x26>
      prev = pcb;
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6bc:	7f1b      	ldrb	r3, [r3, #28]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c8:	7f1a      	ldrb	r2, [r3, #28]
 800e6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6cc:	7f5b      	ldrb	r3, [r3, #29]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d325      	bcc.n	800e71e <tcp_slowtmr+0x546>
        prev->polltmr = 0;
 800e6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e6d8:	4b1e      	ldr	r3, [pc, #120]	@ (800e754 <tcp_slowtmr+0x57c>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00b      	beq.n	800e700 <tcp_slowtmr+0x528>
 800e6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6f0:	6912      	ldr	r2, [r2, #16]
 800e6f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	4798      	blx	r3
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e6fe:	e002      	b.n	800e706 <tcp_slowtmr+0x52e>
 800e700:	2300      	movs	r3, #0
 800e702:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e706:	4b13      	ldr	r3, [pc, #76]	@ (800e754 <tcp_slowtmr+0x57c>)
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f47f ad76 	bne.w	800e1fc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e710:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e714:	2b00      	cmp	r3, #0
 800e716:	d102      	bne.n	800e71e <tcp_slowtmr+0x546>
          tcp_output(prev);
 800e718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e71a:	f003 fca9 	bl	8012070 <tcp_output>
  while (pcb != NULL) {
 800e71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e720:	2b00      	cmp	r3, #0
 800e722:	f47f ad72 	bne.w	800e20a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e726:	2300      	movs	r3, #0
 800e728:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e72a:	4b0b      	ldr	r3, [pc, #44]	@ (800e758 <tcp_slowtmr+0x580>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e730:	e067      	b.n	800e802 <tcp_slowtmr+0x62a>
 800e732:	bf00      	nop
 800e734:	200157c8 	.word	0x200157c8
 800e738:	10624dd3 	.word	0x10624dd3
 800e73c:	000124f8 	.word	0x000124f8
 800e740:	200157d4 	.word	0x200157d4
 800e744:	0801b164 	.word	0x0801b164
 800e748:	0801b59c 	.word	0x0801b59c
 800e74c:	0801b1a8 	.word	0x0801b1a8
 800e750:	0801b5c8 	.word	0x0801b5c8
 800e754:	200157dc 	.word	0x200157dc
 800e758:	200157d8 	.word	0x200157d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75e:	7d1b      	ldrb	r3, [r3, #20]
 800e760:	2b0a      	cmp	r3, #10
 800e762:	d006      	beq.n	800e772 <tcp_slowtmr+0x59a>
 800e764:	4b2b      	ldr	r3, [pc, #172]	@ (800e814 <tcp_slowtmr+0x63c>)
 800e766:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e76a:	492b      	ldr	r1, [pc, #172]	@ (800e818 <tcp_slowtmr+0x640>)
 800e76c:	482b      	ldr	r0, [pc, #172]	@ (800e81c <tcp_slowtmr+0x644>)
 800e76e:	f009 ffa7 	bl	80186c0 <iprintf>
    pcb_remove = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e778:	4b29      	ldr	r3, [pc, #164]	@ (800e820 <tcp_slowtmr+0x648>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77e:	6a1b      	ldr	r3, [r3, #32]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	2bf0      	cmp	r3, #240	@ 0xf0
 800e784:	d904      	bls.n	800e790 <tcp_slowtmr+0x5b8>
      ++pcb_remove;
 800e786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e78a:	3301      	adds	r3, #1
 800e78c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e794:	2b00      	cmp	r3, #0
 800e796:	d02f      	beq.n	800e7f8 <tcp_slowtmr+0x620>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e79a:	f000 fbcd 	bl	800ef38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d010      	beq.n	800e7c6 <tcp_slowtmr+0x5ee>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e7a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e824 <tcp_slowtmr+0x64c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d106      	bne.n	800e7bc <tcp_slowtmr+0x5e4>
 800e7ae:	4b19      	ldr	r3, [pc, #100]	@ (800e814 <tcp_slowtmr+0x63c>)
 800e7b0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e7b4:	491c      	ldr	r1, [pc, #112]	@ (800e828 <tcp_slowtmr+0x650>)
 800e7b6:	4819      	ldr	r0, [pc, #100]	@ (800e81c <tcp_slowtmr+0x644>)
 800e7b8:	f009 ff82 	bl	80186c0 <iprintf>
        prev->next = pcb->next;
 800e7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7be:	68da      	ldr	r2, [r3, #12]
 800e7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c2:	60da      	str	r2, [r3, #12]
 800e7c4:	e00f      	b.n	800e7e6 <tcp_slowtmr+0x60e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e7c6:	4b17      	ldr	r3, [pc, #92]	@ (800e824 <tcp_slowtmr+0x64c>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d006      	beq.n	800e7de <tcp_slowtmr+0x606>
 800e7d0:	4b10      	ldr	r3, [pc, #64]	@ (800e814 <tcp_slowtmr+0x63c>)
 800e7d2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e7d6:	4915      	ldr	r1, [pc, #84]	@ (800e82c <tcp_slowtmr+0x654>)
 800e7d8:	4810      	ldr	r0, [pc, #64]	@ (800e81c <tcp_slowtmr+0x644>)
 800e7da:	f009 ff71 	bl	80186c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	4a10      	ldr	r2, [pc, #64]	@ (800e824 <tcp_slowtmr+0x64c>)
 800e7e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e7f0:	69f8      	ldr	r0, [r7, #28]
 800e7f2:	f7fe ff57 	bl	800d6a4 <tcp_free>
 800e7f6:	e004      	b.n	800e802 <tcp_slowtmr+0x62a>
    } else {
      prev = pcb;
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1a9      	bne.n	800e75c <tcp_slowtmr+0x584>
    }
  }
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	3730      	adds	r7, #48	@ 0x30
 800e80e:	46bd      	mov	sp, r7
 800e810:	bdb0      	pop	{r4, r5, r7, pc}
 800e812:	bf00      	nop
 800e814:	0801b164 	.word	0x0801b164
 800e818:	0801b5f4 	.word	0x0801b5f4
 800e81c:	0801b1a8 	.word	0x0801b1a8
 800e820:	200157c8 	.word	0x200157c8
 800e824:	200157d8 	.word	0x200157d8
 800e828:	0801b624 	.word	0x0801b624
 800e82c:	0801b64c 	.word	0x0801b64c

0800e830 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e836:	4b2d      	ldr	r3, [pc, #180]	@ (800e8ec <tcp_fasttmr+0xbc>)
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	4b2b      	ldr	r3, [pc, #172]	@ (800e8ec <tcp_fasttmr+0xbc>)
 800e840:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e842:	4b2b      	ldr	r3, [pc, #172]	@ (800e8f0 <tcp_fasttmr+0xc0>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e848:	e048      	b.n	800e8dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	7f9a      	ldrb	r2, [r3, #30]
 800e84e:	4b27      	ldr	r3, [pc, #156]	@ (800e8ec <tcp_fasttmr+0xbc>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	429a      	cmp	r2, r3
 800e854:	d03f      	beq.n	800e8d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e856:	4b25      	ldr	r3, [pc, #148]	@ (800e8ec <tcp_fasttmr+0xbc>)
 800e858:	781a      	ldrb	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8b5b      	ldrh	r3, [r3, #26]
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d010      	beq.n	800e88c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	8b5b      	ldrh	r3, [r3, #26]
 800e86e:	f043 0302 	orr.w	r3, r3, #2
 800e872:	b29a      	uxth	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f003 fbf9 	bl	8012070 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	8b5b      	ldrh	r3, [r3, #26]
 800e882:	f023 0303 	bic.w	r3, r3, #3
 800e886:	b29a      	uxth	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	8b5b      	ldrh	r3, [r3, #26]
 800e890:	f003 0308 	and.w	r3, r3, #8
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	8b5b      	ldrh	r3, [r3, #26]
 800e89c:	f023 0308 	bic.w	r3, r3, #8
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7ff f890 	bl	800d9cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00a      	beq.n	800e8d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e8f4 <tcp_fasttmr+0xc4>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 f819 	bl	800e8f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f4 <tcp_fasttmr+0xc4>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d000      	beq.n	800e8d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e8ce:	e7b8      	b.n	800e842 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	607b      	str	r3, [r7, #4]
 800e8d4:	e002      	b.n	800e8dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1b3      	bne.n	800e84a <tcp_fasttmr+0x1a>
    }
  }
}
 800e8e2:	bf00      	nop
 800e8e4:	bf00      	nop
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	200157de 	.word	0x200157de
 800e8f0:	200157d4 	.word	0x200157d4
 800e8f4:	200157dc 	.word	0x200157dc

0800e8f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e8f8:	b590      	push	{r4, r7, lr}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d109      	bne.n	800e91a <tcp_process_refused_data+0x22>
 800e906:	4b38      	ldr	r3, [pc, #224]	@ (800e9e8 <tcp_process_refused_data+0xf0>)
 800e908:	f240 6209 	movw	r2, #1545	@ 0x609
 800e90c:	4937      	ldr	r1, [pc, #220]	@ (800e9ec <tcp_process_refused_data+0xf4>)
 800e90e:	4838      	ldr	r0, [pc, #224]	@ (800e9f0 <tcp_process_refused_data+0xf8>)
 800e910:	f009 fed6 	bl	80186c0 <iprintf>
 800e914:	f06f 030f 	mvn.w	r3, #15
 800e918:	e061      	b.n	800e9de <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e91e:	7b5b      	ldrb	r3, [r3, #13]
 800e920:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e926:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00b      	beq.n	800e950 <tcp_process_refused_data+0x58>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6918      	ldr	r0, [r3, #16]
 800e942:	2300      	movs	r3, #0
 800e944:	68ba      	ldr	r2, [r7, #8]
 800e946:	6879      	ldr	r1, [r7, #4]
 800e948:	47a0      	blx	r4
 800e94a:	4603      	mov	r3, r0
 800e94c:	73fb      	strb	r3, [r7, #15]
 800e94e:	e007      	b.n	800e960 <tcp_process_refused_data+0x68>
 800e950:	2300      	movs	r3, #0
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	2000      	movs	r0, #0
 800e958:	f000 f87a 	bl	800ea50 <tcp_recv_null>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d12b      	bne.n	800e9c0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e968:	7bbb      	ldrb	r3, [r7, #14]
 800e96a:	f003 0320 	and.w	r3, r3, #32
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d034      	beq.n	800e9dc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e976:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d005      	beq.n	800e98a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e982:	3301      	adds	r3, #1
 800e984:	b29a      	uxth	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00b      	beq.n	800e9ac <tcp_process_refused_data+0xb4>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6918      	ldr	r0, [r3, #16]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	47a0      	blx	r4
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	73fb      	strb	r3, [r7, #15]
 800e9aa:	e001      	b.n	800e9b0 <tcp_process_refused_data+0xb8>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9b4:	f113 0f0d 	cmn.w	r3, #13
 800e9b8:	d110      	bne.n	800e9dc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800e9ba:	f06f 030c 	mvn.w	r3, #12
 800e9be:	e00e      	b.n	800e9de <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800e9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9c4:	f113 0f0d 	cmn.w	r3, #13
 800e9c8:	d102      	bne.n	800e9d0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e9ca:	f06f 030c 	mvn.w	r3, #12
 800e9ce:	e006      	b.n	800e9de <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800e9d6:	f06f 0304 	mvn.w	r3, #4
 800e9da:	e000      	b.n	800e9de <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd90      	pop	{r4, r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	0801b164 	.word	0x0801b164
 800e9ec:	0801b674 	.word	0x0801b674
 800e9f0:	0801b1a8 	.word	0x0801b1a8

0800e9f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e9fc:	e007      	b.n	800ea0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f80a 	bl	800ea1e <tcp_seg_free>
    seg = next;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1f4      	bne.n	800e9fe <tcp_segs_free+0xa>
  }
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00c      	beq.n	800ea46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d004      	beq.n	800ea3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fe fb77 	bl	800d12c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	2003      	movs	r0, #3
 800ea42:	f7fd fd1d 	bl	800c480 <memp_free>
  }
}
 800ea46:	bf00      	nop
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
	...

0800ea50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
 800ea5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d109      	bne.n	800ea78 <tcp_recv_null+0x28>
 800ea64:	4b12      	ldr	r3, [pc, #72]	@ (800eab0 <tcp_recv_null+0x60>)
 800ea66:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ea6a:	4912      	ldr	r1, [pc, #72]	@ (800eab4 <tcp_recv_null+0x64>)
 800ea6c:	4812      	ldr	r0, [pc, #72]	@ (800eab8 <tcp_recv_null+0x68>)
 800ea6e:	f009 fe27 	bl	80186c0 <iprintf>
 800ea72:	f06f 030f 	mvn.w	r3, #15
 800ea76:	e016      	b.n	800eaa6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d009      	beq.n	800ea92 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	891b      	ldrh	r3, [r3, #8]
 800ea82:	4619      	mov	r1, r3
 800ea84:	68b8      	ldr	r0, [r7, #8]
 800ea86:	f7ff fb0f 	bl	800e0a8 <tcp_recved>
    pbuf_free(p);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7fe fb4e 	bl	800d12c <pbuf_free>
 800ea90:	e008      	b.n	800eaa4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d104      	bne.n	800eaa4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea9a:	68b8      	ldr	r0, [r7, #8]
 800ea9c:	f7ff f800 	bl	800daa0 <tcp_close>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	e000      	b.n	800eaa6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	0801b164 	.word	0x0801b164
 800eab4:	0801b6b8 	.word	0x0801b6b8
 800eab8:	0801b1a8 	.word	0x0801b1a8

0800eabc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	db01      	blt.n	800ead2 <tcp_kill_prio+0x16>
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	e000      	b.n	800ead4 <tcp_kill_prio+0x18>
 800ead2:	237f      	movs	r3, #127	@ 0x7f
 800ead4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ead6:	7afb      	ldrb	r3, [r7, #11]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d034      	beq.n	800eb46 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eadc:	7afb      	ldrb	r3, [r7, #11]
 800eade:	3b01      	subs	r3, #1
 800eae0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaea:	4b19      	ldr	r3, [pc, #100]	@ (800eb50 <tcp_kill_prio+0x94>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	617b      	str	r3, [r7, #20]
 800eaf0:	e01f      	b.n	800eb32 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	7d5b      	ldrb	r3, [r3, #21]
 800eaf6:	7afa      	ldrb	r2, [r7, #11]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d80c      	bhi.n	800eb16 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eb00:	7afa      	ldrb	r2, [r7, #11]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d112      	bne.n	800eb2c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eb06:	4b13      	ldr	r3, [pc, #76]	@ (800eb54 <tcp_kill_prio+0x98>)
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d80a      	bhi.n	800eb2c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eb16:	4b0f      	ldr	r3, [pc, #60]	@ (800eb54 <tcp_kill_prio+0x98>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	7d5b      	ldrb	r3, [r3, #21]
 800eb2a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1dc      	bne.n	800eaf2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d004      	beq.n	800eb48 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb3e:	6938      	ldr	r0, [r7, #16]
 800eb40:	f7ff f8ea 	bl	800dd18 <tcp_abort>
 800eb44:	e000      	b.n	800eb48 <tcp_kill_prio+0x8c>
    return;
 800eb46:	bf00      	nop
  }
}
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	200157d4 	.word	0x200157d4
 800eb54:	200157c8 	.word	0x200157c8

0800eb58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	d009      	beq.n	800eb7c <tcp_kill_state+0x24>
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b09      	cmp	r3, #9
 800eb6c:	d006      	beq.n	800eb7c <tcp_kill_state+0x24>
 800eb6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ebd8 <tcp_kill_state+0x80>)
 800eb70:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800eb74:	4919      	ldr	r1, [pc, #100]	@ (800ebdc <tcp_kill_state+0x84>)
 800eb76:	481a      	ldr	r0, [pc, #104]	@ (800ebe0 <tcp_kill_state+0x88>)
 800eb78:	f009 fda2 	bl	80186c0 <iprintf>

  inactivity = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb84:	4b17      	ldr	r3, [pc, #92]	@ (800ebe4 <tcp_kill_state+0x8c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	617b      	str	r3, [r7, #20]
 800eb8a:	e017      	b.n	800ebbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	7d1b      	ldrb	r3, [r3, #20]
 800eb90:	79fa      	ldrb	r2, [r7, #7]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d10f      	bne.n	800ebb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb96:	4b14      	ldr	r3, [pc, #80]	@ (800ebe8 <tcp_kill_state+0x90>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d807      	bhi.n	800ebb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eba6:	4b10      	ldr	r3, [pc, #64]	@ (800ebe8 <tcp_kill_state+0x90>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	617b      	str	r3, [r7, #20]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1e4      	bne.n	800eb8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ebc8:	2100      	movs	r1, #0
 800ebca:	6938      	ldr	r0, [r7, #16]
 800ebcc:	f7fe fff0 	bl	800dbb0 <tcp_abandon>
  }
}
 800ebd0:	bf00      	nop
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	0801b164 	.word	0x0801b164
 800ebdc:	0801b6d4 	.word	0x0801b6d4
 800ebe0:	0801b1a8 	.word	0x0801b1a8
 800ebe4:	200157d4 	.word	0x200157d4
 800ebe8:	200157c8 	.word	0x200157c8

0800ebec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfa:	4b12      	ldr	r3, [pc, #72]	@ (800ec44 <tcp_kill_timewait+0x58>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e012      	b.n	800ec28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec02:	4b11      	ldr	r3, [pc, #68]	@ (800ec48 <tcp_kill_timewait+0x5c>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d807      	bhi.n	800ec22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <tcp_kill_timewait+0x5c>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e9      	bne.n	800ec02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d002      	beq.n	800ec3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec34:	68b8      	ldr	r0, [r7, #8]
 800ec36:	f7ff f86f 	bl	800dd18 <tcp_abort>
  }
}
 800ec3a:	bf00      	nop
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	200157d8 	.word	0x200157d8
 800ec48:	200157c8 	.word	0x200157c8

0800ec4c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec52:	4b10      	ldr	r3, [pc, #64]	@ (800ec94 <tcp_handle_closepend+0x48>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec58:	e014      	b.n	800ec84 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	8b5b      	ldrh	r3, [r3, #26]
 800ec64:	f003 0308 	and.w	r3, r3, #8
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d009      	beq.n	800ec80 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	8b5b      	ldrh	r3, [r3, #26]
 800ec70:	f023 0308 	bic.w	r3, r3, #8
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7fe fea6 	bl	800d9cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e7      	bne.n	800ec5a <tcp_handle_closepend+0xe>
  }
}
 800ec8a:	bf00      	nop
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	200157d4 	.word	0x200157d4

0800ec98 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	4603      	mov	r3, r0
 800eca0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca2:	2001      	movs	r0, #1
 800eca4:	f7fd fb9a 	bl	800c3dc <memp_malloc>
 800eca8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d126      	bne.n	800ecfe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ecb0:	f7ff ffcc 	bl	800ec4c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ecb4:	f7ff ff9a 	bl	800ebec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecb8:	2001      	movs	r0, #1
 800ecba:	f7fd fb8f 	bl	800c3dc <memp_malloc>
 800ecbe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d11b      	bne.n	800ecfe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ecc6:	2009      	movs	r0, #9
 800ecc8:	f7ff ff46 	bl	800eb58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eccc:	2001      	movs	r0, #1
 800ecce:	f7fd fb85 	bl	800c3dc <memp_malloc>
 800ecd2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d111      	bne.n	800ecfe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ecda:	2008      	movs	r0, #8
 800ecdc:	f7ff ff3c 	bl	800eb58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ece0:	2001      	movs	r0, #1
 800ece2:	f7fd fb7b 	bl	800c3dc <memp_malloc>
 800ece6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d107      	bne.n	800ecfe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ecee:	79fb      	ldrb	r3, [r7, #7]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7ff fee3 	bl	800eabc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecf6:	2001      	movs	r0, #1
 800ecf8:	f7fd fb70 	bl	800c3dc <memp_malloc>
 800ecfc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d03f      	beq.n	800ed84 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ed04:	2298      	movs	r2, #152	@ 0x98
 800ed06:	2100      	movs	r1, #0
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f009 fd78 	bl	80187fe <memset>
    pcb->prio = prio;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	79fa      	ldrb	r2, [r7, #7]
 800ed12:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 800ed1a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f640 3268 	movw	r2, #2920	@ 0xb68
 800ed24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	22ff      	movs	r2, #255	@ 0xff
 800ed32:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ed3a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2206      	movs	r2, #6
 800ed40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2206      	movs	r2, #6
 800ed48:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed50:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed90 <tcp_alloc+0xf8>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed62:	4b0c      	ldr	r3, [pc, #48]	@ (800ed94 <tcp_alloc+0xfc>)
 800ed64:	781a      	ldrb	r2, [r3, #0]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 800ed70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	4a08      	ldr	r2, [pc, #32]	@ (800ed98 <tcp_alloc+0x100>)
 800ed78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4a07      	ldr	r2, [pc, #28]	@ (800ed9c <tcp_alloc+0x104>)
 800ed80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed84:	68fb      	ldr	r3, [r7, #12]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	200157c8 	.word	0x200157c8
 800ed94:	200157de 	.word	0x200157de
 800ed98:	0800ea51 	.word	0x0800ea51
 800ed9c:	006ddd00 	.word	0x006ddd00

0800eda0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800edaa:	2040      	movs	r0, #64	@ 0x40
 800edac:	f7ff ff74 	bl	800ec98 <tcp_alloc>
 800edb0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800edb2:	68fb      	ldr	r3, [r7, #12]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	611a      	str	r2, [r3, #16]
  }
}
 800edd2:	bf00      	nop
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
	...

0800ede0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00e      	beq.n	800ee0e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	7d1b      	ldrb	r3, [r3, #20]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d106      	bne.n	800ee06 <tcp_recv+0x26>
 800edf8:	4b07      	ldr	r3, [pc, #28]	@ (800ee18 <tcp_recv+0x38>)
 800edfa:	f240 72df 	movw	r2, #2015	@ 0x7df
 800edfe:	4907      	ldr	r1, [pc, #28]	@ (800ee1c <tcp_recv+0x3c>)
 800ee00:	4807      	ldr	r0, [pc, #28]	@ (800ee20 <tcp_recv+0x40>)
 800ee02:	f009 fc5d 	bl	80186c0 <iprintf>
    pcb->recv = recv;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	683a      	ldr	r2, [r7, #0]
 800ee0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	0801b164 	.word	0x0801b164
 800ee1c:	0801b6e4 	.word	0x0801b6e4
 800ee20:	0801b1a8 	.word	0x0801b1a8

0800ee24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00d      	beq.n	800ee50 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	7d1b      	ldrb	r3, [r3, #20]
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d106      	bne.n	800ee4a <tcp_sent+0x26>
 800ee3c:	4b06      	ldr	r3, [pc, #24]	@ (800ee58 <tcp_sent+0x34>)
 800ee3e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ee42:	4906      	ldr	r1, [pc, #24]	@ (800ee5c <tcp_sent+0x38>)
 800ee44:	4806      	ldr	r0, [pc, #24]	@ (800ee60 <tcp_sent+0x3c>)
 800ee46:	f009 fc3b 	bl	80186c0 <iprintf>
    pcb->sent = sent;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 800ee50:	bf00      	nop
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	0801b164 	.word	0x0801b164
 800ee5c:	0801b70c 	.word	0x0801b70c
 800ee60:	0801b1a8 	.word	0x0801b1a8

0800ee64 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00e      	beq.n	800ee92 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d106      	bne.n	800ee8a <tcp_err+0x26>
 800ee7c:	4b07      	ldr	r3, [pc, #28]	@ (800ee9c <tcp_err+0x38>)
 800ee7e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ee82:	4907      	ldr	r1, [pc, #28]	@ (800eea0 <tcp_err+0x3c>)
 800ee84:	4807      	ldr	r0, [pc, #28]	@ (800eea4 <tcp_err+0x40>)
 800ee86:	f009 fc1b 	bl	80186c0 <iprintf>
    pcb->errf = err;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	683a      	ldr	r2, [r7, #0]
 800ee8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	0801b164 	.word	0x0801b164
 800eea0:	0801b734 	.word	0x0801b734
 800eea4:	0801b1a8 	.word	0x0801b1a8

0800eea8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d008      	beq.n	800eeca <tcp_accept+0x22>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	7d1b      	ldrb	r3, [r3, #20]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d104      	bne.n	800eeca <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	619a      	str	r2, [r3, #24]
  }
}
 800eeca:	bf00      	nop
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
	...

0800eed8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	4613      	mov	r3, r2
 800eee4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d107      	bne.n	800eefc <tcp_poll+0x24>
 800eeec:	4b0e      	ldr	r3, [pc, #56]	@ (800ef28 <tcp_poll+0x50>)
 800eeee:	f640 023d 	movw	r2, #2109	@ 0x83d
 800eef2:	490e      	ldr	r1, [pc, #56]	@ (800ef2c <tcp_poll+0x54>)
 800eef4:	480e      	ldr	r0, [pc, #56]	@ (800ef30 <tcp_poll+0x58>)
 800eef6:	f009 fbe3 	bl	80186c0 <iprintf>
 800eefa:	e011      	b.n	800ef20 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	7d1b      	ldrb	r3, [r3, #20]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d106      	bne.n	800ef12 <tcp_poll+0x3a>
 800ef04:	4b08      	ldr	r3, [pc, #32]	@ (800ef28 <tcp_poll+0x50>)
 800ef06:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ef0a:	490a      	ldr	r1, [pc, #40]	@ (800ef34 <tcp_poll+0x5c>)
 800ef0c:	4808      	ldr	r0, [pc, #32]	@ (800ef30 <tcp_poll+0x58>)
 800ef0e:	f009 fbd7 	bl	80186c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	79fa      	ldrb	r2, [r7, #7]
 800ef1e:	775a      	strb	r2, [r3, #29]
}
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	0801b164 	.word	0x0801b164
 800ef2c:	0801b75c 	.word	0x0801b75c
 800ef30:	0801b1a8 	.word	0x0801b1a8
 800ef34:	0801b774 	.word	0x0801b774

0800ef38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d107      	bne.n	800ef56 <tcp_pcb_purge+0x1e>
 800ef46:	4b1e      	ldr	r3, [pc, #120]	@ (800efc0 <tcp_pcb_purge+0x88>)
 800ef48:	f640 0251 	movw	r2, #2129	@ 0x851
 800ef4c:	491d      	ldr	r1, [pc, #116]	@ (800efc4 <tcp_pcb_purge+0x8c>)
 800ef4e:	481e      	ldr	r0, [pc, #120]	@ (800efc8 <tcp_pcb_purge+0x90>)
 800ef50:	f009 fbb6 	bl	80186c0 <iprintf>
 800ef54:	e030      	b.n	800efb8 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	7d1b      	ldrb	r3, [r3, #20]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d02c      	beq.n	800efb8 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef62:	2b0a      	cmp	r3, #10
 800ef64:	d028      	beq.n	800efb8 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d024      	beq.n	800efb8 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d007      	beq.n	800ef86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe f8d6 	bl	800d12c <pbuf_free>
      pcb->refused_data = NULL;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef8c:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff fd2e 	bl	800e9f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7ff fd29 	bl	800e9f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	0801b164 	.word	0x0801b164
 800efc4:	0801b794 	.word	0x0801b794
 800efc8:	0801b1a8 	.word	0x0801b1a8

0800efcc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <tcp_pcb_remove+0x1e>
 800efdc:	4b38      	ldr	r3, [pc, #224]	@ (800f0c0 <tcp_pcb_remove+0xf4>)
 800efde:	f640 0283 	movw	r2, #2179	@ 0x883
 800efe2:	4938      	ldr	r1, [pc, #224]	@ (800f0c4 <tcp_pcb_remove+0xf8>)
 800efe4:	4838      	ldr	r0, [pc, #224]	@ (800f0c8 <tcp_pcb_remove+0xfc>)
 800efe6:	f009 fb6b 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <tcp_pcb_remove+0x32>
 800eff0:	4b33      	ldr	r3, [pc, #204]	@ (800f0c0 <tcp_pcb_remove+0xf4>)
 800eff2:	f640 0284 	movw	r2, #2180	@ 0x884
 800eff6:	4935      	ldr	r1, [pc, #212]	@ (800f0cc <tcp_pcb_remove+0x100>)
 800eff8:	4833      	ldr	r0, [pc, #204]	@ (800f0c8 <tcp_pcb_remove+0xfc>)
 800effa:	f009 fb61 	bl	80186c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	d105      	bne.n	800f014 <tcp_pcb_remove+0x48>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	e013      	b.n	800f03c <tcp_pcb_remove+0x70>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	60fb      	str	r3, [r7, #12]
 800f01a:	e00c      	b.n	800f036 <tcp_pcb_remove+0x6a>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d104      	bne.n	800f030 <tcp_pcb_remove+0x64>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	e005      	b.n	800f03c <tcp_pcb_remove+0x70>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1ef      	bne.n	800f01c <tcp_pcb_remove+0x50>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2200      	movs	r2, #0
 800f040:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f042:	6838      	ldr	r0, [r7, #0]
 800f044:	f7ff ff78 	bl	800ef38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b0a      	cmp	r3, #10
 800f04e:	d013      	beq.n	800f078 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f054:	2b01      	cmp	r3, #1
 800f056:	d00f      	beq.n	800f078 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	8b5b      	ldrh	r3, [r3, #26]
 800f05c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f060:	2b00      	cmp	r3, #0
 800f062:	d009      	beq.n	800f078 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	8b5b      	ldrh	r3, [r3, #26]
 800f068:	f043 0302 	orr.w	r3, r3, #2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f072:	6838      	ldr	r0, [r7, #0]
 800f074:	f002 fffc 	bl	8012070 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	7d1b      	ldrb	r3, [r3, #20]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d015      	beq.n	800f0ac <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d006      	beq.n	800f096 <tcp_pcb_remove+0xca>
 800f088:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c0 <tcp_pcb_remove+0xf4>)
 800f08a:	f640 0293 	movw	r2, #2195	@ 0x893
 800f08e:	4910      	ldr	r1, [pc, #64]	@ (800f0d0 <tcp_pcb_remove+0x104>)
 800f090:	480d      	ldr	r0, [pc, #52]	@ (800f0c8 <tcp_pcb_remove+0xfc>)
 800f092:	f009 fb15 	bl	80186c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d006      	beq.n	800f0ac <tcp_pcb_remove+0xe0>
 800f09e:	4b08      	ldr	r3, [pc, #32]	@ (800f0c0 <tcp_pcb_remove+0xf4>)
 800f0a0:	f640 0294 	movw	r2, #2196	@ 0x894
 800f0a4:	490b      	ldr	r1, [pc, #44]	@ (800f0d4 <tcp_pcb_remove+0x108>)
 800f0a6:	4808      	ldr	r0, [pc, #32]	@ (800f0c8 <tcp_pcb_remove+0xfc>)
 800f0a8:	f009 fb0a 	bl	80186c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f0b8:	bf00      	nop
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	0801b164 	.word	0x0801b164
 800f0c4:	0801b7b0 	.word	0x0801b7b0
 800f0c8:	0801b1a8 	.word	0x0801b1a8
 800f0cc:	0801b7cc 	.word	0x0801b7cc
 800f0d0:	0801b7ec 	.word	0x0801b7ec
 800f0d4:	0801b804 	.word	0x0801b804

0800f0d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <tcp_next_iss+0x1c>
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f110 <tcp_next_iss+0x38>)
 800f0e8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f0ec:	4909      	ldr	r1, [pc, #36]	@ (800f114 <tcp_next_iss+0x3c>)
 800f0ee:	480a      	ldr	r0, [pc, #40]	@ (800f118 <tcp_next_iss+0x40>)
 800f0f0:	f009 fae6 	bl	80186c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f0f4:	4b09      	ldr	r3, [pc, #36]	@ (800f11c <tcp_next_iss+0x44>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	4b09      	ldr	r3, [pc, #36]	@ (800f120 <tcp_next_iss+0x48>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	4a07      	ldr	r2, [pc, #28]	@ (800f11c <tcp_next_iss+0x44>)
 800f100:	6013      	str	r3, [r2, #0]
  return iss;
 800f102:	4b06      	ldr	r3, [pc, #24]	@ (800f11c <tcp_next_iss+0x44>)
 800f104:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	0801b164 	.word	0x0801b164
 800f114:	0801b820 	.word	0x0801b820
 800f118:	0801b1a8 	.word	0x0801b1a8
 800f11c:	20000018 	.word	0x20000018
 800f120:	200157c8 	.word	0x200157c8

0800f124 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <tcp_eff_send_mss_netif+0x22>
 800f138:	4b14      	ldr	r3, [pc, #80]	@ (800f18c <tcp_eff_send_mss_netif+0x68>)
 800f13a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f13e:	4914      	ldr	r1, [pc, #80]	@ (800f190 <tcp_eff_send_mss_netif+0x6c>)
 800f140:	4814      	ldr	r0, [pc, #80]	@ (800f194 <tcp_eff_send_mss_netif+0x70>)
 800f142:	f009 fabd 	bl	80186c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	e019      	b.n	800f184 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f154:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f156:	8afb      	ldrh	r3, [r7, #22]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d012      	beq.n	800f182 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f15c:	2328      	movs	r3, #40	@ 0x28
 800f15e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f160:	8afa      	ldrh	r2, [r7, #22]
 800f162:	8abb      	ldrh	r3, [r7, #20]
 800f164:	429a      	cmp	r2, r3
 800f166:	d904      	bls.n	800f172 <tcp_eff_send_mss_netif+0x4e>
 800f168:	8afa      	ldrh	r2, [r7, #22]
 800f16a:	8abb      	ldrh	r3, [r7, #20]
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	b29b      	uxth	r3, r3
 800f170:	e000      	b.n	800f174 <tcp_eff_send_mss_netif+0x50>
 800f172:	2300      	movs	r3, #0
 800f174:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f176:	8a7a      	ldrh	r2, [r7, #18]
 800f178:	89fb      	ldrh	r3, [r7, #14]
 800f17a:	4293      	cmp	r3, r2
 800f17c:	bf28      	it	cs
 800f17e:	4613      	movcs	r3, r2
 800f180:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f182:	89fb      	ldrh	r3, [r7, #14]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	0801b164 	.word	0x0801b164
 800f190:	0801b83c 	.word	0x0801b83c
 800f194:	0801b1a8 	.word	0x0801b1a8

0800f198 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d119      	bne.n	800f1e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f1ac:	4b10      	ldr	r3, [pc, #64]	@ (800f1f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f1ae:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f1b2:	4910      	ldr	r1, [pc, #64]	@ (800f1f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f1b4:	4810      	ldr	r0, [pc, #64]	@ (800f1f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f1b6:	f009 fa83 	bl	80186c0 <iprintf>

  while (pcb != NULL) {
 800f1ba:	e011      	b.n	800f1e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d108      	bne.n	800f1da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f7fe fda2 	bl	800dd18 <tcp_abort>
      pcb = next;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	60fb      	str	r3, [r7, #12]
 800f1d8:	e002      	b.n	800f1e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1ea      	bne.n	800f1bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1e6:	bf00      	nop
 800f1e8:	bf00      	nop
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	0801b164 	.word	0x0801b164
 800f1f4:	0801b864 	.word	0x0801b864
 800f1f8:	0801b1a8 	.word	0x0801b1a8

0800f1fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d02a      	beq.n	800f262 <tcp_netif_ip_addr_changed+0x66>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d026      	beq.n	800f262 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f214:	4b15      	ldr	r3, [pc, #84]	@ (800f26c <tcp_netif_ip_addr_changed+0x70>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4619      	mov	r1, r3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff ffbc 	bl	800f198 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f220:	4b13      	ldr	r3, [pc, #76]	@ (800f270 <tcp_netif_ip_addr_changed+0x74>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4619      	mov	r1, r3
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7ff ffb6 	bl	800f198 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d017      	beq.n	800f262 <tcp_netif_ip_addr_changed+0x66>
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d013      	beq.n	800f262 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f23a:	4b0e      	ldr	r3, [pc, #56]	@ (800f274 <tcp_netif_ip_addr_changed+0x78>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]
 800f240:	e00c      	b.n	800f25c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d103      	bne.n	800f256 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	60fb      	str	r3, [r7, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1ef      	bne.n	800f242 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200157d4 	.word	0x200157d4
 800f270:	200157cc 	.word	0x200157cc
 800f274:	200157d0 	.word	0x200157d0

0800f278 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f278:	b590      	push	{r4, r7, lr}
 800f27a:	b08d      	sub	sp, #52	@ 0x34
 800f27c:	af04      	add	r7, sp, #16
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d105      	bne.n	800f294 <tcp_input+0x1c>
 800f288:	4b8b      	ldr	r3, [pc, #556]	@ (800f4b8 <tcp_input+0x240>)
 800f28a:	2283      	movs	r2, #131	@ 0x83
 800f28c:	498b      	ldr	r1, [pc, #556]	@ (800f4bc <tcp_input+0x244>)
 800f28e:	488c      	ldr	r0, [pc, #560]	@ (800f4c0 <tcp_input+0x248>)
 800f290:	f009 fa16 	bl	80186c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	4a8a      	ldr	r2, [pc, #552]	@ (800f4c4 <tcp_input+0x24c>)
 800f29a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	895b      	ldrh	r3, [r3, #10]
 800f2a0:	2b13      	cmp	r3, #19
 800f2a2:	f240 83e1 	bls.w	800fa68 <tcp_input+0x7f0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2a6:	4b88      	ldr	r3, [pc, #544]	@ (800f4c8 <tcp_input+0x250>)
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	4a87      	ldr	r2, [pc, #540]	@ (800f4c8 <tcp_input+0x250>)
 800f2ac:	6812      	ldr	r2, [r2, #0]
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f007 ffa7 	bl	8017204 <ip4_addr_isbroadcast_u32>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f040 83d7 	bne.w	800fa6c <tcp_input+0x7f4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2be:	4b82      	ldr	r3, [pc, #520]	@ (800f4c8 <tcp_input+0x250>)
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2c6:	2be0      	cmp	r3, #224	@ 0xe0
 800f2c8:	f000 83d0 	beq.w	800fa6c <tcp_input+0x7f4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	891a      	ldrh	r2, [r3, #8]
 800f2d0:	4b7e      	ldr	r3, [pc, #504]	@ (800f4cc <tcp_input+0x254>)
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	4b7e      	ldr	r3, [pc, #504]	@ (800f4d0 <tcp_input+0x258>)
 800f2d6:	2106      	movs	r1, #6
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7fc fb83 	bl	800b9e4 <ip_chksum_pseudo>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800f2e2:	8a3b      	ldrh	r3, [r7, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 83c3 	bne.w	800fa70 <tcp_input+0x7f8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f2ea:	4b76      	ldr	r3, [pc, #472]	@ (800f4c4 <tcp_input+0x24c>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	899b      	ldrh	r3, [r3, #12]
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fc fa44 	bl	800b780 <lwip_htons>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	0b1b      	lsrs	r3, r3, #12
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f304:	7bfb      	ldrb	r3, [r7, #15]
 800f306:	2b13      	cmp	r3, #19
 800f308:	f240 83b4 	bls.w	800fa74 <tcp_input+0x7fc>
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
 800f30e:	b29a      	uxth	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	891b      	ldrh	r3, [r3, #8]
 800f314:	429a      	cmp	r2, r3
 800f316:	f200 83ad 	bhi.w	800fa74 <tcp_input+0x7fc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	3b14      	subs	r3, #20
 800f320:	b29a      	uxth	r2, r3
 800f322:	4b6c      	ldr	r3, [pc, #432]	@ (800f4d4 <tcp_input+0x25c>)
 800f324:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f326:	4b6c      	ldr	r3, [pc, #432]	@ (800f4d8 <tcp_input+0x260>)
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	895a      	ldrh	r2, [r3, #10]
 800f330:	7bfb      	ldrb	r3, [r7, #15]
 800f332:	b29b      	uxth	r3, r3
 800f334:	429a      	cmp	r2, r3
 800f336:	d309      	bcc.n	800f34c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f338:	4b66      	ldr	r3, [pc, #408]	@ (800f4d4 <tcp_input+0x25c>)
 800f33a:	881a      	ldrh	r2, [r3, #0]
 800f33c:	4b67      	ldr	r3, [pc, #412]	@ (800f4dc <tcp_input+0x264>)
 800f33e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	4619      	mov	r1, r3
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7fd fe6b 	bl	800d020 <pbuf_remove_header>
 800f34a:	e04e      	b.n	800f3ea <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d105      	bne.n	800f360 <tcp_input+0xe8>
 800f354:	4b58      	ldr	r3, [pc, #352]	@ (800f4b8 <tcp_input+0x240>)
 800f356:	22c2      	movs	r2, #194	@ 0xc2
 800f358:	4961      	ldr	r1, [pc, #388]	@ (800f4e0 <tcp_input+0x268>)
 800f35a:	4859      	ldr	r0, [pc, #356]	@ (800f4c0 <tcp_input+0x248>)
 800f35c:	f009 f9b0 	bl	80186c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f360:	2114      	movs	r1, #20
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7fd fe5c 	bl	800d020 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	895a      	ldrh	r2, [r3, #10]
 800f36c:	4b5b      	ldr	r3, [pc, #364]	@ (800f4dc <tcp_input+0x264>)
 800f36e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f370:	4b58      	ldr	r3, [pc, #352]	@ (800f4d4 <tcp_input+0x25c>)
 800f372:	881a      	ldrh	r2, [r3, #0]
 800f374:	4b59      	ldr	r3, [pc, #356]	@ (800f4dc <tcp_input+0x264>)
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f37c:	4b57      	ldr	r3, [pc, #348]	@ (800f4dc <tcp_input+0x264>)
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	4619      	mov	r1, r3
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f7fd fe4c 	bl	800d020 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	895b      	ldrh	r3, [r3, #10]
 800f38e:	89ba      	ldrh	r2, [r7, #12]
 800f390:	429a      	cmp	r2, r3
 800f392:	f200 8371 	bhi.w	800fa78 <tcp_input+0x800>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	4a4e      	ldr	r2, [pc, #312]	@ (800f4d8 <tcp_input+0x260>)
 800f39e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	89ba      	ldrh	r2, [r7, #12]
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fd fe39 	bl	800d020 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	891a      	ldrh	r2, [r3, #8]
 800f3b2:	89bb      	ldrh	r3, [r7, #12]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	895b      	ldrh	r3, [r3, #10]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <tcp_input+0x158>
 800f3c4:	4b3c      	ldr	r3, [pc, #240]	@ (800f4b8 <tcp_input+0x240>)
 800f3c6:	22df      	movs	r2, #223	@ 0xdf
 800f3c8:	4946      	ldr	r1, [pc, #280]	@ (800f4e4 <tcp_input+0x26c>)
 800f3ca:	483d      	ldr	r0, [pc, #244]	@ (800f4c0 <tcp_input+0x248>)
 800f3cc:	f009 f978 	bl	80186c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	891b      	ldrh	r3, [r3, #8]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d005      	beq.n	800f3ea <tcp_input+0x172>
 800f3de:	4b36      	ldr	r3, [pc, #216]	@ (800f4b8 <tcp_input+0x240>)
 800f3e0:	22e0      	movs	r2, #224	@ 0xe0
 800f3e2:	4941      	ldr	r1, [pc, #260]	@ (800f4e8 <tcp_input+0x270>)
 800f3e4:	4836      	ldr	r0, [pc, #216]	@ (800f4c0 <tcp_input+0x248>)
 800f3e6:	f009 f96b 	bl	80186c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f3ea:	4b36      	ldr	r3, [pc, #216]	@ (800f4c4 <tcp_input+0x24c>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	881b      	ldrh	r3, [r3, #0]
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	4a34      	ldr	r2, [pc, #208]	@ (800f4c4 <tcp_input+0x24c>)
 800f3f4:	6814      	ldr	r4, [r2, #0]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fc f9c2 	bl	800b780 <lwip_htons>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f400:	4b30      	ldr	r3, [pc, #192]	@ (800f4c4 <tcp_input+0x24c>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	885b      	ldrh	r3, [r3, #2]
 800f406:	b29b      	uxth	r3, r3
 800f408:	4a2e      	ldr	r2, [pc, #184]	@ (800f4c4 <tcp_input+0x24c>)
 800f40a:	6814      	ldr	r4, [r2, #0]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fc f9b7 	bl	800b780 <lwip_htons>
 800f412:	4603      	mov	r3, r0
 800f414:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f416:	4b2b      	ldr	r3, [pc, #172]	@ (800f4c4 <tcp_input+0x24c>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	4a29      	ldr	r2, [pc, #164]	@ (800f4c4 <tcp_input+0x24c>)
 800f41e:	6814      	ldr	r4, [r2, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f7fc f9c2 	bl	800b7aa <lwip_htonl>
 800f426:	4603      	mov	r3, r0
 800f428:	6063      	str	r3, [r4, #4]
 800f42a:	6863      	ldr	r3, [r4, #4]
 800f42c:	4a2f      	ldr	r2, [pc, #188]	@ (800f4ec <tcp_input+0x274>)
 800f42e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f430:	4b24      	ldr	r3, [pc, #144]	@ (800f4c4 <tcp_input+0x24c>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	4a23      	ldr	r2, [pc, #140]	@ (800f4c4 <tcp_input+0x24c>)
 800f438:	6814      	ldr	r4, [r2, #0]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fc f9b5 	bl	800b7aa <lwip_htonl>
 800f440:	4603      	mov	r3, r0
 800f442:	60a3      	str	r3, [r4, #8]
 800f444:	68a3      	ldr	r3, [r4, #8]
 800f446:	4a2a      	ldr	r2, [pc, #168]	@ (800f4f0 <tcp_input+0x278>)
 800f448:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f44a:	4b1e      	ldr	r3, [pc, #120]	@ (800f4c4 <tcp_input+0x24c>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	89db      	ldrh	r3, [r3, #14]
 800f450:	b29b      	uxth	r3, r3
 800f452:	4a1c      	ldr	r2, [pc, #112]	@ (800f4c4 <tcp_input+0x24c>)
 800f454:	6814      	ldr	r4, [r2, #0]
 800f456:	4618      	mov	r0, r3
 800f458:	f7fc f992 	bl	800b780 <lwip_htons>
 800f45c:	4603      	mov	r3, r0
 800f45e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f460:	4b18      	ldr	r3, [pc, #96]	@ (800f4c4 <tcp_input+0x24c>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	899b      	ldrh	r3, [r3, #12]
 800f466:	b29b      	uxth	r3, r3
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fc f989 	bl	800b780 <lwip_htons>
 800f46e:	4603      	mov	r3, r0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f476:	b2da      	uxtb	r2, r3
 800f478:	4b1e      	ldr	r3, [pc, #120]	@ (800f4f4 <tcp_input+0x27c>)
 800f47a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	891a      	ldrh	r2, [r3, #8]
 800f480:	4b1d      	ldr	r3, [pc, #116]	@ (800f4f8 <tcp_input+0x280>)
 800f482:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f484:	4b1b      	ldr	r3, [pc, #108]	@ (800f4f4 <tcp_input+0x27c>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	f003 0303 	and.w	r3, r3, #3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <tcp_input+0x232>
    tcplen++;
 800f490:	4b19      	ldr	r3, [pc, #100]	@ (800f4f8 <tcp_input+0x280>)
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	3301      	adds	r3, #1
 800f496:	b29a      	uxth	r2, r3
 800f498:	4b17      	ldr	r3, [pc, #92]	@ (800f4f8 <tcp_input+0x280>)
 800f49a:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	891a      	ldrh	r2, [r3, #8]
 800f4a0:	4b15      	ldr	r3, [pc, #84]	@ (800f4f8 <tcp_input+0x280>)
 800f4a2:	881b      	ldrh	r3, [r3, #0]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	f200 82e9 	bhi.w	800fa7c <tcp_input+0x804>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4ae:	4b13      	ldr	r3, [pc, #76]	@ (800f4fc <tcp_input+0x284>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	e09b      	b.n	800f5ee <tcp_input+0x376>
 800f4b6:	bf00      	nop
 800f4b8:	0801b898 	.word	0x0801b898
 800f4bc:	0801b8cc 	.word	0x0801b8cc
 800f4c0:	0801b8e4 	.word	0x0801b8e4
 800f4c4:	200157f0 	.word	0x200157f0
 800f4c8:	20009324 	.word	0x20009324
 800f4cc:	20009338 	.word	0x20009338
 800f4d0:	20009334 	.word	0x20009334
 800f4d4:	200157f4 	.word	0x200157f4
 800f4d8:	200157f8 	.word	0x200157f8
 800f4dc:	200157f6 	.word	0x200157f6
 800f4e0:	0801b90c 	.word	0x0801b90c
 800f4e4:	0801b91c 	.word	0x0801b91c
 800f4e8:	0801b928 	.word	0x0801b928
 800f4ec:	20015800 	.word	0x20015800
 800f4f0:	20015804 	.word	0x20015804
 800f4f4:	2001580c 	.word	0x2001580c
 800f4f8:	2001580a 	.word	0x2001580a
 800f4fc:	200157d4 	.word	0x200157d4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	7d1b      	ldrb	r3, [r3, #20]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d105      	bne.n	800f514 <tcp_input+0x29c>
 800f508:	4b88      	ldr	r3, [pc, #544]	@ (800f72c <tcp_input+0x4b4>)
 800f50a:	22fb      	movs	r2, #251	@ 0xfb
 800f50c:	4988      	ldr	r1, [pc, #544]	@ (800f730 <tcp_input+0x4b8>)
 800f50e:	4889      	ldr	r0, [pc, #548]	@ (800f734 <tcp_input+0x4bc>)
 800f510:	f009 f8d6 	bl	80186c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	7d1b      	ldrb	r3, [r3, #20]
 800f518:	2b0a      	cmp	r3, #10
 800f51a:	d105      	bne.n	800f528 <tcp_input+0x2b0>
 800f51c:	4b83      	ldr	r3, [pc, #524]	@ (800f72c <tcp_input+0x4b4>)
 800f51e:	22fc      	movs	r2, #252	@ 0xfc
 800f520:	4985      	ldr	r1, [pc, #532]	@ (800f738 <tcp_input+0x4c0>)
 800f522:	4884      	ldr	r0, [pc, #528]	@ (800f734 <tcp_input+0x4bc>)
 800f524:	f009 f8cc 	bl	80186c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	7d1b      	ldrb	r3, [r3, #20]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d105      	bne.n	800f53c <tcp_input+0x2c4>
 800f530:	4b7e      	ldr	r3, [pc, #504]	@ (800f72c <tcp_input+0x4b4>)
 800f532:	22fd      	movs	r2, #253	@ 0xfd
 800f534:	4981      	ldr	r1, [pc, #516]	@ (800f73c <tcp_input+0x4c4>)
 800f536:	487f      	ldr	r0, [pc, #508]	@ (800f734 <tcp_input+0x4bc>)
 800f538:	f009 f8c2 	bl	80186c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	7a1b      	ldrb	r3, [r3, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00c      	beq.n	800f55e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	7a1a      	ldrb	r2, [r3, #8]
 800f548:	4b7d      	ldr	r3, [pc, #500]	@ (800f740 <tcp_input+0x4c8>)
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f550:	3301      	adds	r3, #1
 800f552:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f554:	429a      	cmp	r2, r3
 800f556:	d002      	beq.n	800f55e <tcp_input+0x2e6>
      prev = pcb;
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	61bb      	str	r3, [r7, #24]
      continue;
 800f55c:	e044      	b.n	800f5e8 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	8b1a      	ldrh	r2, [r3, #24]
 800f562:	4b78      	ldr	r3, [pc, #480]	@ (800f744 <tcp_input+0x4cc>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d13a      	bne.n	800f5e4 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	8ada      	ldrh	r2, [r3, #22]
 800f572:	4b74      	ldr	r3, [pc, #464]	@ (800f744 <tcp_input+0x4cc>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	885b      	ldrh	r3, [r3, #2]
 800f578:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d132      	bne.n	800f5e4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	685a      	ldr	r2, [r3, #4]
 800f582:	4b6f      	ldr	r3, [pc, #444]	@ (800f740 <tcp_input+0x4c8>)
 800f584:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f586:	429a      	cmp	r2, r3
 800f588:	d12c      	bne.n	800f5e4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	4b6c      	ldr	r3, [pc, #432]	@ (800f740 <tcp_input+0x4c8>)
 800f590:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f592:	429a      	cmp	r2, r3
 800f594:	d126      	bne.n	800f5e4 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	69fa      	ldr	r2, [r7, #28]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d106      	bne.n	800f5ae <tcp_input+0x336>
 800f5a0:	4b62      	ldr	r3, [pc, #392]	@ (800f72c <tcp_input+0x4b4>)
 800f5a2:	f240 120d 	movw	r2, #269	@ 0x10d
 800f5a6:	4968      	ldr	r1, [pc, #416]	@ (800f748 <tcp_input+0x4d0>)
 800f5a8:	4862      	ldr	r0, [pc, #392]	@ (800f734 <tcp_input+0x4bc>)
 800f5aa:	f009 f889 	bl	80186c0 <iprintf>
      if (prev != NULL) {
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00a      	beq.n	800f5ca <tcp_input+0x352>
        prev->next = pcb->next;
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	68da      	ldr	r2, [r3, #12]
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5bc:	4b63      	ldr	r3, [pc, #396]	@ (800f74c <tcp_input+0x4d4>)
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5c4:	4a61      	ldr	r2, [pc, #388]	@ (800f74c <tcp_input+0x4d4>)
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	69fa      	ldr	r2, [r7, #28]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d110      	bne.n	800f5f6 <tcp_input+0x37e>
 800f5d4:	4b55      	ldr	r3, [pc, #340]	@ (800f72c <tcp_input+0x4b4>)
 800f5d6:	f240 1215 	movw	r2, #277	@ 0x115
 800f5da:	495d      	ldr	r1, [pc, #372]	@ (800f750 <tcp_input+0x4d8>)
 800f5dc:	4855      	ldr	r0, [pc, #340]	@ (800f734 <tcp_input+0x4bc>)
 800f5de:	f009 f86f 	bl	80186c0 <iprintf>
      break;
 800f5e2:	e008      	b.n	800f5f6 <tcp_input+0x37e>
    }
    prev = pcb;
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	61fb      	str	r3, [r7, #28]
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d185      	bne.n	800f500 <tcp_input+0x288>
 800f5f4:	e000      	b.n	800f5f8 <tcp_input+0x380>
      break;
 800f5f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f040 80b0 	bne.w	800f760 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f600:	4b54      	ldr	r3, [pc, #336]	@ (800f754 <tcp_input+0x4dc>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	61fb      	str	r3, [r7, #28]
 800f606:	e03f      	b.n	800f688 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	7d1b      	ldrb	r3, [r3, #20]
 800f60c:	2b0a      	cmp	r3, #10
 800f60e:	d006      	beq.n	800f61e <tcp_input+0x3a6>
 800f610:	4b46      	ldr	r3, [pc, #280]	@ (800f72c <tcp_input+0x4b4>)
 800f612:	f240 121f 	movw	r2, #287	@ 0x11f
 800f616:	4950      	ldr	r1, [pc, #320]	@ (800f758 <tcp_input+0x4e0>)
 800f618:	4846      	ldr	r0, [pc, #280]	@ (800f734 <tcp_input+0x4bc>)
 800f61a:	f009 f851 	bl	80186c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	7a1b      	ldrb	r3, [r3, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d009      	beq.n	800f63a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	7a1a      	ldrb	r2, [r3, #8]
 800f62a:	4b45      	ldr	r3, [pc, #276]	@ (800f740 <tcp_input+0x4c8>)
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f632:	3301      	adds	r3, #1
 800f634:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f636:	429a      	cmp	r2, r3
 800f638:	d122      	bne.n	800f680 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	8b1a      	ldrh	r2, [r3, #24]
 800f63e:	4b41      	ldr	r3, [pc, #260]	@ (800f744 <tcp_input+0x4cc>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	b29b      	uxth	r3, r3
 800f646:	429a      	cmp	r2, r3
 800f648:	d11b      	bne.n	800f682 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	8ada      	ldrh	r2, [r3, #22]
 800f64e:	4b3d      	ldr	r3, [pc, #244]	@ (800f744 <tcp_input+0x4cc>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	885b      	ldrh	r3, [r3, #2]
 800f654:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f656:	429a      	cmp	r2, r3
 800f658:	d113      	bne.n	800f682 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	4b38      	ldr	r3, [pc, #224]	@ (800f740 <tcp_input+0x4c8>)
 800f660:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f662:	429a      	cmp	r2, r3
 800f664:	d10d      	bne.n	800f682 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	4b35      	ldr	r3, [pc, #212]	@ (800f740 <tcp_input+0x4c8>)
 800f66c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f66e:	429a      	cmp	r2, r3
 800f670:	d107      	bne.n	800f682 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f672:	69f8      	ldr	r0, [r7, #28]
 800f674:	f000 fb5c 	bl	800fd30 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7fd fd57 	bl	800d12c <pbuf_free>
        return;
 800f67e:	e203      	b.n	800fa88 <tcp_input+0x810>
        continue;
 800f680:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1bc      	bne.n	800f608 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f692:	4b32      	ldr	r3, [pc, #200]	@ (800f75c <tcp_input+0x4e4>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	617b      	str	r3, [r7, #20]
 800f698:	e02a      	b.n	800f6f0 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	7a1b      	ldrb	r3, [r3, #8]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00c      	beq.n	800f6bc <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	7a1a      	ldrb	r2, [r3, #8]
 800f6a6:	4b26      	ldr	r3, [pc, #152]	@ (800f740 <tcp_input+0x4c8>)
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d002      	beq.n	800f6bc <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	61bb      	str	r3, [r7, #24]
        continue;
 800f6ba:	e016      	b.n	800f6ea <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	8ada      	ldrh	r2, [r3, #22]
 800f6c0:	4b20      	ldr	r3, [pc, #128]	@ (800f744 <tcp_input+0x4cc>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	885b      	ldrh	r3, [r3, #2]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d10c      	bne.n	800f6e6 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f740 <tcp_input+0x4c8>)
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d00f      	beq.n	800f6f8 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00d      	beq.n	800f6fa <tcp_input+0x482>
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d009      	beq.n	800f6fa <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1d1      	bne.n	800f69a <tcp_input+0x422>
 800f6f6:	e000      	b.n	800f6fa <tcp_input+0x482>
            break;
 800f6f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d02f      	beq.n	800f760 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00a      	beq.n	800f71c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	68da      	ldr	r2, [r3, #12]
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f70e:	4b13      	ldr	r3, [pc, #76]	@ (800f75c <tcp_input+0x4e4>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f716:	4a11      	ldr	r2, [pc, #68]	@ (800f75c <tcp_input+0x4e4>)
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f71c:	6978      	ldr	r0, [r7, #20]
 800f71e:	f000 fa09 	bl	800fb34 <tcp_listen_input>
      }
      pbuf_free(p);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7fd fd02 	bl	800d12c <pbuf_free>
      return;
 800f728:	e1ae      	b.n	800fa88 <tcp_input+0x810>
 800f72a:	bf00      	nop
 800f72c:	0801b898 	.word	0x0801b898
 800f730:	0801b948 	.word	0x0801b948
 800f734:	0801b8e4 	.word	0x0801b8e4
 800f738:	0801b970 	.word	0x0801b970
 800f73c:	0801b99c 	.word	0x0801b99c
 800f740:	20009324 	.word	0x20009324
 800f744:	200157f0 	.word	0x200157f0
 800f748:	0801b9c4 	.word	0x0801b9c4
 800f74c:	200157d4 	.word	0x200157d4
 800f750:	0801b9f0 	.word	0x0801b9f0
 800f754:	200157d8 	.word	0x200157d8
 800f758:	0801ba1c 	.word	0x0801ba1c
 800f75c:	200157d0 	.word	0x200157d0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 8156 	beq.w	800fa14 <tcp_input+0x79c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f768:	4b94      	ldr	r3, [pc, #592]	@ (800f9bc <tcp_input+0x744>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	891a      	ldrh	r2, [r3, #8]
 800f772:	4b92      	ldr	r3, [pc, #584]	@ (800f9bc <tcp_input+0x744>)
 800f774:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f776:	4a91      	ldr	r2, [pc, #580]	@ (800f9bc <tcp_input+0x744>)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f77c:	4b90      	ldr	r3, [pc, #576]	@ (800f9c0 <tcp_input+0x748>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a8e      	ldr	r2, [pc, #568]	@ (800f9bc <tcp_input+0x744>)
 800f782:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f784:	4b8f      	ldr	r3, [pc, #572]	@ (800f9c4 <tcp_input+0x74c>)
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f78a:	4b8f      	ldr	r3, [pc, #572]	@ (800f9c8 <tcp_input+0x750>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f790:	4b8e      	ldr	r3, [pc, #568]	@ (800f9cc <tcp_input+0x754>)
 800f792:	2200      	movs	r2, #0
 800f794:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f796:	4b8e      	ldr	r3, [pc, #568]	@ (800f9d0 <tcp_input+0x758>)
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	f003 0308 	and.w	r3, r3, #8
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d006      	beq.n	800f7b0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	7b5b      	ldrb	r3, [r3, #13]
 800f7a6:	f043 0301 	orr.w	r3, r3, #1
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d017      	beq.n	800f7e8 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7b8:	69f8      	ldr	r0, [r7, #28]
 800f7ba:	f7ff f89d 	bl	800e8f8 <tcp_process_refused_data>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	f113 0f0d 	cmn.w	r3, #13
 800f7c4:	d007      	beq.n	800f7d6 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00c      	beq.n	800f7e8 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7ce:	4b81      	ldr	r3, [pc, #516]	@ (800f9d4 <tcp_input+0x75c>)
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d008      	beq.n	800f7e8 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f040 80e2 	bne.w	800f9a4 <tcp_input+0x72c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7e0:	69f8      	ldr	r0, [r7, #28]
 800f7e2:	f003 fa6d 	bl	8012cc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7e6:	e0dd      	b.n	800f9a4 <tcp_input+0x72c>
      }
    }
    tcp_input_pcb = pcb;
 800f7e8:	4a7b      	ldr	r2, [pc, #492]	@ (800f9d8 <tcp_input+0x760>)
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f7ee:	69f8      	ldr	r0, [r7, #28]
 800f7f0:	f000 fb18 	bl	800fe24 <tcp_process>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f7f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7fc:	f113 0f0d 	cmn.w	r3, #13
 800f800:	f000 80d2 	beq.w	800f9a8 <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 800f804:	4b70      	ldr	r3, [pc, #448]	@ (800f9c8 <tcp_input+0x750>)
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	f003 0308 	and.w	r3, r3, #8
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d015      	beq.n	800f83c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f816:	2b00      	cmp	r3, #0
 800f818:	d008      	beq.n	800f82c <tcp_input+0x5b4>
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f820:	69fa      	ldr	r2, [r7, #28]
 800f822:	6912      	ldr	r2, [r2, #16]
 800f824:	f06f 010d 	mvn.w	r1, #13
 800f828:	4610      	mov	r0, r2
 800f82a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f82c:	69f9      	ldr	r1, [r7, #28]
 800f82e:	486b      	ldr	r0, [pc, #428]	@ (800f9dc <tcp_input+0x764>)
 800f830:	f7ff fbcc 	bl	800efcc <tcp_pcb_remove>
        tcp_free(pcb);
 800f834:	69f8      	ldr	r0, [r7, #28]
 800f836:	f7fd ff35 	bl	800d6a4 <tcp_free>
 800f83a:	e0d8      	b.n	800f9ee <tcp_input+0x776>
      } else {
        err = ERR_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f840:	4b62      	ldr	r3, [pc, #392]	@ (800f9cc <tcp_input+0x754>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d01b      	beq.n	800f880 <tcp_input+0x608>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f848:	4b60      	ldr	r3, [pc, #384]	@ (800f9cc <tcp_input+0x754>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f852:	2b00      	cmp	r3, #0
 800f854:	d009      	beq.n	800f86a <tcp_input+0x5f2>
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	6910      	ldr	r0, [r2, #16]
 800f85e:	897a      	ldrh	r2, [r7, #10]
 800f860:	69f9      	ldr	r1, [r7, #28]
 800f862:	4798      	blx	r3
 800f864:	4603      	mov	r3, r0
 800f866:	74fb      	strb	r3, [r7, #19]
 800f868:	e001      	b.n	800f86e <tcp_input+0x5f6>
 800f86a:	2300      	movs	r3, #0
 800f86c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f86e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f872:	f113 0f0d 	cmn.w	r3, #13
 800f876:	f000 8099 	beq.w	800f9ac <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f87a:	4b54      	ldr	r3, [pc, #336]	@ (800f9cc <tcp_input+0x754>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f880:	69f8      	ldr	r0, [r7, #28]
 800f882:	f000 f917 	bl	800fab4 <tcp_input_delayed_close>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f040 8091 	bne.w	800f9b0 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f88e:	4b4d      	ldr	r3, [pc, #308]	@ (800f9c4 <tcp_input+0x74c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d041      	beq.n	800f91a <tcp_input+0x6a2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d006      	beq.n	800f8ac <tcp_input+0x634>
 800f89e:	4b50      	ldr	r3, [pc, #320]	@ (800f9e0 <tcp_input+0x768>)
 800f8a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f8a4:	494f      	ldr	r1, [pc, #316]	@ (800f9e4 <tcp_input+0x76c>)
 800f8a6:	4850      	ldr	r0, [pc, #320]	@ (800f9e8 <tcp_input+0x770>)
 800f8a8:	f008 ff0a 	bl	80186c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	8b5b      	ldrh	r3, [r3, #26]
 800f8b0:	f003 0310 	and.w	r3, r3, #16
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d008      	beq.n	800f8ca <tcp_input+0x652>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f8b8:	4b42      	ldr	r3, [pc, #264]	@ (800f9c4 <tcp_input+0x74c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fd fc35 	bl	800d12c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f8c2:	69f8      	ldr	r0, [r7, #28]
 800f8c4:	f7fe fa28 	bl	800dd18 <tcp_abort>
            goto aborted;
 800f8c8:	e091      	b.n	800f9ee <tcp_input+0x776>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00c      	beq.n	800f8ee <tcp_input+0x676>
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	6918      	ldr	r0, [r3, #16]
 800f8de:	4b39      	ldr	r3, [pc, #228]	@ (800f9c4 <tcp_input+0x74c>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	69f9      	ldr	r1, [r7, #28]
 800f8e6:	47a0      	blx	r4
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	74fb      	strb	r3, [r7, #19]
 800f8ec:	e008      	b.n	800f900 <tcp_input+0x688>
 800f8ee:	4b35      	ldr	r3, [pc, #212]	@ (800f9c4 <tcp_input+0x74c>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	69f9      	ldr	r1, [r7, #28]
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	f7ff f8aa 	bl	800ea50 <tcp_recv_null>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f904:	f113 0f0d 	cmn.w	r3, #13
 800f908:	d054      	beq.n	800f9b4 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f90a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d003      	beq.n	800f91a <tcp_input+0x6a2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f912:	4b2c      	ldr	r3, [pc, #176]	@ (800f9c4 <tcp_input+0x74c>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f91a:	4b2b      	ldr	r3, [pc, #172]	@ (800f9c8 <tcp_input+0x750>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	f003 0320 	and.w	r3, r3, #32
 800f922:	2b00      	cmp	r3, #0
 800f924:	d031      	beq.n	800f98a <tcp_input+0x712>
          if (pcb->refused_data != NULL) {
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d009      	beq.n	800f942 <tcp_input+0x6ca>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f932:	7b5a      	ldrb	r2, [r3, #13]
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f938:	f042 0220 	orr.w	r2, r2, #32
 800f93c:	b2d2      	uxtb	r2, r2
 800f93e:	735a      	strb	r2, [r3, #13]
 800f940:	e023      	b.n	800f98a <tcp_input+0x712>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f946:	f640 3268 	movw	r2, #2920	@ 0xb68
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d005      	beq.n	800f95a <tcp_input+0x6e2>
              pcb->rcv_wnd++;
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f952:	3301      	adds	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00b      	beq.n	800f97c <tcp_input+0x704>
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	6918      	ldr	r0, [r3, #16]
 800f96e:	2300      	movs	r3, #0
 800f970:	2200      	movs	r2, #0
 800f972:	69f9      	ldr	r1, [r7, #28]
 800f974:	47a0      	blx	r4
 800f976:	4603      	mov	r3, r0
 800f978:	74fb      	strb	r3, [r7, #19]
 800f97a:	e001      	b.n	800f980 <tcp_input+0x708>
 800f97c:	2300      	movs	r3, #0
 800f97e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f984:	f113 0f0d 	cmn.w	r3, #13
 800f988:	d016      	beq.n	800f9b8 <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f98a:	4b13      	ldr	r3, [pc, #76]	@ (800f9d8 <tcp_input+0x760>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f990:	69f8      	ldr	r0, [r7, #28]
 800f992:	f000 f88f 	bl	800fab4 <tcp_input_delayed_close>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d127      	bne.n	800f9ec <tcp_input+0x774>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f99c:	69f8      	ldr	r0, [r7, #28]
 800f99e:	f002 fb67 	bl	8012070 <tcp_output>
 800f9a2:	e024      	b.n	800f9ee <tcp_input+0x776>
        goto aborted;
 800f9a4:	bf00      	nop
 800f9a6:	e022      	b.n	800f9ee <tcp_input+0x776>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f9a8:	bf00      	nop
 800f9aa:	e020      	b.n	800f9ee <tcp_input+0x776>
              goto aborted;
 800f9ac:	bf00      	nop
 800f9ae:	e01e      	b.n	800f9ee <tcp_input+0x776>
          goto aborted;
 800f9b0:	bf00      	nop
 800f9b2:	e01c      	b.n	800f9ee <tcp_input+0x776>
            goto aborted;
 800f9b4:	bf00      	nop
 800f9b6:	e01a      	b.n	800f9ee <tcp_input+0x776>
              goto aborted;
 800f9b8:	bf00      	nop
 800f9ba:	e018      	b.n	800f9ee <tcp_input+0x776>
 800f9bc:	200157e0 	.word	0x200157e0
 800f9c0:	200157f0 	.word	0x200157f0
 800f9c4:	20015810 	.word	0x20015810
 800f9c8:	2001580d 	.word	0x2001580d
 800f9cc:	20015808 	.word	0x20015808
 800f9d0:	2001580c 	.word	0x2001580c
 800f9d4:	2001580a 	.word	0x2001580a
 800f9d8:	20015814 	.word	0x20015814
 800f9dc:	200157d4 	.word	0x200157d4
 800f9e0:	0801b898 	.word	0x0801b898
 800f9e4:	0801ba4c 	.word	0x0801ba4c
 800f9e8:	0801b8e4 	.word	0x0801b8e4
          goto aborted;
 800f9ec:	bf00      	nop
    tcp_input_pcb = NULL;
 800f9ee:	4b28      	ldr	r3, [pc, #160]	@ (800fa90 <tcp_input+0x818>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f9f4:	4b27      	ldr	r3, [pc, #156]	@ (800fa94 <tcp_input+0x81c>)
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f9fa:	4b27      	ldr	r3, [pc, #156]	@ (800fa98 <tcp_input+0x820>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d041      	beq.n	800fa86 <tcp_input+0x80e>
      pbuf_free(inseg.p);
 800fa02:	4b25      	ldr	r3, [pc, #148]	@ (800fa98 <tcp_input+0x820>)
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fd fb90 	bl	800d12c <pbuf_free>
      inseg.p = NULL;
 800fa0c:	4b22      	ldr	r3, [pc, #136]	@ (800fa98 <tcp_input+0x820>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa12:	e038      	b.n	800fa86 <tcp_input+0x80e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa14:	4b21      	ldr	r3, [pc, #132]	@ (800fa9c <tcp_input+0x824>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	899b      	ldrh	r3, [r3, #12]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fb feaf 	bl	800b780 <lwip_htons>
 800fa22:	4603      	mov	r3, r0
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	f003 0304 	and.w	r3, r3, #4
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d118      	bne.n	800fa60 <tcp_input+0x7e8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa2e:	4b1c      	ldr	r3, [pc, #112]	@ (800faa0 <tcp_input+0x828>)
 800fa30:	6819      	ldr	r1, [r3, #0]
 800fa32:	4b1c      	ldr	r3, [pc, #112]	@ (800faa4 <tcp_input+0x82c>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	4b1b      	ldr	r3, [pc, #108]	@ (800faa8 <tcp_input+0x830>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa3e:	4b17      	ldr	r3, [pc, #92]	@ (800fa9c <tcp_input+0x824>)
 800fa40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa42:	885b      	ldrh	r3, [r3, #2]
 800fa44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa46:	4a15      	ldr	r2, [pc, #84]	@ (800fa9c <tcp_input+0x824>)
 800fa48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa4a:	8812      	ldrh	r2, [r2, #0]
 800fa4c:	b292      	uxth	r2, r2
 800fa4e:	9202      	str	r2, [sp, #8]
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	4b16      	ldr	r3, [pc, #88]	@ (800faac <tcp_input+0x834>)
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	4b16      	ldr	r3, [pc, #88]	@ (800fab0 <tcp_input+0x838>)
 800fa58:	4602      	mov	r2, r0
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f003 f8de 	bl	8012c1c <tcp_rst>
    pbuf_free(p);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7fd fb63 	bl	800d12c <pbuf_free>
  return;
 800fa66:	e00e      	b.n	800fa86 <tcp_input+0x80e>
    goto dropped;
 800fa68:	bf00      	nop
 800fa6a:	e008      	b.n	800fa7e <tcp_input+0x806>
    goto dropped;
 800fa6c:	bf00      	nop
 800fa6e:	e006      	b.n	800fa7e <tcp_input+0x806>
      goto dropped;
 800fa70:	bf00      	nop
 800fa72:	e004      	b.n	800fa7e <tcp_input+0x806>
    goto dropped;
 800fa74:	bf00      	nop
 800fa76:	e002      	b.n	800fa7e <tcp_input+0x806>
      goto dropped;
 800fa78:	bf00      	nop
 800fa7a:	e000      	b.n	800fa7e <tcp_input+0x806>
      goto dropped;
 800fa7c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7fd fb54 	bl	800d12c <pbuf_free>
 800fa84:	e000      	b.n	800fa88 <tcp_input+0x810>
  return;
 800fa86:	bf00      	nop
}
 800fa88:	3724      	adds	r7, #36	@ 0x24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd90      	pop	{r4, r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20015814 	.word	0x20015814
 800fa94:	20015810 	.word	0x20015810
 800fa98:	200157e0 	.word	0x200157e0
 800fa9c:	200157f0 	.word	0x200157f0
 800faa0:	20015804 	.word	0x20015804
 800faa4:	2001580a 	.word	0x2001580a
 800faa8:	20015800 	.word	0x20015800
 800faac:	20009334 	.word	0x20009334
 800fab0:	20009338 	.word	0x20009338

0800fab4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d106      	bne.n	800fad0 <tcp_input_delayed_close+0x1c>
 800fac2:	4b17      	ldr	r3, [pc, #92]	@ (800fb20 <tcp_input_delayed_close+0x6c>)
 800fac4:	f240 225a 	movw	r2, #602	@ 0x25a
 800fac8:	4916      	ldr	r1, [pc, #88]	@ (800fb24 <tcp_input_delayed_close+0x70>)
 800faca:	4817      	ldr	r0, [pc, #92]	@ (800fb28 <tcp_input_delayed_close+0x74>)
 800facc:	f008 fdf8 	bl	80186c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fad0:	4b16      	ldr	r3, [pc, #88]	@ (800fb2c <tcp_input_delayed_close+0x78>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	f003 0310 	and.w	r3, r3, #16
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d01c      	beq.n	800fb16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	8b5b      	ldrh	r3, [r3, #26]
 800fae0:	f003 0310 	and.w	r3, r3, #16
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d10d      	bne.n	800fb04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d008      	beq.n	800fb04 <tcp_input_delayed_close+0x50>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	6912      	ldr	r2, [r2, #16]
 800fafc:	f06f 010e 	mvn.w	r1, #14
 800fb00:	4610      	mov	r0, r2
 800fb02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb04:	6879      	ldr	r1, [r7, #4]
 800fb06:	480a      	ldr	r0, [pc, #40]	@ (800fb30 <tcp_input_delayed_close+0x7c>)
 800fb08:	f7ff fa60 	bl	800efcc <tcp_pcb_remove>
    tcp_free(pcb);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7fd fdc9 	bl	800d6a4 <tcp_free>
    return 1;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e000      	b.n	800fb18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	0801b898 	.word	0x0801b898
 800fb24:	0801ba68 	.word	0x0801ba68
 800fb28:	0801b8e4 	.word	0x0801b8e4
 800fb2c:	2001580d 	.word	0x2001580d
 800fb30:	200157d4 	.word	0x200157d4

0800fb34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb34:	b590      	push	{r4, r7, lr}
 800fb36:	b08b      	sub	sp, #44	@ 0x2c
 800fb38:	af04      	add	r7, sp, #16
 800fb3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb3c:	4b6f      	ldr	r3, [pc, #444]	@ (800fcfc <tcp_listen_input+0x1c8>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 0304 	and.w	r3, r3, #4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f040 80d2 	bne.w	800fcee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d106      	bne.n	800fb5e <tcp_listen_input+0x2a>
 800fb50:	4b6b      	ldr	r3, [pc, #428]	@ (800fd00 <tcp_listen_input+0x1cc>)
 800fb52:	f240 2281 	movw	r2, #641	@ 0x281
 800fb56:	496b      	ldr	r1, [pc, #428]	@ (800fd04 <tcp_listen_input+0x1d0>)
 800fb58:	486b      	ldr	r0, [pc, #428]	@ (800fd08 <tcp_listen_input+0x1d4>)
 800fb5a:	f008 fdb1 	bl	80186c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb5e:	4b67      	ldr	r3, [pc, #412]	@ (800fcfc <tcp_listen_input+0x1c8>)
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 0310 	and.w	r3, r3, #16
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d019      	beq.n	800fb9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb6a:	4b68      	ldr	r3, [pc, #416]	@ (800fd0c <tcp_listen_input+0x1d8>)
 800fb6c:	6819      	ldr	r1, [r3, #0]
 800fb6e:	4b68      	ldr	r3, [pc, #416]	@ (800fd10 <tcp_listen_input+0x1dc>)
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	4b67      	ldr	r3, [pc, #412]	@ (800fd14 <tcp_listen_input+0x1e0>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb7a:	4b67      	ldr	r3, [pc, #412]	@ (800fd18 <tcp_listen_input+0x1e4>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb7e:	885b      	ldrh	r3, [r3, #2]
 800fb80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb82:	4a65      	ldr	r2, [pc, #404]	@ (800fd18 <tcp_listen_input+0x1e4>)
 800fb84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb86:	8812      	ldrh	r2, [r2, #0]
 800fb88:	b292      	uxth	r2, r2
 800fb8a:	9202      	str	r2, [sp, #8]
 800fb8c:	9301      	str	r3, [sp, #4]
 800fb8e:	4b63      	ldr	r3, [pc, #396]	@ (800fd1c <tcp_listen_input+0x1e8>)
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4b63      	ldr	r3, [pc, #396]	@ (800fd20 <tcp_listen_input+0x1ec>)
 800fb94:	4602      	mov	r2, r0
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f003 f840 	bl	8012c1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb9c:	e0a9      	b.n	800fcf2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb9e:	4b57      	ldr	r3, [pc, #348]	@ (800fcfc <tcp_listen_input+0x1c8>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f003 0302 	and.w	r3, r3, #2
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f000 80a3 	beq.w	800fcf2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	7d5b      	ldrb	r3, [r3, #21]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff f871 	bl	800ec98 <tcp_alloc>
 800fbb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d111      	bne.n	800fbe2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	699b      	ldr	r3, [r3, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00a      	beq.n	800fbdc <tcp_listen_input+0xa8>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	6910      	ldr	r0, [r2, #16]
 800fbce:	f04f 32ff 	mov.w	r2, #4294967295
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	4798      	blx	r3
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73bb      	strb	r3, [r7, #14]
      return;
 800fbda:	e08b      	b.n	800fcf4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbdc:	23f0      	movs	r3, #240	@ 0xf0
 800fbde:	73bb      	strb	r3, [r7, #14]
      return;
 800fbe0:	e088      	b.n	800fcf4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbe2:	4b50      	ldr	r3, [pc, #320]	@ (800fd24 <tcp_listen_input+0x1f0>)
 800fbe4:	695a      	ldr	r2, [r3, #20]
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbea:	4b4e      	ldr	r3, [pc, #312]	@ (800fd24 <tcp_listen_input+0x1f0>)
 800fbec:	691a      	ldr	r2, [r3, #16]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8ada      	ldrh	r2, [r3, #22]
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fbfa:	4b47      	ldr	r3, [pc, #284]	@ (800fd18 <tcp_listen_input+0x1e4>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	2203      	movs	r2, #3
 800fc0a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc0c:	4b41      	ldr	r3, [pc, #260]	@ (800fd14 <tcp_listen_input+0x1e0>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	1c5a      	adds	r2, r3, #1
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fc1e:	6978      	ldr	r0, [r7, #20]
 800fc20:	f7ff fa5a 	bl	800f0d8 <tcp_next_iss>
 800fc24:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	693a      	ldr	r2, [r7, #16]
 800fc2a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	693a      	ldr	r2, [r7, #16]
 800fc36:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc3e:	4b35      	ldr	r3, [pc, #212]	@ (800fd14 <tcp_listen_input+0x1e0>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	1e5a      	subs	r2, r3, #1
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	691a      	ldr	r2, [r3, #16]
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	7a5b      	ldrb	r3, [r3, #9]
 800fc5a:	f003 030c 	and.w	r3, r3, #12
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	7a1a      	ldrb	r2, [r3, #8]
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc6c:	4b2e      	ldr	r3, [pc, #184]	@ (800fd28 <tcp_listen_input+0x1f4>)
 800fc6e:	681a      	ldr	r2, [r3, #0]
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	60da      	str	r2, [r3, #12]
 800fc74:	4a2c      	ldr	r2, [pc, #176]	@ (800fd28 <tcp_listen_input+0x1f4>)
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	f003 f991 	bl	8012fa0 <tcp_timer_needed>
 800fc7e:	4b2b      	ldr	r3, [pc, #172]	@ (800fd2c <tcp_listen_input+0x1f8>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc84:	6978      	ldr	r0, [r7, #20]
 800fc86:	f001 f9d5 	bl	8011034 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc8a:	4b23      	ldr	r3, [pc, #140]	@ (800fd18 <tcp_listen_input+0x1e4>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	89db      	ldrh	r3, [r3, #14]
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	3304      	adds	r3, #4
 800fcac:	4618      	mov	r0, r3
 800fcae:	f006 ff83 	bl	8016bb8 <ip4_route>
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f7ff fa32 	bl	800f124 <tcp_eff_send_mss_netif>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fcc8:	2112      	movs	r1, #18
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f002 f8e2 	bl	8011e94 <tcp_enqueue_flags>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fcd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d004      	beq.n	800fce6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fcdc:	2100      	movs	r1, #0
 800fcde:	6978      	ldr	r0, [r7, #20]
 800fce0:	f7fd ff66 	bl	800dbb0 <tcp_abandon>
      return;
 800fce4:	e006      	b.n	800fcf4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fce6:	6978      	ldr	r0, [r7, #20]
 800fce8:	f002 f9c2 	bl	8012070 <tcp_output>
  return;
 800fcec:	e001      	b.n	800fcf2 <tcp_listen_input+0x1be>
    return;
 800fcee:	bf00      	nop
 800fcf0:	e000      	b.n	800fcf4 <tcp_listen_input+0x1c0>
  return;
 800fcf2:	bf00      	nop
}
 800fcf4:	371c      	adds	r7, #28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd90      	pop	{r4, r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	2001580c 	.word	0x2001580c
 800fd00:	0801b898 	.word	0x0801b898
 800fd04:	0801ba90 	.word	0x0801ba90
 800fd08:	0801b8e4 	.word	0x0801b8e4
 800fd0c:	20015804 	.word	0x20015804
 800fd10:	2001580a 	.word	0x2001580a
 800fd14:	20015800 	.word	0x20015800
 800fd18:	200157f0 	.word	0x200157f0
 800fd1c:	20009334 	.word	0x20009334
 800fd20:	20009338 	.word	0x20009338
 800fd24:	20009324 	.word	0x20009324
 800fd28:	200157d4 	.word	0x200157d4
 800fd2c:	200157dc 	.word	0x200157dc

0800fd30 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af04      	add	r7, sp, #16
 800fd36:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd38:	4b2f      	ldr	r3, [pc, #188]	@ (800fdf8 <tcp_timewait_input+0xc8>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 0304 	and.w	r3, r3, #4
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d153      	bne.n	800fdec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d106      	bne.n	800fd58 <tcp_timewait_input+0x28>
 800fd4a:	4b2c      	ldr	r3, [pc, #176]	@ (800fdfc <tcp_timewait_input+0xcc>)
 800fd4c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fd50:	492b      	ldr	r1, [pc, #172]	@ (800fe00 <tcp_timewait_input+0xd0>)
 800fd52:	482c      	ldr	r0, [pc, #176]	@ (800fe04 <tcp_timewait_input+0xd4>)
 800fd54:	f008 fcb4 	bl	80186c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd58:	4b27      	ldr	r3, [pc, #156]	@ (800fdf8 <tcp_timewait_input+0xc8>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	f003 0302 	and.w	r3, r3, #2
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d02a      	beq.n	800fdba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd64:	4b28      	ldr	r3, [pc, #160]	@ (800fe08 <tcp_timewait_input+0xd8>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	db2d      	blt.n	800fdce <tcp_timewait_input+0x9e>
 800fd72:	4b25      	ldr	r3, [pc, #148]	@ (800fe08 <tcp_timewait_input+0xd8>)
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd7e:	440b      	add	r3, r1
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	dc23      	bgt.n	800fdce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd86:	4b21      	ldr	r3, [pc, #132]	@ (800fe0c <tcp_timewait_input+0xdc>)
 800fd88:	6819      	ldr	r1, [r3, #0]
 800fd8a:	4b21      	ldr	r3, [pc, #132]	@ (800fe10 <tcp_timewait_input+0xe0>)
 800fd8c:	881b      	ldrh	r3, [r3, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4b1d      	ldr	r3, [pc, #116]	@ (800fe08 <tcp_timewait_input+0xd8>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd96:	4b1f      	ldr	r3, [pc, #124]	@ (800fe14 <tcp_timewait_input+0xe4>)
 800fd98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd9a:	885b      	ldrh	r3, [r3, #2]
 800fd9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd9e:	4a1d      	ldr	r2, [pc, #116]	@ (800fe14 <tcp_timewait_input+0xe4>)
 800fda0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda2:	8812      	ldrh	r2, [r2, #0]
 800fda4:	b292      	uxth	r2, r2
 800fda6:	9202      	str	r2, [sp, #8]
 800fda8:	9301      	str	r3, [sp, #4]
 800fdaa:	4b1b      	ldr	r3, [pc, #108]	@ (800fe18 <tcp_timewait_input+0xe8>)
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4b1b      	ldr	r3, [pc, #108]	@ (800fe1c <tcp_timewait_input+0xec>)
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f002 ff32 	bl	8012c1c <tcp_rst>
      return;
 800fdb8:	e01b      	b.n	800fdf2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fdba:	4b0f      	ldr	r3, [pc, #60]	@ (800fdf8 <tcp_timewait_input+0xc8>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d003      	beq.n	800fdce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fdc6:	4b16      	ldr	r3, [pc, #88]	@ (800fe20 <tcp_timewait_input+0xf0>)
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fdce:	4b10      	ldr	r3, [pc, #64]	@ (800fe10 <tcp_timewait_input+0xe0>)
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00c      	beq.n	800fdf0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	8b5b      	ldrh	r3, [r3, #26]
 800fdda:	f043 0302 	orr.w	r3, r3, #2
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f002 f943 	bl	8012070 <tcp_output>
  }
  return;
 800fdea:	e001      	b.n	800fdf0 <tcp_timewait_input+0xc0>
    return;
 800fdec:	bf00      	nop
 800fdee:	e000      	b.n	800fdf2 <tcp_timewait_input+0xc2>
  return;
 800fdf0:	bf00      	nop
}
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	2001580c 	.word	0x2001580c
 800fdfc:	0801b898 	.word	0x0801b898
 800fe00:	0801bab0 	.word	0x0801bab0
 800fe04:	0801b8e4 	.word	0x0801b8e4
 800fe08:	20015800 	.word	0x20015800
 800fe0c:	20015804 	.word	0x20015804
 800fe10:	2001580a 	.word	0x2001580a
 800fe14:	200157f0 	.word	0x200157f0
 800fe18:	20009334 	.word	0x20009334
 800fe1c:	20009338 	.word	0x20009338
 800fe20:	200157c8 	.word	0x200157c8

0800fe24 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fe24:	b590      	push	{r4, r7, lr}
 800fe26:	b08d      	sub	sp, #52	@ 0x34
 800fe28:	af04      	add	r7, sp, #16
 800fe2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d106      	bne.n	800fe48 <tcp_process+0x24>
 800fe3a:	4b9d      	ldr	r3, [pc, #628]	@ (80100b0 <tcp_process+0x28c>)
 800fe3c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fe40:	499c      	ldr	r1, [pc, #624]	@ (80100b4 <tcp_process+0x290>)
 800fe42:	489d      	ldr	r0, [pc, #628]	@ (80100b8 <tcp_process+0x294>)
 800fe44:	f008 fc3c 	bl	80186c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe48:	4b9c      	ldr	r3, [pc, #624]	@ (80100bc <tcp_process+0x298>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	f003 0304 	and.w	r3, r3, #4
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d04e      	beq.n	800fef2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	d108      	bne.n	800fe6e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe60:	4b97      	ldr	r3, [pc, #604]	@ (80100c0 <tcp_process+0x29c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d123      	bne.n	800feb0 <tcp_process+0x8c>
        acceptable = 1;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	76fb      	strb	r3, [r7, #27]
 800fe6c:	e020      	b.n	800feb0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe72:	4b94      	ldr	r3, [pc, #592]	@ (80100c4 <tcp_process+0x2a0>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d102      	bne.n	800fe80 <tcp_process+0x5c>
        acceptable = 1;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	76fb      	strb	r3, [r7, #27]
 800fe7e:	e017      	b.n	800feb0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe80:	4b90      	ldr	r3, [pc, #576]	@ (80100c4 <tcp_process+0x2a0>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	db10      	blt.n	800feb0 <tcp_process+0x8c>
 800fe8e:	4b8d      	ldr	r3, [pc, #564]	@ (80100c4 <tcp_process+0x2a0>)
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe96:	6879      	ldr	r1, [r7, #4]
 800fe98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe9a:	440b      	add	r3, r1
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	dc06      	bgt.n	800feb0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	8b5b      	ldrh	r3, [r3, #26]
 800fea6:	f043 0302 	orr.w	r3, r3, #2
 800feaa:	b29a      	uxth	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800feb0:	7efb      	ldrb	r3, [r7, #27]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d01b      	beq.n	800feee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	7d1b      	ldrb	r3, [r3, #20]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d106      	bne.n	800fecc <tcp_process+0xa8>
 800febe:	4b7c      	ldr	r3, [pc, #496]	@ (80100b0 <tcp_process+0x28c>)
 800fec0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fec4:	4980      	ldr	r1, [pc, #512]	@ (80100c8 <tcp_process+0x2a4>)
 800fec6:	487c      	ldr	r0, [pc, #496]	@ (80100b8 <tcp_process+0x294>)
 800fec8:	f008 fbfa 	bl	80186c0 <iprintf>
      recv_flags |= TF_RESET;
 800fecc:	4b7f      	ldr	r3, [pc, #508]	@ (80100cc <tcp_process+0x2a8>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f043 0308 	orr.w	r3, r3, #8
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	4b7d      	ldr	r3, [pc, #500]	@ (80100cc <tcp_process+0x2a8>)
 800fed8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8b5b      	ldrh	r3, [r3, #26]
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fee8:	f06f 030d 	mvn.w	r3, #13
 800feec:	e37a      	b.n	80105e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800feee:	2300      	movs	r3, #0
 800fef0:	e378      	b.n	80105e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fef2:	4b72      	ldr	r3, [pc, #456]	@ (80100bc <tcp_process+0x298>)
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	f003 0302 	and.w	r3, r3, #2
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d010      	beq.n	800ff20 <tcp_process+0xfc>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	7d1b      	ldrb	r3, [r3, #20]
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	d00c      	beq.n	800ff20 <tcp_process+0xfc>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	7d1b      	ldrb	r3, [r3, #20]
 800ff0a:	2b03      	cmp	r3, #3
 800ff0c:	d008      	beq.n	800ff20 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	8b5b      	ldrh	r3, [r3, #26]
 800ff12:	f043 0302 	orr.w	r3, r3, #2
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	e361      	b.n	80105e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8b5b      	ldrh	r3, [r3, #26]
 800ff24:	f003 0310 	and.w	r3, r3, #16
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d103      	bne.n	800ff34 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff2c:	4b68      	ldr	r3, [pc, #416]	@ (80100d0 <tcp_process+0x2ac>)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f001 f875 	bl	8011034 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	7d1b      	ldrb	r3, [r3, #20]
 800ff4e:	3b02      	subs	r3, #2
 800ff50:	2b07      	cmp	r3, #7
 800ff52:	f200 8337 	bhi.w	80105c4 <tcp_process+0x7a0>
 800ff56:	a201      	add	r2, pc, #4	@ (adr r2, 800ff5c <tcp_process+0x138>)
 800ff58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5c:	0800ff7d 	.word	0x0800ff7d
 800ff60:	080101ad 	.word	0x080101ad
 800ff64:	08010325 	.word	0x08010325
 800ff68:	0801034f 	.word	0x0801034f
 800ff6c:	08010473 	.word	0x08010473
 800ff70:	08010325 	.word	0x08010325
 800ff74:	080104ff 	.word	0x080104ff
 800ff78:	0801058f 	.word	0x0801058f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff7c:	4b4f      	ldr	r3, [pc, #316]	@ (80100bc <tcp_process+0x298>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	f003 0310 	and.w	r3, r3, #16
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f000 80e4 	beq.w	8010152 <tcp_process+0x32e>
 800ff8a:	4b4c      	ldr	r3, [pc, #304]	@ (80100bc <tcp_process+0x298>)
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	f003 0302 	and.w	r3, r3, #2
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f000 80dd 	beq.w	8010152 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	4b48      	ldr	r3, [pc, #288]	@ (80100c0 <tcp_process+0x29c>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	f040 80d5 	bne.w	8010152 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ffa8:	4b46      	ldr	r3, [pc, #280]	@ (80100c4 <tcp_process+0x2a0>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	1c5a      	adds	r2, r3, #1
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ffba:	4b41      	ldr	r3, [pc, #260]	@ (80100c0 <tcp_process+0x29c>)
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ffc2:	4b44      	ldr	r3, [pc, #272]	@ (80100d4 <tcp_process+0x2b0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	89db      	ldrh	r3, [r3, #14]
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ffdc:	4b39      	ldr	r3, [pc, #228]	@ (80100c4 <tcp_process+0x2a0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	1e5a      	subs	r2, r3, #1
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2204      	movs	r2, #4
 800ffea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	3304      	adds	r3, #4
 800fff4:	4618      	mov	r0, r3
 800fff6:	f006 fddf 	bl	8016bb8 <ip4_route>
 800fffa:	4601      	mov	r1, r0
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3304      	adds	r3, #4
 8010000:	461a      	mov	r2, r3
 8010002:	4620      	mov	r0, r4
 8010004:	f7ff f88e 	bl	800f124 <tcp_eff_send_mss_netif>
 8010008:	4603      	mov	r3, r0
 801000a:	461a      	mov	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010014:	009a      	lsls	r2, r3, #2
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010020:	428b      	cmp	r3, r1
 8010022:	bf38      	it	cc
 8010024:	460b      	movcc	r3, r1
 8010026:	429a      	cmp	r2, r3
 8010028:	d204      	bcs.n	8010034 <tcp_process+0x210>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	b29b      	uxth	r3, r3
 8010032:	e00d      	b.n	8010050 <tcp_process+0x22c>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801003e:	4293      	cmp	r3, r2
 8010040:	d904      	bls.n	801004c <tcp_process+0x228>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010046:	005b      	lsls	r3, r3, #1
 8010048:	b29b      	uxth	r3, r3
 801004a:	e001      	b.n	8010050 <tcp_process+0x22c>
 801004c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <tcp_process+0x24a>
 8010060:	4b13      	ldr	r3, [pc, #76]	@ (80100b0 <tcp_process+0x28c>)
 8010062:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010066:	491c      	ldr	r1, [pc, #112]	@ (80100d8 <tcp_process+0x2b4>)
 8010068:	4813      	ldr	r0, [pc, #76]	@ (80100b8 <tcp_process+0x294>)
 801006a:	f008 fb29 	bl	80186c0 <iprintf>
        --pcb->snd_queuelen;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010074:	3b01      	subs	r3, #1
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010082:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d12a      	bne.n	80100e0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801008e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d106      	bne.n	80100a4 <tcp_process+0x280>
 8010096:	4b06      	ldr	r3, [pc, #24]	@ (80100b0 <tcp_process+0x28c>)
 8010098:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801009c:	490f      	ldr	r1, [pc, #60]	@ (80100dc <tcp_process+0x2b8>)
 801009e:	4806      	ldr	r0, [pc, #24]	@ (80100b8 <tcp_process+0x294>)
 80100a0:	f008 fb0e 	bl	80186c0 <iprintf>
          pcb->unsent = rseg->next;
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80100ac:	e01c      	b.n	80100e8 <tcp_process+0x2c4>
 80100ae:	bf00      	nop
 80100b0:	0801b898 	.word	0x0801b898
 80100b4:	0801bad0 	.word	0x0801bad0
 80100b8:	0801b8e4 	.word	0x0801b8e4
 80100bc:	2001580c 	.word	0x2001580c
 80100c0:	20015804 	.word	0x20015804
 80100c4:	20015800 	.word	0x20015800
 80100c8:	0801baec 	.word	0x0801baec
 80100cc:	2001580d 	.word	0x2001580d
 80100d0:	200157c8 	.word	0x200157c8
 80100d4:	200157f0 	.word	0x200157f0
 80100d8:	0801bb0c 	.word	0x0801bb0c
 80100dc:	0801bb24 	.word	0x0801bb24
        } else {
          pcb->unacked = rseg->next;
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80100e8:	69f8      	ldr	r0, [r7, #28]
 80100ea:	f7fe fc98 	bl	800ea1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d104      	bne.n	8010100 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100fc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80100fe:	e006      	b.n	801010e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00a      	beq.n	801012e <tcp_process+0x30a>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	6910      	ldr	r0, [r2, #16]
 8010122:	2200      	movs	r2, #0
 8010124:	6879      	ldr	r1, [r7, #4]
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	76bb      	strb	r3, [r7, #26]
 801012c:	e001      	b.n	8010132 <tcp_process+0x30e>
 801012e:	2300      	movs	r3, #0
 8010130:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010132:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010136:	f113 0f0d 	cmn.w	r3, #13
 801013a:	d102      	bne.n	8010142 <tcp_process+0x31e>
          return ERR_ABRT;
 801013c:	f06f 030c 	mvn.w	r3, #12
 8010140:	e250      	b.n	80105e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	8b5b      	ldrh	r3, [r3, #26]
 8010146:	f043 0302 	orr.w	r3, r3, #2
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010150:	e23a      	b.n	80105c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010152:	4b98      	ldr	r3, [pc, #608]	@ (80103b4 <tcp_process+0x590>)
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	f003 0310 	and.w	r3, r3, #16
 801015a:	2b00      	cmp	r3, #0
 801015c:	f000 8234 	beq.w	80105c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010160:	4b95      	ldr	r3, [pc, #596]	@ (80103b8 <tcp_process+0x594>)
 8010162:	6819      	ldr	r1, [r3, #0]
 8010164:	4b95      	ldr	r3, [pc, #596]	@ (80103bc <tcp_process+0x598>)
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	461a      	mov	r2, r3
 801016a:	4b95      	ldr	r3, [pc, #596]	@ (80103c0 <tcp_process+0x59c>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010170:	4b94      	ldr	r3, [pc, #592]	@ (80103c4 <tcp_process+0x5a0>)
 8010172:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010174:	885b      	ldrh	r3, [r3, #2]
 8010176:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010178:	4a92      	ldr	r2, [pc, #584]	@ (80103c4 <tcp_process+0x5a0>)
 801017a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801017c:	8812      	ldrh	r2, [r2, #0]
 801017e:	b292      	uxth	r2, r2
 8010180:	9202      	str	r2, [sp, #8]
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	4b90      	ldr	r3, [pc, #576]	@ (80103c8 <tcp_process+0x5a4>)
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	4b90      	ldr	r3, [pc, #576]	@ (80103cc <tcp_process+0x5a8>)
 801018a:	4602      	mov	r2, r0
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f002 fd45 	bl	8012c1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010198:	2b05      	cmp	r3, #5
 801019a:	f200 8215 	bhi.w	80105c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f002 fb01 	bl	80127ac <tcp_rexmit_rto>
      break;
 80101aa:	e20d      	b.n	80105c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80101ac:	4b81      	ldr	r3, [pc, #516]	@ (80103b4 <tcp_process+0x590>)
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	f003 0310 	and.w	r3, r3, #16
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f000 80a1 	beq.w	80102fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101ba:	4b7f      	ldr	r3, [pc, #508]	@ (80103b8 <tcp_process+0x594>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	3b01      	subs	r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	db7e      	blt.n	80102c8 <tcp_process+0x4a4>
 80101ca:	4b7b      	ldr	r3, [pc, #492]	@ (80103b8 <tcp_process+0x594>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dc77      	bgt.n	80102c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2204      	movs	r2, #4
 80101dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d102      	bne.n	80101ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101e6:	23fa      	movs	r3, #250	@ 0xfa
 80101e8:	76bb      	strb	r3, [r7, #26]
 80101ea:	e01d      	b.n	8010228 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101f0:	699b      	ldr	r3, [r3, #24]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d106      	bne.n	8010204 <tcp_process+0x3e0>
 80101f6:	4b76      	ldr	r3, [pc, #472]	@ (80103d0 <tcp_process+0x5ac>)
 80101f8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80101fc:	4975      	ldr	r1, [pc, #468]	@ (80103d4 <tcp_process+0x5b0>)
 80101fe:	4876      	ldr	r0, [pc, #472]	@ (80103d8 <tcp_process+0x5b4>)
 8010200:	f008 fa5e 	bl	80186c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010208:	699b      	ldr	r3, [r3, #24]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00a      	beq.n	8010224 <tcp_process+0x400>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	6910      	ldr	r0, [r2, #16]
 8010218:	2200      	movs	r2, #0
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	4798      	blx	r3
 801021e:	4603      	mov	r3, r0
 8010220:	76bb      	strb	r3, [r7, #26]
 8010222:	e001      	b.n	8010228 <tcp_process+0x404>
 8010224:	23f0      	movs	r3, #240	@ 0xf0
 8010226:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010228:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00a      	beq.n	8010246 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010230:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010234:	f113 0f0d 	cmn.w	r3, #13
 8010238:	d002      	beq.n	8010240 <tcp_process+0x41c>
              tcp_abort(pcb);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7fd fd6c 	bl	800dd18 <tcp_abort>
            }
            return ERR_ABRT;
 8010240:	f06f 030c 	mvn.w	r3, #12
 8010244:	e1ce      	b.n	80105e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fa58 	bl	80106fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801024c:	4b63      	ldr	r3, [pc, #396]	@ (80103dc <tcp_process+0x5b8>)
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d005      	beq.n	8010260 <tcp_process+0x43c>
            recv_acked--;
 8010254:	4b61      	ldr	r3, [pc, #388]	@ (80103dc <tcp_process+0x5b8>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	3b01      	subs	r3, #1
 801025a:	b29a      	uxth	r2, r3
 801025c:	4b5f      	ldr	r3, [pc, #380]	@ (80103dc <tcp_process+0x5b8>)
 801025e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010264:	009a      	lsls	r2, r3, #2
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010270:	428b      	cmp	r3, r1
 8010272:	bf38      	it	cc
 8010274:	460b      	movcc	r3, r1
 8010276:	429a      	cmp	r2, r3
 8010278:	d204      	bcs.n	8010284 <tcp_process+0x460>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	b29b      	uxth	r3, r3
 8010282:	e00d      	b.n	80102a0 <tcp_process+0x47c>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010288:	005b      	lsls	r3, r3, #1
 801028a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801028e:	4293      	cmp	r3, r2
 8010290:	d904      	bls.n	801029c <tcp_process+0x478>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	b29b      	uxth	r3, r3
 801029a:	e001      	b.n	80102a0 <tcp_process+0x47c>
 801029c:	f241 131c 	movw	r3, #4380	@ 0x111c
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80102a6:	4b4e      	ldr	r3, [pc, #312]	@ (80103e0 <tcp_process+0x5bc>)
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	f003 0320 	and.w	r3, r3, #32
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d037      	beq.n	8010322 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8b5b      	ldrh	r3, [r3, #26]
 80102b6:	f043 0302 	orr.w	r3, r3, #2
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2207      	movs	r2, #7
 80102c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80102c6:	e02c      	b.n	8010322 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102c8:	4b3b      	ldr	r3, [pc, #236]	@ (80103b8 <tcp_process+0x594>)
 80102ca:	6819      	ldr	r1, [r3, #0]
 80102cc:	4b3b      	ldr	r3, [pc, #236]	@ (80103bc <tcp_process+0x598>)
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	461a      	mov	r2, r3
 80102d2:	4b3b      	ldr	r3, [pc, #236]	@ (80103c0 <tcp_process+0x59c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102d8:	4b3a      	ldr	r3, [pc, #232]	@ (80103c4 <tcp_process+0x5a0>)
 80102da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102dc:	885b      	ldrh	r3, [r3, #2]
 80102de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e0:	4a38      	ldr	r2, [pc, #224]	@ (80103c4 <tcp_process+0x5a0>)
 80102e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e4:	8812      	ldrh	r2, [r2, #0]
 80102e6:	b292      	uxth	r2, r2
 80102e8:	9202      	str	r2, [sp, #8]
 80102ea:	9301      	str	r3, [sp, #4]
 80102ec:	4b36      	ldr	r3, [pc, #216]	@ (80103c8 <tcp_process+0x5a4>)
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	4b36      	ldr	r3, [pc, #216]	@ (80103cc <tcp_process+0x5a8>)
 80102f2:	4602      	mov	r2, r0
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f002 fc91 	bl	8012c1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80102fa:	e167      	b.n	80105cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80102fc:	4b2d      	ldr	r3, [pc, #180]	@ (80103b4 <tcp_process+0x590>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	f003 0302 	and.w	r3, r3, #2
 8010304:	2b00      	cmp	r3, #0
 8010306:	f000 8161 	beq.w	80105cc <tcp_process+0x7a8>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801030e:	1e5a      	subs	r2, r3, #1
 8010310:	4b2b      	ldr	r3, [pc, #172]	@ (80103c0 <tcp_process+0x59c>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	f040 8159 	bne.w	80105cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f002 fa68 	bl	80127f0 <tcp_rexmit>
      break;
 8010320:	e154      	b.n	80105cc <tcp_process+0x7a8>
 8010322:	e153      	b.n	80105cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 f9e9 	bl	80106fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801032a:	4b2d      	ldr	r3, [pc, #180]	@ (80103e0 <tcp_process+0x5bc>)
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	f003 0320 	and.w	r3, r3, #32
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 814c 	beq.w	80105d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	8b5b      	ldrh	r3, [r3, #26]
 801033c:	f043 0302 	orr.w	r3, r3, #2
 8010340:	b29a      	uxth	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2207      	movs	r2, #7
 801034a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801034c:	e140      	b.n	80105d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f9d4 	bl	80106fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010354:	4b22      	ldr	r3, [pc, #136]	@ (80103e0 <tcp_process+0x5bc>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	f003 0320 	and.w	r3, r3, #32
 801035c:	2b00      	cmp	r3, #0
 801035e:	d071      	beq.n	8010444 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010360:	4b14      	ldr	r3, [pc, #80]	@ (80103b4 <tcp_process+0x590>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	f003 0310 	and.w	r3, r3, #16
 8010368:	2b00      	cmp	r3, #0
 801036a:	d060      	beq.n	801042e <tcp_process+0x60a>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010370:	4b11      	ldr	r3, [pc, #68]	@ (80103b8 <tcp_process+0x594>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	429a      	cmp	r2, r3
 8010376:	d15a      	bne.n	801042e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801037c:	2b00      	cmp	r3, #0
 801037e:	d156      	bne.n	801042e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8b5b      	ldrh	r3, [r3, #26]
 8010384:	f043 0302 	orr.w	r3, r3, #2
 8010388:	b29a      	uxth	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7fe fdd2 	bl	800ef38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010394:	4b13      	ldr	r3, [pc, #76]	@ (80103e4 <tcp_process+0x5c0>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	429a      	cmp	r2, r3
 801039c:	d105      	bne.n	80103aa <tcp_process+0x586>
 801039e:	4b11      	ldr	r3, [pc, #68]	@ (80103e4 <tcp_process+0x5c0>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	4a0f      	ldr	r2, [pc, #60]	@ (80103e4 <tcp_process+0x5c0>)
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	e02e      	b.n	8010408 <tcp_process+0x5e4>
 80103aa:	4b0e      	ldr	r3, [pc, #56]	@ (80103e4 <tcp_process+0x5c0>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	617b      	str	r3, [r7, #20]
 80103b0:	e027      	b.n	8010402 <tcp_process+0x5de>
 80103b2:	bf00      	nop
 80103b4:	2001580c 	.word	0x2001580c
 80103b8:	20015804 	.word	0x20015804
 80103bc:	2001580a 	.word	0x2001580a
 80103c0:	20015800 	.word	0x20015800
 80103c4:	200157f0 	.word	0x200157f0
 80103c8:	20009334 	.word	0x20009334
 80103cc:	20009338 	.word	0x20009338
 80103d0:	0801b898 	.word	0x0801b898
 80103d4:	0801bb38 	.word	0x0801bb38
 80103d8:	0801b8e4 	.word	0x0801b8e4
 80103dc:	20015808 	.word	0x20015808
 80103e0:	2001580d 	.word	0x2001580d
 80103e4:	200157d4 	.word	0x200157d4
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d104      	bne.n	80103fc <tcp_process+0x5d8>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	68da      	ldr	r2, [r3, #12]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	60da      	str	r2, [r3, #12]
 80103fa:	e005      	b.n	8010408 <tcp_process+0x5e4>
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	617b      	str	r3, [r7, #20]
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1ef      	bne.n	80103e8 <tcp_process+0x5c4>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	60da      	str	r2, [r3, #12]
 801040e:	4b77      	ldr	r3, [pc, #476]	@ (80105ec <tcp_process+0x7c8>)
 8010410:	2201      	movs	r2, #1
 8010412:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	220a      	movs	r2, #10
 8010418:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801041a:	4b75      	ldr	r3, [pc, #468]	@ (80105f0 <tcp_process+0x7cc>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	60da      	str	r2, [r3, #12]
 8010422:	4a73      	ldr	r2, [pc, #460]	@ (80105f0 <tcp_process+0x7cc>)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	f002 fdba 	bl	8012fa0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801042c:	e0d2      	b.n	80105d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	8b5b      	ldrh	r3, [r3, #26]
 8010432:	f043 0302 	orr.w	r3, r3, #2
 8010436:	b29a      	uxth	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2208      	movs	r2, #8
 8010440:	751a      	strb	r2, [r3, #20]
      break;
 8010442:	e0c7      	b.n	80105d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010444:	4b6b      	ldr	r3, [pc, #428]	@ (80105f4 <tcp_process+0x7d0>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	f003 0310 	and.w	r3, r3, #16
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 80c1 	beq.w	80105d4 <tcp_process+0x7b0>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010456:	4b68      	ldr	r3, [pc, #416]	@ (80105f8 <tcp_process+0x7d4>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	f040 80ba 	bne.w	80105d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010464:	2b00      	cmp	r3, #0
 8010466:	f040 80b5 	bne.w	80105d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2206      	movs	r2, #6
 801046e:	751a      	strb	r2, [r3, #20]
      break;
 8010470:	e0b0      	b.n	80105d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f000 f942 	bl	80106fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010478:	4b60      	ldr	r3, [pc, #384]	@ (80105fc <tcp_process+0x7d8>)
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	f003 0320 	and.w	r3, r3, #32
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 80a9 	beq.w	80105d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8b5b      	ldrh	r3, [r3, #26]
 801048a:	f043 0302 	orr.w	r3, r3, #2
 801048e:	b29a      	uxth	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7fe fd4f 	bl	800ef38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801049a:	4b59      	ldr	r3, [pc, #356]	@ (8010600 <tcp_process+0x7dc>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d105      	bne.n	80104b0 <tcp_process+0x68c>
 80104a4:	4b56      	ldr	r3, [pc, #344]	@ (8010600 <tcp_process+0x7dc>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	4a55      	ldr	r2, [pc, #340]	@ (8010600 <tcp_process+0x7dc>)
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	e013      	b.n	80104d8 <tcp_process+0x6b4>
 80104b0:	4b53      	ldr	r3, [pc, #332]	@ (8010600 <tcp_process+0x7dc>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	613b      	str	r3, [r7, #16]
 80104b6:	e00c      	b.n	80104d2 <tcp_process+0x6ae>
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d104      	bne.n	80104cc <tcp_process+0x6a8>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68da      	ldr	r2, [r3, #12]
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	60da      	str	r2, [r3, #12]
 80104ca:	e005      	b.n	80104d8 <tcp_process+0x6b4>
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	613b      	str	r3, [r7, #16]
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1ef      	bne.n	80104b8 <tcp_process+0x694>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	60da      	str	r2, [r3, #12]
 80104de:	4b43      	ldr	r3, [pc, #268]	@ (80105ec <tcp_process+0x7c8>)
 80104e0:	2201      	movs	r2, #1
 80104e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	220a      	movs	r2, #10
 80104e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104ea:	4b41      	ldr	r3, [pc, #260]	@ (80105f0 <tcp_process+0x7cc>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	60da      	str	r2, [r3, #12]
 80104f2:	4a3f      	ldr	r2, [pc, #252]	@ (80105f0 <tcp_process+0x7cc>)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	f002 fd52 	bl	8012fa0 <tcp_timer_needed>
      }
      break;
 80104fc:	e06c      	b.n	80105d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 f8fc 	bl	80106fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010504:	4b3b      	ldr	r3, [pc, #236]	@ (80105f4 <tcp_process+0x7d0>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	f003 0310 	and.w	r3, r3, #16
 801050c:	2b00      	cmp	r3, #0
 801050e:	d065      	beq.n	80105dc <tcp_process+0x7b8>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010514:	4b38      	ldr	r3, [pc, #224]	@ (80105f8 <tcp_process+0x7d4>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	429a      	cmp	r2, r3
 801051a:	d15f      	bne.n	80105dc <tcp_process+0x7b8>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010520:	2b00      	cmp	r3, #0
 8010522:	d15b      	bne.n	80105dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7fe fd07 	bl	800ef38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801052a:	4b35      	ldr	r3, [pc, #212]	@ (8010600 <tcp_process+0x7dc>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	429a      	cmp	r2, r3
 8010532:	d105      	bne.n	8010540 <tcp_process+0x71c>
 8010534:	4b32      	ldr	r3, [pc, #200]	@ (8010600 <tcp_process+0x7dc>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	4a31      	ldr	r2, [pc, #196]	@ (8010600 <tcp_process+0x7dc>)
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	e013      	b.n	8010568 <tcp_process+0x744>
 8010540:	4b2f      	ldr	r3, [pc, #188]	@ (8010600 <tcp_process+0x7dc>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	60fb      	str	r3, [r7, #12]
 8010546:	e00c      	b.n	8010562 <tcp_process+0x73e>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	429a      	cmp	r2, r3
 8010550:	d104      	bne.n	801055c <tcp_process+0x738>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	68da      	ldr	r2, [r3, #12]
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	60da      	str	r2, [r3, #12]
 801055a:	e005      	b.n	8010568 <tcp_process+0x744>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	60fb      	str	r3, [r7, #12]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1ef      	bne.n	8010548 <tcp_process+0x724>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	60da      	str	r2, [r3, #12]
 801056e:	4b1f      	ldr	r3, [pc, #124]	@ (80105ec <tcp_process+0x7c8>)
 8010570:	2201      	movs	r2, #1
 8010572:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	220a      	movs	r2, #10
 8010578:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801057a:	4b1d      	ldr	r3, [pc, #116]	@ (80105f0 <tcp_process+0x7cc>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	60da      	str	r2, [r3, #12]
 8010582:	4a1b      	ldr	r2, [pc, #108]	@ (80105f0 <tcp_process+0x7cc>)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6013      	str	r3, [r2, #0]
 8010588:	f002 fd0a 	bl	8012fa0 <tcp_timer_needed>
      }
      break;
 801058c:	e026      	b.n	80105dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 f8b4 	bl	80106fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010594:	4b17      	ldr	r3, [pc, #92]	@ (80105f4 <tcp_process+0x7d0>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f003 0310 	and.w	r3, r3, #16
 801059c:	2b00      	cmp	r3, #0
 801059e:	d01f      	beq.n	80105e0 <tcp_process+0x7bc>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105a4:	4b14      	ldr	r3, [pc, #80]	@ (80105f8 <tcp_process+0x7d4>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d119      	bne.n	80105e0 <tcp_process+0x7bc>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d115      	bne.n	80105e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80105b4:	4b11      	ldr	r3, [pc, #68]	@ (80105fc <tcp_process+0x7d8>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f043 0310 	orr.w	r3, r3, #16
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	4b0f      	ldr	r3, [pc, #60]	@ (80105fc <tcp_process+0x7d8>)
 80105c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80105c2:	e00d      	b.n	80105e0 <tcp_process+0x7bc>
    default:
      break;
 80105c4:	bf00      	nop
 80105c6:	e00c      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105c8:	bf00      	nop
 80105ca:	e00a      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105cc:	bf00      	nop
 80105ce:	e008      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105d0:	bf00      	nop
 80105d2:	e006      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105d4:	bf00      	nop
 80105d6:	e004      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105d8:	bf00      	nop
 80105da:	e002      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105dc:	bf00      	nop
 80105de:	e000      	b.n	80105e2 <tcp_process+0x7be>
      break;
 80105e0:	bf00      	nop
  }
  return ERR_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3724      	adds	r7, #36	@ 0x24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd90      	pop	{r4, r7, pc}
 80105ec:	200157dc 	.word	0x200157dc
 80105f0:	200157d8 	.word	0x200157d8
 80105f4:	2001580c 	.word	0x2001580c
 80105f8:	20015804 	.word	0x20015804
 80105fc:	2001580d 	.word	0x2001580d
 8010600:	200157d4 	.word	0x200157d4

08010604 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010604:	b5b0      	push	{r4, r5, r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
 8010610:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010612:	e03e      	b.n	8010692 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	4618      	mov	r0, r3
 8010624:	f7fc fe10 	bl	800d248 <pbuf_clen>
 8010628:	4603      	mov	r3, r0
 801062a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010632:	8a7a      	ldrh	r2, [r7, #18]
 8010634:	429a      	cmp	r2, r3
 8010636:	d906      	bls.n	8010646 <tcp_free_acked_segments+0x42>
 8010638:	4b2a      	ldr	r3, [pc, #168]	@ (80106e4 <tcp_free_acked_segments+0xe0>)
 801063a:	f240 4257 	movw	r2, #1111	@ 0x457
 801063e:	492a      	ldr	r1, [pc, #168]	@ (80106e8 <tcp_free_acked_segments+0xe4>)
 8010640:	482a      	ldr	r0, [pc, #168]	@ (80106ec <tcp_free_acked_segments+0xe8>)
 8010642:	f008 f83d 	bl	80186c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801064c:	8a7b      	ldrh	r3, [r7, #18]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	b29a      	uxth	r2, r3
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	891a      	ldrh	r2, [r3, #8]
 801065c:	4b24      	ldr	r3, [pc, #144]	@ (80106f0 <tcp_free_acked_segments+0xec>)
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	4413      	add	r3, r2
 8010662:	b29a      	uxth	r2, r3
 8010664:	4b22      	ldr	r3, [pc, #136]	@ (80106f0 <tcp_free_acked_segments+0xec>)
 8010666:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010668:	6978      	ldr	r0, [r7, #20]
 801066a:	f7fe f9d8 	bl	800ea1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00c      	beq.n	8010692 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d109      	bne.n	8010692 <tcp_free_acked_segments+0x8e>
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d106      	bne.n	8010692 <tcp_free_acked_segments+0x8e>
 8010684:	4b17      	ldr	r3, [pc, #92]	@ (80106e4 <tcp_free_acked_segments+0xe0>)
 8010686:	f240 4261 	movw	r2, #1121	@ 0x461
 801068a:	491a      	ldr	r1, [pc, #104]	@ (80106f4 <tcp_free_acked_segments+0xf0>)
 801068c:	4817      	ldr	r0, [pc, #92]	@ (80106ec <tcp_free_acked_segments+0xe8>)
 801068e:	f008 f817 	bl	80186c0 <iprintf>
  while (seg_list != NULL &&
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d020      	beq.n	80106da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fb f883 	bl	800b7aa <lwip_htonl>
 80106a4:	4604      	mov	r4, r0
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	891b      	ldrh	r3, [r3, #8]
 80106aa:	461d      	mov	r5, r3
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	899b      	ldrh	r3, [r3, #12]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fb f863 	bl	800b780 <lwip_htons>
 80106ba:	4603      	mov	r3, r0
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	f003 0303 	and.w	r3, r3, #3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d001      	beq.n	80106ca <tcp_free_acked_segments+0xc6>
 80106c6:	2301      	movs	r3, #1
 80106c8:	e000      	b.n	80106cc <tcp_free_acked_segments+0xc8>
 80106ca:	2300      	movs	r3, #0
 80106cc:	442b      	add	r3, r5
 80106ce:	18e2      	adds	r2, r4, r3
 80106d0:	4b09      	ldr	r3, [pc, #36]	@ (80106f8 <tcp_free_acked_segments+0xf4>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	dd9c      	ble.n	8010614 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80106da:	68bb      	ldr	r3, [r7, #8]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3718      	adds	r7, #24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bdb0      	pop	{r4, r5, r7, pc}
 80106e4:	0801b898 	.word	0x0801b898
 80106e8:	0801bb58 	.word	0x0801bb58
 80106ec:	0801b8e4 	.word	0x0801b8e4
 80106f0:	20015808 	.word	0x20015808
 80106f4:	0801bb80 	.word	0x0801bb80
 80106f8:	20015804 	.word	0x20015804

080106fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80106fc:	b590      	push	{r4, r7, lr}
 80106fe:	b08d      	sub	sp, #52	@ 0x34
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	62bb      	str	r3, [r7, #40]	@ 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <tcp_receive+0x20>
 801070e:	4b91      	ldr	r3, [pc, #580]	@ (8010954 <tcp_receive+0x258>)
 8010710:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010714:	4990      	ldr	r1, [pc, #576]	@ (8010958 <tcp_receive+0x25c>)
 8010716:	4891      	ldr	r0, [pc, #580]	@ (801095c <tcp_receive+0x260>)
 8010718:	f007 ffd2 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	7d1b      	ldrb	r3, [r3, #20]
 8010720:	2b03      	cmp	r3, #3
 8010722:	d806      	bhi.n	8010732 <tcp_receive+0x36>
 8010724:	4b8b      	ldr	r3, [pc, #556]	@ (8010954 <tcp_receive+0x258>)
 8010726:	f240 427c 	movw	r2, #1148	@ 0x47c
 801072a:	498d      	ldr	r1, [pc, #564]	@ (8010960 <tcp_receive+0x264>)
 801072c:	488b      	ldr	r0, [pc, #556]	@ (801095c <tcp_receive+0x260>)
 801072e:	f007 ffc7 	bl	80186c0 <iprintf>

  if (flags & TCP_ACK) {
 8010732:	4b8c      	ldr	r3, [pc, #560]	@ (8010964 <tcp_receive+0x268>)
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	f003 0310 	and.w	r3, r3, #16
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 8259 	beq.w	8010bf2 <tcp_receive+0x4f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010746:	461a      	mov	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801074c:	4413      	add	r3, r2
 801074e:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010754:	4b84      	ldr	r3, [pc, #528]	@ (8010968 <tcp_receive+0x26c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	2b00      	cmp	r3, #0
 801075c:	db1b      	blt.n	8010796 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010762:	4b81      	ldr	r3, [pc, #516]	@ (8010968 <tcp_receive+0x26c>)
 8010764:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010766:	429a      	cmp	r2, r3
 8010768:	d106      	bne.n	8010778 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801076e:	4b7f      	ldr	r3, [pc, #508]	@ (801096c <tcp_receive+0x270>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	db0e      	blt.n	8010796 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801077c:	4b7b      	ldr	r3, [pc, #492]	@ (801096c <tcp_receive+0x270>)
 801077e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010780:	429a      	cmp	r2, r3
 8010782:	d125      	bne.n	80107d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010784:	4b7a      	ldr	r3, [pc, #488]	@ (8010970 <tcp_receive+0x274>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	89db      	ldrh	r3, [r3, #14]
 801078a:	b29a      	uxth	r2, r3
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010792:	429a      	cmp	r2, r3
 8010794:	d91c      	bls.n	80107d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010796:	4b76      	ldr	r3, [pc, #472]	@ (8010970 <tcp_receive+0x274>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	89db      	ldrh	r3, [r3, #14]
 801079c:	b29a      	uxth	r2, r3
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d205      	bcs.n	80107c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80107c0:	4b69      	ldr	r3, [pc, #420]	@ (8010968 <tcp_receive+0x26c>)
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80107c8:	4b68      	ldr	r3, [pc, #416]	@ (801096c <tcp_receive+0x270>)
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80107d0:	4b66      	ldr	r3, [pc, #408]	@ (801096c <tcp_receive+0x270>)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dc58      	bgt.n	8010890 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80107de:	4b65      	ldr	r3, [pc, #404]	@ (8010974 <tcp_receive+0x278>)
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d14b      	bne.n	801087e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80107f0:	4413      	add	r3, r2
 80107f2:	69fa      	ldr	r2, [r7, #28]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d142      	bne.n	801087e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80107fe:	2b00      	cmp	r3, #0
 8010800:	db3d      	blt.n	801087e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010806:	4b59      	ldr	r3, [pc, #356]	@ (801096c <tcp_receive+0x270>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	d137      	bne.n	801087e <tcp_receive+0x182>
              found_dupack = 1;
 801080e:	2301      	movs	r3, #1
 8010810:	62bb      	str	r3, [r7, #40]	@ 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010818:	2bff      	cmp	r3, #255	@ 0xff
 801081a:	d007      	beq.n	801082c <tcp_receive+0x130>
                ++pcb->dupacks;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010822:	3301      	adds	r3, #1
 8010824:	b2da      	uxtb	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010832:	2b03      	cmp	r3, #3
 8010834:	d91b      	bls.n	801086e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010840:	4413      	add	r3, r2
 8010842:	b29a      	uxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801084a:	429a      	cmp	r2, r3
 801084c:	d30a      	bcc.n	8010864 <tcp_receive+0x168>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010858:	4413      	add	r3, r2
 801085a:	b29a      	uxth	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010862:	e004      	b.n	801086e <tcp_receive+0x172>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801086a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010874:	2b02      	cmp	r3, #2
 8010876:	d902      	bls.n	801087e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f002 f825 	bl	80128c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801087e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010880:	2b00      	cmp	r3, #0
 8010882:	f040 815f 	bne.w	8010b44 <tcp_receive+0x448>
        pcb->dupacks = 0;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801088e:	e159      	b.n	8010b44 <tcp_receive+0x448>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010890:	4b36      	ldr	r3, [pc, #216]	@ (801096c <tcp_receive+0x270>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	3b01      	subs	r3, #1
 801089c:	2b00      	cmp	r3, #0
 801089e:	f2c0 814c 	blt.w	8010b3a <tcp_receive+0x43e>
 80108a2:	4b32      	ldr	r3, [pc, #200]	@ (801096c <tcp_receive+0x270>)
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f300 8144 	bgt.w	8010b3a <tcp_receive+0x43e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8b5b      	ldrh	r3, [r3, #26]
 80108b6:	f003 0304 	and.w	r3, r3, #4
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d010      	beq.n	80108e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	8b5b      	ldrh	r3, [r3, #26]
 80108c2:	f023 0304 	bic.w	r3, r3, #4
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80108ee:	10db      	asrs	r3, r3, #3
 80108f0:	b21b      	sxth	r3, r3
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	4413      	add	r3, r2
 80108fe:	b29b      	uxth	r3, r3
 8010900:	b21a      	sxth	r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010908:	4b18      	ldr	r3, [pc, #96]	@ (801096c <tcp_receive+0x270>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	b29a      	uxth	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010912:	b29b      	uxth	r3, r3
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010920:	4b12      	ldr	r3, [pc, #72]	@ (801096c <tcp_receive+0x270>)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	7d1b      	ldrb	r3, [r3, #20]
 801092c:	2b03      	cmp	r3, #3
 801092e:	f240 8095 	bls.w	8010a5c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801093e:	429a      	cmp	r2, r3
 8010940:	d243      	bcs.n	80109ca <tcp_receive+0x2ce>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8b5b      	ldrh	r3, [r3, #26]
 8010946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801094a:	2b00      	cmp	r3, #0
 801094c:	d014      	beq.n	8010978 <tcp_receive+0x27c>
 801094e:	2301      	movs	r3, #1
 8010950:	e013      	b.n	801097a <tcp_receive+0x27e>
 8010952:	bf00      	nop
 8010954:	0801b898 	.word	0x0801b898
 8010958:	0801bba0 	.word	0x0801bba0
 801095c:	0801b8e4 	.word	0x0801b8e4
 8010960:	0801bbbc 	.word	0x0801bbbc
 8010964:	2001580c 	.word	0x2001580c
 8010968:	20015800 	.word	0x20015800
 801096c:	20015804 	.word	0x20015804
 8010970:	200157f0 	.word	0x200157f0
 8010974:	2001580a 	.word	0x2001580a
 8010978:	2302      	movs	r3, #2
 801097a:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801097c:	7e7b      	ldrb	r3, [r7, #25]
 801097e:	b29a      	uxth	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010984:	fb12 f303 	smulbb	r3, r2, r3
 8010988:	b29b      	uxth	r3, r3
 801098a:	8b7a      	ldrh	r2, [r7, #26]
 801098c:	4293      	cmp	r3, r2
 801098e:	bf28      	it	cs
 8010990:	4613      	movcs	r3, r2
 8010992:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801099a:	8afb      	ldrh	r3, [r7, #22]
 801099c:	4413      	add	r3, r2
 801099e:	b29a      	uxth	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d309      	bcc.n	80109be <tcp_receive+0x2c2>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80109b0:	8afb      	ldrh	r3, [r7, #22]
 80109b2:	4413      	add	r3, r2
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80109bc:	e04e      	b.n	8010a5c <tcp_receive+0x360>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80109c8:	e048      	b.n	8010a5c <tcp_receive+0x360>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80109d0:	8b7b      	ldrh	r3, [r7, #26]
 80109d2:	4413      	add	r3, r2
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109dc:	429a      	cmp	r2, r3
 80109de:	d309      	bcc.n	80109f4 <tcp_receive+0x2f8>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80109e6:	8b7b      	ldrh	r3, [r7, #26]
 80109e8:	4413      	add	r3, r2
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80109f2:	e004      	b.n	80109fe <tcp_receive+0x302>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d326      	bcc.n	8010a5c <tcp_receive+0x360>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a2e:	4413      	add	r3, r2
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d30a      	bcc.n	8010a52 <tcp_receive+0x356>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a46:	4413      	add	r3, r2
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a50:	e004      	b.n	8010a5c <tcp_receive+0x360>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a64:	4a91      	ldr	r2, [pc, #580]	@ (8010cac <tcp_receive+0x5b0>)
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f7ff fdcc 	bl	8010604 <tcp_free_acked_segments>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a7a:	4a8d      	ldr	r2, [pc, #564]	@ (8010cb0 <tcp_receive+0x5b4>)
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f7ff fdc1 	bl	8010604 <tcp_free_acked_segments>
 8010a82:	4602      	mov	r2, r0
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d104      	bne.n	8010a9a <tcp_receive+0x39e>
        pcb->rtime = -1;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a96:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010a98:	e002      	b.n	8010aa0 <tcp_receive+0x3a4>
      } else {
        pcb->rtime = 0;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d103      	bne.n	8010ab6 <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010abc:	4b7d      	ldr	r3, [pc, #500]	@ (8010cb4 <tcp_receive+0x5b8>)
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	8b5b      	ldrh	r3, [r3, #26]
 8010ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d035      	beq.n	8010b42 <tcp_receive+0x446>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d118      	bne.n	8010b10 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d00c      	beq.n	8010b00 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fa fe59 	bl	800b7aa <lwip_htonl>
 8010af8:	4603      	mov	r3, r0
 8010afa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	dc20      	bgt.n	8010b42 <tcp_receive+0x446>
            tcp_clear_flags(pcb, TF_RTO);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	8b5b      	ldrh	r3, [r3, #26]
 8010b04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b0e:	e018      	b.n	8010b42 <tcp_receive+0x446>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fa fe44 	bl	800b7aa <lwip_htonl>
 8010b22:	4603      	mov	r3, r0
 8010b24:	1ae3      	subs	r3, r4, r3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dc0b      	bgt.n	8010b42 <tcp_receive+0x446>
          tcp_clear_flags(pcb, TF_RTO);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8b5b      	ldrh	r3, [r3, #26]
 8010b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b38:	e003      	b.n	8010b42 <tcp_receive+0x446>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f002 f8c0 	bl	8012cc0 <tcp_send_empty_ack>
 8010b40:	e000      	b.n	8010b44 <tcp_receive+0x448>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b42:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d052      	beq.n	8010bf2 <tcp_receive+0x4f6>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b50:	4b59      	ldr	r3, [pc, #356]	@ (8010cb8 <tcp_receive+0x5bc>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	da4b      	bge.n	8010bf2 <tcp_receive+0x4f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010b5a:	4b58      	ldr	r3, [pc, #352]	@ (8010cbc <tcp_receive+0x5c0>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010b6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b74:	10db      	asrs	r3, r3, #3
 8010b76:	b21b      	sxth	r3, r3
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b8a:	4413      	add	r3, r2
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	b21a      	sxth	r2, r3
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010b94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	da03      	bge.n	8010ba4 <tcp_receive+0x4a8>
        m = (s16_t) - m;
 8010b9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b9e:	425b      	negs	r3, r3
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010ba4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010bac:	109b      	asrs	r3, r3, #2
 8010bae:	b21b      	sxth	r3, r3
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	1ad3      	subs	r3, r2, r3
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010bc2:	4413      	add	r3, r2
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	b21a      	sxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010bd2:	10db      	asrs	r3, r3, #3
 8010bd4:	b21b      	sxth	r3, r3
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4413      	add	r3, r2
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	b21a      	sxth	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010bf2:	4b33      	ldr	r3, [pc, #204]	@ (8010cc0 <tcp_receive+0x5c4>)
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 81c6 	beq.w	8010f88 <tcp_receive+0x88c>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	2b06      	cmp	r3, #6
 8010c02:	f200 81c1 	bhi.w	8010f88 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8010cc4 <tcp_receive+0x5c8>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	1ad3      	subs	r3, r2, r3
 8010c10:	3b01      	subs	r3, #1
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f2c0 8086 	blt.w	8010d24 <tcp_receive+0x628>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c1c:	4b28      	ldr	r3, [pc, #160]	@ (8010cc0 <tcp_receive+0x5c4>)
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	4619      	mov	r1, r3
 8010c22:	4b28      	ldr	r3, [pc, #160]	@ (8010cc4 <tcp_receive+0x5c8>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	440b      	add	r3, r1
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	dc79      	bgt.n	8010d24 <tcp_receive+0x628>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010c30:	4b25      	ldr	r3, [pc, #148]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	627b      	str	r3, [r7, #36]	@ 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c3a:	4b22      	ldr	r3, [pc, #136]	@ (8010cc4 <tcp_receive+0x5c8>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010c42:	4b21      	ldr	r3, [pc, #132]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d106      	bne.n	8010c58 <tcp_receive+0x55c>
 8010c4a:	4b20      	ldr	r3, [pc, #128]	@ (8010ccc <tcp_receive+0x5d0>)
 8010c4c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010c50:	491f      	ldr	r1, [pc, #124]	@ (8010cd0 <tcp_receive+0x5d4>)
 8010c52:	4820      	ldr	r0, [pc, #128]	@ (8010cd4 <tcp_receive+0x5d8>)
 8010c54:	f007 fd34 	bl	80186c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d906      	bls.n	8010c70 <tcp_receive+0x574>
 8010c62:	4b1a      	ldr	r3, [pc, #104]	@ (8010ccc <tcp_receive+0x5d0>)
 8010c64:	f240 5295 	movw	r2, #1429	@ 0x595
 8010c68:	491b      	ldr	r1, [pc, #108]	@ (8010cd8 <tcp_receive+0x5dc>)
 8010c6a:	481a      	ldr	r0, [pc, #104]	@ (8010cd4 <tcp_receive+0x5d8>)
 8010c6c:	f007 fd28 	bl	80186c0 <iprintf>
      off = (u16_t)off32;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	847b      	strh	r3, [r7, #34]	@ 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010c74:	4b14      	ldr	r3, [pc, #80]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	891b      	ldrh	r3, [r3, #8]
 8010c7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d906      	bls.n	8010c8e <tcp_receive+0x592>
 8010c80:	4b12      	ldr	r3, [pc, #72]	@ (8010ccc <tcp_receive+0x5d0>)
 8010c82:	f240 5297 	movw	r2, #1431	@ 0x597
 8010c86:	4915      	ldr	r1, [pc, #84]	@ (8010cdc <tcp_receive+0x5e0>)
 8010c88:	4812      	ldr	r0, [pc, #72]	@ (8010cd4 <tcp_receive+0x5d8>)
 8010c8a:	f007 fd19 	bl	80186c0 <iprintf>
      inseg.len -= off;
 8010c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c90:	891a      	ldrh	r2, [r3, #8]
 8010c92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	4b0b      	ldr	r3, [pc, #44]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c9a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010cc8 <tcp_receive+0x5cc>)
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	891a      	ldrh	r2, [r3, #8]
 8010ca2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 8010ca8:	e028      	b.n	8010cfc <tcp_receive+0x600>
 8010caa:	bf00      	nop
 8010cac:	0801bbd8 	.word	0x0801bbd8
 8010cb0:	0801bbe0 	.word	0x0801bbe0
 8010cb4:	20015808 	.word	0x20015808
 8010cb8:	20015804 	.word	0x20015804
 8010cbc:	200157c8 	.word	0x200157c8
 8010cc0:	2001580a 	.word	0x2001580a
 8010cc4:	20015800 	.word	0x20015800
 8010cc8:	200157e0 	.word	0x200157e0
 8010ccc:	0801b898 	.word	0x0801b898
 8010cd0:	0801bbe8 	.word	0x0801bbe8
 8010cd4:	0801b8e4 	.word	0x0801b8e4
 8010cd8:	0801bbf8 	.word	0x0801bbf8
 8010cdc:	0801bc08 	.word	0x0801bc08
        off -= p->len;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce2:	895b      	ldrh	r3, [r3, #10]
 8010ce4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cec:	89fa      	ldrh	r2, [r7, #14]
 8010cee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	627b      	str	r3, [r7, #36]	@ 0x24
      while (p->len < off) {
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfe:	895b      	ldrh	r3, [r3, #10]
 8010d00:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d8ec      	bhi.n	8010ce0 <tcp_receive+0x5e4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010d06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d0c:	f7fc f988 	bl	800d020 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d14:	4a93      	ldr	r2, [pc, #588]	@ (8010f64 <tcp_receive+0x868>)
 8010d16:	6013      	str	r3, [r2, #0]
 8010d18:	4b93      	ldr	r3, [pc, #588]	@ (8010f68 <tcp_receive+0x86c>)
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	4a91      	ldr	r2, [pc, #580]	@ (8010f64 <tcp_receive+0x868>)
 8010d1e:	6812      	ldr	r2, [r2, #0]
 8010d20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d22:	e00d      	b.n	8010d40 <tcp_receive+0x644>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010d24:	4b8f      	ldr	r3, [pc, #572]	@ (8010f64 <tcp_receive+0x868>)
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da06      	bge.n	8010d40 <tcp_receive+0x644>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8b5b      	ldrh	r3, [r3, #26]
 8010d36:	f043 0302 	orr.w	r3, r3, #2
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010d40:	4b88      	ldr	r3, [pc, #544]	@ (8010f64 <tcp_receive+0x868>)
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	f2c0 8105 	blt.w	8010f5a <tcp_receive+0x85e>
 8010d50:	4b84      	ldr	r3, [pc, #528]	@ (8010f64 <tcp_receive+0x868>)
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d58:	6879      	ldr	r1, [r7, #4]
 8010d5a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d5c:	440b      	add	r3, r1
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	3301      	adds	r3, #1
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f300 80f9 	bgt.w	8010f5a <tcp_receive+0x85e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8010f64 <tcp_receive+0x868>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	f040 80ee 	bne.w	8010f52 <tcp_receive+0x856>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010d76:	4b7c      	ldr	r3, [pc, #496]	@ (8010f68 <tcp_receive+0x86c>)
 8010d78:	891c      	ldrh	r4, [r3, #8]
 8010d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8010f68 <tcp_receive+0x86c>)
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	899b      	ldrh	r3, [r3, #12]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fa fcfc 	bl	800b780 <lwip_htons>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d001      	beq.n	8010d98 <tcp_receive+0x69c>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e000      	b.n	8010d9a <tcp_receive+0x69e>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4423      	add	r3, r4
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	4b73      	ldr	r3, [pc, #460]	@ (8010f6c <tcp_receive+0x870>)
 8010da0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010da6:	4b71      	ldr	r3, [pc, #452]	@ (8010f6c <tcp_receive+0x870>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d274      	bcs.n	8010e98 <tcp_receive+0x79c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010dae:	4b6e      	ldr	r3, [pc, #440]	@ (8010f68 <tcp_receive+0x86c>)
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	899b      	ldrh	r3, [r3, #12]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fa fce2 	bl	800b780 <lwip_htons>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	f003 0301 	and.w	r3, r3, #1
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01e      	beq.n	8010e06 <tcp_receive+0x70a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010dc8:	4b67      	ldr	r3, [pc, #412]	@ (8010f68 <tcp_receive+0x86c>)
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	899b      	ldrh	r3, [r3, #12]
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	b21b      	sxth	r3, r3
 8010dd2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010dd6:	b21c      	sxth	r4, r3
 8010dd8:	4b63      	ldr	r3, [pc, #396]	@ (8010f68 <tcp_receive+0x86c>)
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	899b      	ldrh	r3, [r3, #12]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7fa fccd 	bl	800b780 <lwip_htons>
 8010de6:	4603      	mov	r3, r0
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fa fcc5 	bl	800b780 <lwip_htons>
 8010df6:	4603      	mov	r3, r0
 8010df8:	b21b      	sxth	r3, r3
 8010dfa:	4323      	orrs	r3, r4
 8010dfc:	b21a      	sxth	r2, r3
 8010dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8010f68 <tcp_receive+0x86c>)
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	b292      	uxth	r2, r2
 8010e04:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010e0a:	4b57      	ldr	r3, [pc, #348]	@ (8010f68 <tcp_receive+0x86c>)
 8010e0c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e0e:	4b56      	ldr	r3, [pc, #344]	@ (8010f68 <tcp_receive+0x86c>)
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	899b      	ldrh	r3, [r3, #12]
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fa fcb2 	bl	800b780 <lwip_htons>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	f003 0302 	and.w	r3, r3, #2
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d005      	beq.n	8010e34 <tcp_receive+0x738>
            inseg.len -= 1;
 8010e28:	4b4f      	ldr	r3, [pc, #316]	@ (8010f68 <tcp_receive+0x86c>)
 8010e2a:	891b      	ldrh	r3, [r3, #8]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	4b4d      	ldr	r3, [pc, #308]	@ (8010f68 <tcp_receive+0x86c>)
 8010e32:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010e34:	4b4c      	ldr	r3, [pc, #304]	@ (8010f68 <tcp_receive+0x86c>)
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	4a4b      	ldr	r2, [pc, #300]	@ (8010f68 <tcp_receive+0x86c>)
 8010e3a:	8912      	ldrh	r2, [r2, #8]
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fb ffee 	bl	800ce20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010e44:	4b48      	ldr	r3, [pc, #288]	@ (8010f68 <tcp_receive+0x86c>)
 8010e46:	891c      	ldrh	r4, [r3, #8]
 8010e48:	4b47      	ldr	r3, [pc, #284]	@ (8010f68 <tcp_receive+0x86c>)
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	899b      	ldrh	r3, [r3, #12]
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fa fc95 	bl	800b780 <lwip_htons>
 8010e56:	4603      	mov	r3, r0
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	f003 0303 	and.w	r3, r3, #3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <tcp_receive+0x76a>
 8010e62:	2301      	movs	r3, #1
 8010e64:	e000      	b.n	8010e68 <tcp_receive+0x76c>
 8010e66:	2300      	movs	r3, #0
 8010e68:	4423      	add	r3, r4
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8010f6c <tcp_receive+0x870>)
 8010e6e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010e70:	4b3e      	ldr	r3, [pc, #248]	@ (8010f6c <tcp_receive+0x870>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b3b      	ldr	r3, [pc, #236]	@ (8010f64 <tcp_receive+0x868>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	441a      	add	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e80:	6879      	ldr	r1, [r7, #4]
 8010e82:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010e84:	440b      	add	r3, r1
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d006      	beq.n	8010e98 <tcp_receive+0x79c>
 8010e8a:	4b39      	ldr	r3, [pc, #228]	@ (8010f70 <tcp_receive+0x874>)
 8010e8c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010e90:	4938      	ldr	r1, [pc, #224]	@ (8010f74 <tcp_receive+0x878>)
 8010e92:	4839      	ldr	r0, [pc, #228]	@ (8010f78 <tcp_receive+0x87c>)
 8010e94:	f007 fc14 	bl	80186c0 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010e98:	4b34      	ldr	r3, [pc, #208]	@ (8010f6c <tcp_receive+0x870>)
 8010e9a:	881b      	ldrh	r3, [r3, #0]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	4b31      	ldr	r3, [pc, #196]	@ (8010f64 <tcp_receive+0x868>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	441a      	add	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010eac:	4b2f      	ldr	r3, [pc, #188]	@ (8010f6c <tcp_receive+0x870>)
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d206      	bcs.n	8010ec2 <tcp_receive+0x7c6>
 8010eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8010f70 <tcp_receive+0x874>)
 8010eb6:	f240 6207 	movw	r2, #1543	@ 0x607
 8010eba:	4930      	ldr	r1, [pc, #192]	@ (8010f7c <tcp_receive+0x880>)
 8010ebc:	482e      	ldr	r0, [pc, #184]	@ (8010f78 <tcp_receive+0x87c>)
 8010ebe:	f007 fbff 	bl	80186c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ec6:	4b29      	ldr	r3, [pc, #164]	@ (8010f6c <tcp_receive+0x870>)
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7fd f88e 	bl	800dff4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010ed8:	4b23      	ldr	r3, [pc, #140]	@ (8010f68 <tcp_receive+0x86c>)
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	891b      	ldrh	r3, [r3, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d006      	beq.n	8010ef0 <tcp_receive+0x7f4>
          recv_data = inseg.p;
 8010ee2:	4b21      	ldr	r3, [pc, #132]	@ (8010f68 <tcp_receive+0x86c>)
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	4a26      	ldr	r2, [pc, #152]	@ (8010f80 <tcp_receive+0x884>)
 8010ee8:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010eea:	4b1f      	ldr	r3, [pc, #124]	@ (8010f68 <tcp_receive+0x86c>)
 8010eec:	2200      	movs	r2, #0
 8010eee:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8010f68 <tcp_receive+0x86c>)
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	899b      	ldrh	r3, [r3, #12]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fa fc41 	bl	800b780 <lwip_htons>
 8010efe:	4603      	mov	r3, r0
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d006      	beq.n	8010f18 <tcp_receive+0x81c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8010f84 <tcp_receive+0x888>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	f043 0320 	orr.w	r3, r3, #32
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	4b1b      	ldr	r3, [pc, #108]	@ (8010f84 <tcp_receive+0x888>)
 8010f16:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	8b5b      	ldrh	r3, [r3, #26]
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <tcp_receive+0x846>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f023 0301 	bic.w	r3, r3, #1
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	835a      	strh	r2, [r3, #26]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8b5b      	ldrh	r3, [r3, #26]
 8010f36:	f043 0302 	orr.w	r3, r3, #2
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f40:	e00f      	b.n	8010f62 <tcp_receive+0x866>
        tcp_ack(pcb);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	8b5b      	ldrh	r3, [r3, #26]
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f50:	e007      	b.n	8010f62 <tcp_receive+0x866>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f001 feb4 	bl	8012cc0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010f58:	e003      	b.n	8010f62 <tcp_receive+0x866>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f001 feb0 	bl	8012cc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f60:	e02c      	b.n	8010fbc <tcp_receive+0x8c0>
 8010f62:	e02b      	b.n	8010fbc <tcp_receive+0x8c0>
 8010f64:	20015800 	.word	0x20015800
 8010f68:	200157e0 	.word	0x200157e0
 8010f6c:	2001580a 	.word	0x2001580a
 8010f70:	0801b898 	.word	0x0801b898
 8010f74:	0801bc18 	.word	0x0801bc18
 8010f78:	0801b8e4 	.word	0x0801b8e4
 8010f7c:	0801bc50 	.word	0x0801bc50
 8010f80:	20015810 	.word	0x20015810
 8010f84:	2001580d 	.word	0x2001580d
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010f88:	4b0e      	ldr	r3, [pc, #56]	@ (8010fc4 <tcp_receive+0x8c8>)
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	db0a      	blt.n	8010fac <tcp_receive+0x8b0>
 8010f96:	4b0b      	ldr	r3, [pc, #44]	@ (8010fc4 <tcp_receive+0x8c8>)
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010fa2:	440b      	add	r3, r1
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	dd07      	ble.n	8010fbc <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	8b5b      	ldrh	r3, [r3, #26]
 8010fb0:	f043 0302 	orr.w	r3, r3, #2
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010fba:	e7ff      	b.n	8010fbc <tcp_receive+0x8c0>
 8010fbc:	bf00      	nop
 8010fbe:	3734      	adds	r7, #52	@ 0x34
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd90      	pop	{r4, r7, pc}
 8010fc4:	20015800 	.word	0x20015800

08010fc8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010fce:	4b15      	ldr	r3, [pc, #84]	@ (8011024 <tcp_get_next_optbyte+0x5c>)
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	1c5a      	adds	r2, r3, #1
 8010fd4:	b291      	uxth	r1, r2
 8010fd6:	4a13      	ldr	r2, [pc, #76]	@ (8011024 <tcp_get_next_optbyte+0x5c>)
 8010fd8:	8011      	strh	r1, [r2, #0]
 8010fda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010fdc:	4b12      	ldr	r3, [pc, #72]	@ (8011028 <tcp_get_next_optbyte+0x60>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d004      	beq.n	8010fee <tcp_get_next_optbyte+0x26>
 8010fe4:	4b11      	ldr	r3, [pc, #68]	@ (801102c <tcp_get_next_optbyte+0x64>)
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	88fa      	ldrh	r2, [r7, #6]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d208      	bcs.n	8011000 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010fee:	4b10      	ldr	r3, [pc, #64]	@ (8011030 <tcp_get_next_optbyte+0x68>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3314      	adds	r3, #20
 8010ff4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010ff6:	88fb      	ldrh	r3, [r7, #6]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	e00b      	b.n	8011018 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011000:	88fb      	ldrh	r3, [r7, #6]
 8011002:	b2da      	uxtb	r2, r3
 8011004:	4b09      	ldr	r3, [pc, #36]	@ (801102c <tcp_get_next_optbyte+0x64>)
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	b2db      	uxtb	r3, r3
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801100e:	4b06      	ldr	r3, [pc, #24]	@ (8011028 <tcp_get_next_optbyte+0x60>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	797b      	ldrb	r3, [r7, #5]
 8011014:	4413      	add	r3, r2
 8011016:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011018:	4618      	mov	r0, r3
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	200157fc 	.word	0x200157fc
 8011028:	200157f8 	.word	0x200157f8
 801102c:	200157f6 	.word	0x200157f6
 8011030:	200157f0 	.word	0x200157f0

08011034 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <tcp_parseopt+0x1c>
 8011042:	4b33      	ldr	r3, [pc, #204]	@ (8011110 <tcp_parseopt+0xdc>)
 8011044:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011048:	4932      	ldr	r1, [pc, #200]	@ (8011114 <tcp_parseopt+0xe0>)
 801104a:	4833      	ldr	r0, [pc, #204]	@ (8011118 <tcp_parseopt+0xe4>)
 801104c:	f007 fb38 	bl	80186c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011050:	4b32      	ldr	r3, [pc, #200]	@ (801111c <tcp_parseopt+0xe8>)
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d057      	beq.n	8011108 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011058:	4b31      	ldr	r3, [pc, #196]	@ (8011120 <tcp_parseopt+0xec>)
 801105a:	2200      	movs	r2, #0
 801105c:	801a      	strh	r2, [r3, #0]
 801105e:	e047      	b.n	80110f0 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8011060:	f7ff ffb2 	bl	8010fc8 <tcp_get_next_optbyte>
 8011064:	4603      	mov	r3, r0
 8011066:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011068:	7bfb      	ldrb	r3, [r7, #15]
 801106a:	2b02      	cmp	r3, #2
 801106c:	d006      	beq.n	801107c <tcp_parseopt+0x48>
 801106e:	2b02      	cmp	r3, #2
 8011070:	dc2b      	bgt.n	80110ca <tcp_parseopt+0x96>
 8011072:	2b00      	cmp	r3, #0
 8011074:	d043      	beq.n	80110fe <tcp_parseopt+0xca>
 8011076:	2b01      	cmp	r3, #1
 8011078:	d039      	beq.n	80110ee <tcp_parseopt+0xba>
 801107a:	e026      	b.n	80110ca <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801107c:	f7ff ffa4 	bl	8010fc8 <tcp_get_next_optbyte>
 8011080:	4603      	mov	r3, r0
 8011082:	2b04      	cmp	r3, #4
 8011084:	d13d      	bne.n	8011102 <tcp_parseopt+0xce>
 8011086:	4b26      	ldr	r3, [pc, #152]	@ (8011120 <tcp_parseopt+0xec>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	3301      	adds	r3, #1
 801108c:	4a23      	ldr	r2, [pc, #140]	@ (801111c <tcp_parseopt+0xe8>)
 801108e:	8812      	ldrh	r2, [r2, #0]
 8011090:	4293      	cmp	r3, r2
 8011092:	da36      	bge.n	8011102 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011094:	f7ff ff98 	bl	8010fc8 <tcp_get_next_optbyte>
 8011098:	4603      	mov	r3, r0
 801109a:	021b      	lsls	r3, r3, #8
 801109c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801109e:	f7ff ff93 	bl	8010fc8 <tcp_get_next_optbyte>
 80110a2:	4603      	mov	r3, r0
 80110a4:	461a      	mov	r2, r3
 80110a6:	89bb      	ldrh	r3, [r7, #12]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80110ac:	89bb      	ldrh	r3, [r7, #12]
 80110ae:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d804      	bhi.n	80110c0 <tcp_parseopt+0x8c>
 80110b6:	89bb      	ldrh	r3, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <tcp_parseopt+0x8c>
 80110bc:	89ba      	ldrh	r2, [r7, #12]
 80110be:	e001      	b.n	80110c4 <tcp_parseopt+0x90>
 80110c0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80110c8:	e012      	b.n	80110f0 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80110ca:	f7ff ff7d 	bl	8010fc8 <tcp_get_next_optbyte>
 80110ce:	4603      	mov	r3, r0
 80110d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80110d2:	7afb      	ldrb	r3, [r7, #11]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d916      	bls.n	8011106 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80110d8:	7afb      	ldrb	r3, [r7, #11]
 80110da:	b29a      	uxth	r2, r3
 80110dc:	4b10      	ldr	r3, [pc, #64]	@ (8011120 <tcp_parseopt+0xec>)
 80110de:	881b      	ldrh	r3, [r3, #0]
 80110e0:	4413      	add	r3, r2
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	3b02      	subs	r3, #2
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011120 <tcp_parseopt+0xec>)
 80110ea:	801a      	strh	r2, [r3, #0]
 80110ec:	e000      	b.n	80110f0 <tcp_parseopt+0xbc>
          break;
 80110ee:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011120 <tcp_parseopt+0xec>)
 80110f2:	881a      	ldrh	r2, [r3, #0]
 80110f4:	4b09      	ldr	r3, [pc, #36]	@ (801111c <tcp_parseopt+0xe8>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d3b1      	bcc.n	8011060 <tcp_parseopt+0x2c>
 80110fc:	e004      	b.n	8011108 <tcp_parseopt+0xd4>
          return;
 80110fe:	bf00      	nop
 8011100:	e002      	b.n	8011108 <tcp_parseopt+0xd4>
            return;
 8011102:	bf00      	nop
 8011104:	e000      	b.n	8011108 <tcp_parseopt+0xd4>
            return;
 8011106:	bf00      	nop
      }
    }
  }
}
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	0801b898 	.word	0x0801b898
 8011114:	0801bc70 	.word	0x0801bc70
 8011118:	0801b8e4 	.word	0x0801b8e4
 801111c:	200157f4 	.word	0x200157f4
 8011120:	200157fc 	.word	0x200157fc

08011124 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011124:	b480      	push	{r7}
 8011126:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011128:	4b05      	ldr	r3, [pc, #20]	@ (8011140 <tcp_trigger_input_pcb_close+0x1c>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f043 0310 	orr.w	r3, r3, #16
 8011130:	b2da      	uxtb	r2, r3
 8011132:	4b03      	ldr	r3, [pc, #12]	@ (8011140 <tcp_trigger_input_pcb_close+0x1c>)
 8011134:	701a      	strb	r2, [r3, #0]
}
 8011136:	bf00      	nop
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	2001580d 	.word	0x2001580d

08011144 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00a      	beq.n	801116c <tcp_route+0x28>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	7a1b      	ldrb	r3, [r3, #8]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d006      	beq.n	801116c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	7a1b      	ldrb	r3, [r3, #8]
 8011162:	4618      	mov	r0, r3
 8011164:	f7fb fcae 	bl	800cac4 <netif_get_by_index>
 8011168:	4603      	mov	r3, r0
 801116a:	e003      	b.n	8011174 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f005 fd23 	bl	8016bb8 <ip4_route>
 8011172:	4603      	mov	r3, r0
  }
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801117c:	b590      	push	{r4, r7, lr}
 801117e:	b087      	sub	sp, #28
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	4613      	mov	r3, r2
 801118a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d105      	bne.n	801119e <tcp_create_segment+0x22>
 8011192:	4b43      	ldr	r3, [pc, #268]	@ (80112a0 <tcp_create_segment+0x124>)
 8011194:	22a3      	movs	r2, #163	@ 0xa3
 8011196:	4943      	ldr	r1, [pc, #268]	@ (80112a4 <tcp_create_segment+0x128>)
 8011198:	4843      	ldr	r0, [pc, #268]	@ (80112a8 <tcp_create_segment+0x12c>)
 801119a:	f007 fa91 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d105      	bne.n	80111b0 <tcp_create_segment+0x34>
 80111a4:	4b3e      	ldr	r3, [pc, #248]	@ (80112a0 <tcp_create_segment+0x124>)
 80111a6:	22a4      	movs	r2, #164	@ 0xa4
 80111a8:	4940      	ldr	r1, [pc, #256]	@ (80112ac <tcp_create_segment+0x130>)
 80111aa:	483f      	ldr	r0, [pc, #252]	@ (80112a8 <tcp_create_segment+0x12c>)
 80111ac:	f007 fa88 	bl	80186c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80111b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0304 	and.w	r3, r3, #4
 80111bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80111be:	2003      	movs	r0, #3
 80111c0:	f7fb f90c 	bl	800c3dc <memp_malloc>
 80111c4:	6138      	str	r0, [r7, #16]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d104      	bne.n	80111d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80111cc:	68b8      	ldr	r0, [r7, #8]
 80111ce:	f7fb ffad 	bl	800d12c <pbuf_free>
    return NULL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	e060      	b.n	8011298 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80111dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	891a      	ldrh	r2, [r3, #8]
 80111ee:	7dfb      	ldrb	r3, [r7, #23]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d205      	bcs.n	8011202 <tcp_create_segment+0x86>
 80111f6:	4b2a      	ldr	r3, [pc, #168]	@ (80112a0 <tcp_create_segment+0x124>)
 80111f8:	22b0      	movs	r2, #176	@ 0xb0
 80111fa:	492d      	ldr	r1, [pc, #180]	@ (80112b0 <tcp_create_segment+0x134>)
 80111fc:	482a      	ldr	r0, [pc, #168]	@ (80112a8 <tcp_create_segment+0x12c>)
 80111fe:	f007 fa5f 	bl	80186c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	891a      	ldrh	r2, [r3, #8]
 8011206:	7dfb      	ldrb	r3, [r7, #23]
 8011208:	b29b      	uxth	r3, r3
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	b29a      	uxth	r2, r3
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011212:	2114      	movs	r1, #20
 8011214:	68b8      	ldr	r0, [r7, #8]
 8011216:	f7fb fef3 	bl	800d000 <pbuf_add_header>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d004      	beq.n	801122a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011220:	6938      	ldr	r0, [r7, #16]
 8011222:	f7fd fbfc 	bl	800ea1e <tcp_seg_free>
    return NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	e036      	b.n	8011298 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	8ada      	ldrh	r2, [r3, #22]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	68dc      	ldr	r4, [r3, #12]
 801123c:	4610      	mov	r0, r2
 801123e:	f7fa fa9f 	bl	800b780 <lwip_htons>
 8011242:	4603      	mov	r3, r0
 8011244:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	8b1a      	ldrh	r2, [r3, #24]
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	68dc      	ldr	r4, [r3, #12]
 801124e:	4610      	mov	r0, r2
 8011250:	f7fa fa96 	bl	800b780 <lwip_htons>
 8011254:	4603      	mov	r3, r0
 8011256:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	68dc      	ldr	r4, [r3, #12]
 801125c:	6838      	ldr	r0, [r7, #0]
 801125e:	f7fa faa4 	bl	800b7aa <lwip_htonl>
 8011262:	4603      	mov	r3, r0
 8011264:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011266:	7dfb      	ldrb	r3, [r7, #23]
 8011268:	089b      	lsrs	r3, r3, #2
 801126a:	b2db      	uxtb	r3, r3
 801126c:	3305      	adds	r3, #5
 801126e:	b29b      	uxth	r3, r3
 8011270:	031b      	lsls	r3, r3, #12
 8011272:	b29a      	uxth	r2, r3
 8011274:	79fb      	ldrb	r3, [r7, #7]
 8011276:	b29b      	uxth	r3, r3
 8011278:	4313      	orrs	r3, r2
 801127a:	b29a      	uxth	r2, r3
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	68dc      	ldr	r4, [r3, #12]
 8011280:	4610      	mov	r0, r2
 8011282:	f7fa fa7d 	bl	800b780 <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	749a      	strb	r2, [r3, #18]
 8011292:	2200      	movs	r2, #0
 8011294:	74da      	strb	r2, [r3, #19]
  return seg;
 8011296:	693b      	ldr	r3, [r7, #16]
}
 8011298:	4618      	mov	r0, r3
 801129a:	371c      	adds	r7, #28
 801129c:	46bd      	mov	sp, r7
 801129e:	bd90      	pop	{r4, r7, pc}
 80112a0:	0801bc8c 	.word	0x0801bc8c
 80112a4:	0801bcc0 	.word	0x0801bcc0
 80112a8:	0801bce0 	.word	0x0801bce0
 80112ac:	0801bd08 	.word	0x0801bd08
 80112b0:	0801bd2c 	.word	0x0801bd2c

080112b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b086      	sub	sp, #24
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	607b      	str	r3, [r7, #4]
 80112bc:	4603      	mov	r3, r0
 80112be:	73fb      	strb	r3, [r7, #15]
 80112c0:	460b      	mov	r3, r1
 80112c2:	81bb      	strh	r3, [r7, #12]
 80112c4:	4613      	mov	r3, r2
 80112c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80112c8:	89bb      	ldrh	r3, [r7, #12]
 80112ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d105      	bne.n	80112de <tcp_pbuf_prealloc+0x2a>
 80112d2:	4b30      	ldr	r3, [pc, #192]	@ (8011394 <tcp_pbuf_prealloc+0xe0>)
 80112d4:	22e8      	movs	r2, #232	@ 0xe8
 80112d6:	4930      	ldr	r1, [pc, #192]	@ (8011398 <tcp_pbuf_prealloc+0xe4>)
 80112d8:	4830      	ldr	r0, [pc, #192]	@ (801139c <tcp_pbuf_prealloc+0xe8>)
 80112da:	f007 f9f1 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d105      	bne.n	80112f0 <tcp_pbuf_prealloc+0x3c>
 80112e4:	4b2b      	ldr	r3, [pc, #172]	@ (8011394 <tcp_pbuf_prealloc+0xe0>)
 80112e6:	22e9      	movs	r2, #233	@ 0xe9
 80112e8:	492d      	ldr	r1, [pc, #180]	@ (80113a0 <tcp_pbuf_prealloc+0xec>)
 80112ea:	482c      	ldr	r0, [pc, #176]	@ (801139c <tcp_pbuf_prealloc+0xe8>)
 80112ec:	f007 f9e8 	bl	80186c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80112f0:	89ba      	ldrh	r2, [r7, #12]
 80112f2:	897b      	ldrh	r3, [r7, #10]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d221      	bcs.n	801133c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80112f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80112fc:	f003 0302 	and.w	r3, r3, #2
 8011300:	2b00      	cmp	r3, #0
 8011302:	d111      	bne.n	8011328 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	8b5b      	ldrh	r3, [r3, #26]
 8011308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801130c:	2b00      	cmp	r3, #0
 801130e:	d115      	bne.n	801133c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011314:	2b00      	cmp	r3, #0
 8011316:	d007      	beq.n	8011328 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801131c:	2b00      	cmp	r3, #0
 801131e:	d103      	bne.n	8011328 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011324:	2b00      	cmp	r3, #0
 8011326:	d009      	beq.n	801133c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011328:	89bb      	ldrh	r3, [r7, #12]
 801132a:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801132e:	f023 0203 	bic.w	r2, r3, #3
 8011332:	897b      	ldrh	r3, [r7, #10]
 8011334:	4293      	cmp	r3, r2
 8011336:	bf28      	it	cs
 8011338:	4613      	movcs	r3, r2
 801133a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801133c:	8af9      	ldrh	r1, [r7, #22]
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011344:	4618      	mov	r0, r3
 8011346:	f7fb fc0d 	bl	800cb64 <pbuf_alloc>
 801134a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d101      	bne.n	8011356 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	e019      	b.n	801138a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d006      	beq.n	801136c <tcp_pbuf_prealloc+0xb8>
 801135e:	4b0d      	ldr	r3, [pc, #52]	@ (8011394 <tcp_pbuf_prealloc+0xe0>)
 8011360:	f240 120b 	movw	r2, #267	@ 0x10b
 8011364:	490f      	ldr	r1, [pc, #60]	@ (80113a4 <tcp_pbuf_prealloc+0xf0>)
 8011366:	480d      	ldr	r0, [pc, #52]	@ (801139c <tcp_pbuf_prealloc+0xe8>)
 8011368:	f007 f9aa 	bl	80186c0 <iprintf>
  *oversize = p->len - length;
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	895a      	ldrh	r2, [r3, #10]
 8011370:	89bb      	ldrh	r3, [r7, #12]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	b29a      	uxth	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	89ba      	ldrh	r2, [r7, #12]
 801137e:	811a      	strh	r2, [r3, #8]
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	891a      	ldrh	r2, [r3, #8]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	815a      	strh	r2, [r3, #10]
  return p;
 8011388:	693b      	ldr	r3, [r7, #16]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	0801bc8c 	.word	0x0801bc8c
 8011398:	0801bd44 	.word	0x0801bd44
 801139c:	0801bce0 	.word	0x0801bce0
 80113a0:	0801bd68 	.word	0x0801bd68
 80113a4:	0801bd88 	.word	0x0801bd88

080113a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	460b      	mov	r3, r1
 80113b2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_write_checks+0x20>
 80113ba:	4b33      	ldr	r3, [pc, #204]	@ (8011488 <tcp_write_checks+0xe0>)
 80113bc:	f240 1233 	movw	r2, #307	@ 0x133
 80113c0:	4932      	ldr	r1, [pc, #200]	@ (801148c <tcp_write_checks+0xe4>)
 80113c2:	4833      	ldr	r0, [pc, #204]	@ (8011490 <tcp_write_checks+0xe8>)
 80113c4:	f007 f97c 	bl	80186c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	d00e      	beq.n	80113ee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80113d4:	2b07      	cmp	r3, #7
 80113d6:	d00a      	beq.n	80113ee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d006      	beq.n	80113ee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80113e4:	2b03      	cmp	r3, #3
 80113e6:	d002      	beq.n	80113ee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80113e8:	f06f 030a 	mvn.w	r3, #10
 80113ec:	e048      	b.n	8011480 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80113ee:	887b      	ldrh	r3, [r7, #2]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d101      	bne.n	80113f8 <tcp_write_checks+0x50>
    return ERR_OK;
 80113f4:	2300      	movs	r3, #0
 80113f6:	e043      	b.n	8011480 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80113fe:	887a      	ldrh	r2, [r7, #2]
 8011400:	429a      	cmp	r2, r3
 8011402:	d909      	bls.n	8011418 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	8b5b      	ldrh	r3, [r3, #26]
 8011408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140c:	b29a      	uxth	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011412:	f04f 33ff 	mov.w	r3, #4294967295
 8011416:	e033      	b.n	8011480 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801141e:	2b0f      	cmp	r3, #15
 8011420:	d909      	bls.n	8011436 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	8b5b      	ldrh	r3, [r3, #26]
 8011426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801142a:	b29a      	uxth	r2, r3
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011430:	f04f 33ff 	mov.w	r3, #4294967295
 8011434:	e024      	b.n	8011480 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801143c:	2b00      	cmp	r3, #0
 801143e:	d00f      	beq.n	8011460 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011444:	2b00      	cmp	r3, #0
 8011446:	d11a      	bne.n	801147e <tcp_write_checks+0xd6>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801144c:	2b00      	cmp	r3, #0
 801144e:	d116      	bne.n	801147e <tcp_write_checks+0xd6>
 8011450:	4b0d      	ldr	r3, [pc, #52]	@ (8011488 <tcp_write_checks+0xe0>)
 8011452:	f240 1255 	movw	r2, #341	@ 0x155
 8011456:	490f      	ldr	r1, [pc, #60]	@ (8011494 <tcp_write_checks+0xec>)
 8011458:	480d      	ldr	r0, [pc, #52]	@ (8011490 <tcp_write_checks+0xe8>)
 801145a:	f007 f931 	bl	80186c0 <iprintf>
 801145e:	e00e      	b.n	801147e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011464:	2b00      	cmp	r3, #0
 8011466:	d103      	bne.n	8011470 <tcp_write_checks+0xc8>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801146c:	2b00      	cmp	r3, #0
 801146e:	d006      	beq.n	801147e <tcp_write_checks+0xd6>
 8011470:	4b05      	ldr	r3, [pc, #20]	@ (8011488 <tcp_write_checks+0xe0>)
 8011472:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011476:	4908      	ldr	r1, [pc, #32]	@ (8011498 <tcp_write_checks+0xf0>)
 8011478:	4805      	ldr	r0, [pc, #20]	@ (8011490 <tcp_write_checks+0xe8>)
 801147a:	f007 f921 	bl	80186c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	0801bc8c 	.word	0x0801bc8c
 801148c:	0801bd9c 	.word	0x0801bd9c
 8011490:	0801bce0 	.word	0x0801bce0
 8011494:	0801bdbc 	.word	0x0801bdbc
 8011498:	0801bdf8 	.word	0x0801bdf8

0801149c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801149c:	b590      	push	{r4, r7, lr}
 801149e:	b09b      	sub	sp, #108	@ 0x6c
 80114a0:	af04      	add	r7, sp, #16
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	4611      	mov	r1, r2
 80114a8:	461a      	mov	r2, r3
 80114aa:	460b      	mov	r3, r1
 80114ac:	80fb      	strh	r3, [r7, #6]
 80114ae:	4613      	mov	r3, r2
 80114b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80114b2:	2300      	movs	r3, #0
 80114b4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80114b6:	2300      	movs	r3, #0
 80114b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80114ba:	2300      	movs	r3, #0
 80114bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114be:	2300      	movs	r3, #0
 80114c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114c2:	2300      	movs	r3, #0
 80114c4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80114c6:	2300      	movs	r3, #0
 80114c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80114cc:	2300      	movs	r3, #0
 80114ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80114d2:	2300      	movs	r3, #0
 80114d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d109      	bne.n	80114f8 <tcp_write+0x5c>
 80114e4:	4ba4      	ldr	r3, [pc, #656]	@ (8011778 <tcp_write+0x2dc>)
 80114e6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80114ea:	49a4      	ldr	r1, [pc, #656]	@ (801177c <tcp_write+0x2e0>)
 80114ec:	48a4      	ldr	r0, [pc, #656]	@ (8011780 <tcp_write+0x2e4>)
 80114ee:	f007 f8e7 	bl	80186c0 <iprintf>
 80114f2:	f06f 030f 	mvn.w	r3, #15
 80114f6:	e32a      	b.n	8011b4e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80114fe:	085b      	lsrs	r3, r3, #1
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011506:	4293      	cmp	r3, r2
 8011508:	bf28      	it	cs
 801150a:	4613      	movcs	r3, r2
 801150c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801150e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011510:	2b00      	cmp	r3, #0
 8011512:	d102      	bne.n	801151a <tcp_write+0x7e>
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011518:	e000      	b.n	801151c <tcp_write+0x80>
 801151a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801151c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d109      	bne.n	8011538 <tcp_write+0x9c>
 8011524:	4b94      	ldr	r3, [pc, #592]	@ (8011778 <tcp_write+0x2dc>)
 8011526:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801152a:	4996      	ldr	r1, [pc, #600]	@ (8011784 <tcp_write+0x2e8>)
 801152c:	4894      	ldr	r0, [pc, #592]	@ (8011780 <tcp_write+0x2e4>)
 801152e:	f007 f8c7 	bl	80186c0 <iprintf>
 8011532:	f06f 030f 	mvn.w	r3, #15
 8011536:	e30a      	b.n	8011b4e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011538:	88fb      	ldrh	r3, [r7, #6]
 801153a:	4619      	mov	r1, r3
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f7ff ff33 	bl	80113a8 <tcp_write_checks>
 8011542:	4603      	mov	r3, r0
 8011544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011548:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801154c:	2b00      	cmp	r3, #0
 801154e:	d002      	beq.n	8011556 <tcp_write+0xba>
    return err;
 8011550:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011554:	e2fb      	b.n	8011b4e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801155c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801156a:	2b00      	cmp	r3, #0
 801156c:	f000 80f6 	beq.w	801175c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011574:	653b      	str	r3, [r7, #80]	@ 0x50
 8011576:	e002      	b.n	801157e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801157e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1f8      	bne.n	8011578 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011588:	7a9b      	ldrb	r3, [r3, #10]
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	b29b      	uxth	r3, r3
 801158e:	f003 0304 	and.w	r3, r3, #4
 8011592:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011594:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011598:	891b      	ldrh	r3, [r3, #8]
 801159a:	4619      	mov	r1, r3
 801159c:	8c3b      	ldrh	r3, [r7, #32]
 801159e:	440b      	add	r3, r1
 80115a0:	429a      	cmp	r2, r3
 80115a2:	da06      	bge.n	80115b2 <tcp_write+0x116>
 80115a4:	4b74      	ldr	r3, [pc, #464]	@ (8011778 <tcp_write+0x2dc>)
 80115a6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80115aa:	4977      	ldr	r1, [pc, #476]	@ (8011788 <tcp_write+0x2ec>)
 80115ac:	4874      	ldr	r0, [pc, #464]	@ (8011780 <tcp_write+0x2e4>)
 80115ae:	f007 f887 	bl	80186c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80115b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115b4:	891a      	ldrh	r2, [r3, #8]
 80115b6:	8c3b      	ldrh	r3, [r7, #32]
 80115b8:	4413      	add	r3, r2
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80115c8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80115ca:	8a7b      	ldrh	r3, [r7, #18]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d026      	beq.n	801161e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80115d0:	8a7b      	ldrh	r3, [r7, #18]
 80115d2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d206      	bcs.n	80115e6 <tcp_write+0x14a>
 80115d8:	4b67      	ldr	r3, [pc, #412]	@ (8011778 <tcp_write+0x2dc>)
 80115da:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80115de:	496b      	ldr	r1, [pc, #428]	@ (801178c <tcp_write+0x2f0>)
 80115e0:	4867      	ldr	r0, [pc, #412]	@ (8011780 <tcp_write+0x2e4>)
 80115e2:	f007 f86d 	bl	80186c0 <iprintf>
      seg = last_unsent;
 80115e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80115ea:	8a7b      	ldrh	r3, [r7, #18]
 80115ec:	88fa      	ldrh	r2, [r7, #6]
 80115ee:	4293      	cmp	r3, r2
 80115f0:	bf28      	it	cs
 80115f2:	4613      	movcs	r3, r2
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80115f8:	4293      	cmp	r3, r2
 80115fa:	bf28      	it	cs
 80115fc:	4613      	movcs	r3, r2
 80115fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011604:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011606:	4413      	add	r3, r2
 8011608:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801160c:	8a7a      	ldrh	r2, [r7, #18]
 801160e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	b29b      	uxth	r3, r3
 8011614:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011616:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011618:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801161a:	1ad3      	subs	r3, r2, r3
 801161c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801161e:	8a7b      	ldrh	r3, [r7, #18]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00b      	beq.n	801163c <tcp_write+0x1a0>
 8011624:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011628:	88fb      	ldrh	r3, [r7, #6]
 801162a:	429a      	cmp	r2, r3
 801162c:	d006      	beq.n	801163c <tcp_write+0x1a0>
 801162e:	4b52      	ldr	r3, [pc, #328]	@ (8011778 <tcp_write+0x2dc>)
 8011630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011634:	4956      	ldr	r1, [pc, #344]	@ (8011790 <tcp_write+0x2f4>)
 8011636:	4852      	ldr	r0, [pc, #328]	@ (8011780 <tcp_write+0x2e4>)
 8011638:	f007 f842 	bl	80186c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801163c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011640:	88fb      	ldrh	r3, [r7, #6]
 8011642:	429a      	cmp	r2, r3
 8011644:	f080 8167 	bcs.w	8011916 <tcp_write+0x47a>
 8011648:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801164a:	2b00      	cmp	r3, #0
 801164c:	f000 8163 	beq.w	8011916 <tcp_write+0x47a>
 8011650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011652:	891b      	ldrh	r3, [r3, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 815e 	beq.w	8011916 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801165a:	88fa      	ldrh	r2, [r7, #6]
 801165c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011660:	1ad2      	subs	r2, r2, r3
 8011662:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011664:	4293      	cmp	r3, r2
 8011666:	bfa8      	it	ge
 8011668:	4613      	movge	r3, r2
 801166a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801166c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801166e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011670:	797b      	ldrb	r3, [r7, #5]
 8011672:	f003 0301 	and.w	r3, r3, #1
 8011676:	2b00      	cmp	r3, #0
 8011678:	d027      	beq.n	80116ca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801167a:	f107 0012 	add.w	r0, r7, #18
 801167e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011680:	8bf9      	ldrh	r1, [r7, #30]
 8011682:	2301      	movs	r3, #1
 8011684:	9302      	str	r3, [sp, #8]
 8011686:	797b      	ldrb	r3, [r7, #5]
 8011688:	9301      	str	r3, [sp, #4]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	4603      	mov	r3, r0
 8011690:	2000      	movs	r0, #0
 8011692:	f7ff fe0f 	bl	80112b4 <tcp_pbuf_prealloc>
 8011696:	6578      	str	r0, [r7, #84]	@ 0x54
 8011698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 8225 	beq.w	8011aea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80116a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116a2:	6858      	ldr	r0, [r3, #4]
 80116a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	4413      	add	r3, r2
 80116ac:	8bfa      	ldrh	r2, [r7, #30]
 80116ae:	4619      	mov	r1, r3
 80116b0:	f007 f93b 	bl	801892a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80116b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80116b6:	f7fb fdc7 	bl	800d248 <pbuf_clen>
 80116ba:	4603      	mov	r3, r0
 80116bc:	461a      	mov	r2, r3
 80116be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80116c2:	4413      	add	r3, r2
 80116c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80116c8:	e041      	b.n	801174e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80116ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80116d0:	e002      	b.n	80116d8 <tcp_write+0x23c>
 80116d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80116d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1f8      	bne.n	80116d2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e2:	7b1b      	ldrb	r3, [r3, #12]
 80116e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d115      	bne.n	8011718 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80116ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116f2:	8952      	ldrh	r2, [r2, #10]
 80116f4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116f6:	68ba      	ldr	r2, [r7, #8]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d10d      	bne.n	8011718 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80116fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011700:	2b00      	cmp	r3, #0
 8011702:	d006      	beq.n	8011712 <tcp_write+0x276>
 8011704:	4b1c      	ldr	r3, [pc, #112]	@ (8011778 <tcp_write+0x2dc>)
 8011706:	f240 2231 	movw	r2, #561	@ 0x231
 801170a:	4922      	ldr	r1, [pc, #136]	@ (8011794 <tcp_write+0x2f8>)
 801170c:	481c      	ldr	r0, [pc, #112]	@ (8011780 <tcp_write+0x2e4>)
 801170e:	f006 ffd7 	bl	80186c0 <iprintf>
          extendlen = seglen;
 8011712:	8bfb      	ldrh	r3, [r7, #30]
 8011714:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011716:	e01a      	b.n	801174e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011718:	8bfb      	ldrh	r3, [r7, #30]
 801171a:	2201      	movs	r2, #1
 801171c:	4619      	mov	r1, r3
 801171e:	2000      	movs	r0, #0
 8011720:	f7fb fa20 	bl	800cb64 <pbuf_alloc>
 8011724:	6578      	str	r0, [r7, #84]	@ 0x54
 8011726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011728:	2b00      	cmp	r3, #0
 801172a:	f000 81e0 	beq.w	8011aee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801172e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	441a      	add	r2, r3
 8011736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011738:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801173a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801173c:	f7fb fd84 	bl	800d248 <pbuf_clen>
 8011740:	4603      	mov	r3, r0
 8011742:	461a      	mov	r2, r3
 8011744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011748:	4413      	add	r3, r2
 801174a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801174e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011752:	8bfb      	ldrh	r3, [r7, #30]
 8011754:	4413      	add	r3, r2
 8011756:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801175a:	e0dc      	b.n	8011916 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011762:	2b00      	cmp	r3, #0
 8011764:	f000 80d7 	beq.w	8011916 <tcp_write+0x47a>
 8011768:	4b03      	ldr	r3, [pc, #12]	@ (8011778 <tcp_write+0x2dc>)
 801176a:	f240 224a 	movw	r2, #586	@ 0x24a
 801176e:	490a      	ldr	r1, [pc, #40]	@ (8011798 <tcp_write+0x2fc>)
 8011770:	4803      	ldr	r0, [pc, #12]	@ (8011780 <tcp_write+0x2e4>)
 8011772:	f006 ffa5 	bl	80186c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011776:	e0ce      	b.n	8011916 <tcp_write+0x47a>
 8011778:	0801bc8c 	.word	0x0801bc8c
 801177c:	0801be2c 	.word	0x0801be2c
 8011780:	0801bce0 	.word	0x0801bce0
 8011784:	0801be44 	.word	0x0801be44
 8011788:	0801be78 	.word	0x0801be78
 801178c:	0801be90 	.word	0x0801be90
 8011790:	0801beb0 	.word	0x0801beb0
 8011794:	0801bed0 	.word	0x0801bed0
 8011798:	0801befc 	.word	0x0801befc
    struct pbuf *p;
    u16_t left = len - pos;
 801179c:	88fa      	ldrh	r2, [r7, #6]
 801179e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80117a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80117b2:	8b7a      	ldrh	r2, [r7, #26]
 80117b4:	8bbb      	ldrh	r3, [r7, #28]
 80117b6:	4293      	cmp	r3, r2
 80117b8:	bf28      	it	cs
 80117ba:	4613      	movcs	r3, r2
 80117bc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80117be:	797b      	ldrb	r3, [r7, #5]
 80117c0:	f003 0301 	and.w	r3, r3, #1
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d036      	beq.n	8011836 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80117c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	8b3b      	ldrh	r3, [r7, #24]
 80117d0:	4413      	add	r3, r2
 80117d2:	b299      	uxth	r1, r3
 80117d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	bf0c      	ite	eq
 80117da:	2301      	moveq	r3, #1
 80117dc:	2300      	movne	r3, #0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	f107 0012 	add.w	r0, r7, #18
 80117e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80117e6:	9302      	str	r3, [sp, #8]
 80117e8:	797b      	ldrb	r3, [r7, #5]
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	4603      	mov	r3, r0
 80117f2:	2036      	movs	r0, #54	@ 0x36
 80117f4:	f7ff fd5e 	bl	80112b4 <tcp_pbuf_prealloc>
 80117f8:	6338      	str	r0, [r7, #48]	@ 0x30
 80117fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f000 8178 	beq.w	8011af2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011804:	895b      	ldrh	r3, [r3, #10]
 8011806:	8b3a      	ldrh	r2, [r7, #24]
 8011808:	429a      	cmp	r2, r3
 801180a:	d906      	bls.n	801181a <tcp_write+0x37e>
 801180c:	4b8c      	ldr	r3, [pc, #560]	@ (8011a40 <tcp_write+0x5a4>)
 801180e:	f240 2266 	movw	r2, #614	@ 0x266
 8011812:	498c      	ldr	r1, [pc, #560]	@ (8011a44 <tcp_write+0x5a8>)
 8011814:	488c      	ldr	r0, [pc, #560]	@ (8011a48 <tcp_write+0x5ac>)
 8011816:	f006 ff53 	bl	80186c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801181a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011822:	18d0      	adds	r0, r2, r3
 8011824:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	4413      	add	r3, r2
 801182c:	8b3a      	ldrh	r2, [r7, #24]
 801182e:	4619      	mov	r1, r3
 8011830:	f007 f87b 	bl	801892a <memcpy>
 8011834:	e02f      	b.n	8011896 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011836:	8a7b      	ldrh	r3, [r7, #18]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d006      	beq.n	801184a <tcp_write+0x3ae>
 801183c:	4b80      	ldr	r3, [pc, #512]	@ (8011a40 <tcp_write+0x5a4>)
 801183e:	f240 2271 	movw	r2, #625	@ 0x271
 8011842:	4982      	ldr	r1, [pc, #520]	@ (8011a4c <tcp_write+0x5b0>)
 8011844:	4880      	ldr	r0, [pc, #512]	@ (8011a48 <tcp_write+0x5ac>)
 8011846:	f006 ff3b 	bl	80186c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801184a:	8b3b      	ldrh	r3, [r7, #24]
 801184c:	2201      	movs	r2, #1
 801184e:	4619      	mov	r1, r3
 8011850:	2036      	movs	r0, #54	@ 0x36
 8011852:	f7fb f987 	bl	800cb64 <pbuf_alloc>
 8011856:	6178      	str	r0, [r7, #20]
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2b00      	cmp	r3, #0
 801185c:	f000 814b 	beq.w	8011af6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	441a      	add	r2, r3
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801186c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011870:	b29b      	uxth	r3, r3
 8011872:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011876:	4619      	mov	r1, r3
 8011878:	2036      	movs	r0, #54	@ 0x36
 801187a:	f7fb f973 	bl	800cb64 <pbuf_alloc>
 801187e:	6338      	str	r0, [r7, #48]	@ 0x30
 8011880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011882:	2b00      	cmp	r3, #0
 8011884:	d103      	bne.n	801188e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	f7fb fc50 	bl	800d12c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801188c:	e136      	b.n	8011afc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801188e:	6979      	ldr	r1, [r7, #20]
 8011890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011892:	f7fb fd19 	bl	800d2c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011898:	f7fb fcd6 	bl	800d248 <pbuf_clen>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80118a4:	4413      	add	r3, r2
 80118a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80118aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80118ae:	2b10      	cmp	r3, #16
 80118b0:	d903      	bls.n	80118ba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80118b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118b4:	f7fb fc3a 	bl	800d12c <pbuf_free>
      goto memerr;
 80118b8:	e120      	b.n	8011afc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80118be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118c2:	441a      	add	r2, r3
 80118c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118c8:	9300      	str	r3, [sp, #0]
 80118ca:	4613      	mov	r3, r2
 80118cc:	2200      	movs	r2, #0
 80118ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f7ff fc53 	bl	801117c <tcp_create_segment>
 80118d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80118d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f000 810d 	beq.w	8011afa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80118e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d102      	bne.n	80118ec <tcp_write+0x450>
      queue = seg;
 80118e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80118ea:	e00c      	b.n	8011906 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80118ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d106      	bne.n	8011900 <tcp_write+0x464>
 80118f2:	4b53      	ldr	r3, [pc, #332]	@ (8011a40 <tcp_write+0x5a4>)
 80118f4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80118f8:	4955      	ldr	r1, [pc, #340]	@ (8011a50 <tcp_write+0x5b4>)
 80118fa:	4853      	ldr	r0, [pc, #332]	@ (8011a48 <tcp_write+0x5ac>)
 80118fc:	f006 fee0 	bl	80186c0 <iprintf>
      prev_seg->next = seg;
 8011900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011902:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011904:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011908:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801190a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801190e:	8b3b      	ldrh	r3, [r7, #24]
 8011910:	4413      	add	r3, r2
 8011912:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011916:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801191a:	88fb      	ldrh	r3, [r7, #6]
 801191c:	429a      	cmp	r2, r3
 801191e:	f4ff af3d 	bcc.w	801179c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011922:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011924:	2b00      	cmp	r3, #0
 8011926:	d02c      	beq.n	8011982 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801192e:	e01e      	b.n	801196e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011932:	891a      	ldrh	r2, [r3, #8]
 8011934:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011936:	4413      	add	r3, r2
 8011938:	b29a      	uxth	r2, r3
 801193a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801193c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d110      	bne.n	8011968 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801194c:	8952      	ldrh	r2, [r2, #10]
 801194e:	4413      	add	r3, r2
 8011950:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011952:	68b9      	ldr	r1, [r7, #8]
 8011954:	4618      	mov	r0, r3
 8011956:	f006 ffe8 	bl	801892a <memcpy>
        p->len += oversize_used;
 801195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801195c:	895a      	ldrh	r2, [r3, #10]
 801195e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011960:	4413      	add	r3, r2
 8011962:	b29a      	uxth	r2, r3
 8011964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011966:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801196e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1dd      	bne.n	8011930 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011976:	891a      	ldrh	r2, [r3, #8]
 8011978:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801197a:	4413      	add	r3, r2
 801197c:	b29a      	uxth	r2, r3
 801197e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011980:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011982:	8a7a      	ldrh	r2, [r7, #18]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801198a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801198c:	2b00      	cmp	r3, #0
 801198e:	d018      	beq.n	80119c2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <tcp_write+0x508>
 8011996:	4b2a      	ldr	r3, [pc, #168]	@ (8011a40 <tcp_write+0x5a4>)
 8011998:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801199c:	492d      	ldr	r1, [pc, #180]	@ (8011a54 <tcp_write+0x5b8>)
 801199e:	482a      	ldr	r0, [pc, #168]	@ (8011a48 <tcp_write+0x5ac>)
 80119a0:	f006 fe8e 	bl	80186c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80119a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fb fc8c 	bl	800d2c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80119b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b2:	891a      	ldrh	r2, [r3, #8]
 80119b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119b6:	891b      	ldrh	r3, [r3, #8]
 80119b8:	4413      	add	r3, r2
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119be:	811a      	strh	r2, [r3, #8]
 80119c0:	e037      	b.n	8011a32 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80119c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d034      	beq.n	8011a32 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80119c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d003      	beq.n	80119d6 <tcp_write+0x53a>
 80119ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_write+0x548>
 80119d6:	4b1a      	ldr	r3, [pc, #104]	@ (8011a40 <tcp_write+0x5a4>)
 80119d8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80119dc:	491e      	ldr	r1, [pc, #120]	@ (8011a58 <tcp_write+0x5bc>)
 80119de:	481a      	ldr	r0, [pc, #104]	@ (8011a48 <tcp_write+0x5ac>)
 80119e0:	f006 fe6e 	bl	80186c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119ea:	e009      	b.n	8011a00 <tcp_write+0x564>
      p->tot_len += extendlen;
 80119ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ee:	891a      	ldrh	r2, [r3, #8]
 80119f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80119f2:	4413      	add	r3, r2
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1f1      	bne.n	80119ec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0a:	891a      	ldrh	r2, [r3, #8]
 8011a0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011a0e:	4413      	add	r3, r2
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a14:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a18:	895a      	ldrh	r2, [r3, #10]
 8011a1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a22:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a26:	891a      	ldrh	r2, [r3, #8]
 8011a28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011a2a:	4413      	add	r3, r2
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a30:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d111      	bne.n	8011a5c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a3c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011a3e:	e010      	b.n	8011a62 <tcp_write+0x5c6>
 8011a40:	0801bc8c 	.word	0x0801bc8c
 8011a44:	0801bf2c 	.word	0x0801bf2c
 8011a48:	0801bce0 	.word	0x0801bce0
 8011a4c:	0801bf6c 	.word	0x0801bf6c
 8011a50:	0801bf7c 	.word	0x0801bf7c
 8011a54:	0801bf90 	.word	0x0801bf90
 8011a58:	0801bfc8 	.word	0x0801bfc8
  } else {
    last_unsent->next = queue;
 8011a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a60:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011a66:	88fb      	ldrh	r3, [r7, #6]
 8011a68:	441a      	add	r2, r3
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011a74:	88fb      	ldrh	r3, [r7, #6]
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011a86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00e      	beq.n	8011ab2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d10a      	bne.n	8011ab2 <tcp_write+0x616>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d106      	bne.n	8011ab2 <tcp_write+0x616>
 8011aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8011b58 <tcp_write+0x6bc>)
 8011aa6:	f240 3212 	movw	r2, #786	@ 0x312
 8011aaa:	492c      	ldr	r1, [pc, #176]	@ (8011b5c <tcp_write+0x6c0>)
 8011aac:	482c      	ldr	r0, [pc, #176]	@ (8011b60 <tcp_write+0x6c4>)
 8011aae:	f006 fe07 	bl	80186c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d016      	beq.n	8011ae6 <tcp_write+0x64a>
 8011ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d012      	beq.n	8011ae6 <tcp_write+0x64a>
 8011ac0:	797b      	ldrb	r3, [r7, #5]
 8011ac2:	f003 0302 	and.w	r3, r3, #2
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10d      	bne.n	8011ae6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	899b      	ldrh	r3, [r3, #12]
 8011ad0:	b29c      	uxth	r4, r3
 8011ad2:	2008      	movs	r0, #8
 8011ad4:	f7f9 fe54 	bl	800b780 <lwip_htons>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	461a      	mov	r2, r3
 8011adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	4322      	orrs	r2, r4
 8011ae2:	b292      	uxth	r2, r2
 8011ae4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e031      	b.n	8011b4e <tcp_write+0x6b2>
          goto memerr;
 8011aea:	bf00      	nop
 8011aec:	e006      	b.n	8011afc <tcp_write+0x660>
            goto memerr;
 8011aee:	bf00      	nop
 8011af0:	e004      	b.n	8011afc <tcp_write+0x660>
        goto memerr;
 8011af2:	bf00      	nop
 8011af4:	e002      	b.n	8011afc <tcp_write+0x660>
        goto memerr;
 8011af6:	bf00      	nop
 8011af8:	e000      	b.n	8011afc <tcp_write+0x660>
      goto memerr;
 8011afa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	8b5b      	ldrh	r3, [r3, #26]
 8011b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d002      	beq.n	8011b16 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011b10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011b12:	f7fb fb0b 	bl	800d12c <pbuf_free>
  }
  if (queue != NULL) {
 8011b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d002      	beq.n	8011b22 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011b1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b1e:	f7fc ff69 	bl	800e9f4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00e      	beq.n	8011b4a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10a      	bne.n	8011b4a <tcp_write+0x6ae>
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d106      	bne.n	8011b4a <tcp_write+0x6ae>
 8011b3c:	4b06      	ldr	r3, [pc, #24]	@ (8011b58 <tcp_write+0x6bc>)
 8011b3e:	f240 3227 	movw	r2, #807	@ 0x327
 8011b42:	4906      	ldr	r1, [pc, #24]	@ (8011b5c <tcp_write+0x6c0>)
 8011b44:	4806      	ldr	r0, [pc, #24]	@ (8011b60 <tcp_write+0x6c4>)
 8011b46:	f006 fdbb 	bl	80186c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	375c      	adds	r7, #92	@ 0x5c
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd90      	pop	{r4, r7, pc}
 8011b56:	bf00      	nop
 8011b58:	0801bc8c 	.word	0x0801bc8c
 8011b5c:	0801c000 	.word	0x0801c000
 8011b60:	0801bce0 	.word	0x0801bce0

08011b64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011b64:	b590      	push	{r4, r7, lr}
 8011b66:	b08b      	sub	sp, #44	@ 0x2c
 8011b68:	af02      	add	r7, sp, #8
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011b70:	2300      	movs	r3, #0
 8011b72:	61fb      	str	r3, [r7, #28]
 8011b74:	2300      	movs	r3, #0
 8011b76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d106      	bne.n	8011b90 <tcp_split_unsent_seg+0x2c>
 8011b82:	4b95      	ldr	r3, [pc, #596]	@ (8011dd8 <tcp_split_unsent_seg+0x274>)
 8011b84:	f240 324b 	movw	r2, #843	@ 0x34b
 8011b88:	4994      	ldr	r1, [pc, #592]	@ (8011ddc <tcp_split_unsent_seg+0x278>)
 8011b8a:	4895      	ldr	r0, [pc, #596]	@ (8011de0 <tcp_split_unsent_seg+0x27c>)
 8011b8c:	f006 fd98 	bl	80186c0 <iprintf>

  useg = pcb->unsent;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba0:	e116      	b.n	8011dd0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011ba2:	887b      	ldrh	r3, [r7, #2]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d109      	bne.n	8011bbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ba8:	4b8b      	ldr	r3, [pc, #556]	@ (8011dd8 <tcp_split_unsent_seg+0x274>)
 8011baa:	f240 3253 	movw	r2, #851	@ 0x353
 8011bae:	498d      	ldr	r1, [pc, #564]	@ (8011de4 <tcp_split_unsent_seg+0x280>)
 8011bb0:	488b      	ldr	r0, [pc, #556]	@ (8011de0 <tcp_split_unsent_seg+0x27c>)
 8011bb2:	f006 fd85 	bl	80186c0 <iprintf>
    return ERR_VAL;
 8011bb6:	f06f 0305 	mvn.w	r3, #5
 8011bba:	e109      	b.n	8011dd0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	891b      	ldrh	r3, [r3, #8]
 8011bc0:	887a      	ldrh	r2, [r7, #2]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d301      	bcc.n	8011bca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e102      	b.n	8011dd0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011bce:	887a      	ldrh	r2, [r7, #2]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d906      	bls.n	8011be2 <tcp_split_unsent_seg+0x7e>
 8011bd4:	4b80      	ldr	r3, [pc, #512]	@ (8011dd8 <tcp_split_unsent_seg+0x274>)
 8011bd6:	f240 325b 	movw	r2, #859	@ 0x35b
 8011bda:	4983      	ldr	r1, [pc, #524]	@ (8011de8 <tcp_split_unsent_seg+0x284>)
 8011bdc:	4880      	ldr	r0, [pc, #512]	@ (8011de0 <tcp_split_unsent_seg+0x27c>)
 8011bde:	f006 fd6f 	bl	80186c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	891b      	ldrh	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d106      	bne.n	8011bf8 <tcp_split_unsent_seg+0x94>
 8011bea:	4b7b      	ldr	r3, [pc, #492]	@ (8011dd8 <tcp_split_unsent_seg+0x274>)
 8011bec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011bf0:	497e      	ldr	r1, [pc, #504]	@ (8011dec <tcp_split_unsent_seg+0x288>)
 8011bf2:	487b      	ldr	r0, [pc, #492]	@ (8011de0 <tcp_split_unsent_seg+0x27c>)
 8011bf4:	f006 fd64 	bl	80186c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	7a9b      	ldrb	r3, [r3, #10]
 8011bfc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011bfe:	7bfb      	ldrb	r3, [r7, #15]
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	f003 0304 	and.w	r3, r3, #4
 8011c08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	891a      	ldrh	r2, [r3, #8]
 8011c0e:	887b      	ldrh	r3, [r7, #2]
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c14:	7bbb      	ldrb	r3, [r7, #14]
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	89bb      	ldrh	r3, [r7, #12]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011c22:	4619      	mov	r1, r3
 8011c24:	2036      	movs	r0, #54	@ 0x36
 8011c26:	f7fa ff9d 	bl	800cb64 <pbuf_alloc>
 8011c2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	f000 80b7 	beq.w	8011da2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	891a      	ldrh	r2, [r3, #8]
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	891b      	ldrh	r3, [r3, #8]
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	887b      	ldrh	r3, [r7, #2]
 8011c44:	4413      	add	r3, r2
 8011c46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	6858      	ldr	r0, [r3, #4]
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	7bbb      	ldrb	r3, [r7, #14]
 8011c52:	18d1      	adds	r1, r2, r3
 8011c54:	897b      	ldrh	r3, [r7, #10]
 8011c56:	89ba      	ldrh	r2, [r7, #12]
 8011c58:	f7fb fc6e 	bl	800d538 <pbuf_copy_partial>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	461a      	mov	r2, r3
 8011c60:	89bb      	ldrh	r3, [r7, #12]
 8011c62:	4293      	cmp	r3, r2
 8011c64:	f040 809f 	bne.w	8011da6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	899b      	ldrh	r3, [r3, #12]
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7f9 fd85 	bl	800b780 <lwip_htons>
 8011c76:	4603      	mov	r3, r0
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011c80:	2300      	movs	r3, #0
 8011c82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c84:	7efb      	ldrb	r3, [r7, #27]
 8011c86:	f003 0308 	and.w	r3, r3, #8
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d007      	beq.n	8011c9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c8e:	7efb      	ldrb	r3, [r7, #27]
 8011c90:	f023 0308 	bic.w	r3, r3, #8
 8011c94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c96:	7ebb      	ldrb	r3, [r7, #26]
 8011c98:	f043 0308 	orr.w	r3, r3, #8
 8011c9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c9e:	7efb      	ldrb	r3, [r7, #27]
 8011ca0:	f003 0301 	and.w	r3, r3, #1
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d007      	beq.n	8011cb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ca8:	7efb      	ldrb	r3, [r7, #27]
 8011caa:	f023 0301 	bic.w	r3, r3, #1
 8011cae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011cb0:	7ebb      	ldrb	r3, [r7, #26]
 8011cb2:	f043 0301 	orr.w	r3, r3, #1
 8011cb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7f9 fd73 	bl	800b7aa <lwip_htonl>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	887b      	ldrh	r3, [r7, #2]
 8011cc8:	18d1      	adds	r1, r2, r3
 8011cca:	7eba      	ldrb	r2, [r7, #26]
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
 8011cce:	9300      	str	r3, [sp, #0]
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	6939      	ldr	r1, [r7, #16]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7ff fa51 	bl	801117c <tcp_create_segment>
 8011cda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d063      	beq.n	8011daa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fb faae 	bl	800d248 <pbuf_clen>
 8011cec:	4603      	mov	r3, r0
 8011cee:	461a      	mov	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cf6:	1a9b      	subs	r3, r3, r2
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	6858      	ldr	r0, [r3, #4]
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	891a      	ldrh	r2, [r3, #8]
 8011d0a:	89bb      	ldrh	r3, [r7, #12]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	4619      	mov	r1, r3
 8011d12:	f7fb f885 	bl	800ce20 <pbuf_realloc>
  useg->len -= remainder;
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	891a      	ldrh	r2, [r3, #8]
 8011d1a:	89bb      	ldrh	r3, [r7, #12]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	b29c      	uxth	r4, r3
 8011d2c:	7efb      	ldrb	r3, [r7, #27]
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7f9 fd25 	bl	800b780 <lwip_htons>
 8011d36:	4603      	mov	r3, r0
 8011d38:	461a      	mov	r2, r3
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	4322      	orrs	r2, r4
 8011d40:	b292      	uxth	r2, r2
 8011d42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fb fa7d 	bl	800d248 <pbuf_clen>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	461a      	mov	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d58:	4413      	add	r3, r2
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fb fa6e 	bl	800d248 <pbuf_clen>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	461a      	mov	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d76:	4413      	add	r3, r2
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	69fa      	ldr	r2, [r7, #28]
 8011d8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d103      	bne.n	8011d9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e016      	b.n	8011dd0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011da2:	bf00      	nop
 8011da4:	e002      	b.n	8011dac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011da6:	bf00      	nop
 8011da8:	e000      	b.n	8011dac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011daa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d006      	beq.n	8011dc0 <tcp_split_unsent_seg+0x25c>
 8011db2:	4b09      	ldr	r3, [pc, #36]	@ (8011dd8 <tcp_split_unsent_seg+0x274>)
 8011db4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011db8:	490d      	ldr	r1, [pc, #52]	@ (8011df0 <tcp_split_unsent_seg+0x28c>)
 8011dba:	4809      	ldr	r0, [pc, #36]	@ (8011de0 <tcp_split_unsent_seg+0x27c>)
 8011dbc:	f006 fc80 	bl	80186c0 <iprintf>
  if (p != NULL) {
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d002      	beq.n	8011dcc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011dc6:	6938      	ldr	r0, [r7, #16]
 8011dc8:	f7fb f9b0 	bl	800d12c <pbuf_free>
  }

  return ERR_MEM;
 8011dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3724      	adds	r7, #36	@ 0x24
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd90      	pop	{r4, r7, pc}
 8011dd8:	0801bc8c 	.word	0x0801bc8c
 8011ddc:	0801c020 	.word	0x0801c020
 8011de0:	0801bce0 	.word	0x0801bce0
 8011de4:	0801c044 	.word	0x0801c044
 8011de8:	0801c068 	.word	0x0801c068
 8011dec:	0801c078 	.word	0x0801c078
 8011df0:	0801c088 	.word	0x0801c088

08011df4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011df4:	b590      	push	{r4, r7, lr}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d106      	bne.n	8011e10 <tcp_send_fin+0x1c>
 8011e02:	4b21      	ldr	r3, [pc, #132]	@ (8011e88 <tcp_send_fin+0x94>)
 8011e04:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011e08:	4920      	ldr	r1, [pc, #128]	@ (8011e8c <tcp_send_fin+0x98>)
 8011e0a:	4821      	ldr	r0, [pc, #132]	@ (8011e90 <tcp_send_fin+0x9c>)
 8011e0c:	f006 fc58 	bl	80186c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d02e      	beq.n	8011e76 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e1c:	60fb      	str	r3, [r7, #12]
 8011e1e:	e002      	b.n	8011e26 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f8      	bne.n	8011e20 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	899b      	ldrh	r3, [r3, #12]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f9 fca2 	bl	800b780 <lwip_htons>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	f003 0307 	and.w	r3, r3, #7
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d116      	bne.n	8011e76 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	899b      	ldrh	r3, [r3, #12]
 8011e4e:	b29c      	uxth	r4, r3
 8011e50:	2001      	movs	r0, #1
 8011e52:	f7f9 fc95 	bl	800b780 <lwip_htons>
 8011e56:	4603      	mov	r3, r0
 8011e58:	461a      	mov	r2, r3
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	4322      	orrs	r2, r4
 8011e60:	b292      	uxth	r2, r2
 8011e62:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	8b5b      	ldrh	r3, [r3, #26]
 8011e68:	f043 0320 	orr.w	r3, r3, #32
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011e72:	2300      	movs	r3, #0
 8011e74:	e004      	b.n	8011e80 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011e76:	2101      	movs	r1, #1
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 f80b 	bl	8011e94 <tcp_enqueue_flags>
 8011e7e:	4603      	mov	r3, r0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3714      	adds	r7, #20
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd90      	pop	{r4, r7, pc}
 8011e88:	0801bc8c 	.word	0x0801bc8c
 8011e8c:	0801c094 	.word	0x0801c094
 8011e90:	0801bce0 	.word	0x0801bce0

08011e94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b08a      	sub	sp, #40	@ 0x28
 8011e98:	af02      	add	r7, sp, #8
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ea8:	78fb      	ldrb	r3, [r7, #3]
 8011eaa:	f003 0303 	and.w	r3, r3, #3
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d106      	bne.n	8011ec0 <tcp_enqueue_flags+0x2c>
 8011eb2:	4b67      	ldr	r3, [pc, #412]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8011eb4:	f240 4211 	movw	r2, #1041	@ 0x411
 8011eb8:	4966      	ldr	r1, [pc, #408]	@ (8012054 <tcp_enqueue_flags+0x1c0>)
 8011eba:	4867      	ldr	r0, [pc, #412]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8011ebc:	f006 fc00 	bl	80186c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <tcp_enqueue_flags+0x40>
 8011ec6:	4b62      	ldr	r3, [pc, #392]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8011ec8:	f240 4213 	movw	r2, #1043	@ 0x413
 8011ecc:	4963      	ldr	r1, [pc, #396]	@ (801205c <tcp_enqueue_flags+0x1c8>)
 8011ece:	4862      	ldr	r0, [pc, #392]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8011ed0:	f006 fbf6 	bl	80186c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ed4:	78fb      	ldrb	r3, [r7, #3]
 8011ed6:	f003 0302 	and.w	r3, r3, #2
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ee2:	7ffb      	ldrb	r3, [r7, #31]
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	f003 0304 	and.w	r3, r3, #4
 8011eec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	2036      	movs	r0, #54	@ 0x36
 8011efa:	f7fa fe33 	bl	800cb64 <pbuf_alloc>
 8011efe:	6138      	str	r0, [r7, #16]
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d109      	bne.n	8011f1a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f14:	f04f 33ff 	mov.w	r3, #4294967295
 8011f18:	e095      	b.n	8012046 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	895a      	ldrh	r2, [r3, #10]
 8011f1e:	7dfb      	ldrb	r3, [r7, #23]
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d206      	bcs.n	8011f34 <tcp_enqueue_flags+0xa0>
 8011f26:	4b4a      	ldr	r3, [pc, #296]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8011f28:	f240 4239 	movw	r2, #1081	@ 0x439
 8011f2c:	494c      	ldr	r1, [pc, #304]	@ (8012060 <tcp_enqueue_flags+0x1cc>)
 8011f2e:	484a      	ldr	r0, [pc, #296]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8011f30:	f006 fbc6 	bl	80186c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011f38:	78fa      	ldrb	r2, [r7, #3]
 8011f3a:	7ffb      	ldrb	r3, [r7, #31]
 8011f3c:	9300      	str	r3, [sp, #0]
 8011f3e:	460b      	mov	r3, r1
 8011f40:	6939      	ldr	r1, [r7, #16]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff f91a 	bl	801117c <tcp_create_segment>
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d109      	bne.n	8011f64 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	8b5b      	ldrh	r3, [r3, #26]
 8011f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	e070      	b.n	8012046 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	f003 0303 	and.w	r3, r3, #3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d006      	beq.n	8011f7e <tcp_enqueue_flags+0xea>
 8011f70:	4b37      	ldr	r3, [pc, #220]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8011f72:	f240 4242 	movw	r2, #1090	@ 0x442
 8011f76:	493b      	ldr	r1, [pc, #236]	@ (8012064 <tcp_enqueue_flags+0x1d0>)
 8011f78:	4837      	ldr	r0, [pc, #220]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8011f7a:	f006 fba1 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	891b      	ldrh	r3, [r3, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d006      	beq.n	8011f94 <tcp_enqueue_flags+0x100>
 8011f86:	4b32      	ldr	r3, [pc, #200]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8011f88:	f240 4243 	movw	r2, #1091	@ 0x443
 8011f8c:	4936      	ldr	r1, [pc, #216]	@ (8012068 <tcp_enqueue_flags+0x1d4>)
 8011f8e:	4832      	ldr	r0, [pc, #200]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8011f90:	f006 fb96 	bl	80186c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d103      	bne.n	8011fa4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011fa2:	e00d      	b.n	8011fc0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fa8:	61bb      	str	r3, [r7, #24]
 8011faa:	e002      	b.n	8011fb2 <tcp_enqueue_flags+0x11e>
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	61bb      	str	r3, [r7, #24]
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d1f8      	bne.n	8011fac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	f003 0302 	and.w	r3, r3, #2
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d104      	bne.n	8011fdc <tcp_enqueue_flags+0x148>
 8011fd2:	78fb      	ldrb	r3, [r7, #3]
 8011fd4:	f003 0301 	and.w	r3, r3, #1
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011fe6:	78fb      	ldrb	r3, [r7, #3]
 8011fe8:	f003 0301 	and.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d006      	beq.n	8011ffe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	8b5b      	ldrh	r3, [r3, #26]
 8011ff4:	f043 0320 	orr.w	r3, r3, #32
 8011ff8:	b29a      	uxth	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	f7fb f920 	bl	800d248 <pbuf_clen>
 8012008:	4603      	mov	r3, r0
 801200a:	461a      	mov	r2, r3
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012012:	4413      	add	r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012022:	2b00      	cmp	r3, #0
 8012024:	d00e      	beq.n	8012044 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801202a:	2b00      	cmp	r3, #0
 801202c:	d10a      	bne.n	8012044 <tcp_enqueue_flags+0x1b0>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <tcp_enqueue_flags+0x1b0>
 8012036:	4b06      	ldr	r3, [pc, #24]	@ (8012050 <tcp_enqueue_flags+0x1bc>)
 8012038:	f240 4265 	movw	r2, #1125	@ 0x465
 801203c:	490b      	ldr	r1, [pc, #44]	@ (801206c <tcp_enqueue_flags+0x1d8>)
 801203e:	4806      	ldr	r0, [pc, #24]	@ (8012058 <tcp_enqueue_flags+0x1c4>)
 8012040:	f006 fb3e 	bl	80186c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3720      	adds	r7, #32
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	0801bc8c 	.word	0x0801bc8c
 8012054:	0801c0b0 	.word	0x0801c0b0
 8012058:	0801bce0 	.word	0x0801bce0
 801205c:	0801c108 	.word	0x0801c108
 8012060:	0801c128 	.word	0x0801c128
 8012064:	0801c164 	.word	0x0801c164
 8012068:	0801c17c 	.word	0x0801c17c
 801206c:	0801c1a8 	.word	0x0801c1a8

08012070 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012070:	b5b0      	push	{r4, r5, r7, lr}
 8012072:	b08a      	sub	sp, #40	@ 0x28
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d106      	bne.n	801208c <tcp_output+0x1c>
 801207e:	4b8a      	ldr	r3, [pc, #552]	@ (80122a8 <tcp_output+0x238>)
 8012080:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012084:	4989      	ldr	r1, [pc, #548]	@ (80122ac <tcp_output+0x23c>)
 8012086:	488a      	ldr	r0, [pc, #552]	@ (80122b0 <tcp_output+0x240>)
 8012088:	f006 fb1a 	bl	80186c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	7d1b      	ldrb	r3, [r3, #20]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d106      	bne.n	80120a2 <tcp_output+0x32>
 8012094:	4b84      	ldr	r3, [pc, #528]	@ (80122a8 <tcp_output+0x238>)
 8012096:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801209a:	4986      	ldr	r1, [pc, #536]	@ (80122b4 <tcp_output+0x244>)
 801209c:	4884      	ldr	r0, [pc, #528]	@ (80122b0 <tcp_output+0x240>)
 801209e:	f006 fb0f 	bl	80186c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80120a2:	4b85      	ldr	r3, [pc, #532]	@ (80122b8 <tcp_output+0x248>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d101      	bne.n	80120b0 <tcp_output+0x40>
    return ERR_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	e1ce      	b.n	801244e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80120bc:	4293      	cmp	r3, r2
 80120be:	bf28      	it	cs
 80120c0:	4613      	movcs	r3, r2
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d10b      	bne.n	80120ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8b5b      	ldrh	r3, [r3, #26]
 80120d6:	f003 0302 	and.w	r3, r3, #2
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f000 81aa 	beq.w	8012434 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fded 	bl	8012cc0 <tcp_send_empty_ack>
 80120e6:	4603      	mov	r3, r0
 80120e8:	e1b1      	b.n	801244e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80120ea:	6879      	ldr	r1, [r7, #4]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3304      	adds	r3, #4
 80120f0:	461a      	mov	r2, r3
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f7ff f826 	bl	8011144 <tcp_route>
 80120f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d102      	bne.n	8012106 <tcp_output+0x96>
    return ERR_RTE;
 8012100:	f06f 0303 	mvn.w	r3, #3
 8012104:	e1a3      	b.n	801244e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d003      	beq.n	8012114 <tcp_output+0xa4>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d111      	bne.n	8012138 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d002      	beq.n	8012120 <tcp_output+0xb0>
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	3304      	adds	r3, #4
 801211e:	e000      	b.n	8012122 <tcp_output+0xb2>
 8012120:	2300      	movs	r3, #0
 8012122:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d102      	bne.n	8012130 <tcp_output+0xc0>
      return ERR_RTE;
 801212a:	f06f 0303 	mvn.w	r3, #3
 801212e:	e18e      	b.n	801244e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	f7f9 fb33 	bl	800b7aa <lwip_htonl>
 8012144:	4602      	mov	r2, r0
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801214e:	8912      	ldrh	r2, [r2, #8]
 8012150:	4413      	add	r3, r2
 8012152:	69ba      	ldr	r2, [r7, #24]
 8012154:	429a      	cmp	r2, r3
 8012156:	d227      	bcs.n	80121a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801215e:	461a      	mov	r2, r3
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	4293      	cmp	r3, r2
 8012164:	d114      	bne.n	8012190 <tcp_output+0x120>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801216a:	2b00      	cmp	r3, #0
 801216c:	d110      	bne.n	8012190 <tcp_output+0x120>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10b      	bne.n	8012190 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	8b5b      	ldrh	r3, [r3, #26]
 8012194:	f003 0302 	and.w	r3, r3, #2
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 814d 	beq.w	8012438 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fd8e 	bl	8012cc0 <tcp_send_empty_ack>
 80121a4:	4603      	mov	r3, r0
 80121a6:	e152      	b.n	801244e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 811c 	beq.w	80123f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80121be:	e002      	b.n	80121c6 <tcp_output+0x156>
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	623b      	str	r3, [r7, #32]
 80121c6:	6a3b      	ldr	r3, [r7, #32]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d1f8      	bne.n	80121c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80121ce:	e112      	b.n	80123f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80121d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	899b      	ldrh	r3, [r3, #12]
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	4618      	mov	r0, r3
 80121da:	f7f9 fad1 	bl	800b780 <lwip_htons>
 80121de:	4603      	mov	r3, r0
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	f003 0304 	and.w	r3, r3, #4
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d006      	beq.n	80121f8 <tcp_output+0x188>
 80121ea:	4b2f      	ldr	r3, [pc, #188]	@ (80122a8 <tcp_output+0x238>)
 80121ec:	f240 5236 	movw	r2, #1334	@ 0x536
 80121f0:	4932      	ldr	r1, [pc, #200]	@ (80122bc <tcp_output+0x24c>)
 80121f2:	482f      	ldr	r0, [pc, #188]	@ (80122b0 <tcp_output+0x240>)
 80121f4:	f006 fa64 	bl	80186c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d01f      	beq.n	8012240 <tcp_output+0x1d0>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	8b5b      	ldrh	r3, [r3, #26]
 8012204:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012208:	2b00      	cmp	r3, #0
 801220a:	d119      	bne.n	8012240 <tcp_output+0x1d0>
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00b      	beq.n	801222c <tcp_output+0x1bc>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d110      	bne.n	8012240 <tcp_output+0x1d0>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012222:	891a      	ldrh	r2, [r3, #8]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012228:	429a      	cmp	r2, r3
 801222a:	d209      	bcs.n	8012240 <tcp_output+0x1d0>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012232:	2b00      	cmp	r3, #0
 8012234:	d004      	beq.n	8012240 <tcp_output+0x1d0>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801223c:	2b0f      	cmp	r3, #15
 801223e:	d901      	bls.n	8012244 <tcp_output+0x1d4>
 8012240:	2301      	movs	r3, #1
 8012242:	e000      	b.n	8012246 <tcp_output+0x1d6>
 8012244:	2300      	movs	r3, #0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8b5b      	ldrh	r3, [r3, #26]
 801224e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 80e4 	beq.w	8012420 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	7d1b      	ldrb	r3, [r3, #20]
 801225c:	2b02      	cmp	r3, #2
 801225e:	d00d      	beq.n	801227c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	899b      	ldrh	r3, [r3, #12]
 8012266:	b29c      	uxth	r4, r3
 8012268:	2010      	movs	r0, #16
 801226a:	f7f9 fa89 	bl	800b780 <lwip_htons>
 801226e:	4603      	mov	r3, r0
 8012270:	461a      	mov	r2, r3
 8012272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	4322      	orrs	r2, r4
 8012278:	b292      	uxth	r2, r2
 801227a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801227c:	697a      	ldr	r2, [r7, #20]
 801227e:	6879      	ldr	r1, [r7, #4]
 8012280:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012282:	f000 f909 	bl	8012498 <tcp_output_segment>
 8012286:	4603      	mov	r3, r0
 8012288:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d016      	beq.n	80122c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	8b5b      	ldrh	r3, [r3, #26]
 8012296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801229a:	b29a      	uxth	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	835a      	strh	r2, [r3, #26]
      return err;
 80122a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122a4:	e0d3      	b.n	801244e <tcp_output+0x3de>
 80122a6:	bf00      	nop
 80122a8:	0801bc8c 	.word	0x0801bc8c
 80122ac:	0801c1d0 	.word	0x0801c1d0
 80122b0:	0801bce0 	.word	0x0801bce0
 80122b4:	0801c1e8 	.word	0x0801c1e8
 80122b8:	20015814 	.word	0x20015814
 80122bc:	0801c210 	.word	0x0801c210
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	7d1b      	ldrb	r3, [r3, #20]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d006      	beq.n	80122de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	8b5b      	ldrh	r3, [r3, #26]
 80122d4:	f023 0303 	bic.w	r3, r3, #3
 80122d8:	b29a      	uxth	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7f9 fa60 	bl	800b7aa <lwip_htonl>
 80122ea:	4604      	mov	r4, r0
 80122ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ee:	891b      	ldrh	r3, [r3, #8]
 80122f0:	461d      	mov	r5, r3
 80122f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	899b      	ldrh	r3, [r3, #12]
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7f9 fa40 	bl	800b780 <lwip_htons>
 8012300:	4603      	mov	r3, r0
 8012302:	b2db      	uxtb	r3, r3
 8012304:	f003 0303 	and.w	r3, r3, #3
 8012308:	2b00      	cmp	r3, #0
 801230a:	d001      	beq.n	8012310 <tcp_output+0x2a0>
 801230c:	2301      	movs	r3, #1
 801230e:	e000      	b.n	8012312 <tcp_output+0x2a2>
 8012310:	2300      	movs	r3, #0
 8012312:	442b      	add	r3, r5
 8012314:	4423      	add	r3, r4
 8012316:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	da02      	bge.n	801232a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232c:	891b      	ldrh	r3, [r3, #8]
 801232e:	461c      	mov	r4, r3
 8012330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	899b      	ldrh	r3, [r3, #12]
 8012336:	b29b      	uxth	r3, r3
 8012338:	4618      	mov	r0, r3
 801233a:	f7f9 fa21 	bl	800b780 <lwip_htons>
 801233e:	4603      	mov	r3, r0
 8012340:	b2db      	uxtb	r3, r3
 8012342:	f003 0303 	and.w	r3, r3, #3
 8012346:	2b00      	cmp	r3, #0
 8012348:	d001      	beq.n	801234e <tcp_output+0x2de>
 801234a:	2301      	movs	r3, #1
 801234c:	e000      	b.n	8012350 <tcp_output+0x2e0>
 801234e:	2300      	movs	r3, #0
 8012350:	4423      	add	r3, r4
 8012352:	2b00      	cmp	r3, #0
 8012354:	d049      	beq.n	80123ea <tcp_output+0x37a>
      seg->next = NULL;
 8012356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012358:	2200      	movs	r2, #0
 801235a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012360:	2b00      	cmp	r3, #0
 8012362:	d105      	bne.n	8012370 <tcp_output+0x300>
        pcb->unacked = seg;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012368:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801236c:	623b      	str	r3, [r7, #32]
 801236e:	e03f      	b.n	80123f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7f9 fa17 	bl	800b7aa <lwip_htonl>
 801237c:	4604      	mov	r4, r0
 801237e:	6a3b      	ldr	r3, [r7, #32]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	4618      	mov	r0, r3
 8012386:	f7f9 fa10 	bl	800b7aa <lwip_htonl>
 801238a:	4603      	mov	r3, r0
 801238c:	1ae3      	subs	r3, r4, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	da24      	bge.n	80123dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	3370      	adds	r3, #112	@ 0x70
 8012396:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012398:	e002      	b.n	80123a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d011      	beq.n	80123cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f9 f9fa 	bl	800b7aa <lwip_htonl>
 80123b6:	4604      	mov	r4, r0
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	4618      	mov	r0, r3
 80123c0:	f7f9 f9f3 	bl	800b7aa <lwip_htonl>
 80123c4:	4603      	mov	r3, r0
 80123c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	dbe6      	blt.n	801239a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123d8:	601a      	str	r2, [r3, #0]
 80123da:	e009      	b.n	80123f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80123dc:	6a3b      	ldr	r3, [r7, #32]
 80123de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80123e2:	6a3b      	ldr	r3, [r7, #32]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	623b      	str	r3, [r7, #32]
 80123e8:	e002      	b.n	80123f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80123ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80123ec:	f7fc fb17 	bl	800ea1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80123f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d012      	beq.n	8012422 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80123fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	4618      	mov	r0, r3
 8012404:	f7f9 f9d1 	bl	800b7aa <lwip_htonl>
 8012408:	4602      	mov	r2, r0
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012412:	8912      	ldrh	r2, [r2, #8]
 8012414:	4413      	add	r3, r2
  while (seg != NULL &&
 8012416:	69ba      	ldr	r2, [r7, #24]
 8012418:	429a      	cmp	r2, r3
 801241a:	f4bf aed9 	bcs.w	80121d0 <tcp_output+0x160>
 801241e:	e000      	b.n	8012422 <tcp_output+0x3b2>
      break;
 8012420:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012426:	2b00      	cmp	r3, #0
 8012428:	d108      	bne.n	801243c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2200      	movs	r2, #0
 801242e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012432:	e004      	b.n	801243e <tcp_output+0x3ce>
    goto output_done;
 8012434:	bf00      	nop
 8012436:	e002      	b.n	801243e <tcp_output+0x3ce>
    goto output_done;
 8012438:	bf00      	nop
 801243a:	e000      	b.n	801243e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801243c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8b5b      	ldrh	r3, [r3, #26]
 8012442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012446:	b29a      	uxth	r2, r3
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3728      	adds	r7, #40	@ 0x28
 8012452:	46bd      	mov	sp, r7
 8012454:	bdb0      	pop	{r4, r5, r7, pc}
 8012456:	bf00      	nop

08012458 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d106      	bne.n	8012474 <tcp_output_segment_busy+0x1c>
 8012466:	4b09      	ldr	r3, [pc, #36]	@ (801248c <tcp_output_segment_busy+0x34>)
 8012468:	f240 529a 	movw	r2, #1434	@ 0x59a
 801246c:	4908      	ldr	r1, [pc, #32]	@ (8012490 <tcp_output_segment_busy+0x38>)
 801246e:	4809      	ldr	r0, [pc, #36]	@ (8012494 <tcp_output_segment_busy+0x3c>)
 8012470:	f006 f926 	bl	80186c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	7b9b      	ldrb	r3, [r3, #14]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d001      	beq.n	8012482 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801247e:	2301      	movs	r3, #1
 8012480:	e000      	b.n	8012484 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	0801bc8c 	.word	0x0801bc8c
 8012490:	0801c228 	.word	0x0801c228
 8012494:	0801bce0 	.word	0x0801bce0

08012498 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012498:	b5b0      	push	{r4, r5, r7, lr}
 801249a:	b08c      	sub	sp, #48	@ 0x30
 801249c:	af04      	add	r7, sp, #16
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <tcp_output_segment+0x20>
 80124aa:	4b6d      	ldr	r3, [pc, #436]	@ (8012660 <tcp_output_segment+0x1c8>)
 80124ac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80124b0:	496c      	ldr	r1, [pc, #432]	@ (8012664 <tcp_output_segment+0x1cc>)
 80124b2:	486d      	ldr	r0, [pc, #436]	@ (8012668 <tcp_output_segment+0x1d0>)
 80124b4:	f006 f904 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d106      	bne.n	80124cc <tcp_output_segment+0x34>
 80124be:	4b68      	ldr	r3, [pc, #416]	@ (8012660 <tcp_output_segment+0x1c8>)
 80124c0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80124c4:	4969      	ldr	r1, [pc, #420]	@ (801266c <tcp_output_segment+0x1d4>)
 80124c6:	4868      	ldr	r0, [pc, #416]	@ (8012668 <tcp_output_segment+0x1d0>)
 80124c8:	f006 f8fa 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <tcp_output_segment+0x48>
 80124d2:	4b63      	ldr	r3, [pc, #396]	@ (8012660 <tcp_output_segment+0x1c8>)
 80124d4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80124d8:	4965      	ldr	r1, [pc, #404]	@ (8012670 <tcp_output_segment+0x1d8>)
 80124da:	4863      	ldr	r0, [pc, #396]	@ (8012668 <tcp_output_segment+0x1d0>)
 80124dc:	f006 f8f0 	bl	80186c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f7ff ffb9 	bl	8012458 <tcp_output_segment_busy>
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	e0b3      	b.n	8012658 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	68dc      	ldr	r4, [r3, #12]
 80124f8:	4610      	mov	r0, r2
 80124fa:	f7f9 f956 	bl	800b7aa <lwip_htonl>
 80124fe:	4603      	mov	r3, r0
 8012500:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	68dc      	ldr	r4, [r3, #12]
 801250a:	4610      	mov	r0, r2
 801250c:	f7f9 f938 	bl	800b780 <lwip_htons>
 8012510:	4603      	mov	r3, r0
 8012512:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801251c:	441a      	add	r2, r3
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	3314      	adds	r3, #20
 8012528:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	7a9b      	ldrb	r3, [r3, #10]
 801252e:	f003 0301 	and.w	r3, r3, #1
 8012532:	2b00      	cmp	r3, #0
 8012534:	d015      	beq.n	8012562 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	3304      	adds	r3, #4
 801253a:	461a      	mov	r2, r3
 801253c:	6879      	ldr	r1, [r7, #4]
 801253e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8012542:	f7fc fdef 	bl	800f124 <tcp_eff_send_mss_netif>
 8012546:	4603      	mov	r3, r0
 8012548:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801254a:	8b7b      	ldrh	r3, [r7, #26]
 801254c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012550:	4618      	mov	r0, r3
 8012552:	f7f9 f92a 	bl	800b7aa <lwip_htonl>
 8012556:	4602      	mov	r2, r0
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	3304      	adds	r3, #4
 8012560:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012568:	2b00      	cmp	r3, #0
 801256a:	da02      	bge.n	8012572 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	2200      	movs	r2, #0
 8012570:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10c      	bne.n	8012594 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801257a:	4b3e      	ldr	r3, [pc, #248]	@ (8012674 <tcp_output_segment+0x1dc>)
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	f7f9 f90e 	bl	800b7aa <lwip_htonl>
 801258e:	4602      	mov	r2, r0
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68da      	ldr	r2, [r3, #12]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	8959      	ldrh	r1, [r3, #10]
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	8b3a      	ldrh	r2, [r7, #24]
 80125ae:	1a8a      	subs	r2, r1, r2
 80125b0:	b292      	uxth	r2, r2
 80125b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	8919      	ldrh	r1, [r3, #8]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	8b3a      	ldrh	r2, [r7, #24]
 80125c0:	1a8a      	subs	r2, r1, r2
 80125c2:	b292      	uxth	r2, r2
 80125c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	68d2      	ldr	r2, [r2, #12]
 80125ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	2200      	movs	r2, #0
 80125d6:	741a      	strb	r2, [r3, #16]
 80125d8:	2200      	movs	r2, #0
 80125da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68da      	ldr	r2, [r3, #12]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	7a9b      	ldrb	r3, [r3, #10]
 80125e4:	f003 0301 	and.w	r3, r3, #1
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <tcp_output_segment+0x158>
 80125ec:	2318      	movs	r3, #24
 80125ee:	e000      	b.n	80125f2 <tcp_output_segment+0x15a>
 80125f0:	2314      	movs	r3, #20
 80125f2:	4413      	add	r3, r2
 80125f4:	69fa      	ldr	r2, [r7, #28]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d006      	beq.n	8012608 <tcp_output_segment+0x170>
 80125fa:	4b19      	ldr	r3, [pc, #100]	@ (8012660 <tcp_output_segment+0x1c8>)
 80125fc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012600:	491d      	ldr	r1, [pc, #116]	@ (8012678 <tcp_output_segment+0x1e0>)
 8012602:	4819      	ldr	r0, [pc, #100]	@ (8012668 <tcp_output_segment+0x1d0>)
 8012604:	f006 f85c 	bl	80186c0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012610:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8012612:	68bd      	ldr	r5, [r7, #8]
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	68d4      	ldr	r4, [r2, #12]
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	462b      	mov	r3, r5
 8012620:	460a      	mov	r2, r1
 8012622:	2106      	movs	r1, #6
 8012624:	f7f9 f9de 	bl	800b9e4 <ip_chksum_pseudo>
 8012628:	4603      	mov	r3, r0
 801262a:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6858      	ldr	r0, [r3, #4]
 8012630:	68b9      	ldr	r1, [r7, #8]
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	1d1c      	adds	r4, r3, #4
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	7add      	ldrb	r5, [r3, #11]
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	7a9b      	ldrb	r3, [r3, #10]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	9202      	str	r2, [sp, #8]
 8012642:	2206      	movs	r2, #6
 8012644:	9201      	str	r2, [sp, #4]
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	462b      	mov	r3, r5
 801264a:	4622      	mov	r2, r4
 801264c:	f004 fc9c 	bl	8016f88 <ip4_output_if>
 8012650:	4603      	mov	r3, r0
 8012652:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012654:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3720      	adds	r7, #32
 801265c:	46bd      	mov	sp, r7
 801265e:	bdb0      	pop	{r4, r5, r7, pc}
 8012660:	0801bc8c 	.word	0x0801bc8c
 8012664:	0801c250 	.word	0x0801c250
 8012668:	0801bce0 	.word	0x0801bce0
 801266c:	0801c270 	.word	0x0801c270
 8012670:	0801c290 	.word	0x0801c290
 8012674:	200157c8 	.word	0x200157c8
 8012678:	0801c2b4 	.word	0x0801c2b4

0801267c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801267c:	b5b0      	push	{r4, r5, r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d106      	bne.n	8012698 <tcp_rexmit_rto_prepare+0x1c>
 801268a:	4b31      	ldr	r3, [pc, #196]	@ (8012750 <tcp_rexmit_rto_prepare+0xd4>)
 801268c:	f240 6263 	movw	r2, #1635	@ 0x663
 8012690:	4930      	ldr	r1, [pc, #192]	@ (8012754 <tcp_rexmit_rto_prepare+0xd8>)
 8012692:	4831      	ldr	r0, [pc, #196]	@ (8012758 <tcp_rexmit_rto_prepare+0xdc>)
 8012694:	f006 f814 	bl	80186c0 <iprintf>

  if (pcb->unacked == NULL) {
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801269c:	2b00      	cmp	r3, #0
 801269e:	d102      	bne.n	80126a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80126a0:	f06f 0305 	mvn.w	r3, #5
 80126a4:	e050      	b.n	8012748 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	e00b      	b.n	80126c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f7ff fed2 	bl	8012458 <tcp_output_segment_busy>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d002      	beq.n	80126c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80126ba:	f06f 0305 	mvn.w	r3, #5
 80126be:	e043      	b.n	8012748 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	60fb      	str	r3, [r7, #12]
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d1ef      	bne.n	80126ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ff fec2 	bl	8012458 <tcp_output_segment_busy>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d002      	beq.n	80126e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80126da:	f06f 0305 	mvn.w	r3, #5
 80126de:	e033      	b.n	8012748 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	8b5b      	ldrh	r3, [r3, #26]
 80126fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80126fe:	b29a      	uxth	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	4618      	mov	r0, r3
 801270c:	f7f9 f84d 	bl	800b7aa <lwip_htonl>
 8012710:	4604      	mov	r4, r0
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	461d      	mov	r5, r3
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	899b      	ldrh	r3, [r3, #12]
 801271e:	b29b      	uxth	r3, r3
 8012720:	4618      	mov	r0, r3
 8012722:	f7f9 f82d 	bl	800b780 <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	f003 0303 	and.w	r3, r3, #3
 801272e:	2b00      	cmp	r3, #0
 8012730:	d001      	beq.n	8012736 <tcp_rexmit_rto_prepare+0xba>
 8012732:	2301      	movs	r3, #1
 8012734:	e000      	b.n	8012738 <tcp_rexmit_rto_prepare+0xbc>
 8012736:	2300      	movs	r3, #0
 8012738:	442b      	add	r3, r5
 801273a:	18e2      	adds	r2, r4, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bdb0      	pop	{r4, r5, r7, pc}
 8012750:	0801bc8c 	.word	0x0801bc8c
 8012754:	0801c2c8 	.word	0x0801c2c8
 8012758:	0801bce0 	.word	0x0801bce0

0801275c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <tcp_rexmit_rto_commit+0x1c>
 801276a:	4b0d      	ldr	r3, [pc, #52]	@ (80127a0 <tcp_rexmit_rto_commit+0x44>)
 801276c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012770:	490c      	ldr	r1, [pc, #48]	@ (80127a4 <tcp_rexmit_rto_commit+0x48>)
 8012772:	480d      	ldr	r0, [pc, #52]	@ (80127a8 <tcp_rexmit_rto_commit+0x4c>)
 8012774:	f005 ffa4 	bl	80186c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801277e:	2bff      	cmp	r3, #255	@ 0xff
 8012780:	d007      	beq.n	8012792 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012788:	3301      	adds	r3, #1
 801278a:	b2da      	uxtb	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7ff fc6c 	bl	8012070 <tcp_output>
}
 8012798:	bf00      	nop
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	0801bc8c 	.word	0x0801bc8c
 80127a4:	0801c2ec 	.word	0x0801c2ec
 80127a8:	0801bce0 	.word	0x0801bce0

080127ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d106      	bne.n	80127c8 <tcp_rexmit_rto+0x1c>
 80127ba:	4b0a      	ldr	r3, [pc, #40]	@ (80127e4 <tcp_rexmit_rto+0x38>)
 80127bc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80127c0:	4909      	ldr	r1, [pc, #36]	@ (80127e8 <tcp_rexmit_rto+0x3c>)
 80127c2:	480a      	ldr	r0, [pc, #40]	@ (80127ec <tcp_rexmit_rto+0x40>)
 80127c4:	f005 ff7c 	bl	80186c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7ff ff57 	bl	801267c <tcp_rexmit_rto_prepare>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d102      	bne.n	80127da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7ff ffc1 	bl	801275c <tcp_rexmit_rto_commit>
  }
}
 80127da:	bf00      	nop
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	0801bc8c 	.word	0x0801bc8c
 80127e8:	0801c310 	.word	0x0801c310
 80127ec:	0801bce0 	.word	0x0801bce0

080127f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80127f0:	b590      	push	{r4, r7, lr}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d106      	bne.n	801280c <tcp_rexmit+0x1c>
 80127fe:	4b2f      	ldr	r3, [pc, #188]	@ (80128bc <tcp_rexmit+0xcc>)
 8012800:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012804:	492e      	ldr	r1, [pc, #184]	@ (80128c0 <tcp_rexmit+0xd0>)
 8012806:	482f      	ldr	r0, [pc, #188]	@ (80128c4 <tcp_rexmit+0xd4>)
 8012808:	f005 ff5a 	bl	80186c0 <iprintf>

  if (pcb->unacked == NULL) {
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012810:	2b00      	cmp	r3, #0
 8012812:	d102      	bne.n	801281a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012814:	f06f 0305 	mvn.w	r3, #5
 8012818:	e04c      	b.n	80128b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801281e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012820:	68b8      	ldr	r0, [r7, #8]
 8012822:	f7ff fe19 	bl	8012458 <tcp_output_segment_busy>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801282c:	f06f 0305 	mvn.w	r3, #5
 8012830:	e040      	b.n	80128b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	336c      	adds	r3, #108	@ 0x6c
 801283e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012840:	e002      	b.n	8012848 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d011      	beq.n	8012874 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	f7f8 ffa6 	bl	800b7aa <lwip_htonl>
 801285e:	4604      	mov	r4, r0
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	4618      	mov	r0, r3
 8012868:	f7f8 ff9f 	bl	800b7aa <lwip_htonl>
 801286c:	4603      	mov	r3, r0
 801286e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012870:	2b00      	cmp	r3, #0
 8012872:	dbe6      	blt.n	8012842 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012898:	2bff      	cmp	r3, #255	@ 0xff
 801289a:	d007      	beq.n	80128ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128a2:	3301      	adds	r3, #1
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80128b2:	2300      	movs	r3, #0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd90      	pop	{r4, r7, pc}
 80128bc:	0801bc8c 	.word	0x0801bc8c
 80128c0:	0801c32c 	.word	0x0801c32c
 80128c4:	0801bce0 	.word	0x0801bce0

080128c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d106      	bne.n	80128e4 <tcp_rexmit_fast+0x1c>
 80128d6:	4b2a      	ldr	r3, [pc, #168]	@ (8012980 <tcp_rexmit_fast+0xb8>)
 80128d8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80128dc:	4929      	ldr	r1, [pc, #164]	@ (8012984 <tcp_rexmit_fast+0xbc>)
 80128de:	482a      	ldr	r0, [pc, #168]	@ (8012988 <tcp_rexmit_fast+0xc0>)
 80128e0:	f005 feee 	bl	80186c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d044      	beq.n	8012976 <tcp_rexmit_fast+0xae>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	8b5b      	ldrh	r3, [r3, #26]
 80128f0:	f003 0304 	and.w	r3, r3, #4
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d13e      	bne.n	8012976 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7ff ff79 	bl	80127f0 <tcp_rexmit>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d138      	bne.n	8012976 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012910:	4293      	cmp	r3, r2
 8012912:	bf28      	it	cs
 8012914:	4613      	movcs	r3, r2
 8012916:	b29b      	uxth	r3, r3
 8012918:	0fda      	lsrs	r2, r3, #31
 801291a:	4413      	add	r3, r2
 801291c:	105b      	asrs	r3, r3, #1
 801291e:	b29a      	uxth	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801292c:	461a      	mov	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012932:	005b      	lsls	r3, r3, #1
 8012934:	429a      	cmp	r2, r3
 8012936:	d206      	bcs.n	8012946 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801293c:	005b      	lsls	r3, r3, #1
 801293e:	b29a      	uxth	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012950:	4619      	mov	r1, r3
 8012952:	0049      	lsls	r1, r1, #1
 8012954:	440b      	add	r3, r1
 8012956:	b29b      	uxth	r3, r3
 8012958:	4413      	add	r3, r2
 801295a:	b29a      	uxth	r2, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8b5b      	ldrh	r3, [r3, #26]
 8012966:	f043 0304 	orr.w	r3, r3, #4
 801296a:	b29a      	uxth	r2, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012976:	bf00      	nop
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	0801bc8c 	.word	0x0801bc8c
 8012984:	0801c344 	.word	0x0801c344
 8012988:	0801bce0 	.word	0x0801bce0

0801298c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	607b      	str	r3, [r7, #4]
 8012996:	460b      	mov	r3, r1
 8012998:	817b      	strh	r3, [r7, #10]
 801299a:	4613      	mov	r3, r2
 801299c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801299e:	897a      	ldrh	r2, [r7, #10]
 80129a0:	893b      	ldrh	r3, [r7, #8]
 80129a2:	4413      	add	r3, r2
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	3314      	adds	r3, #20
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129ae:	4619      	mov	r1, r3
 80129b0:	2022      	movs	r0, #34	@ 0x22
 80129b2:	f7fa f8d7 	bl	800cb64 <pbuf_alloc>
 80129b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d04d      	beq.n	8012a5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80129be:	897b      	ldrh	r3, [r7, #10]
 80129c0:	3313      	adds	r3, #19
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	8952      	ldrh	r2, [r2, #10]
 80129c6:	4293      	cmp	r3, r2
 80129c8:	db06      	blt.n	80129d8 <tcp_output_alloc_header_common+0x4c>
 80129ca:	4b26      	ldr	r3, [pc, #152]	@ (8012a64 <tcp_output_alloc_header_common+0xd8>)
 80129cc:	f240 7223 	movw	r2, #1827	@ 0x723
 80129d0:	4925      	ldr	r1, [pc, #148]	@ (8012a68 <tcp_output_alloc_header_common+0xdc>)
 80129d2:	4826      	ldr	r0, [pc, #152]	@ (8012a6c <tcp_output_alloc_header_common+0xe0>)
 80129d4:	f005 fe74 	bl	80186c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80129de:	8c3b      	ldrh	r3, [r7, #32]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7f8 fecd 	bl	800b780 <lwip_htons>
 80129e6:	4603      	mov	r3, r0
 80129e8:	461a      	mov	r2, r3
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80129ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7f8 fec5 	bl	800b780 <lwip_htons>
 80129f6:	4603      	mov	r3, r0
 80129f8:	461a      	mov	r2, r3
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f7f8 fed0 	bl	800b7aa <lwip_htonl>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012a10:	897b      	ldrh	r3, [r7, #10]
 8012a12:	089b      	lsrs	r3, r3, #2
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	3305      	adds	r3, #5
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	031b      	lsls	r3, r3, #12
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	4313      	orrs	r3, r2
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7f8 fea9 	bl	800b780 <lwip_htons>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012a36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f8 fea1 	bl	800b780 <lwip_htons>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	461a      	mov	r2, r3
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	741a      	strb	r2, [r3, #16]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	2200      	movs	r2, #0
 8012a54:	749a      	strb	r2, [r3, #18]
 8012a56:	2200      	movs	r2, #0
 8012a58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012a5a:	697b      	ldr	r3, [r7, #20]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3718      	adds	r7, #24
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	0801bc8c 	.word	0x0801bc8c
 8012a68:	0801c364 	.word	0x0801c364
 8012a6c:	0801bce0 	.word	0x0801bce0

08012a70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012a70:	b5b0      	push	{r4, r5, r7, lr}
 8012a72:	b08a      	sub	sp, #40	@ 0x28
 8012a74:	af04      	add	r7, sp, #16
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	607b      	str	r3, [r7, #4]
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	817b      	strh	r3, [r7, #10]
 8012a7e:	4613      	mov	r3, r2
 8012a80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d106      	bne.n	8012a96 <tcp_output_alloc_header+0x26>
 8012a88:	4b15      	ldr	r3, [pc, #84]	@ (8012ae0 <tcp_output_alloc_header+0x70>)
 8012a8a:	f240 7242 	movw	r2, #1858	@ 0x742
 8012a8e:	4915      	ldr	r1, [pc, #84]	@ (8012ae4 <tcp_output_alloc_header+0x74>)
 8012a90:	4815      	ldr	r0, [pc, #84]	@ (8012ae8 <tcp_output_alloc_header+0x78>)
 8012a92:	f005 fe15 	bl	80186c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	8adb      	ldrh	r3, [r3, #22]
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	8b12      	ldrh	r2, [r2, #24]
 8012aa2:	68f9      	ldr	r1, [r7, #12]
 8012aa4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012aa6:	893d      	ldrh	r5, [r7, #8]
 8012aa8:	897c      	ldrh	r4, [r7, #10]
 8012aaa:	9103      	str	r1, [sp, #12]
 8012aac:	2110      	movs	r1, #16
 8012aae:	9102      	str	r1, [sp, #8]
 8012ab0:	9201      	str	r2, [sp, #4]
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	462a      	mov	r2, r5
 8012ab8:	4621      	mov	r1, r4
 8012aba:	f7ff ff67 	bl	801298c <tcp_output_alloc_header_common>
 8012abe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d006      	beq.n	8012ad4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aca:	68fa      	ldr	r2, [r7, #12]
 8012acc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012ace:	441a      	add	r2, r3
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012ad4:	697b      	ldr	r3, [r7, #20]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3718      	adds	r7, #24
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bdb0      	pop	{r4, r5, r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	0801bc8c 	.word	0x0801bc8c
 8012ae4:	0801c394 	.word	0x0801c394
 8012ae8:	0801bce0 	.word	0x0801bce0

08012aec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b088      	sub	sp, #32
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	4611      	mov	r1, r2
 8012af8:	461a      	mov	r2, r3
 8012afa:	460b      	mov	r3, r1
 8012afc:	71fb      	strb	r3, [r7, #7]
 8012afe:	4613      	mov	r3, r2
 8012b00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d106      	bne.n	8012b1a <tcp_output_fill_options+0x2e>
 8012b0c:	4b12      	ldr	r3, [pc, #72]	@ (8012b58 <tcp_output_fill_options+0x6c>)
 8012b0e:	f240 7256 	movw	r2, #1878	@ 0x756
 8012b12:	4912      	ldr	r1, [pc, #72]	@ (8012b5c <tcp_output_fill_options+0x70>)
 8012b14:	4812      	ldr	r0, [pc, #72]	@ (8012b60 <tcp_output_fill_options+0x74>)
 8012b16:	f005 fdd3 	bl	80186c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	3314      	adds	r3, #20
 8012b24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b26:	8bfb      	ldrh	r3, [r7, #30]
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	79fb      	ldrb	r3, [r7, #7]
 8012b2e:	009b      	lsls	r3, r3, #2
 8012b30:	f003 0304 	and.w	r3, r3, #4
 8012b34:	4413      	add	r3, r2
 8012b36:	3314      	adds	r3, #20
 8012b38:	69ba      	ldr	r2, [r7, #24]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	697a      	ldr	r2, [r7, #20]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d006      	beq.n	8012b50 <tcp_output_fill_options+0x64>
 8012b42:	4b05      	ldr	r3, [pc, #20]	@ (8012b58 <tcp_output_fill_options+0x6c>)
 8012b44:	f240 7275 	movw	r2, #1909	@ 0x775
 8012b48:	4906      	ldr	r1, [pc, #24]	@ (8012b64 <tcp_output_fill_options+0x78>)
 8012b4a:	4805      	ldr	r0, [pc, #20]	@ (8012b60 <tcp_output_fill_options+0x74>)
 8012b4c:	f005 fdb8 	bl	80186c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b50:	bf00      	nop
 8012b52:	3720      	adds	r7, #32
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	0801bc8c 	.word	0x0801bc8c
 8012b5c:	0801c3bc 	.word	0x0801c3bc
 8012b60:	0801bce0 	.word	0x0801bce0
 8012b64:	0801c2b4 	.word	0x0801c2b4

08012b68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b08c      	sub	sp, #48	@ 0x30
 8012b6c:	af04      	add	r7, sp, #16
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d106      	bne.n	8012b8a <tcp_output_control_segment+0x22>
 8012b7c:	4b24      	ldr	r3, [pc, #144]	@ (8012c10 <tcp_output_control_segment+0xa8>)
 8012b7e:	f240 7287 	movw	r2, #1927	@ 0x787
 8012b82:	4924      	ldr	r1, [pc, #144]	@ (8012c14 <tcp_output_control_segment+0xac>)
 8012b84:	4824      	ldr	r0, [pc, #144]	@ (8012c18 <tcp_output_control_segment+0xb0>)
 8012b86:	f005 fd9b 	bl	80186c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b8a:	683a      	ldr	r2, [r7, #0]
 8012b8c:	6879      	ldr	r1, [r7, #4]
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f7fe fad8 	bl	8011144 <tcp_route>
 8012b94:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d102      	bne.n	8012ba2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b9c:	23fc      	movs	r3, #252	@ 0xfc
 8012b9e:	77fb      	strb	r3, [r7, #31]
 8012ba0:	e02c      	b.n	8012bfc <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	891a      	ldrh	r2, [r3, #8]
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2106      	movs	r1, #6
 8012bb4:	68b8      	ldr	r0, [r7, #8]
 8012bb6:	f7f8 ff15 	bl	800b9e4 <ip_chksum_pseudo>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d006      	beq.n	8012bd6 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	7adb      	ldrb	r3, [r3, #11]
 8012bcc:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	7a9b      	ldrb	r3, [r3, #10]
 8012bd2:	777b      	strb	r3, [r7, #29]
 8012bd4:	e003      	b.n	8012bde <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012bd6:	23ff      	movs	r3, #255	@ 0xff
 8012bd8:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012bde:	7fba      	ldrb	r2, [r7, #30]
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	9302      	str	r3, [sp, #8]
 8012be4:	2306      	movs	r3, #6
 8012be6:	9301      	str	r3, [sp, #4]
 8012be8:	7f7b      	ldrb	r3, [r7, #29]
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	4613      	mov	r3, r2
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	6879      	ldr	r1, [r7, #4]
 8012bf2:	68b8      	ldr	r0, [r7, #8]
 8012bf4:	f004 f9c8 	bl	8016f88 <ip4_output_if>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012bfc:	68b8      	ldr	r0, [r7, #8]
 8012bfe:	f7fa fa95 	bl	800d12c <pbuf_free>
  return err;
 8012c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3720      	adds	r7, #32
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	0801bc8c 	.word	0x0801bc8c
 8012c14:	0801c3e4 	.word	0x0801c3e4
 8012c18:	0801bce0 	.word	0x0801bce0

08012c1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012c1c:	b590      	push	{r4, r7, lr}
 8012c1e:	b08b      	sub	sp, #44	@ 0x2c
 8012c20:	af04      	add	r7, sp, #16
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d106      	bne.n	8012c3e <tcp_rst+0x22>
 8012c30:	4b1f      	ldr	r3, [pc, #124]	@ (8012cb0 <tcp_rst+0x94>)
 8012c32:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012c36:	491f      	ldr	r1, [pc, #124]	@ (8012cb4 <tcp_rst+0x98>)
 8012c38:	481f      	ldr	r0, [pc, #124]	@ (8012cb8 <tcp_rst+0x9c>)
 8012c3a:	f005 fd41 	bl	80186c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d106      	bne.n	8012c52 <tcp_rst+0x36>
 8012c44:	4b1a      	ldr	r3, [pc, #104]	@ (8012cb0 <tcp_rst+0x94>)
 8012c46:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012c4a:	491c      	ldr	r1, [pc, #112]	@ (8012cbc <tcp_rst+0xa0>)
 8012c4c:	481a      	ldr	r0, [pc, #104]	@ (8012cb8 <tcp_rst+0x9c>)
 8012c4e:	f005 fd37 	bl	80186c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c52:	2300      	movs	r3, #0
 8012c54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c56:	f646 030b 	movw	r3, #26635	@ 0x680b
 8012c5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c5c:	7dfb      	ldrb	r3, [r7, #23]
 8012c5e:	b29c      	uxth	r4, r3
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	f7f8 fda2 	bl	800b7aa <lwip_htonl>
 8012c66:	4602      	mov	r2, r0
 8012c68:	8abb      	ldrh	r3, [r7, #20]
 8012c6a:	9303      	str	r3, [sp, #12]
 8012c6c:	2314      	movs	r3, #20
 8012c6e:	9302      	str	r3, [sp, #8]
 8012c70:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012c72:	9301      	str	r3, [sp, #4]
 8012c74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	4613      	mov	r3, r2
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f7ff fe84 	bl	801298c <tcp_output_alloc_header_common>
 8012c84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00c      	beq.n	8012ca6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	6939      	ldr	r1, [r7, #16]
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7ff ff2a 	bl	8012aec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	6939      	ldr	r1, [r7, #16]
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7ff ff62 	bl	8012b68 <tcp_output_control_segment>
 8012ca4:	e000      	b.n	8012ca8 <tcp_rst+0x8c>
    return;
 8012ca6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ca8:	371c      	adds	r7, #28
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd90      	pop	{r4, r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	0801bc8c 	.word	0x0801bc8c
 8012cb4:	0801c410 	.word	0x0801c410
 8012cb8:	0801bce0 	.word	0x0801bce0
 8012cbc:	0801c42c 	.word	0x0801c42c

08012cc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012cc0:	b590      	push	{r4, r7, lr}
 8012cc2:	b087      	sub	sp, #28
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <tcp_send_empty_ack+0x24>
 8012cd6:	4b28      	ldr	r3, [pc, #160]	@ (8012d78 <tcp_send_empty_ack+0xb8>)
 8012cd8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012cdc:	4927      	ldr	r1, [pc, #156]	@ (8012d7c <tcp_send_empty_ack+0xbc>)
 8012cde:	4828      	ldr	r0, [pc, #160]	@ (8012d80 <tcp_send_empty_ack+0xc0>)
 8012ce0:	f005 fcee 	bl	80186c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ce4:	7dfb      	ldrb	r3, [r7, #23]
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	f003 0304 	and.w	r3, r3, #4
 8012cee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012cf0:	7d7b      	ldrb	r3, [r7, #21]
 8012cf2:	b29c      	uxth	r4, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7f8 fd56 	bl	800b7aa <lwip_htonl>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2200      	movs	r2, #0
 8012d02:	4621      	mov	r1, r4
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f7ff feb3 	bl	8012a70 <tcp_output_alloc_header>
 8012d0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d109      	bne.n	8012d26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	8b5b      	ldrh	r3, [r3, #26]
 8012d16:	f043 0303 	orr.w	r3, r3, #3
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012d20:	f06f 0301 	mvn.w	r3, #1
 8012d24:	e023      	b.n	8012d6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012d26:	7dbb      	ldrb	r3, [r7, #22]
 8012d28:	7dfa      	ldrb	r2, [r7, #23]
 8012d2a:	6939      	ldr	r1, [r7, #16]
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7ff fedd 	bl	8012aec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	3304      	adds	r3, #4
 8012d38:	6939      	ldr	r1, [r7, #16]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7ff ff14 	bl	8012b68 <tcp_output_control_segment>
 8012d40:	4603      	mov	r3, r0
 8012d42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d007      	beq.n	8012d5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	8b5b      	ldrh	r3, [r3, #26]
 8012d50:	f043 0303 	orr.w	r3, r3, #3
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	835a      	strh	r2, [r3, #26]
 8012d5a:	e006      	b.n	8012d6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8b5b      	ldrh	r3, [r3, #26]
 8012d60:	f023 0303 	bic.w	r3, r3, #3
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	371c      	adds	r7, #28
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd90      	pop	{r4, r7, pc}
 8012d76:	bf00      	nop
 8012d78:	0801bc8c 	.word	0x0801bc8c
 8012d7c:	0801c448 	.word	0x0801c448
 8012d80:	0801bce0 	.word	0x0801bce0

08012d84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d84:	b590      	push	{r4, r7, lr}
 8012d86:	b087      	sub	sp, #28
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d106      	bne.n	8012da4 <tcp_keepalive+0x20>
 8012d96:	4b18      	ldr	r3, [pc, #96]	@ (8012df8 <tcp_keepalive+0x74>)
 8012d98:	f640 0224 	movw	r2, #2084	@ 0x824
 8012d9c:	4917      	ldr	r1, [pc, #92]	@ (8012dfc <tcp_keepalive+0x78>)
 8012d9e:	4818      	ldr	r0, [pc, #96]	@ (8012e00 <tcp_keepalive+0x7c>)
 8012da0:	f005 fc8e 	bl	80186c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012da4:	7dfb      	ldrb	r3, [r7, #23]
 8012da6:	b29c      	uxth	r4, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dac:	3b01      	subs	r3, #1
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 fcfb 	bl	800b7aa <lwip_htonl>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2200      	movs	r2, #0
 8012db8:	4621      	mov	r1, r4
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7ff fe58 	bl	8012a70 <tcp_output_alloc_header>
 8012dc0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dcc:	e010      	b.n	8012df0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012dce:	7dfb      	ldrb	r3, [r7, #23]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	6939      	ldr	r1, [r7, #16]
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7ff fe89 	bl	8012aec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3304      	adds	r3, #4
 8012de0:	6939      	ldr	r1, [r7, #16]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7ff fec0 	bl	8012b68 <tcp_output_control_segment>
 8012de8:	4603      	mov	r3, r0
 8012dea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	371c      	adds	r7, #28
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd90      	pop	{r4, r7, pc}
 8012df8:	0801bc8c 	.word	0x0801bc8c
 8012dfc:	0801c468 	.word	0x0801c468
 8012e00:	0801bce0 	.word	0x0801bce0

08012e04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012e04:	b590      	push	{r4, r7, lr}
 8012e06:	b08b      	sub	sp, #44	@ 0x2c
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d106      	bne.n	8012e26 <tcp_zero_window_probe+0x22>
 8012e18:	4b4c      	ldr	r3, [pc, #304]	@ (8012f4c <tcp_zero_window_probe+0x148>)
 8012e1a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012e1e:	494c      	ldr	r1, [pc, #304]	@ (8012f50 <tcp_zero_window_probe+0x14c>)
 8012e20:	484c      	ldr	r0, [pc, #304]	@ (8012f54 <tcp_zero_window_probe+0x150>)
 8012e22:	f005 fc4d 	bl	80186c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012e32:	2300      	movs	r3, #0
 8012e34:	e086      	b.n	8012f44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8012e3c:	2bff      	cmp	r3, #255	@ 0xff
 8012e3e:	d007      	beq.n	8012e50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8012e46:	3301      	adds	r3, #1
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012e50:	6a3b      	ldr	r3, [r7, #32]
 8012e52:	68db      	ldr	r3, [r3, #12]
 8012e54:	899b      	ldrh	r3, [r3, #12]
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f8 fc91 	bl	800b780 <lwip_htons>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	f003 0301 	and.w	r3, r3, #1
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d005      	beq.n	8012e76 <tcp_zero_window_probe+0x72>
 8012e6a:	6a3b      	ldr	r3, [r7, #32]
 8012e6c:	891b      	ldrh	r3, [r3, #8]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d101      	bne.n	8012e76 <tcp_zero_window_probe+0x72>
 8012e72:	2301      	movs	r3, #1
 8012e74:	e000      	b.n	8012e78 <tcp_zero_window_probe+0x74>
 8012e76:	2300      	movs	r3, #0
 8012e78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012e7a:	7ffb      	ldrb	r3, [r7, #31]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	bf0c      	ite	eq
 8012e80:	2301      	moveq	r3, #1
 8012e82:	2300      	movne	r3, #0
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e8c:	b299      	uxth	r1, r3
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	8bba      	ldrh	r2, [r7, #28]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ff fdea 	bl	8012a70 <tcp_output_alloc_header>
 8012e9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d102      	bne.n	8012eaa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea8:	e04c      	b.n	8012f44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012eb0:	7ffb      	ldrb	r3, [r7, #31]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d011      	beq.n	8012eda <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	899b      	ldrh	r3, [r3, #12]
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	b21b      	sxth	r3, r3
 8012ebe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012ec2:	b21c      	sxth	r4, r3
 8012ec4:	2011      	movs	r0, #17
 8012ec6:	f7f8 fc5b 	bl	800b780 <lwip_htons>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	b21b      	sxth	r3, r3
 8012ece:	4323      	orrs	r3, r4
 8012ed0:	b21b      	sxth	r3, r3
 8012ed2:	b29a      	uxth	r2, r3
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	819a      	strh	r2, [r3, #12]
 8012ed8:	e010      	b.n	8012efc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	3314      	adds	r3, #20
 8012ee0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	6858      	ldr	r0, [r3, #4]
 8012ee6:	6a3b      	ldr	r3, [r7, #32]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	891a      	ldrh	r2, [r3, #8]
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	891b      	ldrh	r3, [r3, #8]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	2201      	movs	r2, #1
 8012ef6:	6939      	ldr	r1, [r7, #16]
 8012ef8:	f7fa fb1e 	bl	800d538 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f8 fc51 	bl	800b7aa <lwip_htonl>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	da02      	bge.n	8012f20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f24:	2200      	movs	r2, #0
 8012f26:	69b9      	ldr	r1, [r7, #24]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff fddf 	bl	8012aec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	3304      	adds	r3, #4
 8012f34:	69b9      	ldr	r1, [r7, #24]
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7ff fe16 	bl	8012b68 <tcp_output_control_segment>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	372c      	adds	r7, #44	@ 0x2c
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd90      	pop	{r4, r7, pc}
 8012f4c:	0801bc8c 	.word	0x0801bc8c
 8012f50:	0801c484 	.word	0x0801c484
 8012f54:	0801bce0 	.word	0x0801bce0

08012f58 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012f60:	f7fa fbd8 	bl	800d714 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012f64:	4b0a      	ldr	r3, [pc, #40]	@ (8012f90 <tcpip_tcp_timer+0x38>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d103      	bne.n	8012f74 <tcpip_tcp_timer+0x1c>
 8012f6c:	4b09      	ldr	r3, [pc, #36]	@ (8012f94 <tcpip_tcp_timer+0x3c>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d005      	beq.n	8012f80 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f74:	2200      	movs	r2, #0
 8012f76:	4908      	ldr	r1, [pc, #32]	@ (8012f98 <tcpip_tcp_timer+0x40>)
 8012f78:	20fa      	movs	r0, #250	@ 0xfa
 8012f7a:	f000 f8f3 	bl	8013164 <sys_timeout>
 8012f7e:	e003      	b.n	8012f88 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012f80:	4b06      	ldr	r3, [pc, #24]	@ (8012f9c <tcpip_tcp_timer+0x44>)
 8012f82:	2200      	movs	r2, #0
 8012f84:	601a      	str	r2, [r3, #0]
  }
}
 8012f86:	bf00      	nop
 8012f88:	bf00      	nop
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	200157d4 	.word	0x200157d4
 8012f94:	200157d8 	.word	0x200157d8
 8012f98:	08012f59 	.word	0x08012f59
 8012f9c:	20015820 	.word	0x20015820

08012fa0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8012fd0 <tcp_timer_needed+0x30>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d10f      	bne.n	8012fcc <tcp_timer_needed+0x2c>
 8012fac:	4b09      	ldr	r3, [pc, #36]	@ (8012fd4 <tcp_timer_needed+0x34>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d103      	bne.n	8012fbc <tcp_timer_needed+0x1c>
 8012fb4:	4b08      	ldr	r3, [pc, #32]	@ (8012fd8 <tcp_timer_needed+0x38>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d007      	beq.n	8012fcc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012fbc:	4b04      	ldr	r3, [pc, #16]	@ (8012fd0 <tcp_timer_needed+0x30>)
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	4905      	ldr	r1, [pc, #20]	@ (8012fdc <tcp_timer_needed+0x3c>)
 8012fc6:	20fa      	movs	r0, #250	@ 0xfa
 8012fc8:	f000 f8cc 	bl	8013164 <sys_timeout>
  }
}
 8012fcc:	bf00      	nop
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	20015820 	.word	0x20015820
 8012fd4:	200157d4 	.word	0x200157d4
 8012fd8:	200157d8 	.word	0x200157d8
 8012fdc:	08012f59 	.word	0x08012f59

08012fe0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012fec:	200a      	movs	r0, #10
 8012fee:	f7f9 f9f5 	bl	800c3dc <memp_malloc>
 8012ff2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d109      	bne.n	801300e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d151      	bne.n	80130a4 <sys_timeout_abs+0xc4>
 8013000:	4b2a      	ldr	r3, [pc, #168]	@ (80130ac <sys_timeout_abs+0xcc>)
 8013002:	22be      	movs	r2, #190	@ 0xbe
 8013004:	492a      	ldr	r1, [pc, #168]	@ (80130b0 <sys_timeout_abs+0xd0>)
 8013006:	482b      	ldr	r0, [pc, #172]	@ (80130b4 <sys_timeout_abs+0xd4>)
 8013008:	f005 fb5a 	bl	80186c0 <iprintf>
    return;
 801300c:	e04a      	b.n	80130a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	2200      	movs	r2, #0
 8013012:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	68ba      	ldr	r2, [r7, #8]
 8013018:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013026:	4b24      	ldr	r3, [pc, #144]	@ (80130b8 <sys_timeout_abs+0xd8>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d103      	bne.n	8013036 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801302e:	4a22      	ldr	r2, [pc, #136]	@ (80130b8 <sys_timeout_abs+0xd8>)
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	6013      	str	r3, [r2, #0]
    return;
 8013034:	e037      	b.n	80130a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	685a      	ldr	r2, [r3, #4]
 801303a:	4b1f      	ldr	r3, [pc, #124]	@ (80130b8 <sys_timeout_abs+0xd8>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	0fdb      	lsrs	r3, r3, #31
 8013044:	f003 0301 	and.w	r3, r3, #1
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d007      	beq.n	801305e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801304e:	4b1a      	ldr	r3, [pc, #104]	@ (80130b8 <sys_timeout_abs+0xd8>)
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013056:	4a18      	ldr	r2, [pc, #96]	@ (80130b8 <sys_timeout_abs+0xd8>)
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	6013      	str	r3, [r2, #0]
 801305c:	e023      	b.n	80130a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801305e:	4b16      	ldr	r3, [pc, #88]	@ (80130b8 <sys_timeout_abs+0xd8>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	617b      	str	r3, [r7, #20]
 8013064:	e01a      	b.n	801309c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d00b      	beq.n	8013086 <sys_timeout_abs+0xa6>
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	685a      	ldr	r2, [r3, #4]
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	0fdb      	lsrs	r3, r3, #31
 801307c:	f003 0301 	and.w	r3, r3, #1
 8013080:	b2db      	uxtb	r3, r3
 8013082:	2b00      	cmp	r3, #0
 8013084:	d007      	beq.n	8013096 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	693a      	ldr	r2, [r7, #16]
 8013092:	601a      	str	r2, [r3, #0]
        break;
 8013094:	e007      	b.n	80130a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	617b      	str	r3, [r7, #20]
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1e1      	bne.n	8013066 <sys_timeout_abs+0x86>
 80130a2:	e000      	b.n	80130a6 <sys_timeout_abs+0xc6>
    return;
 80130a4:	bf00      	nop
      }
    }
  }
}
 80130a6:	3718      	adds	r7, #24
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	0801c4a8 	.word	0x0801c4a8
 80130b0:	0801c4dc 	.word	0x0801c4dc
 80130b4:	0801c51c 	.word	0x0801c51c
 80130b8:	20015818 	.word	0x20015818

080130bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b086      	sub	sp, #24
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	4798      	blx	r3

  now = sys_now();
 80130ce:	f7f2 ff45 	bl	8005f5c <sys_now>
 80130d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013118 <lwip_cyclic_timer+0x5c>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4413      	add	r3, r2
 80130de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80130e0:	68fa      	ldr	r2, [r7, #12]
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	0fdb      	lsrs	r3, r3, #31
 80130e8:	f003 0301 	and.w	r3, r3, #1
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d009      	beq.n	8013106 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	4413      	add	r3, r2
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	4907      	ldr	r1, [pc, #28]	@ (801311c <lwip_cyclic_timer+0x60>)
 80130fe:	4618      	mov	r0, r3
 8013100:	f7ff ff6e 	bl	8012fe0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013104:	e004      	b.n	8013110 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	4904      	ldr	r1, [pc, #16]	@ (801311c <lwip_cyclic_timer+0x60>)
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff ff68 	bl	8012fe0 <sys_timeout_abs>
}
 8013110:	bf00      	nop
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	2001581c 	.word	0x2001581c
 801311c:	080130bd 	.word	0x080130bd

08013120 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013126:	2301      	movs	r3, #1
 8013128:	607b      	str	r3, [r7, #4]
 801312a:	e00e      	b.n	801314a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801312c:	4a0b      	ldr	r2, [pc, #44]	@ (801315c <sys_timeouts_init+0x3c>)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	00db      	lsls	r3, r3, #3
 8013138:	4a08      	ldr	r2, [pc, #32]	@ (801315c <sys_timeouts_init+0x3c>)
 801313a:	4413      	add	r3, r2
 801313c:	461a      	mov	r2, r3
 801313e:	4908      	ldr	r1, [pc, #32]	@ (8013160 <sys_timeouts_init+0x40>)
 8013140:	f000 f810 	bl	8013164 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3301      	adds	r3, #1
 8013148:	607b      	str	r3, [r7, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b04      	cmp	r3, #4
 801314e:	d9ed      	bls.n	801312c <sys_timeouts_init+0xc>
  }
}
 8013150:	bf00      	nop
 8013152:	bf00      	nop
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	080267ac 	.word	0x080267ac
 8013160:	080130bd 	.word	0x080130bd

08013164 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013176:	d306      	bcc.n	8013186 <sys_timeout+0x22>
 8013178:	4b0a      	ldr	r3, [pc, #40]	@ (80131a4 <sys_timeout+0x40>)
 801317a:	f240 1229 	movw	r2, #297	@ 0x129
 801317e:	490a      	ldr	r1, [pc, #40]	@ (80131a8 <sys_timeout+0x44>)
 8013180:	480a      	ldr	r0, [pc, #40]	@ (80131ac <sys_timeout+0x48>)
 8013182:	f005 fa9d 	bl	80186c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013186:	f7f2 fee9 	bl	8005f5c <sys_now>
 801318a:	4602      	mov	r2, r0
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4413      	add	r3, r2
 8013190:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	68b9      	ldr	r1, [r7, #8]
 8013196:	6978      	ldr	r0, [r7, #20]
 8013198:	f7ff ff22 	bl	8012fe0 <sys_timeout_abs>
#endif
}
 801319c:	bf00      	nop
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	0801c4a8 	.word	0x0801c4a8
 80131a8:	0801c544 	.word	0x0801c544
 80131ac:	0801c51c 	.word	0x0801c51c

080131b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80131b6:	f7f2 fed1 	bl	8005f5c <sys_now>
 80131ba:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80131bc:	4b17      	ldr	r3, [pc, #92]	@ (801321c <sys_check_timeouts+0x6c>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d022      	beq.n	801320e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	68fa      	ldr	r2, [r7, #12]
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	0fdb      	lsrs	r3, r3, #31
 80131d2:	f003 0301 	and.w	r3, r3, #1
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d11a      	bne.n	8013212 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a0e      	ldr	r2, [pc, #56]	@ (801321c <sys_check_timeouts+0x6c>)
 80131e2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	689b      	ldr	r3, [r3, #8]
 80131e8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	68db      	ldr	r3, [r3, #12]
 80131ee:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	4a0a      	ldr	r2, [pc, #40]	@ (8013220 <sys_check_timeouts+0x70>)
 80131f6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80131f8:	68b9      	ldr	r1, [r7, #8]
 80131fa:	200a      	movs	r0, #10
 80131fc:	f7f9 f940 	bl	800c480 <memp_free>
    if (handler != NULL) {
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d0da      	beq.n	80131bc <sys_check_timeouts+0xc>
      handler(arg);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6838      	ldr	r0, [r7, #0]
 801320a:	4798      	blx	r3
  do {
 801320c:	e7d6      	b.n	80131bc <sys_check_timeouts+0xc>
      return;
 801320e:	bf00      	nop
 8013210:	e000      	b.n	8013214 <sys_check_timeouts+0x64>
      return;
 8013212:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013214:	3710      	adds	r7, #16
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	20015818 	.word	0x20015818
 8013220:	2001581c 	.word	0x2001581c

08013224 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801322a:	4b16      	ldr	r3, [pc, #88]	@ (8013284 <sys_timeouts_sleeptime+0x60>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d102      	bne.n	8013238 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013232:	f04f 33ff 	mov.w	r3, #4294967295
 8013236:	e020      	b.n	801327a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013238:	f7f2 fe90 	bl	8005f5c <sys_now>
 801323c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801323e:	4b11      	ldr	r3, [pc, #68]	@ (8013284 <sys_timeouts_sleeptime+0x60>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	685a      	ldr	r2, [r3, #4]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	0fdb      	lsrs	r3, r3, #31
 801324a:	f003 0301 	and.w	r3, r3, #1
 801324e:	b2db      	uxtb	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	d001      	beq.n	8013258 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013254:	2300      	movs	r3, #0
 8013256:	e010      	b.n	801327a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013258:	4b0a      	ldr	r3, [pc, #40]	@ (8013284 <sys_timeouts_sleeptime+0x60>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	685a      	ldr	r2, [r3, #4]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	da06      	bge.n	8013278 <sys_timeouts_sleeptime+0x54>
 801326a:	4b07      	ldr	r3, [pc, #28]	@ (8013288 <sys_timeouts_sleeptime+0x64>)
 801326c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013270:	4906      	ldr	r1, [pc, #24]	@ (801328c <sys_timeouts_sleeptime+0x68>)
 8013272:	4807      	ldr	r0, [pc, #28]	@ (8013290 <sys_timeouts_sleeptime+0x6c>)
 8013274:	f005 fa24 	bl	80186c0 <iprintf>
    return ret;
 8013278:	683b      	ldr	r3, [r7, #0]
  }
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	20015818 	.word	0x20015818
 8013288:	0801c4a8 	.word	0x0801c4a8
 801328c:	0801c57c 	.word	0x0801c57c
 8013290:	0801c51c 	.word	0x0801c51c

08013294 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013298:	f005 f912 	bl	80184c0 <rand>
 801329c:	4603      	mov	r3, r0
 801329e:	b29b      	uxth	r3, r3
 80132a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	4b01      	ldr	r3, [pc, #4]	@ (80132b4 <udp_init+0x20>)
 80132ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80132b0:	bf00      	nop
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	2000001c 	.word	0x2000001c

080132b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80132c2:	4b17      	ldr	r3, [pc, #92]	@ (8013320 <udp_new_port+0x68>)
 80132c4:	881b      	ldrh	r3, [r3, #0]
 80132c6:	1c5a      	adds	r2, r3, #1
 80132c8:	b291      	uxth	r1, r2
 80132ca:	4a15      	ldr	r2, [pc, #84]	@ (8013320 <udp_new_port+0x68>)
 80132cc:	8011      	strh	r1, [r2, #0]
 80132ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d103      	bne.n	80132de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80132d6:	4b12      	ldr	r3, [pc, #72]	@ (8013320 <udp_new_port+0x68>)
 80132d8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80132dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132de:	4b11      	ldr	r3, [pc, #68]	@ (8013324 <udp_new_port+0x6c>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	603b      	str	r3, [r7, #0]
 80132e4:	e011      	b.n	801330a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	8a5a      	ldrh	r2, [r3, #18]
 80132ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013320 <udp_new_port+0x68>)
 80132ec:	881b      	ldrh	r3, [r3, #0]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d108      	bne.n	8013304 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80132f2:	88fb      	ldrh	r3, [r7, #6]
 80132f4:	3301      	adds	r3, #1
 80132f6:	80fb      	strh	r3, [r7, #6]
 80132f8:	88fb      	ldrh	r3, [r7, #6]
 80132fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80132fe:	d3e0      	bcc.n	80132c2 <udp_new_port+0xa>
        return 0;
 8013300:	2300      	movs	r3, #0
 8013302:	e007      	b.n	8013314 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	603b      	str	r3, [r7, #0]
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d1ea      	bne.n	80132e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013310:	4b03      	ldr	r3, [pc, #12]	@ (8013320 <udp_new_port+0x68>)
 8013312:	881b      	ldrh	r3, [r3, #0]
}
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	2000001c 	.word	0x2000001c
 8013324:	20015824 	.word	0x20015824

08013328 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	4613      	mov	r3, r2
 8013334:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d105      	bne.n	8013348 <udp_input_local_match+0x20>
 801333c:	4b27      	ldr	r3, [pc, #156]	@ (80133dc <udp_input_local_match+0xb4>)
 801333e:	2287      	movs	r2, #135	@ 0x87
 8013340:	4927      	ldr	r1, [pc, #156]	@ (80133e0 <udp_input_local_match+0xb8>)
 8013342:	4828      	ldr	r0, [pc, #160]	@ (80133e4 <udp_input_local_match+0xbc>)
 8013344:	f005 f9bc 	bl	80186c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d105      	bne.n	801335a <udp_input_local_match+0x32>
 801334e:	4b23      	ldr	r3, [pc, #140]	@ (80133dc <udp_input_local_match+0xb4>)
 8013350:	2288      	movs	r2, #136	@ 0x88
 8013352:	4925      	ldr	r1, [pc, #148]	@ (80133e8 <udp_input_local_match+0xc0>)
 8013354:	4823      	ldr	r0, [pc, #140]	@ (80133e4 <udp_input_local_match+0xbc>)
 8013356:	f005 f9b3 	bl	80186c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	7a1b      	ldrb	r3, [r3, #8]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00b      	beq.n	801337a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	7a1a      	ldrb	r2, [r3, #8]
 8013366:	4b21      	ldr	r3, [pc, #132]	@ (80133ec <udp_input_local_match+0xc4>)
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801336e:	3301      	adds	r3, #1
 8013370:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013372:	429a      	cmp	r2, r3
 8013374:	d001      	beq.n	801337a <udp_input_local_match+0x52>
    return 0;
 8013376:	2300      	movs	r3, #0
 8013378:	e02b      	b.n	80133d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801337a:	79fb      	ldrb	r3, [r7, #7]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d018      	beq.n	80133b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d013      	beq.n	80133ae <udp_input_local_match+0x86>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00f      	beq.n	80133ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801338e:	4b17      	ldr	r3, [pc, #92]	@ (80133ec <udp_input_local_match+0xc4>)
 8013390:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013396:	d00a      	beq.n	80133ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	4b13      	ldr	r3, [pc, #76]	@ (80133ec <udp_input_local_match+0xc4>)
 801339e:	695b      	ldr	r3, [r3, #20]
 80133a0:	405a      	eors	r2, r3
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	3308      	adds	r3, #8
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d110      	bne.n	80133d0 <udp_input_local_match+0xa8>
          return 1;
 80133ae:	2301      	movs	r3, #1
 80133b0:	e00f      	b.n	80133d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d009      	beq.n	80133cc <udp_input_local_match+0xa4>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d005      	beq.n	80133cc <udp_input_local_match+0xa4>
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	4b09      	ldr	r3, [pc, #36]	@ (80133ec <udp_input_local_match+0xc4>)
 80133c6:	695b      	ldr	r3, [r3, #20]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d101      	bne.n	80133d0 <udp_input_local_match+0xa8>
        return 1;
 80133cc:	2301      	movs	r3, #1
 80133ce:	e000      	b.n	80133d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	0801c590 	.word	0x0801c590
 80133e0:	0801c5c0 	.word	0x0801c5c0
 80133e4:	0801c5e4 	.word	0x0801c5e4
 80133e8:	0801c60c 	.word	0x0801c60c
 80133ec:	20009324 	.word	0x20009324

080133f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80133f0:	b590      	push	{r4, r7, lr}
 80133f2:	b08d      	sub	sp, #52	@ 0x34
 80133f4:	af02      	add	r7, sp, #8
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80133fa:	2300      	movs	r3, #0
 80133fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d105      	bne.n	8013410 <udp_input+0x20>
 8013404:	4b87      	ldr	r3, [pc, #540]	@ (8013624 <udp_input+0x234>)
 8013406:	22cf      	movs	r2, #207	@ 0xcf
 8013408:	4987      	ldr	r1, [pc, #540]	@ (8013628 <udp_input+0x238>)
 801340a:	4888      	ldr	r0, [pc, #544]	@ (801362c <udp_input+0x23c>)
 801340c:	f005 f958 	bl	80186c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d105      	bne.n	8013422 <udp_input+0x32>
 8013416:	4b83      	ldr	r3, [pc, #524]	@ (8013624 <udp_input+0x234>)
 8013418:	22d0      	movs	r2, #208	@ 0xd0
 801341a:	4985      	ldr	r1, [pc, #532]	@ (8013630 <udp_input+0x240>)
 801341c:	4883      	ldr	r0, [pc, #524]	@ (801362c <udp_input+0x23c>)
 801341e:	f005 f94f 	bl	80186c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	895b      	ldrh	r3, [r3, #10]
 8013426:	2b07      	cmp	r3, #7
 8013428:	d803      	bhi.n	8013432 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7f9 fe7e 	bl	800d12c <pbuf_free>
    goto end;
 8013430:	e0f0      	b.n	8013614 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013438:	4b7e      	ldr	r3, [pc, #504]	@ (8013634 <udp_input+0x244>)
 801343a:	695b      	ldr	r3, [r3, #20]
 801343c:	4a7d      	ldr	r2, [pc, #500]	@ (8013634 <udp_input+0x244>)
 801343e:	6812      	ldr	r2, [r2, #0]
 8013440:	4611      	mov	r1, r2
 8013442:	4618      	mov	r0, r3
 8013444:	f003 fede 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8013448:	4603      	mov	r3, r0
 801344a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	881b      	ldrh	r3, [r3, #0]
 8013450:	b29b      	uxth	r3, r3
 8013452:	4618      	mov	r0, r3
 8013454:	f7f8 f994 	bl	800b780 <lwip_htons>
 8013458:	4603      	mov	r3, r0
 801345a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	885b      	ldrh	r3, [r3, #2]
 8013460:	b29b      	uxth	r3, r3
 8013462:	4618      	mov	r0, r3
 8013464:	f7f8 f98c 	bl	800b780 <lwip_htons>
 8013468:	4603      	mov	r3, r0
 801346a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801346c:	2300      	movs	r3, #0
 801346e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013470:	2300      	movs	r3, #0
 8013472:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013474:	2300      	movs	r3, #0
 8013476:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013478:	4b6f      	ldr	r3, [pc, #444]	@ (8013638 <udp_input+0x248>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	627b      	str	r3, [r7, #36]	@ 0x24
 801347e:	e054      	b.n	801352a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013482:	8a5b      	ldrh	r3, [r3, #18]
 8013484:	89fa      	ldrh	r2, [r7, #14]
 8013486:	429a      	cmp	r2, r3
 8013488:	d14a      	bne.n	8013520 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801348a:	7cfb      	ldrb	r3, [r7, #19]
 801348c:	461a      	mov	r2, r3
 801348e:	6839      	ldr	r1, [r7, #0]
 8013490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013492:	f7ff ff49 	bl	8013328 <udp_input_local_match>
 8013496:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013498:	2b00      	cmp	r3, #0
 801349a:	d041      	beq.n	8013520 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349e:	7c1b      	ldrb	r3, [r3, #16]
 80134a0:	f003 0304 	and.w	r3, r3, #4
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d11d      	bne.n	80134e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	61fb      	str	r3, [r7, #28]
 80134b2:	e017      	b.n	80134e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80134b4:	7cfb      	ldrb	r3, [r7, #19]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d014      	beq.n	80134e4 <udp_input+0xf4>
 80134ba:	4b5e      	ldr	r3, [pc, #376]	@ (8013634 <udp_input+0x244>)
 80134bc:	695b      	ldr	r3, [r3, #20]
 80134be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c2:	d10f      	bne.n	80134e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	3304      	adds	r3, #4
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d008      	beq.n	80134e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80134d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	3304      	adds	r3, #4
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d101      	bne.n	80134e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80134e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80134e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e6:	8a9b      	ldrh	r3, [r3, #20]
 80134e8:	8a3a      	ldrh	r2, [r7, #16]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d118      	bne.n	8013520 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d005      	beq.n	8013502 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80134f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f8:	685a      	ldr	r2, [r3, #4]
 80134fa:	4b4e      	ldr	r3, [pc, #312]	@ (8013634 <udp_input+0x244>)
 80134fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134fe:	429a      	cmp	r2, r3
 8013500:	d10e      	bne.n	8013520 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013502:	6a3b      	ldr	r3, [r7, #32]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d014      	beq.n	8013532 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350a:	68da      	ldr	r2, [r3, #12]
 801350c:	6a3b      	ldr	r3, [r7, #32]
 801350e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013510:	4b49      	ldr	r3, [pc, #292]	@ (8013638 <udp_input+0x248>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013516:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013518:	4a47      	ldr	r2, [pc, #284]	@ (8013638 <udp_input+0x248>)
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801351e:	e008      	b.n	8013532 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013522:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	627b      	str	r3, [r7, #36]	@ 0x24
 801352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352c:	2b00      	cmp	r3, #0
 801352e:	d1a7      	bne.n	8013480 <udp_input+0x90>
 8013530:	e000      	b.n	8013534 <udp_input+0x144>
        break;
 8013532:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	2b00      	cmp	r3, #0
 8013538:	d101      	bne.n	801353e <udp_input+0x14e>
    pcb = uncon_pcb;
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <udp_input+0x15a>
    for_us = 1;
 8013544:	2301      	movs	r3, #1
 8013546:	76fb      	strb	r3, [r7, #27]
 8013548:	e00a      	b.n	8013560 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	3304      	adds	r3, #4
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	4b38      	ldr	r3, [pc, #224]	@ (8013634 <udp_input+0x244>)
 8013552:	695b      	ldr	r3, [r3, #20]
 8013554:	429a      	cmp	r2, r3
 8013556:	bf0c      	ite	eq
 8013558:	2301      	moveq	r3, #1
 801355a:	2300      	movne	r3, #0
 801355c:	b2db      	uxtb	r3, r3
 801355e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013560:	7efb      	ldrb	r3, [r7, #27]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d052      	beq.n	801360c <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	88db      	ldrh	r3, [r3, #6]
 801356a:	b29b      	uxth	r3, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	d00b      	beq.n	8013588 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	891a      	ldrh	r2, [r3, #8]
 8013574:	4b31      	ldr	r3, [pc, #196]	@ (801363c <udp_input+0x24c>)
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	4b31      	ldr	r3, [pc, #196]	@ (8013640 <udp_input+0x250>)
 801357a:	2111      	movs	r1, #17
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7f8 fa31 	bl	800b9e4 <ip_chksum_pseudo>
 8013582:	4603      	mov	r3, r0
 8013584:	2b00      	cmp	r3, #0
 8013586:	d146      	bne.n	8013616 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013588:	2108      	movs	r1, #8
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7f9 fd48 	bl	800d020 <pbuf_remove_header>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00a      	beq.n	80135ac <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013596:	4b23      	ldr	r3, [pc, #140]	@ (8013624 <udp_input+0x234>)
 8013598:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801359c:	4929      	ldr	r1, [pc, #164]	@ (8013644 <udp_input+0x254>)
 801359e:	4823      	ldr	r0, [pc, #140]	@ (801362c <udp_input+0x23c>)
 80135a0:	f005 f88e 	bl	80186c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7f9 fdc1 	bl	800d12c <pbuf_free>
      goto end;
 80135aa:	e033      	b.n	8013614 <udp_input+0x224>
    }

    if (pcb != NULL) {
 80135ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d012      	beq.n	80135d8 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80135b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d00a      	beq.n	80135d0 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80135ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135bc:	699c      	ldr	r4, [r3, #24]
 80135be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c0:	69d8      	ldr	r0, [r3, #28]
 80135c2:	8a3b      	ldrh	r3, [r7, #16]
 80135c4:	9300      	str	r3, [sp, #0]
 80135c6:	4b1e      	ldr	r3, [pc, #120]	@ (8013640 <udp_input+0x250>)
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80135cc:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80135ce:	e026      	b.n	801361e <udp_input+0x22e>
        pbuf_free(p);
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7f9 fdab 	bl	800d12c <pbuf_free>
        goto end;
 80135d6:	e01d      	b.n	8013614 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80135d8:	7cfb      	ldrb	r3, [r7, #19]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d112      	bne.n	8013604 <udp_input+0x214>
 80135de:	4b15      	ldr	r3, [pc, #84]	@ (8013634 <udp_input+0x244>)
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80135e6:	2be0      	cmp	r3, #224	@ 0xe0
 80135e8:	d00c      	beq.n	8013604 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80135ea:	4b12      	ldr	r3, [pc, #72]	@ (8013634 <udp_input+0x244>)
 80135ec:	899b      	ldrh	r3, [r3, #12]
 80135ee:	3308      	adds	r3, #8
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	b21b      	sxth	r3, r3
 80135f4:	4619      	mov	r1, r3
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7f9 fd85 	bl	800d106 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80135fc:	2103      	movs	r1, #3
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f003 fa46 	bl	8016a90 <icmp_dest_unreach>
      pbuf_free(p);
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7f9 fd91 	bl	800d12c <pbuf_free>
  return;
 801360a:	e008      	b.n	801361e <udp_input+0x22e>
    pbuf_free(p);
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7f9 fd8d 	bl	800d12c <pbuf_free>
  return;
 8013612:	e004      	b.n	801361e <udp_input+0x22e>
 8013614:	e003      	b.n	801361e <udp_input+0x22e>
            goto chkerr;
 8013616:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f7f9 fd87 	bl	800d12c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801361e:	372c      	adds	r7, #44	@ 0x2c
 8013620:	46bd      	mov	sp, r7
 8013622:	bd90      	pop	{r4, r7, pc}
 8013624:	0801c590 	.word	0x0801c590
 8013628:	0801c634 	.word	0x0801c634
 801362c:	0801c5e4 	.word	0x0801c5e4
 8013630:	0801c64c 	.word	0x0801c64c
 8013634:	20009324 	.word	0x20009324
 8013638:	20015824 	.word	0x20015824
 801363c:	20009338 	.word	0x20009338
 8013640:	20009334 	.word	0x20009334
 8013644:	0801c668 	.word	0x0801c668

08013648 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af02      	add	r7, sp, #8
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	607a      	str	r2, [r7, #4]
 8013654:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d109      	bne.n	8013670 <udp_sendto_if+0x28>
 801365c:	4b2e      	ldr	r3, [pc, #184]	@ (8013718 <udp_sendto_if+0xd0>)
 801365e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013662:	492e      	ldr	r1, [pc, #184]	@ (801371c <udp_sendto_if+0xd4>)
 8013664:	482e      	ldr	r0, [pc, #184]	@ (8013720 <udp_sendto_if+0xd8>)
 8013666:	f005 f82b 	bl	80186c0 <iprintf>
 801366a:	f06f 030f 	mvn.w	r3, #15
 801366e:	e04f      	b.n	8013710 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d109      	bne.n	801368a <udp_sendto_if+0x42>
 8013676:	4b28      	ldr	r3, [pc, #160]	@ (8013718 <udp_sendto_if+0xd0>)
 8013678:	f240 2281 	movw	r2, #641	@ 0x281
 801367c:	4929      	ldr	r1, [pc, #164]	@ (8013724 <udp_sendto_if+0xdc>)
 801367e:	4828      	ldr	r0, [pc, #160]	@ (8013720 <udp_sendto_if+0xd8>)
 8013680:	f005 f81e 	bl	80186c0 <iprintf>
 8013684:	f06f 030f 	mvn.w	r3, #15
 8013688:	e042      	b.n	8013710 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d109      	bne.n	80136a4 <udp_sendto_if+0x5c>
 8013690:	4b21      	ldr	r3, [pc, #132]	@ (8013718 <udp_sendto_if+0xd0>)
 8013692:	f240 2282 	movw	r2, #642	@ 0x282
 8013696:	4924      	ldr	r1, [pc, #144]	@ (8013728 <udp_sendto_if+0xe0>)
 8013698:	4821      	ldr	r0, [pc, #132]	@ (8013720 <udp_sendto_if+0xd8>)
 801369a:	f005 f811 	bl	80186c0 <iprintf>
 801369e:	f06f 030f 	mvn.w	r3, #15
 80136a2:	e035      	b.n	8013710 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80136a4:	6a3b      	ldr	r3, [r7, #32]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d109      	bne.n	80136be <udp_sendto_if+0x76>
 80136aa:	4b1b      	ldr	r3, [pc, #108]	@ (8013718 <udp_sendto_if+0xd0>)
 80136ac:	f240 2283 	movw	r2, #643	@ 0x283
 80136b0:	491e      	ldr	r1, [pc, #120]	@ (801372c <udp_sendto_if+0xe4>)
 80136b2:	481b      	ldr	r0, [pc, #108]	@ (8013720 <udp_sendto_if+0xd8>)
 80136b4:	f005 f804 	bl	80186c0 <iprintf>
 80136b8:	f06f 030f 	mvn.w	r3, #15
 80136bc:	e028      	b.n	8013710 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d009      	beq.n	80136d8 <udp_sendto_if+0x90>
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d005      	beq.n	80136d8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136d4:	2be0      	cmp	r3, #224	@ 0xe0
 80136d6:	d103      	bne.n	80136e0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80136d8:	6a3b      	ldr	r3, [r7, #32]
 80136da:	3304      	adds	r3, #4
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	e00b      	b.n	80136f8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	6a3b      	ldr	r3, [r7, #32]
 80136e6:	3304      	adds	r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d002      	beq.n	80136f4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80136ee:	f06f 0303 	mvn.w	r3, #3
 80136f2:	e00d      	b.n	8013710 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80136f8:	887a      	ldrh	r2, [r7, #2]
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	9301      	str	r3, [sp, #4]
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	4613      	mov	r3, r2
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	68b9      	ldr	r1, [r7, #8]
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	f000 f811 	bl	8013730 <udp_sendto_if_src>
 801370e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013710:	4618      	mov	r0, r3
 8013712:	3718      	adds	r7, #24
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}
 8013718:	0801c590 	.word	0x0801c590
 801371c:	0801c704 	.word	0x0801c704
 8013720:	0801c5e4 	.word	0x0801c5e4
 8013724:	0801c720 	.word	0x0801c720
 8013728:	0801c73c 	.word	0x0801c73c
 801372c:	0801c75c 	.word	0x0801c75c

08013730 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b08c      	sub	sp, #48	@ 0x30
 8013734:	af04      	add	r7, sp, #16
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
 801373c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d109      	bne.n	8013758 <udp_sendto_if_src+0x28>
 8013744:	4b72      	ldr	r3, [pc, #456]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 8013746:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801374a:	4972      	ldr	r1, [pc, #456]	@ (8013914 <udp_sendto_if_src+0x1e4>)
 801374c:	4872      	ldr	r0, [pc, #456]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 801374e:	f004 ffb7 	bl	80186c0 <iprintf>
 8013752:	f06f 030f 	mvn.w	r3, #15
 8013756:	e0d6      	b.n	8013906 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d109      	bne.n	8013772 <udp_sendto_if_src+0x42>
 801375e:	4b6c      	ldr	r3, [pc, #432]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 8013760:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013764:	496d      	ldr	r1, [pc, #436]	@ (801391c <udp_sendto_if_src+0x1ec>)
 8013766:	486c      	ldr	r0, [pc, #432]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 8013768:	f004 ffaa 	bl	80186c0 <iprintf>
 801376c:	f06f 030f 	mvn.w	r3, #15
 8013770:	e0c9      	b.n	8013906 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d109      	bne.n	801378c <udp_sendto_if_src+0x5c>
 8013778:	4b65      	ldr	r3, [pc, #404]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 801377a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801377e:	4968      	ldr	r1, [pc, #416]	@ (8013920 <udp_sendto_if_src+0x1f0>)
 8013780:	4865      	ldr	r0, [pc, #404]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 8013782:	f004 ff9d 	bl	80186c0 <iprintf>
 8013786:	f06f 030f 	mvn.w	r3, #15
 801378a:	e0bc      	b.n	8013906 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378e:	2b00      	cmp	r3, #0
 8013790:	d109      	bne.n	80137a6 <udp_sendto_if_src+0x76>
 8013792:	4b5f      	ldr	r3, [pc, #380]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 8013794:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013798:	4962      	ldr	r1, [pc, #392]	@ (8013924 <udp_sendto_if_src+0x1f4>)
 801379a:	485f      	ldr	r0, [pc, #380]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 801379c:	f004 ff90 	bl	80186c0 <iprintf>
 80137a0:	f06f 030f 	mvn.w	r3, #15
 80137a4:	e0af      	b.n	8013906 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80137a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d109      	bne.n	80137c0 <udp_sendto_if_src+0x90>
 80137ac:	4b58      	ldr	r3, [pc, #352]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 80137ae:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80137b2:	495d      	ldr	r1, [pc, #372]	@ (8013928 <udp_sendto_if_src+0x1f8>)
 80137b4:	4858      	ldr	r0, [pc, #352]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 80137b6:	f004 ff83 	bl	80186c0 <iprintf>
 80137ba:	f06f 030f 	mvn.w	r3, #15
 80137be:	e0a2      	b.n	8013906 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	8a5b      	ldrh	r3, [r3, #18]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10f      	bne.n	80137e8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80137c8:	68f9      	ldr	r1, [r7, #12]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	8a5b      	ldrh	r3, [r3, #18]
 80137ce:	461a      	mov	r2, r3
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f000 f8ad 	bl	8013930 <udp_bind>
 80137d6:	4603      	mov	r3, r0
 80137d8:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 80137da:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d002      	beq.n	80137e8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80137e2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80137e6:	e08e      	b.n	8013906 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	891b      	ldrh	r3, [r3, #8]
 80137ec:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80137f0:	4293      	cmp	r3, r2
 80137f2:	d902      	bls.n	80137fa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80137f4:	f04f 33ff 	mov.w	r3, #4294967295
 80137f8:	e085      	b.n	8013906 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80137fa:	2108      	movs	r1, #8
 80137fc:	68b8      	ldr	r0, [r7, #8]
 80137fe:	f7f9 fbff 	bl	800d000 <pbuf_add_header>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d015      	beq.n	8013834 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013808:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801380c:	2108      	movs	r1, #8
 801380e:	2022      	movs	r0, #34	@ 0x22
 8013810:	f7f9 f9a8 	bl	800cb64 <pbuf_alloc>
 8013814:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801381c:	f04f 33ff 	mov.w	r3, #4294967295
 8013820:	e071      	b.n	8013906 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	891b      	ldrh	r3, [r3, #8]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d006      	beq.n	8013838 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801382a:	68b9      	ldr	r1, [r7, #8]
 801382c:	69f8      	ldr	r0, [r7, #28]
 801382e:	f7f9 fda1 	bl	800d374 <pbuf_chain>
 8013832:	e001      	b.n	8013838 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	895b      	ldrh	r3, [r3, #10]
 801383c:	2b07      	cmp	r3, #7
 801383e:	d806      	bhi.n	801384e <udp_sendto_if_src+0x11e>
 8013840:	4b33      	ldr	r3, [pc, #204]	@ (8013910 <udp_sendto_if_src+0x1e0>)
 8013842:	f240 320d 	movw	r2, #781	@ 0x30d
 8013846:	4939      	ldr	r1, [pc, #228]	@ (801392c <udp_sendto_if_src+0x1fc>)
 8013848:	4833      	ldr	r0, [pc, #204]	@ (8013918 <udp_sendto_if_src+0x1e8>)
 801384a:	f004 ff39 	bl	80186c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801384e:	69fb      	ldr	r3, [r7, #28]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	8a5b      	ldrh	r3, [r3, #18]
 8013858:	4618      	mov	r0, r3
 801385a:	f7f7 ff91 	bl	800b780 <lwip_htons>
 801385e:	4603      	mov	r3, r0
 8013860:	461a      	mov	r2, r3
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013866:	887b      	ldrh	r3, [r7, #2]
 8013868:	4618      	mov	r0, r3
 801386a:	f7f7 ff89 	bl	800b780 <lwip_htons>
 801386e:	4603      	mov	r3, r0
 8013870:	461a      	mov	r2, r3
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	2200      	movs	r2, #0
 801387a:	719a      	strb	r2, [r3, #6]
 801387c:	2200      	movs	r2, #0
 801387e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	891b      	ldrh	r3, [r3, #8]
 8013884:	4618      	mov	r0, r3
 8013886:	f7f7 ff7b 	bl	800b780 <lwip_htons>
 801388a:	4603      	mov	r3, r0
 801388c:	461a      	mov	r2, r3
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	7c1b      	ldrb	r3, [r3, #16]
 8013896:	f003 0301 	and.w	r3, r3, #1
 801389a:	2b00      	cmp	r3, #0
 801389c:	d113      	bne.n	80138c6 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	891a      	ldrh	r2, [r3, #8]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a8:	2111      	movs	r1, #17
 80138aa:	69f8      	ldr	r0, [r7, #28]
 80138ac:	f7f8 f89a 	bl	800b9e4 <ip_chksum_pseudo>
 80138b0:	4603      	mov	r3, r0
 80138b2:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 80138b4:	8b7b      	ldrh	r3, [r7, #26]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d102      	bne.n	80138c0 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 80138ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80138be:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	8b7a      	ldrh	r2, [r7, #26]
 80138c4:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80138c6:	2311      	movs	r3, #17
 80138c8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	7adb      	ldrb	r3, [r3, #11]
 80138ce:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	7a9b      	ldrb	r3, [r3, #10]
 80138d4:	7cb9      	ldrb	r1, [r7, #18]
 80138d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138d8:	9202      	str	r2, [sp, #8]
 80138da:	7cfa      	ldrb	r2, [r7, #19]
 80138dc:	9201      	str	r2, [sp, #4]
 80138de:	9300      	str	r3, [sp, #0]
 80138e0:	460b      	mov	r3, r1
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80138e6:	69f8      	ldr	r0, [r7, #28]
 80138e8:	f003 fb78 	bl	8016fdc <ip4_output_if_src>
 80138ec:	4603      	mov	r3, r0
 80138ee:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80138f0:	69fa      	ldr	r2, [r7, #28]
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d004      	beq.n	8013902 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 80138f8:	69f8      	ldr	r0, [r7, #28]
 80138fa:	f7f9 fc17 	bl	800d12c <pbuf_free>
    q = NULL;
 80138fe:	2300      	movs	r3, #0
 8013900:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013902:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3720      	adds	r7, #32
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	0801c590 	.word	0x0801c590
 8013914:	0801c77c 	.word	0x0801c77c
 8013918:	0801c5e4 	.word	0x0801c5e4
 801391c:	0801c79c 	.word	0x0801c79c
 8013920:	0801c7bc 	.word	0x0801c7bc
 8013924:	0801c7e0 	.word	0x0801c7e0
 8013928:	0801c804 	.word	0x0801c804
 801392c:	0801c828 	.word	0x0801c828

08013930 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	4613      	mov	r3, r2
 801393c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d101      	bne.n	8013948 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013944:	4b39      	ldr	r3, [pc, #228]	@ (8013a2c <udp_bind+0xfc>)
 8013946:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d109      	bne.n	8013962 <udp_bind+0x32>
 801394e:	4b38      	ldr	r3, [pc, #224]	@ (8013a30 <udp_bind+0x100>)
 8013950:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013954:	4937      	ldr	r1, [pc, #220]	@ (8013a34 <udp_bind+0x104>)
 8013956:	4838      	ldr	r0, [pc, #224]	@ (8013a38 <udp_bind+0x108>)
 8013958:	f004 feb2 	bl	80186c0 <iprintf>
 801395c:	f06f 030f 	mvn.w	r3, #15
 8013960:	e060      	b.n	8013a24 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013962:	2300      	movs	r3, #0
 8013964:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013966:	4b35      	ldr	r3, [pc, #212]	@ (8013a3c <udp_bind+0x10c>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	617b      	str	r3, [r7, #20]
 801396c:	e009      	b.n	8013982 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	429a      	cmp	r2, r3
 8013974:	d102      	bne.n	801397c <udp_bind+0x4c>
      rebind = 1;
 8013976:	2301      	movs	r3, #1
 8013978:	74fb      	strb	r3, [r7, #19]
      break;
 801397a:	e005      	b.n	8013988 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	617b      	str	r3, [r7, #20]
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d1f2      	bne.n	801396e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013988:	88fb      	ldrh	r3, [r7, #6]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d109      	bne.n	80139a2 <udp_bind+0x72>
    port = udp_new_port();
 801398e:	f7ff fc93 	bl	80132b8 <udp_new_port>
 8013992:	4603      	mov	r3, r0
 8013994:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013996:	88fb      	ldrh	r3, [r7, #6]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d12c      	bne.n	80139f6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801399c:	f06f 0307 	mvn.w	r3, #7
 80139a0:	e040      	b.n	8013a24 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139a2:	4b26      	ldr	r3, [pc, #152]	@ (8013a3c <udp_bind+0x10c>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	617b      	str	r3, [r7, #20]
 80139a8:	e022      	b.n	80139f0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80139aa:	68fa      	ldr	r2, [r7, #12]
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d01b      	beq.n	80139ea <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	8a5b      	ldrh	r3, [r3, #18]
 80139b6:	88fa      	ldrh	r2, [r7, #6]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d116      	bne.n	80139ea <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d00d      	beq.n	80139e4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00a      	beq.n	80139e4 <udp_bind+0xb4>
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d006      	beq.n	80139e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80139d6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d003      	beq.n	80139e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d102      	bne.n	80139ea <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80139e4:	f06f 0307 	mvn.w	r3, #7
 80139e8:	e01c      	b.n	8013a24 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	617b      	str	r3, [r7, #20]
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d1d9      	bne.n	80139aa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d002      	beq.n	8013a02 <udp_bind+0xd2>
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	e000      	b.n	8013a04 <udp_bind+0xd4>
 8013a02:	2300      	movs	r3, #0
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	88fa      	ldrh	r2, [r7, #6]
 8013a0c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013a0e:	7cfb      	ldrb	r3, [r7, #19]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d106      	bne.n	8013a22 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013a14:	4b09      	ldr	r3, [pc, #36]	@ (8013a3c <udp_bind+0x10c>)
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013a1c:	4a07      	ldr	r2, [pc, #28]	@ (8013a3c <udp_bind+0x10c>)
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	080267d4 	.word	0x080267d4
 8013a30:	0801c590 	.word	0x0801c590
 8013a34:	0801c858 	.word	0x0801c858
 8013a38:	0801c5e4 	.word	0x0801c5e4
 8013a3c:	20015824 	.word	0x20015824

08013a40 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b086      	sub	sp, #24
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d109      	bne.n	8013a68 <udp_connect+0x28>
 8013a54:	4b2c      	ldr	r3, [pc, #176]	@ (8013b08 <udp_connect+0xc8>)
 8013a56:	f240 4235 	movw	r2, #1077	@ 0x435
 8013a5a:	492c      	ldr	r1, [pc, #176]	@ (8013b0c <udp_connect+0xcc>)
 8013a5c:	482c      	ldr	r0, [pc, #176]	@ (8013b10 <udp_connect+0xd0>)
 8013a5e:	f004 fe2f 	bl	80186c0 <iprintf>
 8013a62:	f06f 030f 	mvn.w	r3, #15
 8013a66:	e04b      	b.n	8013b00 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d109      	bne.n	8013a82 <udp_connect+0x42>
 8013a6e:	4b26      	ldr	r3, [pc, #152]	@ (8013b08 <udp_connect+0xc8>)
 8013a70:	f240 4236 	movw	r2, #1078	@ 0x436
 8013a74:	4927      	ldr	r1, [pc, #156]	@ (8013b14 <udp_connect+0xd4>)
 8013a76:	4826      	ldr	r0, [pc, #152]	@ (8013b10 <udp_connect+0xd0>)
 8013a78:	f004 fe22 	bl	80186c0 <iprintf>
 8013a7c:	f06f 030f 	mvn.w	r3, #15
 8013a80:	e03e      	b.n	8013b00 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	8a5b      	ldrh	r3, [r3, #18]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d10f      	bne.n	8013aaa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013a8a:	68f9      	ldr	r1, [r7, #12]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	8a5b      	ldrh	r3, [r3, #18]
 8013a90:	461a      	mov	r2, r3
 8013a92:	68f8      	ldr	r0, [r7, #12]
 8013a94:	f7ff ff4c 	bl	8013930 <udp_bind>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <udp_connect+0x6a>
      return err;
 8013aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013aa8:	e02a      	b.n	8013b00 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <udp_connect+0x76>
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	e000      	b.n	8013ab8 <udp_connect+0x78>
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	88fa      	ldrh	r2, [r7, #6]
 8013ac0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	7c1b      	ldrb	r3, [r3, #16]
 8013ac6:	f043 0304 	orr.w	r3, r3, #4
 8013aca:	b2da      	uxtb	r2, r3
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ad0:	4b11      	ldr	r3, [pc, #68]	@ (8013b18 <udp_connect+0xd8>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	617b      	str	r3, [r7, #20]
 8013ad6:	e008      	b.n	8013aea <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d101      	bne.n	8013ae4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	e00d      	b.n	8013b00 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	617b      	str	r3, [r7, #20]
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d1f3      	bne.n	8013ad8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013af0:	4b09      	ldr	r3, [pc, #36]	@ (8013b18 <udp_connect+0xd8>)
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013af8:	4a07      	ldr	r2, [pc, #28]	@ (8013b18 <udp_connect+0xd8>)
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013afe:	2300      	movs	r3, #0
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	0801c590 	.word	0x0801c590
 8013b0c:	0801c870 	.word	0x0801c870
 8013b10:	0801c5e4 	.word	0x0801c5e4
 8013b14:	0801c88c 	.word	0x0801c88c
 8013b18:	20015824 	.word	0x20015824

08013b1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d107      	bne.n	8013b3e <udp_recv+0x22>
 8013b2e:	4b08      	ldr	r3, [pc, #32]	@ (8013b50 <udp_recv+0x34>)
 8013b30:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013b34:	4907      	ldr	r1, [pc, #28]	@ (8013b54 <udp_recv+0x38>)
 8013b36:	4808      	ldr	r0, [pc, #32]	@ (8013b58 <udp_recv+0x3c>)
 8013b38:	f004 fdc2 	bl	80186c0 <iprintf>
 8013b3c:	e005      	b.n	8013b4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	61da      	str	r2, [r3, #28]
}
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	0801c590 	.word	0x0801c590
 8013b54:	0801c8c4 	.word	0x0801c8c4
 8013b58:	0801c5e4 	.word	0x0801c5e4

08013b5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d107      	bne.n	8013b7a <udp_remove+0x1e>
 8013b6a:	4b19      	ldr	r3, [pc, #100]	@ (8013bd0 <udp_remove+0x74>)
 8013b6c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013b70:	4918      	ldr	r1, [pc, #96]	@ (8013bd4 <udp_remove+0x78>)
 8013b72:	4819      	ldr	r0, [pc, #100]	@ (8013bd8 <udp_remove+0x7c>)
 8013b74:	f004 fda4 	bl	80186c0 <iprintf>
 8013b78:	e026      	b.n	8013bc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013b7a:	4b18      	ldr	r3, [pc, #96]	@ (8013bdc <udp_remove+0x80>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d105      	bne.n	8013b90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013b84:	4b15      	ldr	r3, [pc, #84]	@ (8013bdc <udp_remove+0x80>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	4a14      	ldr	r2, [pc, #80]	@ (8013bdc <udp_remove+0x80>)
 8013b8c:	6013      	str	r3, [r2, #0]
 8013b8e:	e017      	b.n	8013bc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013b90:	4b12      	ldr	r3, [pc, #72]	@ (8013bdc <udp_remove+0x80>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	60fb      	str	r3, [r7, #12]
 8013b96:	e010      	b.n	8013bba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d009      	beq.n	8013bb4 <udp_remove+0x58>
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	687a      	ldr	r2, [r7, #4]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d104      	bne.n	8013bb4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	68da      	ldr	r2, [r3, #12]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	60da      	str	r2, [r3, #12]
        break;
 8013bb2:	e005      	b.n	8013bc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d1eb      	bne.n	8013b98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013bc0:	6879      	ldr	r1, [r7, #4]
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	f7f8 fc5c 	bl	800c480 <memp_free>
}
 8013bc8:	3710      	adds	r7, #16
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	0801c590 	.word	0x0801c590
 8013bd4:	0801c8dc 	.word	0x0801c8dc
 8013bd8:	0801c5e4 	.word	0x0801c5e4
 8013bdc:	20015824 	.word	0x20015824

08013be0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013be6:	2000      	movs	r0, #0
 8013be8:	f7f8 fbf8 	bl	800c3dc <memp_malloc>
 8013bec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d007      	beq.n	8013c04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013bf4:	2220      	movs	r2, #32
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f004 fe00 	bl	80187fe <memset>
    pcb->ttl = UDP_TTL;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	22ff      	movs	r2, #255	@ 0xff
 8013c02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013c04:	687b      	ldr	r3, [r7, #4]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3708      	adds	r7, #8
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}

08013c0e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013c0e:	b580      	push	{r7, lr}
 8013c10:	b084      	sub	sp, #16
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	4603      	mov	r3, r0
 8013c16:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013c18:	f7ff ffe2 	bl	8013be0 <udp_new>
 8013c1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b085      	sub	sp, #20
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d01e      	beq.n	8013c76 <udp_netif_ip_addr_changed+0x4e>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d01a      	beq.n	8013c76 <udp_netif_ip_addr_changed+0x4e>
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d017      	beq.n	8013c76 <udp_netif_ip_addr_changed+0x4e>
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d013      	beq.n	8013c76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c84 <udp_netif_ip_addr_changed+0x5c>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	60fb      	str	r3, [r7, #12]
 8013c54:	e00c      	b.n	8013c70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d103      	bne.n	8013c6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	60fb      	str	r3, [r7, #12]
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d1ef      	bne.n	8013c56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013c76:	bf00      	nop
 8013c78:	3714      	adds	r7, #20
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	20015824 	.word	0x20015824

08013c88 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013c8c:	4b20      	ldr	r3, [pc, #128]	@ (8013d10 <dhcp_inc_pcb_refcount+0x88>)
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d133      	bne.n	8013cfc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013c94:	4b1f      	ldr	r3, [pc, #124]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d005      	beq.n	8013ca8 <dhcp_inc_pcb_refcount+0x20>
 8013c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8013d18 <dhcp_inc_pcb_refcount+0x90>)
 8013c9e:	22e5      	movs	r2, #229	@ 0xe5
 8013ca0:	491e      	ldr	r1, [pc, #120]	@ (8013d1c <dhcp_inc_pcb_refcount+0x94>)
 8013ca2:	481f      	ldr	r0, [pc, #124]	@ (8013d20 <dhcp_inc_pcb_refcount+0x98>)
 8013ca4:	f004 fd0c 	bl	80186c0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013ca8:	f7ff ff9a 	bl	8013be0 <udp_new>
 8013cac:	4603      	mov	r3, r0
 8013cae:	4a19      	ldr	r2, [pc, #100]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cb0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013cb2:	4b18      	ldr	r3, [pc, #96]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d102      	bne.n	8013cc0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013cba:	f04f 33ff 	mov.w	r3, #4294967295
 8013cbe:	e024      	b.n	8013d0a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013cc0:	4b14      	ldr	r3, [pc, #80]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	7a5a      	ldrb	r2, [r3, #9]
 8013cc6:	4b13      	ldr	r3, [pc, #76]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f042 0220 	orr.w	r2, r2, #32
 8013cce:	b2d2      	uxtb	r2, r2
 8013cd0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013cd2:	4b10      	ldr	r3, [pc, #64]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2244      	movs	r2, #68	@ 0x44
 8013cd8:	4912      	ldr	r1, [pc, #72]	@ (8013d24 <dhcp_inc_pcb_refcount+0x9c>)
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7ff fe28 	bl	8013930 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2243      	movs	r2, #67	@ 0x43
 8013ce6:	490f      	ldr	r1, [pc, #60]	@ (8013d24 <dhcp_inc_pcb_refcount+0x9c>)
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff fea9 	bl	8013a40 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013cee:	4b09      	ldr	r3, [pc, #36]	@ (8013d14 <dhcp_inc_pcb_refcount+0x8c>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	490c      	ldr	r1, [pc, #48]	@ (8013d28 <dhcp_inc_pcb_refcount+0xa0>)
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff ff10 	bl	8013b1c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013cfc:	4b04      	ldr	r3, [pc, #16]	@ (8013d10 <dhcp_inc_pcb_refcount+0x88>)
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	3301      	adds	r3, #1
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	4b02      	ldr	r3, [pc, #8]	@ (8013d10 <dhcp_inc_pcb_refcount+0x88>)
 8013d06:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013d08:	2300      	movs	r3, #0
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	20015854 	.word	0x20015854
 8013d14:	20015850 	.word	0x20015850
 8013d18:	0801c8f4 	.word	0x0801c8f4
 8013d1c:	0801c92c 	.word	0x0801c92c
 8013d20:	0801c954 	.word	0x0801c954
 8013d24:	080267d4 	.word	0x080267d4
 8013d28:	080155b1 	.word	0x080155b1

08013d2c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013d30:	4b0e      	ldr	r3, [pc, #56]	@ (8013d6c <dhcp_dec_pcb_refcount+0x40>)
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d105      	bne.n	8013d44 <dhcp_dec_pcb_refcount+0x18>
 8013d38:	4b0d      	ldr	r3, [pc, #52]	@ (8013d70 <dhcp_dec_pcb_refcount+0x44>)
 8013d3a:	22ff      	movs	r2, #255	@ 0xff
 8013d3c:	490d      	ldr	r1, [pc, #52]	@ (8013d74 <dhcp_dec_pcb_refcount+0x48>)
 8013d3e:	480e      	ldr	r0, [pc, #56]	@ (8013d78 <dhcp_dec_pcb_refcount+0x4c>)
 8013d40:	f004 fcbe 	bl	80186c0 <iprintf>
  dhcp_pcb_refcount--;
 8013d44:	4b09      	ldr	r3, [pc, #36]	@ (8013d6c <dhcp_dec_pcb_refcount+0x40>)
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	3b01      	subs	r3, #1
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	4b07      	ldr	r3, [pc, #28]	@ (8013d6c <dhcp_dec_pcb_refcount+0x40>)
 8013d4e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013d50:	4b06      	ldr	r3, [pc, #24]	@ (8013d6c <dhcp_dec_pcb_refcount+0x40>)
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d107      	bne.n	8013d68 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013d58:	4b08      	ldr	r3, [pc, #32]	@ (8013d7c <dhcp_dec_pcb_refcount+0x50>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff fefd 	bl	8013b5c <udp_remove>
    dhcp_pcb = NULL;
 8013d62:	4b06      	ldr	r3, [pc, #24]	@ (8013d7c <dhcp_dec_pcb_refcount+0x50>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	601a      	str	r2, [r3, #0]
  }
}
 8013d68:	bf00      	nop
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	20015854 	.word	0x20015854
 8013d70:	0801c8f4 	.word	0x0801c8f4
 8013d74:	0801c97c 	.word	0x0801c97c
 8013d78:	0801c954 	.word	0x0801c954
 8013d7c:	20015850 	.word	0x20015850

08013d80 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013d8e:	210c      	movs	r1, #12
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f001 f84f 	bl	8014e34 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013d96:	4b06      	ldr	r3, [pc, #24]	@ (8013db0 <dhcp_handle_nak+0x30>)
 8013d98:	4a05      	ldr	r2, [pc, #20]	@ (8013db0 <dhcp_handle_nak+0x30>)
 8013d9a:	4905      	ldr	r1, [pc, #20]	@ (8013db0 <dhcp_handle_nak+0x30>)
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7f8 fd11 	bl	800c7c4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fc48 	bl	8014638 <dhcp_discover>
}
 8013da8:	bf00      	nop
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	080267d4 	.word	0x080267d4

08013db4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dc0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013dc2:	2108      	movs	r1, #8
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f001 f835 	bl	8014e34 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	331c      	adds	r3, #28
 8013dce:	2200      	movs	r2, #0
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f002 fb36 	bl	8016444 <etharp_query>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	799b      	ldrb	r3, [r3, #6]
 8013de0:	2bff      	cmp	r3, #255	@ 0xff
 8013de2:	d005      	beq.n	8013df0 <dhcp_check+0x3c>
    dhcp->tries++;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	799b      	ldrb	r3, [r3, #6]
 8013de8:	3301      	adds	r3, #1
 8013dea:	b2da      	uxtb	r2, r3
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013df0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013df4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013df6:	893b      	ldrh	r3, [r7, #8]
 8013df8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013dfc:	4a06      	ldr	r2, [pc, #24]	@ (8013e18 <dhcp_check+0x64>)
 8013dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8013e02:	1152      	asrs	r2, r2, #5
 8013e04:	17db      	asrs	r3, r3, #31
 8013e06:	1ad3      	subs	r3, r2, r3
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013e0e:	bf00      	nop
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	10624dd3 	.word	0x10624dd3

08013e1c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e60 <dhcp_handle_offer+0x44>)
 8013e2e:	789b      	ldrb	r3, [r3, #2]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d011      	beq.n	8013e58 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2200      	movs	r2, #0
 8013e38:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8013e64 <dhcp_handle_offer+0x48>)
 8013e3c:	689b      	ldr	r3, [r3, #8]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7f7 fcb3 	bl	800b7aa <lwip_htonl>
 8013e44:	4602      	mov	r2, r0
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	691a      	ldr	r2, [r3, #16]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f000 f808 	bl	8013e68 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013e58:	bf00      	nop
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	20015848 	.word	0x20015848
 8013e64:	20015828 	.word	0x20015828

08013e68 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013e68:	b5b0      	push	{r4, r5, r7, lr}
 8013e6a:	b08a      	sub	sp, #40	@ 0x28
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d109      	bne.n	8013e8a <dhcp_select+0x22>
 8013e76:	4b71      	ldr	r3, [pc, #452]	@ (801403c <dhcp_select+0x1d4>)
 8013e78:	f240 1277 	movw	r2, #375	@ 0x177
 8013e7c:	4970      	ldr	r1, [pc, #448]	@ (8014040 <dhcp_select+0x1d8>)
 8013e7e:	4871      	ldr	r0, [pc, #452]	@ (8014044 <dhcp_select+0x1dc>)
 8013e80:	f004 fc1e 	bl	80186c0 <iprintf>
 8013e84:	f06f 030f 	mvn.w	r3, #15
 8013e88:	e0d3      	b.n	8014032 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e8e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d109      	bne.n	8013eaa <dhcp_select+0x42>
 8013e96:	4b69      	ldr	r3, [pc, #420]	@ (801403c <dhcp_select+0x1d4>)
 8013e98:	f240 1279 	movw	r2, #377	@ 0x179
 8013e9c:	496a      	ldr	r1, [pc, #424]	@ (8014048 <dhcp_select+0x1e0>)
 8013e9e:	4869      	ldr	r0, [pc, #420]	@ (8014044 <dhcp_select+0x1dc>)
 8013ea0:	f004 fc0e 	bl	80186c0 <iprintf>
 8013ea4:	f06f 0305 	mvn.w	r3, #5
 8013ea8:	e0c3      	b.n	8014032 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013eaa:	2101      	movs	r1, #1
 8013eac:	69b8      	ldr	r0, [r7, #24]
 8013eae:	f000 ffc1 	bl	8014e34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013eb2:	f107 030c 	add.w	r3, r7, #12
 8013eb6:	2203      	movs	r2, #3
 8013eb8:	69b9      	ldr	r1, [r7, #24]
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f001 fc46 	bl	801574c <dhcp_create_msg>
 8013ec0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f000 8085 	beq.w	8013fd4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ed0:	89b8      	ldrh	r0, [r7, #12]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013ed8:	2302      	movs	r3, #2
 8013eda:	2239      	movs	r2, #57	@ 0x39
 8013edc:	f000 ffc4 	bl	8014e68 <dhcp_option>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013ee4:	89b8      	ldrh	r0, [r7, #12]
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	f001 f813 	bl	8014f1c <dhcp_option_short>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013efa:	89b8      	ldrh	r0, [r7, #12]
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f02:	2304      	movs	r3, #4
 8013f04:	2232      	movs	r2, #50	@ 0x32
 8013f06:	f000 ffaf 	bl	8014e68 <dhcp_option>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013f0e:	89bc      	ldrh	r4, [r7, #12]
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	69db      	ldr	r3, [r3, #28]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7f7 fc45 	bl	800b7aa <lwip_htonl>
 8013f20:	4603      	mov	r3, r0
 8013f22:	461a      	mov	r2, r3
 8013f24:	4629      	mov	r1, r5
 8013f26:	4620      	mov	r0, r4
 8013f28:	f001 f82a 	bl	8014f80 <dhcp_option_long>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013f30:	89b8      	ldrh	r0, [r7, #12]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f38:	2304      	movs	r3, #4
 8013f3a:	2236      	movs	r2, #54	@ 0x36
 8013f3c:	f000 ff94 	bl	8014e68 <dhcp_option>
 8013f40:	4603      	mov	r3, r0
 8013f42:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013f44:	89bc      	ldrh	r4, [r7, #12]
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	699b      	ldr	r3, [r3, #24]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7f7 fc2a 	bl	800b7aa <lwip_htonl>
 8013f56:	4603      	mov	r3, r0
 8013f58:	461a      	mov	r2, r3
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f001 f80f 	bl	8014f80 <dhcp_option_long>
 8013f62:	4603      	mov	r3, r0
 8013f64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f66:	89b8      	ldrh	r0, [r7, #12]
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f6e:	2303      	movs	r3, #3
 8013f70:	2237      	movs	r2, #55	@ 0x37
 8013f72:	f000 ff79 	bl	8014e68 <dhcp_option>
 8013f76:	4603      	mov	r3, r0
 8013f78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	77bb      	strb	r3, [r7, #30]
 8013f7e:	e00e      	b.n	8013f9e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013f80:	89b8      	ldrh	r0, [r7, #12]
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f88:	7fbb      	ldrb	r3, [r7, #30]
 8013f8a:	4a30      	ldr	r2, [pc, #192]	@ (801404c <dhcp_select+0x1e4>)
 8013f8c:	5cd3      	ldrb	r3, [r2, r3]
 8013f8e:	461a      	mov	r2, r3
 8013f90:	f000 ff9e 	bl	8014ed0 <dhcp_option_byte>
 8013f94:	4603      	mov	r3, r0
 8013f96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f98:	7fbb      	ldrb	r3, [r7, #30]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	77bb      	strb	r3, [r7, #30]
 8013f9e:	7fbb      	ldrb	r3, [r7, #30]
 8013fa0:	2b02      	cmp	r3, #2
 8013fa2:	d9ed      	bls.n	8013f80 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fa4:	89b8      	ldrh	r0, [r7, #12]
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	33f0      	adds	r3, #240	@ 0xf0
 8013faa:	697a      	ldr	r2, [r7, #20]
 8013fac:	4619      	mov	r1, r3
 8013fae:	f001 fca3 	bl	80158f8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013fb2:	4b27      	ldr	r3, [pc, #156]	@ (8014050 <dhcp_select+0x1e8>)
 8013fb4:	6818      	ldr	r0, [r3, #0]
 8013fb6:	4b27      	ldr	r3, [pc, #156]	@ (8014054 <dhcp_select+0x1ec>)
 8013fb8:	9301      	str	r3, [sp, #4]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	2343      	movs	r3, #67	@ 0x43
 8013fc0:	4a25      	ldr	r2, [pc, #148]	@ (8014058 <dhcp_select+0x1f0>)
 8013fc2:	6979      	ldr	r1, [r7, #20]
 8013fc4:	f7ff fbb4 	bl	8013730 <udp_sendto_if_src>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013fcc:	6978      	ldr	r0, [r7, #20]
 8013fce:	f7f9 f8ad 	bl	800d12c <pbuf_free>
 8013fd2:	e001      	b.n	8013fd8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013fd4:	23ff      	movs	r3, #255	@ 0xff
 8013fd6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	799b      	ldrb	r3, [r3, #6]
 8013fdc:	2bff      	cmp	r3, #255	@ 0xff
 8013fde:	d005      	beq.n	8013fec <dhcp_select+0x184>
    dhcp->tries++;
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	799b      	ldrb	r3, [r3, #6]
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	b2da      	uxtb	r2, r3
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	799b      	ldrb	r3, [r3, #6]
 8013ff0:	2b05      	cmp	r3, #5
 8013ff2:	d80d      	bhi.n	8014010 <dhcp_select+0x1a8>
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	799b      	ldrb	r3, [r3, #6]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	4093      	lsls	r3, r2
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	461a      	mov	r2, r3
 8014002:	0152      	lsls	r2, r2, #5
 8014004:	1ad2      	subs	r2, r2, r3
 8014006:	0092      	lsls	r2, r2, #2
 8014008:	4413      	add	r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	b29b      	uxth	r3, r3
 801400e:	e001      	b.n	8014014 <dhcp_select+0x1ac>
 8014010:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014014:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014016:	89fb      	ldrh	r3, [r7, #14]
 8014018:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801401c:	4a0f      	ldr	r2, [pc, #60]	@ (801405c <dhcp_select+0x1f4>)
 801401e:	fb82 1203 	smull	r1, r2, r2, r3
 8014022:	1152      	asrs	r2, r2, #5
 8014024:	17db      	asrs	r3, r3, #31
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	b29a      	uxth	r2, r3
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801402e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014032:	4618      	mov	r0, r3
 8014034:	3720      	adds	r7, #32
 8014036:	46bd      	mov	sp, r7
 8014038:	bdb0      	pop	{r4, r5, r7, pc}
 801403a:	bf00      	nop
 801403c:	0801c8f4 	.word	0x0801c8f4
 8014040:	0801c9a0 	.word	0x0801c9a0
 8014044:	0801c954 	.word	0x0801c954
 8014048:	0801c9bc 	.word	0x0801c9bc
 801404c:	20000020 	.word	0x20000020
 8014050:	20015850 	.word	0x20015850
 8014054:	080267d4 	.word	0x080267d4
 8014058:	080267d8 	.word	0x080267d8
 801405c:	10624dd3 	.word	0x10624dd3

08014060 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014066:	4b27      	ldr	r3, [pc, #156]	@ (8014104 <dhcp_coarse_tmr+0xa4>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	607b      	str	r3, [r7, #4]
 801406c:	e042      	b.n	80140f4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014072:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d039      	beq.n	80140ee <dhcp_coarse_tmr+0x8e>
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	795b      	ldrb	r3, [r3, #5]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d035      	beq.n	80140ee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	8a9b      	ldrh	r3, [r3, #20]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d012      	beq.n	80140b0 <dhcp_coarse_tmr+0x50>
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	8a5b      	ldrh	r3, [r3, #18]
 801408e:	3301      	adds	r3, #1
 8014090:	b29a      	uxth	r2, r3
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	825a      	strh	r2, [r3, #18]
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	8a5a      	ldrh	r2, [r3, #18]
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	8a9b      	ldrh	r3, [r3, #20]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d106      	bne.n	80140b0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 fe2c 	bl	8014d00 <dhcp_release_and_stop>
        dhcp_start(netif);
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f000 f969 	bl	8014380 <dhcp_start>
 80140ae:	e01e      	b.n	80140ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	8a1b      	ldrh	r3, [r3, #16]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d00b      	beq.n	80140d0 <dhcp_coarse_tmr+0x70>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	8a1b      	ldrh	r3, [r3, #16]
 80140bc:	1e5a      	subs	r2, r3, #1
 80140be:	b291      	uxth	r1, r2
 80140c0:	683a      	ldr	r2, [r7, #0]
 80140c2:	8211      	strh	r1, [r2, #16]
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d103      	bne.n	80140d0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f000 f8c6 	bl	801425a <dhcp_t2_timeout>
 80140ce:	e00e      	b.n	80140ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	89db      	ldrh	r3, [r3, #14]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00a      	beq.n	80140ee <dhcp_coarse_tmr+0x8e>
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	89db      	ldrh	r3, [r3, #14]
 80140dc:	1e5a      	subs	r2, r3, #1
 80140de:	b291      	uxth	r1, r2
 80140e0:	683a      	ldr	r2, [r7, #0]
 80140e2:	81d1      	strh	r1, [r2, #14]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d102      	bne.n	80140ee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 f888 	bl	80141fe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	607b      	str	r3, [r7, #4]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1b9      	bne.n	801406e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80140fa:	bf00      	nop
 80140fc:	bf00      	nop
 80140fe:	3708      	adds	r7, #8
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	200157bc 	.word	0x200157bc

08014108 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801410e:	4b16      	ldr	r3, [pc, #88]	@ (8014168 <dhcp_fine_tmr+0x60>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	607b      	str	r3, [r7, #4]
 8014114:	e020      	b.n	8014158 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801411a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d017      	beq.n	8014152 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	891b      	ldrh	r3, [r3, #8]
 8014126:	2b01      	cmp	r3, #1
 8014128:	d906      	bls.n	8014138 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	891b      	ldrh	r3, [r3, #8]
 801412e:	3b01      	subs	r3, #1
 8014130:	b29a      	uxth	r2, r3
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	811a      	strh	r2, [r3, #8]
 8014136:	e00c      	b.n	8014152 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	891b      	ldrh	r3, [r3, #8]
 801413c:	2b01      	cmp	r3, #1
 801413e:	d108      	bne.n	8014152 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	891b      	ldrh	r3, [r3, #8]
 8014144:	3b01      	subs	r3, #1
 8014146:	b29a      	uxth	r2, r3
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 f80d 	bl	801416c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	607b      	str	r3, [r7, #4]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d1db      	bne.n	8014116 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801415e:	bf00      	nop
 8014160:	bf00      	nop
 8014162:	3708      	adds	r7, #8
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}
 8014168:	200157bc 	.word	0x200157bc

0801416c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014178:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	795b      	ldrb	r3, [r3, #5]
 801417e:	2b0c      	cmp	r3, #12
 8014180:	d003      	beq.n	801418a <dhcp_timeout+0x1e>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	795b      	ldrb	r3, [r3, #5]
 8014186:	2b06      	cmp	r3, #6
 8014188:	d103      	bne.n	8014192 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 fa54 	bl	8014638 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014190:	e031      	b.n	80141f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	795b      	ldrb	r3, [r3, #5]
 8014196:	2b01      	cmp	r3, #1
 8014198:	d10e      	bne.n	80141b8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	799b      	ldrb	r3, [r3, #6]
 801419e:	2b05      	cmp	r3, #5
 80141a0:	d803      	bhi.n	80141aa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7ff fe60 	bl	8013e68 <dhcp_select>
}
 80141a8:	e025      	b.n	80141f6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f000 fda8 	bl	8014d00 <dhcp_release_and_stop>
      dhcp_start(netif);
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 f8e5 	bl	8014380 <dhcp_start>
}
 80141b6:	e01e      	b.n	80141f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	795b      	ldrb	r3, [r3, #5]
 80141bc:	2b08      	cmp	r3, #8
 80141be:	d10b      	bne.n	80141d8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	799b      	ldrb	r3, [r3, #6]
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d803      	bhi.n	80141d0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f7ff fdf3 	bl	8013db4 <dhcp_check>
}
 80141ce:	e012      	b.n	80141f6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f000 fad3 	bl	801477c <dhcp_bind>
}
 80141d6:	e00e      	b.n	80141f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	795b      	ldrb	r3, [r3, #5]
 80141dc:	2b03      	cmp	r3, #3
 80141de:	d10a      	bne.n	80141f6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	799b      	ldrb	r3, [r3, #6]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d803      	bhi.n	80141f0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 fcd5 	bl	8014b98 <dhcp_reboot>
}
 80141ee:	e002      	b.n	80141f6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 fa21 	bl	8014638 <dhcp_discover>
}
 80141f6:	bf00      	nop
 80141f8:	3710      	adds	r7, #16
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b084      	sub	sp, #16
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801420a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	795b      	ldrb	r3, [r3, #5]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d007      	beq.n	8014224 <dhcp_t1_timeout+0x26>
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	795b      	ldrb	r3, [r3, #5]
 8014218:	2b0a      	cmp	r3, #10
 801421a:	d003      	beq.n	8014224 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014220:	2b05      	cmp	r3, #5
 8014222:	d116      	bne.n	8014252 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f000 fb83 	bl	8014930 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	899b      	ldrh	r3, [r3, #12]
 801422e:	461a      	mov	r2, r3
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	8a5b      	ldrh	r3, [r3, #18]
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	2b01      	cmp	r3, #1
 8014238:	dd0b      	ble.n	8014252 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	899b      	ldrh	r3, [r3, #12]
 801423e:	461a      	mov	r2, r3
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	8a5b      	ldrh	r3, [r3, #18]
 8014244:	1ad3      	subs	r3, r2, r3
 8014246:	0fda      	lsrs	r2, r3, #31
 8014248:	4413      	add	r3, r2
 801424a:	105b      	asrs	r3, r3, #1
 801424c:	b29a      	uxth	r2, r3
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014252:	bf00      	nop
 8014254:	3710      	adds	r7, #16
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}

0801425a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801425a:	b580      	push	{r7, lr}
 801425c:	b084      	sub	sp, #16
 801425e:	af00      	add	r7, sp, #0
 8014260:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014266:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	795b      	ldrb	r3, [r3, #5]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d00b      	beq.n	8014288 <dhcp_t2_timeout+0x2e>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	795b      	ldrb	r3, [r3, #5]
 8014274:	2b0a      	cmp	r3, #10
 8014276:	d007      	beq.n	8014288 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801427c:	2b05      	cmp	r3, #5
 801427e:	d003      	beq.n	8014288 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	795b      	ldrb	r3, [r3, #5]
 8014284:	2b04      	cmp	r3, #4
 8014286:	d116      	bne.n	80142b6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 fbeb 	bl	8014a64 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	8a9b      	ldrh	r3, [r3, #20]
 8014292:	461a      	mov	r2, r3
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	8a5b      	ldrh	r3, [r3, #18]
 8014298:	1ad3      	subs	r3, r2, r3
 801429a:	2b01      	cmp	r3, #1
 801429c:	dd0b      	ble.n	80142b6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	8a9b      	ldrh	r3, [r3, #20]
 80142a2:	461a      	mov	r2, r3
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	8a5b      	ldrh	r3, [r3, #18]
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	0fda      	lsrs	r2, r3, #31
 80142ac:	4413      	add	r3, r2
 80142ae:	105b      	asrs	r3, r3, #1
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80142b6:	bf00      	nop
 80142b8:	3710      	adds	r7, #16
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
	...

080142c0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142ce:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2200      	movs	r2, #0
 80142d4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	2200      	movs	r2, #0
 80142da:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80142dc:	4b26      	ldr	r3, [pc, #152]	@ (8014378 <dhcp_handle_ack+0xb8>)
 80142de:	78db      	ldrb	r3, [r3, #3]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d003      	beq.n	80142ec <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80142e4:	4b25      	ldr	r3, [pc, #148]	@ (801437c <dhcp_handle_ack+0xbc>)
 80142e6:	68da      	ldr	r2, [r3, #12]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80142ec:	4b22      	ldr	r3, [pc, #136]	@ (8014378 <dhcp_handle_ack+0xb8>)
 80142ee:	791b      	ldrb	r3, [r3, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d004      	beq.n	80142fe <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80142f4:	4b21      	ldr	r3, [pc, #132]	@ (801437c <dhcp_handle_ack+0xbc>)
 80142f6:	691a      	ldr	r2, [r3, #16]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80142fc:	e004      	b.n	8014308 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014302:	085a      	lsrs	r2, r3, #1
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014308:	4b1b      	ldr	r3, [pc, #108]	@ (8014378 <dhcp_handle_ack+0xb8>)
 801430a:	795b      	ldrb	r3, [r3, #5]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d004      	beq.n	801431a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014310:	4b1a      	ldr	r3, [pc, #104]	@ (801437c <dhcp_handle_ack+0xbc>)
 8014312:	695a      	ldr	r2, [r3, #20]
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	631a      	str	r2, [r3, #48]	@ 0x30
 8014318:	e007      	b.n	801432a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801431e:	4613      	mov	r3, r2
 8014320:	00db      	lsls	r3, r3, #3
 8014322:	1a9b      	subs	r3, r3, r2
 8014324:	08da      	lsrs	r2, r3, #3
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	691a      	ldr	r2, [r3, #16]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014332:	4b11      	ldr	r3, [pc, #68]	@ (8014378 <dhcp_handle_ack+0xb8>)
 8014334:	799b      	ldrb	r3, [r3, #6]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d00b      	beq.n	8014352 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801433a:	4b10      	ldr	r3, [pc, #64]	@ (801437c <dhcp_handle_ack+0xbc>)
 801433c:	699b      	ldr	r3, [r3, #24]
 801433e:	4618      	mov	r0, r3
 8014340:	f7f7 fa33 	bl	800b7aa <lwip_htonl>
 8014344:	4602      	mov	r2, r0
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2201      	movs	r2, #1
 801434e:	71da      	strb	r2, [r3, #7]
 8014350:	e002      	b.n	8014358 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2200      	movs	r2, #0
 8014356:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014358:	4b07      	ldr	r3, [pc, #28]	@ (8014378 <dhcp_handle_ack+0xb8>)
 801435a:	79db      	ldrb	r3, [r3, #7]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d007      	beq.n	8014370 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014360:	4b06      	ldr	r3, [pc, #24]	@ (801437c <dhcp_handle_ack+0xbc>)
 8014362:	69db      	ldr	r3, [r3, #28]
 8014364:	4618      	mov	r0, r3
 8014366:	f7f7 fa20 	bl	800b7aa <lwip_htonl>
 801436a:	4602      	mov	r2, r0
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014370:	bf00      	nop
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}
 8014378:	20015848 	.word	0x20015848
 801437c:	20015828 	.word	0x20015828

08014380 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d109      	bne.n	80143a2 <dhcp_start+0x22>
 801438e:	4b37      	ldr	r3, [pc, #220]	@ (801446c <dhcp_start+0xec>)
 8014390:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8014394:	4936      	ldr	r1, [pc, #216]	@ (8014470 <dhcp_start+0xf0>)
 8014396:	4837      	ldr	r0, [pc, #220]	@ (8014474 <dhcp_start+0xf4>)
 8014398:	f004 f992 	bl	80186c0 <iprintf>
 801439c:	f06f 030f 	mvn.w	r3, #15
 80143a0:	e060      	b.n	8014464 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80143a8:	f003 0301 	and.w	r3, r3, #1
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d109      	bne.n	80143c4 <dhcp_start+0x44>
 80143b0:	4b2e      	ldr	r3, [pc, #184]	@ (801446c <dhcp_start+0xec>)
 80143b2:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80143b6:	4930      	ldr	r1, [pc, #192]	@ (8014478 <dhcp_start+0xf8>)
 80143b8:	482e      	ldr	r0, [pc, #184]	@ (8014474 <dhcp_start+0xf4>)
 80143ba:	f004 f981 	bl	80186c0 <iprintf>
 80143be:	f06f 030f 	mvn.w	r3, #15
 80143c2:	e04f      	b.n	8014464 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143ce:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80143d2:	d202      	bcs.n	80143da <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80143d4:	f04f 33ff 	mov.w	r3, #4294967295
 80143d8:	e044      	b.n	8014464 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d10d      	bne.n	80143fc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80143e0:	2034      	movs	r0, #52	@ 0x34
 80143e2:	f7f7 fe79 	bl	800c0d8 <mem_malloc>
 80143e6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d102      	bne.n	80143f4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80143ee:	f04f 33ff 	mov.w	r3, #4294967295
 80143f2:	e037      	b.n	8014464 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	68fa      	ldr	r2, [r7, #12]
 80143f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80143fa:	e005      	b.n	8014408 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	791b      	ldrb	r3, [r3, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014404:	f7ff fc92 	bl	8013d2c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014408:	2234      	movs	r2, #52	@ 0x34
 801440a:	2100      	movs	r1, #0
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f004 f9f6 	bl	80187fe <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014412:	f7ff fc39 	bl	8013c88 <dhcp_inc_pcb_refcount>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d002      	beq.n	8014422 <dhcp_start+0xa2>
    return ERR_MEM;
 801441c:	f04f 33ff 	mov.w	r3, #4294967295
 8014420:	e020      	b.n	8014464 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2201      	movs	r2, #1
 8014426:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801442e:	f003 0304 	and.w	r3, r3, #4
 8014432:	2b00      	cmp	r3, #0
 8014434:	d105      	bne.n	8014442 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014436:	2102      	movs	r1, #2
 8014438:	68f8      	ldr	r0, [r7, #12]
 801443a:	f000 fcfb 	bl	8014e34 <dhcp_set_state>
    return ERR_OK;
 801443e:	2300      	movs	r3, #0
 8014440:	e010      	b.n	8014464 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 f8f8 	bl	8014638 <dhcp_discover>
 8014448:	4603      	mov	r3, r0
 801444a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801444c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d005      	beq.n	8014460 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f000 fc53 	bl	8014d00 <dhcp_release_and_stop>
    return ERR_MEM;
 801445a:	f04f 33ff 	mov.w	r3, #4294967295
 801445e:	e001      	b.n	8014464 <dhcp_start+0xe4>
  }
  return result;
 8014460:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}
 801446c:	0801c8f4 	.word	0x0801c8f4
 8014470:	0801c9d8 	.word	0x0801c9d8
 8014474:	0801c954 	.word	0x0801c954
 8014478:	0801ca1c 	.word	0x0801ca1c

0801447c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014488:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d025      	beq.n	80144dc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	795b      	ldrb	r3, [r3, #5]
 8014494:	2b0a      	cmp	r3, #10
 8014496:	d008      	beq.n	80144aa <dhcp_network_changed+0x2e>
 8014498:	2b0a      	cmp	r3, #10
 801449a:	dc0d      	bgt.n	80144b8 <dhcp_network_changed+0x3c>
 801449c:	2b00      	cmp	r3, #0
 801449e:	d01f      	beq.n	80144e0 <dhcp_network_changed+0x64>
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	db09      	blt.n	80144b8 <dhcp_network_changed+0x3c>
 80144a4:	3b03      	subs	r3, #3
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d806      	bhi.n	80144b8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2200      	movs	r2, #0
 80144ae:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 fb71 	bl	8014b98 <dhcp_reboot>
      break;
 80144b6:	e014      	b.n	80144e2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	795b      	ldrb	r3, [r3, #5]
 80144bc:	2b0c      	cmp	r3, #12
 80144be:	d906      	bls.n	80144ce <dhcp_network_changed+0x52>
 80144c0:	4b09      	ldr	r3, [pc, #36]	@ (80144e8 <dhcp_network_changed+0x6c>)
 80144c2:	f240 326d 	movw	r2, #877	@ 0x36d
 80144c6:	4909      	ldr	r1, [pc, #36]	@ (80144ec <dhcp_network_changed+0x70>)
 80144c8:	4809      	ldr	r0, [pc, #36]	@ (80144f0 <dhcp_network_changed+0x74>)
 80144ca:	f004 f8f9 	bl	80186c0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2200      	movs	r2, #0
 80144d2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 f8af 	bl	8014638 <dhcp_discover>
      break;
 80144da:	e002      	b.n	80144e2 <dhcp_network_changed+0x66>
    return;
 80144dc:	bf00      	nop
 80144de:	e000      	b.n	80144e2 <dhcp_network_changed+0x66>
      break;
 80144e0:	bf00      	nop
  }
}
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	0801c8f4 	.word	0x0801c8f4
 80144ec:	0801ca40 	.word	0x0801ca40
 80144f0:	0801c954 	.word	0x0801c954

080144f4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d107      	bne.n	8014514 <dhcp_arp_reply+0x20>
 8014504:	4b0e      	ldr	r3, [pc, #56]	@ (8014540 <dhcp_arp_reply+0x4c>)
 8014506:	f240 328b 	movw	r2, #907	@ 0x38b
 801450a:	490e      	ldr	r1, [pc, #56]	@ (8014544 <dhcp_arp_reply+0x50>)
 801450c:	480e      	ldr	r0, [pc, #56]	@ (8014548 <dhcp_arp_reply+0x54>)
 801450e:	f004 f8d7 	bl	80186c0 <iprintf>
 8014512:	e012      	b.n	801453a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014518:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00c      	beq.n	801453a <dhcp_arp_reply+0x46>
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	795b      	ldrb	r3, [r3, #5]
 8014524:	2b08      	cmp	r3, #8
 8014526:	d108      	bne.n	801453a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	69db      	ldr	r3, [r3, #28]
 8014530:	429a      	cmp	r2, r3
 8014532:	d102      	bne.n	801453a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f000 f809 	bl	801454c <dhcp_decline>
    }
  }
}
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	0801c8f4 	.word	0x0801c8f4
 8014544:	0801c9d8 	.word	0x0801c9d8
 8014548:	0801c954 	.word	0x0801c954

0801454c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801454c:	b5b0      	push	{r4, r5, r7, lr}
 801454e:	b08a      	sub	sp, #40	@ 0x28
 8014550:	af02      	add	r7, sp, #8
 8014552:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014558:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801455a:	210c      	movs	r1, #12
 801455c:	69b8      	ldr	r0, [r7, #24]
 801455e:	f000 fc69 	bl	8014e34 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014562:	f107 030c 	add.w	r3, r7, #12
 8014566:	2204      	movs	r2, #4
 8014568:	69b9      	ldr	r1, [r7, #24]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f001 f8ee 	bl	801574c <dhcp_create_msg>
 8014570:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d035      	beq.n	80145e4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801457e:	89b8      	ldrh	r0, [r7, #12]
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014586:	2304      	movs	r3, #4
 8014588:	2232      	movs	r2, #50	@ 0x32
 801458a:	f000 fc6d 	bl	8014e68 <dhcp_option>
 801458e:	4603      	mov	r3, r0
 8014590:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014592:	89bc      	ldrh	r4, [r7, #12]
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	69db      	ldr	r3, [r3, #28]
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f7 f903 	bl	800b7aa <lwip_htonl>
 80145a4:	4603      	mov	r3, r0
 80145a6:	461a      	mov	r2, r3
 80145a8:	4629      	mov	r1, r5
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 fce8 	bl	8014f80 <dhcp_option_long>
 80145b0:	4603      	mov	r3, r0
 80145b2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145b4:	89b8      	ldrh	r0, [r7, #12]
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	33f0      	adds	r3, #240	@ 0xf0
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	4619      	mov	r1, r3
 80145be:	f001 f99b 	bl	80158f8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80145c2:	4b19      	ldr	r3, [pc, #100]	@ (8014628 <dhcp_decline+0xdc>)
 80145c4:	6818      	ldr	r0, [r3, #0]
 80145c6:	4b19      	ldr	r3, [pc, #100]	@ (801462c <dhcp_decline+0xe0>)
 80145c8:	9301      	str	r3, [sp, #4]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	9300      	str	r3, [sp, #0]
 80145ce:	2343      	movs	r3, #67	@ 0x43
 80145d0:	4a17      	ldr	r2, [pc, #92]	@ (8014630 <dhcp_decline+0xe4>)
 80145d2:	6979      	ldr	r1, [r7, #20]
 80145d4:	f7ff f8ac 	bl	8013730 <udp_sendto_if_src>
 80145d8:	4603      	mov	r3, r0
 80145da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80145dc:	6978      	ldr	r0, [r7, #20]
 80145de:	f7f8 fda5 	bl	800d12c <pbuf_free>
 80145e2:	e001      	b.n	80145e8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80145e4:	23ff      	movs	r3, #255	@ 0xff
 80145e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	799b      	ldrb	r3, [r3, #6]
 80145ec:	2bff      	cmp	r3, #255	@ 0xff
 80145ee:	d005      	beq.n	80145fc <dhcp_decline+0xb0>
    dhcp->tries++;
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	799b      	ldrb	r3, [r3, #6]
 80145f4:	3301      	adds	r3, #1
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80145fc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014600:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014602:	89fb      	ldrh	r3, [r7, #14]
 8014604:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014608:	4a0a      	ldr	r2, [pc, #40]	@ (8014634 <dhcp_decline+0xe8>)
 801460a:	fb82 1203 	smull	r1, r2, r2, r3
 801460e:	1152      	asrs	r2, r2, #5
 8014610:	17db      	asrs	r3, r3, #31
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	b29a      	uxth	r2, r3
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801461a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801461e:	4618      	mov	r0, r3
 8014620:	3720      	adds	r7, #32
 8014622:	46bd      	mov	sp, r7
 8014624:	bdb0      	pop	{r4, r5, r7, pc}
 8014626:	bf00      	nop
 8014628:	20015850 	.word	0x20015850
 801462c:	080267d4 	.word	0x080267d4
 8014630:	080267d8 	.word	0x080267d8
 8014634:	10624dd3 	.word	0x10624dd3

08014638 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08a      	sub	sp, #40	@ 0x28
 801463c:	af02      	add	r7, sp, #8
 801463e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014644:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014646:	2300      	movs	r3, #0
 8014648:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	2200      	movs	r2, #0
 801464e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014650:	2106      	movs	r1, #6
 8014652:	69b8      	ldr	r0, [r7, #24]
 8014654:	f000 fbee 	bl	8014e34 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014658:	f107 0308 	add.w	r3, r7, #8
 801465c:	2201      	movs	r2, #1
 801465e:	69b9      	ldr	r1, [r7, #24]
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f001 f873 	bl	801574c <dhcp_create_msg>
 8014666:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d04b      	beq.n	8014706 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014674:	8938      	ldrh	r0, [r7, #8]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801467c:	2302      	movs	r3, #2
 801467e:	2239      	movs	r2, #57	@ 0x39
 8014680:	f000 fbf2 	bl	8014e68 <dhcp_option>
 8014684:	4603      	mov	r3, r0
 8014686:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014688:	8938      	ldrh	r0, [r7, #8]
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014694:	461a      	mov	r2, r3
 8014696:	f000 fc41 	bl	8014f1c <dhcp_option_short>
 801469a:	4603      	mov	r3, r0
 801469c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801469e:	8938      	ldrh	r0, [r7, #8]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146a6:	2303      	movs	r3, #3
 80146a8:	2237      	movs	r2, #55	@ 0x37
 80146aa:	f000 fbdd 	bl	8014e68 <dhcp_option>
 80146ae:	4603      	mov	r3, r0
 80146b0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146b2:	2300      	movs	r3, #0
 80146b4:	77fb      	strb	r3, [r7, #31]
 80146b6:	e00e      	b.n	80146d6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146b8:	8938      	ldrh	r0, [r7, #8]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146c0:	7ffb      	ldrb	r3, [r7, #31]
 80146c2:	4a29      	ldr	r2, [pc, #164]	@ (8014768 <dhcp_discover+0x130>)
 80146c4:	5cd3      	ldrb	r3, [r2, r3]
 80146c6:	461a      	mov	r2, r3
 80146c8:	f000 fc02 	bl	8014ed0 <dhcp_option_byte>
 80146cc:	4603      	mov	r3, r0
 80146ce:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146d0:	7ffb      	ldrb	r3, [r7, #31]
 80146d2:	3301      	adds	r3, #1
 80146d4:	77fb      	strb	r3, [r7, #31]
 80146d6:	7ffb      	ldrb	r3, [r7, #31]
 80146d8:	2b02      	cmp	r3, #2
 80146da:	d9ed      	bls.n	80146b8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146dc:	8938      	ldrh	r0, [r7, #8]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	33f0      	adds	r3, #240	@ 0xf0
 80146e2:	693a      	ldr	r2, [r7, #16]
 80146e4:	4619      	mov	r1, r3
 80146e6:	f001 f907 	bl	80158f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80146ea:	4b20      	ldr	r3, [pc, #128]	@ (801476c <dhcp_discover+0x134>)
 80146ec:	6818      	ldr	r0, [r3, #0]
 80146ee:	4b20      	ldr	r3, [pc, #128]	@ (8014770 <dhcp_discover+0x138>)
 80146f0:	9301      	str	r3, [sp, #4]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	9300      	str	r3, [sp, #0]
 80146f6:	2343      	movs	r3, #67	@ 0x43
 80146f8:	4a1e      	ldr	r2, [pc, #120]	@ (8014774 <dhcp_discover+0x13c>)
 80146fa:	6939      	ldr	r1, [r7, #16]
 80146fc:	f7ff f818 	bl	8013730 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014700:	6938      	ldr	r0, [r7, #16]
 8014702:	f7f8 fd13 	bl	800d12c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	799b      	ldrb	r3, [r3, #6]
 801470a:	2bff      	cmp	r3, #255	@ 0xff
 801470c:	d005      	beq.n	801471a <dhcp_discover+0xe2>
    dhcp->tries++;
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	799b      	ldrb	r3, [r3, #6]
 8014712:	3301      	adds	r3, #1
 8014714:	b2da      	uxtb	r2, r3
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	799b      	ldrb	r3, [r3, #6]
 801471e:	2b05      	cmp	r3, #5
 8014720:	d80d      	bhi.n	801473e <dhcp_discover+0x106>
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	799b      	ldrb	r3, [r3, #6]
 8014726:	461a      	mov	r2, r3
 8014728:	2301      	movs	r3, #1
 801472a:	4093      	lsls	r3, r2
 801472c:	b29b      	uxth	r3, r3
 801472e:	461a      	mov	r2, r3
 8014730:	0152      	lsls	r2, r2, #5
 8014732:	1ad2      	subs	r2, r2, r3
 8014734:	0092      	lsls	r2, r2, #2
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	b29b      	uxth	r3, r3
 801473c:	e001      	b.n	8014742 <dhcp_discover+0x10a>
 801473e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014742:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014744:	897b      	ldrh	r3, [r7, #10]
 8014746:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801474a:	4a0b      	ldr	r2, [pc, #44]	@ (8014778 <dhcp_discover+0x140>)
 801474c:	fb82 1203 	smull	r1, r2, r2, r3
 8014750:	1152      	asrs	r2, r2, #5
 8014752:	17db      	asrs	r3, r3, #31
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	b29a      	uxth	r2, r3
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801475c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014760:	4618      	mov	r0, r3
 8014762:	3720      	adds	r7, #32
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}
 8014768:	20000020 	.word	0x20000020
 801476c:	20015850 	.word	0x20015850
 8014770:	080267d4 	.word	0x080267d4
 8014774:	080267d8 	.word	0x080267d8
 8014778:	10624dd3 	.word	0x10624dd3

0801477c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d107      	bne.n	801479a <dhcp_bind+0x1e>
 801478a:	4b64      	ldr	r3, [pc, #400]	@ (801491c <dhcp_bind+0x1a0>)
 801478c:	f240 4215 	movw	r2, #1045	@ 0x415
 8014790:	4963      	ldr	r1, [pc, #396]	@ (8014920 <dhcp_bind+0x1a4>)
 8014792:	4864      	ldr	r0, [pc, #400]	@ (8014924 <dhcp_bind+0x1a8>)
 8014794:	f003 ff94 	bl	80186c0 <iprintf>
 8014798:	e0bc      	b.n	8014914 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801479e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d107      	bne.n	80147b6 <dhcp_bind+0x3a>
 80147a6:	4b5d      	ldr	r3, [pc, #372]	@ (801491c <dhcp_bind+0x1a0>)
 80147a8:	f240 4217 	movw	r2, #1047	@ 0x417
 80147ac:	495e      	ldr	r1, [pc, #376]	@ (8014928 <dhcp_bind+0x1ac>)
 80147ae:	485d      	ldr	r0, [pc, #372]	@ (8014924 <dhcp_bind+0x1a8>)
 80147b0:	f003 ff86 	bl	80186c0 <iprintf>
 80147b4:	e0ae      	b.n	8014914 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80147b6:	69bb      	ldr	r3, [r7, #24]
 80147b8:	2200      	movs	r2, #0
 80147ba:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80147bc:	69bb      	ldr	r3, [r7, #24]
 80147be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147c4:	d019      	beq.n	80147fa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ca:	331e      	adds	r3, #30
 80147cc:	4a57      	ldr	r2, [pc, #348]	@ (801492c <dhcp_bind+0x1b0>)
 80147ce:	fba2 2303 	umull	r2, r3, r2, r3
 80147d2:	095b      	lsrs	r3, r3, #5
 80147d4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80147d6:	69fb      	ldr	r3, [r7, #28]
 80147d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80147dc:	d302      	bcc.n	80147e4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80147de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80147e2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	b29a      	uxth	r2, r3
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	8a9b      	ldrh	r3, [r3, #20]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d102      	bne.n	80147fa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80147f4:	69bb      	ldr	r3, [r7, #24]
 80147f6:	2201      	movs	r2, #1
 80147f8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014802:	d01d      	beq.n	8014840 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014804:	69bb      	ldr	r3, [r7, #24]
 8014806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014808:	331e      	adds	r3, #30
 801480a:	4a48      	ldr	r2, [pc, #288]	@ (801492c <dhcp_bind+0x1b0>)
 801480c:	fba2 2303 	umull	r2, r3, r2, r3
 8014810:	095b      	lsrs	r3, r3, #5
 8014812:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801481a:	d302      	bcc.n	8014822 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801481c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014820:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	b29a      	uxth	r2, r3
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	895b      	ldrh	r3, [r3, #10]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d102      	bne.n	8014838 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	2201      	movs	r2, #1
 8014836:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	895a      	ldrh	r2, [r3, #10]
 801483c:	69bb      	ldr	r3, [r7, #24]
 801483e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014848:	d01d      	beq.n	8014886 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801484e:	331e      	adds	r3, #30
 8014850:	4a36      	ldr	r2, [pc, #216]	@ (801492c <dhcp_bind+0x1b0>)
 8014852:	fba2 2303 	umull	r2, r3, r2, r3
 8014856:	095b      	lsrs	r3, r3, #5
 8014858:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014860:	d302      	bcc.n	8014868 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014866:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	b29a      	uxth	r2, r3
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014870:	69bb      	ldr	r3, [r7, #24]
 8014872:	899b      	ldrh	r3, [r3, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d102      	bne.n	801487e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014878:	69bb      	ldr	r3, [r7, #24]
 801487a:	2201      	movs	r2, #1
 801487c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	899a      	ldrh	r2, [r3, #12]
 8014882:	69bb      	ldr	r3, [r7, #24]
 8014884:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014886:	69bb      	ldr	r3, [r7, #24]
 8014888:	895a      	ldrh	r2, [r3, #10]
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	899b      	ldrh	r3, [r3, #12]
 801488e:	429a      	cmp	r2, r3
 8014890:	d306      	bcc.n	80148a0 <dhcp_bind+0x124>
 8014892:	69bb      	ldr	r3, [r7, #24]
 8014894:	899b      	ldrh	r3, [r3, #12]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d002      	beq.n	80148a0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	2200      	movs	r2, #0
 801489e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	79db      	ldrb	r3, [r3, #7]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d003      	beq.n	80148b0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	6a1b      	ldr	r3, [r3, #32]
 80148ac:	613b      	str	r3, [r7, #16]
 80148ae:	e014      	b.n	80148da <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	331c      	adds	r3, #28
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80148b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	db02      	blt.n	80148c6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80148c0:	23ff      	movs	r3, #255	@ 0xff
 80148c2:	613b      	str	r3, [r7, #16]
 80148c4:	e009      	b.n	80148da <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	2bbf      	cmp	r3, #191	@ 0xbf
 80148ca:	d903      	bls.n	80148d4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80148cc:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80148d0:	613b      	str	r3, [r7, #16]
 80148d2:	e002      	b.n	80148da <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80148d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80148d8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148de:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d108      	bne.n	80148f8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	69da      	ldr	r2, [r3, #28]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	4013      	ands	r3, r2
 80148ee:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80148f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80148f8:	210a      	movs	r1, #10
 80148fa:	69b8      	ldr	r0, [r7, #24]
 80148fc:	f000 fa9a 	bl	8014e34 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014900:	69bb      	ldr	r3, [r7, #24]
 8014902:	f103 011c 	add.w	r1, r3, #28
 8014906:	f107 030c 	add.w	r3, r7, #12
 801490a:	f107 0210 	add.w	r2, r7, #16
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f7f7 ff58 	bl	800c7c4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014914:	3720      	adds	r7, #32
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	0801c8f4 	.word	0x0801c8f4
 8014920:	0801ca54 	.word	0x0801ca54
 8014924:	0801c954 	.word	0x0801c954
 8014928:	0801ca70 	.word	0x0801ca70
 801492c:	88888889 	.word	0x88888889

08014930 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b08a      	sub	sp, #40	@ 0x28
 8014934:	af02      	add	r7, sp, #8
 8014936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801493c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801493e:	2105      	movs	r1, #5
 8014940:	69b8      	ldr	r0, [r7, #24]
 8014942:	f000 fa77 	bl	8014e34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014946:	f107 030c 	add.w	r3, r7, #12
 801494a:	2203      	movs	r2, #3
 801494c:	69b9      	ldr	r1, [r7, #24]
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f000 fefc 	bl	801574c <dhcp_create_msg>
 8014954:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d04e      	beq.n	80149fa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014962:	89b8      	ldrh	r0, [r7, #12]
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801496a:	2302      	movs	r3, #2
 801496c:	2239      	movs	r2, #57	@ 0x39
 801496e:	f000 fa7b 	bl	8014e68 <dhcp_option>
 8014972:	4603      	mov	r3, r0
 8014974:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014976:	89b8      	ldrh	r0, [r7, #12]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014982:	461a      	mov	r2, r3
 8014984:	f000 faca 	bl	8014f1c <dhcp_option_short>
 8014988:	4603      	mov	r3, r0
 801498a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801498c:	89b8      	ldrh	r0, [r7, #12]
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014994:	2303      	movs	r3, #3
 8014996:	2237      	movs	r2, #55	@ 0x37
 8014998:	f000 fa66 	bl	8014e68 <dhcp_option>
 801499c:	4603      	mov	r3, r0
 801499e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149a0:	2300      	movs	r3, #0
 80149a2:	77bb      	strb	r3, [r7, #30]
 80149a4:	e00e      	b.n	80149c4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149a6:	89b8      	ldrh	r0, [r7, #12]
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80149ae:	7fbb      	ldrb	r3, [r7, #30]
 80149b0:	4a29      	ldr	r2, [pc, #164]	@ (8014a58 <dhcp_renew+0x128>)
 80149b2:	5cd3      	ldrb	r3, [r2, r3]
 80149b4:	461a      	mov	r2, r3
 80149b6:	f000 fa8b 	bl	8014ed0 <dhcp_option_byte>
 80149ba:	4603      	mov	r3, r0
 80149bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149be:	7fbb      	ldrb	r3, [r7, #30]
 80149c0:	3301      	adds	r3, #1
 80149c2:	77bb      	strb	r3, [r7, #30]
 80149c4:	7fbb      	ldrb	r3, [r7, #30]
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	d9ed      	bls.n	80149a6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80149ca:	89b8      	ldrh	r0, [r7, #12]
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	33f0      	adds	r3, #240	@ 0xf0
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	4619      	mov	r1, r3
 80149d4:	f000 ff90 	bl	80158f8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80149d8:	4b20      	ldr	r3, [pc, #128]	@ (8014a5c <dhcp_renew+0x12c>)
 80149da:	6818      	ldr	r0, [r3, #0]
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	f103 0218 	add.w	r2, r3, #24
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	2343      	movs	r3, #67	@ 0x43
 80149e8:	6979      	ldr	r1, [r7, #20]
 80149ea:	f7fe fe2d 	bl	8013648 <udp_sendto_if>
 80149ee:	4603      	mov	r3, r0
 80149f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80149f2:	6978      	ldr	r0, [r7, #20]
 80149f4:	f7f8 fb9a 	bl	800d12c <pbuf_free>
 80149f8:	e001      	b.n	80149fe <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149fa:	23ff      	movs	r3, #255	@ 0xff
 80149fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	799b      	ldrb	r3, [r3, #6]
 8014a02:	2bff      	cmp	r3, #255	@ 0xff
 8014a04:	d005      	beq.n	8014a12 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	799b      	ldrb	r3, [r3, #6]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	69bb      	ldr	r3, [r7, #24]
 8014a10:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	799b      	ldrb	r3, [r3, #6]
 8014a16:	2b09      	cmp	r3, #9
 8014a18:	d809      	bhi.n	8014a2e <dhcp_renew+0xfe>
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	799b      	ldrb	r3, [r3, #6]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	0152      	lsls	r2, r2, #5
 8014a22:	1ad2      	subs	r2, r2, r3
 8014a24:	0092      	lsls	r2, r2, #2
 8014a26:	4413      	add	r3, r2
 8014a28:	011b      	lsls	r3, r3, #4
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	e001      	b.n	8014a32 <dhcp_renew+0x102>
 8014a2e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8014a32:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a34:	89fb      	ldrh	r3, [r7, #14]
 8014a36:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014a3a:	4a09      	ldr	r2, [pc, #36]	@ (8014a60 <dhcp_renew+0x130>)
 8014a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8014a40:	1152      	asrs	r2, r2, #5
 8014a42:	17db      	asrs	r3, r3, #31
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3720      	adds	r7, #32
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	20000020 	.word	0x20000020
 8014a5c:	20015850 	.word	0x20015850
 8014a60:	10624dd3 	.word	0x10624dd3

08014a64 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b08a      	sub	sp, #40	@ 0x28
 8014a68:	af02      	add	r7, sp, #8
 8014a6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a70:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014a72:	2104      	movs	r1, #4
 8014a74:	69b8      	ldr	r0, [r7, #24]
 8014a76:	f000 f9dd 	bl	8014e34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a7a:	f107 030c 	add.w	r3, r7, #12
 8014a7e:	2203      	movs	r2, #3
 8014a80:	69b9      	ldr	r1, [r7, #24]
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fe62 	bl	801574c <dhcp_create_msg>
 8014a88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d04c      	beq.n	8014b2a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a96:	89b8      	ldrh	r0, [r7, #12]
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a9e:	2302      	movs	r3, #2
 8014aa0:	2239      	movs	r2, #57	@ 0x39
 8014aa2:	f000 f9e1 	bl	8014e68 <dhcp_option>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014aaa:	89b8      	ldrh	r0, [r7, #12]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	f000 fa30 	bl	8014f1c <dhcp_option_short>
 8014abc:	4603      	mov	r3, r0
 8014abe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014ac0:	89b8      	ldrh	r0, [r7, #12]
 8014ac2:	693b      	ldr	r3, [r7, #16]
 8014ac4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ac8:	2303      	movs	r3, #3
 8014aca:	2237      	movs	r2, #55	@ 0x37
 8014acc:	f000 f9cc 	bl	8014e68 <dhcp_option>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	77bb      	strb	r3, [r7, #30]
 8014ad8:	e00e      	b.n	8014af8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ada:	89b8      	ldrh	r0, [r7, #12]
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ae2:	7fbb      	ldrb	r3, [r7, #30]
 8014ae4:	4a28      	ldr	r2, [pc, #160]	@ (8014b88 <dhcp_rebind+0x124>)
 8014ae6:	5cd3      	ldrb	r3, [r2, r3]
 8014ae8:	461a      	mov	r2, r3
 8014aea:	f000 f9f1 	bl	8014ed0 <dhcp_option_byte>
 8014aee:	4603      	mov	r3, r0
 8014af0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014af2:	7fbb      	ldrb	r3, [r7, #30]
 8014af4:	3301      	adds	r3, #1
 8014af6:	77bb      	strb	r3, [r7, #30]
 8014af8:	7fbb      	ldrb	r3, [r7, #30]
 8014afa:	2b02      	cmp	r3, #2
 8014afc:	d9ed      	bls.n	8014ada <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014afe:	89b8      	ldrh	r0, [r7, #12]
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	33f0      	adds	r3, #240	@ 0xf0
 8014b04:	697a      	ldr	r2, [r7, #20]
 8014b06:	4619      	mov	r1, r3
 8014b08:	f000 fef6 	bl	80158f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8014b8c <dhcp_rebind+0x128>)
 8014b0e:	6818      	ldr	r0, [r3, #0]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	2343      	movs	r3, #67	@ 0x43
 8014b16:	4a1e      	ldr	r2, [pc, #120]	@ (8014b90 <dhcp_rebind+0x12c>)
 8014b18:	6979      	ldr	r1, [r7, #20]
 8014b1a:	f7fe fd95 	bl	8013648 <udp_sendto_if>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b22:	6978      	ldr	r0, [r7, #20]
 8014b24:	f7f8 fb02 	bl	800d12c <pbuf_free>
 8014b28:	e001      	b.n	8014b2e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b2a:	23ff      	movs	r3, #255	@ 0xff
 8014b2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	799b      	ldrb	r3, [r3, #6]
 8014b32:	2bff      	cmp	r3, #255	@ 0xff
 8014b34:	d005      	beq.n	8014b42 <dhcp_rebind+0xde>
    dhcp->tries++;
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	799b      	ldrb	r3, [r3, #6]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	b2da      	uxtb	r2, r3
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	799b      	ldrb	r3, [r3, #6]
 8014b46:	2b09      	cmp	r3, #9
 8014b48:	d809      	bhi.n	8014b5e <dhcp_rebind+0xfa>
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	799b      	ldrb	r3, [r3, #6]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	0152      	lsls	r2, r2, #5
 8014b52:	1ad2      	subs	r2, r2, r3
 8014b54:	0092      	lsls	r2, r2, #2
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	e001      	b.n	8014b62 <dhcp_rebind+0xfe>
 8014b5e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014b62:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b64:	89fb      	ldrh	r3, [r7, #14]
 8014b66:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8014b94 <dhcp_rebind+0x130>)
 8014b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8014b70:	1152      	asrs	r2, r2, #5
 8014b72:	17db      	asrs	r3, r3, #31
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	b29a      	uxth	r2, r3
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3720      	adds	r7, #32
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	20000020 	.word	0x20000020
 8014b8c:	20015850 	.word	0x20015850
 8014b90:	080267d8 	.word	0x080267d8
 8014b94:	10624dd3 	.word	0x10624dd3

08014b98 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014b98:	b5b0      	push	{r4, r5, r7, lr}
 8014b9a:	b08a      	sub	sp, #40	@ 0x28
 8014b9c:	af02      	add	r7, sp, #8
 8014b9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ba4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014ba6:	2103      	movs	r1, #3
 8014ba8:	69b8      	ldr	r0, [r7, #24]
 8014baa:	f000 f943 	bl	8014e34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014bae:	f107 030c 	add.w	r3, r7, #12
 8014bb2:	2203      	movs	r2, #3
 8014bb4:	69b9      	ldr	r1, [r7, #24]
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 fdc8 	bl	801574c <dhcp_create_msg>
 8014bbc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d066      	beq.n	8014c92 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014bca:	89b8      	ldrh	r0, [r7, #12]
 8014bcc:	693b      	ldr	r3, [r7, #16]
 8014bce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014bd2:	2302      	movs	r3, #2
 8014bd4:	2239      	movs	r2, #57	@ 0x39
 8014bd6:	f000 f947 	bl	8014e68 <dhcp_option>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014bde:	89b8      	ldrh	r0, [r7, #12]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	33f0      	adds	r3, #240	@ 0xf0
 8014be4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014be8:	4619      	mov	r1, r3
 8014bea:	f000 f997 	bl	8014f1c <dhcp_option_short>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014bf2:	89b8      	ldrh	r0, [r7, #12]
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014bfa:	2304      	movs	r3, #4
 8014bfc:	2232      	movs	r2, #50	@ 0x32
 8014bfe:	f000 f933 	bl	8014e68 <dhcp_option>
 8014c02:	4603      	mov	r3, r0
 8014c04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014c06:	89bc      	ldrh	r4, [r7, #12]
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	69db      	ldr	r3, [r3, #28]
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7f6 fdc9 	bl	800b7aa <lwip_htonl>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	4629      	mov	r1, r5
 8014c1e:	4620      	mov	r0, r4
 8014c20:	f000 f9ae 	bl	8014f80 <dhcp_option_long>
 8014c24:	4603      	mov	r3, r0
 8014c26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014c28:	89b8      	ldrh	r0, [r7, #12]
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014c30:	2303      	movs	r3, #3
 8014c32:	2237      	movs	r2, #55	@ 0x37
 8014c34:	f000 f918 	bl	8014e68 <dhcp_option>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	77bb      	strb	r3, [r7, #30]
 8014c40:	e00e      	b.n	8014c60 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014c42:	89b8      	ldrh	r0, [r7, #12]
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014c4a:	7fbb      	ldrb	r3, [r7, #30]
 8014c4c:	4a28      	ldr	r2, [pc, #160]	@ (8014cf0 <dhcp_reboot+0x158>)
 8014c4e:	5cd3      	ldrb	r3, [r2, r3]
 8014c50:	461a      	mov	r2, r3
 8014c52:	f000 f93d 	bl	8014ed0 <dhcp_option_byte>
 8014c56:	4603      	mov	r3, r0
 8014c58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c5a:	7fbb      	ldrb	r3, [r7, #30]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	77bb      	strb	r3, [r7, #30]
 8014c60:	7fbb      	ldrb	r3, [r7, #30]
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d9ed      	bls.n	8014c42 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c66:	89b8      	ldrh	r0, [r7, #12]
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	33f0      	adds	r3, #240	@ 0xf0
 8014c6c:	697a      	ldr	r2, [r7, #20]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	f000 fe42 	bl	80158f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014c74:	4b1f      	ldr	r3, [pc, #124]	@ (8014cf4 <dhcp_reboot+0x15c>)
 8014c76:	6818      	ldr	r0, [r3, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	2343      	movs	r3, #67	@ 0x43
 8014c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8014cf8 <dhcp_reboot+0x160>)
 8014c80:	6979      	ldr	r1, [r7, #20]
 8014c82:	f7fe fce1 	bl	8013648 <udp_sendto_if>
 8014c86:	4603      	mov	r3, r0
 8014c88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014c8a:	6978      	ldr	r0, [r7, #20]
 8014c8c:	f7f8 fa4e 	bl	800d12c <pbuf_free>
 8014c90:	e001      	b.n	8014c96 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014c92:	23ff      	movs	r3, #255	@ 0xff
 8014c94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	799b      	ldrb	r3, [r3, #6]
 8014c9a:	2bff      	cmp	r3, #255	@ 0xff
 8014c9c:	d005      	beq.n	8014caa <dhcp_reboot+0x112>
    dhcp->tries++;
 8014c9e:	69bb      	ldr	r3, [r7, #24]
 8014ca0:	799b      	ldrb	r3, [r3, #6]
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	b2da      	uxtb	r2, r3
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	799b      	ldrb	r3, [r3, #6]
 8014cae:	2b09      	cmp	r3, #9
 8014cb0:	d809      	bhi.n	8014cc6 <dhcp_reboot+0x12e>
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	799b      	ldrb	r3, [r3, #6]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	0152      	lsls	r2, r2, #5
 8014cba:	1ad2      	subs	r2, r2, r3
 8014cbc:	0092      	lsls	r2, r2, #2
 8014cbe:	4413      	add	r3, r2
 8014cc0:	00db      	lsls	r3, r3, #3
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	e001      	b.n	8014cca <dhcp_reboot+0x132>
 8014cc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014cca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ccc:	89fb      	ldrh	r3, [r7, #14]
 8014cce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8014cfc <dhcp_reboot+0x164>)
 8014cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8014cd8:	1152      	asrs	r2, r2, #5
 8014cda:	17db      	asrs	r3, r3, #31
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	69bb      	ldr	r3, [r7, #24]
 8014ce2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3720      	adds	r7, #32
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bdb0      	pop	{r4, r5, r7, pc}
 8014cf0:	20000020 	.word	0x20000020
 8014cf4:	20015850 	.word	0x20015850
 8014cf8:	080267d8 	.word	0x080267d8
 8014cfc:	10624dd3 	.word	0x10624dd3

08014d00 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014d00:	b5b0      	push	{r4, r5, r7, lr}
 8014d02:	b08a      	sub	sp, #40	@ 0x28
 8014d04:	af02      	add	r7, sp, #8
 8014d06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014d0e:	69fb      	ldr	r3, [r7, #28]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f000 8084 	beq.w	8014e1e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	795b      	ldrb	r3, [r3, #5]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	f000 8081 	beq.w	8014e22 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	699b      	ldr	r3, [r3, #24]
 8014d24:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014d32:	69fb      	ldr	r3, [r7, #28]
 8014d34:	2200      	movs	r2, #0
 8014d36:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014d3e:	69fb      	ldr	r3, [r7, #28]
 8014d40:	2200      	movs	r2, #0
 8014d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	2200      	movs	r2, #0
 8014d58:	829a      	strh	r2, [r3, #20]
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	8a9a      	ldrh	r2, [r3, #20]
 8014d5e:	69fb      	ldr	r3, [r7, #28]
 8014d60:	825a      	strh	r2, [r3, #18]
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	8a5a      	ldrh	r2, [r3, #18]
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	821a      	strh	r2, [r3, #16]
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	8a1a      	ldrh	r2, [r3, #16]
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fdee 	bl	8015954 <dhcp_supplied_address>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d03b      	beq.n	8014df6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014d7e:	f107 030e 	add.w	r3, r7, #14
 8014d82:	2207      	movs	r2, #7
 8014d84:	69f9      	ldr	r1, [r7, #28]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 fce0 	bl	801574c <dhcp_create_msg>
 8014d8c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d030      	beq.n	8014df6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014d9a:	89f8      	ldrh	r0, [r7, #14]
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014da2:	2304      	movs	r3, #4
 8014da4:	2236      	movs	r2, #54	@ 0x36
 8014da6:	f000 f85f 	bl	8014e68 <dhcp_option>
 8014daa:	4603      	mov	r3, r0
 8014dac:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014dae:	89fc      	ldrh	r4, [r7, #14]
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7f6 fcf6 	bl	800b7aa <lwip_htonl>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f000 f8db 	bl	8014f80 <dhcp_option_long>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014dce:	89f8      	ldrh	r0, [r7, #14]
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	33f0      	adds	r3, #240	@ 0xf0
 8014dd4:	69ba      	ldr	r2, [r7, #24]
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	f000 fd8e 	bl	80158f8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014ddc:	4b13      	ldr	r3, [pc, #76]	@ (8014e2c <dhcp_release_and_stop+0x12c>)
 8014dde:	6818      	ldr	r0, [r3, #0]
 8014de0:	f107 0210 	add.w	r2, r7, #16
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	2343      	movs	r3, #67	@ 0x43
 8014dea:	69b9      	ldr	r1, [r7, #24]
 8014dec:	f7fe fc2c 	bl	8013648 <udp_sendto_if>
      pbuf_free(p_out);
 8014df0:	69b8      	ldr	r0, [r7, #24]
 8014df2:	f7f8 f99b 	bl	800d12c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014df6:	4b0e      	ldr	r3, [pc, #56]	@ (8014e30 <dhcp_release_and_stop+0x130>)
 8014df8:	4a0d      	ldr	r2, [pc, #52]	@ (8014e30 <dhcp_release_and_stop+0x130>)
 8014dfa:	490d      	ldr	r1, [pc, #52]	@ (8014e30 <dhcp_release_and_stop+0x130>)
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7f7 fce1 	bl	800c7c4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014e02:	2100      	movs	r1, #0
 8014e04:	69f8      	ldr	r0, [r7, #28]
 8014e06:	f000 f815 	bl	8014e34 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	791b      	ldrb	r3, [r3, #4]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d008      	beq.n	8014e24 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014e12:	f7fe ff8b 	bl	8013d2c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014e16:	69fb      	ldr	r3, [r7, #28]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	711a      	strb	r2, [r3, #4]
 8014e1c:	e002      	b.n	8014e24 <dhcp_release_and_stop+0x124>
    return;
 8014e1e:	bf00      	nop
 8014e20:	e000      	b.n	8014e24 <dhcp_release_and_stop+0x124>
    return;
 8014e22:	bf00      	nop
  }
}
 8014e24:	3720      	adds	r7, #32
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bdb0      	pop	{r4, r5, r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	20015850 	.word	0x20015850
 8014e30:	080267d4 	.word	0x080267d4

08014e34 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	795b      	ldrb	r3, [r3, #5]
 8014e44:	78fa      	ldrb	r2, [r7, #3]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d008      	beq.n	8014e5c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	78fa      	ldrb	r2, [r7, #3]
 8014e4e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2200      	movs	r2, #0
 8014e54:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	811a      	strh	r2, [r3, #8]
  }
}
 8014e5c:	bf00      	nop
 8014e5e:	370c      	adds	r7, #12
 8014e60:	46bd      	mov	sp, r7
 8014e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e66:	4770      	bx	lr

08014e68 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6039      	str	r1, [r7, #0]
 8014e70:	4611      	mov	r1, r2
 8014e72:	461a      	mov	r2, r3
 8014e74:	4603      	mov	r3, r0
 8014e76:	80fb      	strh	r3, [r7, #6]
 8014e78:	460b      	mov	r3, r1
 8014e7a:	717b      	strb	r3, [r7, #5]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014e80:	88fa      	ldrh	r2, [r7, #6]
 8014e82:	793b      	ldrb	r3, [r7, #4]
 8014e84:	4413      	add	r3, r2
 8014e86:	3302      	adds	r3, #2
 8014e88:	2b44      	cmp	r3, #68	@ 0x44
 8014e8a:	d906      	bls.n	8014e9a <dhcp_option+0x32>
 8014e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8014ec4 <dhcp_option+0x5c>)
 8014e8e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014e92:	490d      	ldr	r1, [pc, #52]	@ (8014ec8 <dhcp_option+0x60>)
 8014e94:	480d      	ldr	r0, [pc, #52]	@ (8014ecc <dhcp_option+0x64>)
 8014e96:	f003 fc13 	bl	80186c0 <iprintf>
  options[options_out_len++] = option_type;
 8014e9a:	88fb      	ldrh	r3, [r7, #6]
 8014e9c:	1c5a      	adds	r2, r3, #1
 8014e9e:	80fa      	strh	r2, [r7, #6]
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	797a      	ldrb	r2, [r7, #5]
 8014ea8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014eaa:	88fb      	ldrh	r3, [r7, #6]
 8014eac:	1c5a      	adds	r2, r3, #1
 8014eae:	80fa      	strh	r2, [r7, #6]
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	793a      	ldrb	r2, [r7, #4]
 8014eb8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014eba:	88fb      	ldrh	r3, [r7, #6]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	0801c8f4 	.word	0x0801c8f4
 8014ec8:	0801ca88 	.word	0x0801ca88
 8014ecc:	0801c954 	.word	0x0801c954

08014ed0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	6039      	str	r1, [r7, #0]
 8014eda:	80fb      	strh	r3, [r7, #6]
 8014edc:	4613      	mov	r3, r2
 8014ede:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014ee0:	88fb      	ldrh	r3, [r7, #6]
 8014ee2:	2b43      	cmp	r3, #67	@ 0x43
 8014ee4:	d906      	bls.n	8014ef4 <dhcp_option_byte+0x24>
 8014ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8014f10 <dhcp_option_byte+0x40>)
 8014ee8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8014eec:	4909      	ldr	r1, [pc, #36]	@ (8014f14 <dhcp_option_byte+0x44>)
 8014eee:	480a      	ldr	r0, [pc, #40]	@ (8014f18 <dhcp_option_byte+0x48>)
 8014ef0:	f003 fbe6 	bl	80186c0 <iprintf>
  options[options_out_len++] = value;
 8014ef4:	88fb      	ldrh	r3, [r7, #6]
 8014ef6:	1c5a      	adds	r2, r3, #1
 8014ef8:	80fa      	strh	r2, [r7, #6]
 8014efa:	461a      	mov	r2, r3
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	4413      	add	r3, r2
 8014f00:	797a      	ldrb	r2, [r7, #5]
 8014f02:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014f04:	88fb      	ldrh	r3, [r7, #6]
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3708      	adds	r7, #8
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	0801c8f4 	.word	0x0801c8f4
 8014f14:	0801cacc 	.word	0x0801cacc
 8014f18:	0801c954 	.word	0x0801c954

08014f1c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	4603      	mov	r3, r0
 8014f24:	6039      	str	r1, [r7, #0]
 8014f26:	80fb      	strh	r3, [r7, #6]
 8014f28:	4613      	mov	r3, r2
 8014f2a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014f2c:	88fb      	ldrh	r3, [r7, #6]
 8014f2e:	3302      	adds	r3, #2
 8014f30:	2b44      	cmp	r3, #68	@ 0x44
 8014f32:	d906      	bls.n	8014f42 <dhcp_option_short+0x26>
 8014f34:	4b0f      	ldr	r3, [pc, #60]	@ (8014f74 <dhcp_option_short+0x58>)
 8014f36:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8014f3a:	490f      	ldr	r1, [pc, #60]	@ (8014f78 <dhcp_option_short+0x5c>)
 8014f3c:	480f      	ldr	r0, [pc, #60]	@ (8014f7c <dhcp_option_short+0x60>)
 8014f3e:	f003 fbbf 	bl	80186c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014f42:	88bb      	ldrh	r3, [r7, #4]
 8014f44:	0a1b      	lsrs	r3, r3, #8
 8014f46:	b29a      	uxth	r2, r3
 8014f48:	88fb      	ldrh	r3, [r7, #6]
 8014f4a:	1c59      	adds	r1, r3, #1
 8014f4c:	80f9      	strh	r1, [r7, #6]
 8014f4e:	4619      	mov	r1, r3
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	440b      	add	r3, r1
 8014f54:	b2d2      	uxtb	r2, r2
 8014f56:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014f58:	88fb      	ldrh	r3, [r7, #6]
 8014f5a:	1c5a      	adds	r2, r3, #1
 8014f5c:	80fa      	strh	r2, [r7, #6]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	4413      	add	r3, r2
 8014f64:	88ba      	ldrh	r2, [r7, #4]
 8014f66:	b2d2      	uxtb	r2, r2
 8014f68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014f6a:	88fb      	ldrh	r3, [r7, #6]
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	0801c8f4 	.word	0x0801c8f4
 8014f78:	0801cb04 	.word	0x0801cb04
 8014f7c:	0801c954 	.word	0x0801c954

08014f80 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	4603      	mov	r3, r0
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
 8014f8c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014f8e:	89fb      	ldrh	r3, [r7, #14]
 8014f90:	3304      	adds	r3, #4
 8014f92:	2b44      	cmp	r3, #68	@ 0x44
 8014f94:	d906      	bls.n	8014fa4 <dhcp_option_long+0x24>
 8014f96:	4b19      	ldr	r3, [pc, #100]	@ (8014ffc <dhcp_option_long+0x7c>)
 8014f98:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8014f9c:	4918      	ldr	r1, [pc, #96]	@ (8015000 <dhcp_option_long+0x80>)
 8014f9e:	4819      	ldr	r0, [pc, #100]	@ (8015004 <dhcp_option_long+0x84>)
 8014fa0:	f003 fb8e 	bl	80186c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	0e1a      	lsrs	r2, r3, #24
 8014fa8:	89fb      	ldrh	r3, [r7, #14]
 8014faa:	1c59      	adds	r1, r3, #1
 8014fac:	81f9      	strh	r1, [r7, #14]
 8014fae:	4619      	mov	r1, r3
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	440b      	add	r3, r1
 8014fb4:	b2d2      	uxtb	r2, r2
 8014fb6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	0c1a      	lsrs	r2, r3, #16
 8014fbc:	89fb      	ldrh	r3, [r7, #14]
 8014fbe:	1c59      	adds	r1, r3, #1
 8014fc0:	81f9      	strh	r1, [r7, #14]
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	440b      	add	r3, r1
 8014fc8:	b2d2      	uxtb	r2, r2
 8014fca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	0a1a      	lsrs	r2, r3, #8
 8014fd0:	89fb      	ldrh	r3, [r7, #14]
 8014fd2:	1c59      	adds	r1, r3, #1
 8014fd4:	81f9      	strh	r1, [r7, #14]
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	440b      	add	r3, r1
 8014fdc:	b2d2      	uxtb	r2, r2
 8014fde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014fe0:	89fb      	ldrh	r3, [r7, #14]
 8014fe2:	1c5a      	adds	r2, r3, #1
 8014fe4:	81fa      	strh	r2, [r7, #14]
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	4413      	add	r3, r2
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	b2d2      	uxtb	r2, r2
 8014ff0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014ff2:	89fb      	ldrh	r3, [r7, #14]
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3710      	adds	r7, #16
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	0801c8f4 	.word	0x0801c8f4
 8015000:	0801cb40 	.word	0x0801cb40
 8015004:	0801c954 	.word	0x0801c954

08015008 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b090      	sub	sp, #64	@ 0x40
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015012:	2300      	movs	r3, #0
 8015014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8015016:	2300      	movs	r3, #0
 8015018:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801501a:	2208      	movs	r2, #8
 801501c:	2100      	movs	r1, #0
 801501e:	48b5      	ldr	r0, [pc, #724]	@ (80152f4 <dhcp_parse_reply+0x2ec>)
 8015020:	f003 fbed 	bl	80187fe <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	895b      	ldrh	r3, [r3, #10]
 8015028:	2b2b      	cmp	r3, #43	@ 0x2b
 801502a:	d802      	bhi.n	8015032 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801502c:	f06f 0301 	mvn.w	r3, #1
 8015030:	e2a7      	b.n	8015582 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015038:	23f0      	movs	r3, #240	@ 0xf0
 801503a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	891b      	ldrh	r3, [r3, #8]
 8015040:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015046:	e00c      	b.n	8015062 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801504a:	895b      	ldrh	r3, [r3, #10]
 801504c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801504e:	1ad3      	subs	r3, r2, r3
 8015050:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015054:	895b      	ldrh	r3, [r3, #10]
 8015056:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015064:	2b00      	cmp	r3, #0
 8015066:	d004      	beq.n	8015072 <dhcp_parse_reply+0x6a>
 8015068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801506a:	895b      	ldrh	r3, [r3, #10]
 801506c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801506e:	429a      	cmp	r2, r3
 8015070:	d2ea      	bcs.n	8015048 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015074:	2b00      	cmp	r3, #0
 8015076:	d102      	bne.n	801507e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015078:	f06f 0301 	mvn.w	r3, #1
 801507c:	e281      	b.n	8015582 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801507e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015080:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8015082:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015084:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8015086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801508c:	e239      	b.n	8015502 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801508e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015092:	4413      	add	r3, r2
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015098:	2300      	movs	r3, #0
 801509a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801509e:	f04f 33ff 	mov.w	r3, #4294967295
 80150a2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80150a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80150a6:	3302      	adds	r3, #2
 80150a8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80150aa:	8bfa      	ldrh	r2, [r7, #30]
 80150ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d202      	bcs.n	80150b8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80150b2:	f06f 0301 	mvn.w	r3, #1
 80150b6:	e264      	b.n	8015582 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80150b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80150ba:	3301      	adds	r3, #1
 80150bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80150be:	8952      	ldrh	r2, [r2, #10]
 80150c0:	4293      	cmp	r3, r2
 80150c2:	da07      	bge.n	80150d4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80150c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80150c6:	3301      	adds	r3, #1
 80150c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80150ca:	4413      	add	r3, r2
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80150d2:	e00b      	b.n	80150ec <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80150d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d004      	beq.n	80150e6 <dhcp_parse_reply+0xde>
 80150dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	e000      	b.n	80150e8 <dhcp_parse_reply+0xe0>
 80150e6:	2300      	movs	r3, #0
 80150e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80150ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80150f4:	7dfb      	ldrb	r3, [r7, #23]
 80150f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80150f8:	f200 812c 	bhi.w	8015354 <dhcp_parse_reply+0x34c>
 80150fc:	a201      	add	r2, pc, #4	@ (adr r2, 8015104 <dhcp_parse_reply+0xfc>)
 80150fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015102:	bf00      	nop
 8015104:	080151f5 	.word	0x080151f5
 8015108:	08015205 	.word	0x08015205
 801510c:	08015355 	.word	0x08015355
 8015110:	08015227 	.word	0x08015227
 8015114:	08015355 	.word	0x08015355
 8015118:	08015355 	.word	0x08015355
 801511c:	08015355 	.word	0x08015355
 8015120:	08015355 	.word	0x08015355
 8015124:	08015355 	.word	0x08015355
 8015128:	08015355 	.word	0x08015355
 801512c:	08015355 	.word	0x08015355
 8015130:	08015355 	.word	0x08015355
 8015134:	08015355 	.word	0x08015355
 8015138:	08015355 	.word	0x08015355
 801513c:	08015355 	.word	0x08015355
 8015140:	08015355 	.word	0x08015355
 8015144:	08015355 	.word	0x08015355
 8015148:	08015355 	.word	0x08015355
 801514c:	08015355 	.word	0x08015355
 8015150:	08015355 	.word	0x08015355
 8015154:	08015355 	.word	0x08015355
 8015158:	08015355 	.word	0x08015355
 801515c:	08015355 	.word	0x08015355
 8015160:	08015355 	.word	0x08015355
 8015164:	08015355 	.word	0x08015355
 8015168:	08015355 	.word	0x08015355
 801516c:	08015355 	.word	0x08015355
 8015170:	08015355 	.word	0x08015355
 8015174:	08015355 	.word	0x08015355
 8015178:	08015355 	.word	0x08015355
 801517c:	08015355 	.word	0x08015355
 8015180:	08015355 	.word	0x08015355
 8015184:	08015355 	.word	0x08015355
 8015188:	08015355 	.word	0x08015355
 801518c:	08015355 	.word	0x08015355
 8015190:	08015355 	.word	0x08015355
 8015194:	08015355 	.word	0x08015355
 8015198:	08015355 	.word	0x08015355
 801519c:	08015355 	.word	0x08015355
 80151a0:	08015355 	.word	0x08015355
 80151a4:	08015355 	.word	0x08015355
 80151a8:	08015355 	.word	0x08015355
 80151ac:	08015355 	.word	0x08015355
 80151b0:	08015355 	.word	0x08015355
 80151b4:	08015355 	.word	0x08015355
 80151b8:	08015355 	.word	0x08015355
 80151bc:	08015355 	.word	0x08015355
 80151c0:	08015355 	.word	0x08015355
 80151c4:	08015355 	.word	0x08015355
 80151c8:	08015355 	.word	0x08015355
 80151cc:	08015355 	.word	0x08015355
 80151d0:	08015253 	.word	0x08015253
 80151d4:	08015275 	.word	0x08015275
 80151d8:	080152b1 	.word	0x080152b1
 80151dc:	080152d3 	.word	0x080152d3
 80151e0:	08015355 	.word	0x08015355
 80151e4:	08015355 	.word	0x08015355
 80151e8:	08015355 	.word	0x08015355
 80151ec:	08015311 	.word	0x08015311
 80151f0:	08015333 	.word	0x08015333
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80151f4:	2300      	movs	r3, #0
 80151f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80151fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80151fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015202:	e0ab      	b.n	801535c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015208:	2b04      	cmp	r3, #4
 801520a:	d009      	beq.n	8015220 <dhcp_parse_reply+0x218>
 801520c:	4b3a      	ldr	r3, [pc, #232]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 801520e:	f240 622e 	movw	r2, #1582	@ 0x62e
 8015212:	493a      	ldr	r1, [pc, #232]	@ (80152fc <dhcp_parse_reply+0x2f4>)
 8015214:	483a      	ldr	r0, [pc, #232]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 8015216:	f003 fa53 	bl	80186c0 <iprintf>
 801521a:	f06f 0305 	mvn.w	r3, #5
 801521e:	e1b0      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015220:	2306      	movs	r3, #6
 8015222:	623b      	str	r3, [r7, #32]
        break;
 8015224:	e09a      	b.n	801535c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015226:	2304      	movs	r3, #4
 8015228:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801522c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015230:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015234:	429a      	cmp	r2, r3
 8015236:	d209      	bcs.n	801524c <dhcp_parse_reply+0x244>
 8015238:	4b2f      	ldr	r3, [pc, #188]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 801523a:	f240 6233 	movw	r2, #1587	@ 0x633
 801523e:	4931      	ldr	r1, [pc, #196]	@ (8015304 <dhcp_parse_reply+0x2fc>)
 8015240:	482f      	ldr	r0, [pc, #188]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 8015242:	f003 fa3d 	bl	80186c0 <iprintf>
 8015246:	f06f 0305 	mvn.w	r3, #5
 801524a:	e19a      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801524c:	2307      	movs	r3, #7
 801524e:	623b      	str	r3, [r7, #32]
        break;
 8015250:	e084      	b.n	801535c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015256:	2b04      	cmp	r3, #4
 8015258:	d009      	beq.n	801526e <dhcp_parse_reply+0x266>
 801525a:	4b27      	ldr	r3, [pc, #156]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 801525c:	f240 6241 	movw	r2, #1601	@ 0x641
 8015260:	4926      	ldr	r1, [pc, #152]	@ (80152fc <dhcp_parse_reply+0x2f4>)
 8015262:	4827      	ldr	r0, [pc, #156]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 8015264:	f003 fa2c 	bl	80186c0 <iprintf>
 8015268:	f06f 0305 	mvn.w	r3, #5
 801526c:	e189      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801526e:	2303      	movs	r3, #3
 8015270:	623b      	str	r3, [r7, #32]
        break;
 8015272:	e073      	b.n	801535c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015278:	2b01      	cmp	r3, #1
 801527a:	d009      	beq.n	8015290 <dhcp_parse_reply+0x288>
 801527c:	4b1e      	ldr	r3, [pc, #120]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 801527e:	f240 624f 	movw	r2, #1615	@ 0x64f
 8015282:	4921      	ldr	r1, [pc, #132]	@ (8015308 <dhcp_parse_reply+0x300>)
 8015284:	481e      	ldr	r0, [pc, #120]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 8015286:	f003 fa1b 	bl	80186c0 <iprintf>
 801528a:	f06f 0305 	mvn.w	r3, #5
 801528e:	e178      	b.n	8015582 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015290:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015292:	2bf0      	cmp	r3, #240	@ 0xf0
 8015294:	d009      	beq.n	80152aa <dhcp_parse_reply+0x2a2>
 8015296:	4b18      	ldr	r3, [pc, #96]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 8015298:	f240 6251 	movw	r2, #1617	@ 0x651
 801529c:	491b      	ldr	r1, [pc, #108]	@ (801530c <dhcp_parse_reply+0x304>)
 801529e:	4818      	ldr	r0, [pc, #96]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 80152a0:	f003 fa0e 	bl	80186c0 <iprintf>
 80152a4:	f06f 0305 	mvn.w	r3, #5
 80152a8:	e16b      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80152aa:	2300      	movs	r3, #0
 80152ac:	623b      	str	r3, [r7, #32]
        break;
 80152ae:	e055      	b.n	801535c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80152b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d009      	beq.n	80152cc <dhcp_parse_reply+0x2c4>
 80152b8:	4b0f      	ldr	r3, [pc, #60]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 80152ba:	f240 6255 	movw	r2, #1621	@ 0x655
 80152be:	4912      	ldr	r1, [pc, #72]	@ (8015308 <dhcp_parse_reply+0x300>)
 80152c0:	480f      	ldr	r0, [pc, #60]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 80152c2:	f003 f9fd 	bl	80186c0 <iprintf>
 80152c6:	f06f 0305 	mvn.w	r3, #5
 80152ca:	e15a      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80152cc:	2301      	movs	r3, #1
 80152ce:	623b      	str	r3, [r7, #32]
        break;
 80152d0:	e044      	b.n	801535c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80152d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152d6:	2b04      	cmp	r3, #4
 80152d8:	d009      	beq.n	80152ee <dhcp_parse_reply+0x2e6>
 80152da:	4b07      	ldr	r3, [pc, #28]	@ (80152f8 <dhcp_parse_reply+0x2f0>)
 80152dc:	f240 6259 	movw	r2, #1625	@ 0x659
 80152e0:	4906      	ldr	r1, [pc, #24]	@ (80152fc <dhcp_parse_reply+0x2f4>)
 80152e2:	4807      	ldr	r0, [pc, #28]	@ (8015300 <dhcp_parse_reply+0x2f8>)
 80152e4:	f003 f9ec 	bl	80186c0 <iprintf>
 80152e8:	f06f 0305 	mvn.w	r3, #5
 80152ec:	e149      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80152ee:	2302      	movs	r3, #2
 80152f0:	623b      	str	r3, [r7, #32]
        break;
 80152f2:	e033      	b.n	801535c <dhcp_parse_reply+0x354>
 80152f4:	20015848 	.word	0x20015848
 80152f8:	0801c8f4 	.word	0x0801c8f4
 80152fc:	0801cb7c 	.word	0x0801cb7c
 8015300:	0801c954 	.word	0x0801c954
 8015304:	0801cb88 	.word	0x0801cb88
 8015308:	0801cb9c 	.word	0x0801cb9c
 801530c:	0801cba8 	.word	0x0801cba8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015314:	2b04      	cmp	r3, #4
 8015316:	d009      	beq.n	801532c <dhcp_parse_reply+0x324>
 8015318:	4b9c      	ldr	r3, [pc, #624]	@ (801558c <dhcp_parse_reply+0x584>)
 801531a:	f240 625d 	movw	r2, #1629	@ 0x65d
 801531e:	499c      	ldr	r1, [pc, #624]	@ (8015590 <dhcp_parse_reply+0x588>)
 8015320:	489c      	ldr	r0, [pc, #624]	@ (8015594 <dhcp_parse_reply+0x58c>)
 8015322:	f003 f9cd 	bl	80186c0 <iprintf>
 8015326:	f06f 0305 	mvn.w	r3, #5
 801532a:	e12a      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801532c:	2304      	movs	r3, #4
 801532e:	623b      	str	r3, [r7, #32]
        break;
 8015330:	e014      	b.n	801535c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015336:	2b04      	cmp	r3, #4
 8015338:	d009      	beq.n	801534e <dhcp_parse_reply+0x346>
 801533a:	4b94      	ldr	r3, [pc, #592]	@ (801558c <dhcp_parse_reply+0x584>)
 801533c:	f240 6261 	movw	r2, #1633	@ 0x661
 8015340:	4993      	ldr	r1, [pc, #588]	@ (8015590 <dhcp_parse_reply+0x588>)
 8015342:	4894      	ldr	r0, [pc, #592]	@ (8015594 <dhcp_parse_reply+0x58c>)
 8015344:	f003 f9bc 	bl	80186c0 <iprintf>
 8015348:	f06f 0305 	mvn.w	r3, #5
 801534c:	e119      	b.n	8015582 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801534e:	2305      	movs	r3, #5
 8015350:	623b      	str	r3, [r7, #32]
        break;
 8015352:	e003      	b.n	801535c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015354:	2300      	movs	r3, #0
 8015356:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801535a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801535c:	7dfb      	ldrb	r3, [r7, #23]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d103      	bne.n	801536a <dhcp_parse_reply+0x362>
      offset++;
 8015362:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015364:	3301      	adds	r3, #1
 8015366:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015368:	e0a1      	b.n	80154ae <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801536a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801536c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015370:	4413      	add	r3, r2
 8015372:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015376:	4293      	cmp	r3, r2
 8015378:	dd02      	ble.n	8015380 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801537a:	f06f 0301 	mvn.w	r3, #1
 801537e:	e100      	b.n	8015582 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015384:	b29a      	uxth	r2, r3
 8015386:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015388:	4413      	add	r3, r2
 801538a:	b29b      	uxth	r3, r3
 801538c:	3302      	adds	r3, #2
 801538e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015390:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015394:	2b00      	cmp	r3, #0
 8015396:	f000 808a 	beq.w	80154ae <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801539a:	2300      	movs	r3, #0
 801539c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801539e:	6a3b      	ldr	r3, [r7, #32]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	db02      	blt.n	80153aa <dhcp_parse_reply+0x3a2>
 80153a4:	6a3b      	ldr	r3, [r7, #32]
 80153a6:	2b07      	cmp	r3, #7
 80153a8:	dd06      	ble.n	80153b8 <dhcp_parse_reply+0x3b0>
 80153aa:	4b78      	ldr	r3, [pc, #480]	@ (801558c <dhcp_parse_reply+0x584>)
 80153ac:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80153b0:	4979      	ldr	r1, [pc, #484]	@ (8015598 <dhcp_parse_reply+0x590>)
 80153b2:	4878      	ldr	r0, [pc, #480]	@ (8015594 <dhcp_parse_reply+0x58c>)
 80153b4:	f003 f984 	bl	80186c0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80153b8:	4a78      	ldr	r2, [pc, #480]	@ (801559c <dhcp_parse_reply+0x594>)
 80153ba:	6a3b      	ldr	r3, [r7, #32]
 80153bc:	4413      	add	r3, r2
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d174      	bne.n	80154ae <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80153c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153c8:	2b04      	cmp	r3, #4
 80153ca:	bf28      	it	cs
 80153cc:	2304      	movcs	r3, #4
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80153d2:	8bfb      	ldrh	r3, [r7, #30]
 80153d4:	8aba      	ldrh	r2, [r7, #20]
 80153d6:	f107 0108 	add.w	r1, r7, #8
 80153da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80153dc:	f7f8 f8ac 	bl	800d538 <pbuf_copy_partial>
 80153e0:	4603      	mov	r3, r0
 80153e2:	461a      	mov	r2, r3
 80153e4:	8abb      	ldrh	r3, [r7, #20]
 80153e6:	4293      	cmp	r3, r2
 80153e8:	d002      	beq.n	80153f0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80153ea:	f06f 0301 	mvn.w	r3, #1
 80153ee:	e0c8      	b.n	8015582 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80153f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153f4:	2b04      	cmp	r3, #4
 80153f6:	d933      	bls.n	8015460 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80153f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153fc:	f003 0303 	and.w	r3, r3, #3
 8015400:	b2db      	uxtb	r3, r3
 8015402:	2b00      	cmp	r3, #0
 8015404:	d009      	beq.n	801541a <dhcp_parse_reply+0x412>
 8015406:	4b61      	ldr	r3, [pc, #388]	@ (801558c <dhcp_parse_reply+0x584>)
 8015408:	f240 6281 	movw	r2, #1665	@ 0x681
 801540c:	4964      	ldr	r1, [pc, #400]	@ (80155a0 <dhcp_parse_reply+0x598>)
 801540e:	4861      	ldr	r0, [pc, #388]	@ (8015594 <dhcp_parse_reply+0x58c>)
 8015410:	f003 f956 	bl	80186c0 <iprintf>
 8015414:	f06f 0305 	mvn.w	r3, #5
 8015418:	e0b3      	b.n	8015582 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801541a:	4a60      	ldr	r2, [pc, #384]	@ (801559c <dhcp_parse_reply+0x594>)
 801541c:	6a3b      	ldr	r3, [r7, #32]
 801541e:	4413      	add	r3, r2
 8015420:	2201      	movs	r2, #1
 8015422:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	4618      	mov	r0, r3
 8015428:	f7f6 f9bf 	bl	800b7aa <lwip_htonl>
 801542c:	4602      	mov	r2, r0
 801542e:	495d      	ldr	r1, [pc, #372]	@ (80155a4 <dhcp_parse_reply+0x59c>)
 8015430:	6a3b      	ldr	r3, [r7, #32]
 8015432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015436:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801543a:	3b04      	subs	r3, #4
 801543c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015440:	8bfb      	ldrh	r3, [r7, #30]
 8015442:	3304      	adds	r3, #4
 8015444:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015446:	8a7a      	ldrh	r2, [r7, #18]
 8015448:	8bfb      	ldrh	r3, [r7, #30]
 801544a:	429a      	cmp	r2, r3
 801544c:	d202      	bcs.n	8015454 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801544e:	f06f 0301 	mvn.w	r3, #1
 8015452:	e096      	b.n	8015582 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015454:	8a7b      	ldrh	r3, [r7, #18]
 8015456:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015458:	6a3b      	ldr	r3, [r7, #32]
 801545a:	3301      	adds	r3, #1
 801545c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801545e:	e79e      	b.n	801539e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015464:	2b04      	cmp	r3, #4
 8015466:	d106      	bne.n	8015476 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	4618      	mov	r0, r3
 801546c:	f7f6 f99d 	bl	800b7aa <lwip_htonl>
 8015470:	4603      	mov	r3, r0
 8015472:	60bb      	str	r3, [r7, #8]
 8015474:	e011      	b.n	801549a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801547a:	2b01      	cmp	r3, #1
 801547c:	d009      	beq.n	8015492 <dhcp_parse_reply+0x48a>
 801547e:	4b43      	ldr	r3, [pc, #268]	@ (801558c <dhcp_parse_reply+0x584>)
 8015480:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8015484:	4948      	ldr	r1, [pc, #288]	@ (80155a8 <dhcp_parse_reply+0x5a0>)
 8015486:	4843      	ldr	r0, [pc, #268]	@ (8015594 <dhcp_parse_reply+0x58c>)
 8015488:	f003 f91a 	bl	80186c0 <iprintf>
 801548c:	f06f 0305 	mvn.w	r3, #5
 8015490:	e077      	b.n	8015582 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015492:	f107 0308 	add.w	r3, r7, #8
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801549a:	4a40      	ldr	r2, [pc, #256]	@ (801559c <dhcp_parse_reply+0x594>)
 801549c:	6a3b      	ldr	r3, [r7, #32]
 801549e:	4413      	add	r3, r2
 80154a0:	2201      	movs	r2, #1
 80154a2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80154a4:	68ba      	ldr	r2, [r7, #8]
 80154a6:	493f      	ldr	r1, [pc, #252]	@ (80155a4 <dhcp_parse_reply+0x59c>)
 80154a8:	6a3b      	ldr	r3, [r7, #32]
 80154aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80154ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154b0:	895b      	ldrh	r3, [r3, #10]
 80154b2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d324      	bcc.n	8015502 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80154b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ba:	895b      	ldrh	r3, [r3, #10]
 80154bc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80154c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c4:	895b      	ldrh	r3, [r3, #10]
 80154c6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80154c8:	1ad3      	subs	r3, r2, r3
 80154ca:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80154cc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80154ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d213      	bcs.n	80154fc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80154d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80154da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d109      	bne.n	80154f4 <dhcp_parse_reply+0x4ec>
 80154e0:	4b2a      	ldr	r3, [pc, #168]	@ (801558c <dhcp_parse_reply+0x584>)
 80154e2:	f240 629d 	movw	r2, #1693	@ 0x69d
 80154e6:	4931      	ldr	r1, [pc, #196]	@ (80155ac <dhcp_parse_reply+0x5a4>)
 80154e8:	482a      	ldr	r0, [pc, #168]	@ (8015594 <dhcp_parse_reply+0x58c>)
 80154ea:	f003 f8e9 	bl	80186c0 <iprintf>
 80154ee:	f06f 0305 	mvn.w	r3, #5
 80154f2:	e046      	b.n	8015582 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80154f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154fa:	e002      	b.n	8015502 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80154fc:	f06f 0301 	mvn.w	r3, #1
 8015500:	e03f      	b.n	8015582 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015504:	2b00      	cmp	r3, #0
 8015506:	d00a      	beq.n	801551e <dhcp_parse_reply+0x516>
 8015508:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801550a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801550c:	429a      	cmp	r2, r3
 801550e:	d206      	bcs.n	801551e <dhcp_parse_reply+0x516>
 8015510:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015512:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015514:	4413      	add	r3, r2
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	2bff      	cmp	r3, #255	@ 0xff
 801551a:	f47f adb8 	bne.w	801508e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801551e:	4b1f      	ldr	r3, [pc, #124]	@ (801559c <dhcp_parse_reply+0x594>)
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d018      	beq.n	8015558 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015526:	4b1f      	ldr	r3, [pc, #124]	@ (80155a4 <dhcp_parse_reply+0x59c>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801552c:	4b1b      	ldr	r3, [pc, #108]	@ (801559c <dhcp_parse_reply+0x594>)
 801552e:	2200      	movs	r2, #0
 8015530:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	2b01      	cmp	r3, #1
 8015536:	d102      	bne.n	801553e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015538:	2301      	movs	r3, #1
 801553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801553c:	e00c      	b.n	8015558 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	2b02      	cmp	r3, #2
 8015542:	d102      	bne.n	801554a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015544:	2301      	movs	r3, #1
 8015546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015548:	e006      	b.n	8015558 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2b03      	cmp	r3, #3
 801554e:	d103      	bne.n	8015558 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015550:	2301      	movs	r3, #1
 8015552:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015554:	2301      	movs	r3, #1
 8015556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555a:	2b00      	cmp	r3, #0
 801555c:	d006      	beq.n	801556c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015562:	236c      	movs	r3, #108	@ 0x6c
 8015564:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015566:	23ec      	movs	r3, #236	@ 0xec
 8015568:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801556a:	e56a      	b.n	8015042 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801556e:	2b00      	cmp	r3, #0
 8015570:	d006      	beq.n	8015580 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015576:	232c      	movs	r3, #44	@ 0x2c
 8015578:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801557a:	236c      	movs	r3, #108	@ 0x6c
 801557c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801557e:	e560      	b.n	8015042 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015580:	2300      	movs	r3, #0
}
 8015582:	4618      	mov	r0, r3
 8015584:	3740      	adds	r7, #64	@ 0x40
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	0801c8f4 	.word	0x0801c8f4
 8015590:	0801cb7c 	.word	0x0801cb7c
 8015594:	0801c954 	.word	0x0801c954
 8015598:	0801cbc0 	.word	0x0801cbc0
 801559c:	20015848 	.word	0x20015848
 80155a0:	0801cbd4 	.word	0x0801cbd4
 80155a4:	20015828 	.word	0x20015828
 80155a8:	0801cbec 	.word	0x0801cbec
 80155ac:	0801cc00 	.word	0x0801cc00

080155b0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08a      	sub	sp, #40	@ 0x28
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80155be:	4b60      	ldr	r3, [pc, #384]	@ (8015740 <dhcp_recv+0x190>)
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80155c4:	6a3b      	ldr	r3, [r7, #32]
 80155c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155c8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f000 809d 	beq.w	8015712 <dhcp_recv+0x162>
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	791b      	ldrb	r3, [r3, #4]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f000 8098 	beq.w	8015712 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	895b      	ldrh	r3, [r3, #10]
 80155e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80155e8:	f240 8095 	bls.w	8015716 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b02      	cmp	r3, #2
 80155f2:	f040 8092 	bne.w	801571a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80155f6:	2300      	movs	r3, #0
 80155f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155fc:	e012      	b.n	8015624 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80155fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015602:	6a3a      	ldr	r2, [r7, #32]
 8015604:	4413      	add	r3, r2
 8015606:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801560a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801560e:	69b9      	ldr	r1, [r7, #24]
 8015610:	440b      	add	r3, r1
 8015612:	7f1b      	ldrb	r3, [r3, #28]
 8015614:	429a      	cmp	r2, r3
 8015616:	f040 8082 	bne.w	801571e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801561a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801561e:	3301      	adds	r3, #1
 8015620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015624:	6a3b      	ldr	r3, [r7, #32]
 8015626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801562a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801562e:	429a      	cmp	r2, r3
 8015630:	d203      	bcs.n	801563a <dhcp_recv+0x8a>
 8015632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015636:	2b05      	cmp	r3, #5
 8015638:	d9e1      	bls.n	80155fe <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801563a:	69bb      	ldr	r3, [r7, #24]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	4618      	mov	r0, r3
 8015640:	f7f6 f8b3 	bl	800b7aa <lwip_htonl>
 8015644:	4602      	mov	r2, r0
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	429a      	cmp	r2, r3
 801564c:	d169      	bne.n	8015722 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801564e:	69f9      	ldr	r1, [r7, #28]
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7ff fcd9 	bl	8015008 <dhcp_parse_reply>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d164      	bne.n	8015726 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801565c:	4b39      	ldr	r3, [pc, #228]	@ (8015744 <dhcp_recv+0x194>)
 801565e:	785b      	ldrb	r3, [r3, #1]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d062      	beq.n	801572a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801566a:	4b37      	ldr	r3, [pc, #220]	@ (8015748 <dhcp_recv+0x198>)
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015670:	7cfb      	ldrb	r3, [r7, #19]
 8015672:	2b05      	cmp	r3, #5
 8015674:	d12a      	bne.n	80156cc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	795b      	ldrb	r3, [r3, #5]
 801567a:	2b01      	cmp	r3, #1
 801567c:	d112      	bne.n	80156a4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801567e:	6979      	ldr	r1, [r7, #20]
 8015680:	6a38      	ldr	r0, [r7, #32]
 8015682:	f7fe fe1d 	bl	80142c0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015686:	6a3b      	ldr	r3, [r7, #32]
 8015688:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801568c:	f003 0308 	and.w	r3, r3, #8
 8015690:	2b00      	cmp	r3, #0
 8015692:	d003      	beq.n	801569c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015694:	6a38      	ldr	r0, [r7, #32]
 8015696:	f7fe fb8d 	bl	8013db4 <dhcp_check>
 801569a:	e049      	b.n	8015730 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801569c:	6a38      	ldr	r0, [r7, #32]
 801569e:	f7ff f86d 	bl	801477c <dhcp_bind>
 80156a2:	e045      	b.n	8015730 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	795b      	ldrb	r3, [r3, #5]
 80156a8:	2b03      	cmp	r3, #3
 80156aa:	d007      	beq.n	80156bc <dhcp_recv+0x10c>
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	795b      	ldrb	r3, [r3, #5]
 80156b0:	2b04      	cmp	r3, #4
 80156b2:	d003      	beq.n	80156bc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80156b8:	2b05      	cmp	r3, #5
 80156ba:	d139      	bne.n	8015730 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80156bc:	6979      	ldr	r1, [r7, #20]
 80156be:	6a38      	ldr	r0, [r7, #32]
 80156c0:	f7fe fdfe 	bl	80142c0 <dhcp_handle_ack>
      dhcp_bind(netif);
 80156c4:	6a38      	ldr	r0, [r7, #32]
 80156c6:	f7ff f859 	bl	801477c <dhcp_bind>
 80156ca:	e031      	b.n	8015730 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80156cc:	7cfb      	ldrb	r3, [r7, #19]
 80156ce:	2b06      	cmp	r3, #6
 80156d0:	d113      	bne.n	80156fa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80156d6:	2b03      	cmp	r3, #3
 80156d8:	d00b      	beq.n	80156f2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	795b      	ldrb	r3, [r3, #5]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d007      	beq.n	80156f2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80156e6:	2b04      	cmp	r3, #4
 80156e8:	d003      	beq.n	80156f2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	795b      	ldrb	r3, [r3, #5]
 80156ee:	2b05      	cmp	r3, #5
 80156f0:	d103      	bne.n	80156fa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80156f2:	6a38      	ldr	r0, [r7, #32]
 80156f4:	f7fe fb44 	bl	8013d80 <dhcp_handle_nak>
 80156f8:	e01a      	b.n	8015730 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80156fa:	7cfb      	ldrb	r3, [r7, #19]
 80156fc:	2b02      	cmp	r3, #2
 80156fe:	d116      	bne.n	801572e <dhcp_recv+0x17e>
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	795b      	ldrb	r3, [r3, #5]
 8015704:	2b06      	cmp	r3, #6
 8015706:	d112      	bne.n	801572e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015708:	6979      	ldr	r1, [r7, #20]
 801570a:	6a38      	ldr	r0, [r7, #32]
 801570c:	f7fe fb86 	bl	8013e1c <dhcp_handle_offer>
 8015710:	e00e      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015712:	bf00      	nop
 8015714:	e00c      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015716:	bf00      	nop
 8015718:	e00a      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801571a:	bf00      	nop
 801571c:	e008      	b.n	8015730 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801571e:	bf00      	nop
 8015720:	e006      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015722:	bf00      	nop
 8015724:	e004      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015726:	bf00      	nop
 8015728:	e002      	b.n	8015730 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801572a:	bf00      	nop
 801572c:	e000      	b.n	8015730 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801572e:	bf00      	nop
  pbuf_free(p);
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f7f7 fcfb 	bl	800d12c <pbuf_free>
}
 8015736:	bf00      	nop
 8015738:	3728      	adds	r7, #40	@ 0x28
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	20009324 	.word	0x20009324
 8015744:	20015848 	.word	0x20015848
 8015748:	20015828 	.word	0x20015828

0801574c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b088      	sub	sp, #32
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	603b      	str	r3, [r7, #0]
 8015758:	4613      	mov	r3, r2
 801575a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d108      	bne.n	8015774 <dhcp_create_msg+0x28>
 8015762:	4b5f      	ldr	r3, [pc, #380]	@ (80158e0 <dhcp_create_msg+0x194>)
 8015764:	f240 7269 	movw	r2, #1897	@ 0x769
 8015768:	495e      	ldr	r1, [pc, #376]	@ (80158e4 <dhcp_create_msg+0x198>)
 801576a:	485f      	ldr	r0, [pc, #380]	@ (80158e8 <dhcp_create_msg+0x19c>)
 801576c:	f002 ffa8 	bl	80186c0 <iprintf>
 8015770:	2300      	movs	r3, #0
 8015772:	e0b1      	b.n	80158d8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d108      	bne.n	801578c <dhcp_create_msg+0x40>
 801577a:	4b59      	ldr	r3, [pc, #356]	@ (80158e0 <dhcp_create_msg+0x194>)
 801577c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8015780:	495a      	ldr	r1, [pc, #360]	@ (80158ec <dhcp_create_msg+0x1a0>)
 8015782:	4859      	ldr	r0, [pc, #356]	@ (80158e8 <dhcp_create_msg+0x19c>)
 8015784:	f002 ff9c 	bl	80186c0 <iprintf>
 8015788:	2300      	movs	r3, #0
 801578a:	e0a5      	b.n	80158d8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801578c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015790:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015794:	2036      	movs	r0, #54	@ 0x36
 8015796:	f7f7 f9e5 	bl	800cb64 <pbuf_alloc>
 801579a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d101      	bne.n	80157a6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	e098      	b.n	80158d8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	895b      	ldrh	r3, [r3, #10]
 80157aa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80157ae:	d206      	bcs.n	80157be <dhcp_create_msg+0x72>
 80157b0:	4b4b      	ldr	r3, [pc, #300]	@ (80158e0 <dhcp_create_msg+0x194>)
 80157b2:	f240 7271 	movw	r2, #1905	@ 0x771
 80157b6:	494e      	ldr	r1, [pc, #312]	@ (80158f0 <dhcp_create_msg+0x1a4>)
 80157b8:	484b      	ldr	r0, [pc, #300]	@ (80158e8 <dhcp_create_msg+0x19c>)
 80157ba:	f002 ff81 	bl	80186c0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80157be:	79fb      	ldrb	r3, [r7, #7]
 80157c0:	2b03      	cmp	r3, #3
 80157c2:	d103      	bne.n	80157cc <dhcp_create_msg+0x80>
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	795b      	ldrb	r3, [r3, #5]
 80157c8:	2b03      	cmp	r3, #3
 80157ca:	d10d      	bne.n	80157e8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	799b      	ldrb	r3, [r3, #6]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d105      	bne.n	80157e0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80157d4:	f002 fe74 	bl	80184c0 <rand>
 80157d8:	4603      	mov	r3, r0
 80157da:	461a      	mov	r2, r3
 80157dc:	4b45      	ldr	r3, [pc, #276]	@ (80158f4 <dhcp_create_msg+0x1a8>)
 80157de:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80157e0:	4b44      	ldr	r3, [pc, #272]	@ (80158f4 <dhcp_create_msg+0x1a8>)
 80157e2:	681a      	ldr	r2, [r3, #0]
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80157ee:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80157f2:	2100      	movs	r1, #0
 80157f4:	6978      	ldr	r0, [r7, #20]
 80157f6:	f003 f802 	bl	80187fe <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	2201      	movs	r2, #1
 80157fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	2201      	movs	r2, #1
 8015804:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4618      	mov	r0, r3
 8015816:	f7f5 ffc8 	bl	800b7aa <lwip_htonl>
 801581a:	4602      	mov	r2, r0
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015820:	79fb      	ldrb	r3, [r7, #7]
 8015822:	2b08      	cmp	r3, #8
 8015824:	d010      	beq.n	8015848 <dhcp_create_msg+0xfc>
 8015826:	79fb      	ldrb	r3, [r7, #7]
 8015828:	2b04      	cmp	r3, #4
 801582a:	d00d      	beq.n	8015848 <dhcp_create_msg+0xfc>
 801582c:	79fb      	ldrb	r3, [r7, #7]
 801582e:	2b07      	cmp	r3, #7
 8015830:	d00a      	beq.n	8015848 <dhcp_create_msg+0xfc>
 8015832:	79fb      	ldrb	r3, [r7, #7]
 8015834:	2b03      	cmp	r3, #3
 8015836:	d10c      	bne.n	8015852 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801583c:	2b05      	cmp	r3, #5
 801583e:	d003      	beq.n	8015848 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	795b      	ldrb	r3, [r3, #5]
 8015844:	2b04      	cmp	r3, #4
 8015846:	d104      	bne.n	8015852 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	3304      	adds	r3, #4
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015852:	2300      	movs	r3, #0
 8015854:	83fb      	strh	r3, [r7, #30]
 8015856:	e00c      	b.n	8015872 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015858:	8bfa      	ldrh	r2, [r7, #30]
 801585a:	8bfb      	ldrh	r3, [r7, #30]
 801585c:	68f9      	ldr	r1, [r7, #12]
 801585e:	440a      	add	r2, r1
 8015860:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8015864:	697a      	ldr	r2, [r7, #20]
 8015866:	4413      	add	r3, r2
 8015868:	460a      	mov	r2, r1
 801586a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801586c:	8bfb      	ldrh	r3, [r7, #30]
 801586e:	3301      	adds	r3, #1
 8015870:	83fb      	strh	r3, [r7, #30]
 8015872:	8bfb      	ldrh	r3, [r7, #30]
 8015874:	2b05      	cmp	r3, #5
 8015876:	d9ef      	bls.n	8015858 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	2200      	movs	r2, #0
 801587c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015880:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8015884:	2200      	movs	r2, #0
 8015886:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801588a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801588e:	2200      	movs	r2, #0
 8015890:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8015894:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8015898:	2200      	movs	r2, #0
 801589a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801589e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80158a8:	2301      	movs	r3, #1
 80158aa:	2235      	movs	r2, #53	@ 0x35
 80158ac:	2000      	movs	r0, #0
 80158ae:	f7ff fadb 	bl	8014e68 <dhcp_option>
 80158b2:	4603      	mov	r3, r0
 80158b4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80158bc:	79fa      	ldrb	r2, [r7, #7]
 80158be:	8a7b      	ldrh	r3, [r7, #18]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7ff fb05 	bl	8014ed0 <dhcp_option_byte>
 80158c6:	4603      	mov	r3, r0
 80158c8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	8a7a      	ldrh	r2, [r7, #18]
 80158d4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80158d6:	69bb      	ldr	r3, [r7, #24]
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3720      	adds	r7, #32
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	0801c8f4 	.word	0x0801c8f4
 80158e4:	0801cc14 	.word	0x0801cc14
 80158e8:	0801c954 	.word	0x0801c954
 80158ec:	0801cc34 	.word	0x0801cc34
 80158f0:	0801cc54 	.word	0x0801cc54
 80158f4:	20015858 	.word	0x20015858

080158f8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b084      	sub	sp, #16
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	4603      	mov	r3, r0
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015906:	89fb      	ldrh	r3, [r7, #14]
 8015908:	1c5a      	adds	r2, r3, #1
 801590a:	81fa      	strh	r2, [r7, #14]
 801590c:	461a      	mov	r2, r3
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	4413      	add	r3, r2
 8015912:	22ff      	movs	r2, #255	@ 0xff
 8015914:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015916:	e007      	b.n	8015928 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015918:	89fb      	ldrh	r3, [r7, #14]
 801591a:	1c5a      	adds	r2, r3, #1
 801591c:	81fa      	strh	r2, [r7, #14]
 801591e:	461a      	mov	r2, r3
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	4413      	add	r3, r2
 8015924:	2200      	movs	r2, #0
 8015926:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015928:	89fb      	ldrh	r3, [r7, #14]
 801592a:	2b43      	cmp	r3, #67	@ 0x43
 801592c:	d904      	bls.n	8015938 <dhcp_option_trailer+0x40>
 801592e:	89fb      	ldrh	r3, [r7, #14]
 8015930:	f003 0303 	and.w	r3, r3, #3
 8015934:	2b00      	cmp	r3, #0
 8015936:	d002      	beq.n	801593e <dhcp_option_trailer+0x46>
 8015938:	89fb      	ldrh	r3, [r7, #14]
 801593a:	2b43      	cmp	r3, #67	@ 0x43
 801593c:	d9ec      	bls.n	8015918 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801593e:	89fb      	ldrh	r3, [r7, #14]
 8015940:	33f0      	adds	r3, #240	@ 0xf0
 8015942:	b29b      	uxth	r3, r3
 8015944:	4619      	mov	r1, r3
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7f7 fa6a 	bl	800ce20 <pbuf_realloc>
}
 801594c:	bf00      	nop
 801594e:	3710      	adds	r7, #16
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d017      	beq.n	8015992 <dhcp_supplied_address+0x3e>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015966:	2b00      	cmp	r3, #0
 8015968:	d013      	beq.n	8015992 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801596e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	795b      	ldrb	r3, [r3, #5]
 8015974:	2b0a      	cmp	r3, #10
 8015976:	d007      	beq.n	8015988 <dhcp_supplied_address+0x34>
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	795b      	ldrb	r3, [r3, #5]
 801597c:	2b05      	cmp	r3, #5
 801597e:	d003      	beq.n	8015988 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015984:	2b04      	cmp	r3, #4
 8015986:	d101      	bne.n	801598c <dhcp_supplied_address+0x38>
 8015988:	2301      	movs	r3, #1
 801598a:	e000      	b.n	801598e <dhcp_supplied_address+0x3a>
 801598c:	2300      	movs	r3, #0
 801598e:	b2db      	uxtb	r3, r3
 8015990:	e000      	b.n	8015994 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015992:	2300      	movs	r3, #0
}
 8015994:	4618      	mov	r0, r3
 8015996:	3714      	adds	r7, #20
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr

080159a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80159a8:	4915      	ldr	r1, [pc, #84]	@ (8015a00 <etharp_free_entry+0x60>)
 80159aa:	687a      	ldr	r2, [r7, #4]
 80159ac:	4613      	mov	r3, r2
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	4413      	add	r3, r2
 80159b2:	00db      	lsls	r3, r3, #3
 80159b4:	440b      	add	r3, r1
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d013      	beq.n	80159e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80159bc:	4910      	ldr	r1, [pc, #64]	@ (8015a00 <etharp_free_entry+0x60>)
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	4613      	mov	r3, r2
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	4413      	add	r3, r2
 80159c6:	00db      	lsls	r3, r3, #3
 80159c8:	440b      	add	r3, r1
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7f7 fbad 	bl	800d12c <pbuf_free>
    arp_table[i].q = NULL;
 80159d2:	490b      	ldr	r1, [pc, #44]	@ (8015a00 <etharp_free_entry+0x60>)
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	4613      	mov	r3, r2
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	4413      	add	r3, r2
 80159dc:	00db      	lsls	r3, r3, #3
 80159de:	440b      	add	r3, r1
 80159e0:	2200      	movs	r2, #0
 80159e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80159e4:	4906      	ldr	r1, [pc, #24]	@ (8015a00 <etharp_free_entry+0x60>)
 80159e6:	687a      	ldr	r2, [r7, #4]
 80159e8:	4613      	mov	r3, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	4413      	add	r3, r2
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	440b      	add	r3, r1
 80159f2:	3314      	adds	r3, #20
 80159f4:	2200      	movs	r2, #0
 80159f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80159f8:	bf00      	nop
 80159fa:	3708      	adds	r7, #8
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	2001585c 	.word	0x2001585c

08015a04 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	607b      	str	r3, [r7, #4]
 8015a0e:	e096      	b.n	8015b3e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a10:	494f      	ldr	r1, [pc, #316]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	4613      	mov	r3, r2
 8015a16:	005b      	lsls	r3, r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	00db      	lsls	r3, r3, #3
 8015a1c:	440b      	add	r3, r1
 8015a1e:	3314      	adds	r3, #20
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a24:	78fb      	ldrb	r3, [r7, #3]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	f000 8086 	beq.w	8015b38 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a2c:	4948      	ldr	r1, [pc, #288]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	4613      	mov	r3, r2
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	4413      	add	r3, r2
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	440b      	add	r3, r1
 8015a3a:	3312      	adds	r3, #18
 8015a3c:	881b      	ldrh	r3, [r3, #0]
 8015a3e:	3301      	adds	r3, #1
 8015a40:	b298      	uxth	r0, r3
 8015a42:	4943      	ldr	r1, [pc, #268]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	4613      	mov	r3, r2
 8015a48:	005b      	lsls	r3, r3, #1
 8015a4a:	4413      	add	r3, r2
 8015a4c:	00db      	lsls	r3, r3, #3
 8015a4e:	440b      	add	r3, r1
 8015a50:	3312      	adds	r3, #18
 8015a52:	4602      	mov	r2, r0
 8015a54:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a56:	493e      	ldr	r1, [pc, #248]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	005b      	lsls	r3, r3, #1
 8015a5e:	4413      	add	r3, r2
 8015a60:	00db      	lsls	r3, r3, #3
 8015a62:	440b      	add	r3, r1
 8015a64:	3312      	adds	r3, #18
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015a6c:	d215      	bcs.n	8015a9a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a6e:	4938      	ldr	r1, [pc, #224]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	4613      	mov	r3, r2
 8015a74:	005b      	lsls	r3, r3, #1
 8015a76:	4413      	add	r3, r2
 8015a78:	00db      	lsls	r3, r3, #3
 8015a7a:	440b      	add	r3, r1
 8015a7c:	3314      	adds	r3, #20
 8015a7e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	d10e      	bne.n	8015aa2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015a84:	4932      	ldr	r1, [pc, #200]	@ (8015b50 <etharp_tmr+0x14c>)
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	4613      	mov	r3, r2
 8015a8a:	005b      	lsls	r3, r3, #1
 8015a8c:	4413      	add	r3, r2
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	440b      	add	r3, r1
 8015a92:	3312      	adds	r3, #18
 8015a94:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a96:	2b04      	cmp	r3, #4
 8015a98:	d903      	bls.n	8015aa2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f7ff ff80 	bl	80159a0 <etharp_free_entry>
 8015aa0:	e04a      	b.n	8015b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015aa2:	492b      	ldr	r1, [pc, #172]	@ (8015b50 <etharp_tmr+0x14c>)
 8015aa4:	687a      	ldr	r2, [r7, #4]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	005b      	lsls	r3, r3, #1
 8015aaa:	4413      	add	r3, r2
 8015aac:	00db      	lsls	r3, r3, #3
 8015aae:	440b      	add	r3, r1
 8015ab0:	3314      	adds	r3, #20
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	2b03      	cmp	r3, #3
 8015ab6:	d10a      	bne.n	8015ace <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015ab8:	4925      	ldr	r1, [pc, #148]	@ (8015b50 <etharp_tmr+0x14c>)
 8015aba:	687a      	ldr	r2, [r7, #4]
 8015abc:	4613      	mov	r3, r2
 8015abe:	005b      	lsls	r3, r3, #1
 8015ac0:	4413      	add	r3, r2
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	440b      	add	r3, r1
 8015ac6:	3314      	adds	r3, #20
 8015ac8:	2204      	movs	r2, #4
 8015aca:	701a      	strb	r2, [r3, #0]
 8015acc:	e034      	b.n	8015b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015ace:	4920      	ldr	r1, [pc, #128]	@ (8015b50 <etharp_tmr+0x14c>)
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	005b      	lsls	r3, r3, #1
 8015ad6:	4413      	add	r3, r2
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	440b      	add	r3, r1
 8015adc:	3314      	adds	r3, #20
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	2b04      	cmp	r3, #4
 8015ae2:	d10a      	bne.n	8015afa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015ae4:	491a      	ldr	r1, [pc, #104]	@ (8015b50 <etharp_tmr+0x14c>)
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	4613      	mov	r3, r2
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	4413      	add	r3, r2
 8015aee:	00db      	lsls	r3, r3, #3
 8015af0:	440b      	add	r3, r1
 8015af2:	3314      	adds	r3, #20
 8015af4:	2202      	movs	r2, #2
 8015af6:	701a      	strb	r2, [r3, #0]
 8015af8:	e01e      	b.n	8015b38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015afa:	4915      	ldr	r1, [pc, #84]	@ (8015b50 <etharp_tmr+0x14c>)
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	4613      	mov	r3, r2
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	4413      	add	r3, r2
 8015b04:	00db      	lsls	r3, r3, #3
 8015b06:	440b      	add	r3, r1
 8015b08:	3314      	adds	r3, #20
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d113      	bne.n	8015b38 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b10:	490f      	ldr	r1, [pc, #60]	@ (8015b50 <etharp_tmr+0x14c>)
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	4613      	mov	r3, r2
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	4413      	add	r3, r2
 8015b1a:	00db      	lsls	r3, r3, #3
 8015b1c:	440b      	add	r3, r1
 8015b1e:	3308      	adds	r3, #8
 8015b20:	6818      	ldr	r0, [r3, #0]
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	4613      	mov	r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4413      	add	r3, r2
 8015b2a:	00db      	lsls	r3, r3, #3
 8015b2c:	4a08      	ldr	r2, [pc, #32]	@ (8015b50 <etharp_tmr+0x14c>)
 8015b2e:	4413      	add	r3, r2
 8015b30:	3304      	adds	r3, #4
 8015b32:	4619      	mov	r1, r3
 8015b34:	f000 fe72 	bl	801681c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	607b      	str	r3, [r7, #4]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b09      	cmp	r3, #9
 8015b42:	f77f af65 	ble.w	8015a10 <etharp_tmr+0xc>
      }
    }
  }
}
 8015b46:	bf00      	nop
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	2001585c 	.word	0x2001585c

08015b54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b08a      	sub	sp, #40	@ 0x28
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	607a      	str	r2, [r7, #4]
 8015b60:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015b62:	230a      	movs	r3, #10
 8015b64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015b66:	230a      	movs	r3, #10
 8015b68:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015b6a:	230a      	movs	r3, #10
 8015b6c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015b72:	230a      	movs	r3, #10
 8015b74:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	83bb      	strh	r3, [r7, #28]
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	837b      	strh	r3, [r7, #26]
 8015b7e:	2300      	movs	r3, #0
 8015b80:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b82:	2300      	movs	r3, #0
 8015b84:	843b      	strh	r3, [r7, #32]
 8015b86:	e0ae      	b.n	8015ce6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015b88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b8c:	49a6      	ldr	r1, [pc, #664]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015b8e:	4613      	mov	r3, r2
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	4413      	add	r3, r2
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	440b      	add	r3, r1
 8015b98:	3314      	adds	r3, #20
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015b9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015ba2:	2b0a      	cmp	r3, #10
 8015ba4:	d105      	bne.n	8015bb2 <etharp_find_entry+0x5e>
 8015ba6:	7dfb      	ldrb	r3, [r7, #23]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d102      	bne.n	8015bb2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015bac:	8c3b      	ldrh	r3, [r7, #32]
 8015bae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015bb0:	e095      	b.n	8015cde <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015bb2:	7dfb      	ldrb	r3, [r7, #23]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f000 8092 	beq.w	8015cde <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015bba:	7dfb      	ldrb	r3, [r7, #23]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d009      	beq.n	8015bd4 <etharp_find_entry+0x80>
 8015bc0:	7dfb      	ldrb	r3, [r7, #23]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	d806      	bhi.n	8015bd4 <etharp_find_entry+0x80>
 8015bc6:	4b99      	ldr	r3, [pc, #612]	@ (8015e2c <etharp_find_entry+0x2d8>)
 8015bc8:	f240 1223 	movw	r2, #291	@ 0x123
 8015bcc:	4998      	ldr	r1, [pc, #608]	@ (8015e30 <etharp_find_entry+0x2dc>)
 8015bce:	4899      	ldr	r0, [pc, #612]	@ (8015e34 <etharp_find_entry+0x2e0>)
 8015bd0:	f002 fd76 	bl	80186c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d020      	beq.n	8015c1c <etharp_find_entry+0xc8>
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	6819      	ldr	r1, [r3, #0]
 8015bde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015be2:	4891      	ldr	r0, [pc, #580]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015be4:	4613      	mov	r3, r2
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	4413      	add	r3, r2
 8015bea:	00db      	lsls	r3, r3, #3
 8015bec:	4403      	add	r3, r0
 8015bee:	3304      	adds	r3, #4
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	4299      	cmp	r1, r3
 8015bf4:	d112      	bne.n	8015c1c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d00c      	beq.n	8015c16 <etharp_find_entry+0xc2>
 8015bfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c00:	4989      	ldr	r1, [pc, #548]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c02:	4613      	mov	r3, r2
 8015c04:	005b      	lsls	r3, r3, #1
 8015c06:	4413      	add	r3, r2
 8015c08:	00db      	lsls	r3, r3, #3
 8015c0a:	440b      	add	r3, r1
 8015c0c:	3308      	adds	r3, #8
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d102      	bne.n	8015c1c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c1a:	e100      	b.n	8015e1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c1c:	7dfb      	ldrb	r3, [r7, #23]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d140      	bne.n	8015ca4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c26:	4980      	ldr	r1, [pc, #512]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c28:	4613      	mov	r3, r2
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	4413      	add	r3, r2
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	440b      	add	r3, r1
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d01a      	beq.n	8015c6e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3c:	497a      	ldr	r1, [pc, #488]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c3e:	4613      	mov	r3, r2
 8015c40:	005b      	lsls	r3, r3, #1
 8015c42:	4413      	add	r3, r2
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	440b      	add	r3, r1
 8015c48:	3312      	adds	r3, #18
 8015c4a:	881b      	ldrh	r3, [r3, #0]
 8015c4c:	8bba      	ldrh	r2, [r7, #28]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d845      	bhi.n	8015cde <etharp_find_entry+0x18a>
            old_queue = i;
 8015c52:	8c3b      	ldrh	r3, [r7, #32]
 8015c54:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c5a:	4973      	ldr	r1, [pc, #460]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	005b      	lsls	r3, r3, #1
 8015c60:	4413      	add	r3, r2
 8015c62:	00db      	lsls	r3, r3, #3
 8015c64:	440b      	add	r3, r1
 8015c66:	3312      	adds	r3, #18
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	83bb      	strh	r3, [r7, #28]
 8015c6c:	e037      	b.n	8015cde <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c72:	496d      	ldr	r1, [pc, #436]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	440b      	add	r3, r1
 8015c7e:	3312      	adds	r3, #18
 8015c80:	881b      	ldrh	r3, [r3, #0]
 8015c82:	8b7a      	ldrh	r2, [r7, #26]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d82a      	bhi.n	8015cde <etharp_find_entry+0x18a>
            old_pending = i;
 8015c88:	8c3b      	ldrh	r3, [r7, #32]
 8015c8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8015c8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c90:	4965      	ldr	r1, [pc, #404]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015c92:	4613      	mov	r3, r2
 8015c94:	005b      	lsls	r3, r3, #1
 8015c96:	4413      	add	r3, r2
 8015c98:	00db      	lsls	r3, r3, #3
 8015c9a:	440b      	add	r3, r1
 8015c9c:	3312      	adds	r3, #18
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	837b      	strh	r3, [r7, #26]
 8015ca2:	e01c      	b.n	8015cde <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015ca4:	7dfb      	ldrb	r3, [r7, #23]
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d919      	bls.n	8015cde <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015caa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cae:	495e      	ldr	r1, [pc, #376]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015cb0:	4613      	mov	r3, r2
 8015cb2:	005b      	lsls	r3, r3, #1
 8015cb4:	4413      	add	r3, r2
 8015cb6:	00db      	lsls	r3, r3, #3
 8015cb8:	440b      	add	r3, r1
 8015cba:	3312      	adds	r3, #18
 8015cbc:	881b      	ldrh	r3, [r3, #0]
 8015cbe:	8b3a      	ldrh	r2, [r7, #24]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d80c      	bhi.n	8015cde <etharp_find_entry+0x18a>
            old_stable = i;
 8015cc4:	8c3b      	ldrh	r3, [r7, #32]
 8015cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015cc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ccc:	4956      	ldr	r1, [pc, #344]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015cce:	4613      	mov	r3, r2
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	4413      	add	r3, r2
 8015cd4:	00db      	lsls	r3, r3, #3
 8015cd6:	440b      	add	r3, r1
 8015cd8:	3312      	adds	r3, #18
 8015cda:	881b      	ldrh	r3, [r3, #0]
 8015cdc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cde:	8c3b      	ldrh	r3, [r7, #32]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	843b      	strh	r3, [r7, #32]
 8015ce6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cea:	2b09      	cmp	r3, #9
 8015cec:	f77f af4c 	ble.w	8015b88 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015cf0:	7afb      	ldrb	r3, [r7, #11]
 8015cf2:	f003 0302 	and.w	r3, r3, #2
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d108      	bne.n	8015d0c <etharp_find_entry+0x1b8>
 8015cfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015cfe:	2b0a      	cmp	r3, #10
 8015d00:	d107      	bne.n	8015d12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d02:	7afb      	ldrb	r3, [r7, #11]
 8015d04:	f003 0301 	and.w	r3, r3, #1
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d102      	bne.n	8015d12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d10:	e085      	b.n	8015e1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015d16:	2b09      	cmp	r3, #9
 8015d18:	dc02      	bgt.n	8015d20 <etharp_find_entry+0x1cc>
    i = empty;
 8015d1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015d1c:	843b      	strh	r3, [r7, #32]
 8015d1e:	e039      	b.n	8015d94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015d24:	2b09      	cmp	r3, #9
 8015d26:	dc14      	bgt.n	8015d52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d30:	493d      	ldr	r1, [pc, #244]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015d32:	4613      	mov	r3, r2
 8015d34:	005b      	lsls	r3, r3, #1
 8015d36:	4413      	add	r3, r2
 8015d38:	00db      	lsls	r3, r3, #3
 8015d3a:	440b      	add	r3, r1
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d018      	beq.n	8015d74 <etharp_find_entry+0x220>
 8015d42:	4b3a      	ldr	r3, [pc, #232]	@ (8015e2c <etharp_find_entry+0x2d8>)
 8015d44:	f240 126d 	movw	r2, #365	@ 0x16d
 8015d48:	493b      	ldr	r1, [pc, #236]	@ (8015e38 <etharp_find_entry+0x2e4>)
 8015d4a:	483a      	ldr	r0, [pc, #232]	@ (8015e34 <etharp_find_entry+0x2e0>)
 8015d4c:	f002 fcb8 	bl	80186c0 <iprintf>
 8015d50:	e010      	b.n	8015d74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015d52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015d56:	2b09      	cmp	r3, #9
 8015d58:	dc02      	bgt.n	8015d60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015d5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015d5c:	843b      	strh	r3, [r7, #32]
 8015d5e:	e009      	b.n	8015d74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015d60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015d64:	2b09      	cmp	r3, #9
 8015d66:	dc02      	bgt.n	8015d6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015d68:	8bfb      	ldrh	r3, [r7, #30]
 8015d6a:	843b      	strh	r3, [r7, #32]
 8015d6c:	e002      	b.n	8015d74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d72:	e054      	b.n	8015e1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d78:	2b09      	cmp	r3, #9
 8015d7a:	dd06      	ble.n	8015d8a <etharp_find_entry+0x236>
 8015d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8015e2c <etharp_find_entry+0x2d8>)
 8015d7e:	f240 127f 	movw	r2, #383	@ 0x17f
 8015d82:	492e      	ldr	r1, [pc, #184]	@ (8015e3c <etharp_find_entry+0x2e8>)
 8015d84:	482b      	ldr	r0, [pc, #172]	@ (8015e34 <etharp_find_entry+0x2e0>)
 8015d86:	f002 fc9b 	bl	80186c0 <iprintf>
    etharp_free_entry(i);
 8015d8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7ff fe06 	bl	80159a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d98:	2b09      	cmp	r3, #9
 8015d9a:	dd06      	ble.n	8015daa <etharp_find_entry+0x256>
 8015d9c:	4b23      	ldr	r3, [pc, #140]	@ (8015e2c <etharp_find_entry+0x2d8>)
 8015d9e:	f240 1283 	movw	r2, #387	@ 0x183
 8015da2:	4926      	ldr	r1, [pc, #152]	@ (8015e3c <etharp_find_entry+0x2e8>)
 8015da4:	4823      	ldr	r0, [pc, #140]	@ (8015e34 <etharp_find_entry+0x2e0>)
 8015da6:	f002 fc8b 	bl	80186c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015daa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dae:	491e      	ldr	r1, [pc, #120]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015db0:	4613      	mov	r3, r2
 8015db2:	005b      	lsls	r3, r3, #1
 8015db4:	4413      	add	r3, r2
 8015db6:	00db      	lsls	r3, r3, #3
 8015db8:	440b      	add	r3, r1
 8015dba:	3314      	adds	r3, #20
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d006      	beq.n	8015dd0 <etharp_find_entry+0x27c>
 8015dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8015e2c <etharp_find_entry+0x2d8>)
 8015dc4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015dc8:	491d      	ldr	r1, [pc, #116]	@ (8015e40 <etharp_find_entry+0x2ec>)
 8015dca:	481a      	ldr	r0, [pc, #104]	@ (8015e34 <etharp_find_entry+0x2e0>)
 8015dcc:	f002 fc78 	bl	80186c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00b      	beq.n	8015dee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015dd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	6819      	ldr	r1, [r3, #0]
 8015dde:	4812      	ldr	r0, [pc, #72]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015de0:	4613      	mov	r3, r2
 8015de2:	005b      	lsls	r3, r3, #1
 8015de4:	4413      	add	r3, r2
 8015de6:	00db      	lsls	r3, r3, #3
 8015de8:	4403      	add	r3, r0
 8015dea:	3304      	adds	r3, #4
 8015dec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015dee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015df2:	490d      	ldr	r1, [pc, #52]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015df4:	4613      	mov	r3, r2
 8015df6:	005b      	lsls	r3, r3, #1
 8015df8:	4413      	add	r3, r2
 8015dfa:	00db      	lsls	r3, r3, #3
 8015dfc:	440b      	add	r3, r1
 8015dfe:	3312      	adds	r3, #18
 8015e00:	2200      	movs	r2, #0
 8015e02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e08:	4907      	ldr	r1, [pc, #28]	@ (8015e28 <etharp_find_entry+0x2d4>)
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4413      	add	r3, r2
 8015e10:	00db      	lsls	r3, r3, #3
 8015e12:	440b      	add	r3, r1
 8015e14:	3308      	adds	r3, #8
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3728      	adds	r7, #40	@ 0x28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	2001585c 	.word	0x2001585c
 8015e2c:	0801cc94 	.word	0x0801cc94
 8015e30:	0801cccc 	.word	0x0801cccc
 8015e34:	0801cd0c 	.word	0x0801cd0c
 8015e38:	0801cd34 	.word	0x0801cd34
 8015e3c:	0801cd4c 	.word	0x0801cd4c
 8015e40:	0801cd60 	.word	0x0801cd60

08015e44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b088      	sub	sp, #32
 8015e48:	af02      	add	r7, sp, #8
 8015e4a:	60f8      	str	r0, [r7, #12]
 8015e4c:	60b9      	str	r1, [r7, #8]
 8015e4e:	607a      	str	r2, [r7, #4]
 8015e50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015e58:	2b06      	cmp	r3, #6
 8015e5a:	d006      	beq.n	8015e6a <etharp_update_arp_entry+0x26>
 8015e5c:	4b48      	ldr	r3, [pc, #288]	@ (8015f80 <etharp_update_arp_entry+0x13c>)
 8015e5e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015e62:	4948      	ldr	r1, [pc, #288]	@ (8015f84 <etharp_update_arp_entry+0x140>)
 8015e64:	4848      	ldr	r0, [pc, #288]	@ (8015f88 <etharp_update_arp_entry+0x144>)
 8015e66:	f002 fc2b 	bl	80186c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d012      	beq.n	8015e96 <etharp_update_arp_entry+0x52>
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d00e      	beq.n	8015e96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	68f9      	ldr	r1, [r7, #12]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f001 f9c0 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8015e84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d105      	bne.n	8015e96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e92:	2be0      	cmp	r3, #224	@ 0xe0
 8015e94:	d102      	bne.n	8015e9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e96:	f06f 030f 	mvn.w	r3, #15
 8015e9a:	e06c      	b.n	8015f76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015e9c:	78fb      	ldrb	r3, [r7, #3]
 8015e9e:	68fa      	ldr	r2, [r7, #12]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	68b8      	ldr	r0, [r7, #8]
 8015ea4:	f7ff fe56 	bl	8015b54 <etharp_find_entry>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015eac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	da02      	bge.n	8015eba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015eb4:	8afb      	ldrh	r3, [r7, #22]
 8015eb6:	b25b      	sxtb	r3, r3
 8015eb8:	e05d      	b.n	8015f76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015eba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ebe:	4933      	ldr	r1, [pc, #204]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	005b      	lsls	r3, r3, #1
 8015ec4:	4413      	add	r3, r2
 8015ec6:	00db      	lsls	r3, r3, #3
 8015ec8:	440b      	add	r3, r1
 8015eca:	3314      	adds	r3, #20
 8015ecc:	2202      	movs	r2, #2
 8015ece:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015ed0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ed4:	492d      	ldr	r1, [pc, #180]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	005b      	lsls	r3, r3, #1
 8015eda:	4413      	add	r3, r2
 8015edc:	00db      	lsls	r3, r3, #3
 8015ede:	440b      	add	r3, r1
 8015ee0:	3308      	adds	r3, #8
 8015ee2:	68fa      	ldr	r2, [r7, #12]
 8015ee4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015ee6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eea:	4613      	mov	r3, r2
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	4413      	add	r3, r2
 8015ef0:	00db      	lsls	r3, r3, #3
 8015ef2:	3308      	adds	r3, #8
 8015ef4:	4a25      	ldr	r2, [pc, #148]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015ef6:	4413      	add	r3, r2
 8015ef8:	3304      	adds	r3, #4
 8015efa:	2206      	movs	r2, #6
 8015efc:	6879      	ldr	r1, [r7, #4]
 8015efe:	4618      	mov	r0, r3
 8015f00:	f002 fd13 	bl	801892a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f08:	4920      	ldr	r1, [pc, #128]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015f0a:	4613      	mov	r3, r2
 8015f0c:	005b      	lsls	r3, r3, #1
 8015f0e:	4413      	add	r3, r2
 8015f10:	00db      	lsls	r3, r3, #3
 8015f12:	440b      	add	r3, r1
 8015f14:	3312      	adds	r3, #18
 8015f16:	2200      	movs	r2, #0
 8015f18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f1e:	491b      	ldr	r1, [pc, #108]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015f20:	4613      	mov	r3, r2
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	4413      	add	r3, r2
 8015f26:	00db      	lsls	r3, r3, #3
 8015f28:	440b      	add	r3, r1
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d021      	beq.n	8015f74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f34:	4915      	ldr	r1, [pc, #84]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015f36:	4613      	mov	r3, r2
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	4413      	add	r3, r2
 8015f3c:	00db      	lsls	r3, r3, #3
 8015f3e:	440b      	add	r3, r1
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f48:	4910      	ldr	r1, [pc, #64]	@ (8015f8c <etharp_update_arp_entry+0x148>)
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	440b      	add	r3, r1
 8015f54:	2200      	movs	r2, #0
 8015f56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8015f5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6939      	ldr	r1, [r7, #16]
 8015f68:	68f8      	ldr	r0, [r7, #12]
 8015f6a:	f002 f869 	bl	8018040 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015f6e:	6938      	ldr	r0, [r7, #16]
 8015f70:	f7f7 f8dc 	bl	800d12c <pbuf_free>
  }
  return ERR_OK;
 8015f74:	2300      	movs	r3, #0
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3718      	adds	r7, #24
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	0801cc94 	.word	0x0801cc94
 8015f84:	0801cd8c 	.word	0x0801cd8c
 8015f88:	0801cd0c 	.word	0x0801cd0c
 8015f8c:	2001585c 	.word	0x2001585c

08015f90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f98:	2300      	movs	r3, #0
 8015f9a:	60fb      	str	r3, [r7, #12]
 8015f9c:	e01e      	b.n	8015fdc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015f9e:	4913      	ldr	r1, [pc, #76]	@ (8015fec <etharp_cleanup_netif+0x5c>)
 8015fa0:	68fa      	ldr	r2, [r7, #12]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	3314      	adds	r3, #20
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015fb2:	7afb      	ldrb	r3, [r7, #11]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d00e      	beq.n	8015fd6 <etharp_cleanup_netif+0x46>
 8015fb8:	490c      	ldr	r1, [pc, #48]	@ (8015fec <etharp_cleanup_netif+0x5c>)
 8015fba:	68fa      	ldr	r2, [r7, #12]
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	005b      	lsls	r3, r3, #1
 8015fc0:	4413      	add	r3, r2
 8015fc2:	00db      	lsls	r3, r3, #3
 8015fc4:	440b      	add	r3, r1
 8015fc6:	3308      	adds	r3, #8
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d102      	bne.n	8015fd6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	f7ff fce5 	bl	80159a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	60fb      	str	r3, [r7, #12]
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b09      	cmp	r3, #9
 8015fe0:	dddd      	ble.n	8015f9e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015fe2:	bf00      	nop
 8015fe4:	bf00      	nop
 8015fe6:	3710      	adds	r7, #16
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	2001585c 	.word	0x2001585c

08015ff0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015ff0:	b5b0      	push	{r4, r5, r7, lr}
 8015ff2:	b08a      	sub	sp, #40	@ 0x28
 8015ff4:	af04      	add	r7, sp, #16
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d107      	bne.n	8016010 <etharp_input+0x20>
 8016000:	4b3f      	ldr	r3, [pc, #252]	@ (8016100 <etharp_input+0x110>)
 8016002:	f240 228a 	movw	r2, #650	@ 0x28a
 8016006:	493f      	ldr	r1, [pc, #252]	@ (8016104 <etharp_input+0x114>)
 8016008:	483f      	ldr	r0, [pc, #252]	@ (8016108 <etharp_input+0x118>)
 801600a:	f002 fb59 	bl	80186c0 <iprintf>
 801600e:	e074      	b.n	80160fa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	881b      	ldrh	r3, [r3, #0]
 801601a:	b29b      	uxth	r3, r3
 801601c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016020:	d10c      	bne.n	801603c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016026:	2b06      	cmp	r3, #6
 8016028:	d108      	bne.n	801603c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801602e:	2b04      	cmp	r3, #4
 8016030:	d104      	bne.n	801603c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	885b      	ldrh	r3, [r3, #2]
 8016036:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016038:	2b08      	cmp	r3, #8
 801603a:	d003      	beq.n	8016044 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f7f7 f875 	bl	800d12c <pbuf_free>
    return;
 8016042:	e05a      	b.n	80160fa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	330e      	adds	r3, #14
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	3318      	adds	r3, #24
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	3304      	adds	r3, #4
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d102      	bne.n	8016064 <etharp_input+0x74>
    for_us = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	75fb      	strb	r3, [r7, #23]
 8016062:	e009      	b.n	8016078 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	3304      	adds	r3, #4
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	429a      	cmp	r2, r3
 801606e:	bf0c      	ite	eq
 8016070:	2301      	moveq	r3, #1
 8016072:	2300      	movne	r3, #0
 8016074:	b2db      	uxtb	r3, r3
 8016076:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	f103 0208 	add.w	r2, r3, #8
 801607e:	7dfb      	ldrb	r3, [r7, #23]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d001      	beq.n	8016088 <etharp_input+0x98>
 8016084:	2301      	movs	r3, #1
 8016086:	e000      	b.n	801608a <etharp_input+0x9a>
 8016088:	2302      	movs	r3, #2
 801608a:	f107 010c 	add.w	r1, r7, #12
 801608e:	6838      	ldr	r0, [r7, #0]
 8016090:	f7ff fed8 	bl	8015e44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	88db      	ldrh	r3, [r3, #6]
 8016098:	b29b      	uxth	r3, r3
 801609a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801609e:	d003      	beq.n	80160a8 <etharp_input+0xb8>
 80160a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80160a4:	d01e      	beq.n	80160e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80160a6:	e025      	b.n	80160f4 <etharp_input+0x104>
      if (for_us) {
 80160a8:	7dfb      	ldrb	r3, [r7, #23]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d021      	beq.n	80160f2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 80160c0:	683b      	ldr	r3, [r7, #0]
 80160c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80160c4:	693a      	ldr	r2, [r7, #16]
 80160c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80160c8:	2102      	movs	r1, #2
 80160ca:	9103      	str	r1, [sp, #12]
 80160cc:	f107 010c 	add.w	r1, r7, #12
 80160d0:	9102      	str	r1, [sp, #8]
 80160d2:	9201      	str	r2, [sp, #4]
 80160d4:	9300      	str	r3, [sp, #0]
 80160d6:	462b      	mov	r3, r5
 80160d8:	4622      	mov	r2, r4
 80160da:	4601      	mov	r1, r0
 80160dc:	6838      	ldr	r0, [r7, #0]
 80160de:	f000 faef 	bl	80166c0 <etharp_raw>
      break;
 80160e2:	e006      	b.n	80160f2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80160e4:	f107 030c 	add.w	r3, r7, #12
 80160e8:	4619      	mov	r1, r3
 80160ea:	6838      	ldr	r0, [r7, #0]
 80160ec:	f7fe fa02 	bl	80144f4 <dhcp_arp_reply>
      break;
 80160f0:	e000      	b.n	80160f4 <etharp_input+0x104>
      break;
 80160f2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7f7 f819 	bl	800d12c <pbuf_free>
}
 80160fa:	3718      	adds	r7, #24
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bdb0      	pop	{r4, r5, r7, pc}
 8016100:	0801cc94 	.word	0x0801cc94
 8016104:	0801cde4 	.word	0x0801cde4
 8016108:	0801cd0c 	.word	0x0801cd0c

0801610c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b086      	sub	sp, #24
 8016110:	af02      	add	r7, sp, #8
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	4613      	mov	r3, r2
 8016118:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801611a:	79fa      	ldrb	r2, [r7, #7]
 801611c:	4944      	ldr	r1, [pc, #272]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 801611e:	4613      	mov	r3, r2
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	4413      	add	r3, r2
 8016124:	00db      	lsls	r3, r3, #3
 8016126:	440b      	add	r3, r1
 8016128:	3314      	adds	r3, #20
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	2b01      	cmp	r3, #1
 801612e:	d806      	bhi.n	801613e <etharp_output_to_arp_index+0x32>
 8016130:	4b40      	ldr	r3, [pc, #256]	@ (8016234 <etharp_output_to_arp_index+0x128>)
 8016132:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016136:	4940      	ldr	r1, [pc, #256]	@ (8016238 <etharp_output_to_arp_index+0x12c>)
 8016138:	4840      	ldr	r0, [pc, #256]	@ (801623c <etharp_output_to_arp_index+0x130>)
 801613a:	f002 fac1 	bl	80186c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801613e:	79fa      	ldrb	r2, [r7, #7]
 8016140:	493b      	ldr	r1, [pc, #236]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 8016142:	4613      	mov	r3, r2
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	4413      	add	r3, r2
 8016148:	00db      	lsls	r3, r3, #3
 801614a:	440b      	add	r3, r1
 801614c:	3314      	adds	r3, #20
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	2b02      	cmp	r3, #2
 8016152:	d153      	bne.n	80161fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016154:	79fa      	ldrb	r2, [r7, #7]
 8016156:	4936      	ldr	r1, [pc, #216]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 8016158:	4613      	mov	r3, r2
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	4413      	add	r3, r2
 801615e:	00db      	lsls	r3, r3, #3
 8016160:	440b      	add	r3, r1
 8016162:	3312      	adds	r3, #18
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801616a:	d919      	bls.n	80161a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801616c:	79fa      	ldrb	r2, [r7, #7]
 801616e:	4613      	mov	r3, r2
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	4413      	add	r3, r2
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	4a2e      	ldr	r2, [pc, #184]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 8016178:	4413      	add	r3, r2
 801617a:	3304      	adds	r3, #4
 801617c:	4619      	mov	r1, r3
 801617e:	68f8      	ldr	r0, [r7, #12]
 8016180:	f000 fb4c 	bl	801681c <etharp_request>
 8016184:	4603      	mov	r3, r0
 8016186:	2b00      	cmp	r3, #0
 8016188:	d138      	bne.n	80161fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801618a:	79fa      	ldrb	r2, [r7, #7]
 801618c:	4928      	ldr	r1, [pc, #160]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 801618e:	4613      	mov	r3, r2
 8016190:	005b      	lsls	r3, r3, #1
 8016192:	4413      	add	r3, r2
 8016194:	00db      	lsls	r3, r3, #3
 8016196:	440b      	add	r3, r1
 8016198:	3314      	adds	r3, #20
 801619a:	2203      	movs	r2, #3
 801619c:	701a      	strb	r2, [r3, #0]
 801619e:	e02d      	b.n	80161fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161a0:	79fa      	ldrb	r2, [r7, #7]
 80161a2:	4923      	ldr	r1, [pc, #140]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 80161a4:	4613      	mov	r3, r2
 80161a6:	005b      	lsls	r3, r3, #1
 80161a8:	4413      	add	r3, r2
 80161aa:	00db      	lsls	r3, r3, #3
 80161ac:	440b      	add	r3, r1
 80161ae:	3312      	adds	r3, #18
 80161b0:	881b      	ldrh	r3, [r3, #0]
 80161b2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80161b6:	d321      	bcc.n	80161fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80161b8:	79fa      	ldrb	r2, [r7, #7]
 80161ba:	4613      	mov	r3, r2
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4413      	add	r3, r2
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	4a1b      	ldr	r2, [pc, #108]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 80161c4:	4413      	add	r3, r2
 80161c6:	1d19      	adds	r1, r3, #4
 80161c8:	79fa      	ldrb	r2, [r7, #7]
 80161ca:	4613      	mov	r3, r2
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	4413      	add	r3, r2
 80161d0:	00db      	lsls	r3, r3, #3
 80161d2:	3308      	adds	r3, #8
 80161d4:	4a16      	ldr	r2, [pc, #88]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 80161d6:	4413      	add	r3, r2
 80161d8:	3304      	adds	r3, #4
 80161da:	461a      	mov	r2, r3
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f000 fafb 	bl	80167d8 <etharp_request_dst>
 80161e2:	4603      	mov	r3, r0
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d109      	bne.n	80161fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161e8:	79fa      	ldrb	r2, [r7, #7]
 80161ea:	4911      	ldr	r1, [pc, #68]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 80161ec:	4613      	mov	r3, r2
 80161ee:	005b      	lsls	r3, r3, #1
 80161f0:	4413      	add	r3, r2
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	440b      	add	r3, r1
 80161f6:	3314      	adds	r3, #20
 80161f8:	2203      	movs	r2, #3
 80161fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8016202:	79fa      	ldrb	r2, [r7, #7]
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	3308      	adds	r3, #8
 801620e:	4a08      	ldr	r2, [pc, #32]	@ (8016230 <etharp_output_to_arp_index+0x124>)
 8016210:	4413      	add	r3, r2
 8016212:	3304      	adds	r3, #4
 8016214:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016218:	9200      	str	r2, [sp, #0]
 801621a:	460a      	mov	r2, r1
 801621c:	68b9      	ldr	r1, [r7, #8]
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f001 ff0e 	bl	8018040 <ethernet_output>
 8016224:	4603      	mov	r3, r0
}
 8016226:	4618      	mov	r0, r3
 8016228:	3710      	adds	r7, #16
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}
 801622e:	bf00      	nop
 8016230:	2001585c 	.word	0x2001585c
 8016234:	0801cc94 	.word	0x0801cc94
 8016238:	0801ce04 	.word	0x0801ce04
 801623c:	0801cd0c 	.word	0x0801cd0c

08016240 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b08a      	sub	sp, #40	@ 0x28
 8016244:	af02      	add	r7, sp, #8
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d106      	bne.n	8016264 <etharp_output+0x24>
 8016256:	4b73      	ldr	r3, [pc, #460]	@ (8016424 <etharp_output+0x1e4>)
 8016258:	f240 321e 	movw	r2, #798	@ 0x31e
 801625c:	4972      	ldr	r1, [pc, #456]	@ (8016428 <etharp_output+0x1e8>)
 801625e:	4873      	ldr	r0, [pc, #460]	@ (801642c <etharp_output+0x1ec>)
 8016260:	f002 fa2e 	bl	80186c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d106      	bne.n	8016278 <etharp_output+0x38>
 801626a:	4b6e      	ldr	r3, [pc, #440]	@ (8016424 <etharp_output+0x1e4>)
 801626c:	f240 321f 	movw	r2, #799	@ 0x31f
 8016270:	496f      	ldr	r1, [pc, #444]	@ (8016430 <etharp_output+0x1f0>)
 8016272:	486e      	ldr	r0, [pc, #440]	@ (801642c <etharp_output+0x1ec>)
 8016274:	f002 fa24 	bl	80186c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d106      	bne.n	801628c <etharp_output+0x4c>
 801627e:	4b69      	ldr	r3, [pc, #420]	@ (8016424 <etharp_output+0x1e4>)
 8016280:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016284:	496b      	ldr	r1, [pc, #428]	@ (8016434 <etharp_output+0x1f4>)
 8016286:	4869      	ldr	r0, [pc, #420]	@ (801642c <etharp_output+0x1ec>)
 8016288:	f002 fa1a 	bl	80186c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68f9      	ldr	r1, [r7, #12]
 8016292:	4618      	mov	r0, r3
 8016294:	f000 ffb6 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d002      	beq.n	80162a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801629e:	4b66      	ldr	r3, [pc, #408]	@ (8016438 <etharp_output+0x1f8>)
 80162a0:	61fb      	str	r3, [r7, #28]
 80162a2:	e0af      	b.n	8016404 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80162ac:	2be0      	cmp	r3, #224	@ 0xe0
 80162ae:	d118      	bne.n	80162e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80162b0:	2301      	movs	r3, #1
 80162b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80162b4:	2300      	movs	r3, #0
 80162b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80162b8:	235e      	movs	r3, #94	@ 0x5e
 80162ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	3301      	adds	r3, #1
 80162c0:	781b      	ldrb	r3, [r3, #0]
 80162c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	3302      	adds	r3, #2
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	3303      	adds	r3, #3
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80162da:	f107 0310 	add.w	r3, r7, #16
 80162de:	61fb      	str	r3, [r7, #28]
 80162e0:	e090      	b.n	8016404 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	3304      	adds	r3, #4
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	405a      	eors	r2, r3
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	3308      	adds	r3, #8
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	4013      	ands	r3, r2
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d012      	beq.n	8016320 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016300:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016304:	4293      	cmp	r3, r2
 8016306:	d00b      	beq.n	8016320 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	330c      	adds	r3, #12
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d003      	beq.n	801631a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	330c      	adds	r3, #12
 8016316:	61bb      	str	r3, [r7, #24]
 8016318:	e002      	b.n	8016320 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801631a:	f06f 0303 	mvn.w	r3, #3
 801631e:	e07d      	b.n	801641c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016320:	4b46      	ldr	r3, [pc, #280]	@ (801643c <etharp_output+0x1fc>)
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	4619      	mov	r1, r3
 8016326:	4a46      	ldr	r2, [pc, #280]	@ (8016440 <etharp_output+0x200>)
 8016328:	460b      	mov	r3, r1
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	440b      	add	r3, r1
 801632e:	00db      	lsls	r3, r3, #3
 8016330:	4413      	add	r3, r2
 8016332:	3314      	adds	r3, #20
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	2b01      	cmp	r3, #1
 8016338:	d925      	bls.n	8016386 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801633a:	4b40      	ldr	r3, [pc, #256]	@ (801643c <etharp_output+0x1fc>)
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	4619      	mov	r1, r3
 8016340:	4a3f      	ldr	r2, [pc, #252]	@ (8016440 <etharp_output+0x200>)
 8016342:	460b      	mov	r3, r1
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	440b      	add	r3, r1
 8016348:	00db      	lsls	r3, r3, #3
 801634a:	4413      	add	r3, r2
 801634c:	3308      	adds	r3, #8
 801634e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016350:	68fa      	ldr	r2, [r7, #12]
 8016352:	429a      	cmp	r2, r3
 8016354:	d117      	bne.n	8016386 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	4b38      	ldr	r3, [pc, #224]	@ (801643c <etharp_output+0x1fc>)
 801635c:	781b      	ldrb	r3, [r3, #0]
 801635e:	4618      	mov	r0, r3
 8016360:	4937      	ldr	r1, [pc, #220]	@ (8016440 <etharp_output+0x200>)
 8016362:	4603      	mov	r3, r0
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	4403      	add	r3, r0
 8016368:	00db      	lsls	r3, r3, #3
 801636a:	440b      	add	r3, r1
 801636c:	3304      	adds	r3, #4
 801636e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016370:	429a      	cmp	r2, r3
 8016372:	d108      	bne.n	8016386 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016374:	4b31      	ldr	r3, [pc, #196]	@ (801643c <etharp_output+0x1fc>)
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	461a      	mov	r2, r3
 801637a:	68b9      	ldr	r1, [r7, #8]
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	f7ff fec5 	bl	801610c <etharp_output_to_arp_index>
 8016382:	4603      	mov	r3, r0
 8016384:	e04a      	b.n	801641c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016386:	2300      	movs	r3, #0
 8016388:	75fb      	strb	r3, [r7, #23]
 801638a:	e031      	b.n	80163f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801638c:	7dfa      	ldrb	r2, [r7, #23]
 801638e:	492c      	ldr	r1, [pc, #176]	@ (8016440 <etharp_output+0x200>)
 8016390:	4613      	mov	r3, r2
 8016392:	005b      	lsls	r3, r3, #1
 8016394:	4413      	add	r3, r2
 8016396:	00db      	lsls	r3, r3, #3
 8016398:	440b      	add	r3, r1
 801639a:	3314      	adds	r3, #20
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b01      	cmp	r3, #1
 80163a0:	d923      	bls.n	80163ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163a2:	7dfa      	ldrb	r2, [r7, #23]
 80163a4:	4926      	ldr	r1, [pc, #152]	@ (8016440 <etharp_output+0x200>)
 80163a6:	4613      	mov	r3, r2
 80163a8:	005b      	lsls	r3, r3, #1
 80163aa:	4413      	add	r3, r2
 80163ac:	00db      	lsls	r3, r3, #3
 80163ae:	440b      	add	r3, r1
 80163b0:	3308      	adds	r3, #8
 80163b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163b4:	68fa      	ldr	r2, [r7, #12]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d117      	bne.n	80163ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80163ba:	69bb      	ldr	r3, [r7, #24]
 80163bc:	6819      	ldr	r1, [r3, #0]
 80163be:	7dfa      	ldrb	r2, [r7, #23]
 80163c0:	481f      	ldr	r0, [pc, #124]	@ (8016440 <etharp_output+0x200>)
 80163c2:	4613      	mov	r3, r2
 80163c4:	005b      	lsls	r3, r3, #1
 80163c6:	4413      	add	r3, r2
 80163c8:	00db      	lsls	r3, r3, #3
 80163ca:	4403      	add	r3, r0
 80163cc:	3304      	adds	r3, #4
 80163ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80163d0:	4299      	cmp	r1, r3
 80163d2:	d10a      	bne.n	80163ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80163d4:	4a19      	ldr	r2, [pc, #100]	@ (801643c <etharp_output+0x1fc>)
 80163d6:	7dfb      	ldrb	r3, [r7, #23]
 80163d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80163da:	7dfb      	ldrb	r3, [r7, #23]
 80163dc:	461a      	mov	r2, r3
 80163de:	68b9      	ldr	r1, [r7, #8]
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7ff fe93 	bl	801610c <etharp_output_to_arp_index>
 80163e6:	4603      	mov	r3, r0
 80163e8:	e018      	b.n	801641c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163ea:	7dfb      	ldrb	r3, [r7, #23]
 80163ec:	3301      	adds	r3, #1
 80163ee:	75fb      	strb	r3, [r7, #23]
 80163f0:	7dfb      	ldrb	r3, [r7, #23]
 80163f2:	2b09      	cmp	r3, #9
 80163f4:	d9ca      	bls.n	801638c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80163f6:	68ba      	ldr	r2, [r7, #8]
 80163f8:	69b9      	ldr	r1, [r7, #24]
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	f000 f822 	bl	8016444 <etharp_query>
 8016400:	4603      	mov	r3, r0
 8016402:	e00b      	b.n	801641c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801640a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	69fb      	ldr	r3, [r7, #28]
 8016412:	68b9      	ldr	r1, [r7, #8]
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f001 fe13 	bl	8018040 <ethernet_output>
 801641a:	4603      	mov	r3, r0
}
 801641c:	4618      	mov	r0, r3
 801641e:	3720      	adds	r7, #32
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}
 8016424:	0801cc94 	.word	0x0801cc94
 8016428:	0801cde4 	.word	0x0801cde4
 801642c:	0801cd0c 	.word	0x0801cd0c
 8016430:	0801ce34 	.word	0x0801ce34
 8016434:	0801cdd4 	.word	0x0801cdd4
 8016438:	080267dc 	.word	0x080267dc
 801643c:	2001594c 	.word	0x2001594c
 8016440:	2001585c 	.word	0x2001585c

08016444 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08c      	sub	sp, #48	@ 0x30
 8016448:	af02      	add	r7, sp, #8
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	332a      	adds	r3, #42	@ 0x2a
 8016454:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016456:	23ff      	movs	r3, #255	@ 0xff
 8016458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	68f9      	ldr	r1, [r7, #12]
 8016466:	4618      	mov	r0, r3
 8016468:	f000 fecc 	bl	8017204 <ip4_addr_isbroadcast_u32>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d10c      	bne.n	801648c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801647a:	2be0      	cmp	r3, #224	@ 0xe0
 801647c:	d006      	beq.n	801648c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d003      	beq.n	801648c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d102      	bne.n	8016492 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801648c:	f06f 030f 	mvn.w	r3, #15
 8016490:	e101      	b.n	8016696 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016492:	68fa      	ldr	r2, [r7, #12]
 8016494:	2101      	movs	r1, #1
 8016496:	68b8      	ldr	r0, [r7, #8]
 8016498:	f7ff fb5c 	bl	8015b54 <etharp_find_entry>
 801649c:	4603      	mov	r3, r0
 801649e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	da02      	bge.n	80164ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164a8:	8a7b      	ldrh	r3, [r7, #18]
 80164aa:	b25b      	sxtb	r3, r3
 80164ac:	e0f3      	b.n	8016696 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80164ae:	8a7b      	ldrh	r3, [r7, #18]
 80164b0:	2b7e      	cmp	r3, #126	@ 0x7e
 80164b2:	d906      	bls.n	80164c2 <etharp_query+0x7e>
 80164b4:	4b7a      	ldr	r3, [pc, #488]	@ (80166a0 <etharp_query+0x25c>)
 80164b6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80164ba:	497a      	ldr	r1, [pc, #488]	@ (80166a4 <etharp_query+0x260>)
 80164bc:	487a      	ldr	r0, [pc, #488]	@ (80166a8 <etharp_query+0x264>)
 80164be:	f002 f8ff 	bl	80186c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80164c2:	8a7b      	ldrh	r3, [r7, #18]
 80164c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80164c6:	7c7a      	ldrb	r2, [r7, #17]
 80164c8:	4978      	ldr	r1, [pc, #480]	@ (80166ac <etharp_query+0x268>)
 80164ca:	4613      	mov	r3, r2
 80164cc:	005b      	lsls	r3, r3, #1
 80164ce:	4413      	add	r3, r2
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	440b      	add	r3, r1
 80164d4:	3314      	adds	r3, #20
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d115      	bne.n	8016508 <etharp_query+0xc4>
    is_new_entry = 1;
 80164dc:	2301      	movs	r3, #1
 80164de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80164e0:	7c7a      	ldrb	r2, [r7, #17]
 80164e2:	4972      	ldr	r1, [pc, #456]	@ (80166ac <etharp_query+0x268>)
 80164e4:	4613      	mov	r3, r2
 80164e6:	005b      	lsls	r3, r3, #1
 80164e8:	4413      	add	r3, r2
 80164ea:	00db      	lsls	r3, r3, #3
 80164ec:	440b      	add	r3, r1
 80164ee:	3314      	adds	r3, #20
 80164f0:	2201      	movs	r2, #1
 80164f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80164f4:	7c7a      	ldrb	r2, [r7, #17]
 80164f6:	496d      	ldr	r1, [pc, #436]	@ (80166ac <etharp_query+0x268>)
 80164f8:	4613      	mov	r3, r2
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	4413      	add	r3, r2
 80164fe:	00db      	lsls	r3, r3, #3
 8016500:	440b      	add	r3, r1
 8016502:	3308      	adds	r3, #8
 8016504:	68fa      	ldr	r2, [r7, #12]
 8016506:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016508:	7c7a      	ldrb	r2, [r7, #17]
 801650a:	4968      	ldr	r1, [pc, #416]	@ (80166ac <etharp_query+0x268>)
 801650c:	4613      	mov	r3, r2
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	4413      	add	r3, r2
 8016512:	00db      	lsls	r3, r3, #3
 8016514:	440b      	add	r3, r1
 8016516:	3314      	adds	r3, #20
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	2b01      	cmp	r3, #1
 801651c:	d011      	beq.n	8016542 <etharp_query+0xfe>
 801651e:	7c7a      	ldrb	r2, [r7, #17]
 8016520:	4962      	ldr	r1, [pc, #392]	@ (80166ac <etharp_query+0x268>)
 8016522:	4613      	mov	r3, r2
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	440b      	add	r3, r1
 801652c:	3314      	adds	r3, #20
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	2b01      	cmp	r3, #1
 8016532:	d806      	bhi.n	8016542 <etharp_query+0xfe>
 8016534:	4b5a      	ldr	r3, [pc, #360]	@ (80166a0 <etharp_query+0x25c>)
 8016536:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801653a:	495d      	ldr	r1, [pc, #372]	@ (80166b0 <etharp_query+0x26c>)
 801653c:	485a      	ldr	r0, [pc, #360]	@ (80166a8 <etharp_query+0x264>)
 801653e:	f002 f8bf 	bl	80186c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016542:	6a3b      	ldr	r3, [r7, #32]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d102      	bne.n	801654e <etharp_query+0x10a>
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d10c      	bne.n	8016568 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801654e:	68b9      	ldr	r1, [r7, #8]
 8016550:	68f8      	ldr	r0, [r7, #12]
 8016552:	f000 f963 	bl	801681c <etharp_request>
 8016556:	4603      	mov	r3, r0
 8016558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d102      	bne.n	8016568 <etharp_query+0x124>
      return result;
 8016562:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016566:	e096      	b.n	8016696 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d106      	bne.n	801657c <etharp_query+0x138>
 801656e:	4b4c      	ldr	r3, [pc, #304]	@ (80166a0 <etharp_query+0x25c>)
 8016570:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016574:	494f      	ldr	r1, [pc, #316]	@ (80166b4 <etharp_query+0x270>)
 8016576:	484c      	ldr	r0, [pc, #304]	@ (80166a8 <etharp_query+0x264>)
 8016578:	f002 f8a2 	bl	80186c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801657c:	7c7a      	ldrb	r2, [r7, #17]
 801657e:	494b      	ldr	r1, [pc, #300]	@ (80166ac <etharp_query+0x268>)
 8016580:	4613      	mov	r3, r2
 8016582:	005b      	lsls	r3, r3, #1
 8016584:	4413      	add	r3, r2
 8016586:	00db      	lsls	r3, r3, #3
 8016588:	440b      	add	r3, r1
 801658a:	3314      	adds	r3, #20
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	2b01      	cmp	r3, #1
 8016590:	d917      	bls.n	80165c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016592:	4a49      	ldr	r2, [pc, #292]	@ (80166b8 <etharp_query+0x274>)
 8016594:	7c7b      	ldrb	r3, [r7, #17]
 8016596:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016598:	7c7a      	ldrb	r2, [r7, #17]
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	3308      	adds	r3, #8
 80165a4:	4a41      	ldr	r2, [pc, #260]	@ (80166ac <etharp_query+0x268>)
 80165a6:	4413      	add	r3, r2
 80165a8:	3304      	adds	r3, #4
 80165aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80165ae:	9200      	str	r2, [sp, #0]
 80165b0:	697a      	ldr	r2, [r7, #20]
 80165b2:	6879      	ldr	r1, [r7, #4]
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f001 fd43 	bl	8018040 <ethernet_output>
 80165ba:	4603      	mov	r3, r0
 80165bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80165c0:	e067      	b.n	8016692 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165c2:	7c7a      	ldrb	r2, [r7, #17]
 80165c4:	4939      	ldr	r1, [pc, #228]	@ (80166ac <etharp_query+0x268>)
 80165c6:	4613      	mov	r3, r2
 80165c8:	005b      	lsls	r3, r3, #1
 80165ca:	4413      	add	r3, r2
 80165cc:	00db      	lsls	r3, r3, #3
 80165ce:	440b      	add	r3, r1
 80165d0:	3314      	adds	r3, #20
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d15c      	bne.n	8016692 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80165d8:	2300      	movs	r3, #0
 80165da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165e0:	e01c      	b.n	801661c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	895a      	ldrh	r2, [r3, #10]
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	891b      	ldrh	r3, [r3, #8]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d10a      	bne.n	8016604 <etharp_query+0x1c0>
 80165ee:	69fb      	ldr	r3, [r7, #28]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d006      	beq.n	8016604 <etharp_query+0x1c0>
 80165f6:	4b2a      	ldr	r3, [pc, #168]	@ (80166a0 <etharp_query+0x25c>)
 80165f8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80165fc:	492f      	ldr	r1, [pc, #188]	@ (80166bc <etharp_query+0x278>)
 80165fe:	482a      	ldr	r0, [pc, #168]	@ (80166a8 <etharp_query+0x264>)
 8016600:	f002 f85e 	bl	80186c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	7b1b      	ldrb	r3, [r3, #12]
 8016608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801660c:	2b00      	cmp	r3, #0
 801660e:	d002      	beq.n	8016616 <etharp_query+0x1d2>
        copy_needed = 1;
 8016610:	2301      	movs	r3, #1
 8016612:	61bb      	str	r3, [r7, #24]
        break;
 8016614:	e005      	b.n	8016622 <etharp_query+0x1de>
      }
      p = p->next;
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d1df      	bne.n	80165e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d007      	beq.n	8016638 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016628:	687a      	ldr	r2, [r7, #4]
 801662a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801662e:	200e      	movs	r0, #14
 8016630:	f7f6 fff4 	bl	800d61c <pbuf_clone>
 8016634:	61f8      	str	r0, [r7, #28]
 8016636:	e004      	b.n	8016642 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801663c:	69f8      	ldr	r0, [r7, #28]
 801663e:	f7f6 fe1b 	bl	800d278 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d021      	beq.n	801668c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016648:	7c7a      	ldrb	r2, [r7, #17]
 801664a:	4918      	ldr	r1, [pc, #96]	@ (80166ac <etharp_query+0x268>)
 801664c:	4613      	mov	r3, r2
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	4413      	add	r3, r2
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	440b      	add	r3, r1
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d00a      	beq.n	8016672 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801665c:	7c7a      	ldrb	r2, [r7, #17]
 801665e:	4913      	ldr	r1, [pc, #76]	@ (80166ac <etharp_query+0x268>)
 8016660:	4613      	mov	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	440b      	add	r3, r1
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	4618      	mov	r0, r3
 801666e:	f7f6 fd5d 	bl	800d12c <pbuf_free>
      }
      arp_table[i].q = p;
 8016672:	7c7a      	ldrb	r2, [r7, #17]
 8016674:	490d      	ldr	r1, [pc, #52]	@ (80166ac <etharp_query+0x268>)
 8016676:	4613      	mov	r3, r2
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	69fa      	ldr	r2, [r7, #28]
 8016682:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016684:	2300      	movs	r3, #0
 8016686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801668a:	e002      	b.n	8016692 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801668c:	23ff      	movs	r3, #255	@ 0xff
 801668e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016692:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016696:	4618      	mov	r0, r3
 8016698:	3728      	adds	r7, #40	@ 0x28
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	0801cc94 	.word	0x0801cc94
 80166a4:	0801ce40 	.word	0x0801ce40
 80166a8:	0801cd0c 	.word	0x0801cd0c
 80166ac:	2001585c 	.word	0x2001585c
 80166b0:	0801ce50 	.word	0x0801ce50
 80166b4:	0801ce34 	.word	0x0801ce34
 80166b8:	2001594c 	.word	0x2001594c
 80166bc:	0801ce78 	.word	0x0801ce78

080166c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b08a      	sub	sp, #40	@ 0x28
 80166c4:	af02      	add	r7, sp, #8
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
 80166cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80166ce:	2300      	movs	r3, #0
 80166d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d106      	bne.n	80166e6 <etharp_raw+0x26>
 80166d8:	4b3a      	ldr	r3, [pc, #232]	@ (80167c4 <etharp_raw+0x104>)
 80166da:	f240 4257 	movw	r2, #1111	@ 0x457
 80166de:	493a      	ldr	r1, [pc, #232]	@ (80167c8 <etharp_raw+0x108>)
 80166e0:	483a      	ldr	r0, [pc, #232]	@ (80167cc <etharp_raw+0x10c>)
 80166e2:	f001 ffed 	bl	80186c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80166e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166ea:	211c      	movs	r1, #28
 80166ec:	200e      	movs	r0, #14
 80166ee:	f7f6 fa39 	bl	800cb64 <pbuf_alloc>
 80166f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80166f4:	69bb      	ldr	r3, [r7, #24]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d102      	bne.n	8016700 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80166fa:	f04f 33ff 	mov.w	r3, #4294967295
 80166fe:	e05d      	b.n	80167bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	895b      	ldrh	r3, [r3, #10]
 8016704:	2b1b      	cmp	r3, #27
 8016706:	d806      	bhi.n	8016716 <etharp_raw+0x56>
 8016708:	4b2e      	ldr	r3, [pc, #184]	@ (80167c4 <etharp_raw+0x104>)
 801670a:	f240 4262 	movw	r2, #1122	@ 0x462
 801670e:	4930      	ldr	r1, [pc, #192]	@ (80167d0 <etharp_raw+0x110>)
 8016710:	482e      	ldr	r0, [pc, #184]	@ (80167cc <etharp_raw+0x10c>)
 8016712:	f001 ffd5 	bl	80186c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016716:	69bb      	ldr	r3, [r7, #24]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801671c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801671e:	4618      	mov	r0, r3
 8016720:	f7f5 f82e 	bl	800b780 <lwip_htons>
 8016724:	4603      	mov	r3, r0
 8016726:	461a      	mov	r2, r3
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016732:	2b06      	cmp	r3, #6
 8016734:	d006      	beq.n	8016744 <etharp_raw+0x84>
 8016736:	4b23      	ldr	r3, [pc, #140]	@ (80167c4 <etharp_raw+0x104>)
 8016738:	f240 4269 	movw	r2, #1129	@ 0x469
 801673c:	4925      	ldr	r1, [pc, #148]	@ (80167d4 <etharp_raw+0x114>)
 801673e:	4823      	ldr	r0, [pc, #140]	@ (80167cc <etharp_raw+0x10c>)
 8016740:	f001 ffbe 	bl	80186c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	3308      	adds	r3, #8
 8016748:	2206      	movs	r2, #6
 801674a:	6839      	ldr	r1, [r7, #0]
 801674c:	4618      	mov	r0, r3
 801674e:	f002 f8ec 	bl	801892a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	3312      	adds	r3, #18
 8016756:	2206      	movs	r2, #6
 8016758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801675a:	4618      	mov	r0, r3
 801675c:	f002 f8e5 	bl	801892a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	330e      	adds	r3, #14
 8016764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016766:	6812      	ldr	r2, [r2, #0]
 8016768:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	3318      	adds	r3, #24
 801676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016770:	6812      	ldr	r2, [r2, #0]
 8016772:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
 801677a:	2200      	movs	r2, #0
 801677c:	f042 0201 	orr.w	r2, r2, #1
 8016780:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	2200      	movs	r2, #0
 8016786:	f042 0208 	orr.w	r2, r2, #8
 801678a:	709a      	strb	r2, [r3, #2]
 801678c:	2200      	movs	r2, #0
 801678e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	2206      	movs	r2, #6
 8016794:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	2204      	movs	r2, #4
 801679a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801679c:	f640 0306 	movw	r3, #2054	@ 0x806
 80167a0:	9300      	str	r3, [sp, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	68ba      	ldr	r2, [r7, #8]
 80167a6:	69b9      	ldr	r1, [r7, #24]
 80167a8:	68f8      	ldr	r0, [r7, #12]
 80167aa:	f001 fc49 	bl	8018040 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80167ae:	69b8      	ldr	r0, [r7, #24]
 80167b0:	f7f6 fcbc 	bl	800d12c <pbuf_free>
  p = NULL;
 80167b4:	2300      	movs	r3, #0
 80167b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80167b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80167bc:	4618      	mov	r0, r3
 80167be:	3720      	adds	r7, #32
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}
 80167c4:	0801cc94 	.word	0x0801cc94
 80167c8:	0801cde4 	.word	0x0801cde4
 80167cc:	0801cd0c 	.word	0x0801cd0c
 80167d0:	0801ce94 	.word	0x0801ce94
 80167d4:	0801cec8 	.word	0x0801cec8

080167d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b088      	sub	sp, #32
 80167dc:	af04      	add	r7, sp, #16
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167f4:	2201      	movs	r2, #1
 80167f6:	9203      	str	r2, [sp, #12]
 80167f8:	68ba      	ldr	r2, [r7, #8]
 80167fa:	9202      	str	r2, [sp, #8]
 80167fc:	4a06      	ldr	r2, [pc, #24]	@ (8016818 <etharp_request_dst+0x40>)
 80167fe:	9201      	str	r2, [sp, #4]
 8016800:	9300      	str	r3, [sp, #0]
 8016802:	4603      	mov	r3, r0
 8016804:	687a      	ldr	r2, [r7, #4]
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f7ff ff5a 	bl	80166c0 <etharp_raw>
 801680c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801680e:	4618      	mov	r0, r3
 8016810:	3710      	adds	r7, #16
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	080267e4 	.word	0x080267e4

0801681c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016826:	4a05      	ldr	r2, [pc, #20]	@ (801683c <etharp_request+0x20>)
 8016828:	6839      	ldr	r1, [r7, #0]
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f7ff ffd4 	bl	80167d8 <etharp_request_dst>
 8016830:	4603      	mov	r3, r0
}
 8016832:	4618      	mov	r0, r3
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	080267dc 	.word	0x080267dc

08016840 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b08e      	sub	sp, #56	@ 0x38
 8016844:	af04      	add	r7, sp, #16
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801684a:	4b8b      	ldr	r3, [pc, #556]	@ (8016a78 <icmp_input+0x238>)
 801684c:	689b      	ldr	r3, [r3, #8]
 801684e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	f003 030f 	and.w	r3, r3, #15
 8016858:	b2db      	uxtb	r3, r3
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	b2db      	uxtb	r3, r3
 801685e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016860:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016862:	2b13      	cmp	r3, #19
 8016864:	f240 80f1 	bls.w	8016a4a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	895b      	ldrh	r3, [r3, #10]
 801686c:	2b03      	cmp	r3, #3
 801686e:	f240 80ee 	bls.w	8016a4e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801687c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016880:	2b00      	cmp	r3, #0
 8016882:	f000 80db 	beq.w	8016a3c <icmp_input+0x1fc>
 8016886:	2b08      	cmp	r3, #8
 8016888:	f040 80db 	bne.w	8016a42 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801688c:	4b7b      	ldr	r3, [pc, #492]	@ (8016a7c <icmp_input+0x23c>)
 801688e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016890:	4b79      	ldr	r3, [pc, #484]	@ (8016a78 <icmp_input+0x238>)
 8016892:	695b      	ldr	r3, [r3, #20]
 8016894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016898:	2be0      	cmp	r3, #224	@ 0xe0
 801689a:	f000 80df 	beq.w	8016a5c <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801689e:	4b76      	ldr	r3, [pc, #472]	@ (8016a78 <icmp_input+0x238>)
 80168a0:	695b      	ldr	r3, [r3, #20]
 80168a2:	4a75      	ldr	r2, [pc, #468]	@ (8016a78 <icmp_input+0x238>)
 80168a4:	6812      	ldr	r2, [r2, #0]
 80168a6:	4611      	mov	r1, r2
 80168a8:	4618      	mov	r0, r3
 80168aa:	f000 fcab 	bl	8017204 <ip4_addr_isbroadcast_u32>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f040 80d5 	bne.w	8016a60 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	891b      	ldrh	r3, [r3, #8]
 80168ba:	2b07      	cmp	r3, #7
 80168bc:	f240 80c9 	bls.w	8016a52 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f7f5 f8b7 	bl	800ba34 <inet_chksum_pbuf>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d003      	beq.n	80168d4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f7f6 fc2d 	bl	800d12c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80168d2:	e0ce      	b.n	8016a72 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168d6:	330e      	adds	r3, #14
 80168d8:	4619      	mov	r1, r3
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7f6 fb90 	bl	800d000 <pbuf_add_header>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d04b      	beq.n	801697e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	891a      	ldrh	r2, [r3, #8]
 80168ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168ec:	4413      	add	r3, r2
 80168ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	891b      	ldrh	r3, [r3, #8]
 80168f4:	8b7a      	ldrh	r2, [r7, #26]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	f0c0 80b4 	bcc.w	8016a64 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80168fc:	8b7b      	ldrh	r3, [r7, #26]
 80168fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016902:	4619      	mov	r1, r3
 8016904:	200e      	movs	r0, #14
 8016906:	f7f6 f92d 	bl	800cb64 <pbuf_alloc>
 801690a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	2b00      	cmp	r3, #0
 8016910:	f000 80aa 	beq.w	8016a68 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	895b      	ldrh	r3, [r3, #10]
 8016918:	461a      	mov	r2, r3
 801691a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801691c:	3308      	adds	r3, #8
 801691e:	429a      	cmp	r2, r3
 8016920:	d203      	bcs.n	801692a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016922:	6978      	ldr	r0, [r7, #20]
 8016924:	f7f6 fc02 	bl	800d12c <pbuf_free>
          goto icmperr;
 8016928:	e09f      	b.n	8016a6a <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016932:	4618      	mov	r0, r3
 8016934:	f001 fff9 	bl	801892a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016938:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801693a:	4619      	mov	r1, r3
 801693c:	6978      	ldr	r0, [r7, #20]
 801693e:	f7f6 fb6f 	bl	800d020 <pbuf_remove_header>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d009      	beq.n	801695c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016948:	4b4d      	ldr	r3, [pc, #308]	@ (8016a80 <icmp_input+0x240>)
 801694a:	22b6      	movs	r2, #182	@ 0xb6
 801694c:	494d      	ldr	r1, [pc, #308]	@ (8016a84 <icmp_input+0x244>)
 801694e:	484e      	ldr	r0, [pc, #312]	@ (8016a88 <icmp_input+0x248>)
 8016950:	f001 feb6 	bl	80186c0 <iprintf>
          pbuf_free(r);
 8016954:	6978      	ldr	r0, [r7, #20]
 8016956:	f7f6 fbe9 	bl	800d12c <pbuf_free>
          goto icmperr;
 801695a:	e086      	b.n	8016a6a <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801695c:	6879      	ldr	r1, [r7, #4]
 801695e:	6978      	ldr	r0, [r7, #20]
 8016960:	f7f6 fd18 	bl	800d394 <pbuf_copy>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d003      	beq.n	8016972 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801696a:	6978      	ldr	r0, [r7, #20]
 801696c:	f7f6 fbde 	bl	800d12c <pbuf_free>
          goto icmperr;
 8016970:	e07b      	b.n	8016a6a <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7f6 fbda 	bl	800d12c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	607b      	str	r3, [r7, #4]
 801697c:	e00f      	b.n	801699e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801697e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016980:	330e      	adds	r3, #14
 8016982:	4619      	mov	r1, r3
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f7f6 fb4b 	bl	800d020 <pbuf_remove_header>
 801698a:	4603      	mov	r3, r0
 801698c:	2b00      	cmp	r3, #0
 801698e:	d006      	beq.n	801699e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016990:	4b3b      	ldr	r3, [pc, #236]	@ (8016a80 <icmp_input+0x240>)
 8016992:	22c7      	movs	r2, #199	@ 0xc7
 8016994:	493d      	ldr	r1, [pc, #244]	@ (8016a8c <icmp_input+0x24c>)
 8016996:	483c      	ldr	r0, [pc, #240]	@ (8016a88 <icmp_input+0x248>)
 8016998:	f001 fe92 	bl	80186c0 <iprintf>
          goto icmperr;
 801699c:	e065      	b.n	8016a6a <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80169a6:	4619      	mov	r1, r3
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f7f6 fb29 	bl	800d000 <pbuf_add_header>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d145      	bne.n	8016a40 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80169c2:	4b2d      	ldr	r3, [pc, #180]	@ (8016a78 <icmp_input+0x238>)
 80169c4:	691a      	ldr	r2, [r3, #16]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	2200      	movs	r2, #0
 80169ce:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	885b      	ldrh	r3, [r3, #2]
 80169d4:	b29b      	uxth	r3, r3
 80169d6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80169da:	4293      	cmp	r3, r2
 80169dc:	d907      	bls.n	80169ee <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	885b      	ldrh	r3, [r3, #2]
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	3309      	adds	r3, #9
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	805a      	strh	r2, [r3, #2]
 80169ec:	e006      	b.n	80169fc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	885b      	ldrh	r3, [r3, #2]
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	3308      	adds	r3, #8
 80169f6:	b29a      	uxth	r2, r3
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	22ff      	movs	r2, #255	@ 0xff
 8016a00:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2200      	movs	r2, #0
 8016a06:	729a      	strb	r2, [r3, #10]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8016a0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016a0e:	4619      	mov	r1, r3
 8016a10:	68f8      	ldr	r0, [r7, #12]
 8016a12:	f7f4 fffd 	bl	800ba10 <inet_chksum>
 8016a16:	4603      	mov	r3, r0
 8016a18:	461a      	mov	r2, r3
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	9302      	str	r3, [sp, #8]
 8016a22:	2301      	movs	r3, #1
 8016a24:	9301      	str	r3, [sp, #4]
 8016a26:	2300      	movs	r3, #0
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	23ff      	movs	r3, #255	@ 0xff
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	69f9      	ldr	r1, [r7, #28]
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f000 faa9 	bl	8016f88 <ip4_output_if>
 8016a36:	4603      	mov	r3, r0
 8016a38:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a3a:	e001      	b.n	8016a40 <icmp_input+0x200>
      break;
 8016a3c:	bf00      	nop
 8016a3e:	e000      	b.n	8016a42 <icmp_input+0x202>
      break;
 8016a40:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f7f6 fb72 	bl	800d12c <pbuf_free>
  return;
 8016a48:	e013      	b.n	8016a72 <icmp_input+0x232>
    goto lenerr;
 8016a4a:	bf00      	nop
 8016a4c:	e002      	b.n	8016a54 <icmp_input+0x214>
    goto lenerr;
 8016a4e:	bf00      	nop
 8016a50:	e000      	b.n	8016a54 <icmp_input+0x214>
        goto lenerr;
 8016a52:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f7f6 fb69 	bl	800d12c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a5a:	e00a      	b.n	8016a72 <icmp_input+0x232>
        goto icmperr;
 8016a5c:	bf00      	nop
 8016a5e:	e004      	b.n	8016a6a <icmp_input+0x22a>
        goto icmperr;
 8016a60:	bf00      	nop
 8016a62:	e002      	b.n	8016a6a <icmp_input+0x22a>
          goto icmperr;
 8016a64:	bf00      	nop
 8016a66:	e000      	b.n	8016a6a <icmp_input+0x22a>
          goto icmperr;
 8016a68:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7f6 fb5e 	bl	800d12c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a70:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a72:	3728      	adds	r7, #40	@ 0x28
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	20009324 	.word	0x20009324
 8016a7c:	20009338 	.word	0x20009338
 8016a80:	0801cf0c 	.word	0x0801cf0c
 8016a84:	0801cf44 	.word	0x0801cf44
 8016a88:	0801cf7c 	.word	0x0801cf7c
 8016a8c:	0801cfa4 	.word	0x0801cfa4

08016a90 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b082      	sub	sp, #8
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016a9c:	78fb      	ldrb	r3, [r7, #3]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	2103      	movs	r1, #3
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 f814 	bl	8016ad0 <icmp_send_response>
}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	460b      	mov	r3, r1
 8016aba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016abc:	78fb      	ldrb	r3, [r7, #3]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	210b      	movs	r1, #11
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f000 f804 	bl	8016ad0 <icmp_send_response>
}
 8016ac8:	bf00      	nop
 8016aca:	3708      	adds	r7, #8
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b08c      	sub	sp, #48	@ 0x30
 8016ad4:	af04      	add	r7, sp, #16
 8016ad6:	6078      	str	r0, [r7, #4]
 8016ad8:	460b      	mov	r3, r1
 8016ada:	70fb      	strb	r3, [r7, #3]
 8016adc:	4613      	mov	r3, r2
 8016ade:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ae0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016ae4:	2124      	movs	r1, #36	@ 0x24
 8016ae6:	2022      	movs	r0, #34	@ 0x22
 8016ae8:	f7f6 f83c 	bl	800cb64 <pbuf_alloc>
 8016aec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016aee:	69fb      	ldr	r3, [r7, #28]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d056      	beq.n	8016ba2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	895b      	ldrh	r3, [r3, #10]
 8016af8:	2b23      	cmp	r3, #35	@ 0x23
 8016afa:	d806      	bhi.n	8016b0a <icmp_send_response+0x3a>
 8016afc:	4b2b      	ldr	r3, [pc, #172]	@ (8016bac <icmp_send_response+0xdc>)
 8016afe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016b02:	492b      	ldr	r1, [pc, #172]	@ (8016bb0 <icmp_send_response+0xe0>)
 8016b04:	482b      	ldr	r0, [pc, #172]	@ (8016bb4 <icmp_send_response+0xe4>)
 8016b06:	f001 fddb 	bl	80186c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b10:	69fb      	ldr	r3, [r7, #28]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	78fa      	ldrb	r2, [r7, #3]
 8016b1a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	78ba      	ldrb	r2, [r7, #2]
 8016b20:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	2200      	movs	r2, #0
 8016b26:	711a      	strb	r2, [r3, #4]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	719a      	strb	r2, [r3, #6]
 8016b32:	2200      	movs	r2, #0
 8016b34:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	685b      	ldr	r3, [r3, #4]
 8016b3a:	f103 0008 	add.w	r0, r3, #8
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	221c      	movs	r2, #28
 8016b44:	4619      	mov	r1, r3
 8016b46:	f001 fef0 	bl	801892a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	68db      	ldr	r3, [r3, #12]
 8016b4e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b50:	f107 030c 	add.w	r3, r7, #12
 8016b54:	4618      	mov	r0, r3
 8016b56:	f000 f82f 	bl	8016bb8 <ip4_route>
 8016b5a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d01b      	beq.n	8016b9a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	2200      	movs	r2, #0
 8016b66:	709a      	strb	r2, [r3, #2]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	895b      	ldrh	r3, [r3, #10]
 8016b70:	4619      	mov	r1, r3
 8016b72:	6978      	ldr	r0, [r7, #20]
 8016b74:	f7f4 ff4c 	bl	800ba10 <inet_chksum>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b80:	f107 020c 	add.w	r2, r7, #12
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	9302      	str	r3, [sp, #8]
 8016b88:	2301      	movs	r3, #1
 8016b8a:	9301      	str	r3, [sp, #4]
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	9300      	str	r3, [sp, #0]
 8016b90:	23ff      	movs	r3, #255	@ 0xff
 8016b92:	2100      	movs	r1, #0
 8016b94:	69f8      	ldr	r0, [r7, #28]
 8016b96:	f000 f9f7 	bl	8016f88 <ip4_output_if>
  }
  pbuf_free(q);
 8016b9a:	69f8      	ldr	r0, [r7, #28]
 8016b9c:	f7f6 fac6 	bl	800d12c <pbuf_free>
 8016ba0:	e000      	b.n	8016ba4 <icmp_send_response+0xd4>
    return;
 8016ba2:	bf00      	nop
}
 8016ba4:	3720      	adds	r7, #32
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop
 8016bac:	0801cf0c 	.word	0x0801cf0c
 8016bb0:	0801cfd8 	.word	0x0801cfd8
 8016bb4:	0801cf7c 	.word	0x0801cf7c

08016bb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b085      	sub	sp, #20
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016bc0:	4b33      	ldr	r3, [pc, #204]	@ (8016c90 <ip4_route+0xd8>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	60fb      	str	r3, [r7, #12]
 8016bc6:	e036      	b.n	8016c36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016bce:	f003 0301 	and.w	r3, r3, #1
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d02b      	beq.n	8016c30 <ip4_route+0x78>
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016bde:	089b      	lsrs	r3, r3, #2
 8016be0:	f003 0301 	and.w	r3, r3, #1
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d022      	beq.n	8016c30 <ip4_route+0x78>
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	3304      	adds	r3, #4
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d01d      	beq.n	8016c30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	3304      	adds	r3, #4
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	405a      	eors	r2, r3
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	3308      	adds	r3, #8
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	4013      	ands	r3, r2
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d101      	bne.n	8016c10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	e038      	b.n	8016c82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016c16:	f003 0302 	and.w	r3, r3, #2
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d108      	bne.n	8016c30 <ip4_route+0x78>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	330c      	adds	r3, #12
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d101      	bne.n	8016c30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	e028      	b.n	8016c82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	60fb      	str	r3, [r7, #12]
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d1c5      	bne.n	8016bc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c3c:	4b15      	ldr	r3, [pc, #84]	@ (8016c94 <ip4_route+0xdc>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d01a      	beq.n	8016c7a <ip4_route+0xc2>
 8016c44:	4b13      	ldr	r3, [pc, #76]	@ (8016c94 <ip4_route+0xdc>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016c4c:	f003 0301 	and.w	r3, r3, #1
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d012      	beq.n	8016c7a <ip4_route+0xc2>
 8016c54:	4b0f      	ldr	r3, [pc, #60]	@ (8016c94 <ip4_route+0xdc>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016c5c:	f003 0304 	and.w	r3, r3, #4
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00a      	beq.n	8016c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c64:	4b0b      	ldr	r3, [pc, #44]	@ (8016c94 <ip4_route+0xdc>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	3304      	adds	r3, #4
 8016c6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d004      	beq.n	8016c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	b2db      	uxtb	r3, r3
 8016c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8016c78:	d101      	bne.n	8016c7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	e001      	b.n	8016c82 <ip4_route+0xca>
  }

  return netif_default;
 8016c7e:	4b05      	ldr	r3, [pc, #20]	@ (8016c94 <ip4_route+0xdc>)
 8016c80:	681b      	ldr	r3, [r3, #0]
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3714      	adds	r7, #20
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	200157bc 	.word	0x200157bc
 8016c94:	200157c0 	.word	0x200157c0

08016c98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016ca6:	f003 0301 	and.w	r3, r3, #1
 8016caa:	b2db      	uxtb	r3, r3
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d016      	beq.n	8016cde <ip4_input_accept+0x46>
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	3304      	adds	r3, #4
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d011      	beq.n	8016cde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cba:	4b0b      	ldr	r3, [pc, #44]	@ (8016ce8 <ip4_input_accept+0x50>)
 8016cbc:	695a      	ldr	r2, [r3, #20]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d008      	beq.n	8016cda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016cc8:	4b07      	ldr	r3, [pc, #28]	@ (8016ce8 <ip4_input_accept+0x50>)
 8016cca:	695b      	ldr	r3, [r3, #20]
 8016ccc:	6879      	ldr	r1, [r7, #4]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f000 fa98 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8016cd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d001      	beq.n	8016cde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016cda:	2301      	movs	r3, #1
 8016cdc:	e000      	b.n	8016ce0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016cde:	2300      	movs	r3, #0
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	20009324 	.word	0x20009324

08016cec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b088      	sub	sp, #32
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016d00:	69fb      	ldr	r3, [r7, #28]
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	091b      	lsrs	r3, r3, #4
 8016d06:	b2db      	uxtb	r3, r3
 8016d08:	2b04      	cmp	r3, #4
 8016d0a:	d004      	beq.n	8016d16 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f7f6 fa0d 	bl	800d12c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d12:	2300      	movs	r3, #0
 8016d14:	e130      	b.n	8016f78 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	f003 030f 	and.w	r3, r3, #15
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	009b      	lsls	r3, r3, #2
 8016d22:	b2db      	uxtb	r3, r3
 8016d24:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d26:	69fb      	ldr	r3, [r7, #28]
 8016d28:	885b      	ldrh	r3, [r3, #2]
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f4 fd27 	bl	800b780 <lwip_htons>
 8016d32:	4603      	mov	r3, r0
 8016d34:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	891b      	ldrh	r3, [r3, #8]
 8016d3a:	8a3a      	ldrh	r2, [r7, #16]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d204      	bcs.n	8016d4a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016d40:	8a3b      	ldrh	r3, [r7, #16]
 8016d42:	4619      	mov	r1, r3
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f7f6 f86b 	bl	800ce20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	895b      	ldrh	r3, [r3, #10]
 8016d4e:	8a7a      	ldrh	r2, [r7, #18]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d807      	bhi.n	8016d64 <ip4_input+0x78>
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	891b      	ldrh	r3, [r3, #8]
 8016d58:	8a3a      	ldrh	r2, [r7, #16]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d802      	bhi.n	8016d64 <ip4_input+0x78>
 8016d5e:	8a7b      	ldrh	r3, [r7, #18]
 8016d60:	2b13      	cmp	r3, #19
 8016d62:	d804      	bhi.n	8016d6e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f7f6 f9e1 	bl	800d12c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	e104      	b.n	8016f78 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8016d6e:	8a7b      	ldrh	r3, [r7, #18]
 8016d70:	4619      	mov	r1, r3
 8016d72:	69f8      	ldr	r0, [r7, #28]
 8016d74:	f7f4 fe4c 	bl	800ba10 <inet_chksum>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d004      	beq.n	8016d88 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f7f6 f9d4 	bl	800d12c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	e0f7      	b.n	8016f78 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	691b      	ldr	r3, [r3, #16]
 8016d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8016f80 <ip4_input+0x294>)
 8016d8e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	4a7a      	ldr	r2, [pc, #488]	@ (8016f80 <ip4_input+0x294>)
 8016d96:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d98:	4b79      	ldr	r3, [pc, #484]	@ (8016f80 <ip4_input+0x294>)
 8016d9a:	695b      	ldr	r3, [r3, #20]
 8016d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016da0:	2be0      	cmp	r3, #224	@ 0xe0
 8016da2:	d112      	bne.n	8016dca <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016daa:	f003 0301 	and.w	r3, r3, #1
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d007      	beq.n	8016dc4 <ip4_input+0xd8>
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	3304      	adds	r3, #4
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d002      	beq.n	8016dc4 <ip4_input+0xd8>
      netif = inp;
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	61bb      	str	r3, [r7, #24]
 8016dc2:	e02a      	b.n	8016e1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	61bb      	str	r3, [r7, #24]
 8016dc8:	e027      	b.n	8016e1a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016dca:	6838      	ldr	r0, [r7, #0]
 8016dcc:	f7ff ff64 	bl	8016c98 <ip4_input_accept>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d002      	beq.n	8016ddc <ip4_input+0xf0>
      netif = inp;
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	61bb      	str	r3, [r7, #24]
 8016dda:	e01e      	b.n	8016e1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016de0:	4b67      	ldr	r3, [pc, #412]	@ (8016f80 <ip4_input+0x294>)
 8016de2:	695b      	ldr	r3, [r3, #20]
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8016de8:	d017      	beq.n	8016e1a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016dea:	4b66      	ldr	r3, [pc, #408]	@ (8016f84 <ip4_input+0x298>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	61bb      	str	r3, [r7, #24]
 8016df0:	e00e      	b.n	8016e10 <ip4_input+0x124>
          if (netif == inp) {
 8016df2:	69ba      	ldr	r2, [r7, #24]
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d006      	beq.n	8016e08 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016dfa:	69b8      	ldr	r0, [r7, #24]
 8016dfc:	f7ff ff4c 	bl	8016c98 <ip4_input_accept>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d108      	bne.n	8016e18 <ip4_input+0x12c>
 8016e06:	e000      	b.n	8016e0a <ip4_input+0x11e>
            continue;
 8016e08:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	61bb      	str	r3, [r7, #24]
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d1ed      	bne.n	8016df2 <ip4_input+0x106>
 8016e16:	e000      	b.n	8016e1a <ip4_input+0x12e>
            break;
 8016e18:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d111      	bne.n	8016e44 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	7a5b      	ldrb	r3, [r3, #9]
 8016e24:	2b11      	cmp	r3, #17
 8016e26:	d10d      	bne.n	8016e44 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016e28:	8a7b      	ldrh	r3, [r7, #18]
 8016e2a:	69fa      	ldr	r2, [r7, #28]
 8016e2c:	4413      	add	r3, r2
 8016e2e:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	885b      	ldrh	r3, [r3, #2]
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8016e3a:	d103      	bne.n	8016e44 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d017      	beq.n	8016e7a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8016f80 <ip4_input+0x294>)
 8016e4c:	691b      	ldr	r3, [r3, #16]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d013      	beq.n	8016e7a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e52:	4b4b      	ldr	r3, [pc, #300]	@ (8016f80 <ip4_input+0x294>)
 8016e54:	691b      	ldr	r3, [r3, #16]
 8016e56:	6839      	ldr	r1, [r7, #0]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f000 f9d3 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d105      	bne.n	8016e70 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e64:	4b46      	ldr	r3, [pc, #280]	@ (8016f80 <ip4_input+0x294>)
 8016e66:	691b      	ldr	r3, [r3, #16]
 8016e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e6c:	2be0      	cmp	r3, #224	@ 0xe0
 8016e6e:	d104      	bne.n	8016e7a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f7f6 f95b 	bl	800d12c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016e76:	2300      	movs	r3, #0
 8016e78:	e07e      	b.n	8016f78 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d104      	bne.n	8016e8a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7f6 f953 	bl	800d12c <pbuf_free>
    return ERR_OK;
 8016e86:	2300      	movs	r3, #0
 8016e88:	e076      	b.n	8016f78 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	88db      	ldrh	r3, [r3, #6]
 8016e8e:	b29b      	uxth	r3, r3
 8016e90:	461a      	mov	r2, r3
 8016e92:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016e96:	4013      	ands	r3, r2
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d00b      	beq.n	8016eb4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f000 fcf7 	bl	8017890 <ip4_reass>
 8016ea2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d101      	bne.n	8016eae <ip4_input+0x1c2>
      return ERR_OK;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	e064      	b.n	8016f78 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016eb4:	4a32      	ldr	r2, [pc, #200]	@ (8016f80 <ip4_input+0x294>)
 8016eb6:	69bb      	ldr	r3, [r7, #24]
 8016eb8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016eba:	4a31      	ldr	r2, [pc, #196]	@ (8016f80 <ip4_input+0x294>)
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8016f80 <ip4_input+0x294>)
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	f003 030f 	and.w	r3, r3, #15
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	b2db      	uxtb	r3, r3
 8016ed4:	461a      	mov	r2, r3
 8016ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8016f80 <ip4_input+0x294>)
 8016ed8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016eda:	8a7b      	ldrh	r3, [r7, #18]
 8016edc:	4619      	mov	r1, r3
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f7f6 f89e 	bl	800d020 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	7a5b      	ldrb	r3, [r3, #9]
 8016ee8:	2b11      	cmp	r3, #17
 8016eea:	d006      	beq.n	8016efa <ip4_input+0x20e>
 8016eec:	2b11      	cmp	r3, #17
 8016eee:	dc13      	bgt.n	8016f18 <ip4_input+0x22c>
 8016ef0:	2b01      	cmp	r3, #1
 8016ef2:	d00c      	beq.n	8016f0e <ip4_input+0x222>
 8016ef4:	2b06      	cmp	r3, #6
 8016ef6:	d005      	beq.n	8016f04 <ip4_input+0x218>
 8016ef8:	e00e      	b.n	8016f18 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016efa:	6839      	ldr	r1, [r7, #0]
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7fc fa77 	bl	80133f0 <udp_input>
        break;
 8016f02:	e026      	b.n	8016f52 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016f04:	6839      	ldr	r1, [r7, #0]
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f7f8 f9b6 	bl	800f278 <tcp_input>
        break;
 8016f0c:	e021      	b.n	8016f52 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016f0e:	6839      	ldr	r1, [r7, #0]
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f7ff fc95 	bl	8016840 <icmp_input>
        break;
 8016f16:	e01c      	b.n	8016f52 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f18:	4b19      	ldr	r3, [pc, #100]	@ (8016f80 <ip4_input+0x294>)
 8016f1a:	695b      	ldr	r3, [r3, #20]
 8016f1c:	69b9      	ldr	r1, [r7, #24]
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f000 f970 	bl	8017204 <ip4_addr_isbroadcast_u32>
 8016f24:	4603      	mov	r3, r0
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d10f      	bne.n	8016f4a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f2a:	4b15      	ldr	r3, [pc, #84]	@ (8016f80 <ip4_input+0x294>)
 8016f2c:	695b      	ldr	r3, [r3, #20]
 8016f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f32:	2be0      	cmp	r3, #224	@ 0xe0
 8016f34:	d009      	beq.n	8016f4a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016f3a:	4619      	mov	r1, r3
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7f6 f8e2 	bl	800d106 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016f42:	2102      	movs	r1, #2
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f7ff fda3 	bl	8016a90 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f7f6 f8ee 	bl	800d12c <pbuf_free>
        break;
 8016f50:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016f52:	4b0b      	ldr	r3, [pc, #44]	@ (8016f80 <ip4_input+0x294>)
 8016f54:	2200      	movs	r2, #0
 8016f56:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016f58:	4b09      	ldr	r3, [pc, #36]	@ (8016f80 <ip4_input+0x294>)
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016f5e:	4b08      	ldr	r3, [pc, #32]	@ (8016f80 <ip4_input+0x294>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f64:	4b06      	ldr	r3, [pc, #24]	@ (8016f80 <ip4_input+0x294>)
 8016f66:	2200      	movs	r2, #0
 8016f68:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f6a:	4b05      	ldr	r3, [pc, #20]	@ (8016f80 <ip4_input+0x294>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f70:	4b03      	ldr	r3, [pc, #12]	@ (8016f80 <ip4_input+0x294>)
 8016f72:	2200      	movs	r2, #0
 8016f74:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3720      	adds	r7, #32
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	20009324 	.word	0x20009324
 8016f84:	200157bc 	.word	0x200157bc

08016f88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b08a      	sub	sp, #40	@ 0x28
 8016f8c:	af04      	add	r7, sp, #16
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
 8016f94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d009      	beq.n	8016fb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d003      	beq.n	8016fae <ip4_output_if+0x26>
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d102      	bne.n	8016fb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb0:	3304      	adds	r3, #4
 8016fb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016fb4:	78fa      	ldrb	r2, [r7, #3]
 8016fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb8:	9302      	str	r3, [sp, #8]
 8016fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016fbe:	9301      	str	r3, [sp, #4]
 8016fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	6979      	ldr	r1, [r7, #20]
 8016fcc:	68f8      	ldr	r0, [r7, #12]
 8016fce:	f000 f805 	bl	8016fdc <ip4_output_if_src>
 8016fd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3718      	adds	r7, #24
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b088      	sub	sp, #32
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8016fea:	2300      	movs	r3, #0
 8016fec:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	7b9b      	ldrb	r3, [r3, #14]
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d006      	beq.n	8017004 <ip4_output_if_src+0x28>
 8016ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80171ec <ip4_output_if_src+0x210>)
 8016ff8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016ffc:	497c      	ldr	r1, [pc, #496]	@ (80171f0 <ip4_output_if_src+0x214>)
 8016ffe:	487d      	ldr	r0, [pc, #500]	@ (80171f4 <ip4_output_if_src+0x218>)
 8017000:	f001 fb5e 	bl	80186c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2b00      	cmp	r3, #0
 8017008:	f000 80c4 	beq.w	8017194 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801700c:	2314      	movs	r3, #20
 801700e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017010:	2114      	movs	r1, #20
 8017012:	68f8      	ldr	r0, [r7, #12]
 8017014:	f7f5 fff4 	bl	800d000 <pbuf_add_header>
 8017018:	4603      	mov	r3, r0
 801701a:	2b00      	cmp	r3, #0
 801701c:	d002      	beq.n	8017024 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801701e:	f06f 0301 	mvn.w	r3, #1
 8017022:	e0df      	b.n	80171e4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	895b      	ldrh	r3, [r3, #10]
 801702e:	2b13      	cmp	r3, #19
 8017030:	d806      	bhi.n	8017040 <ip4_output_if_src+0x64>
 8017032:	4b6e      	ldr	r3, [pc, #440]	@ (80171ec <ip4_output_if_src+0x210>)
 8017034:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017038:	496f      	ldr	r1, [pc, #444]	@ (80171f8 <ip4_output_if_src+0x21c>)
 801703a:	486e      	ldr	r0, [pc, #440]	@ (80171f4 <ip4_output_if_src+0x218>)
 801703c:	f001 fb40 	bl	80186c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017040:	69bb      	ldr	r3, [r7, #24]
 8017042:	78fa      	ldrb	r2, [r7, #3]
 8017044:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017046:	69bb      	ldr	r3, [r7, #24]
 8017048:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801704c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801704e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017052:	78fb      	ldrb	r3, [r7, #3]
 8017054:	021b      	lsls	r3, r3, #8
 8017056:	4313      	orrs	r3, r2
 8017058:	021b      	lsls	r3, r3, #8
 801705a:	b21a      	sxth	r2, r3
 801705c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8017060:	78fb      	ldrb	r3, [r7, #3]
 8017062:	021b      	lsls	r3, r3, #8
 8017064:	430b      	orrs	r3, r1
 8017066:	121b      	asrs	r3, r3, #8
 8017068:	b21b      	sxth	r3, r3
 801706a:	b2db      	uxtb	r3, r3
 801706c:	b21b      	sxth	r3, r3
 801706e:	4313      	orrs	r3, r2
 8017070:	b21b      	sxth	r3, r3
 8017072:	b29b      	uxth	r3, r3
 8017074:	461a      	mov	r2, r3
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	4413      	add	r3, r2
 801707a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681a      	ldr	r2, [r3, #0]
 8017080:	69bb      	ldr	r3, [r7, #24]
 8017082:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	691b      	ldr	r3, [r3, #16]
 8017088:	b29b      	uxth	r3, r3
 801708a:	69fa      	ldr	r2, [r7, #28]
 801708c:	4413      	add	r3, r2
 801708e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	691b      	ldr	r3, [r3, #16]
 8017094:	0c1b      	lsrs	r3, r3, #16
 8017096:	69fa      	ldr	r2, [r7, #28]
 8017098:	4413      	add	r3, r2
 801709a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801709c:	8afb      	ldrh	r3, [r7, #22]
 801709e:	089b      	lsrs	r3, r3, #2
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170a8:	b2da      	uxtb	r2, r3
 80170aa:	69bb      	ldr	r3, [r7, #24]
 80170ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80170ae:	69bb      	ldr	r3, [r7, #24]
 80170b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80170b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80170b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	021b      	lsls	r3, r3, #8
 80170c0:	4313      	orrs	r3, r2
 80170c2:	021b      	lsls	r3, r3, #8
 80170c4:	b21a      	sxth	r2, r3
 80170c6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	021b      	lsls	r3, r3, #8
 80170d0:	430b      	orrs	r3, r1
 80170d2:	121b      	asrs	r3, r3, #8
 80170d4:	b21b      	sxth	r3, r3
 80170d6:	b2db      	uxtb	r3, r3
 80170d8:	b21b      	sxth	r3, r3
 80170da:	4313      	orrs	r3, r2
 80170dc:	b21b      	sxth	r3, r3
 80170de:	b29b      	uxth	r3, r3
 80170e0:	461a      	mov	r2, r3
 80170e2:	69fb      	ldr	r3, [r7, #28]
 80170e4:	4413      	add	r3, r2
 80170e6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	891b      	ldrh	r3, [r3, #8]
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7f4 fb47 	bl	800b780 <lwip_htons>
 80170f2:	4603      	mov	r3, r0
 80170f4:	461a      	mov	r2, r3
 80170f6:	69bb      	ldr	r3, [r7, #24]
 80170f8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	885b      	ldrh	r3, [r3, #2]
 80170fe:	b29b      	uxth	r3, r3
 8017100:	461a      	mov	r2, r3
 8017102:	69fb      	ldr	r3, [r7, #28]
 8017104:	4413      	add	r3, r2
 8017106:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017108:	69bb      	ldr	r3, [r7, #24]
 801710a:	2200      	movs	r2, #0
 801710c:	719a      	strb	r2, [r3, #6]
 801710e:	2200      	movs	r2, #0
 8017110:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017112:	4b3a      	ldr	r3, [pc, #232]	@ (80171fc <ip4_output_if_src+0x220>)
 8017114:	881b      	ldrh	r3, [r3, #0]
 8017116:	4618      	mov	r0, r3
 8017118:	f7f4 fb32 	bl	800b780 <lwip_htons>
 801711c:	4603      	mov	r3, r0
 801711e:	461a      	mov	r2, r3
 8017120:	69bb      	ldr	r3, [r7, #24]
 8017122:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8017124:	69bb      	ldr	r3, [r7, #24]
 8017126:	889b      	ldrh	r3, [r3, #4]
 8017128:	b29b      	uxth	r3, r3
 801712a:	461a      	mov	r2, r3
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	4413      	add	r3, r2
 8017130:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017132:	4b32      	ldr	r3, [pc, #200]	@ (80171fc <ip4_output_if_src+0x220>)
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	3301      	adds	r3, #1
 8017138:	b29a      	uxth	r2, r3
 801713a:	4b30      	ldr	r3, [pc, #192]	@ (80171fc <ip4_output_if_src+0x220>)
 801713c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d104      	bne.n	801714e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017144:	4b2e      	ldr	r3, [pc, #184]	@ (8017200 <ip4_output_if_src+0x224>)
 8017146:	681a      	ldr	r2, [r3, #0]
 8017148:	69bb      	ldr	r3, [r7, #24]
 801714a:	60da      	str	r2, [r3, #12]
 801714c:	e003      	b.n	8017156 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	b29b      	uxth	r3, r3
 801715c:	69fa      	ldr	r2, [r7, #28]
 801715e:	4413      	add	r3, r2
 8017160:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8017162:	69bb      	ldr	r3, [r7, #24]
 8017164:	68db      	ldr	r3, [r3, #12]
 8017166:	0c1b      	lsrs	r3, r3, #16
 8017168:	69fa      	ldr	r2, [r7, #28]
 801716a:	4413      	add	r3, r2
 801716c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801716e:	69fb      	ldr	r3, [r7, #28]
 8017170:	0c1a      	lsrs	r2, r3, #16
 8017172:	69fb      	ldr	r3, [r7, #28]
 8017174:	b29b      	uxth	r3, r3
 8017176:	4413      	add	r3, r2
 8017178:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	0c1b      	lsrs	r3, r3, #16
 801717e:	69fa      	ldr	r2, [r7, #28]
 8017180:	4413      	add	r3, r2
 8017182:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8017184:	69fb      	ldr	r3, [r7, #28]
 8017186:	43db      	mvns	r3, r3
 8017188:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	b29a      	uxth	r2, r3
 801718e:	69bb      	ldr	r3, [r7, #24]
 8017190:	815a      	strh	r2, [r3, #10]
 8017192:	e00f      	b.n	80171b4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	895b      	ldrh	r3, [r3, #10]
 8017198:	2b13      	cmp	r3, #19
 801719a:	d802      	bhi.n	80171a2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801719c:	f06f 0301 	mvn.w	r3, #1
 80171a0:	e020      	b.n	80171e4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80171a8:	69bb      	ldr	r3, [r7, #24]
 80171aa:	691b      	ldr	r3, [r3, #16]
 80171ac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80171ae:	f107 0310 	add.w	r3, r7, #16
 80171b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80171b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00c      	beq.n	80171d6 <ip4_output_if_src+0x1fa>
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	891a      	ldrh	r2, [r3, #8]
 80171c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d906      	bls.n	80171d6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80171c8:	687a      	ldr	r2, [r7, #4]
 80171ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f000 fd5b 	bl	8017c88 <ip4_frag>
 80171d2:	4603      	mov	r3, r0
 80171d4:	e006      	b.n	80171e4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80171d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171d8:	695b      	ldr	r3, [r3, #20]
 80171da:	687a      	ldr	r2, [r7, #4]
 80171dc:	68f9      	ldr	r1, [r7, #12]
 80171de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171e0:	4798      	blx	r3
 80171e2:	4603      	mov	r3, r0
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	3720      	adds	r7, #32
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	0801d004 	.word	0x0801d004
 80171f0:	0801d038 	.word	0x0801d038
 80171f4:	0801d044 	.word	0x0801d044
 80171f8:	0801d06c 	.word	0x0801d06c
 80171fc:	2001594e 	.word	0x2001594e
 8017200:	080267d4 	.word	0x080267d4

08017204 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017204:	b480      	push	{r7}
 8017206:	b085      	sub	sp, #20
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017218:	d002      	beq.n	8017220 <ip4_addr_isbroadcast_u32+0x1c>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d101      	bne.n	8017224 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017220:	2301      	movs	r3, #1
 8017222:	e02a      	b.n	801727a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801722a:	f003 0302 	and.w	r3, r3, #2
 801722e:	2b00      	cmp	r3, #0
 8017230:	d101      	bne.n	8017236 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017232:	2300      	movs	r3, #0
 8017234:	e021      	b.n	801727a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	3304      	adds	r3, #4
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	429a      	cmp	r2, r3
 8017240:	d101      	bne.n	8017246 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017242:	2300      	movs	r3, #0
 8017244:	e019      	b.n	801727a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017246:	68fa      	ldr	r2, [r7, #12]
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	3304      	adds	r3, #4
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	405a      	eors	r2, r3
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	3308      	adds	r3, #8
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	4013      	ands	r3, r2
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10d      	bne.n	8017278 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	3308      	adds	r3, #8
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	43da      	mvns	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	3308      	adds	r3, #8
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017270:	429a      	cmp	r2, r3
 8017272:	d101      	bne.n	8017278 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017274:	2301      	movs	r3, #1
 8017276:	e000      	b.n	801727a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017278:	2300      	movs	r3, #0
  }
}
 801727a:	4618      	mov	r0, r3
 801727c:	3714      	adds	r7, #20
 801727e:	46bd      	mov	sp, r7
 8017280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017284:	4770      	bx	lr
	...

08017288 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801728e:	2300      	movs	r3, #0
 8017290:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017292:	4b12      	ldr	r3, [pc, #72]	@ (80172dc <ip_reass_tmr+0x54>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017298:	e018      	b.n	80172cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	7fdb      	ldrb	r3, [r3, #31]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00b      	beq.n	80172ba <ip_reass_tmr+0x32>
      r->timer--;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	7fdb      	ldrb	r3, [r3, #31]
 80172a6:	3b01      	subs	r3, #1
 80172a8:	b2da      	uxtb	r2, r3
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	60fb      	str	r3, [r7, #12]
 80172b8:	e008      	b.n	80172cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80172c4:	68b9      	ldr	r1, [r7, #8]
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 f80a 	bl	80172e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d1e3      	bne.n	801729a <ip_reass_tmr+0x12>
    }
  }
}
 80172d2:	bf00      	nop
 80172d4:	bf00      	nop
 80172d6:	3710      	adds	r7, #16
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}
 80172dc:	20015950 	.word	0x20015950

080172e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b088      	sub	sp, #32
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80172ee:	683a      	ldr	r2, [r7, #0]
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d105      	bne.n	8017302 <ip_reass_free_complete_datagram+0x22>
 80172f6:	4b45      	ldr	r3, [pc, #276]	@ (801740c <ip_reass_free_complete_datagram+0x12c>)
 80172f8:	22ab      	movs	r2, #171	@ 0xab
 80172fa:	4945      	ldr	r1, [pc, #276]	@ (8017410 <ip_reass_free_complete_datagram+0x130>)
 80172fc:	4845      	ldr	r0, [pc, #276]	@ (8017414 <ip_reass_free_complete_datagram+0x134>)
 80172fe:	f001 f9df 	bl	80186c0 <iprintf>
  if (prev != NULL) {
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d00a      	beq.n	801731e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	687a      	ldr	r2, [r7, #4]
 801730e:	429a      	cmp	r2, r3
 8017310:	d005      	beq.n	801731e <ip_reass_free_complete_datagram+0x3e>
 8017312:	4b3e      	ldr	r3, [pc, #248]	@ (801740c <ip_reass_free_complete_datagram+0x12c>)
 8017314:	22ad      	movs	r2, #173	@ 0xad
 8017316:	4940      	ldr	r1, [pc, #256]	@ (8017418 <ip_reass_free_complete_datagram+0x138>)
 8017318:	483e      	ldr	r0, [pc, #248]	@ (8017414 <ip_reass_free_complete_datagram+0x134>)
 801731a:	f001 f9d1 	bl	80186c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	685b      	ldr	r3, [r3, #4]
 8017324:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	889b      	ldrh	r3, [r3, #4]
 801732a:	b29b      	uxth	r3, r3
 801732c:	2b00      	cmp	r3, #0
 801732e:	d12a      	bne.n	8017386 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801733e:	69bb      	ldr	r3, [r7, #24]
 8017340:	6858      	ldr	r0, [r3, #4]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	3308      	adds	r3, #8
 8017346:	2214      	movs	r2, #20
 8017348:	4619      	mov	r1, r3
 801734a:	f001 faee 	bl	801892a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801734e:	2101      	movs	r1, #1
 8017350:	69b8      	ldr	r0, [r7, #24]
 8017352:	f7ff fbad 	bl	8016ab0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017356:	69b8      	ldr	r0, [r7, #24]
 8017358:	f7f5 ff76 	bl	800d248 <pbuf_clen>
 801735c:	4603      	mov	r3, r0
 801735e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017360:	8bfa      	ldrh	r2, [r7, #30]
 8017362:	8a7b      	ldrh	r3, [r7, #18]
 8017364:	4413      	add	r3, r2
 8017366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801736a:	db05      	blt.n	8017378 <ip_reass_free_complete_datagram+0x98>
 801736c:	4b27      	ldr	r3, [pc, #156]	@ (801740c <ip_reass_free_complete_datagram+0x12c>)
 801736e:	22bc      	movs	r2, #188	@ 0xbc
 8017370:	492a      	ldr	r1, [pc, #168]	@ (801741c <ip_reass_free_complete_datagram+0x13c>)
 8017372:	4828      	ldr	r0, [pc, #160]	@ (8017414 <ip_reass_free_complete_datagram+0x134>)
 8017374:	f001 f9a4 	bl	80186c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017378:	8bfa      	ldrh	r2, [r7, #30]
 801737a:	8a7b      	ldrh	r3, [r7, #18]
 801737c:	4413      	add	r3, r2
 801737e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017380:	69b8      	ldr	r0, [r7, #24]
 8017382:	f7f5 fed3 	bl	800d12c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801738c:	e01f      	b.n	80173ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801738e:	69bb      	ldr	r3, [r7, #24]
 8017390:	685b      	ldr	r3, [r3, #4]
 8017392:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017394:	69bb      	ldr	r3, [r7, #24]
 8017396:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801739e:	68f8      	ldr	r0, [r7, #12]
 80173a0:	f7f5 ff52 	bl	800d248 <pbuf_clen>
 80173a4:	4603      	mov	r3, r0
 80173a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80173a8:	8bfa      	ldrh	r2, [r7, #30]
 80173aa:	8a7b      	ldrh	r3, [r7, #18]
 80173ac:	4413      	add	r3, r2
 80173ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80173b2:	db05      	blt.n	80173c0 <ip_reass_free_complete_datagram+0xe0>
 80173b4:	4b15      	ldr	r3, [pc, #84]	@ (801740c <ip_reass_free_complete_datagram+0x12c>)
 80173b6:	22cc      	movs	r2, #204	@ 0xcc
 80173b8:	4918      	ldr	r1, [pc, #96]	@ (801741c <ip_reass_free_complete_datagram+0x13c>)
 80173ba:	4816      	ldr	r0, [pc, #88]	@ (8017414 <ip_reass_free_complete_datagram+0x134>)
 80173bc:	f001 f980 	bl	80186c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80173c0:	8bfa      	ldrh	r2, [r7, #30]
 80173c2:	8a7b      	ldrh	r3, [r7, #18]
 80173c4:	4413      	add	r3, r2
 80173c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80173c8:	68f8      	ldr	r0, [r7, #12]
 80173ca:	f7f5 feaf 	bl	800d12c <pbuf_free>
  while (p != NULL) {
 80173ce:	69bb      	ldr	r3, [r7, #24]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d1dc      	bne.n	801738e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80173d4:	6839      	ldr	r1, [r7, #0]
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 f8c2 	bl	8017560 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80173dc:	4b10      	ldr	r3, [pc, #64]	@ (8017420 <ip_reass_free_complete_datagram+0x140>)
 80173de:	881b      	ldrh	r3, [r3, #0]
 80173e0:	8bfa      	ldrh	r2, [r7, #30]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d905      	bls.n	80173f2 <ip_reass_free_complete_datagram+0x112>
 80173e6:	4b09      	ldr	r3, [pc, #36]	@ (801740c <ip_reass_free_complete_datagram+0x12c>)
 80173e8:	22d2      	movs	r2, #210	@ 0xd2
 80173ea:	490e      	ldr	r1, [pc, #56]	@ (8017424 <ip_reass_free_complete_datagram+0x144>)
 80173ec:	4809      	ldr	r0, [pc, #36]	@ (8017414 <ip_reass_free_complete_datagram+0x134>)
 80173ee:	f001 f967 	bl	80186c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80173f2:	4b0b      	ldr	r3, [pc, #44]	@ (8017420 <ip_reass_free_complete_datagram+0x140>)
 80173f4:	881a      	ldrh	r2, [r3, #0]
 80173f6:	8bfb      	ldrh	r3, [r7, #30]
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	b29a      	uxth	r2, r3
 80173fc:	4b08      	ldr	r3, [pc, #32]	@ (8017420 <ip_reass_free_complete_datagram+0x140>)
 80173fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017400:	8bfb      	ldrh	r3, [r7, #30]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3720      	adds	r7, #32
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
 801740a:	bf00      	nop
 801740c:	0801d09c 	.word	0x0801d09c
 8017410:	0801d0d8 	.word	0x0801d0d8
 8017414:	0801d0e4 	.word	0x0801d0e4
 8017418:	0801d10c 	.word	0x0801d10c
 801741c:	0801d120 	.word	0x0801d120
 8017420:	20015954 	.word	0x20015954
 8017424:	0801d140 	.word	0x0801d140

08017428 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08a      	sub	sp, #40	@ 0x28
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017432:	2300      	movs	r3, #0
 8017434:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017436:	2300      	movs	r3, #0
 8017438:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801743a:	2300      	movs	r3, #0
 801743c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801743e:	2300      	movs	r3, #0
 8017440:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017442:	2300      	movs	r3, #0
 8017444:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017446:	4b28      	ldr	r3, [pc, #160]	@ (80174e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801744c:	e030      	b.n	80174b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017450:	695a      	ldr	r2, [r3, #20]
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	68db      	ldr	r3, [r3, #12]
 8017456:	429a      	cmp	r2, r3
 8017458:	d10c      	bne.n	8017474 <ip_reass_remove_oldest_datagram+0x4c>
 801745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745c:	699a      	ldr	r2, [r3, #24]
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	691b      	ldr	r3, [r3, #16]
 8017462:	429a      	cmp	r2, r3
 8017464:	d106      	bne.n	8017474 <ip_reass_remove_oldest_datagram+0x4c>
 8017466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017468:	899a      	ldrh	r2, [r3, #12]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	889b      	ldrh	r3, [r3, #4]
 801746e:	b29b      	uxth	r3, r3
 8017470:	429a      	cmp	r2, r3
 8017472:	d014      	beq.n	801749e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017474:	693b      	ldr	r3, [r7, #16]
 8017476:	3301      	adds	r3, #1
 8017478:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801747a:	6a3b      	ldr	r3, [r7, #32]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d104      	bne.n	801748a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017482:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017484:	69fb      	ldr	r3, [r7, #28]
 8017486:	61bb      	str	r3, [r7, #24]
 8017488:	e009      	b.n	801749e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801748c:	7fda      	ldrb	r2, [r3, #31]
 801748e:	6a3b      	ldr	r3, [r7, #32]
 8017490:	7fdb      	ldrb	r3, [r3, #31]
 8017492:	429a      	cmp	r2, r3
 8017494:	d803      	bhi.n	801749e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017498:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d001      	beq.n	80174aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80174a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80174aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80174b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d1cb      	bne.n	801744e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80174b6:	6a3b      	ldr	r3, [r7, #32]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d008      	beq.n	80174ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80174bc:	69b9      	ldr	r1, [r7, #24]
 80174be:	6a38      	ldr	r0, [r7, #32]
 80174c0:	f7ff ff0e 	bl	80172e0 <ip_reass_free_complete_datagram>
 80174c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80174c6:	697a      	ldr	r2, [r7, #20]
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	4413      	add	r3, r2
 80174cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80174ce:	697a      	ldr	r2, [r7, #20]
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	429a      	cmp	r2, r3
 80174d4:	da02      	bge.n	80174dc <ip_reass_remove_oldest_datagram+0xb4>
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	2b01      	cmp	r3, #1
 80174da:	dcac      	bgt.n	8017436 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80174dc:	697b      	ldr	r3, [r7, #20]
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3728      	adds	r7, #40	@ 0x28
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	20015950 	.word	0x20015950

080174ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b084      	sub	sp, #16
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
 80174f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80174f6:	2004      	movs	r0, #4
 80174f8:	f7f4 ff70 	bl	800c3dc <memp_malloc>
 80174fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d110      	bne.n	8017526 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017504:	6839      	ldr	r1, [r7, #0]
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7ff ff8e 	bl	8017428 <ip_reass_remove_oldest_datagram>
 801750c:	4602      	mov	r2, r0
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	4293      	cmp	r3, r2
 8017512:	dc03      	bgt.n	801751c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017514:	2004      	movs	r0, #4
 8017516:	f7f4 ff61 	bl	800c3dc <memp_malloc>
 801751a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d101      	bne.n	8017526 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017522:	2300      	movs	r3, #0
 8017524:	e016      	b.n	8017554 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017526:	2220      	movs	r2, #32
 8017528:	2100      	movs	r1, #0
 801752a:	68f8      	ldr	r0, [r7, #12]
 801752c:	f001 f967 	bl	80187fe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	220f      	movs	r2, #15
 8017534:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017536:	4b09      	ldr	r3, [pc, #36]	@ (801755c <ip_reass_enqueue_new_datagram+0x70>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801753e:	4a07      	ldr	r2, [pc, #28]	@ (801755c <ip_reass_enqueue_new_datagram+0x70>)
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	3308      	adds	r3, #8
 8017548:	2214      	movs	r2, #20
 801754a:	6879      	ldr	r1, [r7, #4]
 801754c:	4618      	mov	r0, r3
 801754e:	f001 f9ec 	bl	801892a <memcpy>
  return ipr;
 8017552:	68fb      	ldr	r3, [r7, #12]
}
 8017554:	4618      	mov	r0, r3
 8017556:	3710      	adds	r7, #16
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}
 801755c:	20015950 	.word	0x20015950

08017560 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b082      	sub	sp, #8
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801756a:	4b10      	ldr	r3, [pc, #64]	@ (80175ac <ip_reass_dequeue_datagram+0x4c>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	687a      	ldr	r2, [r7, #4]
 8017570:	429a      	cmp	r2, r3
 8017572:	d104      	bne.n	801757e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	4a0c      	ldr	r2, [pc, #48]	@ (80175ac <ip_reass_dequeue_datagram+0x4c>)
 801757a:	6013      	str	r3, [r2, #0]
 801757c:	e00d      	b.n	801759a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d106      	bne.n	8017592 <ip_reass_dequeue_datagram+0x32>
 8017584:	4b0a      	ldr	r3, [pc, #40]	@ (80175b0 <ip_reass_dequeue_datagram+0x50>)
 8017586:	f240 1245 	movw	r2, #325	@ 0x145
 801758a:	490a      	ldr	r1, [pc, #40]	@ (80175b4 <ip_reass_dequeue_datagram+0x54>)
 801758c:	480a      	ldr	r0, [pc, #40]	@ (80175b8 <ip_reass_dequeue_datagram+0x58>)
 801758e:	f001 f897 	bl	80186c0 <iprintf>
    prev->next = ipr->next;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801759a:	6879      	ldr	r1, [r7, #4]
 801759c:	2004      	movs	r0, #4
 801759e:	f7f4 ff6f 	bl	800c480 <memp_free>
}
 80175a2:	bf00      	nop
 80175a4:	3708      	adds	r7, #8
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	20015950 	.word	0x20015950
 80175b0:	0801d09c 	.word	0x0801d09c
 80175b4:	0801d164 	.word	0x0801d164
 80175b8:	0801d0e4 	.word	0x0801d0e4

080175bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b08c      	sub	sp, #48	@ 0x30
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80175c8:	2300      	movs	r3, #0
 80175ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80175cc:	2301      	movs	r3, #1
 80175ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	885b      	ldrh	r3, [r3, #2]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	4618      	mov	r0, r3
 80175de:	f7f4 f8cf 	bl	800b780 <lwip_htons>
 80175e2:	4603      	mov	r3, r0
 80175e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	f003 030f 	and.w	r3, r3, #15
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80175f4:	7e7b      	ldrb	r3, [r7, #25]
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	8b7a      	ldrh	r2, [r7, #26]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d202      	bcs.n	8017604 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175fe:	f04f 33ff 	mov.w	r3, #4294967295
 8017602:	e135      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017604:	7e7b      	ldrb	r3, [r7, #25]
 8017606:	b29b      	uxth	r3, r3
 8017608:	8b7a      	ldrh	r2, [r7, #26]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	88db      	ldrh	r3, [r3, #6]
 8017612:	b29b      	uxth	r3, r3
 8017614:	4618      	mov	r0, r3
 8017616:	f7f4 f8b3 	bl	800b780 <lwip_htons>
 801761a:	4603      	mov	r3, r0
 801761c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017620:	b29b      	uxth	r3, r3
 8017622:	00db      	lsls	r3, r3, #3
 8017624:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801762e:	2200      	movs	r2, #0
 8017630:	701a      	strb	r2, [r3, #0]
 8017632:	2200      	movs	r2, #0
 8017634:	705a      	strb	r2, [r3, #1]
 8017636:	2200      	movs	r2, #0
 8017638:	709a      	strb	r2, [r3, #2]
 801763a:	2200      	movs	r2, #0
 801763c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017640:	8afa      	ldrh	r2, [r7, #22]
 8017642:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017644:	8afa      	ldrh	r2, [r7, #22]
 8017646:	8b7b      	ldrh	r3, [r7, #26]
 8017648:	4413      	add	r3, r2
 801764a:	b29a      	uxth	r2, r3
 801764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801764e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017652:	88db      	ldrh	r3, [r3, #6]
 8017654:	b29b      	uxth	r3, r3
 8017656:	8afa      	ldrh	r2, [r7, #22]
 8017658:	429a      	cmp	r2, r3
 801765a:	d902      	bls.n	8017662 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801765c:	f04f 33ff 	mov.w	r3, #4294967295
 8017660:	e106      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	627b      	str	r3, [r7, #36]	@ 0x24
 8017668:	e068      	b.n	801773c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801766c:	685b      	ldr	r3, [r3, #4]
 801766e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017672:	889b      	ldrh	r3, [r3, #4]
 8017674:	b29a      	uxth	r2, r3
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	889b      	ldrh	r3, [r3, #4]
 801767a:	b29b      	uxth	r3, r3
 801767c:	429a      	cmp	r2, r3
 801767e:	d235      	bcs.n	80176ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017684:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017688:	2b00      	cmp	r3, #0
 801768a:	d020      	beq.n	80176ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801768e:	889b      	ldrh	r3, [r3, #4]
 8017690:	b29a      	uxth	r2, r3
 8017692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017694:	88db      	ldrh	r3, [r3, #6]
 8017696:	b29b      	uxth	r3, r3
 8017698:	429a      	cmp	r2, r3
 801769a:	d307      	bcc.n	80176ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801769e:	88db      	ldrh	r3, [r3, #6]
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	889b      	ldrh	r3, [r3, #4]
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d902      	bls.n	80176b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176ac:	f04f 33ff 	mov.w	r3, #4294967295
 80176b0:	e0de      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80176b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176b4:	68ba      	ldr	r2, [r7, #8]
 80176b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80176b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176ba:	88db      	ldrh	r3, [r3, #6]
 80176bc:	b29a      	uxth	r2, r3
 80176be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c0:	889b      	ldrh	r3, [r3, #4]
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d03d      	beq.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80176c8:	2300      	movs	r3, #0
 80176ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80176cc:	e03a      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80176ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d0:	88db      	ldrh	r3, [r3, #6]
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	889b      	ldrh	r3, [r3, #4]
 80176d8:	b29b      	uxth	r3, r3
 80176da:	429a      	cmp	r2, r3
 80176dc:	d902      	bls.n	80176e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176de:	f04f 33ff 	mov.w	r3, #4294967295
 80176e2:	e0c5      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	68ba      	ldr	r2, [r7, #8]
 80176e8:	605a      	str	r2, [r3, #4]
      break;
 80176ea:	e02b      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80176ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ee:	889b      	ldrh	r3, [r3, #4]
 80176f0:	b29a      	uxth	r2, r3
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	889b      	ldrh	r3, [r3, #4]
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d102      	bne.n	8017702 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017700:	e0b6      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017704:	889b      	ldrh	r3, [r3, #4]
 8017706:	b29a      	uxth	r2, r3
 8017708:	693b      	ldr	r3, [r7, #16]
 801770a:	88db      	ldrh	r3, [r3, #6]
 801770c:	b29b      	uxth	r3, r3
 801770e:	429a      	cmp	r2, r3
 8017710:	d202      	bcs.n	8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017712:	f04f 33ff 	mov.w	r3, #4294967295
 8017716:	e0ab      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801771a:	2b00      	cmp	r3, #0
 801771c:	d009      	beq.n	8017732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017720:	88db      	ldrh	r3, [r3, #6]
 8017722:	b29a      	uxth	r2, r3
 8017724:	693b      	ldr	r3, [r7, #16]
 8017726:	889b      	ldrh	r3, [r3, #4]
 8017728:	b29b      	uxth	r3, r3
 801772a:	429a      	cmp	r2, r3
 801772c:	d001      	beq.n	8017732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801773e:	2b00      	cmp	r3, #0
 8017740:	d193      	bne.n	801766a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017742:	e000      	b.n	8017746 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017744:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017748:	2b00      	cmp	r3, #0
 801774a:	d12d      	bne.n	80177a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801774e:	2b00      	cmp	r3, #0
 8017750:	d01c      	beq.n	801778c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017754:	88db      	ldrh	r3, [r3, #6]
 8017756:	b29a      	uxth	r2, r3
 8017758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801775a:	889b      	ldrh	r3, [r3, #4]
 801775c:	b29b      	uxth	r3, r3
 801775e:	429a      	cmp	r2, r3
 8017760:	d906      	bls.n	8017770 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017762:	4b45      	ldr	r3, [pc, #276]	@ (8017878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017764:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017768:	4944      	ldr	r1, [pc, #272]	@ (801787c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801776a:	4845      	ldr	r0, [pc, #276]	@ (8017880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801776c:	f000 ffa8 	bl	80186c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017772:	68ba      	ldr	r2, [r7, #8]
 8017774:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017778:	88db      	ldrh	r3, [r3, #6]
 801777a:	b29a      	uxth	r2, r3
 801777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801777e:	889b      	ldrh	r3, [r3, #4]
 8017780:	b29b      	uxth	r3, r3
 8017782:	429a      	cmp	r2, r3
 8017784:	d010      	beq.n	80177a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017786:	2300      	movs	r3, #0
 8017788:	623b      	str	r3, [r7, #32]
 801778a:	e00d      	b.n	80177a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d006      	beq.n	80177a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017794:	4b38      	ldr	r3, [pc, #224]	@ (8017878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017796:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801779a:	493a      	ldr	r1, [pc, #232]	@ (8017884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801779c:	4838      	ldr	r0, [pc, #224]	@ (8017880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801779e:	f000 ff8f 	bl	80186c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	68ba      	ldr	r2, [r7, #8]
 80177a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d105      	bne.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	7f9b      	ldrb	r3, [r3, #30]
 80177b2:	f003 0301 	and.w	r3, r3, #1
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d059      	beq.n	801786e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80177ba:	6a3b      	ldr	r3, [r7, #32]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d04f      	beq.n	8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d006      	beq.n	80177d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	685b      	ldr	r3, [r3, #4]
 80177ce:	889b      	ldrh	r3, [r3, #4]
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d002      	beq.n	80177dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	623b      	str	r3, [r7, #32]
 80177da:	e041      	b.n	8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80177dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80177e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80177e6:	e012      	b.n	801780e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80177e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ea:	685b      	ldr	r3, [r3, #4]
 80177ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80177ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177f0:	88db      	ldrh	r3, [r3, #6]
 80177f2:	b29a      	uxth	r2, r3
 80177f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177f6:	889b      	ldrh	r3, [r3, #4]
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d002      	beq.n	8017804 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	623b      	str	r3, [r7, #32]
            break;
 8017802:	e007      	b.n	8017814 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017806:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017810:	2b00      	cmp	r3, #0
 8017812:	d1e9      	bne.n	80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017814:	6a3b      	ldr	r3, [r7, #32]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d022      	beq.n	8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	685b      	ldr	r3, [r3, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d106      	bne.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017822:	4b15      	ldr	r3, [pc, #84]	@ (8017878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017824:	f240 12df 	movw	r2, #479	@ 0x1df
 8017828:	4917      	ldr	r1, [pc, #92]	@ (8017888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801782a:	4815      	ldr	r0, [pc, #84]	@ (8017880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801782c:	f000 ff48 	bl	80186c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	685b      	ldr	r3, [r3, #4]
 8017834:	685b      	ldr	r3, [r3, #4]
 8017836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017838:	429a      	cmp	r2, r3
 801783a:	d106      	bne.n	801784a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801783c:	4b0e      	ldr	r3, [pc, #56]	@ (8017878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801783e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017842:	4911      	ldr	r1, [pc, #68]	@ (8017888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017844:	480e      	ldr	r0, [pc, #56]	@ (8017880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017846:	f000 ff3b 	bl	80186c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d006      	beq.n	8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017852:	4b09      	ldr	r3, [pc, #36]	@ (8017878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017854:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017858:	490c      	ldr	r1, [pc, #48]	@ (801788c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801785a:	4809      	ldr	r0, [pc, #36]	@ (8017880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801785c:	f000 ff30 	bl	80186c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017860:	6a3b      	ldr	r3, [r7, #32]
 8017862:	2b00      	cmp	r3, #0
 8017864:	bf14      	ite	ne
 8017866:	2301      	movne	r3, #1
 8017868:	2300      	moveq	r3, #0
 801786a:	b2db      	uxtb	r3, r3
 801786c:	e000      	b.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801786e:	2300      	movs	r3, #0
}
 8017870:	4618      	mov	r0, r3
 8017872:	3730      	adds	r7, #48	@ 0x30
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}
 8017878:	0801d09c 	.word	0x0801d09c
 801787c:	0801d180 	.word	0x0801d180
 8017880:	0801d0e4 	.word	0x0801d0e4
 8017884:	0801d1a0 	.word	0x0801d1a0
 8017888:	0801d1d8 	.word	0x0801d1d8
 801788c:	0801d1e8 	.word	0x0801d1e8

08017890 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b08e      	sub	sp, #56	@ 0x38
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	f003 030f 	and.w	r3, r3, #15
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	2b14      	cmp	r3, #20
 80178ae:	f040 8179 	bne.w	8017ba4 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80178b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178b4:	88db      	ldrh	r3, [r3, #6]
 80178b6:	b29b      	uxth	r3, r3
 80178b8:	4618      	mov	r0, r3
 80178ba:	f7f3 ff61 	bl	800b780 <lwip_htons>
 80178be:	4603      	mov	r3, r0
 80178c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178c4:	b29b      	uxth	r3, r3
 80178c6:	00db      	lsls	r3, r3, #3
 80178c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80178ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178cc:	885b      	ldrh	r3, [r3, #2]
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f3 ff55 	bl	800b780 <lwip_htons>
 80178d6:	4603      	mov	r3, r0
 80178d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80178da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	f003 030f 	and.w	r3, r3, #15
 80178e2:	b2db      	uxtb	r3, r3
 80178e4:	009b      	lsls	r3, r3, #2
 80178e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80178ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80178ee:	b29b      	uxth	r3, r3
 80178f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80178f2:	429a      	cmp	r2, r3
 80178f4:	f0c0 8158 	bcc.w	8017ba8 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80178f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80178fc:	b29b      	uxth	r3, r3
 80178fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017900:	1ad3      	subs	r3, r2, r3
 8017902:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f7f5 fc9f 	bl	800d248 <pbuf_clen>
 801790a:	4603      	mov	r3, r0
 801790c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801790e:	4b90      	ldr	r3, [pc, #576]	@ (8017b50 <ip4_reass+0x2c0>)
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	461a      	mov	r2, r3
 8017914:	8c3b      	ldrh	r3, [r7, #32]
 8017916:	4413      	add	r3, r2
 8017918:	2b0a      	cmp	r3, #10
 801791a:	dd10      	ble.n	801793e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801791c:	8c3b      	ldrh	r3, [r7, #32]
 801791e:	4619      	mov	r1, r3
 8017920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017922:	f7ff fd81 	bl	8017428 <ip_reass_remove_oldest_datagram>
 8017926:	4603      	mov	r3, r0
 8017928:	2b00      	cmp	r3, #0
 801792a:	f000 813f 	beq.w	8017bac <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801792e:	4b88      	ldr	r3, [pc, #544]	@ (8017b50 <ip4_reass+0x2c0>)
 8017930:	881b      	ldrh	r3, [r3, #0]
 8017932:	461a      	mov	r2, r3
 8017934:	8c3b      	ldrh	r3, [r7, #32]
 8017936:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017938:	2b0a      	cmp	r3, #10
 801793a:	f300 8137 	bgt.w	8017bac <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801793e:	4b85      	ldr	r3, [pc, #532]	@ (8017b54 <ip4_reass+0x2c4>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	633b      	str	r3, [r7, #48]	@ 0x30
 8017944:	e015      	b.n	8017972 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017948:	695a      	ldr	r2, [r3, #20]
 801794a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	429a      	cmp	r2, r3
 8017950:	d10c      	bne.n	801796c <ip4_reass+0xdc>
 8017952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017954:	699a      	ldr	r2, [r3, #24]
 8017956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017958:	691b      	ldr	r3, [r3, #16]
 801795a:	429a      	cmp	r2, r3
 801795c:	d106      	bne.n	801796c <ip4_reass+0xdc>
 801795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017960:	899a      	ldrh	r2, [r3, #12]
 8017962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017964:	889b      	ldrh	r3, [r3, #4]
 8017966:	b29b      	uxth	r3, r3
 8017968:	429a      	cmp	r2, r3
 801796a:	d006      	beq.n	801797a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	633b      	str	r3, [r7, #48]	@ 0x30
 8017972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017974:	2b00      	cmp	r3, #0
 8017976:	d1e6      	bne.n	8017946 <ip4_reass+0xb6>
 8017978:	e000      	b.n	801797c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801797a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801797e:	2b00      	cmp	r3, #0
 8017980:	d109      	bne.n	8017996 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017982:	8c3b      	ldrh	r3, [r7, #32]
 8017984:	4619      	mov	r1, r3
 8017986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017988:	f7ff fdb0 	bl	80174ec <ip_reass_enqueue_new_datagram>
 801798c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017990:	2b00      	cmp	r3, #0
 8017992:	d11c      	bne.n	80179ce <ip4_reass+0x13e>
      goto nullreturn;
 8017994:	e10d      	b.n	8017bb2 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017998:	88db      	ldrh	r3, [r3, #6]
 801799a:	b29b      	uxth	r3, r3
 801799c:	4618      	mov	r0, r3
 801799e:	f7f3 feef 	bl	800b780 <lwip_htons>
 80179a2:	4603      	mov	r3, r0
 80179a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d110      	bne.n	80179ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80179ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179ae:	89db      	ldrh	r3, [r3, #14]
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7f3 fee5 	bl	800b780 <lwip_htons>
 80179b6:	4603      	mov	r3, r0
 80179b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d006      	beq.n	80179ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80179c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179c2:	3308      	adds	r3, #8
 80179c4:	2214      	movs	r2, #20
 80179c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80179c8:	4618      	mov	r0, r3
 80179ca:	f000 ffae 	bl	801892a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80179ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179d0:	88db      	ldrh	r3, [r3, #6]
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	f003 0320 	and.w	r3, r3, #32
 80179d8:	2b00      	cmp	r3, #0
 80179da:	bf0c      	ite	eq
 80179dc:	2301      	moveq	r3, #1
 80179de:	2300      	movne	r3, #0
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d00e      	beq.n	8017a08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80179ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80179ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80179ee:	4413      	add	r3, r2
 80179f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80179f2:	8b7a      	ldrh	r2, [r7, #26]
 80179f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80179f6:	429a      	cmp	r2, r3
 80179f8:	f0c0 80a8 	bcc.w	8017b4c <ip4_reass+0x2bc>
 80179fc:	8b7b      	ldrh	r3, [r7, #26]
 80179fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017a02:	4293      	cmp	r3, r2
 8017a04:	f200 80a2 	bhi.w	8017b4c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017a08:	69fa      	ldr	r2, [r7, #28]
 8017a0a:	6879      	ldr	r1, [r7, #4]
 8017a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a0e:	f7ff fdd5 	bl	80175bc <ip_reass_chain_frag_into_datagram_and_validate>
 8017a12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a1a:	f000 80a3 	beq.w	8017b64 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8017b50 <ip4_reass+0x2c0>)
 8017a20:	881a      	ldrh	r2, [r3, #0]
 8017a22:	8c3b      	ldrh	r3, [r7, #32]
 8017a24:	4413      	add	r3, r2
 8017a26:	b29a      	uxth	r2, r3
 8017a28:	4b49      	ldr	r3, [pc, #292]	@ (8017b50 <ip4_reass+0x2c0>)
 8017a2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017a2c:	69fb      	ldr	r3, [r7, #28]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d00d      	beq.n	8017a4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017a32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017a36:	4413      	add	r3, r2
 8017a38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a3c:	8a7a      	ldrh	r2, [r7, #18]
 8017a3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a42:	7f9b      	ldrb	r3, [r3, #30]
 8017a44:	f043 0301 	orr.w	r3, r3, #1
 8017a48:	b2da      	uxtb	r2, r3
 8017a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	d179      	bne.n	8017b48 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a56:	8b9b      	ldrh	r3, [r3, #28]
 8017a58:	3314      	adds	r3, #20
 8017a5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a5e:	685b      	ldr	r3, [r3, #4]
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a70:	3308      	adds	r3, #8
 8017a72:	2214      	movs	r2, #20
 8017a74:	4619      	mov	r1, r3
 8017a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017a78:	f000 ff57 	bl	801892a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017a7c:	8a3b      	ldrh	r3, [r7, #16]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7f3 fe7e 	bl	800b780 <lwip_htons>
 8017a84:	4603      	mov	r3, r0
 8017a86:	461a      	mov	r2, r3
 8017a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8e:	2200      	movs	r2, #0
 8017a90:	719a      	strb	r2, [r3, #6]
 8017a92:	2200      	movs	r2, #0
 8017a94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a98:	2200      	movs	r2, #0
 8017a9a:	729a      	strb	r2, [r3, #10]
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8017aa0:	2114      	movs	r1, #20
 8017aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017aa4:	f7f3 ffb4 	bl	800ba10 <inet_chksum>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	461a      	mov	r2, r3
 8017aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aae:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017ab6:	e00d      	b.n	8017ad4 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8017ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017abe:	2114      	movs	r1, #20
 8017ac0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017ac2:	f7f5 faad 	bl	800d020 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017ac6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f7f5 fbfd 	bl	800d2c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d1ee      	bne.n	8017ab8 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017ada:	4b1e      	ldr	r3, [pc, #120]	@ (8017b54 <ip4_reass+0x2c4>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d102      	bne.n	8017aea <ip4_reass+0x25a>
      ipr_prev = NULL;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017ae8:	e010      	b.n	8017b0c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017aea:	4b1a      	ldr	r3, [pc, #104]	@ (8017b54 <ip4_reass+0x2c4>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017af0:	e007      	b.n	8017b02 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8017af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d006      	beq.n	8017b0a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d1f4      	bne.n	8017af2 <ip4_reass+0x262>
 8017b08:	e000      	b.n	8017b0c <ip4_reass+0x27c>
          break;
 8017b0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017b0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b10:	f7ff fd26 	bl	8017560 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017b14:	6878      	ldr	r0, [r7, #4]
 8017b16:	f7f5 fb97 	bl	800d248 <pbuf_clen>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8017b50 <ip4_reass+0x2c0>)
 8017b20:	881b      	ldrh	r3, [r3, #0]
 8017b22:	8c3a      	ldrh	r2, [r7, #32]
 8017b24:	429a      	cmp	r2, r3
 8017b26:	d906      	bls.n	8017b36 <ip4_reass+0x2a6>
 8017b28:	4b0b      	ldr	r3, [pc, #44]	@ (8017b58 <ip4_reass+0x2c8>)
 8017b2a:	f240 229b 	movw	r2, #667	@ 0x29b
 8017b2e:	490b      	ldr	r1, [pc, #44]	@ (8017b5c <ip4_reass+0x2cc>)
 8017b30:	480b      	ldr	r0, [pc, #44]	@ (8017b60 <ip4_reass+0x2d0>)
 8017b32:	f000 fdc5 	bl	80186c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017b36:	4b06      	ldr	r3, [pc, #24]	@ (8017b50 <ip4_reass+0x2c0>)
 8017b38:	881a      	ldrh	r2, [r3, #0]
 8017b3a:	8c3b      	ldrh	r3, [r7, #32]
 8017b3c:	1ad3      	subs	r3, r2, r3
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	4b03      	ldr	r3, [pc, #12]	@ (8017b50 <ip4_reass+0x2c0>)
 8017b42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	e038      	b.n	8017bba <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	e036      	b.n	8017bba <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8017b4c:	bf00      	nop
 8017b4e:	e00a      	b.n	8017b66 <ip4_reass+0x2d6>
 8017b50:	20015954 	.word	0x20015954
 8017b54:	20015950 	.word	0x20015950
 8017b58:	0801d09c 	.word	0x0801d09c
 8017b5c:	0801d20c 	.word	0x0801d20c
 8017b60:	0801d0e4 	.word	0x0801d0e4
    goto nullreturn_ipr;
 8017b64:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d106      	bne.n	8017b7a <ip4_reass+0x2ea>
 8017b6c:	4b15      	ldr	r3, [pc, #84]	@ (8017bc4 <ip4_reass+0x334>)
 8017b6e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8017b72:	4915      	ldr	r1, [pc, #84]	@ (8017bc8 <ip4_reass+0x338>)
 8017b74:	4815      	ldr	r0, [pc, #84]	@ (8017bcc <ip4_reass+0x33c>)
 8017b76:	f000 fda3 	bl	80186c0 <iprintf>
  if (ipr->p == NULL) {
 8017b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d116      	bne.n	8017bb0 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017b82:	4b13      	ldr	r3, [pc, #76]	@ (8017bd0 <ip4_reass+0x340>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d006      	beq.n	8017b9a <ip4_reass+0x30a>
 8017b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8017bc4 <ip4_reass+0x334>)
 8017b8e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017b92:	4910      	ldr	r1, [pc, #64]	@ (8017bd4 <ip4_reass+0x344>)
 8017b94:	480d      	ldr	r0, [pc, #52]	@ (8017bcc <ip4_reass+0x33c>)
 8017b96:	f000 fd93 	bl	80186c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017b9a:	2100      	movs	r1, #0
 8017b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b9e:	f7ff fcdf 	bl	8017560 <ip_reass_dequeue_datagram>
 8017ba2:	e006      	b.n	8017bb2 <ip4_reass+0x322>
    goto nullreturn;
 8017ba4:	bf00      	nop
 8017ba6:	e004      	b.n	8017bb2 <ip4_reass+0x322>
    goto nullreturn;
 8017ba8:	bf00      	nop
 8017baa:	e002      	b.n	8017bb2 <ip4_reass+0x322>
      goto nullreturn;
 8017bac:	bf00      	nop
 8017bae:	e000      	b.n	8017bb2 <ip4_reass+0x322>
  }

nullreturn:
 8017bb0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f7f5 faba 	bl	800d12c <pbuf_free>
  return NULL;
 8017bb8:	2300      	movs	r3, #0
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	3738      	adds	r7, #56	@ 0x38
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	0801d09c 	.word	0x0801d09c
 8017bc8:	0801d228 	.word	0x0801d228
 8017bcc:	0801d0e4 	.word	0x0801d0e4
 8017bd0:	20015950 	.word	0x20015950
 8017bd4:	0801d234 	.word	0x0801d234

08017bd8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017bdc:	2005      	movs	r0, #5
 8017bde:	f7f4 fbfd 	bl	800c3dc <memp_malloc>
 8017be2:	4603      	mov	r3, r0
}
 8017be4:	4618      	mov	r0, r3
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017bf6:	4b07      	ldr	r3, [pc, #28]	@ (8017c14 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017bf8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017bfc:	4906      	ldr	r1, [pc, #24]	@ (8017c18 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017bfe:	4807      	ldr	r0, [pc, #28]	@ (8017c1c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017c00:	f000 fd5e 	bl	80186c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017c04:	6879      	ldr	r1, [r7, #4]
 8017c06:	2005      	movs	r0, #5
 8017c08:	f7f4 fc3a 	bl	800c480 <memp_free>
}
 8017c0c:	bf00      	nop
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	0801d09c 	.word	0x0801d09c
 8017c18:	0801d254 	.word	0x0801d254
 8017c1c:	0801d0e4 	.word	0x0801d0e4

08017c20 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b084      	sub	sp, #16
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d106      	bne.n	8017c40 <ipfrag_free_pbuf_custom+0x20>
 8017c32:	4b11      	ldr	r3, [pc, #68]	@ (8017c78 <ipfrag_free_pbuf_custom+0x58>)
 8017c34:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017c38:	4910      	ldr	r1, [pc, #64]	@ (8017c7c <ipfrag_free_pbuf_custom+0x5c>)
 8017c3a:	4811      	ldr	r0, [pc, #68]	@ (8017c80 <ipfrag_free_pbuf_custom+0x60>)
 8017c3c:	f000 fd40 	bl	80186c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017c40:	68fa      	ldr	r2, [r7, #12]
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d006      	beq.n	8017c56 <ipfrag_free_pbuf_custom+0x36>
 8017c48:	4b0b      	ldr	r3, [pc, #44]	@ (8017c78 <ipfrag_free_pbuf_custom+0x58>)
 8017c4a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8017c4e:	490d      	ldr	r1, [pc, #52]	@ (8017c84 <ipfrag_free_pbuf_custom+0x64>)
 8017c50:	480b      	ldr	r0, [pc, #44]	@ (8017c80 <ipfrag_free_pbuf_custom+0x60>)
 8017c52:	f000 fd35 	bl	80186c0 <iprintf>
  if (pcr->original != NULL) {
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	695b      	ldr	r3, [r3, #20]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d004      	beq.n	8017c68 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	695b      	ldr	r3, [r3, #20]
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7f5 fa62 	bl	800d12c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017c68:	68f8      	ldr	r0, [r7, #12]
 8017c6a:	f7ff ffbd 	bl	8017be8 <ip_frag_free_pbuf_custom_ref>
}
 8017c6e:	bf00      	nop
 8017c70:	3710      	adds	r7, #16
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	0801d09c 	.word	0x0801d09c
 8017c7c:	0801d260 	.word	0x0801d260
 8017c80:	0801d0e4 	.word	0x0801d0e4
 8017c84:	0801d26c 	.word	0x0801d26c

08017c88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b094      	sub	sp, #80	@ 0x50
 8017c8c:	af02      	add	r7, sp, #8
 8017c8e:	60f8      	str	r0, [r7, #12]
 8017c90:	60b9      	str	r1, [r7, #8]
 8017c92:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017c94:	2300      	movs	r3, #0
 8017c96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c9e:	3b14      	subs	r3, #20
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	da00      	bge.n	8017ca6 <ip4_frag+0x1e>
 8017ca4:	3307      	adds	r3, #7
 8017ca6:	10db      	asrs	r3, r3, #3
 8017ca8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017caa:	2314      	movs	r3, #20
 8017cac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	685b      	ldr	r3, [r3, #4]
 8017cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	f003 030f 	and.w	r3, r3, #15
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	2b14      	cmp	r3, #20
 8017cc8:	d002      	beq.n	8017cd0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017cca:	f06f 0305 	mvn.w	r3, #5
 8017cce:	e118      	b.n	8017f02 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	895b      	ldrh	r3, [r3, #10]
 8017cd4:	2b13      	cmp	r3, #19
 8017cd6:	d809      	bhi.n	8017cec <ip4_frag+0x64>
 8017cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8017f0c <ip4_frag+0x284>)
 8017cda:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8017cde:	498c      	ldr	r1, [pc, #560]	@ (8017f10 <ip4_frag+0x288>)
 8017ce0:	488c      	ldr	r0, [pc, #560]	@ (8017f14 <ip4_frag+0x28c>)
 8017ce2:	f000 fced 	bl	80186c0 <iprintf>
 8017ce6:	f06f 0305 	mvn.w	r3, #5
 8017cea:	e10a      	b.n	8017f02 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cee:	88db      	ldrh	r3, [r3, #6]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7f3 fd44 	bl	800b780 <lwip_htons>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017cfc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017d06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	891b      	ldrh	r3, [r3, #8]
 8017d12:	3b14      	subs	r3, #20
 8017d14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017d18:	e0e9      	b.n	8017eee <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017d1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017d1c:	00db      	lsls	r3, r3, #3
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d24:	4293      	cmp	r3, r2
 8017d26:	bf28      	it	cs
 8017d28:	4613      	movcs	r3, r2
 8017d2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017d30:	2114      	movs	r1, #20
 8017d32:	200e      	movs	r0, #14
 8017d34:	f7f4 ff16 	bl	800cb64 <pbuf_alloc>
 8017d38:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	f000 80dd 	beq.w	8017efc <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d44:	895b      	ldrh	r3, [r3, #10]
 8017d46:	2b13      	cmp	r3, #19
 8017d48:	d806      	bhi.n	8017d58 <ip4_frag+0xd0>
 8017d4a:	4b70      	ldr	r3, [pc, #448]	@ (8017f0c <ip4_frag+0x284>)
 8017d4c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8017d50:	4971      	ldr	r1, [pc, #452]	@ (8017f18 <ip4_frag+0x290>)
 8017d52:	4870      	ldr	r0, [pc, #448]	@ (8017f14 <ip4_frag+0x28c>)
 8017d54:	f000 fcb4 	bl	80186c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	2214      	movs	r2, #20
 8017d5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017d60:	4618      	mov	r0, r3
 8017d62:	f000 fde2 	bl	801892a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d68:	685b      	ldr	r3, [r3, #4]
 8017d6a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017d6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8017d72:	e064      	b.n	8017e3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	895a      	ldrh	r2, [r3, #10]
 8017d78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d7a:	1ad3      	subs	r3, r2, r3
 8017d7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	895b      	ldrh	r3, [r3, #10]
 8017d82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d906      	bls.n	8017d96 <ip4_frag+0x10e>
 8017d88:	4b60      	ldr	r3, [pc, #384]	@ (8017f0c <ip4_frag+0x284>)
 8017d8a:	f240 322d 	movw	r2, #813	@ 0x32d
 8017d8e:	4963      	ldr	r1, [pc, #396]	@ (8017f1c <ip4_frag+0x294>)
 8017d90:	4860      	ldr	r0, [pc, #384]	@ (8017f14 <ip4_frag+0x28c>)
 8017d92:	f000 fc95 	bl	80186c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017d96:	8bfa      	ldrh	r2, [r7, #30]
 8017d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	bf28      	it	cs
 8017da0:	4613      	movcs	r3, r2
 8017da2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d105      	bne.n	8017dba <ip4_frag+0x132>
        poff = 0;
 8017dae:	2300      	movs	r3, #0
 8017db0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	60fb      	str	r3, [r7, #12]
        continue;
 8017db8:	e041      	b.n	8017e3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017dba:	f7ff ff0d 	bl	8017bd8 <ip_frag_alloc_pbuf_custom_ref>
 8017dbe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d103      	bne.n	8017dce <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017dc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017dc8:	f7f5 f9b0 	bl	800d12c <pbuf_free>
        goto memerr;
 8017dcc:	e097      	b.n	8017efe <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017dce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017dd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017dd6:	4413      	add	r3, r2
 8017dd8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017ddc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017de0:	9201      	str	r2, [sp, #4]
 8017de2:	9300      	str	r3, [sp, #0]
 8017de4:	4603      	mov	r3, r0
 8017de6:	2241      	movs	r2, #65	@ 0x41
 8017de8:	2000      	movs	r0, #0
 8017dea:	f7f4 ffe5 	bl	800cdb8 <pbuf_alloced_custom>
 8017dee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017df0:	697b      	ldr	r3, [r7, #20]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d106      	bne.n	8017e04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017df6:	69b8      	ldr	r0, [r7, #24]
 8017df8:	f7ff fef6 	bl	8017be8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017dfe:	f7f5 f995 	bl	800d12c <pbuf_free>
        goto memerr;
 8017e02:	e07c      	b.n	8017efe <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8017e04:	68f8      	ldr	r0, [r7, #12]
 8017e06:	f7f5 fa37 	bl	800d278 <pbuf_ref>
      pcr->original = p;
 8017e0a:	69bb      	ldr	r3, [r7, #24]
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017e10:	69bb      	ldr	r3, [r7, #24]
 8017e12:	4a43      	ldr	r2, [pc, #268]	@ (8017f20 <ip4_frag+0x298>)
 8017e14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017e16:	6979      	ldr	r1, [r7, #20]
 8017e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017e1a:	f7f5 fa55 	bl	800d2c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017e1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017e22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017e26:	1ad3      	subs	r3, r2, r3
 8017e28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d004      	beq.n	8017e3e <ip4_frag+0x1b6>
        poff = 0;
 8017e34:	2300      	movs	r3, #0
 8017e36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017e3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d196      	bne.n	8017d74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017e46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017e48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017e4c:	4413      	add	r3, r2
 8017e4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017e54:	f1a3 0213 	sub.w	r2, r3, #19
 8017e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	bfcc      	ite	gt
 8017e60:	2301      	movgt	r3, #1
 8017e62:	2300      	movle	r3, #0
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8017e72:	6a3b      	ldr	r3, [r7, #32]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d002      	beq.n	8017e7e <ip4_frag+0x1f6>
 8017e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d003      	beq.n	8017e86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017e7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017e84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017e86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7f3 fc79 	bl	800b780 <lwip_htons>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	461a      	mov	r2, r3
 8017e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017e96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017e98:	3314      	adds	r3, #20
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7f3 fc6f 	bl	800b780 <lwip_htons>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ea8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eac:	2200      	movs	r2, #0
 8017eae:	729a      	strb	r2, [r3, #10]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8017eb4:	2114      	movs	r1, #20
 8017eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017eb8:	f7f3 fdaa 	bl	800ba10 <inet_chksum>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ec2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	695b      	ldr	r3, [r3, #20]
 8017ec8:	687a      	ldr	r2, [r7, #4]
 8017eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017ecc:	68b8      	ldr	r0, [r7, #8]
 8017ece:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017ed0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ed2:	f7f5 f92b 	bl	800d12c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017ed6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017eda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8017ee2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017ee6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017ee8:	4413      	add	r3, r2
 8017eea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8017eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	f47f af11 	bne.w	8017d1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017ef8:	2300      	movs	r3, #0
 8017efa:	e002      	b.n	8017f02 <ip4_frag+0x27a>
      goto memerr;
 8017efc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3748      	adds	r7, #72	@ 0x48
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	0801d09c 	.word	0x0801d09c
 8017f10:	0801d278 	.word	0x0801d278
 8017f14:	0801d0e4 	.word	0x0801d0e4
 8017f18:	0801d294 	.word	0x0801d294
 8017f1c:	0801d2b4 	.word	0x0801d2b4
 8017f20:	08017c21 	.word	0x08017c21

08017f24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017f2e:	230e      	movs	r3, #14
 8017f30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	895b      	ldrh	r3, [r3, #10]
 8017f36:	2b0e      	cmp	r3, #14
 8017f38:	d96e      	bls.n	8018018 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	7bdb      	ldrb	r3, [r3, #15]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d106      	bne.n	8017f50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017f48:	3301      	adds	r3, #1
 8017f4a:	b2da      	uxtb	r2, r3
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	685b      	ldr	r3, [r3, #4]
 8017f54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	7b1a      	ldrb	r2, [r3, #12]
 8017f5a:	7b5b      	ldrb	r3, [r3, #13]
 8017f5c:	021b      	lsls	r3, r3, #8
 8017f5e:	4313      	orrs	r3, r2
 8017f60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017f62:	693b      	ldr	r3, [r7, #16]
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	f003 0301 	and.w	r3, r3, #1
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d023      	beq.n	8017fb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017f6e:	693b      	ldr	r3, [r7, #16]
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	2b01      	cmp	r3, #1
 8017f74:	d10f      	bne.n	8017f96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017f76:	693b      	ldr	r3, [r7, #16]
 8017f78:	785b      	ldrb	r3, [r3, #1]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d11b      	bne.n	8017fb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017f7e:	693b      	ldr	r3, [r7, #16]
 8017f80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017f82:	2b5e      	cmp	r3, #94	@ 0x5e
 8017f84:	d117      	bne.n	8017fb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	7b5b      	ldrb	r3, [r3, #13]
 8017f8a:	f043 0310 	orr.w	r3, r3, #16
 8017f8e:	b2da      	uxtb	r2, r3
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	735a      	strb	r2, [r3, #13]
 8017f94:	e00f      	b.n	8017fb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017f96:	693b      	ldr	r3, [r7, #16]
 8017f98:	2206      	movs	r2, #6
 8017f9a:	4928      	ldr	r1, [pc, #160]	@ (801803c <ethernet_input+0x118>)
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f000 fc04 	bl	80187aa <memcmp>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d106      	bne.n	8017fb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	7b5b      	ldrb	r3, [r3, #13]
 8017fac:	f043 0308 	orr.w	r3, r3, #8
 8017fb0:	b2da      	uxtb	r2, r3
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017fb6:	89fb      	ldrh	r3, [r7, #14]
 8017fb8:	2b08      	cmp	r3, #8
 8017fba:	d003      	beq.n	8017fc4 <ethernet_input+0xa0>
 8017fbc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8017fc0:	d014      	beq.n	8017fec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017fc2:	e032      	b.n	801802a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017fca:	f003 0308 	and.w	r3, r3, #8
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d024      	beq.n	801801c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017fd2:	8afb      	ldrh	r3, [r7, #22]
 8017fd4:	4619      	mov	r1, r3
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f7f5 f822 	bl	800d020 <pbuf_remove_header>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d11e      	bne.n	8018020 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017fe2:	6839      	ldr	r1, [r7, #0]
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7fe fe81 	bl	8016cec <ip4_input>
      break;
 8017fea:	e013      	b.n	8018014 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017ff2:	f003 0308 	and.w	r3, r3, #8
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d014      	beq.n	8018024 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017ffa:	8afb      	ldrh	r3, [r7, #22]
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7f5 f80e 	bl	800d020 <pbuf_remove_header>
 8018004:	4603      	mov	r3, r0
 8018006:	2b00      	cmp	r3, #0
 8018008:	d10e      	bne.n	8018028 <ethernet_input+0x104>
        etharp_input(p, netif);
 801800a:	6839      	ldr	r1, [r7, #0]
 801800c:	6878      	ldr	r0, [r7, #4]
 801800e:	f7fd ffef 	bl	8015ff0 <etharp_input>
      break;
 8018012:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018014:	2300      	movs	r3, #0
 8018016:	e00c      	b.n	8018032 <ethernet_input+0x10e>
    goto free_and_return;
 8018018:	bf00      	nop
 801801a:	e006      	b.n	801802a <ethernet_input+0x106>
        goto free_and_return;
 801801c:	bf00      	nop
 801801e:	e004      	b.n	801802a <ethernet_input+0x106>
        goto free_and_return;
 8018020:	bf00      	nop
 8018022:	e002      	b.n	801802a <ethernet_input+0x106>
        goto free_and_return;
 8018024:	bf00      	nop
 8018026:	e000      	b.n	801802a <ethernet_input+0x106>
        goto free_and_return;
 8018028:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f7f5 f87e 	bl	800d12c <pbuf_free>
  return ERR_OK;
 8018030:	2300      	movs	r3, #0
}
 8018032:	4618      	mov	r0, r3
 8018034:	3718      	adds	r7, #24
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	080267dc 	.word	0x080267dc

08018040 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018040:	b580      	push	{r7, lr}
 8018042:	b086      	sub	sp, #24
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
 801804c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801804e:	8c3b      	ldrh	r3, [r7, #32]
 8018050:	4618      	mov	r0, r3
 8018052:	f7f3 fb95 	bl	800b780 <lwip_htons>
 8018056:	4603      	mov	r3, r0
 8018058:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801805a:	210e      	movs	r1, #14
 801805c:	68b8      	ldr	r0, [r7, #8]
 801805e:	f7f4 ffcf 	bl	800d000 <pbuf_add_header>
 8018062:	4603      	mov	r3, r0
 8018064:	2b00      	cmp	r3, #0
 8018066:	d125      	bne.n	80180b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	8afa      	ldrh	r2, [r7, #22]
 8018072:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	2206      	movs	r2, #6
 8018078:	6839      	ldr	r1, [r7, #0]
 801807a:	4618      	mov	r0, r3
 801807c:	f000 fc55 	bl	801892a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	3306      	adds	r3, #6
 8018084:	2206      	movs	r2, #6
 8018086:	6879      	ldr	r1, [r7, #4]
 8018088:	4618      	mov	r0, r3
 801808a:	f000 fc4e 	bl	801892a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018094:	2b06      	cmp	r3, #6
 8018096:	d006      	beq.n	80180a6 <ethernet_output+0x66>
 8018098:	4b0a      	ldr	r3, [pc, #40]	@ (80180c4 <ethernet_output+0x84>)
 801809a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801809e:	490a      	ldr	r1, [pc, #40]	@ (80180c8 <ethernet_output+0x88>)
 80180a0:	480a      	ldr	r0, [pc, #40]	@ (80180cc <ethernet_output+0x8c>)
 80180a2:	f000 fb0d 	bl	80186c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	699b      	ldr	r3, [r3, #24]
 80180aa:	68b9      	ldr	r1, [r7, #8]
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	4798      	blx	r3
 80180b0:	4603      	mov	r3, r0
 80180b2:	e002      	b.n	80180ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80180b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80180b6:	f06f 0301 	mvn.w	r3, #1
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	0801d2c4 	.word	0x0801d2c4
 80180c8:	0801d2fc 	.word	0x0801d2fc
 80180cc:	0801d330 	.word	0x0801d330

080180d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b086      	sub	sp, #24
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	60bb      	str	r3, [r7, #8]
 80180de:	2304      	movs	r3, #4
 80180e0:	60fb      	str	r3, [r7, #12]
 80180e2:	2300      	movs	r3, #0
 80180e4:	613b      	str	r3, [r7, #16]
 80180e6:	2300      	movs	r3, #0
 80180e8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80180ea:	f107 0308 	add.w	r3, r7, #8
 80180ee:	2100      	movs	r1, #0
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7ee f9be 	bl	8006472 <osMessageCreate>
 80180f6:	4602      	mov	r2, r0
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d102      	bne.n	801810a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018104:	f04f 33ff 	mov.w	r3, #4294967295
 8018108:	e000      	b.n	801810c <sys_mbox_new+0x3c>

  return ERR_OK;
 801810a:	2300      	movs	r3, #0
}
 801810c:	4618      	mov	r0, r3
 801810e:	3718      	adds	r7, #24
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4618      	mov	r0, r3
 8018122:	f7ee fa8e 	bl	8006642 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	4618      	mov	r0, r3
 801812c:	f7ee fa9f 	bl	800666e <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018130:	bf00      	nop
 8018132:	3708      	adds	r7, #8
 8018134:	46bd      	mov	sp, r7
 8018136:	bd80      	pop	{r7, pc}

08018138 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
 8018140:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8018142:	bf00      	nop
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	f04f 32ff 	mov.w	r2, #4294967295
 801814e:	4618      	mov	r0, r3
 8018150:	f7ee f9b8 	bl	80064c4 <osMessagePut>
 8018154:	4603      	mov	r3, r0
 8018156:	2b00      	cmp	r3, #0
 8018158:	d1f4      	bne.n	8018144 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801815a:	bf00      	nop
 801815c:	bf00      	nop
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b084      	sub	sp, #16
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
 801816c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	6839      	ldr	r1, [r7, #0]
 8018174:	2200      	movs	r2, #0
 8018176:	4618      	mov	r0, r3
 8018178:	f7ee f9a4 	bl	80064c4 <osMessagePut>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	d102      	bne.n	8018188 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018182:	2300      	movs	r3, #0
 8018184:	73fb      	strb	r3, [r7, #15]
 8018186:	e001      	b.n	801818c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018188:	23ff      	movs	r3, #255	@ 0xff
 801818a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801818c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018190:	4618      	mov	r0, r3
 8018192:	3710      	adds	r7, #16
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08c      	sub	sp, #48	@ 0x30
 801819c:	af00      	add	r7, sp, #0
 801819e:	61f8      	str	r0, [r7, #28]
 80181a0:	61b9      	str	r1, [r7, #24]
 80181a2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80181a4:	f7ed ff76 	bl	8006094 <osKernelSysTick>
 80181a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d017      	beq.n	80181e0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	6819      	ldr	r1, [r3, #0]
 80181b4:	f107 0320 	add.w	r3, r7, #32
 80181b8:	697a      	ldr	r2, [r7, #20]
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7ee f9c2 	bl	8006544 <osMessageGet>

    if(event.status == osEventMessage)
 80181c0:	6a3b      	ldr	r3, [r7, #32]
 80181c2:	2b10      	cmp	r3, #16
 80181c4:	d109      	bne.n	80181da <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80181c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c8:	461a      	mov	r2, r3
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80181ce:	f7ed ff61 	bl	8006094 <osKernelSysTick>
 80181d2:	4602      	mov	r2, r0
 80181d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181d6:	1ad3      	subs	r3, r2, r3
 80181d8:	e019      	b.n	801820e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80181da:	f04f 33ff 	mov.w	r3, #4294967295
 80181de:	e016      	b.n	801820e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	6819      	ldr	r1, [r3, #0]
 80181e4:	463b      	mov	r3, r7
 80181e6:	f04f 32ff 	mov.w	r2, #4294967295
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7ee f9aa 	bl	8006544 <osMessageGet>
 80181f0:	f107 0320 	add.w	r3, r7, #32
 80181f4:	463a      	mov	r2, r7
 80181f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80181f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80181fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181fe:	461a      	mov	r2, r3
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018204:	f7ed ff46 	bl	8006094 <osKernelSysTick>
 8018208:	4602      	mov	r2, r0
 801820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801820c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801820e:	4618      	mov	r0, r3
 8018210:	3730      	adds	r7, #48	@ 0x30
 8018212:	46bd      	mov	sp, r7
 8018214:	bd80      	pop	{r7, pc}

08018216 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018216:	b580      	push	{r7, lr}
 8018218:	b086      	sub	sp, #24
 801821a:	af00      	add	r7, sp, #0
 801821c:	6078      	str	r0, [r7, #4]
 801821e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6819      	ldr	r1, [r3, #0]
 8018224:	f107 030c 	add.w	r3, r7, #12
 8018228:	2200      	movs	r2, #0
 801822a:	4618      	mov	r0, r3
 801822c:	f7ee f98a 	bl	8006544 <osMessageGet>

  if(event.status == osEventMessage)
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	2b10      	cmp	r3, #16
 8018234:	d105      	bne.n	8018242 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	461a      	mov	r2, r3
 801823a:	683b      	ldr	r3, [r7, #0]
 801823c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801823e:	2300      	movs	r3, #0
 8018240:	e001      	b.n	8018246 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018242:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018246:	4618      	mov	r0, r3
 8018248:	3718      	adds	r7, #24
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}

0801824e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801824e:	b480      	push	{r7}
 8018250:	b083      	sub	sp, #12
 8018252:	af00      	add	r7, sp, #0
 8018254:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d101      	bne.n	8018262 <sys_mbox_valid+0x14>
    return 0;
 801825e:	2300      	movs	r3, #0
 8018260:	e000      	b.n	8018264 <sys_mbox_valid+0x16>
  else
    return 1;
 8018262:	2301      	movs	r3, #1
}
 8018264:	4618      	mov	r0, r3
 8018266:	370c      	adds	r7, #12
 8018268:	46bd      	mov	sp, r7
 801826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826e:	4770      	bx	lr

08018270 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018270:	b480      	push	{r7}
 8018272:	b083      	sub	sp, #12
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	2200      	movs	r2, #0
 801827c:	601a      	str	r2, [r3, #0]
}
 801827e:	bf00      	nop
 8018280:	370c      	adds	r7, #12
 8018282:	46bd      	mov	sp, r7
 8018284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018288:	4770      	bx	lr

0801828a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801828a:	b580      	push	{r7, lr}
 801828c:	b084      	sub	sp, #16
 801828e:	af00      	add	r7, sp, #0
 8018290:	6078      	str	r0, [r7, #4]
 8018292:	460b      	mov	r3, r1
 8018294:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018296:	2300      	movs	r3, #0
 8018298:	60bb      	str	r3, [r7, #8]
 801829a:	2300      	movs	r3, #0
 801829c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801829e:	f107 0308 	add.w	r3, r7, #8
 80182a2:	2101      	movs	r1, #1
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7ee f80d 	bl	80062c4 <osSemaphoreCreate>
 80182aa:	4602      	mov	r2, r0
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d102      	bne.n	80182be <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80182b8:	f04f 33ff 	mov.w	r3, #4294967295
 80182bc:	e009      	b.n	80182d2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80182be:	78fb      	ldrb	r3, [r7, #3]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d105      	bne.n	80182d0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	2100      	movs	r1, #0
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7ee f83a 	bl	8006344 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80182d0:	2300      	movs	r3, #0
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3710      	adds	r7, #16
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}

080182da <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80182da:	b580      	push	{r7, lr}
 80182dc:	b084      	sub	sp, #16
 80182de:	af00      	add	r7, sp, #0
 80182e0:	6078      	str	r0, [r7, #4]
 80182e2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80182e4:	f7ed fed6 	bl	8006094 <osKernelSysTick>
 80182e8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d011      	beq.n	8018314 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	6839      	ldr	r1, [r7, #0]
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7ee f824 	bl	8006344 <osSemaphoreWait>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d105      	bne.n	801830e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018302:	f7ed fec7 	bl	8006094 <osKernelSysTick>
 8018306:	4602      	mov	r2, r0
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	1ad3      	subs	r3, r2, r3
 801830c:	e012      	b.n	8018334 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801830e:	f04f 33ff 	mov.w	r3, #4294967295
 8018312:	e00f      	b.n	8018334 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018314:	bf00      	nop
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f04f 31ff 	mov.w	r1, #4294967295
 801831e:	4618      	mov	r0, r3
 8018320:	f7ee f810 	bl	8006344 <osSemaphoreWait>
 8018324:	4603      	mov	r3, r0
 8018326:	2b00      	cmp	r3, #0
 8018328:	d1f5      	bne.n	8018316 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801832a:	f7ed feb3 	bl	8006094 <osKernelSysTick>
 801832e:	4602      	mov	r2, r0
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018334:	4618      	mov	r0, r3
 8018336:	3710      	adds	r7, #16
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b082      	sub	sp, #8
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	4618      	mov	r0, r3
 801834a:	f7ee f849 	bl	80063e0 <osSemaphoreRelease>
}
 801834e:	bf00      	nop
 8018350:	3708      	adds	r7, #8
 8018352:	46bd      	mov	sp, r7
 8018354:	bd80      	pop	{r7, pc}

08018356 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018356:	b580      	push	{r7, lr}
 8018358:	b082      	sub	sp, #8
 801835a:	af00      	add	r7, sp, #0
 801835c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	4618      	mov	r0, r3
 8018364:	f7ee f872 	bl	800644c <osSemaphoreDelete>
}
 8018368:	bf00      	nop
 801836a:	3708      	adds	r7, #8
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}

08018370 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018370:	b480      	push	{r7}
 8018372:	b083      	sub	sp, #12
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d101      	bne.n	8018384 <sys_sem_valid+0x14>
    return 0;
 8018380:	2300      	movs	r3, #0
 8018382:	e000      	b.n	8018386 <sys_sem_valid+0x16>
  else
    return 1;
 8018384:	2301      	movs	r3, #1
}
 8018386:	4618      	mov	r0, r3
 8018388:	370c      	adds	r7, #12
 801838a:	46bd      	mov	sp, r7
 801838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018390:	4770      	bx	lr

08018392 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018392:	b480      	push	{r7}
 8018394:	b083      	sub	sp, #12
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2200      	movs	r2, #0
 801839e:	601a      	str	r2, [r3, #0]
}
 80183a0:	bf00      	nop
 80183a2:	370c      	adds	r7, #12
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80183b0:	4803      	ldr	r0, [pc, #12]	@ (80183c0 <sys_init+0x14>)
 80183b2:	f7ed feeb 	bl	800618c <osMutexCreate>
 80183b6:	4603      	mov	r3, r0
 80183b8:	4a02      	ldr	r2, [pc, #8]	@ (80183c4 <sys_init+0x18>)
 80183ba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80183bc:	bf00      	nop
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	080267ec 	.word	0x080267ec
 80183c4:	2001595c 	.word	0x2001595c

080183c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b084      	sub	sp, #16
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80183d0:	2300      	movs	r3, #0
 80183d2:	60bb      	str	r3, [r7, #8]
 80183d4:	2300      	movs	r3, #0
 80183d6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80183d8:	f107 0308 	add.w	r3, r7, #8
 80183dc:	4618      	mov	r0, r3
 80183de:	f7ed fed5 	bl	800618c <osMutexCreate>
 80183e2:	4602      	mov	r2, r0
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d102      	bne.n	80183f6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80183f0:	f04f 33ff 	mov.w	r3, #4294967295
 80183f4:	e000      	b.n	80183f8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80183f6:	2300      	movs	r3, #0
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3710      	adds	r7, #16
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b082      	sub	sp, #8
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f04f 31ff 	mov.w	r1, #4294967295
 8018410:	4618      	mov	r0, r3
 8018412:	f7ed fed3 	bl	80061bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018416:	bf00      	nop
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}

0801841e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b082      	sub	sp, #8
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4618      	mov	r0, r3
 801842c:	f7ed ff14 	bl	8006258 <osMutexRelease>
}
 8018430:	bf00      	nop
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b08c      	sub	sp, #48	@ 0x30
 801843c:	af00      	add	r7, sp, #0
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
 8018444:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018446:	f107 0314 	add.w	r3, r7, #20
 801844a:	2200      	movs	r2, #0
 801844c:	601a      	str	r2, [r3, #0]
 801844e:	605a      	str	r2, [r3, #4]
 8018450:	609a      	str	r2, [r3, #8]
 8018452:	60da      	str	r2, [r3, #12]
 8018454:	611a      	str	r2, [r3, #16]
 8018456:	615a      	str	r2, [r3, #20]
 8018458:	619a      	str	r2, [r3, #24]
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	617b      	str	r3, [r7, #20]
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	61bb      	str	r3, [r7, #24]
 8018462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018464:	b21b      	sxth	r3, r3
 8018466:	83bb      	strh	r3, [r7, #28]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801846c:	f107 0314 	add.w	r3, r7, #20
 8018470:	6879      	ldr	r1, [r7, #4]
 8018472:	4618      	mov	r0, r3
 8018474:	f7ed fe1e 	bl	80060b4 <osThreadCreate>
 8018478:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801847a:	4618      	mov	r0, r3
 801847c:	3730      	adds	r7, #48	@ 0x30
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
	...

08018484 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018488:	4b04      	ldr	r3, [pc, #16]	@ (801849c <sys_arch_protect+0x18>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	f04f 31ff 	mov.w	r1, #4294967295
 8018490:	4618      	mov	r0, r3
 8018492:	f7ed fe93 	bl	80061bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018496:	2301      	movs	r3, #1
}
 8018498:	4618      	mov	r0, r3
 801849a:	bd80      	pop	{r7, pc}
 801849c:	2001595c 	.word	0x2001595c

080184a0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80184a8:	4b04      	ldr	r3, [pc, #16]	@ (80184bc <sys_arch_unprotect+0x1c>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7ed fed3 	bl	8006258 <osMutexRelease>
}
 80184b2:	bf00      	nop
 80184b4:	3708      	adds	r7, #8
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	2001595c 	.word	0x2001595c

080184c0 <rand>:
 80184c0:	4b16      	ldr	r3, [pc, #88]	@ (801851c <rand+0x5c>)
 80184c2:	b510      	push	{r4, lr}
 80184c4:	681c      	ldr	r4, [r3, #0]
 80184c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184c8:	b9b3      	cbnz	r3, 80184f8 <rand+0x38>
 80184ca:	2018      	movs	r0, #24
 80184cc:	f000 fa5a 	bl	8018984 <malloc>
 80184d0:	4602      	mov	r2, r0
 80184d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80184d4:	b920      	cbnz	r0, 80184e0 <rand+0x20>
 80184d6:	4b12      	ldr	r3, [pc, #72]	@ (8018520 <rand+0x60>)
 80184d8:	4812      	ldr	r0, [pc, #72]	@ (8018524 <rand+0x64>)
 80184da:	2152      	movs	r1, #82	@ 0x52
 80184dc:	f000 fa34 	bl	8018948 <__assert_func>
 80184e0:	4911      	ldr	r1, [pc, #68]	@ (8018528 <rand+0x68>)
 80184e2:	4b12      	ldr	r3, [pc, #72]	@ (801852c <rand+0x6c>)
 80184e4:	e9c0 1300 	strd	r1, r3, [r0]
 80184e8:	4b11      	ldr	r3, [pc, #68]	@ (8018530 <rand+0x70>)
 80184ea:	6083      	str	r3, [r0, #8]
 80184ec:	230b      	movs	r3, #11
 80184ee:	8183      	strh	r3, [r0, #12]
 80184f0:	2100      	movs	r1, #0
 80184f2:	2001      	movs	r0, #1
 80184f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80184f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80184fa:	480e      	ldr	r0, [pc, #56]	@ (8018534 <rand+0x74>)
 80184fc:	690b      	ldr	r3, [r1, #16]
 80184fe:	694c      	ldr	r4, [r1, #20]
 8018500:	4a0d      	ldr	r2, [pc, #52]	@ (8018538 <rand+0x78>)
 8018502:	4358      	muls	r0, r3
 8018504:	fb02 0004 	mla	r0, r2, r4, r0
 8018508:	fba3 3202 	umull	r3, r2, r3, r2
 801850c:	3301      	adds	r3, #1
 801850e:	eb40 0002 	adc.w	r0, r0, r2
 8018512:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018516:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801851a:	bd10      	pop	{r4, pc}
 801851c:	20000030 	.word	0x20000030
 8018520:	080267f4 	.word	0x080267f4
 8018524:	0802680b 	.word	0x0802680b
 8018528:	abcd330e 	.word	0xabcd330e
 801852c:	e66d1234 	.word	0xe66d1234
 8018530:	0005deec 	.word	0x0005deec
 8018534:	5851f42d 	.word	0x5851f42d
 8018538:	4c957f2d 	.word	0x4c957f2d

0801853c <std>:
 801853c:	2300      	movs	r3, #0
 801853e:	b510      	push	{r4, lr}
 8018540:	4604      	mov	r4, r0
 8018542:	e9c0 3300 	strd	r3, r3, [r0]
 8018546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801854a:	6083      	str	r3, [r0, #8]
 801854c:	8181      	strh	r1, [r0, #12]
 801854e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018550:	81c2      	strh	r2, [r0, #14]
 8018552:	6183      	str	r3, [r0, #24]
 8018554:	4619      	mov	r1, r3
 8018556:	2208      	movs	r2, #8
 8018558:	305c      	adds	r0, #92	@ 0x5c
 801855a:	f000 f950 	bl	80187fe <memset>
 801855e:	4b0d      	ldr	r3, [pc, #52]	@ (8018594 <std+0x58>)
 8018560:	6263      	str	r3, [r4, #36]	@ 0x24
 8018562:	4b0d      	ldr	r3, [pc, #52]	@ (8018598 <std+0x5c>)
 8018564:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018566:	4b0d      	ldr	r3, [pc, #52]	@ (801859c <std+0x60>)
 8018568:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801856a:	4b0d      	ldr	r3, [pc, #52]	@ (80185a0 <std+0x64>)
 801856c:	6323      	str	r3, [r4, #48]	@ 0x30
 801856e:	4b0d      	ldr	r3, [pc, #52]	@ (80185a4 <std+0x68>)
 8018570:	6224      	str	r4, [r4, #32]
 8018572:	429c      	cmp	r4, r3
 8018574:	d006      	beq.n	8018584 <std+0x48>
 8018576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801857a:	4294      	cmp	r4, r2
 801857c:	d002      	beq.n	8018584 <std+0x48>
 801857e:	33d0      	adds	r3, #208	@ 0xd0
 8018580:	429c      	cmp	r4, r3
 8018582:	d105      	bne.n	8018590 <std+0x54>
 8018584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801858c:	f000 b9ca 	b.w	8018924 <__retarget_lock_init_recursive>
 8018590:	bd10      	pop	{r4, pc}
 8018592:	bf00      	nop
 8018594:	08018725 	.word	0x08018725
 8018598:	08018747 	.word	0x08018747
 801859c:	0801877f 	.word	0x0801877f
 80185a0:	080187a3 	.word	0x080187a3
 80185a4:	20015960 	.word	0x20015960

080185a8 <stdio_exit_handler>:
 80185a8:	4a02      	ldr	r2, [pc, #8]	@ (80185b4 <stdio_exit_handler+0xc>)
 80185aa:	4903      	ldr	r1, [pc, #12]	@ (80185b8 <stdio_exit_handler+0x10>)
 80185ac:	4803      	ldr	r0, [pc, #12]	@ (80185bc <stdio_exit_handler+0x14>)
 80185ae:	f000 b869 	b.w	8018684 <_fwalk_sglue>
 80185b2:	bf00      	nop
 80185b4:	20000024 	.word	0x20000024
 80185b8:	08019449 	.word	0x08019449
 80185bc:	20000034 	.word	0x20000034

080185c0 <cleanup_stdio>:
 80185c0:	6841      	ldr	r1, [r0, #4]
 80185c2:	4b0c      	ldr	r3, [pc, #48]	@ (80185f4 <cleanup_stdio+0x34>)
 80185c4:	4299      	cmp	r1, r3
 80185c6:	b510      	push	{r4, lr}
 80185c8:	4604      	mov	r4, r0
 80185ca:	d001      	beq.n	80185d0 <cleanup_stdio+0x10>
 80185cc:	f000 ff3c 	bl	8019448 <_fflush_r>
 80185d0:	68a1      	ldr	r1, [r4, #8]
 80185d2:	4b09      	ldr	r3, [pc, #36]	@ (80185f8 <cleanup_stdio+0x38>)
 80185d4:	4299      	cmp	r1, r3
 80185d6:	d002      	beq.n	80185de <cleanup_stdio+0x1e>
 80185d8:	4620      	mov	r0, r4
 80185da:	f000 ff35 	bl	8019448 <_fflush_r>
 80185de:	68e1      	ldr	r1, [r4, #12]
 80185e0:	4b06      	ldr	r3, [pc, #24]	@ (80185fc <cleanup_stdio+0x3c>)
 80185e2:	4299      	cmp	r1, r3
 80185e4:	d004      	beq.n	80185f0 <cleanup_stdio+0x30>
 80185e6:	4620      	mov	r0, r4
 80185e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185ec:	f000 bf2c 	b.w	8019448 <_fflush_r>
 80185f0:	bd10      	pop	{r4, pc}
 80185f2:	bf00      	nop
 80185f4:	20015960 	.word	0x20015960
 80185f8:	200159c8 	.word	0x200159c8
 80185fc:	20015a30 	.word	0x20015a30

08018600 <global_stdio_init.part.0>:
 8018600:	b510      	push	{r4, lr}
 8018602:	4b0b      	ldr	r3, [pc, #44]	@ (8018630 <global_stdio_init.part.0+0x30>)
 8018604:	4c0b      	ldr	r4, [pc, #44]	@ (8018634 <global_stdio_init.part.0+0x34>)
 8018606:	4a0c      	ldr	r2, [pc, #48]	@ (8018638 <global_stdio_init.part.0+0x38>)
 8018608:	601a      	str	r2, [r3, #0]
 801860a:	4620      	mov	r0, r4
 801860c:	2200      	movs	r2, #0
 801860e:	2104      	movs	r1, #4
 8018610:	f7ff ff94 	bl	801853c <std>
 8018614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018618:	2201      	movs	r2, #1
 801861a:	2109      	movs	r1, #9
 801861c:	f7ff ff8e 	bl	801853c <std>
 8018620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018624:	2202      	movs	r2, #2
 8018626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801862a:	2112      	movs	r1, #18
 801862c:	f7ff bf86 	b.w	801853c <std>
 8018630:	20015a98 	.word	0x20015a98
 8018634:	20015960 	.word	0x20015960
 8018638:	080185a9 	.word	0x080185a9

0801863c <__sfp_lock_acquire>:
 801863c:	4801      	ldr	r0, [pc, #4]	@ (8018644 <__sfp_lock_acquire+0x8>)
 801863e:	f000 b972 	b.w	8018926 <__retarget_lock_acquire_recursive>
 8018642:	bf00      	nop
 8018644:	20015a9d 	.word	0x20015a9d

08018648 <__sfp_lock_release>:
 8018648:	4801      	ldr	r0, [pc, #4]	@ (8018650 <__sfp_lock_release+0x8>)
 801864a:	f000 b96d 	b.w	8018928 <__retarget_lock_release_recursive>
 801864e:	bf00      	nop
 8018650:	20015a9d 	.word	0x20015a9d

08018654 <__sinit>:
 8018654:	b510      	push	{r4, lr}
 8018656:	4604      	mov	r4, r0
 8018658:	f7ff fff0 	bl	801863c <__sfp_lock_acquire>
 801865c:	6a23      	ldr	r3, [r4, #32]
 801865e:	b11b      	cbz	r3, 8018668 <__sinit+0x14>
 8018660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018664:	f7ff bff0 	b.w	8018648 <__sfp_lock_release>
 8018668:	4b04      	ldr	r3, [pc, #16]	@ (801867c <__sinit+0x28>)
 801866a:	6223      	str	r3, [r4, #32]
 801866c:	4b04      	ldr	r3, [pc, #16]	@ (8018680 <__sinit+0x2c>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d1f5      	bne.n	8018660 <__sinit+0xc>
 8018674:	f7ff ffc4 	bl	8018600 <global_stdio_init.part.0>
 8018678:	e7f2      	b.n	8018660 <__sinit+0xc>
 801867a:	bf00      	nop
 801867c:	080185c1 	.word	0x080185c1
 8018680:	20015a98 	.word	0x20015a98

08018684 <_fwalk_sglue>:
 8018684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018688:	4607      	mov	r7, r0
 801868a:	4688      	mov	r8, r1
 801868c:	4614      	mov	r4, r2
 801868e:	2600      	movs	r6, #0
 8018690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018694:	f1b9 0901 	subs.w	r9, r9, #1
 8018698:	d505      	bpl.n	80186a6 <_fwalk_sglue+0x22>
 801869a:	6824      	ldr	r4, [r4, #0]
 801869c:	2c00      	cmp	r4, #0
 801869e:	d1f7      	bne.n	8018690 <_fwalk_sglue+0xc>
 80186a0:	4630      	mov	r0, r6
 80186a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186a6:	89ab      	ldrh	r3, [r5, #12]
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d907      	bls.n	80186bc <_fwalk_sglue+0x38>
 80186ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80186b0:	3301      	adds	r3, #1
 80186b2:	d003      	beq.n	80186bc <_fwalk_sglue+0x38>
 80186b4:	4629      	mov	r1, r5
 80186b6:	4638      	mov	r0, r7
 80186b8:	47c0      	blx	r8
 80186ba:	4306      	orrs	r6, r0
 80186bc:	3568      	adds	r5, #104	@ 0x68
 80186be:	e7e9      	b.n	8018694 <_fwalk_sglue+0x10>

080186c0 <iprintf>:
 80186c0:	b40f      	push	{r0, r1, r2, r3}
 80186c2:	b507      	push	{r0, r1, r2, lr}
 80186c4:	4906      	ldr	r1, [pc, #24]	@ (80186e0 <iprintf+0x20>)
 80186c6:	ab04      	add	r3, sp, #16
 80186c8:	6808      	ldr	r0, [r1, #0]
 80186ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80186ce:	6881      	ldr	r1, [r0, #8]
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	f000 fb8f 	bl	8018df4 <_vfiprintf_r>
 80186d6:	b003      	add	sp, #12
 80186d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80186dc:	b004      	add	sp, #16
 80186de:	4770      	bx	lr
 80186e0:	20000030 	.word	0x20000030

080186e4 <siprintf>:
 80186e4:	b40e      	push	{r1, r2, r3}
 80186e6:	b500      	push	{lr}
 80186e8:	b09c      	sub	sp, #112	@ 0x70
 80186ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80186ec:	9002      	str	r0, [sp, #8]
 80186ee:	9006      	str	r0, [sp, #24]
 80186f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80186f4:	4809      	ldr	r0, [pc, #36]	@ (801871c <siprintf+0x38>)
 80186f6:	9107      	str	r1, [sp, #28]
 80186f8:	9104      	str	r1, [sp, #16]
 80186fa:	4909      	ldr	r1, [pc, #36]	@ (8018720 <siprintf+0x3c>)
 80186fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018700:	9105      	str	r1, [sp, #20]
 8018702:	6800      	ldr	r0, [r0, #0]
 8018704:	9301      	str	r3, [sp, #4]
 8018706:	a902      	add	r1, sp, #8
 8018708:	f000 fa4e 	bl	8018ba8 <_svfiprintf_r>
 801870c:	9b02      	ldr	r3, [sp, #8]
 801870e:	2200      	movs	r2, #0
 8018710:	701a      	strb	r2, [r3, #0]
 8018712:	b01c      	add	sp, #112	@ 0x70
 8018714:	f85d eb04 	ldr.w	lr, [sp], #4
 8018718:	b003      	add	sp, #12
 801871a:	4770      	bx	lr
 801871c:	20000030 	.word	0x20000030
 8018720:	ffff0208 	.word	0xffff0208

08018724 <__sread>:
 8018724:	b510      	push	{r4, lr}
 8018726:	460c      	mov	r4, r1
 8018728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801872c:	f000 f8b2 	bl	8018894 <_read_r>
 8018730:	2800      	cmp	r0, #0
 8018732:	bfab      	itete	ge
 8018734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018736:	89a3      	ldrhlt	r3, [r4, #12]
 8018738:	181b      	addge	r3, r3, r0
 801873a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801873e:	bfac      	ite	ge
 8018740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018742:	81a3      	strhlt	r3, [r4, #12]
 8018744:	bd10      	pop	{r4, pc}

08018746 <__swrite>:
 8018746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801874a:	461f      	mov	r7, r3
 801874c:	898b      	ldrh	r3, [r1, #12]
 801874e:	05db      	lsls	r3, r3, #23
 8018750:	4605      	mov	r5, r0
 8018752:	460c      	mov	r4, r1
 8018754:	4616      	mov	r6, r2
 8018756:	d505      	bpl.n	8018764 <__swrite+0x1e>
 8018758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801875c:	2302      	movs	r3, #2
 801875e:	2200      	movs	r2, #0
 8018760:	f000 f886 	bl	8018870 <_lseek_r>
 8018764:	89a3      	ldrh	r3, [r4, #12]
 8018766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801876a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801876e:	81a3      	strh	r3, [r4, #12]
 8018770:	4632      	mov	r2, r6
 8018772:	463b      	mov	r3, r7
 8018774:	4628      	mov	r0, r5
 8018776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801877a:	f000 b89d 	b.w	80188b8 <_write_r>

0801877e <__sseek>:
 801877e:	b510      	push	{r4, lr}
 8018780:	460c      	mov	r4, r1
 8018782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018786:	f000 f873 	bl	8018870 <_lseek_r>
 801878a:	1c43      	adds	r3, r0, #1
 801878c:	89a3      	ldrh	r3, [r4, #12]
 801878e:	bf15      	itete	ne
 8018790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801879a:	81a3      	strheq	r3, [r4, #12]
 801879c:	bf18      	it	ne
 801879e:	81a3      	strhne	r3, [r4, #12]
 80187a0:	bd10      	pop	{r4, pc}

080187a2 <__sclose>:
 80187a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187a6:	f000 b853 	b.w	8018850 <_close_r>

080187aa <memcmp>:
 80187aa:	b510      	push	{r4, lr}
 80187ac:	3901      	subs	r1, #1
 80187ae:	4402      	add	r2, r0
 80187b0:	4290      	cmp	r0, r2
 80187b2:	d101      	bne.n	80187b8 <memcmp+0xe>
 80187b4:	2000      	movs	r0, #0
 80187b6:	e005      	b.n	80187c4 <memcmp+0x1a>
 80187b8:	7803      	ldrb	r3, [r0, #0]
 80187ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80187be:	42a3      	cmp	r3, r4
 80187c0:	d001      	beq.n	80187c6 <memcmp+0x1c>
 80187c2:	1b18      	subs	r0, r3, r4
 80187c4:	bd10      	pop	{r4, pc}
 80187c6:	3001      	adds	r0, #1
 80187c8:	e7f2      	b.n	80187b0 <memcmp+0x6>

080187ca <memmove>:
 80187ca:	4288      	cmp	r0, r1
 80187cc:	b510      	push	{r4, lr}
 80187ce:	eb01 0402 	add.w	r4, r1, r2
 80187d2:	d902      	bls.n	80187da <memmove+0x10>
 80187d4:	4284      	cmp	r4, r0
 80187d6:	4623      	mov	r3, r4
 80187d8:	d807      	bhi.n	80187ea <memmove+0x20>
 80187da:	1e43      	subs	r3, r0, #1
 80187dc:	42a1      	cmp	r1, r4
 80187de:	d008      	beq.n	80187f2 <memmove+0x28>
 80187e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80187e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80187e8:	e7f8      	b.n	80187dc <memmove+0x12>
 80187ea:	4402      	add	r2, r0
 80187ec:	4601      	mov	r1, r0
 80187ee:	428a      	cmp	r2, r1
 80187f0:	d100      	bne.n	80187f4 <memmove+0x2a>
 80187f2:	bd10      	pop	{r4, pc}
 80187f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80187f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80187fc:	e7f7      	b.n	80187ee <memmove+0x24>

080187fe <memset>:
 80187fe:	4402      	add	r2, r0
 8018800:	4603      	mov	r3, r0
 8018802:	4293      	cmp	r3, r2
 8018804:	d100      	bne.n	8018808 <memset+0xa>
 8018806:	4770      	bx	lr
 8018808:	f803 1b01 	strb.w	r1, [r3], #1
 801880c:	e7f9      	b.n	8018802 <memset+0x4>

0801880e <strcat>:
 801880e:	b510      	push	{r4, lr}
 8018810:	4602      	mov	r2, r0
 8018812:	7814      	ldrb	r4, [r2, #0]
 8018814:	4613      	mov	r3, r2
 8018816:	3201      	adds	r2, #1
 8018818:	2c00      	cmp	r4, #0
 801881a:	d1fa      	bne.n	8018812 <strcat+0x4>
 801881c:	3b01      	subs	r3, #1
 801881e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018826:	2a00      	cmp	r2, #0
 8018828:	d1f9      	bne.n	801881e <strcat+0x10>
 801882a:	bd10      	pop	{r4, pc}

0801882c <strncmp>:
 801882c:	b510      	push	{r4, lr}
 801882e:	b16a      	cbz	r2, 801884c <strncmp+0x20>
 8018830:	3901      	subs	r1, #1
 8018832:	1884      	adds	r4, r0, r2
 8018834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018838:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801883c:	429a      	cmp	r2, r3
 801883e:	d103      	bne.n	8018848 <strncmp+0x1c>
 8018840:	42a0      	cmp	r0, r4
 8018842:	d001      	beq.n	8018848 <strncmp+0x1c>
 8018844:	2a00      	cmp	r2, #0
 8018846:	d1f5      	bne.n	8018834 <strncmp+0x8>
 8018848:	1ad0      	subs	r0, r2, r3
 801884a:	bd10      	pop	{r4, pc}
 801884c:	4610      	mov	r0, r2
 801884e:	e7fc      	b.n	801884a <strncmp+0x1e>

08018850 <_close_r>:
 8018850:	b538      	push	{r3, r4, r5, lr}
 8018852:	4d06      	ldr	r5, [pc, #24]	@ (801886c <_close_r+0x1c>)
 8018854:	2300      	movs	r3, #0
 8018856:	4604      	mov	r4, r0
 8018858:	4608      	mov	r0, r1
 801885a:	602b      	str	r3, [r5, #0]
 801885c:	f7e9 fa5a 	bl	8001d14 <_close>
 8018860:	1c43      	adds	r3, r0, #1
 8018862:	d102      	bne.n	801886a <_close_r+0x1a>
 8018864:	682b      	ldr	r3, [r5, #0]
 8018866:	b103      	cbz	r3, 801886a <_close_r+0x1a>
 8018868:	6023      	str	r3, [r4, #0]
 801886a:	bd38      	pop	{r3, r4, r5, pc}
 801886c:	20015958 	.word	0x20015958

08018870 <_lseek_r>:
 8018870:	b538      	push	{r3, r4, r5, lr}
 8018872:	4d07      	ldr	r5, [pc, #28]	@ (8018890 <_lseek_r+0x20>)
 8018874:	4604      	mov	r4, r0
 8018876:	4608      	mov	r0, r1
 8018878:	4611      	mov	r1, r2
 801887a:	2200      	movs	r2, #0
 801887c:	602a      	str	r2, [r5, #0]
 801887e:	461a      	mov	r2, r3
 8018880:	f7e9 fa6f 	bl	8001d62 <_lseek>
 8018884:	1c43      	adds	r3, r0, #1
 8018886:	d102      	bne.n	801888e <_lseek_r+0x1e>
 8018888:	682b      	ldr	r3, [r5, #0]
 801888a:	b103      	cbz	r3, 801888e <_lseek_r+0x1e>
 801888c:	6023      	str	r3, [r4, #0]
 801888e:	bd38      	pop	{r3, r4, r5, pc}
 8018890:	20015958 	.word	0x20015958

08018894 <_read_r>:
 8018894:	b538      	push	{r3, r4, r5, lr}
 8018896:	4d07      	ldr	r5, [pc, #28]	@ (80188b4 <_read_r+0x20>)
 8018898:	4604      	mov	r4, r0
 801889a:	4608      	mov	r0, r1
 801889c:	4611      	mov	r1, r2
 801889e:	2200      	movs	r2, #0
 80188a0:	602a      	str	r2, [r5, #0]
 80188a2:	461a      	mov	r2, r3
 80188a4:	f7e9 f9fd 	bl	8001ca2 <_read>
 80188a8:	1c43      	adds	r3, r0, #1
 80188aa:	d102      	bne.n	80188b2 <_read_r+0x1e>
 80188ac:	682b      	ldr	r3, [r5, #0]
 80188ae:	b103      	cbz	r3, 80188b2 <_read_r+0x1e>
 80188b0:	6023      	str	r3, [r4, #0]
 80188b2:	bd38      	pop	{r3, r4, r5, pc}
 80188b4:	20015958 	.word	0x20015958

080188b8 <_write_r>:
 80188b8:	b538      	push	{r3, r4, r5, lr}
 80188ba:	4d07      	ldr	r5, [pc, #28]	@ (80188d8 <_write_r+0x20>)
 80188bc:	4604      	mov	r4, r0
 80188be:	4608      	mov	r0, r1
 80188c0:	4611      	mov	r1, r2
 80188c2:	2200      	movs	r2, #0
 80188c4:	602a      	str	r2, [r5, #0]
 80188c6:	461a      	mov	r2, r3
 80188c8:	f7e9 fa08 	bl	8001cdc <_write>
 80188cc:	1c43      	adds	r3, r0, #1
 80188ce:	d102      	bne.n	80188d6 <_write_r+0x1e>
 80188d0:	682b      	ldr	r3, [r5, #0]
 80188d2:	b103      	cbz	r3, 80188d6 <_write_r+0x1e>
 80188d4:	6023      	str	r3, [r4, #0]
 80188d6:	bd38      	pop	{r3, r4, r5, pc}
 80188d8:	20015958 	.word	0x20015958

080188dc <__libc_init_array>:
 80188dc:	b570      	push	{r4, r5, r6, lr}
 80188de:	4d0d      	ldr	r5, [pc, #52]	@ (8018914 <__libc_init_array+0x38>)
 80188e0:	4c0d      	ldr	r4, [pc, #52]	@ (8018918 <__libc_init_array+0x3c>)
 80188e2:	1b64      	subs	r4, r4, r5
 80188e4:	10a4      	asrs	r4, r4, #2
 80188e6:	2600      	movs	r6, #0
 80188e8:	42a6      	cmp	r6, r4
 80188ea:	d109      	bne.n	8018900 <__libc_init_array+0x24>
 80188ec:	4d0b      	ldr	r5, [pc, #44]	@ (801891c <__libc_init_array+0x40>)
 80188ee:	4c0c      	ldr	r4, [pc, #48]	@ (8018920 <__libc_init_array+0x44>)
 80188f0:	f000 ffd8 	bl	80198a4 <_init>
 80188f4:	1b64      	subs	r4, r4, r5
 80188f6:	10a4      	asrs	r4, r4, #2
 80188f8:	2600      	movs	r6, #0
 80188fa:	42a6      	cmp	r6, r4
 80188fc:	d105      	bne.n	801890a <__libc_init_array+0x2e>
 80188fe:	bd70      	pop	{r4, r5, r6, pc}
 8018900:	f855 3b04 	ldr.w	r3, [r5], #4
 8018904:	4798      	blx	r3
 8018906:	3601      	adds	r6, #1
 8018908:	e7ee      	b.n	80188e8 <__libc_init_array+0xc>
 801890a:	f855 3b04 	ldr.w	r3, [r5], #4
 801890e:	4798      	blx	r3
 8018910:	3601      	adds	r6, #1
 8018912:	e7f2      	b.n	80188fa <__libc_init_array+0x1e>
 8018914:	080268dc 	.word	0x080268dc
 8018918:	080268dc 	.word	0x080268dc
 801891c:	080268dc 	.word	0x080268dc
 8018920:	080268e0 	.word	0x080268e0

08018924 <__retarget_lock_init_recursive>:
 8018924:	4770      	bx	lr

08018926 <__retarget_lock_acquire_recursive>:
 8018926:	4770      	bx	lr

08018928 <__retarget_lock_release_recursive>:
 8018928:	4770      	bx	lr

0801892a <memcpy>:
 801892a:	440a      	add	r2, r1
 801892c:	4291      	cmp	r1, r2
 801892e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018932:	d100      	bne.n	8018936 <memcpy+0xc>
 8018934:	4770      	bx	lr
 8018936:	b510      	push	{r4, lr}
 8018938:	f811 4b01 	ldrb.w	r4, [r1], #1
 801893c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018940:	4291      	cmp	r1, r2
 8018942:	d1f9      	bne.n	8018938 <memcpy+0xe>
 8018944:	bd10      	pop	{r4, pc}
	...

08018948 <__assert_func>:
 8018948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801894a:	4614      	mov	r4, r2
 801894c:	461a      	mov	r2, r3
 801894e:	4b09      	ldr	r3, [pc, #36]	@ (8018974 <__assert_func+0x2c>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	4605      	mov	r5, r0
 8018954:	68d8      	ldr	r0, [r3, #12]
 8018956:	b954      	cbnz	r4, 801896e <__assert_func+0x26>
 8018958:	4b07      	ldr	r3, [pc, #28]	@ (8018978 <__assert_func+0x30>)
 801895a:	461c      	mov	r4, r3
 801895c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018960:	9100      	str	r1, [sp, #0]
 8018962:	462b      	mov	r3, r5
 8018964:	4905      	ldr	r1, [pc, #20]	@ (801897c <__assert_func+0x34>)
 8018966:	f000 fd97 	bl	8019498 <fiprintf>
 801896a:	f000 fe4b 	bl	8019604 <abort>
 801896e:	4b04      	ldr	r3, [pc, #16]	@ (8018980 <__assert_func+0x38>)
 8018970:	e7f4      	b.n	801895c <__assert_func+0x14>
 8018972:	bf00      	nop
 8018974:	20000030 	.word	0x20000030
 8018978:	0802689e 	.word	0x0802689e
 801897c:	08026870 	.word	0x08026870
 8018980:	08026863 	.word	0x08026863

08018984 <malloc>:
 8018984:	4b02      	ldr	r3, [pc, #8]	@ (8018990 <malloc+0xc>)
 8018986:	4601      	mov	r1, r0
 8018988:	6818      	ldr	r0, [r3, #0]
 801898a:	f000 b825 	b.w	80189d8 <_malloc_r>
 801898e:	bf00      	nop
 8018990:	20000030 	.word	0x20000030

08018994 <sbrk_aligned>:
 8018994:	b570      	push	{r4, r5, r6, lr}
 8018996:	4e0f      	ldr	r6, [pc, #60]	@ (80189d4 <sbrk_aligned+0x40>)
 8018998:	460c      	mov	r4, r1
 801899a:	6831      	ldr	r1, [r6, #0]
 801899c:	4605      	mov	r5, r0
 801899e:	b911      	cbnz	r1, 80189a6 <sbrk_aligned+0x12>
 80189a0:	f000 fe20 	bl	80195e4 <_sbrk_r>
 80189a4:	6030      	str	r0, [r6, #0]
 80189a6:	4621      	mov	r1, r4
 80189a8:	4628      	mov	r0, r5
 80189aa:	f000 fe1b 	bl	80195e4 <_sbrk_r>
 80189ae:	1c43      	adds	r3, r0, #1
 80189b0:	d103      	bne.n	80189ba <sbrk_aligned+0x26>
 80189b2:	f04f 34ff 	mov.w	r4, #4294967295
 80189b6:	4620      	mov	r0, r4
 80189b8:	bd70      	pop	{r4, r5, r6, pc}
 80189ba:	1cc4      	adds	r4, r0, #3
 80189bc:	f024 0403 	bic.w	r4, r4, #3
 80189c0:	42a0      	cmp	r0, r4
 80189c2:	d0f8      	beq.n	80189b6 <sbrk_aligned+0x22>
 80189c4:	1a21      	subs	r1, r4, r0
 80189c6:	4628      	mov	r0, r5
 80189c8:	f000 fe0c 	bl	80195e4 <_sbrk_r>
 80189cc:	3001      	adds	r0, #1
 80189ce:	d1f2      	bne.n	80189b6 <sbrk_aligned+0x22>
 80189d0:	e7ef      	b.n	80189b2 <sbrk_aligned+0x1e>
 80189d2:	bf00      	nop
 80189d4:	20015aa0 	.word	0x20015aa0

080189d8 <_malloc_r>:
 80189d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189dc:	1ccd      	adds	r5, r1, #3
 80189de:	f025 0503 	bic.w	r5, r5, #3
 80189e2:	3508      	adds	r5, #8
 80189e4:	2d0c      	cmp	r5, #12
 80189e6:	bf38      	it	cc
 80189e8:	250c      	movcc	r5, #12
 80189ea:	2d00      	cmp	r5, #0
 80189ec:	4606      	mov	r6, r0
 80189ee:	db01      	blt.n	80189f4 <_malloc_r+0x1c>
 80189f0:	42a9      	cmp	r1, r5
 80189f2:	d904      	bls.n	80189fe <_malloc_r+0x26>
 80189f4:	230c      	movs	r3, #12
 80189f6:	6033      	str	r3, [r6, #0]
 80189f8:	2000      	movs	r0, #0
 80189fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018ad4 <_malloc_r+0xfc>
 8018a02:	f000 f869 	bl	8018ad8 <__malloc_lock>
 8018a06:	f8d8 3000 	ldr.w	r3, [r8]
 8018a0a:	461c      	mov	r4, r3
 8018a0c:	bb44      	cbnz	r4, 8018a60 <_malloc_r+0x88>
 8018a0e:	4629      	mov	r1, r5
 8018a10:	4630      	mov	r0, r6
 8018a12:	f7ff ffbf 	bl	8018994 <sbrk_aligned>
 8018a16:	1c43      	adds	r3, r0, #1
 8018a18:	4604      	mov	r4, r0
 8018a1a:	d158      	bne.n	8018ace <_malloc_r+0xf6>
 8018a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8018a20:	4627      	mov	r7, r4
 8018a22:	2f00      	cmp	r7, #0
 8018a24:	d143      	bne.n	8018aae <_malloc_r+0xd6>
 8018a26:	2c00      	cmp	r4, #0
 8018a28:	d04b      	beq.n	8018ac2 <_malloc_r+0xea>
 8018a2a:	6823      	ldr	r3, [r4, #0]
 8018a2c:	4639      	mov	r1, r7
 8018a2e:	4630      	mov	r0, r6
 8018a30:	eb04 0903 	add.w	r9, r4, r3
 8018a34:	f000 fdd6 	bl	80195e4 <_sbrk_r>
 8018a38:	4581      	cmp	r9, r0
 8018a3a:	d142      	bne.n	8018ac2 <_malloc_r+0xea>
 8018a3c:	6821      	ldr	r1, [r4, #0]
 8018a3e:	1a6d      	subs	r5, r5, r1
 8018a40:	4629      	mov	r1, r5
 8018a42:	4630      	mov	r0, r6
 8018a44:	f7ff ffa6 	bl	8018994 <sbrk_aligned>
 8018a48:	3001      	adds	r0, #1
 8018a4a:	d03a      	beq.n	8018ac2 <_malloc_r+0xea>
 8018a4c:	6823      	ldr	r3, [r4, #0]
 8018a4e:	442b      	add	r3, r5
 8018a50:	6023      	str	r3, [r4, #0]
 8018a52:	f8d8 3000 	ldr.w	r3, [r8]
 8018a56:	685a      	ldr	r2, [r3, #4]
 8018a58:	bb62      	cbnz	r2, 8018ab4 <_malloc_r+0xdc>
 8018a5a:	f8c8 7000 	str.w	r7, [r8]
 8018a5e:	e00f      	b.n	8018a80 <_malloc_r+0xa8>
 8018a60:	6822      	ldr	r2, [r4, #0]
 8018a62:	1b52      	subs	r2, r2, r5
 8018a64:	d420      	bmi.n	8018aa8 <_malloc_r+0xd0>
 8018a66:	2a0b      	cmp	r2, #11
 8018a68:	d917      	bls.n	8018a9a <_malloc_r+0xc2>
 8018a6a:	1961      	adds	r1, r4, r5
 8018a6c:	42a3      	cmp	r3, r4
 8018a6e:	6025      	str	r5, [r4, #0]
 8018a70:	bf18      	it	ne
 8018a72:	6059      	strne	r1, [r3, #4]
 8018a74:	6863      	ldr	r3, [r4, #4]
 8018a76:	bf08      	it	eq
 8018a78:	f8c8 1000 	streq.w	r1, [r8]
 8018a7c:	5162      	str	r2, [r4, r5]
 8018a7e:	604b      	str	r3, [r1, #4]
 8018a80:	4630      	mov	r0, r6
 8018a82:	f000 f82f 	bl	8018ae4 <__malloc_unlock>
 8018a86:	f104 000b 	add.w	r0, r4, #11
 8018a8a:	1d23      	adds	r3, r4, #4
 8018a8c:	f020 0007 	bic.w	r0, r0, #7
 8018a90:	1ac2      	subs	r2, r0, r3
 8018a92:	bf1c      	itt	ne
 8018a94:	1a1b      	subne	r3, r3, r0
 8018a96:	50a3      	strne	r3, [r4, r2]
 8018a98:	e7af      	b.n	80189fa <_malloc_r+0x22>
 8018a9a:	6862      	ldr	r2, [r4, #4]
 8018a9c:	42a3      	cmp	r3, r4
 8018a9e:	bf0c      	ite	eq
 8018aa0:	f8c8 2000 	streq.w	r2, [r8]
 8018aa4:	605a      	strne	r2, [r3, #4]
 8018aa6:	e7eb      	b.n	8018a80 <_malloc_r+0xa8>
 8018aa8:	4623      	mov	r3, r4
 8018aaa:	6864      	ldr	r4, [r4, #4]
 8018aac:	e7ae      	b.n	8018a0c <_malloc_r+0x34>
 8018aae:	463c      	mov	r4, r7
 8018ab0:	687f      	ldr	r7, [r7, #4]
 8018ab2:	e7b6      	b.n	8018a22 <_malloc_r+0x4a>
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	42a3      	cmp	r3, r4
 8018aba:	d1fb      	bne.n	8018ab4 <_malloc_r+0xdc>
 8018abc:	2300      	movs	r3, #0
 8018abe:	6053      	str	r3, [r2, #4]
 8018ac0:	e7de      	b.n	8018a80 <_malloc_r+0xa8>
 8018ac2:	230c      	movs	r3, #12
 8018ac4:	6033      	str	r3, [r6, #0]
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	f000 f80c 	bl	8018ae4 <__malloc_unlock>
 8018acc:	e794      	b.n	80189f8 <_malloc_r+0x20>
 8018ace:	6005      	str	r5, [r0, #0]
 8018ad0:	e7d6      	b.n	8018a80 <_malloc_r+0xa8>
 8018ad2:	bf00      	nop
 8018ad4:	20015aa4 	.word	0x20015aa4

08018ad8 <__malloc_lock>:
 8018ad8:	4801      	ldr	r0, [pc, #4]	@ (8018ae0 <__malloc_lock+0x8>)
 8018ada:	f7ff bf24 	b.w	8018926 <__retarget_lock_acquire_recursive>
 8018ade:	bf00      	nop
 8018ae0:	20015a9c 	.word	0x20015a9c

08018ae4 <__malloc_unlock>:
 8018ae4:	4801      	ldr	r0, [pc, #4]	@ (8018aec <__malloc_unlock+0x8>)
 8018ae6:	f7ff bf1f 	b.w	8018928 <__retarget_lock_release_recursive>
 8018aea:	bf00      	nop
 8018aec:	20015a9c 	.word	0x20015a9c

08018af0 <__ssputs_r>:
 8018af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018af4:	688e      	ldr	r6, [r1, #8]
 8018af6:	461f      	mov	r7, r3
 8018af8:	42be      	cmp	r6, r7
 8018afa:	680b      	ldr	r3, [r1, #0]
 8018afc:	4682      	mov	sl, r0
 8018afe:	460c      	mov	r4, r1
 8018b00:	4690      	mov	r8, r2
 8018b02:	d82d      	bhi.n	8018b60 <__ssputs_r+0x70>
 8018b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018b0c:	d026      	beq.n	8018b5c <__ssputs_r+0x6c>
 8018b0e:	6965      	ldr	r5, [r4, #20]
 8018b10:	6909      	ldr	r1, [r1, #16]
 8018b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b16:	eba3 0901 	sub.w	r9, r3, r1
 8018b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b1e:	1c7b      	adds	r3, r7, #1
 8018b20:	444b      	add	r3, r9
 8018b22:	106d      	asrs	r5, r5, #1
 8018b24:	429d      	cmp	r5, r3
 8018b26:	bf38      	it	cc
 8018b28:	461d      	movcc	r5, r3
 8018b2a:	0553      	lsls	r3, r2, #21
 8018b2c:	d527      	bpl.n	8018b7e <__ssputs_r+0x8e>
 8018b2e:	4629      	mov	r1, r5
 8018b30:	f7ff ff52 	bl	80189d8 <_malloc_r>
 8018b34:	4606      	mov	r6, r0
 8018b36:	b360      	cbz	r0, 8018b92 <__ssputs_r+0xa2>
 8018b38:	6921      	ldr	r1, [r4, #16]
 8018b3a:	464a      	mov	r2, r9
 8018b3c:	f7ff fef5 	bl	801892a <memcpy>
 8018b40:	89a3      	ldrh	r3, [r4, #12]
 8018b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b4a:	81a3      	strh	r3, [r4, #12]
 8018b4c:	6126      	str	r6, [r4, #16]
 8018b4e:	6165      	str	r5, [r4, #20]
 8018b50:	444e      	add	r6, r9
 8018b52:	eba5 0509 	sub.w	r5, r5, r9
 8018b56:	6026      	str	r6, [r4, #0]
 8018b58:	60a5      	str	r5, [r4, #8]
 8018b5a:	463e      	mov	r6, r7
 8018b5c:	42be      	cmp	r6, r7
 8018b5e:	d900      	bls.n	8018b62 <__ssputs_r+0x72>
 8018b60:	463e      	mov	r6, r7
 8018b62:	6820      	ldr	r0, [r4, #0]
 8018b64:	4632      	mov	r2, r6
 8018b66:	4641      	mov	r1, r8
 8018b68:	f7ff fe2f 	bl	80187ca <memmove>
 8018b6c:	68a3      	ldr	r3, [r4, #8]
 8018b6e:	1b9b      	subs	r3, r3, r6
 8018b70:	60a3      	str	r3, [r4, #8]
 8018b72:	6823      	ldr	r3, [r4, #0]
 8018b74:	4433      	add	r3, r6
 8018b76:	6023      	str	r3, [r4, #0]
 8018b78:	2000      	movs	r0, #0
 8018b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b7e:	462a      	mov	r2, r5
 8018b80:	f000 fd92 	bl	80196a8 <_realloc_r>
 8018b84:	4606      	mov	r6, r0
 8018b86:	2800      	cmp	r0, #0
 8018b88:	d1e0      	bne.n	8018b4c <__ssputs_r+0x5c>
 8018b8a:	6921      	ldr	r1, [r4, #16]
 8018b8c:	4650      	mov	r0, sl
 8018b8e:	f000 fd41 	bl	8019614 <_free_r>
 8018b92:	230c      	movs	r3, #12
 8018b94:	f8ca 3000 	str.w	r3, [sl]
 8018b98:	89a3      	ldrh	r3, [r4, #12]
 8018b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b9e:	81a3      	strh	r3, [r4, #12]
 8018ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ba4:	e7e9      	b.n	8018b7a <__ssputs_r+0x8a>
	...

08018ba8 <_svfiprintf_r>:
 8018ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bac:	4698      	mov	r8, r3
 8018bae:	898b      	ldrh	r3, [r1, #12]
 8018bb0:	061b      	lsls	r3, r3, #24
 8018bb2:	b09d      	sub	sp, #116	@ 0x74
 8018bb4:	4607      	mov	r7, r0
 8018bb6:	460d      	mov	r5, r1
 8018bb8:	4614      	mov	r4, r2
 8018bba:	d510      	bpl.n	8018bde <_svfiprintf_r+0x36>
 8018bbc:	690b      	ldr	r3, [r1, #16]
 8018bbe:	b973      	cbnz	r3, 8018bde <_svfiprintf_r+0x36>
 8018bc0:	2140      	movs	r1, #64	@ 0x40
 8018bc2:	f7ff ff09 	bl	80189d8 <_malloc_r>
 8018bc6:	6028      	str	r0, [r5, #0]
 8018bc8:	6128      	str	r0, [r5, #16]
 8018bca:	b930      	cbnz	r0, 8018bda <_svfiprintf_r+0x32>
 8018bcc:	230c      	movs	r3, #12
 8018bce:	603b      	str	r3, [r7, #0]
 8018bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd4:	b01d      	add	sp, #116	@ 0x74
 8018bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bda:	2340      	movs	r3, #64	@ 0x40
 8018bdc:	616b      	str	r3, [r5, #20]
 8018bde:	2300      	movs	r3, #0
 8018be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018be2:	2320      	movs	r3, #32
 8018be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bec:	2330      	movs	r3, #48	@ 0x30
 8018bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018d8c <_svfiprintf_r+0x1e4>
 8018bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018bf6:	f04f 0901 	mov.w	r9, #1
 8018bfa:	4623      	mov	r3, r4
 8018bfc:	469a      	mov	sl, r3
 8018bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c02:	b10a      	cbz	r2, 8018c08 <_svfiprintf_r+0x60>
 8018c04:	2a25      	cmp	r2, #37	@ 0x25
 8018c06:	d1f9      	bne.n	8018bfc <_svfiprintf_r+0x54>
 8018c08:	ebba 0b04 	subs.w	fp, sl, r4
 8018c0c:	d00b      	beq.n	8018c26 <_svfiprintf_r+0x7e>
 8018c0e:	465b      	mov	r3, fp
 8018c10:	4622      	mov	r2, r4
 8018c12:	4629      	mov	r1, r5
 8018c14:	4638      	mov	r0, r7
 8018c16:	f7ff ff6b 	bl	8018af0 <__ssputs_r>
 8018c1a:	3001      	adds	r0, #1
 8018c1c:	f000 80a7 	beq.w	8018d6e <_svfiprintf_r+0x1c6>
 8018c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c22:	445a      	add	r2, fp
 8018c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c26:	f89a 3000 	ldrb.w	r3, [sl]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	f000 809f 	beq.w	8018d6e <_svfiprintf_r+0x1c6>
 8018c30:	2300      	movs	r3, #0
 8018c32:	f04f 32ff 	mov.w	r2, #4294967295
 8018c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c3a:	f10a 0a01 	add.w	sl, sl, #1
 8018c3e:	9304      	str	r3, [sp, #16]
 8018c40:	9307      	str	r3, [sp, #28]
 8018c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c48:	4654      	mov	r4, sl
 8018c4a:	2205      	movs	r2, #5
 8018c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c50:	484e      	ldr	r0, [pc, #312]	@ (8018d8c <_svfiprintf_r+0x1e4>)
 8018c52:	f7e7 fad5 	bl	8000200 <memchr>
 8018c56:	9a04      	ldr	r2, [sp, #16]
 8018c58:	b9d8      	cbnz	r0, 8018c92 <_svfiprintf_r+0xea>
 8018c5a:	06d0      	lsls	r0, r2, #27
 8018c5c:	bf44      	itt	mi
 8018c5e:	2320      	movmi	r3, #32
 8018c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c64:	0711      	lsls	r1, r2, #28
 8018c66:	bf44      	itt	mi
 8018c68:	232b      	movmi	r3, #43	@ 0x2b
 8018c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8018c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c74:	d015      	beq.n	8018ca2 <_svfiprintf_r+0xfa>
 8018c76:	9a07      	ldr	r2, [sp, #28]
 8018c78:	4654      	mov	r4, sl
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	f04f 0c0a 	mov.w	ip, #10
 8018c80:	4621      	mov	r1, r4
 8018c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c86:	3b30      	subs	r3, #48	@ 0x30
 8018c88:	2b09      	cmp	r3, #9
 8018c8a:	d94b      	bls.n	8018d24 <_svfiprintf_r+0x17c>
 8018c8c:	b1b0      	cbz	r0, 8018cbc <_svfiprintf_r+0x114>
 8018c8e:	9207      	str	r2, [sp, #28]
 8018c90:	e014      	b.n	8018cbc <_svfiprintf_r+0x114>
 8018c92:	eba0 0308 	sub.w	r3, r0, r8
 8018c96:	fa09 f303 	lsl.w	r3, r9, r3
 8018c9a:	4313      	orrs	r3, r2
 8018c9c:	9304      	str	r3, [sp, #16]
 8018c9e:	46a2      	mov	sl, r4
 8018ca0:	e7d2      	b.n	8018c48 <_svfiprintf_r+0xa0>
 8018ca2:	9b03      	ldr	r3, [sp, #12]
 8018ca4:	1d19      	adds	r1, r3, #4
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	9103      	str	r1, [sp, #12]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	bfbb      	ittet	lt
 8018cae:	425b      	neglt	r3, r3
 8018cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8018cb4:	9307      	strge	r3, [sp, #28]
 8018cb6:	9307      	strlt	r3, [sp, #28]
 8018cb8:	bfb8      	it	lt
 8018cba:	9204      	strlt	r2, [sp, #16]
 8018cbc:	7823      	ldrb	r3, [r4, #0]
 8018cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cc0:	d10a      	bne.n	8018cd8 <_svfiprintf_r+0x130>
 8018cc2:	7863      	ldrb	r3, [r4, #1]
 8018cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cc6:	d132      	bne.n	8018d2e <_svfiprintf_r+0x186>
 8018cc8:	9b03      	ldr	r3, [sp, #12]
 8018cca:	1d1a      	adds	r2, r3, #4
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	9203      	str	r2, [sp, #12]
 8018cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cd4:	3402      	adds	r4, #2
 8018cd6:	9305      	str	r3, [sp, #20]
 8018cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018d9c <_svfiprintf_r+0x1f4>
 8018cdc:	7821      	ldrb	r1, [r4, #0]
 8018cde:	2203      	movs	r2, #3
 8018ce0:	4650      	mov	r0, sl
 8018ce2:	f7e7 fa8d 	bl	8000200 <memchr>
 8018ce6:	b138      	cbz	r0, 8018cf8 <_svfiprintf_r+0x150>
 8018ce8:	9b04      	ldr	r3, [sp, #16]
 8018cea:	eba0 000a 	sub.w	r0, r0, sl
 8018cee:	2240      	movs	r2, #64	@ 0x40
 8018cf0:	4082      	lsls	r2, r0
 8018cf2:	4313      	orrs	r3, r2
 8018cf4:	3401      	adds	r4, #1
 8018cf6:	9304      	str	r3, [sp, #16]
 8018cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cfc:	4824      	ldr	r0, [pc, #144]	@ (8018d90 <_svfiprintf_r+0x1e8>)
 8018cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d02:	2206      	movs	r2, #6
 8018d04:	f7e7 fa7c 	bl	8000200 <memchr>
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d036      	beq.n	8018d7a <_svfiprintf_r+0x1d2>
 8018d0c:	4b21      	ldr	r3, [pc, #132]	@ (8018d94 <_svfiprintf_r+0x1ec>)
 8018d0e:	bb1b      	cbnz	r3, 8018d58 <_svfiprintf_r+0x1b0>
 8018d10:	9b03      	ldr	r3, [sp, #12]
 8018d12:	3307      	adds	r3, #7
 8018d14:	f023 0307 	bic.w	r3, r3, #7
 8018d18:	3308      	adds	r3, #8
 8018d1a:	9303      	str	r3, [sp, #12]
 8018d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d1e:	4433      	add	r3, r6
 8018d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d22:	e76a      	b.n	8018bfa <_svfiprintf_r+0x52>
 8018d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d28:	460c      	mov	r4, r1
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	e7a8      	b.n	8018c80 <_svfiprintf_r+0xd8>
 8018d2e:	2300      	movs	r3, #0
 8018d30:	3401      	adds	r4, #1
 8018d32:	9305      	str	r3, [sp, #20]
 8018d34:	4619      	mov	r1, r3
 8018d36:	f04f 0c0a 	mov.w	ip, #10
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d40:	3a30      	subs	r2, #48	@ 0x30
 8018d42:	2a09      	cmp	r2, #9
 8018d44:	d903      	bls.n	8018d4e <_svfiprintf_r+0x1a6>
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d0c6      	beq.n	8018cd8 <_svfiprintf_r+0x130>
 8018d4a:	9105      	str	r1, [sp, #20]
 8018d4c:	e7c4      	b.n	8018cd8 <_svfiprintf_r+0x130>
 8018d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d52:	4604      	mov	r4, r0
 8018d54:	2301      	movs	r3, #1
 8018d56:	e7f0      	b.n	8018d3a <_svfiprintf_r+0x192>
 8018d58:	ab03      	add	r3, sp, #12
 8018d5a:	9300      	str	r3, [sp, #0]
 8018d5c:	462a      	mov	r2, r5
 8018d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8018d98 <_svfiprintf_r+0x1f0>)
 8018d60:	a904      	add	r1, sp, #16
 8018d62:	4638      	mov	r0, r7
 8018d64:	f3af 8000 	nop.w
 8018d68:	1c42      	adds	r2, r0, #1
 8018d6a:	4606      	mov	r6, r0
 8018d6c:	d1d6      	bne.n	8018d1c <_svfiprintf_r+0x174>
 8018d6e:	89ab      	ldrh	r3, [r5, #12]
 8018d70:	065b      	lsls	r3, r3, #25
 8018d72:	f53f af2d 	bmi.w	8018bd0 <_svfiprintf_r+0x28>
 8018d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d78:	e72c      	b.n	8018bd4 <_svfiprintf_r+0x2c>
 8018d7a:	ab03      	add	r3, sp, #12
 8018d7c:	9300      	str	r3, [sp, #0]
 8018d7e:	462a      	mov	r2, r5
 8018d80:	4b05      	ldr	r3, [pc, #20]	@ (8018d98 <_svfiprintf_r+0x1f0>)
 8018d82:	a904      	add	r1, sp, #16
 8018d84:	4638      	mov	r0, r7
 8018d86:	f000 f9bb 	bl	8019100 <_printf_i>
 8018d8a:	e7ed      	b.n	8018d68 <_svfiprintf_r+0x1c0>
 8018d8c:	0802689f 	.word	0x0802689f
 8018d90:	080268a9 	.word	0x080268a9
 8018d94:	00000000 	.word	0x00000000
 8018d98:	08018af1 	.word	0x08018af1
 8018d9c:	080268a5 	.word	0x080268a5

08018da0 <__sfputc_r>:
 8018da0:	6893      	ldr	r3, [r2, #8]
 8018da2:	3b01      	subs	r3, #1
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	b410      	push	{r4}
 8018da8:	6093      	str	r3, [r2, #8]
 8018daa:	da08      	bge.n	8018dbe <__sfputc_r+0x1e>
 8018dac:	6994      	ldr	r4, [r2, #24]
 8018dae:	42a3      	cmp	r3, r4
 8018db0:	db01      	blt.n	8018db6 <__sfputc_r+0x16>
 8018db2:	290a      	cmp	r1, #10
 8018db4:	d103      	bne.n	8018dbe <__sfputc_r+0x1e>
 8018db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dba:	f000 bb7f 	b.w	80194bc <__swbuf_r>
 8018dbe:	6813      	ldr	r3, [r2, #0]
 8018dc0:	1c58      	adds	r0, r3, #1
 8018dc2:	6010      	str	r0, [r2, #0]
 8018dc4:	7019      	strb	r1, [r3, #0]
 8018dc6:	4608      	mov	r0, r1
 8018dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dcc:	4770      	bx	lr

08018dce <__sfputs_r>:
 8018dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dd0:	4606      	mov	r6, r0
 8018dd2:	460f      	mov	r7, r1
 8018dd4:	4614      	mov	r4, r2
 8018dd6:	18d5      	adds	r5, r2, r3
 8018dd8:	42ac      	cmp	r4, r5
 8018dda:	d101      	bne.n	8018de0 <__sfputs_r+0x12>
 8018ddc:	2000      	movs	r0, #0
 8018dde:	e007      	b.n	8018df0 <__sfputs_r+0x22>
 8018de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018de4:	463a      	mov	r2, r7
 8018de6:	4630      	mov	r0, r6
 8018de8:	f7ff ffda 	bl	8018da0 <__sfputc_r>
 8018dec:	1c43      	adds	r3, r0, #1
 8018dee:	d1f3      	bne.n	8018dd8 <__sfputs_r+0xa>
 8018df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018df4 <_vfiprintf_r>:
 8018df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df8:	460d      	mov	r5, r1
 8018dfa:	b09d      	sub	sp, #116	@ 0x74
 8018dfc:	4614      	mov	r4, r2
 8018dfe:	4698      	mov	r8, r3
 8018e00:	4606      	mov	r6, r0
 8018e02:	b118      	cbz	r0, 8018e0c <_vfiprintf_r+0x18>
 8018e04:	6a03      	ldr	r3, [r0, #32]
 8018e06:	b90b      	cbnz	r3, 8018e0c <_vfiprintf_r+0x18>
 8018e08:	f7ff fc24 	bl	8018654 <__sinit>
 8018e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e0e:	07d9      	lsls	r1, r3, #31
 8018e10:	d405      	bmi.n	8018e1e <_vfiprintf_r+0x2a>
 8018e12:	89ab      	ldrh	r3, [r5, #12]
 8018e14:	059a      	lsls	r2, r3, #22
 8018e16:	d402      	bmi.n	8018e1e <_vfiprintf_r+0x2a>
 8018e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e1a:	f7ff fd84 	bl	8018926 <__retarget_lock_acquire_recursive>
 8018e1e:	89ab      	ldrh	r3, [r5, #12]
 8018e20:	071b      	lsls	r3, r3, #28
 8018e22:	d501      	bpl.n	8018e28 <_vfiprintf_r+0x34>
 8018e24:	692b      	ldr	r3, [r5, #16]
 8018e26:	b99b      	cbnz	r3, 8018e50 <_vfiprintf_r+0x5c>
 8018e28:	4629      	mov	r1, r5
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f000 fb84 	bl	8019538 <__swsetup_r>
 8018e30:	b170      	cbz	r0, 8018e50 <_vfiprintf_r+0x5c>
 8018e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e34:	07dc      	lsls	r4, r3, #31
 8018e36:	d504      	bpl.n	8018e42 <_vfiprintf_r+0x4e>
 8018e38:	f04f 30ff 	mov.w	r0, #4294967295
 8018e3c:	b01d      	add	sp, #116	@ 0x74
 8018e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e42:	89ab      	ldrh	r3, [r5, #12]
 8018e44:	0598      	lsls	r0, r3, #22
 8018e46:	d4f7      	bmi.n	8018e38 <_vfiprintf_r+0x44>
 8018e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e4a:	f7ff fd6d 	bl	8018928 <__retarget_lock_release_recursive>
 8018e4e:	e7f3      	b.n	8018e38 <_vfiprintf_r+0x44>
 8018e50:	2300      	movs	r3, #0
 8018e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e54:	2320      	movs	r3, #32
 8018e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e5e:	2330      	movs	r3, #48	@ 0x30
 8018e60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019010 <_vfiprintf_r+0x21c>
 8018e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018e68:	f04f 0901 	mov.w	r9, #1
 8018e6c:	4623      	mov	r3, r4
 8018e6e:	469a      	mov	sl, r3
 8018e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e74:	b10a      	cbz	r2, 8018e7a <_vfiprintf_r+0x86>
 8018e76:	2a25      	cmp	r2, #37	@ 0x25
 8018e78:	d1f9      	bne.n	8018e6e <_vfiprintf_r+0x7a>
 8018e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8018e7e:	d00b      	beq.n	8018e98 <_vfiprintf_r+0xa4>
 8018e80:	465b      	mov	r3, fp
 8018e82:	4622      	mov	r2, r4
 8018e84:	4629      	mov	r1, r5
 8018e86:	4630      	mov	r0, r6
 8018e88:	f7ff ffa1 	bl	8018dce <__sfputs_r>
 8018e8c:	3001      	adds	r0, #1
 8018e8e:	f000 80a7 	beq.w	8018fe0 <_vfiprintf_r+0x1ec>
 8018e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e94:	445a      	add	r2, fp
 8018e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e98:	f89a 3000 	ldrb.w	r3, [sl]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 809f 	beq.w	8018fe0 <_vfiprintf_r+0x1ec>
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018eac:	f10a 0a01 	add.w	sl, sl, #1
 8018eb0:	9304      	str	r3, [sp, #16]
 8018eb2:	9307      	str	r3, [sp, #28]
 8018eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8018eba:	4654      	mov	r4, sl
 8018ebc:	2205      	movs	r2, #5
 8018ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ec2:	4853      	ldr	r0, [pc, #332]	@ (8019010 <_vfiprintf_r+0x21c>)
 8018ec4:	f7e7 f99c 	bl	8000200 <memchr>
 8018ec8:	9a04      	ldr	r2, [sp, #16]
 8018eca:	b9d8      	cbnz	r0, 8018f04 <_vfiprintf_r+0x110>
 8018ecc:	06d1      	lsls	r1, r2, #27
 8018ece:	bf44      	itt	mi
 8018ed0:	2320      	movmi	r3, #32
 8018ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ed6:	0713      	lsls	r3, r2, #28
 8018ed8:	bf44      	itt	mi
 8018eda:	232b      	movmi	r3, #43	@ 0x2b
 8018edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8018ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ee6:	d015      	beq.n	8018f14 <_vfiprintf_r+0x120>
 8018ee8:	9a07      	ldr	r2, [sp, #28]
 8018eea:	4654      	mov	r4, sl
 8018eec:	2000      	movs	r0, #0
 8018eee:	f04f 0c0a 	mov.w	ip, #10
 8018ef2:	4621      	mov	r1, r4
 8018ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ef8:	3b30      	subs	r3, #48	@ 0x30
 8018efa:	2b09      	cmp	r3, #9
 8018efc:	d94b      	bls.n	8018f96 <_vfiprintf_r+0x1a2>
 8018efe:	b1b0      	cbz	r0, 8018f2e <_vfiprintf_r+0x13a>
 8018f00:	9207      	str	r2, [sp, #28]
 8018f02:	e014      	b.n	8018f2e <_vfiprintf_r+0x13a>
 8018f04:	eba0 0308 	sub.w	r3, r0, r8
 8018f08:	fa09 f303 	lsl.w	r3, r9, r3
 8018f0c:	4313      	orrs	r3, r2
 8018f0e:	9304      	str	r3, [sp, #16]
 8018f10:	46a2      	mov	sl, r4
 8018f12:	e7d2      	b.n	8018eba <_vfiprintf_r+0xc6>
 8018f14:	9b03      	ldr	r3, [sp, #12]
 8018f16:	1d19      	adds	r1, r3, #4
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	9103      	str	r1, [sp, #12]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	bfbb      	ittet	lt
 8018f20:	425b      	neglt	r3, r3
 8018f22:	f042 0202 	orrlt.w	r2, r2, #2
 8018f26:	9307      	strge	r3, [sp, #28]
 8018f28:	9307      	strlt	r3, [sp, #28]
 8018f2a:	bfb8      	it	lt
 8018f2c:	9204      	strlt	r2, [sp, #16]
 8018f2e:	7823      	ldrb	r3, [r4, #0]
 8018f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f32:	d10a      	bne.n	8018f4a <_vfiprintf_r+0x156>
 8018f34:	7863      	ldrb	r3, [r4, #1]
 8018f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f38:	d132      	bne.n	8018fa0 <_vfiprintf_r+0x1ac>
 8018f3a:	9b03      	ldr	r3, [sp, #12]
 8018f3c:	1d1a      	adds	r2, r3, #4
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	9203      	str	r2, [sp, #12]
 8018f42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018f46:	3402      	adds	r4, #2
 8018f48:	9305      	str	r3, [sp, #20]
 8018f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019020 <_vfiprintf_r+0x22c>
 8018f4e:	7821      	ldrb	r1, [r4, #0]
 8018f50:	2203      	movs	r2, #3
 8018f52:	4650      	mov	r0, sl
 8018f54:	f7e7 f954 	bl	8000200 <memchr>
 8018f58:	b138      	cbz	r0, 8018f6a <_vfiprintf_r+0x176>
 8018f5a:	9b04      	ldr	r3, [sp, #16]
 8018f5c:	eba0 000a 	sub.w	r0, r0, sl
 8018f60:	2240      	movs	r2, #64	@ 0x40
 8018f62:	4082      	lsls	r2, r0
 8018f64:	4313      	orrs	r3, r2
 8018f66:	3401      	adds	r4, #1
 8018f68:	9304      	str	r3, [sp, #16]
 8018f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f6e:	4829      	ldr	r0, [pc, #164]	@ (8019014 <_vfiprintf_r+0x220>)
 8018f70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018f74:	2206      	movs	r2, #6
 8018f76:	f7e7 f943 	bl	8000200 <memchr>
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	d03f      	beq.n	8018ffe <_vfiprintf_r+0x20a>
 8018f7e:	4b26      	ldr	r3, [pc, #152]	@ (8019018 <_vfiprintf_r+0x224>)
 8018f80:	bb1b      	cbnz	r3, 8018fca <_vfiprintf_r+0x1d6>
 8018f82:	9b03      	ldr	r3, [sp, #12]
 8018f84:	3307      	adds	r3, #7
 8018f86:	f023 0307 	bic.w	r3, r3, #7
 8018f8a:	3308      	adds	r3, #8
 8018f8c:	9303      	str	r3, [sp, #12]
 8018f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f90:	443b      	add	r3, r7
 8018f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f94:	e76a      	b.n	8018e6c <_vfiprintf_r+0x78>
 8018f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f9a:	460c      	mov	r4, r1
 8018f9c:	2001      	movs	r0, #1
 8018f9e:	e7a8      	b.n	8018ef2 <_vfiprintf_r+0xfe>
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	3401      	adds	r4, #1
 8018fa4:	9305      	str	r3, [sp, #20]
 8018fa6:	4619      	mov	r1, r3
 8018fa8:	f04f 0c0a 	mov.w	ip, #10
 8018fac:	4620      	mov	r0, r4
 8018fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fb2:	3a30      	subs	r2, #48	@ 0x30
 8018fb4:	2a09      	cmp	r2, #9
 8018fb6:	d903      	bls.n	8018fc0 <_vfiprintf_r+0x1cc>
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d0c6      	beq.n	8018f4a <_vfiprintf_r+0x156>
 8018fbc:	9105      	str	r1, [sp, #20]
 8018fbe:	e7c4      	b.n	8018f4a <_vfiprintf_r+0x156>
 8018fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	e7f0      	b.n	8018fac <_vfiprintf_r+0x1b8>
 8018fca:	ab03      	add	r3, sp, #12
 8018fcc:	9300      	str	r3, [sp, #0]
 8018fce:	462a      	mov	r2, r5
 8018fd0:	4b12      	ldr	r3, [pc, #72]	@ (801901c <_vfiprintf_r+0x228>)
 8018fd2:	a904      	add	r1, sp, #16
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	f3af 8000 	nop.w
 8018fda:	4607      	mov	r7, r0
 8018fdc:	1c78      	adds	r0, r7, #1
 8018fde:	d1d6      	bne.n	8018f8e <_vfiprintf_r+0x19a>
 8018fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fe2:	07d9      	lsls	r1, r3, #31
 8018fe4:	d405      	bmi.n	8018ff2 <_vfiprintf_r+0x1fe>
 8018fe6:	89ab      	ldrh	r3, [r5, #12]
 8018fe8:	059a      	lsls	r2, r3, #22
 8018fea:	d402      	bmi.n	8018ff2 <_vfiprintf_r+0x1fe>
 8018fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018fee:	f7ff fc9b 	bl	8018928 <__retarget_lock_release_recursive>
 8018ff2:	89ab      	ldrh	r3, [r5, #12]
 8018ff4:	065b      	lsls	r3, r3, #25
 8018ff6:	f53f af1f 	bmi.w	8018e38 <_vfiprintf_r+0x44>
 8018ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ffc:	e71e      	b.n	8018e3c <_vfiprintf_r+0x48>
 8018ffe:	ab03      	add	r3, sp, #12
 8019000:	9300      	str	r3, [sp, #0]
 8019002:	462a      	mov	r2, r5
 8019004:	4b05      	ldr	r3, [pc, #20]	@ (801901c <_vfiprintf_r+0x228>)
 8019006:	a904      	add	r1, sp, #16
 8019008:	4630      	mov	r0, r6
 801900a:	f000 f879 	bl	8019100 <_printf_i>
 801900e:	e7e4      	b.n	8018fda <_vfiprintf_r+0x1e6>
 8019010:	0802689f 	.word	0x0802689f
 8019014:	080268a9 	.word	0x080268a9
 8019018:	00000000 	.word	0x00000000
 801901c:	08018dcf 	.word	0x08018dcf
 8019020:	080268a5 	.word	0x080268a5

08019024 <_printf_common>:
 8019024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019028:	4616      	mov	r6, r2
 801902a:	4698      	mov	r8, r3
 801902c:	688a      	ldr	r2, [r1, #8]
 801902e:	690b      	ldr	r3, [r1, #16]
 8019030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019034:	4293      	cmp	r3, r2
 8019036:	bfb8      	it	lt
 8019038:	4613      	movlt	r3, r2
 801903a:	6033      	str	r3, [r6, #0]
 801903c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019040:	4607      	mov	r7, r0
 8019042:	460c      	mov	r4, r1
 8019044:	b10a      	cbz	r2, 801904a <_printf_common+0x26>
 8019046:	3301      	adds	r3, #1
 8019048:	6033      	str	r3, [r6, #0]
 801904a:	6823      	ldr	r3, [r4, #0]
 801904c:	0699      	lsls	r1, r3, #26
 801904e:	bf42      	ittt	mi
 8019050:	6833      	ldrmi	r3, [r6, #0]
 8019052:	3302      	addmi	r3, #2
 8019054:	6033      	strmi	r3, [r6, #0]
 8019056:	6825      	ldr	r5, [r4, #0]
 8019058:	f015 0506 	ands.w	r5, r5, #6
 801905c:	d106      	bne.n	801906c <_printf_common+0x48>
 801905e:	f104 0a19 	add.w	sl, r4, #25
 8019062:	68e3      	ldr	r3, [r4, #12]
 8019064:	6832      	ldr	r2, [r6, #0]
 8019066:	1a9b      	subs	r3, r3, r2
 8019068:	42ab      	cmp	r3, r5
 801906a:	dc26      	bgt.n	80190ba <_printf_common+0x96>
 801906c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019070:	6822      	ldr	r2, [r4, #0]
 8019072:	3b00      	subs	r3, #0
 8019074:	bf18      	it	ne
 8019076:	2301      	movne	r3, #1
 8019078:	0692      	lsls	r2, r2, #26
 801907a:	d42b      	bmi.n	80190d4 <_printf_common+0xb0>
 801907c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019080:	4641      	mov	r1, r8
 8019082:	4638      	mov	r0, r7
 8019084:	47c8      	blx	r9
 8019086:	3001      	adds	r0, #1
 8019088:	d01e      	beq.n	80190c8 <_printf_common+0xa4>
 801908a:	6823      	ldr	r3, [r4, #0]
 801908c:	6922      	ldr	r2, [r4, #16]
 801908e:	f003 0306 	and.w	r3, r3, #6
 8019092:	2b04      	cmp	r3, #4
 8019094:	bf02      	ittt	eq
 8019096:	68e5      	ldreq	r5, [r4, #12]
 8019098:	6833      	ldreq	r3, [r6, #0]
 801909a:	1aed      	subeq	r5, r5, r3
 801909c:	68a3      	ldr	r3, [r4, #8]
 801909e:	bf0c      	ite	eq
 80190a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80190a4:	2500      	movne	r5, #0
 80190a6:	4293      	cmp	r3, r2
 80190a8:	bfc4      	itt	gt
 80190aa:	1a9b      	subgt	r3, r3, r2
 80190ac:	18ed      	addgt	r5, r5, r3
 80190ae:	2600      	movs	r6, #0
 80190b0:	341a      	adds	r4, #26
 80190b2:	42b5      	cmp	r5, r6
 80190b4:	d11a      	bne.n	80190ec <_printf_common+0xc8>
 80190b6:	2000      	movs	r0, #0
 80190b8:	e008      	b.n	80190cc <_printf_common+0xa8>
 80190ba:	2301      	movs	r3, #1
 80190bc:	4652      	mov	r2, sl
 80190be:	4641      	mov	r1, r8
 80190c0:	4638      	mov	r0, r7
 80190c2:	47c8      	blx	r9
 80190c4:	3001      	adds	r0, #1
 80190c6:	d103      	bne.n	80190d0 <_printf_common+0xac>
 80190c8:	f04f 30ff 	mov.w	r0, #4294967295
 80190cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190d0:	3501      	adds	r5, #1
 80190d2:	e7c6      	b.n	8019062 <_printf_common+0x3e>
 80190d4:	18e1      	adds	r1, r4, r3
 80190d6:	1c5a      	adds	r2, r3, #1
 80190d8:	2030      	movs	r0, #48	@ 0x30
 80190da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80190de:	4422      	add	r2, r4
 80190e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80190e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80190e8:	3302      	adds	r3, #2
 80190ea:	e7c7      	b.n	801907c <_printf_common+0x58>
 80190ec:	2301      	movs	r3, #1
 80190ee:	4622      	mov	r2, r4
 80190f0:	4641      	mov	r1, r8
 80190f2:	4638      	mov	r0, r7
 80190f4:	47c8      	blx	r9
 80190f6:	3001      	adds	r0, #1
 80190f8:	d0e6      	beq.n	80190c8 <_printf_common+0xa4>
 80190fa:	3601      	adds	r6, #1
 80190fc:	e7d9      	b.n	80190b2 <_printf_common+0x8e>
	...

08019100 <_printf_i>:
 8019100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019104:	7e0f      	ldrb	r7, [r1, #24]
 8019106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019108:	2f78      	cmp	r7, #120	@ 0x78
 801910a:	4691      	mov	r9, r2
 801910c:	4680      	mov	r8, r0
 801910e:	460c      	mov	r4, r1
 8019110:	469a      	mov	sl, r3
 8019112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019116:	d807      	bhi.n	8019128 <_printf_i+0x28>
 8019118:	2f62      	cmp	r7, #98	@ 0x62
 801911a:	d80a      	bhi.n	8019132 <_printf_i+0x32>
 801911c:	2f00      	cmp	r7, #0
 801911e:	f000 80d2 	beq.w	80192c6 <_printf_i+0x1c6>
 8019122:	2f58      	cmp	r7, #88	@ 0x58
 8019124:	f000 80b9 	beq.w	801929a <_printf_i+0x19a>
 8019128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801912c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019130:	e03a      	b.n	80191a8 <_printf_i+0xa8>
 8019132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019136:	2b15      	cmp	r3, #21
 8019138:	d8f6      	bhi.n	8019128 <_printf_i+0x28>
 801913a:	a101      	add	r1, pc, #4	@ (adr r1, 8019140 <_printf_i+0x40>)
 801913c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019140:	08019199 	.word	0x08019199
 8019144:	080191ad 	.word	0x080191ad
 8019148:	08019129 	.word	0x08019129
 801914c:	08019129 	.word	0x08019129
 8019150:	08019129 	.word	0x08019129
 8019154:	08019129 	.word	0x08019129
 8019158:	080191ad 	.word	0x080191ad
 801915c:	08019129 	.word	0x08019129
 8019160:	08019129 	.word	0x08019129
 8019164:	08019129 	.word	0x08019129
 8019168:	08019129 	.word	0x08019129
 801916c:	080192ad 	.word	0x080192ad
 8019170:	080191d7 	.word	0x080191d7
 8019174:	08019267 	.word	0x08019267
 8019178:	08019129 	.word	0x08019129
 801917c:	08019129 	.word	0x08019129
 8019180:	080192cf 	.word	0x080192cf
 8019184:	08019129 	.word	0x08019129
 8019188:	080191d7 	.word	0x080191d7
 801918c:	08019129 	.word	0x08019129
 8019190:	08019129 	.word	0x08019129
 8019194:	0801926f 	.word	0x0801926f
 8019198:	6833      	ldr	r3, [r6, #0]
 801919a:	1d1a      	adds	r2, r3, #4
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	6032      	str	r2, [r6, #0]
 80191a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80191a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80191a8:	2301      	movs	r3, #1
 80191aa:	e09d      	b.n	80192e8 <_printf_i+0x1e8>
 80191ac:	6833      	ldr	r3, [r6, #0]
 80191ae:	6820      	ldr	r0, [r4, #0]
 80191b0:	1d19      	adds	r1, r3, #4
 80191b2:	6031      	str	r1, [r6, #0]
 80191b4:	0606      	lsls	r6, r0, #24
 80191b6:	d501      	bpl.n	80191bc <_printf_i+0xbc>
 80191b8:	681d      	ldr	r5, [r3, #0]
 80191ba:	e003      	b.n	80191c4 <_printf_i+0xc4>
 80191bc:	0645      	lsls	r5, r0, #25
 80191be:	d5fb      	bpl.n	80191b8 <_printf_i+0xb8>
 80191c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80191c4:	2d00      	cmp	r5, #0
 80191c6:	da03      	bge.n	80191d0 <_printf_i+0xd0>
 80191c8:	232d      	movs	r3, #45	@ 0x2d
 80191ca:	426d      	negs	r5, r5
 80191cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80191d0:	4859      	ldr	r0, [pc, #356]	@ (8019338 <_printf_i+0x238>)
 80191d2:	230a      	movs	r3, #10
 80191d4:	e011      	b.n	80191fa <_printf_i+0xfa>
 80191d6:	6821      	ldr	r1, [r4, #0]
 80191d8:	6833      	ldr	r3, [r6, #0]
 80191da:	0608      	lsls	r0, r1, #24
 80191dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80191e0:	d402      	bmi.n	80191e8 <_printf_i+0xe8>
 80191e2:	0649      	lsls	r1, r1, #25
 80191e4:	bf48      	it	mi
 80191e6:	b2ad      	uxthmi	r5, r5
 80191e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80191ea:	4853      	ldr	r0, [pc, #332]	@ (8019338 <_printf_i+0x238>)
 80191ec:	6033      	str	r3, [r6, #0]
 80191ee:	bf14      	ite	ne
 80191f0:	230a      	movne	r3, #10
 80191f2:	2308      	moveq	r3, #8
 80191f4:	2100      	movs	r1, #0
 80191f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80191fa:	6866      	ldr	r6, [r4, #4]
 80191fc:	60a6      	str	r6, [r4, #8]
 80191fe:	2e00      	cmp	r6, #0
 8019200:	bfa2      	ittt	ge
 8019202:	6821      	ldrge	r1, [r4, #0]
 8019204:	f021 0104 	bicge.w	r1, r1, #4
 8019208:	6021      	strge	r1, [r4, #0]
 801920a:	b90d      	cbnz	r5, 8019210 <_printf_i+0x110>
 801920c:	2e00      	cmp	r6, #0
 801920e:	d04b      	beq.n	80192a8 <_printf_i+0x1a8>
 8019210:	4616      	mov	r6, r2
 8019212:	fbb5 f1f3 	udiv	r1, r5, r3
 8019216:	fb03 5711 	mls	r7, r3, r1, r5
 801921a:	5dc7      	ldrb	r7, [r0, r7]
 801921c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019220:	462f      	mov	r7, r5
 8019222:	42bb      	cmp	r3, r7
 8019224:	460d      	mov	r5, r1
 8019226:	d9f4      	bls.n	8019212 <_printf_i+0x112>
 8019228:	2b08      	cmp	r3, #8
 801922a:	d10b      	bne.n	8019244 <_printf_i+0x144>
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	07df      	lsls	r7, r3, #31
 8019230:	d508      	bpl.n	8019244 <_printf_i+0x144>
 8019232:	6923      	ldr	r3, [r4, #16]
 8019234:	6861      	ldr	r1, [r4, #4]
 8019236:	4299      	cmp	r1, r3
 8019238:	bfde      	ittt	le
 801923a:	2330      	movle	r3, #48	@ 0x30
 801923c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019244:	1b92      	subs	r2, r2, r6
 8019246:	6122      	str	r2, [r4, #16]
 8019248:	f8cd a000 	str.w	sl, [sp]
 801924c:	464b      	mov	r3, r9
 801924e:	aa03      	add	r2, sp, #12
 8019250:	4621      	mov	r1, r4
 8019252:	4640      	mov	r0, r8
 8019254:	f7ff fee6 	bl	8019024 <_printf_common>
 8019258:	3001      	adds	r0, #1
 801925a:	d14a      	bne.n	80192f2 <_printf_i+0x1f2>
 801925c:	f04f 30ff 	mov.w	r0, #4294967295
 8019260:	b004      	add	sp, #16
 8019262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019266:	6823      	ldr	r3, [r4, #0]
 8019268:	f043 0320 	orr.w	r3, r3, #32
 801926c:	6023      	str	r3, [r4, #0]
 801926e:	4833      	ldr	r0, [pc, #204]	@ (801933c <_printf_i+0x23c>)
 8019270:	2778      	movs	r7, #120	@ 0x78
 8019272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019276:	6823      	ldr	r3, [r4, #0]
 8019278:	6831      	ldr	r1, [r6, #0]
 801927a:	061f      	lsls	r7, r3, #24
 801927c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019280:	d402      	bmi.n	8019288 <_printf_i+0x188>
 8019282:	065f      	lsls	r7, r3, #25
 8019284:	bf48      	it	mi
 8019286:	b2ad      	uxthmi	r5, r5
 8019288:	6031      	str	r1, [r6, #0]
 801928a:	07d9      	lsls	r1, r3, #31
 801928c:	bf44      	itt	mi
 801928e:	f043 0320 	orrmi.w	r3, r3, #32
 8019292:	6023      	strmi	r3, [r4, #0]
 8019294:	b11d      	cbz	r5, 801929e <_printf_i+0x19e>
 8019296:	2310      	movs	r3, #16
 8019298:	e7ac      	b.n	80191f4 <_printf_i+0xf4>
 801929a:	4827      	ldr	r0, [pc, #156]	@ (8019338 <_printf_i+0x238>)
 801929c:	e7e9      	b.n	8019272 <_printf_i+0x172>
 801929e:	6823      	ldr	r3, [r4, #0]
 80192a0:	f023 0320 	bic.w	r3, r3, #32
 80192a4:	6023      	str	r3, [r4, #0]
 80192a6:	e7f6      	b.n	8019296 <_printf_i+0x196>
 80192a8:	4616      	mov	r6, r2
 80192aa:	e7bd      	b.n	8019228 <_printf_i+0x128>
 80192ac:	6833      	ldr	r3, [r6, #0]
 80192ae:	6825      	ldr	r5, [r4, #0]
 80192b0:	6961      	ldr	r1, [r4, #20]
 80192b2:	1d18      	adds	r0, r3, #4
 80192b4:	6030      	str	r0, [r6, #0]
 80192b6:	062e      	lsls	r6, r5, #24
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	d501      	bpl.n	80192c0 <_printf_i+0x1c0>
 80192bc:	6019      	str	r1, [r3, #0]
 80192be:	e002      	b.n	80192c6 <_printf_i+0x1c6>
 80192c0:	0668      	lsls	r0, r5, #25
 80192c2:	d5fb      	bpl.n	80192bc <_printf_i+0x1bc>
 80192c4:	8019      	strh	r1, [r3, #0]
 80192c6:	2300      	movs	r3, #0
 80192c8:	6123      	str	r3, [r4, #16]
 80192ca:	4616      	mov	r6, r2
 80192cc:	e7bc      	b.n	8019248 <_printf_i+0x148>
 80192ce:	6833      	ldr	r3, [r6, #0]
 80192d0:	1d1a      	adds	r2, r3, #4
 80192d2:	6032      	str	r2, [r6, #0]
 80192d4:	681e      	ldr	r6, [r3, #0]
 80192d6:	6862      	ldr	r2, [r4, #4]
 80192d8:	2100      	movs	r1, #0
 80192da:	4630      	mov	r0, r6
 80192dc:	f7e6 ff90 	bl	8000200 <memchr>
 80192e0:	b108      	cbz	r0, 80192e6 <_printf_i+0x1e6>
 80192e2:	1b80      	subs	r0, r0, r6
 80192e4:	6060      	str	r0, [r4, #4]
 80192e6:	6863      	ldr	r3, [r4, #4]
 80192e8:	6123      	str	r3, [r4, #16]
 80192ea:	2300      	movs	r3, #0
 80192ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192f0:	e7aa      	b.n	8019248 <_printf_i+0x148>
 80192f2:	6923      	ldr	r3, [r4, #16]
 80192f4:	4632      	mov	r2, r6
 80192f6:	4649      	mov	r1, r9
 80192f8:	4640      	mov	r0, r8
 80192fa:	47d0      	blx	sl
 80192fc:	3001      	adds	r0, #1
 80192fe:	d0ad      	beq.n	801925c <_printf_i+0x15c>
 8019300:	6823      	ldr	r3, [r4, #0]
 8019302:	079b      	lsls	r3, r3, #30
 8019304:	d413      	bmi.n	801932e <_printf_i+0x22e>
 8019306:	68e0      	ldr	r0, [r4, #12]
 8019308:	9b03      	ldr	r3, [sp, #12]
 801930a:	4298      	cmp	r0, r3
 801930c:	bfb8      	it	lt
 801930e:	4618      	movlt	r0, r3
 8019310:	e7a6      	b.n	8019260 <_printf_i+0x160>
 8019312:	2301      	movs	r3, #1
 8019314:	4632      	mov	r2, r6
 8019316:	4649      	mov	r1, r9
 8019318:	4640      	mov	r0, r8
 801931a:	47d0      	blx	sl
 801931c:	3001      	adds	r0, #1
 801931e:	d09d      	beq.n	801925c <_printf_i+0x15c>
 8019320:	3501      	adds	r5, #1
 8019322:	68e3      	ldr	r3, [r4, #12]
 8019324:	9903      	ldr	r1, [sp, #12]
 8019326:	1a5b      	subs	r3, r3, r1
 8019328:	42ab      	cmp	r3, r5
 801932a:	dcf2      	bgt.n	8019312 <_printf_i+0x212>
 801932c:	e7eb      	b.n	8019306 <_printf_i+0x206>
 801932e:	2500      	movs	r5, #0
 8019330:	f104 0619 	add.w	r6, r4, #25
 8019334:	e7f5      	b.n	8019322 <_printf_i+0x222>
 8019336:	bf00      	nop
 8019338:	080268b0 	.word	0x080268b0
 801933c:	080268c1 	.word	0x080268c1

08019340 <__sflush_r>:
 8019340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019348:	0716      	lsls	r6, r2, #28
 801934a:	4605      	mov	r5, r0
 801934c:	460c      	mov	r4, r1
 801934e:	d454      	bmi.n	80193fa <__sflush_r+0xba>
 8019350:	684b      	ldr	r3, [r1, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	dc02      	bgt.n	801935c <__sflush_r+0x1c>
 8019356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019358:	2b00      	cmp	r3, #0
 801935a:	dd48      	ble.n	80193ee <__sflush_r+0xae>
 801935c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801935e:	2e00      	cmp	r6, #0
 8019360:	d045      	beq.n	80193ee <__sflush_r+0xae>
 8019362:	2300      	movs	r3, #0
 8019364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019368:	682f      	ldr	r7, [r5, #0]
 801936a:	6a21      	ldr	r1, [r4, #32]
 801936c:	602b      	str	r3, [r5, #0]
 801936e:	d030      	beq.n	80193d2 <__sflush_r+0x92>
 8019370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019372:	89a3      	ldrh	r3, [r4, #12]
 8019374:	0759      	lsls	r1, r3, #29
 8019376:	d505      	bpl.n	8019384 <__sflush_r+0x44>
 8019378:	6863      	ldr	r3, [r4, #4]
 801937a:	1ad2      	subs	r2, r2, r3
 801937c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801937e:	b10b      	cbz	r3, 8019384 <__sflush_r+0x44>
 8019380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019382:	1ad2      	subs	r2, r2, r3
 8019384:	2300      	movs	r3, #0
 8019386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019388:	6a21      	ldr	r1, [r4, #32]
 801938a:	4628      	mov	r0, r5
 801938c:	47b0      	blx	r6
 801938e:	1c43      	adds	r3, r0, #1
 8019390:	89a3      	ldrh	r3, [r4, #12]
 8019392:	d106      	bne.n	80193a2 <__sflush_r+0x62>
 8019394:	6829      	ldr	r1, [r5, #0]
 8019396:	291d      	cmp	r1, #29
 8019398:	d82b      	bhi.n	80193f2 <__sflush_r+0xb2>
 801939a:	4a2a      	ldr	r2, [pc, #168]	@ (8019444 <__sflush_r+0x104>)
 801939c:	410a      	asrs	r2, r1
 801939e:	07d6      	lsls	r6, r2, #31
 80193a0:	d427      	bmi.n	80193f2 <__sflush_r+0xb2>
 80193a2:	2200      	movs	r2, #0
 80193a4:	6062      	str	r2, [r4, #4]
 80193a6:	04d9      	lsls	r1, r3, #19
 80193a8:	6922      	ldr	r2, [r4, #16]
 80193aa:	6022      	str	r2, [r4, #0]
 80193ac:	d504      	bpl.n	80193b8 <__sflush_r+0x78>
 80193ae:	1c42      	adds	r2, r0, #1
 80193b0:	d101      	bne.n	80193b6 <__sflush_r+0x76>
 80193b2:	682b      	ldr	r3, [r5, #0]
 80193b4:	b903      	cbnz	r3, 80193b8 <__sflush_r+0x78>
 80193b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80193b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193ba:	602f      	str	r7, [r5, #0]
 80193bc:	b1b9      	cbz	r1, 80193ee <__sflush_r+0xae>
 80193be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80193c2:	4299      	cmp	r1, r3
 80193c4:	d002      	beq.n	80193cc <__sflush_r+0x8c>
 80193c6:	4628      	mov	r0, r5
 80193c8:	f000 f924 	bl	8019614 <_free_r>
 80193cc:	2300      	movs	r3, #0
 80193ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80193d0:	e00d      	b.n	80193ee <__sflush_r+0xae>
 80193d2:	2301      	movs	r3, #1
 80193d4:	4628      	mov	r0, r5
 80193d6:	47b0      	blx	r6
 80193d8:	4602      	mov	r2, r0
 80193da:	1c50      	adds	r0, r2, #1
 80193dc:	d1c9      	bne.n	8019372 <__sflush_r+0x32>
 80193de:	682b      	ldr	r3, [r5, #0]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d0c6      	beq.n	8019372 <__sflush_r+0x32>
 80193e4:	2b1d      	cmp	r3, #29
 80193e6:	d001      	beq.n	80193ec <__sflush_r+0xac>
 80193e8:	2b16      	cmp	r3, #22
 80193ea:	d11e      	bne.n	801942a <__sflush_r+0xea>
 80193ec:	602f      	str	r7, [r5, #0]
 80193ee:	2000      	movs	r0, #0
 80193f0:	e022      	b.n	8019438 <__sflush_r+0xf8>
 80193f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193f6:	b21b      	sxth	r3, r3
 80193f8:	e01b      	b.n	8019432 <__sflush_r+0xf2>
 80193fa:	690f      	ldr	r7, [r1, #16]
 80193fc:	2f00      	cmp	r7, #0
 80193fe:	d0f6      	beq.n	80193ee <__sflush_r+0xae>
 8019400:	0793      	lsls	r3, r2, #30
 8019402:	680e      	ldr	r6, [r1, #0]
 8019404:	bf08      	it	eq
 8019406:	694b      	ldreq	r3, [r1, #20]
 8019408:	600f      	str	r7, [r1, #0]
 801940a:	bf18      	it	ne
 801940c:	2300      	movne	r3, #0
 801940e:	eba6 0807 	sub.w	r8, r6, r7
 8019412:	608b      	str	r3, [r1, #8]
 8019414:	f1b8 0f00 	cmp.w	r8, #0
 8019418:	dde9      	ble.n	80193ee <__sflush_r+0xae>
 801941a:	6a21      	ldr	r1, [r4, #32]
 801941c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801941e:	4643      	mov	r3, r8
 8019420:	463a      	mov	r2, r7
 8019422:	4628      	mov	r0, r5
 8019424:	47b0      	blx	r6
 8019426:	2800      	cmp	r0, #0
 8019428:	dc08      	bgt.n	801943c <__sflush_r+0xfc>
 801942a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801942e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019432:	81a3      	strh	r3, [r4, #12]
 8019434:	f04f 30ff 	mov.w	r0, #4294967295
 8019438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801943c:	4407      	add	r7, r0
 801943e:	eba8 0800 	sub.w	r8, r8, r0
 8019442:	e7e7      	b.n	8019414 <__sflush_r+0xd4>
 8019444:	dfbffffe 	.word	0xdfbffffe

08019448 <_fflush_r>:
 8019448:	b538      	push	{r3, r4, r5, lr}
 801944a:	690b      	ldr	r3, [r1, #16]
 801944c:	4605      	mov	r5, r0
 801944e:	460c      	mov	r4, r1
 8019450:	b913      	cbnz	r3, 8019458 <_fflush_r+0x10>
 8019452:	2500      	movs	r5, #0
 8019454:	4628      	mov	r0, r5
 8019456:	bd38      	pop	{r3, r4, r5, pc}
 8019458:	b118      	cbz	r0, 8019462 <_fflush_r+0x1a>
 801945a:	6a03      	ldr	r3, [r0, #32]
 801945c:	b90b      	cbnz	r3, 8019462 <_fflush_r+0x1a>
 801945e:	f7ff f8f9 	bl	8018654 <__sinit>
 8019462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d0f3      	beq.n	8019452 <_fflush_r+0xa>
 801946a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801946c:	07d0      	lsls	r0, r2, #31
 801946e:	d404      	bmi.n	801947a <_fflush_r+0x32>
 8019470:	0599      	lsls	r1, r3, #22
 8019472:	d402      	bmi.n	801947a <_fflush_r+0x32>
 8019474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019476:	f7ff fa56 	bl	8018926 <__retarget_lock_acquire_recursive>
 801947a:	4628      	mov	r0, r5
 801947c:	4621      	mov	r1, r4
 801947e:	f7ff ff5f 	bl	8019340 <__sflush_r>
 8019482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019484:	07da      	lsls	r2, r3, #31
 8019486:	4605      	mov	r5, r0
 8019488:	d4e4      	bmi.n	8019454 <_fflush_r+0xc>
 801948a:	89a3      	ldrh	r3, [r4, #12]
 801948c:	059b      	lsls	r3, r3, #22
 801948e:	d4e1      	bmi.n	8019454 <_fflush_r+0xc>
 8019490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019492:	f7ff fa49 	bl	8018928 <__retarget_lock_release_recursive>
 8019496:	e7dd      	b.n	8019454 <_fflush_r+0xc>

08019498 <fiprintf>:
 8019498:	b40e      	push	{r1, r2, r3}
 801949a:	b503      	push	{r0, r1, lr}
 801949c:	4601      	mov	r1, r0
 801949e:	ab03      	add	r3, sp, #12
 80194a0:	4805      	ldr	r0, [pc, #20]	@ (80194b8 <fiprintf+0x20>)
 80194a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80194a6:	6800      	ldr	r0, [r0, #0]
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	f7ff fca3 	bl	8018df4 <_vfiprintf_r>
 80194ae:	b002      	add	sp, #8
 80194b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80194b4:	b003      	add	sp, #12
 80194b6:	4770      	bx	lr
 80194b8:	20000030 	.word	0x20000030

080194bc <__swbuf_r>:
 80194bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194be:	460e      	mov	r6, r1
 80194c0:	4614      	mov	r4, r2
 80194c2:	4605      	mov	r5, r0
 80194c4:	b118      	cbz	r0, 80194ce <__swbuf_r+0x12>
 80194c6:	6a03      	ldr	r3, [r0, #32]
 80194c8:	b90b      	cbnz	r3, 80194ce <__swbuf_r+0x12>
 80194ca:	f7ff f8c3 	bl	8018654 <__sinit>
 80194ce:	69a3      	ldr	r3, [r4, #24]
 80194d0:	60a3      	str	r3, [r4, #8]
 80194d2:	89a3      	ldrh	r3, [r4, #12]
 80194d4:	071a      	lsls	r2, r3, #28
 80194d6:	d501      	bpl.n	80194dc <__swbuf_r+0x20>
 80194d8:	6923      	ldr	r3, [r4, #16]
 80194da:	b943      	cbnz	r3, 80194ee <__swbuf_r+0x32>
 80194dc:	4621      	mov	r1, r4
 80194de:	4628      	mov	r0, r5
 80194e0:	f000 f82a 	bl	8019538 <__swsetup_r>
 80194e4:	b118      	cbz	r0, 80194ee <__swbuf_r+0x32>
 80194e6:	f04f 37ff 	mov.w	r7, #4294967295
 80194ea:	4638      	mov	r0, r7
 80194ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194ee:	6823      	ldr	r3, [r4, #0]
 80194f0:	6922      	ldr	r2, [r4, #16]
 80194f2:	1a98      	subs	r0, r3, r2
 80194f4:	6963      	ldr	r3, [r4, #20]
 80194f6:	b2f6      	uxtb	r6, r6
 80194f8:	4283      	cmp	r3, r0
 80194fa:	4637      	mov	r7, r6
 80194fc:	dc05      	bgt.n	801950a <__swbuf_r+0x4e>
 80194fe:	4621      	mov	r1, r4
 8019500:	4628      	mov	r0, r5
 8019502:	f7ff ffa1 	bl	8019448 <_fflush_r>
 8019506:	2800      	cmp	r0, #0
 8019508:	d1ed      	bne.n	80194e6 <__swbuf_r+0x2a>
 801950a:	68a3      	ldr	r3, [r4, #8]
 801950c:	3b01      	subs	r3, #1
 801950e:	60a3      	str	r3, [r4, #8]
 8019510:	6823      	ldr	r3, [r4, #0]
 8019512:	1c5a      	adds	r2, r3, #1
 8019514:	6022      	str	r2, [r4, #0]
 8019516:	701e      	strb	r6, [r3, #0]
 8019518:	6962      	ldr	r2, [r4, #20]
 801951a:	1c43      	adds	r3, r0, #1
 801951c:	429a      	cmp	r2, r3
 801951e:	d004      	beq.n	801952a <__swbuf_r+0x6e>
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	07db      	lsls	r3, r3, #31
 8019524:	d5e1      	bpl.n	80194ea <__swbuf_r+0x2e>
 8019526:	2e0a      	cmp	r6, #10
 8019528:	d1df      	bne.n	80194ea <__swbuf_r+0x2e>
 801952a:	4621      	mov	r1, r4
 801952c:	4628      	mov	r0, r5
 801952e:	f7ff ff8b 	bl	8019448 <_fflush_r>
 8019532:	2800      	cmp	r0, #0
 8019534:	d0d9      	beq.n	80194ea <__swbuf_r+0x2e>
 8019536:	e7d6      	b.n	80194e6 <__swbuf_r+0x2a>

08019538 <__swsetup_r>:
 8019538:	b538      	push	{r3, r4, r5, lr}
 801953a:	4b29      	ldr	r3, [pc, #164]	@ (80195e0 <__swsetup_r+0xa8>)
 801953c:	4605      	mov	r5, r0
 801953e:	6818      	ldr	r0, [r3, #0]
 8019540:	460c      	mov	r4, r1
 8019542:	b118      	cbz	r0, 801954c <__swsetup_r+0x14>
 8019544:	6a03      	ldr	r3, [r0, #32]
 8019546:	b90b      	cbnz	r3, 801954c <__swsetup_r+0x14>
 8019548:	f7ff f884 	bl	8018654 <__sinit>
 801954c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019550:	0719      	lsls	r1, r3, #28
 8019552:	d422      	bmi.n	801959a <__swsetup_r+0x62>
 8019554:	06da      	lsls	r2, r3, #27
 8019556:	d407      	bmi.n	8019568 <__swsetup_r+0x30>
 8019558:	2209      	movs	r2, #9
 801955a:	602a      	str	r2, [r5, #0]
 801955c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019560:	81a3      	strh	r3, [r4, #12]
 8019562:	f04f 30ff 	mov.w	r0, #4294967295
 8019566:	e033      	b.n	80195d0 <__swsetup_r+0x98>
 8019568:	0758      	lsls	r0, r3, #29
 801956a:	d512      	bpl.n	8019592 <__swsetup_r+0x5a>
 801956c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801956e:	b141      	cbz	r1, 8019582 <__swsetup_r+0x4a>
 8019570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019574:	4299      	cmp	r1, r3
 8019576:	d002      	beq.n	801957e <__swsetup_r+0x46>
 8019578:	4628      	mov	r0, r5
 801957a:	f000 f84b 	bl	8019614 <_free_r>
 801957e:	2300      	movs	r3, #0
 8019580:	6363      	str	r3, [r4, #52]	@ 0x34
 8019582:	89a3      	ldrh	r3, [r4, #12]
 8019584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019588:	81a3      	strh	r3, [r4, #12]
 801958a:	2300      	movs	r3, #0
 801958c:	6063      	str	r3, [r4, #4]
 801958e:	6923      	ldr	r3, [r4, #16]
 8019590:	6023      	str	r3, [r4, #0]
 8019592:	89a3      	ldrh	r3, [r4, #12]
 8019594:	f043 0308 	orr.w	r3, r3, #8
 8019598:	81a3      	strh	r3, [r4, #12]
 801959a:	6923      	ldr	r3, [r4, #16]
 801959c:	b94b      	cbnz	r3, 80195b2 <__swsetup_r+0x7a>
 801959e:	89a3      	ldrh	r3, [r4, #12]
 80195a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80195a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80195a8:	d003      	beq.n	80195b2 <__swsetup_r+0x7a>
 80195aa:	4621      	mov	r1, r4
 80195ac:	4628      	mov	r0, r5
 80195ae:	f000 f8cf 	bl	8019750 <__smakebuf_r>
 80195b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195b6:	f013 0201 	ands.w	r2, r3, #1
 80195ba:	d00a      	beq.n	80195d2 <__swsetup_r+0x9a>
 80195bc:	2200      	movs	r2, #0
 80195be:	60a2      	str	r2, [r4, #8]
 80195c0:	6962      	ldr	r2, [r4, #20]
 80195c2:	4252      	negs	r2, r2
 80195c4:	61a2      	str	r2, [r4, #24]
 80195c6:	6922      	ldr	r2, [r4, #16]
 80195c8:	b942      	cbnz	r2, 80195dc <__swsetup_r+0xa4>
 80195ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80195ce:	d1c5      	bne.n	801955c <__swsetup_r+0x24>
 80195d0:	bd38      	pop	{r3, r4, r5, pc}
 80195d2:	0799      	lsls	r1, r3, #30
 80195d4:	bf58      	it	pl
 80195d6:	6962      	ldrpl	r2, [r4, #20]
 80195d8:	60a2      	str	r2, [r4, #8]
 80195da:	e7f4      	b.n	80195c6 <__swsetup_r+0x8e>
 80195dc:	2000      	movs	r0, #0
 80195de:	e7f7      	b.n	80195d0 <__swsetup_r+0x98>
 80195e0:	20000030 	.word	0x20000030

080195e4 <_sbrk_r>:
 80195e4:	b538      	push	{r3, r4, r5, lr}
 80195e6:	4d06      	ldr	r5, [pc, #24]	@ (8019600 <_sbrk_r+0x1c>)
 80195e8:	2300      	movs	r3, #0
 80195ea:	4604      	mov	r4, r0
 80195ec:	4608      	mov	r0, r1
 80195ee:	602b      	str	r3, [r5, #0]
 80195f0:	f7e8 fbc4 	bl	8001d7c <_sbrk>
 80195f4:	1c43      	adds	r3, r0, #1
 80195f6:	d102      	bne.n	80195fe <_sbrk_r+0x1a>
 80195f8:	682b      	ldr	r3, [r5, #0]
 80195fa:	b103      	cbz	r3, 80195fe <_sbrk_r+0x1a>
 80195fc:	6023      	str	r3, [r4, #0]
 80195fe:	bd38      	pop	{r3, r4, r5, pc}
 8019600:	20015958 	.word	0x20015958

08019604 <abort>:
 8019604:	b508      	push	{r3, lr}
 8019606:	2006      	movs	r0, #6
 8019608:	f000 f906 	bl	8019818 <raise>
 801960c:	2001      	movs	r0, #1
 801960e:	f7e8 fb3d 	bl	8001c8c <_exit>
	...

08019614 <_free_r>:
 8019614:	b538      	push	{r3, r4, r5, lr}
 8019616:	4605      	mov	r5, r0
 8019618:	2900      	cmp	r1, #0
 801961a:	d041      	beq.n	80196a0 <_free_r+0x8c>
 801961c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019620:	1f0c      	subs	r4, r1, #4
 8019622:	2b00      	cmp	r3, #0
 8019624:	bfb8      	it	lt
 8019626:	18e4      	addlt	r4, r4, r3
 8019628:	f7ff fa56 	bl	8018ad8 <__malloc_lock>
 801962c:	4a1d      	ldr	r2, [pc, #116]	@ (80196a4 <_free_r+0x90>)
 801962e:	6813      	ldr	r3, [r2, #0]
 8019630:	b933      	cbnz	r3, 8019640 <_free_r+0x2c>
 8019632:	6063      	str	r3, [r4, #4]
 8019634:	6014      	str	r4, [r2, #0]
 8019636:	4628      	mov	r0, r5
 8019638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801963c:	f7ff ba52 	b.w	8018ae4 <__malloc_unlock>
 8019640:	42a3      	cmp	r3, r4
 8019642:	d908      	bls.n	8019656 <_free_r+0x42>
 8019644:	6820      	ldr	r0, [r4, #0]
 8019646:	1821      	adds	r1, r4, r0
 8019648:	428b      	cmp	r3, r1
 801964a:	bf01      	itttt	eq
 801964c:	6819      	ldreq	r1, [r3, #0]
 801964e:	685b      	ldreq	r3, [r3, #4]
 8019650:	1809      	addeq	r1, r1, r0
 8019652:	6021      	streq	r1, [r4, #0]
 8019654:	e7ed      	b.n	8019632 <_free_r+0x1e>
 8019656:	461a      	mov	r2, r3
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	b10b      	cbz	r3, 8019660 <_free_r+0x4c>
 801965c:	42a3      	cmp	r3, r4
 801965e:	d9fa      	bls.n	8019656 <_free_r+0x42>
 8019660:	6811      	ldr	r1, [r2, #0]
 8019662:	1850      	adds	r0, r2, r1
 8019664:	42a0      	cmp	r0, r4
 8019666:	d10b      	bne.n	8019680 <_free_r+0x6c>
 8019668:	6820      	ldr	r0, [r4, #0]
 801966a:	4401      	add	r1, r0
 801966c:	1850      	adds	r0, r2, r1
 801966e:	4283      	cmp	r3, r0
 8019670:	6011      	str	r1, [r2, #0]
 8019672:	d1e0      	bne.n	8019636 <_free_r+0x22>
 8019674:	6818      	ldr	r0, [r3, #0]
 8019676:	685b      	ldr	r3, [r3, #4]
 8019678:	6053      	str	r3, [r2, #4]
 801967a:	4408      	add	r0, r1
 801967c:	6010      	str	r0, [r2, #0]
 801967e:	e7da      	b.n	8019636 <_free_r+0x22>
 8019680:	d902      	bls.n	8019688 <_free_r+0x74>
 8019682:	230c      	movs	r3, #12
 8019684:	602b      	str	r3, [r5, #0]
 8019686:	e7d6      	b.n	8019636 <_free_r+0x22>
 8019688:	6820      	ldr	r0, [r4, #0]
 801968a:	1821      	adds	r1, r4, r0
 801968c:	428b      	cmp	r3, r1
 801968e:	bf04      	itt	eq
 8019690:	6819      	ldreq	r1, [r3, #0]
 8019692:	685b      	ldreq	r3, [r3, #4]
 8019694:	6063      	str	r3, [r4, #4]
 8019696:	bf04      	itt	eq
 8019698:	1809      	addeq	r1, r1, r0
 801969a:	6021      	streq	r1, [r4, #0]
 801969c:	6054      	str	r4, [r2, #4]
 801969e:	e7ca      	b.n	8019636 <_free_r+0x22>
 80196a0:	bd38      	pop	{r3, r4, r5, pc}
 80196a2:	bf00      	nop
 80196a4:	20015aa4 	.word	0x20015aa4

080196a8 <_realloc_r>:
 80196a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196ac:	4680      	mov	r8, r0
 80196ae:	4615      	mov	r5, r2
 80196b0:	460c      	mov	r4, r1
 80196b2:	b921      	cbnz	r1, 80196be <_realloc_r+0x16>
 80196b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196b8:	4611      	mov	r1, r2
 80196ba:	f7ff b98d 	b.w	80189d8 <_malloc_r>
 80196be:	b92a      	cbnz	r2, 80196cc <_realloc_r+0x24>
 80196c0:	f7ff ffa8 	bl	8019614 <_free_r>
 80196c4:	2400      	movs	r4, #0
 80196c6:	4620      	mov	r0, r4
 80196c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196cc:	f000 f8e2 	bl	8019894 <_malloc_usable_size_r>
 80196d0:	4285      	cmp	r5, r0
 80196d2:	4606      	mov	r6, r0
 80196d4:	d802      	bhi.n	80196dc <_realloc_r+0x34>
 80196d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80196da:	d8f4      	bhi.n	80196c6 <_realloc_r+0x1e>
 80196dc:	4629      	mov	r1, r5
 80196de:	4640      	mov	r0, r8
 80196e0:	f7ff f97a 	bl	80189d8 <_malloc_r>
 80196e4:	4607      	mov	r7, r0
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d0ec      	beq.n	80196c4 <_realloc_r+0x1c>
 80196ea:	42b5      	cmp	r5, r6
 80196ec:	462a      	mov	r2, r5
 80196ee:	4621      	mov	r1, r4
 80196f0:	bf28      	it	cs
 80196f2:	4632      	movcs	r2, r6
 80196f4:	f7ff f919 	bl	801892a <memcpy>
 80196f8:	4621      	mov	r1, r4
 80196fa:	4640      	mov	r0, r8
 80196fc:	f7ff ff8a 	bl	8019614 <_free_r>
 8019700:	463c      	mov	r4, r7
 8019702:	e7e0      	b.n	80196c6 <_realloc_r+0x1e>

08019704 <__swhatbuf_r>:
 8019704:	b570      	push	{r4, r5, r6, lr}
 8019706:	460c      	mov	r4, r1
 8019708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801970c:	2900      	cmp	r1, #0
 801970e:	b096      	sub	sp, #88	@ 0x58
 8019710:	4615      	mov	r5, r2
 8019712:	461e      	mov	r6, r3
 8019714:	da0d      	bge.n	8019732 <__swhatbuf_r+0x2e>
 8019716:	89a3      	ldrh	r3, [r4, #12]
 8019718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801971c:	f04f 0100 	mov.w	r1, #0
 8019720:	bf14      	ite	ne
 8019722:	2340      	movne	r3, #64	@ 0x40
 8019724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019728:	2000      	movs	r0, #0
 801972a:	6031      	str	r1, [r6, #0]
 801972c:	602b      	str	r3, [r5, #0]
 801972e:	b016      	add	sp, #88	@ 0x58
 8019730:	bd70      	pop	{r4, r5, r6, pc}
 8019732:	466a      	mov	r2, sp
 8019734:	f000 f878 	bl	8019828 <_fstat_r>
 8019738:	2800      	cmp	r0, #0
 801973a:	dbec      	blt.n	8019716 <__swhatbuf_r+0x12>
 801973c:	9901      	ldr	r1, [sp, #4]
 801973e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019746:	4259      	negs	r1, r3
 8019748:	4159      	adcs	r1, r3
 801974a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801974e:	e7eb      	b.n	8019728 <__swhatbuf_r+0x24>

08019750 <__smakebuf_r>:
 8019750:	898b      	ldrh	r3, [r1, #12]
 8019752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019754:	079d      	lsls	r5, r3, #30
 8019756:	4606      	mov	r6, r0
 8019758:	460c      	mov	r4, r1
 801975a:	d507      	bpl.n	801976c <__smakebuf_r+0x1c>
 801975c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019760:	6023      	str	r3, [r4, #0]
 8019762:	6123      	str	r3, [r4, #16]
 8019764:	2301      	movs	r3, #1
 8019766:	6163      	str	r3, [r4, #20]
 8019768:	b003      	add	sp, #12
 801976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801976c:	ab01      	add	r3, sp, #4
 801976e:	466a      	mov	r2, sp
 8019770:	f7ff ffc8 	bl	8019704 <__swhatbuf_r>
 8019774:	9f00      	ldr	r7, [sp, #0]
 8019776:	4605      	mov	r5, r0
 8019778:	4639      	mov	r1, r7
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff f92c 	bl	80189d8 <_malloc_r>
 8019780:	b948      	cbnz	r0, 8019796 <__smakebuf_r+0x46>
 8019782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019786:	059a      	lsls	r2, r3, #22
 8019788:	d4ee      	bmi.n	8019768 <__smakebuf_r+0x18>
 801978a:	f023 0303 	bic.w	r3, r3, #3
 801978e:	f043 0302 	orr.w	r3, r3, #2
 8019792:	81a3      	strh	r3, [r4, #12]
 8019794:	e7e2      	b.n	801975c <__smakebuf_r+0xc>
 8019796:	89a3      	ldrh	r3, [r4, #12]
 8019798:	6020      	str	r0, [r4, #0]
 801979a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801979e:	81a3      	strh	r3, [r4, #12]
 80197a0:	9b01      	ldr	r3, [sp, #4]
 80197a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80197a6:	b15b      	cbz	r3, 80197c0 <__smakebuf_r+0x70>
 80197a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197ac:	4630      	mov	r0, r6
 80197ae:	f000 f84d 	bl	801984c <_isatty_r>
 80197b2:	b128      	cbz	r0, 80197c0 <__smakebuf_r+0x70>
 80197b4:	89a3      	ldrh	r3, [r4, #12]
 80197b6:	f023 0303 	bic.w	r3, r3, #3
 80197ba:	f043 0301 	orr.w	r3, r3, #1
 80197be:	81a3      	strh	r3, [r4, #12]
 80197c0:	89a3      	ldrh	r3, [r4, #12]
 80197c2:	431d      	orrs	r5, r3
 80197c4:	81a5      	strh	r5, [r4, #12]
 80197c6:	e7cf      	b.n	8019768 <__smakebuf_r+0x18>

080197c8 <_raise_r>:
 80197c8:	291f      	cmp	r1, #31
 80197ca:	b538      	push	{r3, r4, r5, lr}
 80197cc:	4605      	mov	r5, r0
 80197ce:	460c      	mov	r4, r1
 80197d0:	d904      	bls.n	80197dc <_raise_r+0x14>
 80197d2:	2316      	movs	r3, #22
 80197d4:	6003      	str	r3, [r0, #0]
 80197d6:	f04f 30ff 	mov.w	r0, #4294967295
 80197da:	bd38      	pop	{r3, r4, r5, pc}
 80197dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80197de:	b112      	cbz	r2, 80197e6 <_raise_r+0x1e>
 80197e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80197e4:	b94b      	cbnz	r3, 80197fa <_raise_r+0x32>
 80197e6:	4628      	mov	r0, r5
 80197e8:	f000 f852 	bl	8019890 <_getpid_r>
 80197ec:	4622      	mov	r2, r4
 80197ee:	4601      	mov	r1, r0
 80197f0:	4628      	mov	r0, r5
 80197f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197f6:	f000 b839 	b.w	801986c <_kill_r>
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d00a      	beq.n	8019814 <_raise_r+0x4c>
 80197fe:	1c59      	adds	r1, r3, #1
 8019800:	d103      	bne.n	801980a <_raise_r+0x42>
 8019802:	2316      	movs	r3, #22
 8019804:	6003      	str	r3, [r0, #0]
 8019806:	2001      	movs	r0, #1
 8019808:	e7e7      	b.n	80197da <_raise_r+0x12>
 801980a:	2100      	movs	r1, #0
 801980c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019810:	4620      	mov	r0, r4
 8019812:	4798      	blx	r3
 8019814:	2000      	movs	r0, #0
 8019816:	e7e0      	b.n	80197da <_raise_r+0x12>

08019818 <raise>:
 8019818:	4b02      	ldr	r3, [pc, #8]	@ (8019824 <raise+0xc>)
 801981a:	4601      	mov	r1, r0
 801981c:	6818      	ldr	r0, [r3, #0]
 801981e:	f7ff bfd3 	b.w	80197c8 <_raise_r>
 8019822:	bf00      	nop
 8019824:	20000030 	.word	0x20000030

08019828 <_fstat_r>:
 8019828:	b538      	push	{r3, r4, r5, lr}
 801982a:	4d07      	ldr	r5, [pc, #28]	@ (8019848 <_fstat_r+0x20>)
 801982c:	2300      	movs	r3, #0
 801982e:	4604      	mov	r4, r0
 8019830:	4608      	mov	r0, r1
 8019832:	4611      	mov	r1, r2
 8019834:	602b      	str	r3, [r5, #0]
 8019836:	f7e8 fa79 	bl	8001d2c <_fstat>
 801983a:	1c43      	adds	r3, r0, #1
 801983c:	d102      	bne.n	8019844 <_fstat_r+0x1c>
 801983e:	682b      	ldr	r3, [r5, #0]
 8019840:	b103      	cbz	r3, 8019844 <_fstat_r+0x1c>
 8019842:	6023      	str	r3, [r4, #0]
 8019844:	bd38      	pop	{r3, r4, r5, pc}
 8019846:	bf00      	nop
 8019848:	20015958 	.word	0x20015958

0801984c <_isatty_r>:
 801984c:	b538      	push	{r3, r4, r5, lr}
 801984e:	4d06      	ldr	r5, [pc, #24]	@ (8019868 <_isatty_r+0x1c>)
 8019850:	2300      	movs	r3, #0
 8019852:	4604      	mov	r4, r0
 8019854:	4608      	mov	r0, r1
 8019856:	602b      	str	r3, [r5, #0]
 8019858:	f7e8 fa78 	bl	8001d4c <_isatty>
 801985c:	1c43      	adds	r3, r0, #1
 801985e:	d102      	bne.n	8019866 <_isatty_r+0x1a>
 8019860:	682b      	ldr	r3, [r5, #0]
 8019862:	b103      	cbz	r3, 8019866 <_isatty_r+0x1a>
 8019864:	6023      	str	r3, [r4, #0]
 8019866:	bd38      	pop	{r3, r4, r5, pc}
 8019868:	20015958 	.word	0x20015958

0801986c <_kill_r>:
 801986c:	b538      	push	{r3, r4, r5, lr}
 801986e:	4d07      	ldr	r5, [pc, #28]	@ (801988c <_kill_r+0x20>)
 8019870:	2300      	movs	r3, #0
 8019872:	4604      	mov	r4, r0
 8019874:	4608      	mov	r0, r1
 8019876:	4611      	mov	r1, r2
 8019878:	602b      	str	r3, [r5, #0]
 801987a:	f7e8 f9f5 	bl	8001c68 <_kill>
 801987e:	1c43      	adds	r3, r0, #1
 8019880:	d102      	bne.n	8019888 <_kill_r+0x1c>
 8019882:	682b      	ldr	r3, [r5, #0]
 8019884:	b103      	cbz	r3, 8019888 <_kill_r+0x1c>
 8019886:	6023      	str	r3, [r4, #0]
 8019888:	bd38      	pop	{r3, r4, r5, pc}
 801988a:	bf00      	nop
 801988c:	20015958 	.word	0x20015958

08019890 <_getpid_r>:
 8019890:	f7e8 b9e2 	b.w	8001c58 <_getpid>

08019894 <_malloc_usable_size_r>:
 8019894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019898:	1f18      	subs	r0, r3, #4
 801989a:	2b00      	cmp	r3, #0
 801989c:	bfbc      	itt	lt
 801989e:	580b      	ldrlt	r3, [r1, r0]
 80198a0:	18c0      	addlt	r0, r0, r3
 80198a2:	4770      	bx	lr

080198a4 <_init>:
 80198a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198a6:	bf00      	nop
 80198a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198aa:	bc08      	pop	{r3}
 80198ac:	469e      	mov	lr, r3
 80198ae:	4770      	bx	lr

080198b0 <_fini>:
 80198b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198b2:	bf00      	nop
 80198b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198b6:	bc08      	pop	{r3}
 80198b8:	469e      	mov	lr, r3
 80198ba:	4770      	bx	lr
