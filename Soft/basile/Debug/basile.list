
basile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ac  08014ccc  08014ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d78  08017d78  00019074  2**0
                  CONTENTS
  4 .ARM          00000008  08017d78  08017d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d80  08017d80  00019074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d80  08017d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d84  08017d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08017d88  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045a4  20000074  08017dfc  00019074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004618  08017dfc  00019618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b9a  00000000  00000000  000190a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c79  00000000  00000000  00041c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  000488b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a6b  00000000  00000000  0004a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035620  00000000  00000000  0004c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003539d  00000000  00000000  00081a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111191  00000000  00000000  000b6dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009074  00000000  00000000  001c7f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001d1010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014cb4 	.word	0x08014cb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08014cb4 	.word	0x08014cb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SPIx_TxRx>:
#define SPIx_DS   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

extern SPI_HandleTypeDef hspi2;

static uint8_t SPIx_TxRx(uint8_t cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_TransmitReceive(&hspi2, &cmd, &cmd, 1, SPIx_TIMEOUT);
 800057a:	1dfa      	adds	r2, r7, #7
 800057c:	1df9      	adds	r1, r7, #7
 800057e:	230a      	movs	r3, #10
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <SPIx_TxRx+0x24>)
 8000586:	f003 fce0 	bl	8003f4a <HAL_SPI_TransmitReceive>
  return cmd;
 800058a:	79fb      	ldrb	r3, [r7, #7]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000090 	.word	0x20000090

08000598 <SPIx_TxBuf>:

static void SPIx_TxBuf(uint8_t *m2s, uint8_t *s2m, uint16_t bufflen)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	80fb      	strh	r3, [r7, #6]
  SPIx_CS;
 80005a6:	2200      	movs	r2, #0
 80005a8:	2101      	movs	r1, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <SPIx_TxBuf+0x68>)
 80005ac:	f001 fe12 	bl	80021d4 <HAL_GPIO_WritePin>

  if((s2m == NULL) && (m2s != NULL))
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d109      	bne.n	80005ca <SPIx_TxBuf+0x32>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <SPIx_TxBuf+0x32>
  {
    HAL_SPI_Transmit(&hspi2, m2s, bufflen, SPIx_TIMEOUT);
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	230a      	movs	r3, #10
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	4810      	ldr	r0, [pc, #64]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005c4:	f003 fa13 	bl	80039ee <HAL_SPI_Transmit>
 80005c8:	e011      	b.n	80005ee <SPIx_TxBuf+0x56>
  }
  else if(m2s == NULL)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d106      	bne.n	80005de <SPIx_TxBuf+0x46>
  {
    HAL_SPI_Receive(&hspi2, s2m, bufflen, SPIx_TIMEOUT);
 80005d0:	88fa      	ldrh	r2, [r7, #6]
 80005d2:	230a      	movs	r3, #10
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005d8:	f003 fb7f 	bl	8003cda <HAL_SPI_Receive>
 80005dc:	e007      	b.n	80005ee <SPIx_TxBuf+0x56>
  }
  else
  {
    HAL_SPI_TransmitReceive(&hspi2, m2s, s2m, bufflen, SPIx_TIMEOUT);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	220a      	movs	r2, #10
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005ea:	f003 fcae 	bl	8003f4a <HAL_SPI_TransmitReceive>
  }

  SPIx_DS;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4803      	ldr	r0, [pc, #12]	@ (8000600 <SPIx_TxBuf+0x68>)
 80005f4:	f001 fdee 	bl	80021d4 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400
 8000604:	20000090 	.word	0x20000090

08000608 <init_udelay>:

/* Initialize STM32 watchdog timer */
static void init_udelay(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <init_udelay+0x4c>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <init_udelay+0x4c>)
 8000612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000616:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <init_udelay+0x4c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <init_udelay+0x4c>)
 800061e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000622:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <init_udelay+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <init_udelay+0x50>)
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <init_udelay+0x50>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <init_udelay+0x50>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <init_udelay+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000642:	bf00      	nop
  __ASM volatile ("NOP");
 8000644:	bf00      	nop
  __ASM volatile ("NOP");
 8000646:	bf00      	nop

}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000edf0 	.word	0xe000edf0
 8000658:	e0001000 	.word	0xe0001000

0800065c <udelay>:

/* Software delay in us */
void udelay(uint32_t us)
{
 800065c:	b480      	push	{r7}
 800065e:	b087      	sub	sp, #28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <udelay+0x44>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <udelay+0x48>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	0c9a      	lsrs	r2, r3, #18
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <udelay+0x4c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <udelay+0x4c>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f6      	bhi.n	800067e <udelay+0x22>

}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	e0001000 	.word	0xe0001000

080006ac <enc_reset>:
static void enc_rdbuffer(void *buffer, int16_t buflen);
static void enc_linkstatus(ENC_HandleTypeDef *handle);

/* Send the single byte system reset command (SRC). */
void enc_reset(ENC_HandleTypeDef *handle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Send the system reset command. */

  SPIx_CS;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <enc_reset+0x38>)
 80006ba:	f001 fd8b 	bl	80021d4 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_SRC);
 80006be:	20ff      	movs	r0, #255	@ 0xff
 80006c0:	f7ff ff56 	bl	8000570 <SPIx_TxRx>
  SPIx_DS;
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <enc_reset+0x38>)
 80006ca:	f001 fd83 	bl	80021d4 <HAL_GPIO_WritePin>

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	741a      	strb	r2, [r3, #16]
  //udelay(2);
  HAL_Delay(2); /* >1000 us, conforms to errata #2 */
 80006d4:	2002      	movs	r0, #2
 80006d6:	f001 facd 	bl	8001c74 <HAL_Delay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	48000400 	.word	0x48000400

080006e8 <enc_start>:

/* Initialize the enc28j60 and configure the needed hardware resources */
bool enc_start(ENC_HandleTypeDef *handle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint8_t regval;

  /* Initialize watchdog timer */
  init_udelay();
 80006f0:	f7ff ff8a 	bl	8000608 <init_udelay>

  /* System reset */
  enc_reset(handle);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ffd9 	bl	80006ac <enc_reset>

  /* Use bank 0 */
  enc_setbank(handle, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 fab8 	bl	8000c72 <enc_setbank>

  /* Check if we are actually communicating with the ENC28J60. */
  regval = enc_rdbreg(handle, ENC_EREVID);
 8000702:	2172      	movs	r1, #114	@ 0x72
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 fb63 	bl	8000dd0 <enc_rdbreg>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
  if(regval == 0x00 || regval == 0xff)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <enc_start+0x32>
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2bff      	cmp	r3, #255	@ 0xff
 8000718:	d101      	bne.n	800071e <enc_start+0x36>
  {
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0cc      	b.n	80008b8 <enc_start+0x1d0>
  }

  /* Initialize ECON2: Enable address auto increment. */
  enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	205e      	movs	r0, #94	@ 0x5e
 8000722:	f000 fad8 	bl	8000cd6 <enc_wrgreg2>

  /* Initialize receive buffer. */
  handle->nextpkt = PKTMEM_RX_START;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	829a      	strh	r2, [r3, #20]
  enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fb7b 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8000736:	2200      	movs	r2, #0
 8000738:	2109      	movs	r1, #9
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fb76 	bl	8000e2c <enc_wrbreg>

  /* Set the receive data pointer */
  /* Errata 14 */
  enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8000740:	22ff      	movs	r2, #255	@ 0xff
 8000742:	210c      	movs	r1, #12
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fb71 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 800074a:	2219      	movs	r2, #25
 800074c:	210d      	movs	r1, #13
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fb6c 	bl	8000e2c <enc_wrbreg>

  /* Set the receive buffer end. */
  enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	210a      	movs	r1, #10
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fb67 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 800075e:	2219      	movs	r2, #25
 8000760:	210b      	movs	r1, #11
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 fb62 	bl	8000e2c <enc_wrbreg>

  /* Set transmit buffer start. */
  handle->transmitLength = 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	831a      	strh	r2, [r3, #24]
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 800076e:	2200      	movs	r2, #0
 8000770:	2104      	movs	r1, #4
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 fb5a 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8000778:	221a      	movs	r2, #26
 800077a:	2105      	movs	r1, #5
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 fb55 	bl	8000e2c <enc_wrbreg>

  /* Set filter mode: unicast OR broadcast AND crc valid */
  enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 8000782:	22a1      	movs	r2, #161	@ 0xa1
 8000784:	2138      	movs	r1, #56	@ 0x38
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 fb50 	bl	8000e2c <enc_wrbreg>

  do
  {
    HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 800078c:	200a      	movs	r0, #10
 800078e:	f001 fa71 	bl	8001c74 <HAL_Delay>
    regval = enc_rdbreg(handle, ENC_ESTAT);
 8000792:	211d      	movs	r1, #29
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fb1b 	bl	8000dd0 <enc_rdbreg>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
  }while((regval & ESTAT_CLKRDY) == 0);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f1      	beq.n	800078c <enc_start+0xa4>

  /* Enable MAC receive */
  enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 80007a8:	220d      	movs	r2, #13
 80007aa:	21c0      	movs	r1, #192	@ 0xc0
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fb3d 	bl	8000e2c <enc_wrbreg>

  /* Enable automatic padding and CRC operations */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d120      	bne.n	80007fc <enc_start+0x114>
  {
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <enc_start+0xde>
 80007c2:	2332      	movs	r3, #50	@ 0x32
 80007c4:	e000      	b.n	80007c8 <enc_start+0xe0>
 80007c6:	2302      	movs	r3, #2
 80007c8:	461a      	mov	r2, r3
 80007ca:	21c2      	movs	r1, #194	@ 0xc2
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fb2d 	bl	8000e2c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER); /* Defer transmission enable */
 80007d2:	2240      	movs	r2, #64	@ 0x40
 80007d4:	21c3      	movs	r1, #195	@ 0xc3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 fb28 	bl	8000e2c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 80007dc:	2212      	movs	r2, #18
 80007de:	21c6      	movs	r1, #198	@ 0xc6
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fb23 	bl	8000e2c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 80007e6:	220c      	movs	r2, #12
 80007e8:	21c7      	movs	r1, #199	@ 0xc7
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fb1e 	bl	8000e2c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 80007f0:	2212      	movs	r2, #18
 80007f2:	21c4      	movs	r1, #196	@ 0xc4
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fb19 	bl	8000e2c <enc_wrbreg>
 80007fa:	e015      	b.n	8000828 <enc_start+0x140>
  }
  else
  {
    /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN | MACON3_FULDPX);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <enc_start+0x120>
 8000804:	2333      	movs	r3, #51	@ 0x33
 8000806:	e000      	b.n	800080a <enc_start+0x122>
 8000808:	2303      	movs	r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	21c2      	movs	r1, #194	@ 0xc2
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 fb0c 	bl	8000e2c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000814:	2212      	movs	r2, #18
 8000816:	21c6      	movs	r1, #198	@ 0xc6
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 fb07 	bl	8000e2c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 800081e:	2215      	movs	r2, #21
 8000820:	21c4      	movs	r1, #196	@ 0xc4
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 fb02 	bl	8000e2c <enc_wrbreg>
  }

  /* Set the maximum packet size which the controller will accept */
  enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU + 18) & 0xff);
 8000828:	22ee      	movs	r2, #238	@ 0xee
 800082a:	21ca      	movs	r1, #202	@ 0xca
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fafd 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU + 18) >> 8);
 8000832:	2205      	movs	r2, #5
 8000834:	21cb      	movs	r1, #203	@ 0xcb
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 faf8 	bl	8000e2c <enc_wrbreg>

  /* Setup up PHCON1 & 2 */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10b      	bne.n	800085c <enc_start+0x174>
  {
    enc_wrphy(handle, ENC_PHCON1, 0x00);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 fb88 	bl	8000f5e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 800084e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000852:	2110      	movs	r1, #16
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 fb82 	bl	8000f5e <enc_wrphy>
 800085a:	e00a      	b.n	8000872 <enc_start+0x18a>
  }
  else
  {
    enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 800085c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000860:	2100      	movs	r1, #0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 fb7b 	bl	8000f5e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, 0x00);
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 fb76 	bl	8000f5e <enc_wrphy>
  }

  /* Process interrupt settings */
  if(handle->Init.InterruptEnableBits & EIE_LINKIE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7b1b      	ldrb	r3, [r3, #12]
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <enc_start+0x1a0>
  {
    /* Enable link change interrupt in PHY module */
    enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 800087e:	2212      	movs	r2, #18
 8000880:	2112      	movs	r1, #18
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 fb6b 	bl	8000f5e <enc_wrphy>
  }

  /* Reset all interrupt flags */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000888:	213b      	movs	r1, #59	@ 0x3b
 800088a:	20bc      	movs	r0, #188	@ 0xbc
 800088c:	f000 fa23 	bl	8000cd6 <enc_wrgreg2>

  regval = handle->Init.InterruptEnableBits;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7b1b      	ldrb	r3, [r3, #12]
 8000894:	73fb      	strb	r3, [r7, #15]
  if(regval)
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <enc_start+0x1bc>
  {
    /* Ensure INTIE is set when at least an interruption is selected */
    regval |= EIE_INTIE;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable selected interrupts in ethernet controller module */
  enc_bfsgreg(ENC_EIE, regval);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4619      	mov	r1, r3
 80008a8:	209b      	movs	r0, #155	@ 0x9b
 80008aa:	f000 fa14 	bl	8000cd6 <enc_wrgreg2>

  /* Enable the receiver */
  enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 80008ae:	2104      	movs	r1, #4
 80008b0:	209f      	movs	r0, #159	@ 0x9f
 80008b2:	f000 fa10 	bl	8000cd6 <enc_wrgreg2>

  return true;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <enc_set_MAC>:

/* Set the MAC address to the configured value. */
void enc_set_MAC(ENC_HandleTypeDef *handle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	21e4      	movs	r1, #228	@ 0xe4
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 faaa 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	21e5      	movs	r1, #229	@ 0xe5
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 faa1 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	3302      	adds	r3, #2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	21e2      	movs	r1, #226	@ 0xe2
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa98 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	3303      	adds	r3, #3
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	21e3      	movs	r1, #227	@ 0xe3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fa8f 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	3304      	adds	r3, #4
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	21e0      	movs	r1, #224	@ 0xe0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa86 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	3305      	adds	r3, #5
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	21e1      	movs	r1, #225	@ 0xe1
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fa7d 	bl	8000e2c <enc_wrbreg>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <enc_prepare_txbuffer>:

/* Prepare TX buffer */
int8_t enc_prepare_txbuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if(!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0))
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	201f      	movs	r0, #31
 800094c:	f000 f9da 	bl	8000d04 <enc_waitgreg>
 8000950:	4603      	mov	r3, r0
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <enc_prepare_txbuffer+0x28>
  {
    return ERR_TIMEOUT;
 800095c:	f06f 0302 	mvn.w	r3, #2
 8000960:	e03c      	b.n	80009dc <enc_prepare_txbuffer+0xa2>
  }

  /* Set transmit buffer start (is this necessary?). */
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fa60 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 800096c:	221a      	movs	r2, #26
 800096e:	2105      	movs	r1, #5
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa5b 	bl	8000e2c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */
  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fa56 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 8000980:	221a      	movs	r2, #26
 8000982:	2103      	movs	r1, #3
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 fa51 	bl	8000e2c <enc_wrbreg>

  txend = PKTMEM_TX_START + len;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000990:	81fb      	strh	r3, [r7, #14]

  if(txend + 8 > PKTMEM_TX_ENDP1)
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 8000998:	4293      	cmp	r3, r2
 800099a:	d902      	bls.n	80009a2 <enc_prepare_txbuffer+0x68>
  {
    return ERR_MEM;
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	e01c      	b.n	80009dc <enc_prepare_txbuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2106      	movs	r1, #6
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fa3e 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2107      	movs	r1, #7
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fa35 	bl	8000e2c <enc_wrbreg>

  control_write[0] = ENC_WBM;
 80009c2:	237a      	movs	r3, #122	@ 0x7a
 80009c4:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 80009c6:	230e      	movs	r3, #14
 80009c8:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(control_write, control_write, 2);
 80009ca:	f107 010c 	add.w	r1, r7, #12
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2202      	movs	r2, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fddf 	bl	8000598 <SPIx_TxBuf>

  return ERR_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <enc_wrbuffer>:

/* Write a buffer of data. */
void enc_wrbuffer(void *buffer, uint16_t buflen)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <enc_wrbuffer+0x30>)
 80009f6:	f001 fbed 	bl	80021d4 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_WBM);
 80009fa:	207a      	movs	r0, #122	@ 0x7a
 80009fc:	f7ff fdb8 	bl	8000570 <SPIx_TxRx>
  SPIx_TxBuf(buffer, NULL, buflen);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	461a      	mov	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fdc6 	bl	8000598 <SPIx_TxBuf>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	48000400 	.word	0x48000400

08000a18 <enc_transmit>:

/* Start hardware transmission. */
void enc_transmit(ENC_HandleTypeDef *handle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(handle->transmitLength != 0)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	8b1b      	ldrh	r3, [r3, #24]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d053      	beq.n	8000ad0 <enc_transmit+0xb8>
  {
    handle->retries = 16;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    do
    {
      enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	209f      	movs	r0, #159	@ 0x9f
 8000a32:	f000 f950 	bl	8000cd6 <enc_wrgreg2>
      enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	20bf      	movs	r0, #191	@ 0xbf
 8000a3a:	f000 f94c 	bl	8000cd6 <enc_wrgreg2>
      enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000a3e:	210a      	movs	r1, #10
 8000a40:	20bc      	movs	r0, #188	@ 0xbc
 8000a42:	f000 f948 	bl	8000cd6 <enc_wrgreg2>

      /* Start transmission */
      enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000a46:	2108      	movs	r1, #8
 8000a48:	209f      	movs	r0, #159	@ 0x9f
 8000a4a:	f000 f944 	bl	8000cd6 <enc_wrgreg2>

      /* Wait for end of transmission */
      enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210a      	movs	r1, #10
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 f989 	bl	8000d6a <enc_waitwhilegreg>

      /* Stop transmission */
      enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000a58:	2108      	movs	r1, #8
 8000a5a:	20bf      	movs	r0, #191	@ 0xbf
 8000a5c:	f000 f93b 	bl	8000cd6 <enc_wrgreg2>
      {
        uint16_t addtTsv4;
        uint8_t tsv4, regval;

        /* read tsv */
        addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	8b1b      	ldrh	r3, [r3, #24]
 8000a64:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000a68:	3304      	adds	r3, #4
 8000a6a:	81fb      	strh	r3, [r7, #14]

        enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f9d9 	bl	8000e2c <enc_wrbreg>
        enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	2101      	movs	r1, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f9d0 	bl	8000e2c <enc_wrbreg>

        enc_rdbuffer(&tsv4, 1);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fa8e 	bl	8000fb4 <enc_rdbuffer>
        regval = enc_rdgreg(ENC_EIR);
 8000a98:	201c      	movs	r0, #28
 8000a9a:	f000 f908 	bl	8000cae <enc_rdgreg2>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	737b      	strb	r3, [r7, #13]
        if(!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL))
 8000aa2:	7b7b      	ldrb	r3, [r7, #13]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00e      	beq.n	8000aca <enc_transmit+0xb2>
 8000aac:	7b3b      	ldrb	r3, [r7, #12]
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d009      	beq.n	8000aca <enc_transmit+0xb2>
        {
          break;
        }
      }
      handle->retries--;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }while(handle->retries > 0);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1b1      	bne.n	8000a2e <enc_transmit+0x16>
    handle->transmitLength = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	831a      	strh	r2, [r3, #24]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <enc_get_received_frame>:

/* Check if we have received packet, and if so, retrieve them. */
bool enc_get_received_frame(ENC_HandleTypeDef *handle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint8_t rsv[6];
  uint16_t pktlen;
  uint16_t rxstat;
  uint8_t pktcnt;

  bool result = true;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	757b      	strb	r3, [r7, #21]

  pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 8000ae4:	2139      	movs	r1, #57	@ 0x39
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f972 	bl	8000dd0 <enc_rdbreg>
 8000aec:	4603      	mov	r3, r0
 8000aee:	753b      	strb	r3, [r7, #20]
  if(pktcnt == 0)
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <enc_get_received_frame+0x22>
  {
    return false;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e078      	b.n	8000bec <enc_get_received_frame+0x114>
  };

  /* Set the read pointer to the start of the received packet (ERDPT) */
  enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8a9b      	ldrh	r3, [r3, #20]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f991 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8a9b      	ldrh	r3, [r3, #20]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	2101      	movs	r1, #1
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f987 	bl	8000e2c <enc_wrbreg>
  enc_rdbuffer(rsv, 6);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2106      	movs	r1, #6
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fa45 	bl	8000fb4 <enc_rdbuffer>

  handle->nextpkt = (uint16_t) rsv[1] << 8 | (uint16_t) rsv[0];
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	7b3b      	ldrb	r3, [r7, #12]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	829a      	strh	r2, [r3, #20]
  pktlen = (uint16_t) rsv[3] << 8 | (uint16_t) rsv[2];
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	827b      	strh	r3, [r7, #18]
  rxstat = (uint16_t) rsv[5] << 8 | (uint16_t) rsv[4];
 8000b4e:	7c7b      	ldrb	r3, [r7, #17]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */
  if((rxstat & RXSTAT_OK) == 0)
 8000b5e:	8afb      	ldrh	r3, [r7, #22]
 8000b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <enc_get_received_frame+0x96>
  {
    result = false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	757b      	strb	r3, [r7, #21]
 8000b6c:	e018      	b.n	8000ba0 <enc_get_received_frame+0xc8>
  }
  else
  { /* Check for a usable packet length (4 added for the CRC) */
    if(pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4))
 8000b6e:	8a7b      	ldrh	r3, [r7, #18]
 8000b70:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8000b74:	d802      	bhi.n	8000b7c <enc_get_received_frame+0xa4>
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	2b12      	cmp	r3, #18
 8000b7a:	d802      	bhi.n	8000b82 <enc_get_received_frame+0xaa>
    {
      result = false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	757b      	strb	r3, [r7, #21]
 8000b80:	e00e      	b.n	8000ba0 <enc_get_received_frame+0xc8>
    }
    else
    {
      handle->RxFrameInfos.length = pktlen - 4;
 8000b82:	8a7b      	ldrh	r3, [r7, #18]
 8000b84:	3b04      	subs	r3, #4
 8000b86:	461a      	mov	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
      enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f000 fa0a 	bl	8000fb4 <enc_rdbuffer>
    }
  }

  /* Errata 14 (on se sert de rxstat comme variable temporaire */
  rxstat = handle->nextpkt;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a9b      	ldrh	r3, [r3, #20]
 8000ba4:	82fb      	strh	r3, [r7, #22]
  if(rxstat == PKTMEM_RX_START)
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d103      	bne.n	8000bb4 <enc_get_received_frame+0xdc>
  {
    rxstat = PKTMEM_RX_END;
 8000bac:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 8000bb0:	82fb      	strh	r3, [r7, #22]
 8000bb2:	e002      	b.n	8000bba <enc_get_received_frame+0xe2>
  }
  else
  {
    rxstat--;
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	82fb      	strh	r3, [r7, #22]
  }
  enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8000bba:	8afb      	ldrh	r3, [r7, #22]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	210c      	movs	r1, #12
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f92e 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8000bd0:	8afb      	ldrh	r3, [r7, #22]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	210d      	movs	r1, #13
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f925 	bl	8000e2c <enc_wrbreg>

  /* Decrement the packet counter indicate we are done with this packet */
  enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 8000be2:	2140      	movs	r1, #64	@ 0x40
 8000be4:	209e      	movs	r0, #158	@ 0x9e
 8000be6:	f000 f876 	bl	8000cd6 <enc_wrgreg2>

  return result;
 8000bea:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <enc_enable_interrupts>:

/* Enable individual ENC28J60 interrupts */
void enc_enable_interrupts(uint8_t bits)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  enc_bfsgreg(ENC_EIE, bits);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4619      	mov	r1, r3
 8000c02:	209b      	movs	r0, #155	@ 0x9b
 8000c04:	f000 f867 	bl	8000cd6 <enc_wrgreg2>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <enc_irq_handler>:

/* Perform interrupt handling logic outside of the interrupt handler */
void enc_irq_handler(ENC_HandleTypeDef *handle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint8_t eir;

  enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	20bb      	movs	r0, #187	@ 0xbb
 8000c1c:	f000 f85b 	bl	8000cd6 <enc_wrgreg2>

  /* Read EIR for interrupt flags */
  eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8000c20:	201c      	movs	r0, #28
 8000c22:	f000 f844 	bl	8000cae <enc_rdgreg2>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8000c2c:	73fb      	strb	r3, [r7, #15]

  /* PKTIF is not reliable, check PKCNT instead */
  if(enc_rdbreg(handle, ENC_EPKTCNT) != 0)
 8000c2e:	2139      	movs	r1, #57	@ 0x39
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f8cd 	bl	8000dd0 <enc_rdbreg>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <enc_irq_handler+0x34>
  {
    /* Manage EIR_PKTIF by software */
    eir |= EIR_PKTIF;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Store interrupt flags in handle */
  handle->interruptFlags = eir;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	745a      	strb	r2, [r3, #17]

  /* If link status has changed, read it */
  if((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <enc_irq_handler+0x52>
  {
    enc_linkstatus(handle); /* Get current link status */
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f9c7 	bl	8000fe8 <enc_linkstatus>
    enc_rdphy(handle, ENC_PHIR); /* Clear the LINKIF interrupt */
 8000c5a:	2113      	movs	r1, #19
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f943 	bl	8000ee8 <enc_rdphy>
  }

  /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000c62:	213b      	movs	r1, #59	@ 0x3b
 8000c64:	20bc      	movs	r0, #188	@ 0xbc
 8000c66:	f000 f836 	bl	8000cd6 <enc_wrgreg2>

  /* Enable Ethernet interrupts */
  /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <enc_setbank>:

/* Set the bank for these next control register access. */
static void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
  if(bank != handle->bank)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7c1b      	ldrb	r3, [r3, #16]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d00e      	beq.n	8000ca6 <enc_setbank+0x34>
  {
    /* Select bank 0 (just so that all of the bits are cleared) */
    enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	20bf      	movs	r0, #191	@ 0xbf
 8000c8c:	f000 f823 	bl	8000cd6 <enc_wrgreg2>

    if(bank != 0)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <enc_setbank+0x2e>
    {
      enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	209f      	movs	r0, #159	@ 0x9f
 8000c9c:	f000 f81b 	bl	8000cd6 <enc_wrgreg2>
    }

    handle->bank = bank;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	78fa      	ldrb	r2, [r7, #3]
 8000ca4:	741a      	strb	r2, [r3, #16]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <enc_rdgreg2>:

/* Read a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(cmdpdata, cmdpdata, 2);
 8000cbc:	f107 010c 	add.w	r1, r7, #12
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc66 	bl	8000598 <SPIx_TxBuf>

  return cmdpdata[1];
 8000ccc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <enc_wrgreg2>:

/* Write to a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460a      	mov	r2, r1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71bb      	strb	r3, [r7, #6]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	733b      	strb	r3, [r7, #12]
  cmdpdata[1] = wrdata;
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(cmdpdata, NULL, 2);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc4e 	bl	8000598 <SPIx_TxBuf>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <enc_waitgreg>:

/* Wait until grouped register bit(s) take a specific value */
static bool enc_waitgreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d16:	f000 ffa1 	bl	8001c5c <HAL_GetTick>
 8000d1a:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffc2 	bl	8000cae <enc_rdgreg2>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d2e:	f000 ff95 	bl	8001c5c <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000d3a:	7cfa      	ldrb	r2, [r7, #19]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	797a      	ldrb	r2, [r7, #5]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d002      	beq.n	8000d4e <enc_waitgreg+0x4a>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b31      	cmp	r3, #49	@ 0x31
 8000d4c:	d9e6      	bls.n	8000d1c <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000d4e:	7cfa      	ldrb	r2, [r7, #19]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	4013      	ands	r3, r2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	797a      	ldrb	r2, [r7, #5]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <enc_waitwhilegreg>:

/* Wait while grouped register bit(s) have a specific value */
static bool enc_waitwhilegreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	460b      	mov	r3, r1
 8000d76:	71bb      	strb	r3, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d7c:	f000 ff6e 	bl	8001c5c <HAL_GetTick>
 8000d80:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff8f 	bl	8000cae <enc_rdgreg2>
 8000d90:	4603      	mov	r3, r0
 8000d92:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d94:	f000 ff62 	bl	8001c5c <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000da0:	7cfa      	ldrb	r2, [r7, #19]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	4013      	ands	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	797a      	ldrb	r2, [r7, #5]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d102      	bne.n	8000db4 <enc_waitwhilegreg+0x4a>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b31      	cmp	r3, #49	@ 0x31
 8000db2:	d9e6      	bls.n	8000d82 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8000db4:	7cfa      	ldrb	r2, [r7, #19]
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4013      	ands	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	797a      	ldrb	r2, [r7, #5]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <enc_rdbreg>:

/* Read from a banked control register using the RCR command. */
static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  enc_setbank(handle, GETBANK(ctrlreg));
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff41 	bl	8000c72 <enc_setbank>
  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(data, data, (ISPHYMAC(ctrlreg)) ? 3 : 2);
 8000dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da01      	bge.n	8000e06 <enc_rdbreg+0x36>
 8000e02:	2203      	movs	r2, #3
 8000e04:	e000      	b.n	8000e08 <enc_rdbreg+0x38>
 8000e06:	2202      	movs	r2, #2
 8000e08:	f107 010c 	add.w	r1, r7, #12
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbc1 	bl	8000598 <SPIx_TxBuf>
  return (ISPHYMAC(ctrlreg)) ? data[2] : data[1];
 8000e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da01      	bge.n	8000e22 <enc_rdbreg+0x52>
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	e000      	b.n	8000e24 <enc_rdbreg+0x54>
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <enc_wrbreg>:

/* Write to a banked control register using the WCR command. */
static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t wrdata)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];
  enc_setbank(handle, GETBANK(ctrlreg));
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff11 	bl	8000c72 <enc_setbank>
  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8000e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(data, NULL, 2);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb91 	bl	8000598 <SPIx_TxBuf>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <enc_waitbreg>:

/* Wait until banked register bit(s) take a specific value */
static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	4608      	mov	r0, r1
 8000e88:	4611      	mov	r1, r2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70bb      	strb	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8000e98:	f000 fee0 	bl	8001c5c <HAL_GetTick>
 8000e9c:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdbreg(handle, ctrlreg);
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff94 	bl	8000dd0 <enc_rdbreg>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000eac:	f000 fed6 	bl	8001c5c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000eb8:	7cfa      	ldrb	r2, [r7, #19]
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	787a      	ldrb	r2, [r7, #1]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d002      	beq.n	8000ecc <enc_waitbreg+0x4e>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b31      	cmp	r3, #49	@ 0x31
 8000eca:	d9e8      	bls.n	8000e9e <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8000ecc:	7cfa      	ldrb	r2, [r7, #19]
 8000ece:	78bb      	ldrb	r3, [r7, #2]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	787a      	ldrb	r2, [r7, #1]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <enc_rdphy>:

/* Read 16-bits of PHY data. */
static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	81fb      	strh	r3, [r7, #14]

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	21d4      	movs	r1, #212	@ 0xd4
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff94 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8000f04:	2201      	movs	r2, #1
 8000f06:	21d2      	movs	r1, #210	@ 0xd2
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff8f 	bl	8000e2c <enc_wrbreg>
  udelay(12);
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff fba4 	bl	800065c <udelay>

  if(enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8000f14:	2300      	movs	r3, #0
 8000f16:	2201      	movs	r2, #1
 8000f18:	21ea      	movs	r1, #234	@ 0xea
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffaf 	bl	8000e7e <enc_waitbreg>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d016      	beq.n	8000f54 <enc_rdphy+0x6c>
  {
    enc_wrbreg(handle, ENC_MICMD, 0x00);
 8000f26:	2200      	movs	r2, #0
 8000f28:	21d2      	movs	r1, #210	@ 0xd2
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff7e 	bl	8000e2c <enc_wrbreg>
    data = (uint16_t) enc_rdbreg(handle, ENC_MIRDL);
 8000f30:	21d8      	movs	r1, #216	@ 0xd8
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff4c 	bl	8000dd0 <enc_rdbreg>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t) enc_rdbreg(handle, ENC_MIRDH) << 8;
 8000f3c:	21d9      	movs	r1, #217	@ 0xd9
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff46 	bl	8000dd0 <enc_rdbreg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	81fb      	strh	r3, [r7, #14]
  }

  return data;
 8000f54:	89fb      	ldrh	r3, [r7, #14]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <enc_wrphy>:

/* write 16-bits of PHY data. */
static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr, uint16_t phydata)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	803b      	strh	r3, [r7, #0]
  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	461a      	mov	r2, r3
 8000f72:	21d4      	movs	r1, #212	@ 0xd4
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff59 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	21d6      	movs	r1, #214	@ 0xd6
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff52 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8000f88:	883b      	ldrh	r3, [r7, #0]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	21d7      	movs	r1, #215	@ 0xd7
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff49 	bl	8000e2c <enc_wrbreg>
  udelay(12);
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f7ff fb5e 	bl	800065c <udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	21ea      	movs	r1, #234	@ 0xea
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff69 	bl	8000e7e <enc_waitbreg>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <enc_rdbuffer>:

/* Read a buffer of data. */
static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <enc_rdbuffer+0x30>)
 8000fc6:	f001 f905 	bl	80021d4 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_RBM);
 8000fca:	203a      	movs	r0, #58	@ 0x3a
 8000fcc:	f7ff fad0 	bl	8000570 <SPIx_TxRx>
  SPIx_TxBuf(NULL, buffer, buflen);
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fade 	bl	8000598 <SPIx_TxBuf>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <enc_linkstatus>:

/* The current link status can be obtained from the PHSTAT1.LLSTAT or PHSTAT2.LSTAT.*/
static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8000ff0:	2111      	movs	r1, #17
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff78 	bl	8000ee8 <enc_rdphy>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	82da      	strh	r2, [r3, #22]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fdf2 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f80d 	bl	800102e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f8ca 	bl	80011ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001018:	f000 f898 	bl	800114c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800101c:	f000 f858 	bl	80010d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /*ENC_HandleTypeDef handle;
  enc_start(&handle);
  */
  MX_LWIP_Init();
 8001020:	f004 fc50 	bl	80058c4 <MX_LWIP_Init>
  app_echoserver_init();
 8001024:	f000 fbb8 	bl	8001798 <app_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 8001028:	f004 fd7e 	bl	8005b28 <MX_LWIP_Process>
 800102c:	e7fc      	b.n	8001028 <main+0x20>

0800102e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b096      	sub	sp, #88	@ 0x58
 8001032:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2244      	movs	r2, #68	@ 0x44
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f012 ff94 	bl	8013f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001050:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001054:	f001 f8e4 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800105e:	f000 f933 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800107c:	230a      	movs	r3, #10
 800107e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001080:	2307      	movs	r3, #7
 8001082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001088:	2302      	movs	r3, #2
 800108a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f001 f91b 	bl	80022cc <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800109c:	f000 f914 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2303      	movs	r3, #3
 80010a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2104      	movs	r1, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fce3 	bl	8002a84 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c4:	f000 f900 	bl	80012c8 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3758      	adds	r7, #88	@ 0x58
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_SPI2_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_SPI2_Init+0x74>)
 80010fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001102:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_SPI2_Init+0x74>)
 8001106:	2230      	movs	r2, #48	@ 0x30
 8001108:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_SPI2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_SPI2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_SPI2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_SPI2_Init+0x74>)
 800111e:	2207      	movs	r2, #7
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_SPI2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_SPI2_Init+0x74>)
 800112a:	2208      	movs	r2, #8
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_SPI2_Init+0x74>)
 8001130:	f002 fbba 	bl	80038a8 <HAL_SPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 f8c5 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000090 	.word	0x20000090
 8001148:	40003800 	.word	0x40003800

0800114c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <MX_USART2_UART_Init+0x5c>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART2_UART_Init+0x58>)
 8001190:	f003 fd7c 	bl	8004c8c <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800119a:	f000 f895 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000f4 	.word	0x200000f4
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a28      	ldr	r2, [pc, #160]	@ (8001298 <MX_GPIO_Init+0xec>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_GPIO_Init+0xec>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_GPIO_Init+0xec>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a22      	ldr	r2, [pc, #136]	@ (8001298 <MX_GPIO_Init+0xec>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_GPIO_Init+0xec>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122a:	f000 ffd3 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2101      	movs	r1, #1
 8001232:	481a      	ldr	r0, [pc, #104]	@ (800129c <MX_GPIO_Init+0xf0>)
 8001234:	f000 ffce 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_GPIO_Init+0xf4>)
 8001250:	f000 fe16 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001254:	2320      	movs	r3, #32
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f000 fe07 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2302      	movs	r3, #2
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_GPIO_Init+0xf0>)
 800128a:	f000 fdf9 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	@ 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f000 fcbd 	bl	8001c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001000 	.word	0x40001000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_MspInit+0x4c>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_MspInit+0x4c>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_MspInit+0x4c>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
 8001312:	f000 fd8b 	bl	8001e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <HAL_SPI_MspInit+0xb4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d144      	bne.n	80013d0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001346:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134a:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6593      	str	r3, [r2, #88]	@ 0x58
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_SPI_MspInit+0xb8>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139e:	2305      	movs	r3, #5
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <HAL_SPI_MspInit+0xbc>)
 80013aa:	f000 fd69 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c0:	2305      	movs	r3, #5
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <HAL_SPI_MspInit+0xc0>)
 80013cc:	f000 fd58 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40003800 	.word	0x40003800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000400 	.word	0x48000400

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ac      	sub	sp, #176	@ 0xb0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2288      	movs	r2, #136	@ 0x88
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f012 fdae 	bl	8013f6a <memset>
  if(huart->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <HAL_UART_MspInit+0xb0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d13b      	bne.n	8001490 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fd83 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff ff4a 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_UART_MspInit+0xb4>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	4a18      	ldr	r2, [pc, #96]	@ (800149c <HAL_UART_MspInit+0xb4>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_UART_MspInit+0xb4>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <HAL_UART_MspInit+0xb4>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <HAL_UART_MspInit+0xb4>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <HAL_UART_MspInit+0xb4>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001464:	230c      	movs	r3, #12
 8001466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147c:	2307      	movs	r3, #7
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f000 fcf8 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001490:	bf00      	nop
 8001492:	37b0      	adds	r7, #176	@ 0xb0
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	@ 0x38
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_InitTick+0xe0>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <HAL_InitTick+0xe0>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <HAL_InitTick+0xe0>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c6:	f107 0210 	add.w	r2, r7, #16
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fc9b 	bl	8002e0c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014e0:	f001 fc68 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80014e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80014e6:	e004      	b.n	80014f2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014e8:	f001 fc64 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80014ec:	4603      	mov	r3, r0
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f4:	4a23      	ldr	r2, [pc, #140]	@ (8001584 <HAL_InitTick+0xe4>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	3b01      	subs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_InitTick+0xe8>)
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_InitTick+0xec>)
 8001504:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <HAL_InitTick+0xe8>)
 8001508:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800150c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800150e:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <HAL_InitTick+0xe8>)
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001512:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_InitTick+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_InitTick+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_InitTick+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <HAL_InitTick+0xe8>)
 8001528:	f003 f8ea 	bl	8004700 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001532:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001536:	2b00      	cmp	r3, #0
 8001538:	d11b      	bne.n	8001572 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800153a:	4813      	ldr	r0, [pc, #76]	@ (8001588 <HAL_InitTick+0xe8>)
 800153c:	f003 f942 	bl	80047c4 <HAL_TIM_Base_Start_IT>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001546:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800154a:	2b00      	cmp	r3, #0
 800154c:	d111      	bne.n	8001572 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154e:	2036      	movs	r0, #54	@ 0x36
 8001550:	f000 fc88 	bl	8001e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d808      	bhi.n	800156c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800155a:	2200      	movs	r2, #0
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	2036      	movs	r0, #54	@ 0x36
 8001560:	f000 fc64 	bl	8001e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_InitTick+0xf0>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e002      	b.n	8001572 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001572:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001576:	4618      	mov	r0, r3
 8001578:	3738      	adds	r7, #56	@ 0x38
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	431bde83 	.word	0x431bde83
 8001588:	2000017c 	.word	0x2000017c
 800158c:	40001000 	.word	0x40001000
 8001590:	20000004 	.word	0x20000004

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f003 f967 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000017c 	.word	0x2000017c

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <_kill+0x20>)
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20004608 	.word	0x20004608

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe5 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <_exit+0x12>

0800162a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163c:	f3af 8000 	nop.w
 8001640:	4601      	mov	r1, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <_read+0x12>
  }

  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e009      	b.n	800168a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf1      	blt.n	8001676 <_write+0x12>
  }
  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_close>:

int _close(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c4:	605a      	str	r2, [r3, #4]
  return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d205      	bcs.n	8001740 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <_sbrk+0x6c>)
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20018000 	.word	0x20018000
 8001764:	00000400 	.word	0x00000400
 8001768:	200001c8 	.word	0x200001c8
 800176c:	20004618 	.word	0x20004618
 8001770:	20004608 	.word	0x20004608

08001774 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <app_echoserver_init>:
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //send function
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //close function

/* initialize echo server */
err_t app_echoserver_init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  err_t err;
  pcb_server = tcp_new();		//allocate pcb memory
 800179e:	f008 fc9d 	bl	800a0dc <tcp_new>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <app_echoserver_init+0x80>)
 80017a6:	6013      	str	r3, [r2, #0]

  if (pcb_server == NULL)
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <app_echoserver_init+0x80>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d108      	bne.n	80017c2 <app_echoserver_init+0x2a>
  {
    //lack of memory
    memp_free(MEMP_TCP_PCB, pcb_server);
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <app_echoserver_init+0x80>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	2001      	movs	r0, #1
 80017b8:	f005 fe6a 	bl	8007490 <memp_free>
    return ERR_MEM;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	e025      	b.n	800180e <app_echoserver_init+0x76>
  }

  err = tcp_bind(pcb_server, IP_ADDR_ANY, ECHO_SERVER_LISTEN_PORT); //bind to port 7
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <app_echoserver_init+0x80>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2207      	movs	r2, #7
 80017c8:	4914      	ldr	r1, [pc, #80]	@ (800181c <app_echoserver_init+0x84>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 fbe0 	bl	8008f90 <tcp_bind>
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  if (err != ERR_OK)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <app_echoserver_init+0x56>
  {
    //fail to bind
    memp_free(MEMP_TCP_PCB, pcb_server);
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <app_echoserver_init+0x80>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2001      	movs	r0, #1
 80017e4:	f005 fe54 	bl	8007490 <memp_free>
    return err;
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	e00f      	b.n	800180e <app_echoserver_init+0x76>
  }

  pcb_server = tcp_listen(pcb_server);	//listen
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <app_echoserver_init+0x80>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	21ff      	movs	r1, #255	@ 0xff
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 fc83 	bl	8009100 <tcp_listen_with_backlog>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <app_echoserver_init+0x80>)
 80017fe:	6013      	str	r3, [r2, #0]
  tcp_accept(pcb_server, app_callback_accepted);	//register accept callback
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <app_echoserver_init+0x80>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4906      	ldr	r1, [pc, #24]	@ (8001820 <app_echoserver_init+0x88>)
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fce8 	bl	800a1dc <tcp_accept>

  return ERR_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001cc 	.word	0x200001cc
 800181c:	08017c84 	.word	0x08017c84
 8001820:	08001825 	.word	0x08001825

08001824 <app_callback_accepted>:

/* accept callback */
static err_t app_callback_accepted(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	4613      	mov	r3, r2
 8001830:	71fb      	strb	r3, [r7, #7]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(arg); //remove warning
  LWIP_UNUSED_ARG(err);

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb
 8001832:	2140      	movs	r1, #64	@ 0x40
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f008 fa5f 	bl	8009cf8 <tcp_setprio>

  es = (struct tcp_echoserver_struct*)
      mem_malloc(sizeof(struct tcp_echoserver_struct)); //allocate tcp_echoserver_struct
 800183a:	200c      	movs	r0, #12
 800183c:	f005 fc6e 	bl	800711c <mem_malloc>
 8001840:	6178      	str	r0, [r7, #20]

  if (es == NULL) //lack of memory
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d106      	bne.n	8001856 <app_callback_accepted+0x32>
  {
    app_close_connection(pcb_new, es); //close connection
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	68b8      	ldr	r0, [r7, #8]
 800184c:	f000 f980 	bl	8001b50 <app_close_connection>
    return ERR_MEM;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
 8001854:	e01d      	b.n	8001892 <app_callback_accepted+0x6e>
  }

  es->state = ES_ACCEPTED; //accepted
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
  es->pcb = pcb_new; //set pcb pointer
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]
  es->retries = 0; //clear counter
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	705a      	strb	r2, [r3, #1]
  es->p = NULL; //clear buffer pointer
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]

  tcp_arg(pcb_new, es);		//send es structure as an argument
 800186e:	6979      	ldr	r1, [r7, #20]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f008 fc3b 	bl	800a0ec <tcp_arg>
  tcp_recv(pcb_new, app_callback_received);	//register receive callback
 8001876:	4909      	ldr	r1, [pc, #36]	@ (800189c <app_callback_accepted+0x78>)
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f008 fc49 	bl	800a110 <tcp_recv>
  tcp_err(pcb_new, app_callback_error); //register error callback
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <app_callback_accepted+0x7c>)
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f008 fc89 	bl	800a198 <tcp_err>
  tcp_poll(pcb_new, app_callback_poll, 0); //register poll callback
 8001886:	2200      	movs	r2, #0
 8001888:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <app_callback_accepted+0x80>)
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f008 fcbe 	bl	800a20c <tcp_poll>

  return ERR_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	080018a9 	.word	0x080018a9
 80018a0:	080019dd 	.word	0x080019dd
 80018a4:	08001a01 	.word	0x08001a01

080018a8 <app_callback_received>:

/* receive callback */
static err_t app_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL", arg != NULL); //check argument
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <app_callback_received+0x20>
 80018bc:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <app_callback_received+0x124>)
 80018be:	2258      	movs	r2, #88	@ 0x58
 80018c0:	4943      	ldr	r1, [pc, #268]	@ (80019d0 <app_callback_received+0x128>)
 80018c2:	4844      	ldr	r0, [pc, #272]	@ (80019d4 <app_callback_received+0x12c>)
 80018c4:	f012 faec 	bl	8013ea0 <iprintf>
  es = (struct tcp_echoserver_struct*) arg;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	61bb      	str	r3, [r7, #24]

  if (p == NULL) //callback is called but there's no data
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <app_callback_received+0x58>
  {
    es->state = ES_CLOSING;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2203      	movs	r2, #3
 80018d6:	701a      	strb	r2, [r3, #0]
    if (es->p == NULL)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <app_callback_received+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 80018e0:	69b9      	ldr	r1, [r7, #24]
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	f000 f934 	bl	8001b50 <app_close_connection>
 80018e8:	e007      	b.n	80018fa <app_callback_received+0x52>
    }
    else //if there's remained data to send
    {
      tcp_sent(tpcb, app_callback_sent); //register send callback
 80018ea:	493b      	ldr	r1, [pc, #236]	@ (80019d8 <app_callback_received+0x130>)
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f008 fc31 	bl	800a154 <tcp_sent>
      app_send_data(tpcb, es); //send remained data
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	f000 f8d7 	bl	8001aa8 <app_send_data>
    }
    ret_err = ERR_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	77fb      	strb	r3, [r7, #31]
 80018fe:	e05f      	b.n	80019c0 <app_callback_received+0x118>
  }
  else if (err != ERR_OK) //error when receiving
 8001900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <app_callback_received+0x78>
  {
    if (p != NULL) //buffer is not empty
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <app_callback_received+0x72>
    {
      es->p = NULL;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
      pbuf_free(p); //clear buffer
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f006 fc3d 	bl	8008194 <pbuf_free>
    }
    ret_err = err;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	e04f      	b.n	80019c0 <app_callback_received+0x118>
  }
  else if (es->state == ES_ACCEPTED) //first data receiving
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d110      	bne.n	800194a <app_callback_received+0xa2>
  {
    es->state = ES_RECEIVED; //change state
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
    es->p = p; //set buffer pointer
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001934:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <app_callback_received+0x130>)
 8001936:	68b8      	ldr	r0, [r7, #8]
 8001938:	f008 fc0c 	bl	800a154 <tcp_sent>
    app_send_data(tpcb, es); //send data via es->p
 800193c:	69b9      	ldr	r1, [r7, #24]
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f000 f8b2 	bl	8001aa8 <app_send_data>
    ret_err = ERR_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]
 8001948:	e03a      	b.n	80019c0 <app_callback_received+0x118>
  }
  else if (es->state == ES_RECEIVED) //additional data receiving
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d115      	bne.n	800197e <app_callback_received+0xd6>
  {
    if (es->p == NULL) //no data to send
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <app_callback_received+0xc2>
    {
      es->p = p; //set buffer pointer
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
      app_send_data(tpcb, es); //send data
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f000 f8a0 	bl	8001aa8 <app_send_data>
 8001968:	e006      	b.n	8001978 <app_callback_received+0xd0>
    }
    else //buffer is not empty, there's data to send
    {
      struct pbuf *ptr = es->p; //head buffer
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr, p);	//append tail buffer to the head, this buffer will be handled by poll callback
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f006 fd26 	bl	80083c4 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]
 800197c:	e020      	b.n	80019c0 <app_callback_received+0x118>
  }
  else if (es->state == ES_CLOSING) //receiving data when connection is closing
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d10e      	bne.n	80019a4 <app_callback_received+0xfc>
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	891b      	ldrh	r3, [r3, #8]
 800198a:	4619      	mov	r1, r3
 800198c:	68b8      	ldr	r0, [r7, #8]
 800198e:	f007 fccd 	bl	800932c <tcp_recved>
    es->p = NULL;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f006 fbfb 	bl	8008194 <pbuf_free>
    ret_err = ERR_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	77fb      	strb	r3, [r7, #31]
 80019a2:	e00d      	b.n	80019c0 <app_callback_received+0x118>
  }
  else //undefined condition
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	891b      	ldrh	r3, [r3, #8]
 80019a8:	4619      	mov	r1, r3
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f007 fcbe 	bl	800932c <tcp_recved>
    es->p = NULL;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f006 fbec 	bl	8008194 <pbuf_free>
    ret_err = ERR_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80019c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08014ccc 	.word	0x08014ccc
 80019d0:	08014ce4 	.word	0x08014ce4
 80019d4:	08014cf0 	.word	0x08014cf0
 80019d8:	08001a59 	.word	0x08001a59

080019dc <app_callback_error>:

/* error callback */
static void app_callback_error(void *arg, err_t err)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct*) arg;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <app_callback_error+0x1c>
  {
    mem_free(es);	//free es structure
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f005 fa2c 	bl	8006e50 <mem_free>
  }

  //HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //turn on blue LED when there's error.
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <app_callback_poll>:

/* poll callback */
static err_t app_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  struct tcp_echoserver_struct *es;
  es = (struct tcp_echoserver_struct*) arg;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  if (es == NULL) //if there's no es structure
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <app_callback_poll+0x20>
  {
    tcp_abort(tpcb); //abort connection
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f007 faaf 	bl	8008f78 <tcp_abort>
    return ERR_ABRT;
 8001a1a:	f06f 030c 	mvn.w	r3, #12
 8001a1e:	e015      	b.n	8001a4c <app_callback_poll+0x4c>
  }

  if (es->p != NULL) //if there's data to send
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <app_callback_poll+0x3a>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001a28:	490a      	ldr	r1, [pc, #40]	@ (8001a54 <app_callback_poll+0x54>)
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f008 fb92 	bl	800a154 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f000 f838 	bl	8001aa8 <app_send_data>
 8001a38:	e007      	b.n	8001a4a <app_callback_poll+0x4a>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d103      	bne.n	8001a4a <app_callback_poll+0x4a>
    {
      app_close_connection(tpcb, es);		//close connection
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f000 f883 	bl	8001b50 <app_close_connection>
    }
  }

  return ERR_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	08001a59 	.word	0x08001a59

08001a58 <app_callback_sent>:

/* send callback */
static err_t app_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct*) arg;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	705a      	strb	r2, [r3, #1]

  if (es->p != NULL) //if there's data to send
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <app_callback_sent+0x32>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001a78:	490a      	ldr	r1, [pc, #40]	@ (8001aa4 <app_callback_sent+0x4c>)
 8001a7a:	68b8      	ldr	r0, [r7, #8]
 8001a7c:	f008 fb6a 	bl	800a154 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001a80:	6979      	ldr	r1, [r7, #20]
 8001a82:	68b8      	ldr	r0, [r7, #8]
 8001a84:	f000 f810 	bl	8001aa8 <app_send_data>
 8001a88:	e007      	b.n	8001a9a <app_callback_sent+0x42>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d103      	bne.n	8001a9a <app_callback_sent+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f000 f85b 	bl	8001b50 <app_close_connection>
    }
  }
  return ERR_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	08001a59 	.word	0x08001a59

08001aa8 <app_send_data>:

/* send data */
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]

  // while no error, data to send, data size is smaller than the size of the send buffer
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001ab6:	e037      	b.n	8001b28 <app_send_data+0x80>
      && (es->p->len <= tcp_sndbuf(tpcb)))
  {
    ptr = es->p;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, TCP_WRITE_FLAG_COPY); //send data
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	895a      	ldrh	r2, [r3, #10]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f00b fa5f 	bl	800cf8c <tcp_write>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d11d      	bne.n	8001b16 <app_send_data+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	895b      	ldrh	r3, [r3, #10]
 8001ade:	81fb      	strh	r3, [r7, #14]
      es->p = ptr->next;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	609a      	str	r2, [r3, #8]

      if (es->p != NULL) //there's chained buffer to send
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <app_send_data+0x52>
      {
        pbuf_ref(es->p);	//increase reference counter
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 fbed 	bl	80082d4 <pbuf_ref>
      }

      do
      {
        freed = pbuf_free(ptr);		//free old buffer
 8001afa:	6938      	ldr	r0, [r7, #16]
 8001afc:	f006 fb4a 	bl	8008194 <pbuf_free>
 8001b00:	4603      	mov	r3, r0
 8001b02:	737b      	strb	r3, [r7, #13]
      }
      while (freed == 0);
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f7      	beq.n	8001afa <app_send_data+0x52>

      tcp_recved(tpcb, plen);			//advertise window size
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f007 fc0c 	bl	800932c <tcp_recved>
 8001b14:	e008      	b.n	8001b28 <app_send_data+0x80>
    }
    else
    {
      es->p = ptr;  //fail to send, recover buffer pointer
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
      es->retries++;  //increase counter
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	705a      	strb	r2, [r3, #1]
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <app_send_data+0xa0>
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <app_send_data+0xa0>
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	895a      	ldrh	r2, [r3, #10]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d9b7      	bls.n	8001ab8 <app_send_data+0x10>
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <app_close_connection>:

/* close connection */
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* clear callback functions */
  tcp_arg(tpcb, NULL);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f008 fac5 	bl	800a0ec <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f008 faf5 	bl	800a154 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f008 facf 	bl	800a110 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001b72:	2100      	movs	r1, #0
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f008 fb0f 	bl	800a198 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f008 fb44 	bl	800a20c <tcp_poll>

  if (es != NULL)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <app_close_connection+0x40>
  {
    mem_free(es);		//free es structure
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f005 f960 	bl	8006e50 <mem_free>
  }

  tcp_close(tpcb);		//close connection
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f007 f907 	bl	8008da4 <tcp_close>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba4:	f7ff fde6 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f012 fa1b 	bl	8014008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd2:	f7ff fa19 	bl	8001008 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001be4:	08017d88 	.word	0x08017d88
  ldr r2, =_sbss
 8001be8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001bec:	20004618 	.word	0x20004618

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_Init+0x3c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_Init+0x3c>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	f000 f903 	bl	8001e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c10:	200f      	movs	r0, #15
 8001c12:	f7ff fc45 	bl	80014a0 <HAL_InitTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	e001      	b.n	8001c26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c22:	f7ff fb57 	bl	80012d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	200001d0 	.word	0x200001d0

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200001d0 	.word	0x200001d0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff4c 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff61 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb1 	bl	8001db0 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff80 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff54 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e17f      	b.n	8002190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8171 	beq.w	800218a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x40>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d118      	bne.n	8001f60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	6939      	ldr	r1, [r7, #16]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80ac 	beq.w	800218a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6613      	str	r3, [r2, #96]	@ 0x60
 800203e:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204a:	4a5a      	ldr	r2, [pc, #360]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x242>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	@ (80021b8 <HAL_GPIO_Init+0x338>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x23e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4e      	ldr	r2, [pc, #312]	@ (80021bc <HAL_GPIO_Init+0x33c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x23a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4d      	ldr	r2, [pc, #308]	@ (80021c0 <HAL_GPIO_Init+0x340>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x236>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4c      	ldr	r2, [pc, #304]	@ (80021c4 <HAL_GPIO_Init+0x344>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x232>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4b      	ldr	r2, [pc, #300]	@ (80021c8 <HAL_GPIO_Init+0x348>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4a      	ldr	r2, [pc, #296]	@ (80021cc <HAL_GPIO_Init+0x34c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x22a>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020c2:	2300      	movs	r3, #0
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d4:	4937      	ldr	r1, [pc, #220]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002106:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800210c:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002136:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800215a:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002184:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f ae78 	bne.w	8001e90 <HAL_GPIO_Init+0x10>
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	48001000 	.word	0x48001000
 80021c8:	48001400 	.word	0x48001400
 80021cc:	48001800 	.word	0x48001800
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	@ 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3ca      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4b97      	ldr	r3, [pc, #604]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e8:	4b94      	ldr	r3, [pc, #592]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f040 808b 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8087 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002316:	4b89      	ldr	r3, [pc, #548]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3a2      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_RCC_OscConfig+0x7c>
 800233e:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002346:	e005      	b.n	8002354 <HAL_RCC_OscConfig+0x88>
 8002348:	4b7c      	ldr	r3, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002354:	4293      	cmp	r3, r2
 8002356:	d223      	bcs.n	80023a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd87 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e383      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4b73      	ldr	r3, [pc, #460]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a72      	ldr	r2, [pc, #456]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b70      	ldr	r3, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	496d      	ldr	r1, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238a:	4b6c      	ldr	r3, [pc, #432]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4968      	ldr	r1, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
 800239e:	e025      	b.n	80023ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4960      	ldr	r1, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b5f      	ldr	r3, [pc, #380]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	495b      	ldr	r1, [pc, #364]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fd47 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e343      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ec:	f000 fc4a 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	4950      	ldr	r1, [pc, #320]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <HAL_RCC_OscConfig+0x278>)
 800240a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800240c:	4b4e      	ldr	r3, [pc, #312]	@ (8002548 <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f845 	bl	80014a0 <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d052      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	e327      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d032      	beq.n	8002492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a42      	ldr	r2, [pc, #264]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002438:	f7ff fc10 	bl	8001c5c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002440:	f7ff fc0c 	bl	8001c5c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e310      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b37      	ldr	r3, [pc, #220]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a36      	ldr	r2, [pc, #216]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4931      	ldr	r1, [pc, #196]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	492c      	ldr	r1, [pc, #176]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e01a      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a29      	ldr	r2, [pc, #164]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249e:	f7ff fbdd 	bl	8001c5c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a6:	f7ff fbd9 	bl	8001c5c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2dd      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b8:	4b20      	ldr	r3, [pc, #128]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1da>
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d074      	beq.n	80025be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x21a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d10e      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d064      	beq.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e2ba      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x24a>
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e026      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x280>
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a02      	ldr	r2, [pc, #8]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x298>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	08017b54 	.word	0x08017b54
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004
 800254c:	4ba0      	ldr	r3, [pc, #640]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a9f      	ldr	r2, [pc, #636]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b9d      	ldr	r3, [pc, #628]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a9c      	ldr	r2, [pc, #624]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fb76 	bl	8001c5c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff fb72 	bl	8001c5c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e276      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4b92      	ldr	r3, [pc, #584]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fb62 	bl	8001c5c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fb5e 	bl	8001c5c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e262      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x2d0>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x310>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d119      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d116      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x328>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e23f      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b76      	ldr	r3, [pc, #472]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4973      	ldr	r1, [pc, #460]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e040      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002612:	4b6f      	ldr	r3, [pc, #444]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6e      	ldr	r2, [pc, #440]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fb1d 	bl	8001c5c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fb19 	bl	8001c5c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e21d      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b65      	ldr	r3, [pc, #404]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b62      	ldr	r3, [pc, #392]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	495f      	ldr	r1, [pc, #380]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b5d      	ldr	r3, [pc, #372]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5c      	ldr	r2, [pc, #368]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff faf9 	bl	8001c5c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7ff faf5 	bl	8001c5c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1f9      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	4a4a      	ldr	r2, [pc, #296]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff fad4 	bl	8001c5c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7ff fad0 	bl	8001c5c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1d4      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e0:	4a3b      	ldr	r2, [pc, #236]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fab7 	bl	8001c5c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff fab3 	bl	8001c5c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1b7      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a26      	ldr	r2, [pc, #152]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7ff fa7a 	bl	8001c5c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7ff fa76 	bl	8001c5c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e17a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_OscConfig+0x508>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d8>
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a2:	e029      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_OscConfig+0x50c>
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a03      	ldr	r2, [pc, #12]	@ (80027d0 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x52c>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a9b      	ldr	r2, [pc, #620]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e8:	4b98      	ldr	r3, [pc, #608]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a97      	ldr	r2, [pc, #604]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7ff fa2c 	bl	8001c5c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7ff fa28 	bl	8001c5c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e12a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ed      	beq.n	8002808 <HAL_RCC_OscConfig+0x53c>
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7ff fa15 	bl	8001c5c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7ff fa11 	bl	8001c5c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e113      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ed      	bne.n	8002836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b7a      	ldr	r3, [pc, #488]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	4a79      	ldr	r2, [pc, #484]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80fe 	beq.w	8002a72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 80d0 	bne.w	8002a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002880:	4b72      	ldr	r3, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d130      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	3b01      	subs	r3, #1
 80028a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d127      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c0:	2a07      	cmp	r2, #7
 80028c2:	bf14      	ite	ne
 80028c4:	2201      	movne	r2, #1
 80028c6:	2200      	moveq	r2, #0
 80028c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d06e      	beq.n	80029d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d069      	beq.n	80029d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002908:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0ad      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7ff f99a 	bl	8001c5c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f996 	bl	8001c5c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e09a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b40      	ldr	r3, [pc, #256]	@ (8002a50 <HAL_RCC_OscConfig+0x784>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800295a:	3a01      	subs	r2, #1
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800296c:	0852      	lsrs	r2, r2, #1
 800296e:	3a01      	subs	r2, #1
 8002970:	0552      	lsls	r2, r2, #21
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0652      	lsls	r2, r2, #25
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002984:	0912      	lsrs	r2, r2, #4
 8002986:	0452      	lsls	r2, r2, #17
 8002988:	430a      	orrs	r2, r1
 800298a:	4930      	ldr	r1, [pc, #192]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2d      	ldr	r2, [pc, #180]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a8:	f7ff f958 	bl	8001c5c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f954 	bl	8001c5c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e058      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ce:	e050      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e04f      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d148      	bne.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f8:	f7ff f930 	bl	8001c5c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7ff f92c 	bl	8001c5c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e030      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x734>
 8002a1e:	e028      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d023      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <HAL_RCC_OscConfig+0x780>)
 8002a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7ff f913 	bl	8001c5c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	e00c      	b.n	8002a54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7ff f90f 	bl	8001c5c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d905      	bls.n	8002a54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ec      	bne.n	8002a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4905      	ldr	r1, [pc, #20]	@ (8002a7c <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_OscConfig+0x7b4>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
 8002a6c:	e001      	b.n	8002a72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	feeefffc 	.word	0xfeeefffc

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0e7      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b75      	ldr	r3, [pc, #468]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b72      	ldr	r3, [pc, #456]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4970      	ldr	r1, [pc, #448]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cf      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d908      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4960      	ldr	r1, [pc, #384]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04c      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d121      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0a6      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b54      	ldr	r3, [pc, #336]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e09a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08e      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e086      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b46      	ldr	r3, [pc, #280]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4943      	ldr	r1, [pc, #268]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7ff f876 	bl	8001c5c <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7ff f872 	bl	8001c5c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e06e      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d208      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	492b      	ldr	r1, [pc, #172]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bca:	4b29      	ldr	r3, [pc, #164]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d210      	bcs.n	8002bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4923      	ldr	r1, [pc, #140]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be8:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCC_ClockConfig+0x1ec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e036      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4918      	ldr	r1, [pc, #96]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4910      	ldr	r1, [pc, #64]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c38:	f000 f824 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	490b      	ldr	r1, [pc, #44]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f4>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fc1f 	bl	80014a0 <HAL_InitTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08017b54 	.word	0x08017b54
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c92:	4b3e      	ldr	r3, [pc, #248]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d121      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d11e      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb8:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc4:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e004      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d08:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d134      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d003      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xac>
 8002d28:	e005      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d2c:	617b      	str	r3, [r7, #20]
      break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d32:	617b      	str	r3, [r7, #20]
      break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	617b      	str	r3, [r7, #20]
      break;
 8002d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	fb03 f202 	mul.w	r2, r3, r2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	0e5b      	lsrs	r3, r3, #25
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08017b6c 	.word	0x08017b6c
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08017b64 	.word	0x08017b64

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de4:	f7ff ffda 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08017b64 	.word	0x08017b64

08002e0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	220f      	movs	r2, #15
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_RCC_GetClockConfig+0x5c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_RCC_GetClockConfig+0x5c>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_RCC_GetClockConfig+0x60>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40022000 	.word	0x40022000

08002e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e88:	f7ff f9bc 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	e014      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9ac 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d10b      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d919      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e013      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e010      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d902      	bls.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e00a      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	@ 0x80
 8002eea:	d102      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e004      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b70      	cmp	r3, #112	@ 0x70
 8002ef6:	d101      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d041      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f54:	d02a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f66:	d81e      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f70:	d010      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f72:	e018      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f74:	4b86      	ldr	r3, [pc, #536]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a85      	ldr	r2, [pc, #532]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f80:	e015      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fabb 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f92:	e00c      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3320      	adds	r3, #32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fba6 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa4:	e003      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb4:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc2:	4973      	ldr	r1, [pc, #460]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fca:	e001      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d041      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe4:	d02a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fe6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fea:	d824      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a61      	ldr	r2, [pc, #388]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa73 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb5e 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003044:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003052:	494f      	ldr	r1, [pc, #316]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	4a40      	ldr	r2, [pc, #256]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	@ 0x58
 8003094:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fdd4 	bl	8001c5c <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fdd0 	bl	8001c5c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	4a20      	ldr	r2, [pc, #128]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fd8f 	bl	8001c5c <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fd8b 	bl	8001c5c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317e:	4904      	ldr	r1, [pc, #16]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7c7b      	ldrb	r3, [r7, #17]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b9e      	ldr	r3, [pc, #632]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	4a9d      	ldr	r2, [pc, #628]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ba:	4b98      	ldr	r3, [pc, #608]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	4994      	ldr	r1, [pc, #592]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031dc:	4b8f      	ldr	r3, [pc, #572]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f023 020c 	bic.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ea:	498c      	ldr	r1, [pc, #560]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fe:	4b87      	ldr	r3, [pc, #540]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4983      	ldr	r1, [pc, #524]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003220:	4b7e      	ldr	r3, [pc, #504]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	497b      	ldr	r1, [pc, #492]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003242:	4b76      	ldr	r3, [pc, #472]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003250:	4972      	ldr	r1, [pc, #456]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003264:	4b6d      	ldr	r3, [pc, #436]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	496a      	ldr	r1, [pc, #424]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003286:	4b65      	ldr	r3, [pc, #404]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	4961      	ldr	r1, [pc, #388]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	4959      	ldr	r1, [pc, #356]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ca:	4b54      	ldr	r3, [pc, #336]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d8:	4950      	ldr	r1, [pc, #320]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ec:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	4948      	ldr	r1, [pc, #288]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330e:	4b43      	ldr	r3, [pc, #268]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	493f      	ldr	r1, [pc, #252]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d028      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003330:	4b3a      	ldr	r3, [pc, #232]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333e:	4937      	ldr	r1, [pc, #220]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800334e:	d106      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b32      	ldr	r3, [pc, #200]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a31      	ldr	r2, [pc, #196]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003362:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f8c8 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338e:	4b23      	ldr	r3, [pc, #140]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	491f      	ldr	r1, [pc, #124]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ae:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e011      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f899 	bl	8003504 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fa:	4908      	ldr	r1, [pc, #32]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a02      	ldr	r2, [pc, #8]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e014      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f867 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345e:	4928      	ldr	r1, [pc, #160]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800346a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800346e:	d10d      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f844 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3320      	adds	r3, #32
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f925 	bl	80036ec <RCCEx_PLLSAI2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034bc:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ca:	490d      	ldr	r1, [pc, #52]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ee:	4904      	ldr	r1, [pc, #16]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003512:	4b75      	ldr	r3, [pc, #468]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800351e:	4b72      	ldr	r3, [pc, #456]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
       ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003536:	4b6c      	ldr	r3, [pc, #432]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
       ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d047      	beq.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e044      	b.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d018      	beq.n	800358a <RCCEx_PLLSAI1_Config+0x86>
 8003558:	2b03      	cmp	r3, #3
 800355a:	d825      	bhi.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x62>
 8003560:	2b02      	cmp	r3, #2
 8003562:	d009      	beq.n	8003578 <RCCEx_PLLSAI1_Config+0x74>
 8003564:	e020      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003566:	4b60      	ldr	r3, [pc, #384]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11d      	bne.n	80035ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003576:	e01a      	b.n	80035ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003578:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e013      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800358a:	4b57      	ldr	r3, [pc, #348]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003596:	4b54      	ldr	r3, [pc, #336]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a6:	e006      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e004      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035be:	4b4a      	ldr	r3, [pc, #296]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	430b      	orrs	r3, r1
 80035d4:	4944      	ldr	r1, [pc, #272]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d17d      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035e0:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fe fb36 	bl	8001c5c <HAL_GetTick>
 80035f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035f2:	e009      	b.n	8003608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f4:	f7fe fb32 	bl	8001c5c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d902      	bls.n	8003608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	73fb      	strb	r3, [r7, #15]
        break;
 8003606:	e005      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003608:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ef      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d160      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6892      	ldr	r2, [r2, #8]
 8003630:	0211      	lsls	r1, r2, #8
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	0912      	lsrs	r2, r2, #4
 8003638:	0452      	lsls	r2, r2, #17
 800363a:	430a      	orrs	r2, r1
 800363c:	492a      	ldr	r1, [pc, #168]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	610b      	str	r3, [r1, #16]
 8003642:	e027      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d112      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003652:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	0211      	lsls	r1, r2, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6912      	ldr	r2, [r2, #16]
 8003660:	0852      	lsrs	r2, r2, #1
 8003662:	3a01      	subs	r2, #1
 8003664:	0552      	lsls	r2, r2, #21
 8003666:	430a      	orrs	r2, r1
 8003668:	491f      	ldr	r1, [pc, #124]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	610b      	str	r3, [r1, #16]
 800366e:	e011      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003678:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	0211      	lsls	r1, r2, #8
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6952      	ldr	r2, [r2, #20]
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0652      	lsls	r2, r2, #25
 800368c:	430a      	orrs	r2, r1
 800368e:	4916      	ldr	r1, [pc, #88]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003694:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800369e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fadc 	bl	8001c5c <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a6:	e009      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a8:	f7fe fad8 	bl	8001c5c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d902      	bls.n	80036bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	73fb      	strb	r3, [r7, #15]
          break;
 80036ba:	e005      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036bc:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036fa:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003706:	4b67      	ldr	r3, [pc, #412]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d10d      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
       ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800371e:	4b61      	ldr	r3, [pc, #388]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
       ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d047      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e044      	b.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d018      	beq.n	8003772 <RCCEx_PLLSAI2_Config+0x86>
 8003740:	2b03      	cmp	r3, #3
 8003742:	d825      	bhi.n	8003790 <RCCEx_PLLSAI2_Config+0xa4>
 8003744:	2b01      	cmp	r3, #1
 8003746:	d002      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x62>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d009      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x74>
 800374c:	e020      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800374e:	4b55      	ldr	r3, [pc, #340]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11d      	bne.n	8003796 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e01a      	b.n	8003796 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e013      	b.n	800379a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003772:	4b4c      	ldr	r3, [pc, #304]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800377e:	4b49      	ldr	r3, [pc, #292]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800378e:	e006      	b.n	800379e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e004      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800379e:	bf00      	nop
    }

    if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a6:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	430b      	orrs	r3, r1
 80037bc:	4939      	ldr	r1, [pc, #228]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d167      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037c8:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe fa42 	bl	8001c5c <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037dc:	f7fe fa3e 	bl	8001c5c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
        break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ef      	bne.n	80037dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d14a      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	0912      	lsrs	r2, r2, #4
 8003820:	0452      	lsls	r2, r2, #17
 8003822:	430a      	orrs	r2, r1
 8003824:	491f      	ldr	r1, [pc, #124]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	614b      	str	r3, [r1, #20]
 800382a:	e011      	b.n	8003850 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800382c:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003834:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	0211      	lsls	r1, r2, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6912      	ldr	r2, [r2, #16]
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0652      	lsls	r2, r2, #25
 8003848:	430a      	orrs	r2, r1
 800384a:	4916      	ldr	r1, [pc, #88]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003850:	4b14      	ldr	r3, [pc, #80]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe f9fe 	bl	8001c5c <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003864:	f7fe f9fa 	bl	8001c5c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
          break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003878:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4904      	ldr	r1, [pc, #16]	@ (80038a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e095      	b.n	80039e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ca:	d009      	beq.n	80038e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
 80038d2:	e005      	b.n	80038e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fd12 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003916:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003920:	d902      	bls.n	8003928 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e002      	b.n	800392e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800392c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003936:	d007      	beq.n	8003948 <HAL_SPI_Init+0xa0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003940:	d002      	beq.n	8003948 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398a:	ea42 0103 	orr.w	r1, r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0204 	and.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039c4:	ea42 0103 	orr.w	r1, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b088      	sub	sp, #32
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039fe:	f7fe f92d 	bl	8001c5c <HAL_GetTick>
 8003a02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	e15c      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_SPI_Transmit+0x36>
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e154      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_SPI_Transmit+0x48>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e14d      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a88:	d10f      	bne.n	8003aaa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b40      	cmp	r3, #64	@ 0x40
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ad0:	d952      	bls.n	8003b78 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Transmit+0xf2>
 8003ada:	8b7b      	ldrh	r3, [r7, #26]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d145      	bne.n	8003b6c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b04:	e032      	b.n	8003b6c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d112      	bne.n	8003b3a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	1c9a      	adds	r2, r3, #2
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b38:	e018      	b.n	8003b6c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fe f88f 	bl	8001c5c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_Transmit+0x164>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_Transmit+0x16a>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0b2      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1c7      	bne.n	8003b06 <HAL_SPI_Transmit+0x118>
 8003b76:	e083      	b.n	8003c80 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Transmit+0x198>
 8003b80:	8b7b      	ldrh	r3, [r7, #26]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d177      	bne.n	8003c76 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d912      	bls.n	8003bb6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b02      	subs	r3, #2
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bb4:	e05f      	b.n	8003c76 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bdc:	e04b      	b.n	8003c76 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d12b      	bne.n	8003c44 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d912      	bls.n	8003c1c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	1c9a      	adds	r2, r3, #2
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b02      	subs	r3, #2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c1a:	e02c      	b.n	8003c76 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c42:	e018      	b.n	8003c76 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c44:	f7fe f80a 	bl	8001c5c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d803      	bhi.n	8003c5c <HAL_SPI_Transmit+0x26e>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Transmit+0x274>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e02d      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ae      	bne.n	8003bde <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	6839      	ldr	r1, [r7, #0]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fcf5 	bl	8004674 <SPI_EndRxTxTransaction>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e123      	b.n	8003f42 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d02:	d112      	bne.n	8003d2a <HAL_SPI_Receive+0x50>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10e      	bne.n	8003d2a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f912 	bl	8003f4a <HAL_SPI_TransmitReceive>
 8003d26:	4603      	mov	r3, r0
 8003d28:	e10b      	b.n	8003f42 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d2a:	f7fd ff97 	bl	8001c5c <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Receive+0x62>
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e100      	b.n	8003f42 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Receive+0x74>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e0f9      	b.n	8003f42 <HAL_SPI_Receive+0x268>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003da0:	d908      	bls.n	8003db4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	e007      	b.n	8003dc4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dcc:	d10f      	bne.n	8003dee <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d007      	beq.n	8003e0c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e14:	d875      	bhi.n	8003f02 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e16:	e037      	b.n	8003e88 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d117      	bne.n	8003e56 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f103 020c 	add.w	r2, r3, #12
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003e54:	e018      	b.n	8003e88 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e56:	f7fd ff01 	bl	8001c5c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d803      	bhi.n	8003e6e <HAL_SPI_Receive+0x194>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_Receive+0x19a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e05c      	b.n	8003f42 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1c1      	bne.n	8003e18 <HAL_SPI_Receive+0x13e>
 8003e94:	e03b      	b.n	8003f0e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003ece:	e018      	b.n	8003f02 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed0:	f7fd fec4 	bl	8001c5c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d803      	bhi.n	8003ee8 <HAL_SPI_Receive+0x20e>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_Receive+0x214>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e01f      	b.n	8003f42 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1c3      	bne.n	8003e96 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fb56 	bl	80045c4 <SPI_EndRxTransaction>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08a      	sub	sp, #40	@ 0x28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fe7e 	bl	8001c5c <HAL_GetTick>
 8003f60:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f68:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f78:	7ffb      	ldrb	r3, [r7, #31]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d00c      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x4e>
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f84:	d106      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x4a>
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d001      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	e1f3      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x60>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x60>
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1e8      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x72>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e1e1      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d003      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800401a:	d802      	bhi.n	8004022 <HAL_SPI_TransmitReceive+0xd8>
 800401c:	8abb      	ldrh	r3, [r7, #20]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d908      	bls.n	8004034 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e007      	b.n	8004044 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	d007      	beq.n	8004062 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800406a:	f240 8083 	bls.w	8004174 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_SPI_TransmitReceive+0x132>
 8004076:	8afb      	ldrh	r3, [r7, #22]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d16f      	bne.n	800415c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a0:	e05c      	b.n	800415c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d11b      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x19e>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x19e>
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d113      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d11c      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x1e6>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	b292      	uxth	r2, r2
 800410e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800412c:	2301      	movs	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004130:	f7fd fd94 	bl	8001c5c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413c:	429a      	cmp	r2, r3
 800413e:	d80d      	bhi.n	800415c <HAL_SPI_TransmitReceive+0x212>
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d009      	beq.n	800415c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e111      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d19d      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x158>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d197      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x158>
 8004172:	e0e5      	b.n	8004340 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x23a>
 800417c:	8afb      	ldrh	r3, [r7, #22]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80d1 	bne.w	8004326 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d912      	bls.n	80041b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b02      	subs	r3, #2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041b2:	e0b8      	b.n	8004326 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041da:	e0a4      	b.n	8004326 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d134      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02f      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d12c      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d912      	bls.n	800422a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b02      	subs	r3, #2
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004228:	e012      	b.n	8004250 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d148      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x3aa>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d042      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d923      	bls.n	80042c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b02      	subs	r3, #2
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d81f      	bhi.n	80042f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	e016      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f103 020c 	add.w	r2, r3, #12
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042f0:	2301      	movs	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042f4:	f7fd fcb2 	bl	8001c5c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004300:	429a      	cmp	r2, r3
 8004302:	d803      	bhi.n	800430c <HAL_SPI_TransmitReceive+0x3c2>
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d102      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x3c8>
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e02c      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af55 	bne.w	80041dc <HAL_SPI_TransmitReceive+0x292>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	f47f af4e 	bne.w	80041dc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f995 	bl	8004674 <SPI_EndRxTxTransaction>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e00e      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	@ 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004398:	f7fd fc60 	bl	8001c5c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043a8:	f7fd fc58 	bl	8001c5c <HAL_GetTick>
 80043ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ae:	4b39      	ldr	r3, [pc, #228]	@ (8004494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	0d1b      	lsrs	r3, r3, #20
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043be:	e054      	b.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d050      	beq.n	800446a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043c8:	f7fd fc48 	bl	8001c5c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <SPI_WaitFlagStateUntilTimeout+0x56>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d13d      	bne.n	800445a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f6:	d111      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	d004      	beq.n	800440c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440a:	d107      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004424:	d10f      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e017      	b.n	800448a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3b01      	subs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d19b      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044aa:	f7fd fbd7 	bl	8001c5c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044ba:	f7fd fbcf 	bl	8001c5c <HAL_GetTick>
 80044be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044c8:	4b3d      	ldr	r3, [pc, #244]	@ (80045c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	0d1b      	lsrs	r3, r3, #20
 80044d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044e0:	e060      	b.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80044e8:	d107      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d050      	beq.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004502:	f7fd fbab 	bl	8001c5c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450e:	429a      	cmp	r2, r3
 8004510:	d902      	bls.n	8004518 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d13d      	bne.n	8004594 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004526:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004530:	d111      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d004      	beq.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004544:	d107      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004554:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455e:	d10f      	bne.n	8004580 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800457e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e010      	b.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d196      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	@ 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d8:	d111      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e2:	d004      	beq.n	80045ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ec:	d107      	bne.n	80045fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	@ 0x80
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff febd 	bl	8004388 <SPI_WaitFlagStateUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e023      	b.n	800466c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462c:	d11d      	bne.n	800466a <SPI_EndRxTransaction+0xa6>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004636:	d004      	beq.n	8004642 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004640:	d113      	bne.n	800466a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff22 	bl	8004498 <SPI_WaitFifoStateUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e000      	b.n	800466c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff ff03 	bl	8004498 <SPI_WaitFifoStateUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e027      	b.n	80046f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	@ 0x80
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fe68 	bl	8004388 <SPI_WaitFlagStateUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e014      	b.n	80046f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fedc 	bl	8004498 <SPI_WaitFifoStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e000      	b.n	80046f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e049      	b.n	80047a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f841 	bl	80047ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f000 f9e0 	bl	8004b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04f      	b.n	800487c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_TIM_Base_Start_IT+0xc4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004806:	d018      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	@ (800488c <HAL_TIM_Base_Start_IT+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <HAL_TIM_Base_Start_IT+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HAL_TIM_Base_Start_IT+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	@ (8004898 <HAL_TIM_Base_Start_IT+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIM_Base_Start_IT+0x76>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a19      	ldr	r2, [pc, #100]	@ (800489c <HAL_TIM_Base_Start_IT+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d115      	bne.n	8004866 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	4b17      	ldr	r3, [pc, #92]	@ (80048a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004842:	4013      	ands	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b06      	cmp	r3, #6
 800484a:	d015      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004852:	d011      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004864:	e008      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0201 	orr.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e000      	b.n	800487a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004878:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	00010007 	.word	0x00010007

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d020      	beq.n	8004908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01b      	beq.n	8004908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0202 	mvn.w	r2, #2
 80048d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8e9 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8db 	bl	8004ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8ec 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8c3 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8b5 	bl	8004ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8c6 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0208 	mvn.w	r2, #8
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f89d 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f88f 	bl	8004ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8a0 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2208      	movs	r2, #8
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f877 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f869 	bl	8004ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f87a 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc fc4a 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f913 	bl	8004c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f90b 	bl	8004c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f834 	bl	8004aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0220 	mvn.w	r2, #32
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8d3 	bl	8004c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a46      	ldr	r2, [pc, #280]	@ (8004c30 <TIM_Base_SetConfig+0x12c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b22:	d00f      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a43      	ldr	r2, [pc, #268]	@ (8004c34 <TIM_Base_SetConfig+0x130>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a42      	ldr	r2, [pc, #264]	@ (8004c38 <TIM_Base_SetConfig+0x134>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a41      	ldr	r2, [pc, #260]	@ (8004c3c <TIM_Base_SetConfig+0x138>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0x40>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a40      	ldr	r2, [pc, #256]	@ (8004c40 <TIM_Base_SetConfig+0x13c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a35      	ldr	r2, [pc, #212]	@ (8004c30 <TIM_Base_SetConfig+0x12c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d01b      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <TIM_Base_SetConfig+0x130>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d017      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a31      	ldr	r2, [pc, #196]	@ (8004c38 <TIM_Base_SetConfig+0x134>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a30      	ldr	r2, [pc, #192]	@ (8004c3c <TIM_Base_SetConfig+0x138>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2f      	ldr	r2, [pc, #188]	@ (8004c40 <TIM_Base_SetConfig+0x13c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2e      	ldr	r2, [pc, #184]	@ (8004c44 <TIM_Base_SetConfig+0x140>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	@ (8004c48 <TIM_Base_SetConfig+0x144>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0x9a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	@ (8004c4c <TIM_Base_SetConfig+0x148>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <TIM_Base_SetConfig+0x12c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_Base_SetConfig+0xf8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <TIM_Base_SetConfig+0x13c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0xf8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <TIM_Base_SetConfig+0x140>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0xf8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a16      	ldr	r2, [pc, #88]	@ (8004c48 <TIM_Base_SetConfig+0x144>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0xf8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	@ (8004c4c <TIM_Base_SetConfig+0x148>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]
  }
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e040      	b.n	8004d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fb9a 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	@ 0x24
 8004cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fae0 	bl	8005298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f825 	bl	8004d28 <UART_SetConfig>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e01b      	b.n	8004d20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fb5f 	bl	80053dc <UART_CheckIdleState>
 8004d1e:	4603      	mov	r3, r0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b08a      	sub	sp, #40	@ 0x28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4ba4      	ldr	r3, [pc, #656]	@ (8004fe8 <UART_SetConfig+0x2c0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a99      	ldr	r2, [pc, #612]	@ (8004fec <UART_SetConfig+0x2c4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d90:	4313      	orrs	r3, r2
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a90      	ldr	r2, [pc, #576]	@ (8004ff0 <UART_SetConfig+0x2c8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d126      	bne.n	8004e00 <UART_SetConfig+0xd8>
 8004db2:	4b90      	ldr	r3, [pc, #576]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d81b      	bhi.n	8004df8 <UART_SetConfig+0xd0>
 8004dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc8 <UART_SetConfig+0xa0>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004de9 	.word	0x08004de9
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e116      	b.n	800500e <UART_SetConfig+0x2e6>
 8004de0:	2302      	movs	r3, #2
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e112      	b.n	800500e <UART_SetConfig+0x2e6>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e10e      	b.n	800500e <UART_SetConfig+0x2e6>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e10a      	b.n	800500e <UART_SetConfig+0x2e6>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfe:	e106      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff8 <UART_SetConfig+0x2d0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d138      	bne.n	8004e7c <UART_SetConfig+0x154>
 8004e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d82d      	bhi.n	8004e74 <UART_SetConfig+0x14c>
 8004e18:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <UART_SetConfig+0xf8>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e75 	.word	0x08004e75
 8004e2c:	08004e75 	.word	0x08004e75
 8004e30:	08004e65 	.word	0x08004e65
 8004e34:	08004e75 	.word	0x08004e75
 8004e38:	08004e75 	.word	0x08004e75
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e75 	.word	0x08004e75
 8004e48:	08004e75 	.word	0x08004e75
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e0d8      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e0d4      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e64:	2304      	movs	r3, #4
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e0d0      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e72:	e0cc      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e74:	2310      	movs	r3, #16
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e0c8      	b.n	800500e <UART_SetConfig+0x2e6>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a5e      	ldr	r2, [pc, #376]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d125      	bne.n	8004ed2 <UART_SetConfig+0x1aa>
 8004e86:	4b5b      	ldr	r3, [pc, #364]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e90:	2b30      	cmp	r3, #48	@ 0x30
 8004e92:	d016      	beq.n	8004ec2 <UART_SetConfig+0x19a>
 8004e94:	2b30      	cmp	r3, #48	@ 0x30
 8004e96:	d818      	bhi.n	8004eca <UART_SetConfig+0x1a2>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d00a      	beq.n	8004eb2 <UART_SetConfig+0x18a>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d814      	bhi.n	8004eca <UART_SetConfig+0x1a2>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <UART_SetConfig+0x182>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d008      	beq.n	8004eba <UART_SetConfig+0x192>
 8004ea8:	e00f      	b.n	8004eca <UART_SetConfig+0x1a2>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb0:	e0ad      	b.n	800500e <UART_SetConfig+0x2e6>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb8:	e0a9      	b.n	800500e <UART_SetConfig+0x2e6>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec0:	e0a5      	b.n	800500e <UART_SetConfig+0x2e6>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec8:	e0a1      	b.n	800500e <UART_SetConfig+0x2e6>
 8004eca:	2310      	movs	r3, #16
 8004ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed0:	e09d      	b.n	800500e <UART_SetConfig+0x2e6>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <UART_SetConfig+0x2d8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d125      	bne.n	8004f28 <UART_SetConfig+0x200>
 8004edc:	4b45      	ldr	r3, [pc, #276]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ee8:	d016      	beq.n	8004f18 <UART_SetConfig+0x1f0>
 8004eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eec:	d818      	bhi.n	8004f20 <UART_SetConfig+0x1f8>
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d00a      	beq.n	8004f08 <UART_SetConfig+0x1e0>
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d814      	bhi.n	8004f20 <UART_SetConfig+0x1f8>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <UART_SetConfig+0x1d8>
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d008      	beq.n	8004f10 <UART_SetConfig+0x1e8>
 8004efe:	e00f      	b.n	8004f20 <UART_SetConfig+0x1f8>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e082      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e07e      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e07a      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e076      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e072      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a35      	ldr	r2, [pc, #212]	@ (8005004 <UART_SetConfig+0x2dc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d12a      	bne.n	8004f88 <UART_SetConfig+0x260>
 8004f32:	4b30      	ldr	r3, [pc, #192]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f40:	d01a      	beq.n	8004f78 <UART_SetConfig+0x250>
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f46:	d81b      	bhi.n	8004f80 <UART_SetConfig+0x258>
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d00c      	beq.n	8004f68 <UART_SetConfig+0x240>
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f52:	d815      	bhi.n	8004f80 <UART_SetConfig+0x258>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <UART_SetConfig+0x238>
 8004f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f5c:	d008      	beq.n	8004f70 <UART_SetConfig+0x248>
 8004f5e:	e00f      	b.n	8004f80 <UART_SetConfig+0x258>
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e052      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6e:	e04e      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f70:	2304      	movs	r3, #4
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f76:	e04a      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7e:	e046      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f80:	2310      	movs	r3, #16
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e042      	b.n	800500e <UART_SetConfig+0x2e6>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <UART_SetConfig+0x2c4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d13a      	bne.n	8005008 <UART_SetConfig+0x2e0>
 8004f92:	4b18      	ldr	r3, [pc, #96]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa0:	d01a      	beq.n	8004fd8 <UART_SetConfig+0x2b0>
 8004fa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa6:	d81b      	bhi.n	8004fe0 <UART_SetConfig+0x2b8>
 8004fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fac:	d00c      	beq.n	8004fc8 <UART_SetConfig+0x2a0>
 8004fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb2:	d815      	bhi.n	8004fe0 <UART_SetConfig+0x2b8>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <UART_SetConfig+0x298>
 8004fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbc:	d008      	beq.n	8004fd0 <UART_SetConfig+0x2a8>
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x2b8>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e022      	b.n	800500e <UART_SetConfig+0x2e6>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e01e      	b.n	800500e <UART_SetConfig+0x2e6>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e01a      	b.n	800500e <UART_SetConfig+0x2e6>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fde:	e016      	b.n	800500e <UART_SetConfig+0x2e6>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e012      	b.n	800500e <UART_SetConfig+0x2e6>
 8004fe8:	efff69f3 	.word	0xefff69f3
 8004fec:	40008000 	.word	0x40008000
 8004ff0:	40013800 	.word	0x40013800
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40004400 	.word	0x40004400
 8004ffc:	40004800 	.word	0x40004800
 8005000:	40004c00 	.word	0x40004c00
 8005004:	40005000 	.word	0x40005000
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a9f      	ldr	r2, [pc, #636]	@ (8005290 <UART_SetConfig+0x568>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d17a      	bne.n	800510e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800501c:	2b08      	cmp	r3, #8
 800501e:	d824      	bhi.n	800506a <UART_SetConfig+0x342>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <UART_SetConfig+0x300>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	0800504d 	.word	0x0800504d
 800502c:	0800506b 	.word	0x0800506b
 8005030:	08005055 	.word	0x08005055
 8005034:	0800506b 	.word	0x0800506b
 8005038:	0800505b 	.word	0x0800505b
 800503c:	0800506b 	.word	0x0800506b
 8005040:	0800506b 	.word	0x0800506b
 8005044:	0800506b 	.word	0x0800506b
 8005048:	08005063 	.word	0x08005063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7fd feb2 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8005050:	61f8      	str	r0, [r7, #28]
        break;
 8005052:	e010      	b.n	8005076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005054:	4b8f      	ldr	r3, [pc, #572]	@ (8005294 <UART_SetConfig+0x56c>)
 8005056:	61fb      	str	r3, [r7, #28]
        break;
 8005058:	e00d      	b.n	8005076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505a:	f7fd fe13 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 800505e:	61f8      	str	r0, [r7, #28]
        break;
 8005060:	e009      	b.n	8005076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005066:	61fb      	str	r3, [r7, #28]
        break;
 8005068:	e005      	b.n	8005076 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80fb 	beq.w	8005274 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	429a      	cmp	r2, r3
 800508c:	d305      	bcc.n	800509a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	429a      	cmp	r2, r3
 8005098:	d903      	bls.n	80050a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050a0:	e0e8      	b.n	8005274 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2200      	movs	r2, #0
 80050a6:	461c      	mov	r4, r3
 80050a8:	4615      	mov	r5, r2
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	022b      	lsls	r3, r5, #8
 80050b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050b8:	0222      	lsls	r2, r4, #8
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	6849      	ldr	r1, [r1, #4]
 80050be:	0849      	lsrs	r1, r1, #1
 80050c0:	2000      	movs	r0, #0
 80050c2:	4688      	mov	r8, r1
 80050c4:	4681      	mov	r9, r0
 80050c6:	eb12 0a08 	adds.w	sl, r2, r8
 80050ca:	eb43 0b09 	adc.w	fp, r3, r9
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050dc:	4650      	mov	r0, sl
 80050de:	4659      	mov	r1, fp
 80050e0:	f7fb f8ce 	bl	8000280 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f2:	d308      	bcc.n	8005106 <UART_SetConfig+0x3de>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fa:	d204      	bcs.n	8005106 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e0b6      	b.n	8005274 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800510c:	e0b2      	b.n	8005274 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005116:	d15e      	bne.n	80051d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005118:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800511c:	2b08      	cmp	r3, #8
 800511e:	d828      	bhi.n	8005172 <UART_SetConfig+0x44a>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0x400>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005173 	.word	0x08005173
 8005138:	08005163 	.word	0x08005163
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
 8005148:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fd fe32 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8005150:	61f8      	str	r0, [r7, #28]
        break;
 8005152:	e014      	b.n	800517e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fd fe44 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8005158:	61f8      	str	r0, [r7, #28]
        break;
 800515a:	e010      	b.n	800517e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b4d      	ldr	r3, [pc, #308]	@ (8005294 <UART_SetConfig+0x56c>)
 800515e:	61fb      	str	r3, [r7, #28]
        break;
 8005160:	e00d      	b.n	800517e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fd fd8f 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8005166:	61f8      	str	r0, [r7, #28]
        break;
 8005168:	e009      	b.n	800517e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	61fb      	str	r3, [r7, #28]
        break;
 8005170:	e005      	b.n	800517e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800517c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d077      	beq.n	8005274 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005a      	lsls	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b0f      	cmp	r3, #15
 800519e:	d916      	bls.n	80051ce <UART_SetConfig+0x4a6>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a6:	d212      	bcs.n	80051ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	b29a      	uxth	r2, r3
 80051be:	8afb      	ldrh	r3, [r7, #22]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	8afa      	ldrh	r2, [r7, #22]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e052      	b.n	8005274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d4:	e04e      	b.n	8005274 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d827      	bhi.n	800522e <UART_SetConfig+0x506>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x4bc>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fd fdd4 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fd fde6 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b1e      	ldr	r3, [pc, #120]	@ (8005294 <UART_SetConfig+0x56c>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fd fd31 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005238:	bf00      	nop
    }

    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085a      	lsrs	r2, r3, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	441a      	add	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d909      	bls.n	800526e <UART_SetConfig+0x546>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d205      	bcs.n	800526e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e002      	b.n	8005274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005280:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	@ 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	40008000 	.word	0x40008000
 8005294:	00f42400 	.word	0x00f42400

08005298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005396:	d10a      	bne.n	80053ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b098      	sub	sp, #96	@ 0x60
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fc fc36 	bl	8001c5c <HAL_GetTick>
 80053f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d12e      	bne.n	800545e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f88c 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d021      	beq.n	800545e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800542e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005438:	647b      	str	r3, [r7, #68]	@ 0x44
 800543a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800543e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e062      	b.n	8005524 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d149      	bne.n	8005500 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f856 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03c      	beq.n	8005500 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	623b      	str	r3, [r7, #32]
   return(result);
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d8:	61fa      	str	r2, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	617b      	str	r3, [r7, #20]
   return(result);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e011      	b.n	8005524 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3758      	adds	r7, #88	@ 0x58
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553c:	e04f      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d04b      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005546:	f7fc fb89 	bl	8001c5c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <UART_WaitOnFlagUntilTimeout+0x30>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e04e      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d037      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b80      	cmp	r3, #128	@ 0x80
 8005572:	d034      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d031      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b08      	cmp	r3, #8
 8005586:	d110      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2208      	movs	r2, #8
 800558e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f838 	bl	8005606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2208      	movs	r2, #8
 800559a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e029      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b8:	d111      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f81e 	bl	8005606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d0a0      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005606:	b480      	push	{r7}
 8005608:	b095      	sub	sp, #84	@ 0x54
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800562c:	643b      	str	r3, [r7, #64]	@ 0x40
 800562e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e5      	bne.n	8005640 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005678:	2b01      	cmp	r3, #1
 800567a:	d118      	bne.n	80056ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	60bb      	str	r3, [r7, #8]
   return(result);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 0310 	bic.w	r3, r3, #16
 8005690:	647b      	str	r3, [r7, #68]	@ 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6979      	ldr	r1, [r7, #20]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	613b      	str	r3, [r7, #16]
   return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056c2:	bf00      	nop
 80056c4:	3754      	adds	r7, #84	@ 0x54
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80d9 	beq.w	800589e <ethernetif_notify_conn_changed+0x1ce>
  {
#ifndef USE_DHCP
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80056ec:	4b6f      	ldr	r3, [pc, #444]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	061a      	lsls	r2, r3, #24
 80056f2:	4b6e      	ldr	r3, [pc, #440]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	4b6c      	ldr	r3, [pc, #432]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 80056fc:	789b      	ldrb	r3, [r3, #2]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	4313      	orrs	r3, r2
 8005702:	4a6a      	ldr	r2, [pc, #424]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005704:	78d2      	ldrb	r2, [r2, #3]
 8005706:	4313      	orrs	r3, r2
 8005708:	061a      	lsls	r2, r3, #24
 800570a:	4b68      	ldr	r3, [pc, #416]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	0619      	lsls	r1, r3, #24
 8005710:	4b66      	ldr	r3, [pc, #408]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	4319      	orrs	r1, r3
 8005718:	4b64      	ldr	r3, [pc, #400]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 800571a:	789b      	ldrb	r3, [r3, #2]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	430b      	orrs	r3, r1
 8005720:	4962      	ldr	r1, [pc, #392]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005722:	78c9      	ldrb	r1, [r1, #3]
 8005724:	430b      	orrs	r3, r1
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800572c:	431a      	orrs	r2, r3
 800572e:	4b5f      	ldr	r3, [pc, #380]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	0619      	lsls	r1, r3, #24
 8005734:	4b5d      	ldr	r3, [pc, #372]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	4319      	orrs	r1, r3
 800573c:	4b5b      	ldr	r3, [pc, #364]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 800573e:	789b      	ldrb	r3, [r3, #2]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	430b      	orrs	r3, r1
 8005744:	4959      	ldr	r1, [pc, #356]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005746:	78c9      	ldrb	r1, [r1, #3]
 8005748:	430b      	orrs	r3, r1
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005750:	431a      	orrs	r2, r3
 8005752:	4b56      	ldr	r3, [pc, #344]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	0619      	lsls	r1, r3, #24
 8005758:	4b54      	ldr	r3, [pc, #336]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	4319      	orrs	r1, r3
 8005760:	4b52      	ldr	r3, [pc, #328]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	430b      	orrs	r3, r1
 8005768:	4950      	ldr	r1, [pc, #320]	@ (80058ac <ethernetif_notify_conn_changed+0x1dc>)
 800576a:	78c9      	ldrb	r1, [r1, #3]
 800576c:	430b      	orrs	r3, r1
 800576e:	0e1b      	lsrs	r3, r3, #24
 8005770:	4313      	orrs	r3, r2
 8005772:	4a4f      	ldr	r2, [pc, #316]	@ (80058b0 <ethernetif_notify_conn_changed+0x1e0>)
 8005774:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005776:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	061a      	lsls	r2, r3, #24
 800577c:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	431a      	orrs	r2, r3
 8005784:	4b4b      	ldr	r3, [pc, #300]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 8005786:	789b      	ldrb	r3, [r3, #2]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	4313      	orrs	r3, r2
 800578c:	4a49      	ldr	r2, [pc, #292]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 800578e:	78d2      	ldrb	r2, [r2, #3]
 8005790:	4313      	orrs	r3, r2
 8005792:	061a      	lsls	r2, r3, #24
 8005794:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	0619      	lsls	r1, r3, #24
 800579a:	4b46      	ldr	r3, [pc, #280]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	4319      	orrs	r1, r3
 80057a2:	4b44      	ldr	r3, [pc, #272]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	430b      	orrs	r3, r1
 80057aa:	4942      	ldr	r1, [pc, #264]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057ac:	78c9      	ldrb	r1, [r1, #3]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057b6:	431a      	orrs	r2, r3
 80057b8:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	0619      	lsls	r1, r3, #24
 80057be:	4b3d      	ldr	r3, [pc, #244]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	4319      	orrs	r1, r3
 80057c6:	4b3b      	ldr	r3, [pc, #236]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057c8:	789b      	ldrb	r3, [r3, #2]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	430b      	orrs	r3, r1
 80057ce:	4939      	ldr	r1, [pc, #228]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057d0:	78c9      	ldrb	r1, [r1, #3]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80057da:	431a      	orrs	r2, r3
 80057dc:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	0619      	lsls	r1, r3, #24
 80057e2:	4b34      	ldr	r3, [pc, #208]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	4319      	orrs	r1, r3
 80057ea:	4b32      	ldr	r3, [pc, #200]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057ec:	789b      	ldrb	r3, [r3, #2]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	430b      	orrs	r3, r1
 80057f2:	4930      	ldr	r1, [pc, #192]	@ (80058b4 <ethernetif_notify_conn_changed+0x1e4>)
 80057f4:	78c9      	ldrb	r1, [r1, #3]
 80057f6:	430b      	orrs	r3, r1
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	4313      	orrs	r3, r2
 80057fc:	4a2e      	ldr	r2, [pc, #184]	@ (80058b8 <ethernetif_notify_conn_changed+0x1e8>)
 80057fe:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005800:	4b2e      	ldr	r3, [pc, #184]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	061a      	lsls	r2, r3, #24
 8005806:	4b2d      	ldr	r3, [pc, #180]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005810:	789b      	ldrb	r3, [r3, #2]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	4313      	orrs	r3, r2
 8005816:	4a29      	ldr	r2, [pc, #164]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005818:	78d2      	ldrb	r2, [r2, #3]
 800581a:	4313      	orrs	r3, r2
 800581c:	061a      	lsls	r2, r3, #24
 800581e:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	0619      	lsls	r1, r3, #24
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	041b      	lsls	r3, r3, #16
 800582a:	4319      	orrs	r1, r3
 800582c:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	430b      	orrs	r3, r1
 8005834:	4921      	ldr	r1, [pc, #132]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005836:	78c9      	ldrb	r1, [r1, #3]
 8005838:	430b      	orrs	r3, r1
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005840:	431a      	orrs	r2, r3
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	0619      	lsls	r1, r3, #24
 8005848:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	4319      	orrs	r1, r3
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005852:	789b      	ldrb	r3, [r3, #2]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	430b      	orrs	r3, r1
 8005858:	4918      	ldr	r1, [pc, #96]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 800585a:	78c9      	ldrb	r1, [r1, #3]
 800585c:	430b      	orrs	r3, r1
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005864:	431a      	orrs	r2, r3
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	0619      	lsls	r1, r3, #24
 800586c:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	4319      	orrs	r1, r3
 8005874:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 8005876:	789b      	ldrb	r3, [r3, #2]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	430b      	orrs	r3, r1
 800587c:	490f      	ldr	r1, [pc, #60]	@ (80058bc <ethernetif_notify_conn_changed+0x1ec>)
 800587e:	78c9      	ldrb	r1, [r1, #3]
 8005880:	430b      	orrs	r3, r1
 8005882:	0e1b      	lsrs	r3, r3, #24
 8005884:	4313      	orrs	r3, r2
 8005886:	4a0e      	ldr	r2, [pc, #56]	@ (80058c0 <ethernetif_notify_conn_changed+0x1f0>)
 8005888:	6013      	str	r3, [r2, #0]
#endif
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <ethernetif_notify_conn_changed+0x1f0>)
 800588c:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <ethernetif_notify_conn_changed+0x1e8>)
 800588e:	4908      	ldr	r1, [pc, #32]	@ (80058b0 <ethernetif_notify_conn_changed+0x1e0>)
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 ff9f 	bl	80077d4 <netif_set_addr>

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fff6 	bl	8007888 <netif_set_up>
    netif_set_down(netif);

    /* led off */
   // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  }
}
 800589c:	e002      	b.n	80058a4 <ethernetif_notify_conn_changed+0x1d4>
    netif_set_down(netif);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f002 f85e 	bl	8007960 <netif_set_down>
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000218 	.word	0x20000218
 80058b0:	2000020c 	.word	0x2000020c
 80058b4:	2000021c 	.word	0x2000021c
 80058b8:	20000210 	.word	0x20000210
 80058bc:	20000220 	.word	0x20000220
 80058c0:	20000214 	.word	0x20000214

080058c4 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80058ca:	f001 f96b 	bl	8006ba4 <lwip_init>
#ifdef USE_DHCP
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;
#else
  IP_ADDRESS[0] = 169;
 80058ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 80058d0:	22a9      	movs	r2, #169	@ 0xa9
 80058d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 80058d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 80058d6:	22fe      	movs	r2, #254	@ 0xfe
 80058d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 168;
 80058da:	4b89      	ldr	r3, [pc, #548]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 80058dc:	22a8      	movs	r2, #168	@ 0xa8
 80058de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 80058e0:	4b87      	ldr	r3, [pc, #540]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 80058e2:	2264      	movs	r2, #100	@ 0x64
 80058e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80058e6:	4b87      	ldr	r3, [pc, #540]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80058e8:	22ff      	movs	r2, #255	@ 0xff
 80058ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80058ec:	4b85      	ldr	r3, [pc, #532]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80058ee:	22ff      	movs	r2, #255	@ 0xff
 80058f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80058f2:	4b84      	ldr	r3, [pc, #528]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80058f8:	4b82      	ldr	r3, [pc, #520]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 168;
 80058fe:	4b82      	ldr	r3, [pc, #520]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005900:	22a8      	movs	r2, #168	@ 0xa8
 8005902:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8005904:	4b80      	ldr	r3, [pc, #512]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005906:	22fe      	movs	r2, #254	@ 0xfe
 8005908:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 168;
 800590a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b08 <MX_LWIP_Init+0x244>)
 800590c:	22a8      	movs	r2, #168	@ 0xa8
 800590e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 12;
 8005910:	4b7d      	ldr	r3, [pc, #500]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005912:	220c      	movs	r2, #12
 8005914:	70da      	strb	r2, [r3, #3]

  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005916:	4b7a      	ldr	r3, [pc, #488]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	061a      	lsls	r2, r3, #24
 800591c:	4b78      	ldr	r3, [pc, #480]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	431a      	orrs	r2, r3
 8005924:	4b76      	ldr	r3, [pc, #472]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005926:	789b      	ldrb	r3, [r3, #2]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	4313      	orrs	r3, r2
 800592c:	4a74      	ldr	r2, [pc, #464]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800592e:	78d2      	ldrb	r2, [r2, #3]
 8005930:	4313      	orrs	r3, r2
 8005932:	061a      	lsls	r2, r3, #24
 8005934:	4b72      	ldr	r3, [pc, #456]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	0619      	lsls	r1, r3, #24
 800593a:	4b71      	ldr	r3, [pc, #452]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	4319      	orrs	r1, r3
 8005942:	4b6f      	ldr	r3, [pc, #444]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005944:	789b      	ldrb	r3, [r3, #2]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	430b      	orrs	r3, r1
 800594a:	496d      	ldr	r1, [pc, #436]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800594c:	78c9      	ldrb	r1, [r1, #3]
 800594e:	430b      	orrs	r3, r1
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005956:	431a      	orrs	r2, r3
 8005958:	4b69      	ldr	r3, [pc, #420]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	0619      	lsls	r1, r3, #24
 800595e:	4b68      	ldr	r3, [pc, #416]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	4319      	orrs	r1, r3
 8005966:	4b66      	ldr	r3, [pc, #408]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005968:	789b      	ldrb	r3, [r3, #2]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	430b      	orrs	r3, r1
 800596e:	4964      	ldr	r1, [pc, #400]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005970:	78c9      	ldrb	r1, [r1, #3]
 8005972:	430b      	orrs	r3, r1
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800597a:	431a      	orrs	r2, r3
 800597c:	4b60      	ldr	r3, [pc, #384]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	0619      	lsls	r1, r3, #24
 8005982:	4b5f      	ldr	r3, [pc, #380]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	4319      	orrs	r1, r3
 800598a:	4b5d      	ldr	r3, [pc, #372]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 800598c:	789b      	ldrb	r3, [r3, #2]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	430b      	orrs	r3, r1
 8005992:	495b      	ldr	r1, [pc, #364]	@ (8005b00 <MX_LWIP_Init+0x23c>)
 8005994:	78c9      	ldrb	r1, [r1, #3]
 8005996:	430b      	orrs	r3, r1
 8005998:	0e1b      	lsrs	r3, r3, #24
 800599a:	4313      	orrs	r3, r2
 800599c:	4a5b      	ldr	r2, [pc, #364]	@ (8005b0c <MX_LWIP_Init+0x248>)
 800599e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80059a0:	4b58      	ldr	r3, [pc, #352]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	061a      	lsls	r2, r3, #24
 80059a6:	4b57      	ldr	r3, [pc, #348]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059b0:	789b      	ldrb	r3, [r3, #2]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	4313      	orrs	r3, r2
 80059b6:	4a53      	ldr	r2, [pc, #332]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059b8:	78d2      	ldrb	r2, [r2, #3]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	061a      	lsls	r2, r3, #24
 80059be:	4b51      	ldr	r3, [pc, #324]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	0619      	lsls	r1, r3, #24
 80059c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	4319      	orrs	r1, r3
 80059cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	430b      	orrs	r3, r1
 80059d4:	494b      	ldr	r1, [pc, #300]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059d6:	78c9      	ldrb	r1, [r1, #3]
 80059d8:	430b      	orrs	r3, r1
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80059e0:	431a      	orrs	r2, r3
 80059e2:	4b48      	ldr	r3, [pc, #288]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	0619      	lsls	r1, r3, #24
 80059e8:	4b46      	ldr	r3, [pc, #280]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	4319      	orrs	r1, r3
 80059f0:	4b44      	ldr	r3, [pc, #272]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059f2:	789b      	ldrb	r3, [r3, #2]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	430b      	orrs	r3, r1
 80059f8:	4942      	ldr	r1, [pc, #264]	@ (8005b04 <MX_LWIP_Init+0x240>)
 80059fa:	78c9      	ldrb	r1, [r1, #3]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a04:	431a      	orrs	r2, r3
 8005a06:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <MX_LWIP_Init+0x240>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	0619      	lsls	r1, r3, #24
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <MX_LWIP_Init+0x240>)
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	4319      	orrs	r1, r3
 8005a14:	4b3b      	ldr	r3, [pc, #236]	@ (8005b04 <MX_LWIP_Init+0x240>)
 8005a16:	789b      	ldrb	r3, [r3, #2]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	4939      	ldr	r1, [pc, #228]	@ (8005b04 <MX_LWIP_Init+0x240>)
 8005a1e:	78c9      	ldrb	r1, [r1, #3]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	0e1b      	lsrs	r3, r3, #24
 8005a24:	4313      	orrs	r3, r2
 8005a26:	4a3a      	ldr	r2, [pc, #232]	@ (8005b10 <MX_LWIP_Init+0x24c>)
 8005a28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a2a:	4b37      	ldr	r3, [pc, #220]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	061a      	lsls	r2, r3, #24
 8005a30:	4b35      	ldr	r3, [pc, #212]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a3a:	789b      	ldrb	r3, [r3, #2]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	4a31      	ldr	r2, [pc, #196]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a42:	78d2      	ldrb	r2, [r2, #3]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	061a      	lsls	r2, r3, #24
 8005a48:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	0619      	lsls	r1, r3, #24
 8005a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	4319      	orrs	r1, r3
 8005a56:	4b2c      	ldr	r3, [pc, #176]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	492a      	ldr	r1, [pc, #168]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a60:	78c9      	ldrb	r1, [r1, #3]
 8005a62:	430b      	orrs	r3, r1
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	4b26      	ldr	r3, [pc, #152]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	0619      	lsls	r1, r3, #24
 8005a72:	4b25      	ldr	r3, [pc, #148]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	4319      	orrs	r1, r3
 8005a7a:	4b23      	ldr	r3, [pc, #140]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a7c:	789b      	ldrb	r3, [r3, #2]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	430b      	orrs	r3, r1
 8005a82:	4921      	ldr	r1, [pc, #132]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a84:	78c9      	ldrb	r1, [r1, #3]
 8005a86:	430b      	orrs	r3, r1
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	0619      	lsls	r1, r3, #24
 8005a96:	4b1c      	ldr	r3, [pc, #112]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	4319      	orrs	r1, r3
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005aa0:	789b      	ldrb	r3, [r3, #2]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	4918      	ldr	r1, [pc, #96]	@ (8005b08 <MX_LWIP_Init+0x244>)
 8005aa8:	78c9      	ldrb	r1, [r1, #3]
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	0e1b      	lsrs	r3, r3, #24
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <MX_LWIP_Init+0x250>)
 8005ab2:	6013      	str	r3, [r2, #0]
#endif

/* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <MX_LWIP_Init+0x254>)
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	4b18      	ldr	r3, [pc, #96]	@ (8005b1c <MX_LWIP_Init+0x258>)
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <MX_LWIP_Init+0x250>)
 8005ac2:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <MX_LWIP_Init+0x24c>)
 8005ac4:	4911      	ldr	r1, [pc, #68]	@ (8005b0c <MX_LWIP_Init+0x248>)
 8005ac6:	4816      	ldr	r0, [pc, #88]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005ac8:	f001 fd14 	bl	80074f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005acc:	4814      	ldr	r0, [pc, #80]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005ace:	f001 fecb 	bl	8007868 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005ad2:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005ae4:	480e      	ldr	r0, [pc, #56]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005ae6:	f001 fecf 	bl	8007888 <netif_set_up>
 8005aea:	e002      	b.n	8005af2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005aec:	480c      	ldr	r0, [pc, #48]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005aee:	f001 ff37 	bl	8007960 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005af2:	490c      	ldr	r1, [pc, #48]	@ (8005b24 <MX_LWIP_Init+0x260>)
 8005af4:	480a      	ldr	r0, [pc, #40]	@ (8005b20 <MX_LWIP_Init+0x25c>)
 8005af6:	f001 ffcd 	bl	8007a94 <netif_set_link_callback>
  /* USER CODE BEGIN 3 */
#ifdef USE_DHCP
  dhcp_start(&gnetif);
#endif
  /* USER CODE END 3 */
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000218 	.word	0x20000218
 8005b04:	2000021c 	.word	0x2000021c
 8005b08:	20000220 	.word	0x20000220
 8005b0c:	2000020c 	.word	0x2000020c
 8005b10:	20000210 	.word	0x20000210
 8005b14:	20000214 	.word	0x20000214
 8005b18:	08013af5 	.word	0x08013af5
 8005b1c:	08005da9 	.word	0x08005da9
 8005b20:	200001d4 	.word	0x200001d4
 8005b24:	08005e51 	.word	0x08005e51

08005b28 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4_1 */
  /* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005b2c:	4805      	ldr	r0, [pc, #20]	@ (8005b44 <MX_LWIP_Process+0x1c>)
 8005b2e:	f000 f91b 	bl	8005d68 <ethernetif_input>

  /* USER CODE BEGIN 4_2 */
  ethernet_transmit();
 8005b32:	f000 f9a5 	bl	8005e80 <ethernet_transmit>

  /* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005b36:	f009 f8b3 	bl	800eca0 <sys_check_timeouts>

  /* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 8005b3a:	4802      	ldr	r0, [pc, #8]	@ (8005b44 <MX_LWIP_Process+0x1c>)
 8005b3c:	f000 f96a 	bl	8005e14 <ethernetif_set_link>

  /* USER CODE END 4_3 */
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200001d4 	.word	0x200001d4

08005b48 <ENC_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void ENC_MspInit(ENC_HandleTypeDef* encHandle)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b50:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <ENC_MspInit+0x54>)
 8005b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b54:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <ENC_MspInit+0x54>)
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <ENC_MspInit+0x54>)
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]

  /* ENC28J60_CS ----------------------> PB12 */
  /*Configure GPIO pins : PB12 */
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8005b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8005b76:	2301      	movs	r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005b7a:	f107 030c 	add.w	r3, r7, #12
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4807      	ldr	r0, [pc, #28]	@ (8005ba0 <ENC_MspInit+0x58>)
 8005b82:	f7fc f97d 	bl	8001e80 <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005b86:	2201      	movs	r2, #1
 8005b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b8c:	4804      	ldr	r0, [pc, #16]	@ (8005ba0 <ENC_MspInit+0x58>)
 8005b8e:	f7fc fb21 	bl	80021d4 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
}
 8005b92:	bf00      	nop
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	48000400 	.word	0x48000400

08005ba4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2206      	movs	r2, #6
 8005bb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] = 0x00;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] = 0x80;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] = 0xE1;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	22e1      	movs	r2, #225	@ 0xe1
 8005bc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] = 0x00;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] = 0x00;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] = 0x00;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  EncHandle.Init.MACAddr = netif->hwaddr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	332a      	adds	r3, #42	@ 0x2a
 8005be8:	4a18      	ldr	r2, [pc, #96]	@ (8005c4c <low_level_init+0xa8>)
 8005bea:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005bec:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <low_level_init+0xa8>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005bf2:	4b16      	ldr	r3, [pc, #88]	@ (8005c4c <low_level_init+0xa8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits = EIE_LINKIE;
 8005bf8:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <low_level_init+0xa8>)
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MspInit(&EncHandle);
 8005bfe:	4813      	ldr	r0, [pc, #76]	@ (8005c4c <low_level_init+0xa8>)
 8005c00:	f7ff ffa2 	bl	8005b48 <ENC_MspInit>

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005c0a:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c12:	f043 030a 	orr.w	r3, r3, #10
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Start the EN28J60 module */
  if(enc_start(&EncHandle))
 8005c1e:	480b      	ldr	r0, [pc, #44]	@ (8005c4c <low_level_init+0xa8>)
 8005c20:	f7fa fd62 	bl	80006e8 <enc_start>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <low_level_init+0x9e>
  {
    /* Set the MAC address */
    enc_set_MAC(&EncHandle);
 8005c2a:	4808      	ldr	r0, [pc, #32]	@ (8005c4c <low_level_init+0xa8>)
 8005c2c:	f7fa fe48 	bl	80008c0 <enc_set_MAC>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c36:	f043 0304 	orr.w	r3, r3, #4
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000224 	.word	0x20000224

08005c50 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Prepare ENC28J60 Tx buffer */
  errval = enc_prepare_txbuffer(&EncHandle, p->tot_len);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	891b      	ldrh	r3, [r3, #8]
 8005c62:	4619      	mov	r1, r3
 8005c64:	481a      	ldr	r0, [pc, #104]	@ (8005cd0 <low_level_output+0x80>)
 8005c66:	f7fa fe68 	bl	800093a <enc_prepare_txbuffer>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  if(errval != ERR_OK)
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <low_level_output+0x2c>
  {
    return errval;
 8005c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7a:	e024      	b.n	8005cc6 <low_level_output+0x76>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p;q != NULL;q = q->next)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e010      	b.n	8005ca4 <low_level_output+0x54>
  {
    enc_wrbuffer(q->payload, q->len);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	895b      	ldrh	r3, [r3, #10]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fa fea9 	bl	80009e4 <enc_wrbuffer>
    framelength += q->len;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	895b      	ldrh	r3, [r3, #10]
 8005c96:	461a      	mov	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  for(q = p;q != NULL;q = q->next)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1eb      	bne.n	8005c82 <low_level_output+0x32>
  }

  if(framelength != p->tot_len)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	891b      	ldrh	r3, [r3, #8]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d002      	beq.n	8005cbc <low_level_output+0x6c>
  {
    return ERR_BUF;
 8005cb6:	f06f 0301 	mvn.w	r3, #1
 8005cba:	e004      	b.n	8005cc6 <low_level_output+0x76>
  }

  EncHandle.transmitLength = p->tot_len;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	891a      	ldrh	r2, [r3, #8]
 8005cc0:	4b03      	ldr	r3, [pc, #12]	@ (8005cd0 <low_level_output+0x80>)
 8005cc2:	831a      	strh	r2, [r3, #24]
  /* Actual transmission is triggered in main loop */

  return ERR_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000224 	.word	0x20000224

08005cd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]

  if(!enc_get_received_frame(&EncHandle))
 8005ce4:	481e      	ldr	r0, [pc, #120]	@ (8005d60 <low_level_input+0x8c>)
 8005ce6:	f7fa fef7 	bl	8000ad8 <enc_get_received_frame>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <low_level_input+0x26>
  {
    return NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e02e      	b.n	8005d58 <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 8005cfa:	4b19      	ldr	r3, [pc, #100]	@ (8005d60 <low_level_input+0x8c>)
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t*) EncHandle.RxFrameInfos.buffer;
 8005d00:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <low_level_input+0x90>)
 8005d02:	60fb      	str	r3, [r7, #12]

  if(len > 0)
 8005d04:	8a7b      	ldrh	r3, [r7, #18]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005d0a:	8a7b      	ldrh	r3, [r7, #18]
 8005d0c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005d10:	4619      	mov	r1, r3
 8005d12:	2000      	movs	r0, #0
 8005d14:	f001 ff5a 	bl	8007bcc <pbuf_alloc>
 8005d18:	61f8      	str	r0, [r7, #28]
  }

  if(p != NULL)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <low_level_input+0x82>
  {
    bufferoffset = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]

    for(q = p;q != NULL;q = q->next)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e012      	b.n	8005d50 <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy((uint8_t*) ((uint8_t*) q->payload), (uint8_t*) ((uint8_t*) buffer + bufferoffset), q->len);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6858      	ldr	r0, [r3, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	18d1      	adds	r1, r2, r3
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	895b      	ldrh	r3, [r3, #10]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f00e f98c 	bl	8014056 <memcpy>
      bufferoffset = bufferoffset + q->len;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	895b      	ldrh	r3, [r3, #10]
 8005d42:	461a      	mov	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    for(q = p;q != NULL;q = q->next)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e9      	bne.n	8005d2a <low_level_input+0x56>
    }
  }

  return p;
 8005d56:	69fb      	ldr	r3, [r7, #28]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000224 	.word	0x20000224
 8005d64:	20000250 	.word	0x20000250

08005d68 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ffaf 	bl	8005cd4 <low_level_input>
 8005d76:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if(p == NULL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <ethernetif_input+0x38>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	4798      	blx	r3
 8005d88:	4603      	mov	r3, r0
 8005d8a:	72fb      	strb	r3, [r7, #11]

  if(err != ERR_OK)
 8005d8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f002 f9fd 	bl	8008194 <pbuf_free>
    p = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e000      	b.n	8005da2 <ethernetif_input+0x3a>
    return;
 8005da0:	bf00      	nop
  }
}
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <ethernetif_init+0x1c>
 8005db6:	4b0e      	ldr	r3, [pc, #56]	@ (8005df0 <ethernetif_init+0x48>)
 8005db8:	f240 121b 	movw	r2, #283	@ 0x11b
 8005dbc:	490d      	ldr	r1, [pc, #52]	@ (8005df4 <ethernetif_init+0x4c>)
 8005dbe:	480e      	ldr	r0, [pc, #56]	@ (8005df8 <ethernetif_init+0x50>)
 8005dc0:	f00e f86e 	bl	8013ea0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2265      	movs	r2, #101	@ 0x65
 8005dc8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	226e      	movs	r2, #110	@ 0x6e
 8005dd0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a09      	ldr	r2, [pc, #36]	@ (8005dfc <ethernetif_init+0x54>)
 8005dd8:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a08      	ldr	r2, [pc, #32]	@ (8005e00 <ethernetif_init+0x58>)
 8005dde:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fedf 	bl	8005ba4 <low_level_init>

  return ERR_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	08014d18 	.word	0x08014d18
 8005df4:	08014d34 	.word	0x08014d34
 8005df8:	08014d44 	.word	0x08014d44
 8005dfc:	08011e11 	.word	0x08011e11
 8005e00:	08005c51 	.word	0x08005c51

08005e04 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e08:	f7fb ff28 	bl	8001c5c <HAL_GetTick>
 8005e0c:	4603      	mov	r3, r0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <ethernetif_set_link>:
 * @retval None
 */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Handle ENC28J60 interrupt */
  enc_irq_handler(&EncHandle);
 8005e1c:	480b      	ldr	r0, [pc, #44]	@ (8005e4c <ethernetif_set_link+0x38>)
 8005e1e:	f7fa fef7 	bl	8000c10 <enc_irq_handler>

  /* Check whether the link is up or down*/
  if(((EncHandle.LinkStatus) & PHSTAT2_LSTAT) != 0)
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <ethernetif_set_link+0x38>)
 8005e24:	8adb      	ldrh	r3, [r3, #22]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <ethernetif_set_link+0x22>
  {
    netif_set_link_up(netif);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fdc8 	bl	80079c4 <netif_set_link_up>
 8005e34:	e002      	b.n	8005e3c <ethernetif_set_link+0x28>
  }
  else
  {
    netif_set_link_down(netif);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fdfc 	bl	8007a34 <netif_set_link_down>
  }

  /* Reenable interrupts */
  enc_enable_interrupts(EIE_INTIE);
 8005e3c:	2080      	movs	r0, #128	@ 0x80
 8005e3e:	f7fa fed9 	bl	8000bf4 <enc_enable_interrupts>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000224 	.word	0x20000224

08005e50 <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e5e:	089b      	lsrs	r3, r3, #2
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <ethernetif_update_config+0x20>
  {
    /* Restart the EN28J60 module */
    low_level_init(netif);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fe9a 	bl	8005ba4 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fc2d 	bl	80056d0 <ethernetif_notify_conn_changed>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <ethernet_transmit>:
/* USER CODE END 8 */
#endif /* LWIP_NETIF_LINK_CALLBACK */

/* USER CODE BEGIN 9 */
void ethernet_transmit(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  enc_transmit(&EncHandle);
 8005e84:	4802      	ldr	r0, [pc, #8]	@ (8005e90 <ethernet_transmit+0x10>)
 8005e86:	f7fa fdc7 	bl	8000a18 <enc_transmit>
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000224 	.word	0x20000224

08005e94 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6892      	ldr	r2, [r2, #8]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d103      	bne.n	8005f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006078 <xTaskIncrementTick+0x148>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 808f 	bne.w	8006062 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f44:	4b4d      	ldr	r3, [pc, #308]	@ (800607c <xTaskIncrementTick+0x14c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800607c <xTaskIncrementTick+0x14c>)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d121      	bne.n	8005f9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f58:	4b49      	ldr	r3, [pc, #292]	@ (8006080 <xTaskIncrementTick+0x150>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <xTaskIncrementTick+0x46>
 8005f7a:	4b41      	ldr	r3, [pc, #260]	@ (8006080 <xTaskIncrementTick+0x150>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	4b40      	ldr	r3, [pc, #256]	@ (8006084 <xTaskIncrementTick+0x154>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a3e      	ldr	r2, [pc, #248]	@ (8006080 <xTaskIncrementTick+0x150>)
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4a3e      	ldr	r2, [pc, #248]	@ (8006084 <xTaskIncrementTick+0x154>)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006088 <xTaskIncrementTick+0x158>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a3c      	ldr	r2, [pc, #240]	@ (8006088 <xTaskIncrementTick+0x158>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	f000 f8e0 	bl	800615c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800608c <xTaskIncrementTick+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d348      	bcc.n	8006038 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa6:	4b36      	ldr	r3, [pc, #216]	@ (8006080 <xTaskIncrementTick+0x150>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb0:	4b36      	ldr	r3, [pc, #216]	@ (800608c <xTaskIncrementTick+0x15c>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	601a      	str	r2, [r3, #0]
					break;
 8005fb8:	e03e      	b.n	8006038 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fba:	4b31      	ldr	r3, [pc, #196]	@ (8006080 <xTaskIncrementTick+0x150>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d203      	bcs.n	8005fda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800608c <xTaskIncrementTick+0x15c>)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fd8:	e02e      	b.n	8006038 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff ff7c 	bl	8005edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ff73 	bl	8005edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	4b24      	ldr	r3, [pc, #144]	@ (8006090 <xTaskIncrementTick+0x160>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	4a22      	ldr	r2, [pc, #136]	@ (8006090 <xTaskIncrementTick+0x160>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <xTaskIncrementTick+0x164>)
 8006016:	441a      	add	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7ff ff38 	bl	8005e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006028:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <xTaskIncrementTick+0x168>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d3b9      	bcc.n	8005fa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006036:	e7b6      	b.n	8005fa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006038:	4b17      	ldr	r3, [pc, #92]	@ (8006098 <xTaskIncrementTick+0x168>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603e:	4915      	ldr	r1, [pc, #84]	@ (8006094 <xTaskIncrementTick+0x164>)
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d901      	bls.n	8006054 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006054:	4b11      	ldr	r3, [pc, #68]	@ (800609c <xTaskIncrementTick+0x16c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e004      	b.n	800606c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006062:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <xTaskIncrementTick+0x170>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	4a0d      	ldr	r2, [pc, #52]	@ (80060a0 <xTaskIncrementTick+0x170>)
 800606a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800606c:	697b      	ldr	r3, [r7, #20]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000904 	.word	0x20000904
 800607c:	200008ec 	.word	0x200008ec
 8006080:	200008e4 	.word	0x200008e4
 8006084:	200008e8 	.word	0x200008e8
 8006088:	200008fc 	.word	0x200008fc
 800608c:	20000900 	.word	0x20000900
 8006090:	200008f0 	.word	0x200008f0
 8006094:	20000858 	.word	0x20000858
 8006098:	20000854 	.word	0x20000854
 800609c:	200008f8 	.word	0x200008f8
 80060a0:	200008f4 	.word	0x200008f4

080060a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060aa:	4b27      	ldr	r3, [pc, #156]	@ (8006148 <vTaskSwitchContext+0xa4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060b2:	4b26      	ldr	r3, [pc, #152]	@ (800614c <vTaskSwitchContext+0xa8>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060b8:	e040      	b.n	800613c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80060ba:	4b24      	ldr	r3, [pc, #144]	@ (800614c <vTaskSwitchContext+0xa8>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c0:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <vTaskSwitchContext+0xac>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	fab3 f383 	clz	r3, r3
 80060cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	f1c3 031f 	rsb	r3, r3, #31
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	491f      	ldr	r1, [pc, #124]	@ (8006154 <vTaskSwitchContext+0xb0>)
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <vTaskSwitchContext+0x5e>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	607b      	str	r3, [r7, #4]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <vTaskSwitchContext+0x5a>
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a11      	ldr	r2, [pc, #68]	@ (8006154 <vTaskSwitchContext+0xb0>)
 800610e:	4413      	add	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3308      	adds	r3, #8
 8006124:	429a      	cmp	r2, r3
 8006126:	d104      	bne.n	8006132 <vTaskSwitchContext+0x8e>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a07      	ldr	r2, [pc, #28]	@ (8006158 <vTaskSwitchContext+0xb4>)
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000904 	.word	0x20000904
 800614c:	200008f8 	.word	0x200008f8
 8006150:	200008f0 	.word	0x200008f0
 8006154:	20000858 	.word	0x20000858
 8006158:	20000854 	.word	0x20000854

0800615c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006162:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <prvResetNextTaskUnblockTime+0x38>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <prvResetNextTaskUnblockTime+0x3c>)
 800616e:	f04f 32ff 	mov.w	r2, #4294967295
 8006172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006174:	e008      	b.n	8006188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006176:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <prvResetNextTaskUnblockTime+0x38>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a04      	ldr	r2, [pc, #16]	@ (8006198 <prvResetNextTaskUnblockTime+0x3c>)
 8006186:	6013      	str	r3, [r2, #0]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	200008e4 	.word	0x200008e4
 8006198:	20000900 	.word	0x20000900
 800619c:	00000000 	.word	0x00000000

080061a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <pxCurrentTCBConst2>)
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	f380 8809 	msr	PSP, r0
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8811 	msr	BASEPRI, r0
 80061ba:	4770      	bx	lr
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst2>:
 80061c0:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
	...

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f01e 0f10 	tst.w	lr, #16
 80061e0:	bf08      	it	eq
 80061e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	6010      	str	r0, [r2, #0]
 80061ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061f4:	f380 8811 	msr	BASEPRI, r0
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f7ff ff50 	bl	80060a4 <vTaskSwitchContext>
 8006204:	f04f 0000 	mov.w	r0, #0
 8006208:	f380 8811 	msr	BASEPRI, r0
 800620c:	bc09      	pop	{r0, r3}
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006216:	f01e 0f10 	tst.w	lr, #16
 800621a:	bf08      	it	eq
 800621c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006220:	f380 8809 	msr	PSP, r0
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst>:
 8006230:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	607b      	str	r3, [r7, #4]
}
 8006250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006252:	f7ff fe6d 	bl	8005f30 <xTaskIncrementTick>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <SysTick_Handler+0x40>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800626e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	b21a      	sxth	r2, r3
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	b29b      	uxth	r3, r3
 8006292:	b21b      	sxth	r3, r3
 8006294:	4313      	orrs	r3, r2
 8006296:	b21b      	sxth	r3, r3
 8006298:	b29b      	uxth	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	061a      	lsls	r2, r3, #24
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	4313      	orrs	r3, r2
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d80f      	bhi.n	800631a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	4909      	ldr	r1, [pc, #36]	@ (8006328 <dns_setserver+0x40>)
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800630c:	e005      	b.n	800631a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	4905      	ldr	r1, [pc, #20]	@ (8006328 <dns_setserver+0x40>)
 8006312:	4a06      	ldr	r2, [pc, #24]	@ (800632c <dns_setserver+0x44>)
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000d88 	.word	0x20000d88
 800632c:	08017c84 	.word	0x08017c84

08006330 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8006334:	f000 faa8 	bl	8006888 <dns_check_entries>
}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}

0800633c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	@ 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	4413      	add	r3, r2
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	4a6c      	ldr	r2, [pc, #432]	@ (8006504 <dns_send+0x1c8>)
 8006352:	4413      	add	r3, r2
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	7adb      	ldrb	r3, [r3, #11]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d906      	bls.n	800636c <dns_send+0x30>
 800635e:	4b6a      	ldr	r3, [pc, #424]	@ (8006508 <dns_send+0x1cc>)
 8006360:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8006364:	4969      	ldr	r1, [pc, #420]	@ (800650c <dns_send+0x1d0>)
 8006366:	486a      	ldr	r0, [pc, #424]	@ (8006510 <dns_send+0x1d4>)
 8006368:	f00d fd9a 	bl	8013ea0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	7adb      	ldrb	r3, [r3, #11]
 8006370:	461a      	mov	r2, r3
 8006372:	4b68      	ldr	r3, [pc, #416]	@ (8006514 <dns_send+0x1d8>)
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f8cb 	bl	800651c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e0b4      	b.n	80064fa <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	3310      	adds	r3, #16
 8006394:	4618      	mov	r0, r3
 8006396:	f7f9 ff1b 	bl	80001d0 <strlen>
 800639a:	4603      	mov	r3, r0
 800639c:	b29b      	uxth	r3, r3
 800639e:	3312      	adds	r3, #18
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80063a6:	4619      	mov	r1, r3
 80063a8:	2036      	movs	r0, #54	@ 0x36
 80063aa:	f001 fc0f 	bl	8007bcc <pbuf_alloc>
 80063ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8095 	beq.w	80064e2 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80063b8:	f107 0310 	add.w	r3, r7, #16
 80063bc:	220c      	movs	r2, #12
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f00d fdd2 	bl	8013f6a <memset>
    hdr.id = lwip_htons(entry->txid);
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	891b      	ldrh	r3, [r3, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ff56 	bl	800627c <lwip_htons>
 80063d0:	4603      	mov	r3, r0
 80063d2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80063d4:	2301      	movs	r3, #1
 80063d6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80063d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063dc:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80063de:	f107 0310 	add.w	r3, r7, #16
 80063e2:	220c      	movs	r2, #12
 80063e4:	4619      	mov	r1, r3
 80063e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063e8:	f002 f97c 	bl	80086e4 <pbuf_take>
    hostname = entry->name;
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	3310      	adds	r3, #16
 80063f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	3b01      	subs	r3, #1
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80063f8:	230c      	movs	r3, #12
 80063fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	3301      	adds	r3, #1
 8006400:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006406:	2300      	movs	r3, #0
 8006408:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800640c:	e007      	b.n	800641e <dns_send+0xe2>
        ++n;
 800640e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006412:	3301      	adds	r3, #1
 8006414:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	3301      	adds	r3, #1
 800641c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b2e      	cmp	r3, #46	@ 0x2e
 8006424:	d003      	beq.n	800642e <dns_send+0xf2>
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ef      	bne.n	800640e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800642e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8006436:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006438:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800643c:	4413      	add	r3, r2
 800643e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006442:	4293      	cmp	r3, r2
 8006444:	dc53      	bgt.n	80064ee <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8006446:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800644a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800644c:	4619      	mov	r1, r3
 800644e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006450:	f002 fa76 	bl	8008940 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006454:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006456:	3301      	adds	r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800645c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800645e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006460:	f002 f9d2 	bl	8008808 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006464:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006468:	b29a      	uxth	r2, r3
 800646a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800646c:	4413      	add	r3, r2
 800646e:	b29b      	uxth	r3, r3
 8006470:	3301      	adds	r3, #1
 8006472:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1bf      	bne.n	80063fc <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800647c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800647e:	2200      	movs	r2, #0
 8006480:	4619      	mov	r1, r3
 8006482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006484:	f002 fa5c 	bl	8008940 <pbuf_put_at>
    query_idx++;
 8006488:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800648a:	3301      	adds	r3, #1
 800648c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800648e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006492:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006498:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800649a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800649c:	f107 010c 	add.w	r1, r7, #12
 80064a0:	2204      	movs	r2, #4
 80064a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064a4:	f002 f9b0 	bl	8008808 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	7bdb      	ldrb	r3, [r3, #15]
 80064ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80064b0:	2335      	movs	r3, #53	@ 0x35
 80064b2:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	7adb      	ldrb	r3, [r3, #11]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <dns_send+0x1d8>)
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80064c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c4:	4a14      	ldr	r2, [pc, #80]	@ (8006518 <dns_send+0x1dc>)
 80064c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80064ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d0:	f008 fe02 	bl	800f0d8 <udp_sendto>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 80064da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064dc:	f001 fe5a 	bl	8008194 <pbuf_free>
 80064e0:	e002      	b.n	80064e8 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 80064e2:	23ff      	movs	r3, #255	@ 0xff
 80064e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 80064e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80064ec:	e005      	b.n	80064fa <dns_send+0x1be>
        goto overflow_return;
 80064ee:	bf00      	nop
overflow_return:
  pbuf_free(p);
 80064f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064f2:	f001 fe4f 	bl	8008194 <pbuf_free>
  return ERR_VAL;
 80064f6:	f06f 0305 	mvn.w	r3, #5
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3740      	adds	r7, #64	@ 0x40
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000918 	.word	0x20000918
 8006508:	08014d6c 	.word	0x08014d6c
 800650c:	08014d9c 	.word	0x08014d9c
 8006510:	08014db4 	.word	0x08014db4
 8006514:	20000d88 	.word	0x20000d88
 8006518:	20000908 	.word	0x20000908

0800651c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
 800652c:	e03d      	b.n	80065aa <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	4957      	ldr	r1, [pc, #348]	@ (8006690 <dns_call_found+0x174>)
 8006532:	4613      	mov	r3, r2
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d030      	beq.n	80065a4 <dns_call_found+0x88>
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	4952      	ldr	r1, [pc, #328]	@ (8006690 <dns_call_found+0x174>)
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3308      	adds	r3, #8
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	79fa      	ldrb	r2, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	d124      	bne.n	80065a4 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	494c      	ldr	r1, [pc, #304]	@ (8006690 <dns_call_found+0x174>)
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	681c      	ldr	r4, [r3, #0]
 800656a:	79fa      	ldrb	r2, [r7, #7]
 800656c:	4613      	mov	r3, r2
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	4413      	add	r3, r2
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	3310      	adds	r3, #16
 8006576:	4a47      	ldr	r2, [pc, #284]	@ (8006694 <dns_call_found+0x178>)
 8006578:	1898      	adds	r0, r3, r2
 800657a:	7bfa      	ldrb	r2, [r7, #15]
 800657c:	4944      	ldr	r1, [pc, #272]	@ (8006690 <dns_call_found+0x174>)
 800657e:	4613      	mov	r3, r2
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	3304      	adds	r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006592:	7bfa      	ldrb	r2, [r7, #15]
 8006594:	493e      	ldr	r1, [pc, #248]	@ (8006690 <dns_call_found+0x174>)
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	3301      	adds	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d9be      	bls.n	800652e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]
 80065b4:	e031      	b.n	800661a <dns_call_found+0xfe>
    if (i == idx) {
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d029      	beq.n	8006612 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80065be:	7bfa      	ldrb	r2, [r7, #15]
 80065c0:	4934      	ldr	r1, [pc, #208]	@ (8006694 <dns_call_found+0x178>)
 80065c2:	4613      	mov	r3, r2
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	4413      	add	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	440b      	add	r3, r1
 80065cc:	330a      	adds	r3, #10
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d11f      	bne.n	8006614 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80065d4:	7bfa      	ldrb	r2, [r7, #15]
 80065d6:	492f      	ldr	r1, [pc, #188]	@ (8006694 <dns_call_found+0x178>)
 80065d8:	4613      	mov	r3, r2
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	440b      	add	r3, r1
 80065e2:	330f      	adds	r3, #15
 80065e4:	7819      	ldrb	r1, [r3, #0]
 80065e6:	79fa      	ldrb	r2, [r7, #7]
 80065e8:	482a      	ldr	r0, [pc, #168]	@ (8006694 <dns_call_found+0x178>)
 80065ea:	4613      	mov	r3, r2
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	4403      	add	r3, r0
 80065f4:	330f      	adds	r3, #15
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4299      	cmp	r1, r3
 80065fa:	d10b      	bne.n	8006614 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80065fc:	79fa      	ldrb	r2, [r7, #7]
 80065fe:	4925      	ldr	r1, [pc, #148]	@ (8006694 <dns_call_found+0x178>)
 8006600:	4613      	mov	r3, r2
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	4413      	add	r3, r2
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	440b      	add	r3, r1
 800660a:	330f      	adds	r3, #15
 800660c:	2204      	movs	r2, #4
 800660e:	701a      	strb	r2, [r3, #0]
        break;
 8006610:	e006      	b.n	8006620 <dns_call_found+0x104>
      continue; /* only check other requests */
 8006612:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	3301      	adds	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d9ca      	bls.n	80065b6 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	491c      	ldr	r1, [pc, #112]	@ (8006694 <dns_call_found+0x178>)
 8006624:	4613      	mov	r3, r2
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	4413      	add	r3, r2
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	440b      	add	r3, r1
 800662e:	330f      	adds	r3, #15
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d827      	bhi.n	8006686 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006636:	79fa      	ldrb	r2, [r7, #7]
 8006638:	4916      	ldr	r1, [pc, #88]	@ (8006694 <dns_call_found+0x178>)
 800663a:	4613      	mov	r3, r2
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	4413      	add	r3, r2
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	440b      	add	r3, r1
 8006644:	330f      	adds	r3, #15
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <dns_call_found+0x17c>)
 800664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006650:	4618      	mov	r0, r3
 8006652:	f009 f827 	bl	800f6a4 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8006656:	79fa      	ldrb	r2, [r7, #7]
 8006658:	490e      	ldr	r1, [pc, #56]	@ (8006694 <dns_call_found+0x178>)
 800665a:	4613      	mov	r3, r2
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	4413      	add	r3, r2
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	440b      	add	r3, r1
 8006664:	330f      	adds	r3, #15
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <dns_call_found+0x17c>)
 800666c:	2200      	movs	r2, #0
 800666e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006672:	79fa      	ldrb	r2, [r7, #7]
 8006674:	4907      	ldr	r1, [pc, #28]	@ (8006694 <dns_call_found+0x178>)
 8006676:	4613      	mov	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4413      	add	r3, r2
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	440b      	add	r3, r1
 8006680:	330f      	adds	r3, #15
 8006682:	2204      	movs	r2, #4
 8006684:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	bd90      	pop	{r4, r7, pc}
 800668e:	bf00      	nop
 8006690:	20000d58 	.word	0x20000d58
 8006694:	20000918 	.word	0x20000918
 8006698:	20000908 	.word	0x20000908

0800669c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 80066a2:	f00d fafd 	bl	8013ca0 <rand>
 80066a6:	4603      	mov	r3, r0
 80066a8:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80066aa:	2300      	movs	r3, #0
 80066ac:	71fb      	strb	r3, [r7, #7]
 80066ae:	e01a      	b.n	80066e6 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80066b0:	79fa      	ldrb	r2, [r7, #7]
 80066b2:	4911      	ldr	r1, [pc, #68]	@ (80066f8 <dns_create_txid+0x5c>)
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	4413      	add	r3, r2
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	440b      	add	r3, r1
 80066be:	330a      	adds	r3, #10
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d10c      	bne.n	80066e0 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 80066c6:	79fa      	ldrb	r2, [r7, #7]
 80066c8:	490b      	ldr	r1, [pc, #44]	@ (80066f8 <dns_create_txid+0x5c>)
 80066ca:	4613      	mov	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	4413      	add	r3, r2
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	440b      	add	r3, r1
 80066d4:	3308      	adds	r3, #8
 80066d6:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80066d8:	88ba      	ldrh	r2, [r7, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d100      	bne.n	80066e0 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 80066de:	e7e0      	b.n	80066a2 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	3301      	adds	r3, #1
 80066e4:	71fb      	strb	r3, [r7, #7]
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d9e1      	bls.n	80066b0 <dns_create_txid+0x14>
    }
  }

  return txid;
 80066ec:	88bb      	ldrh	r3, [r7, #4]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000918 	.word	0x20000918

080066fc <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7adb      	ldrb	r3, [r3, #11]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <dns_backupserver_available+0x2e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7adb      	ldrb	r3, [r3, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	4a06      	ldr	r2, [pc, #24]	@ (8006738 <dns_backupserver_available+0x3c>)
 800671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <dns_backupserver_available+0x2e>
      ret = 1;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000d88 	.word	0x20000d88

0800673c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8006746:	79fa      	ldrb	r2, [r7, #7]
 8006748:	4613      	mov	r3, r2
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4413      	add	r3, r2
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4a48      	ldr	r2, [pc, #288]	@ (8006874 <dns_check_entry+0x138>)
 8006752:	4413      	add	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d906      	bls.n	800676a <dns_check_entry+0x2e>
 800675c:	4b46      	ldr	r3, [pc, #280]	@ (8006878 <dns_check_entry+0x13c>)
 800675e:	f240 421c 	movw	r2, #1052	@ 0x41c
 8006762:	4946      	ldr	r1, [pc, #280]	@ (800687c <dns_check_entry+0x140>)
 8006764:	4846      	ldr	r0, [pc, #280]	@ (8006880 <dns_check_entry+0x144>)
 8006766:	f00d fb9b 	bl	8013ea0 <iprintf>

  switch (entry->state) {
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	7a9b      	ldrb	r3, [r3, #10]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d86f      	bhi.n	8006852 <dns_check_entry+0x116>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <dns_check_entry+0x3c>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006863 	.word	0x08006863
 800677c:	08006789 	.word	0x08006789
 8006780:	080067bb 	.word	0x080067bb
 8006784:	08006831 	.word	0x08006831
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006788:	f7ff ff88 	bl	800669c <dns_create_txid>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2202      	movs	r2, #2
 8006798:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fdc4 	bl	800633c <dns_send>
 80067b4:	4603      	mov	r3, r0
 80067b6:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 80067b8:	e058      	b.n	800686c <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	7b1b      	ldrb	r3, [r3, #12]
 80067be:	3b01      	subs	r3, #1
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	731a      	strb	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d14b      	bne.n	8006866 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7b5b      	ldrb	r3, [r3, #13]
 80067d2:	3301      	adds	r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	735a      	strb	r2, [r3, #13]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	7b5b      	ldrb	r3, [r3, #13]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d11b      	bne.n	800681a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff8a 	bl	80066fc <dns_backupserver_available>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00c      	beq.n	8006808 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7adb      	ldrb	r3, [r3, #11]
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	735a      	strb	r2, [r3, #13]
 8006806:	e00c      	b.n	8006822 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fe85 	bl	800651c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	729a      	strb	r2, [r3, #10]
            break;
 8006818:	e028      	b.n	800686c <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	7b5a      	ldrb	r2, [r3, #13]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fd89 	bl	800633c <dns_send>
 800682a:	4603      	mov	r3, r0
 800682c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800682e:	e01a      	b.n	8006866 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <dns_check_entry+0x10e>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10f      	bne.n	800686a <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	729a      	strb	r2, [r3, #10]
      }
      break;
 8006850:	e00b      	b.n	800686a <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <dns_check_entry+0x13c>)
 8006854:	f240 425b 	movw	r2, #1115	@ 0x45b
 8006858:	490a      	ldr	r1, [pc, #40]	@ (8006884 <dns_check_entry+0x148>)
 800685a:	4809      	ldr	r0, [pc, #36]	@ (8006880 <dns_check_entry+0x144>)
 800685c:	f00d fb20 	bl	8013ea0 <iprintf>
      break;
 8006860:	e004      	b.n	800686c <dns_check_entry+0x130>
      break;
 8006862:	bf00      	nop
 8006864:	e002      	b.n	800686c <dns_check_entry+0x130>
      break;
 8006866:	bf00      	nop
 8006868:	e000      	b.n	800686c <dns_check_entry+0x130>
      break;
 800686a:	bf00      	nop
  }
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000918 	.word	0x20000918
 8006878:	08014d6c 	.word	0x08014d6c
 800687c:	08014ddc 	.word	0x08014ddc
 8006880:	08014db4 	.word	0x08014db4
 8006884:	08014df8 	.word	0x08014df8

08006888 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800688e:	2300      	movs	r3, #0
 8006890:	71fb      	strb	r3, [r7, #7]
 8006892:	e006      	b.n	80068a2 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff ff50 	bl	800673c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	3301      	adds	r3, #1
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d9f5      	bls.n	8006894 <dns_check_entries+0xc>
  }
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b089      	sub	sp, #36	@ 0x24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <lwip_standard_chksum+0x40>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dd0a      	ble.n	80068f2 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	1c53      	adds	r3, r2, #1
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	f107 030e 	add.w	r3, r7, #14
 80068e6:	3301      	adds	r3, #1
 80068e8:	7812      	ldrb	r2, [r2, #0]
 80068ea:	701a      	strb	r2, [r3, #0]
    len--;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80068f6:	e00a      	b.n	800690e <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1c9a      	adds	r2, r3, #2
 80068fc:	61ba      	str	r2, [r7, #24]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	3b02      	subs	r3, #2
 800690c:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	dcf1      	bgt.n	80068f8 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd04      	ble.n	8006924 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800691a:	f107 030e 	add.w	r3, r7, #14
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	461a      	mov	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4413      	add	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	0c1a      	lsrs	r2, r3, #16
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	b29b      	uxth	r3, r3
 8006936:	4413      	add	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	0c1a      	lsrs	r2, r3, #16
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	b29b      	uxth	r3, r3
 8006942:	4413      	add	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	b29a      	uxth	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	0a1b      	lsrs	r3, r3, #8
 8006956:	b2db      	uxtb	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	b29b      	uxth	r3, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	3724      	adds	r7, #36	@ 0x24
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	72fb      	strb	r3, [r7, #11]
 800697a:	4613      	mov	r3, r2
 800697c:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	e02b      	b.n	80069e0 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	895b      	ldrh	r3, [r3, #10]
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7ff ff8d 	bl	80068b2 <lwip_standard_chksum>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4413      	add	r3, r2
 80069a0:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0c1a      	lsrs	r2, r3, #16
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	895b      	ldrh	r3, [r3, #10]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00e      	beq.n	80069da <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bf0c      	ite	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	2300      	movne	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1d0      	bne.n	8006988 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fc3b 	bl	800627c <lwip_htons>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8006a10:	893b      	ldrh	r3, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fc32 	bl	800627c <lwip_htons>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4413      	add	r3, r2
 8006a20:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	0c1a      	lsrs	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0c1a      	lsrs	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	b29b      	uxth	r3, r3
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	72fb      	strb	r3, [r7, #11]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	0c1a      	lsrs	r2, r3, #16
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	0c1a      	lsrs	r2, r3, #16
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8006aa4:	893a      	ldrh	r2, [r7, #8]
 8006aa6:	7af9      	ldrb	r1, [r7, #11]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7ff ff5e 	bl	800696c <inet_cksum_pseudo_base>
 8006ab0:	4603      	mov	r3, r0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af02      	add	r7, sp, #8
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	72fb      	strb	r3, [r7, #11]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8006acc:	893a      	ldrh	r2, [r7, #8]
 8006ace:	7af9      	ldrb	r1, [r7, #11]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff ffb7 	bl	8006a4a <inet_chksum_pseudo>
 8006adc:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fedb 	bl	80068b2 <lwip_standard_chksum>
 8006afc:	4603      	mov	r3, r0
 8006afe:	43db      	mvns	r3, r3
 8006b00:	b29b      	uxth	r3, r3
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	e02b      	b.n	8006b78 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	895b      	ldrh	r3, [r3, #10]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7ff fec1 	bl	80068b2 <lwip_standard_chksum>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	0c1a      	lsrs	r2, r3, #16
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	895b      	ldrh	r3, [r3, #10]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00e      	beq.n	8006b72 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1d0      	bne.n	8006b20 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	b29b      	uxth	r3, r3
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006bae:	f000 f8d7 	bl	8006d60 <mem_init>
  memp_init();
 8006bb2:	f000 fbdd 	bl	8007370 <memp_init>
  pbuf_init();
  netif_init();
 8006bb6:	f000 fc95 	bl	80074e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006bba:	f008 f8b3 	bl	800ed24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006bbe:	f001 fee1 	bl	8008984 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8006bc2:	f7ff fb89 	bl	80062d8 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006bc6:	f008 f823 	bl	800ec10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <ptr_to_mem+0x20>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	4413      	add	r3, r2
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200013fc 	.word	0x200013fc

08006bf8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <mem_to_ptr+0x20>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	b29b      	uxth	r3, r3
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200013fc 	.word	0x200013fc

08006c1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006c24:	4b45      	ldr	r3, [pc, #276]	@ (8006d3c <plug_holes+0x120>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d206      	bcs.n	8006c3c <plug_holes+0x20>
 8006c2e:	4b44      	ldr	r3, [pc, #272]	@ (8006d40 <plug_holes+0x124>)
 8006c30:	f240 12df 	movw	r2, #479	@ 0x1df
 8006c34:	4943      	ldr	r1, [pc, #268]	@ (8006d44 <plug_holes+0x128>)
 8006c36:	4844      	ldr	r0, [pc, #272]	@ (8006d48 <plug_holes+0x12c>)
 8006c38:	f00d f932 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006c3c:	4b43      	ldr	r3, [pc, #268]	@ (8006d4c <plug_holes+0x130>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d306      	bcc.n	8006c54 <plug_holes+0x38>
 8006c46:	4b3e      	ldr	r3, [pc, #248]	@ (8006d40 <plug_holes+0x124>)
 8006c48:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006c4c:	4940      	ldr	r1, [pc, #256]	@ (8006d50 <plug_holes+0x134>)
 8006c4e:	483e      	ldr	r0, [pc, #248]	@ (8006d48 <plug_holes+0x12c>)
 8006c50:	f00d f926 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <plug_holes+0x4e>
 8006c5c:	4b38      	ldr	r3, [pc, #224]	@ (8006d40 <plug_holes+0x124>)
 8006c5e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006c62:	493c      	ldr	r1, [pc, #240]	@ (8006d54 <plug_holes+0x138>)
 8006c64:	4838      	ldr	r0, [pc, #224]	@ (8006d48 <plug_holes+0x12c>)
 8006c66:	f00d f91b 	bl	8013ea0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c72:	d906      	bls.n	8006c82 <plug_holes+0x66>
 8006c74:	4b32      	ldr	r3, [pc, #200]	@ (8006d40 <plug_holes+0x124>)
 8006c76:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006c7a:	4937      	ldr	r1, [pc, #220]	@ (8006d58 <plug_holes+0x13c>)
 8006c7c:	4832      	ldr	r0, [pc, #200]	@ (8006d48 <plug_holes+0x12c>)
 8006c7e:	f00d f90f 	bl	8013ea0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff ffa4 	bl	8006bd4 <ptr_to_mem>
 8006c8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d024      	beq.n	8006ce0 <plug_holes+0xc4>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	791b      	ldrb	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d120      	bne.n	8006ce0 <plug_holes+0xc4>
 8006c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006d4c <plug_holes+0x130>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d01b      	beq.n	8006ce0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8006d5c <plug_holes+0x140>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d102      	bne.n	8006cb8 <plug_holes+0x9c>
      lfree = mem;
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d5c <plug_holes+0x140>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006cc8:	d00a      	beq.n	8006ce0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ff80 	bl	8006bd4 <ptr_to_mem>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff8e 	bl	8006bf8 <mem_to_ptr>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	885b      	ldrh	r3, [r3, #2]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff75 	bl	8006bd4 <ptr_to_mem>
 8006cea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d01f      	beq.n	8006d34 <plug_holes+0x118>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	791b      	ldrb	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d11b      	bne.n	8006d34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006cfc:	4b17      	ldr	r3, [pc, #92]	@ (8006d5c <plug_holes+0x140>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d102      	bne.n	8006d0c <plug_holes+0xf0>
      lfree = pmem;
 8006d06:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <plug_holes+0x140>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006d1c:	d00a      	beq.n	8006d34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff ff56 	bl	8006bd4 <ptr_to_mem>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	68b8      	ldr	r0, [r7, #8]
 8006d2c:	f7ff ff64 	bl	8006bf8 <mem_to_ptr>
 8006d30:	4603      	mov	r3, r0
 8006d32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd90      	pop	{r4, r7, pc}
 8006d3c:	200013fc 	.word	0x200013fc
 8006d40:	08014e18 	.word	0x08014e18
 8006d44:	08014e48 	.word	0x08014e48
 8006d48:	08014e60 	.word	0x08014e60
 8006d4c:	20001400 	.word	0x20001400
 8006d50:	08014e88 	.word	0x08014e88
 8006d54:	08014ea4 	.word	0x08014ea4
 8006d58:	08014ec0 	.word	0x08014ec0
 8006d5c:	20001404 	.word	0x20001404

08006d60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006d66:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <mem_init+0x68>)
 8006d68:	3303      	adds	r3, #3
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	4b16      	ldr	r3, [pc, #88]	@ (8006dcc <mem_init+0x6c>)
 8006d72:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006d74:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <mem_init+0x6c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006d80:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006d8e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8006d92:	f7ff ff1f 	bl	8006bd4 <ptr_to_mem>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd0 <mem_init+0x70>)
 8006d9a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <mem_init+0x70>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2201      	movs	r2, #1
 8006da2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <mem_init+0x70>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006dac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006dae:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <mem_init+0x70>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006db6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006db8:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <mem_init+0x6c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a05      	ldr	r2, [pc, #20]	@ (8006dd4 <mem_init+0x74>)
 8006dbe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000da8 	.word	0x20000da8
 8006dcc:	200013fc 	.word	0x200013fc
 8006dd0:	20001400 	.word	0x20001400
 8006dd4:	20001404 	.word	0x20001404

08006dd8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ff09 	bl	8006bf8 <mem_to_ptr>
 8006de6:	4603      	mov	r3, r0
 8006de8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fef0 	bl	8006bd4 <ptr_to_mem>
 8006df4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	885b      	ldrh	r3, [r3, #2]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff feea 	bl	8006bd4 <ptr_to_mem>
 8006e00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006e0a:	d818      	bhi.n	8006e3e <mem_link_valid+0x66>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	885b      	ldrh	r3, [r3, #2]
 8006e10:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006e14:	d813      	bhi.n	8006e3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006e1a:	8afa      	ldrh	r2, [r7, #22]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d004      	beq.n	8006e2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	8afa      	ldrh	r2, [r7, #22]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d109      	bne.n	8006e3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006e2a:	4b08      	ldr	r3, [pc, #32]	@ (8006e4c <mem_link_valid+0x74>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d006      	beq.n	8006e42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	8afa      	ldrh	r2, [r7, #22]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d001      	beq.n	8006e42 <mem_link_valid+0x6a>
    return 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e000      	b.n	8006e44 <mem_link_valid+0x6c>
  }
  return 1;
 8006e42:	2301      	movs	r3, #1
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20001400 	.word	0x20001400

08006e50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04c      	beq.n	8006ef8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006e68:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <mem_free+0xb0>)
 8006e6a:	f240 2273 	movw	r2, #627	@ 0x273
 8006e6e:	4925      	ldr	r1, [pc, #148]	@ (8006f04 <mem_free+0xb4>)
 8006e70:	4825      	ldr	r0, [pc, #148]	@ (8006f08 <mem_free+0xb8>)
 8006e72:	f00d f815 	bl	8013ea0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006e76:	e040      	b.n	8006efa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3b08      	subs	r3, #8
 8006e7c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006e7e:	4b23      	ldr	r3, [pc, #140]	@ (8006f0c <mem_free+0xbc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d306      	bcc.n	8006e96 <mem_free+0x46>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f103 020c 	add.w	r2, r3, #12
 8006e8e:	4b20      	ldr	r3, [pc, #128]	@ (8006f10 <mem_free+0xc0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d907      	bls.n	8006ea6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006e96:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <mem_free+0xb0>)
 8006e98:	f240 227f 	movw	r2, #639	@ 0x27f
 8006e9c:	491d      	ldr	r1, [pc, #116]	@ (8006f14 <mem_free+0xc4>)
 8006e9e:	481a      	ldr	r0, [pc, #104]	@ (8006f08 <mem_free+0xb8>)
 8006ea0:	f00c fffe 	bl	8013ea0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ea4:	e029      	b.n	8006efa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006eae:	4b14      	ldr	r3, [pc, #80]	@ (8006f00 <mem_free+0xb0>)
 8006eb0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006eb4:	4918      	ldr	r1, [pc, #96]	@ (8006f18 <mem_free+0xc8>)
 8006eb6:	4814      	ldr	r0, [pc, #80]	@ (8006f08 <mem_free+0xb8>)
 8006eb8:	f00c fff2 	bl	8013ea0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ebc:	e01d      	b.n	8006efa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff ff8a 	bl	8006dd8 <mem_link_valid>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <mem_free+0xb0>)
 8006ecc:	f240 2295 	movw	r2, #661	@ 0x295
 8006ed0:	4912      	ldr	r1, [pc, #72]	@ (8006f1c <mem_free+0xcc>)
 8006ed2:	480d      	ldr	r0, [pc, #52]	@ (8006f08 <mem_free+0xb8>)
 8006ed4:	f00c ffe4 	bl	8013ea0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006ed8:	e00f      	b.n	8006efa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f20 <mem_free+0xd0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d202      	bcs.n	8006ef0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006eea:	4a0d      	ldr	r2, [pc, #52]	@ (8006f20 <mem_free+0xd0>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff fe93 	bl	8006c1c <plug_holes>
 8006ef6:	e000      	b.n	8006efa <mem_free+0xaa>
    return;
 8006ef8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08014e18 	.word	0x08014e18
 8006f04:	08014eec 	.word	0x08014eec
 8006f08:	08014e60 	.word	0x08014e60
 8006f0c:	200013fc 	.word	0x200013fc
 8006f10:	20001400 	.word	0x20001400
 8006f14:	08014f10 	.word	0x08014f10
 8006f18:	08014f2c 	.word	0x08014f2c
 8006f1c:	08014f54 	.word	0x08014f54
 8006f20:	20001404 	.word	0x20001404

08006f24 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006f30:	887b      	ldrh	r3, [r7, #2]
 8006f32:	3303      	adds	r3, #3
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006f3c:	8bfb      	ldrh	r3, [r7, #30]
 8006f3e:	2b0b      	cmp	r3, #11
 8006f40:	d801      	bhi.n	8006f46 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006f42:	230c      	movs	r3, #12
 8006f44:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006f46:	8bfb      	ldrh	r3, [r7, #30]
 8006f48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f4c:	d803      	bhi.n	8006f56 <mem_trim+0x32>
 8006f4e:	8bfa      	ldrh	r2, [r7, #30]
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d201      	bcs.n	8006f5a <mem_trim+0x36>
    return NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e0cc      	b.n	80070f4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006f5a:	4b68      	ldr	r3, [pc, #416]	@ (80070fc <mem_trim+0x1d8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d304      	bcc.n	8006f6e <mem_trim+0x4a>
 8006f64:	4b66      	ldr	r3, [pc, #408]	@ (8007100 <mem_trim+0x1dc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d306      	bcc.n	8006f7c <mem_trim+0x58>
 8006f6e:	4b65      	ldr	r3, [pc, #404]	@ (8007104 <mem_trim+0x1e0>)
 8006f70:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006f74:	4964      	ldr	r1, [pc, #400]	@ (8007108 <mem_trim+0x1e4>)
 8006f76:	4865      	ldr	r0, [pc, #404]	@ (800710c <mem_trim+0x1e8>)
 8006f78:	f00c ff92 	bl	8013ea0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80070fc <mem_trim+0x1d8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d304      	bcc.n	8006f90 <mem_trim+0x6c>
 8006f86:	4b5e      	ldr	r3, [pc, #376]	@ (8007100 <mem_trim+0x1dc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d301      	bcc.n	8006f94 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	e0af      	b.n	80070f4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3b08      	subs	r3, #8
 8006f98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f7ff fe2c 	bl	8006bf8 <mem_to_ptr>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	881a      	ldrh	r2, [r3, #0]
 8006fa8:	8afb      	ldrh	r3, [r7, #22]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b08      	subs	r3, #8
 8006fb0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006fb2:	8bfa      	ldrh	r2, [r7, #30]
 8006fb4:	8abb      	ldrh	r3, [r7, #20]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d906      	bls.n	8006fc8 <mem_trim+0xa4>
 8006fba:	4b52      	ldr	r3, [pc, #328]	@ (8007104 <mem_trim+0x1e0>)
 8006fbc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006fc0:	4953      	ldr	r1, [pc, #332]	@ (8007110 <mem_trim+0x1ec>)
 8006fc2:	4852      	ldr	r0, [pc, #328]	@ (800710c <mem_trim+0x1e8>)
 8006fc4:	f00c ff6c 	bl	8013ea0 <iprintf>
  if (newsize > size) {
 8006fc8:	8bfa      	ldrh	r2, [r7, #30]
 8006fca:	8abb      	ldrh	r3, [r7, #20]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d901      	bls.n	8006fd4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e08f      	b.n	80070f4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006fd4:	8bfa      	ldrh	r2, [r7, #30]
 8006fd6:	8abb      	ldrh	r3, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d101      	bne.n	8006fe0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	e089      	b.n	80070f4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fdf5 	bl	8006bd4 <ptr_to_mem>
 8006fea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d13f      	bne.n	8007074 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006ffc:	d106      	bne.n	800700c <mem_trim+0xe8>
 8006ffe:	4b41      	ldr	r3, [pc, #260]	@ (8007104 <mem_trim+0x1e0>)
 8007000:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007004:	4943      	ldr	r1, [pc, #268]	@ (8007114 <mem_trim+0x1f0>)
 8007006:	4841      	ldr	r0, [pc, #260]	@ (800710c <mem_trim+0x1e8>)
 8007008:	f00c ff4a 	bl	8013ea0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007012:	8afa      	ldrh	r2, [r7, #22]
 8007014:	8bfb      	ldrh	r3, [r7, #30]
 8007016:	4413      	add	r3, r2
 8007018:	b29b      	uxth	r3, r3
 800701a:	3308      	adds	r3, #8
 800701c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800701e:	4b3e      	ldr	r3, [pc, #248]	@ (8007118 <mem_trim+0x1f4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d106      	bne.n	8007036 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007028:	89fb      	ldrh	r3, [r7, #14]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fdd2 	bl	8006bd4 <ptr_to_mem>
 8007030:	4603      	mov	r3, r0
 8007032:	4a39      	ldr	r2, [pc, #228]	@ (8007118 <mem_trim+0x1f4>)
 8007034:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007036:	89fb      	ldrh	r3, [r7, #14]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fdcb 	bl	8006bd4 <ptr_to_mem>
 800703e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2200      	movs	r2, #0
 8007044:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	89ba      	ldrh	r2, [r7, #12]
 800704a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	8afa      	ldrh	r2, [r7, #22]
 8007050:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	89fa      	ldrh	r2, [r7, #14]
 8007056:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007060:	d047      	beq.n	80070f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fdb4 	bl	8006bd4 <ptr_to_mem>
 800706c:	4602      	mov	r2, r0
 800706e:	89fb      	ldrh	r3, [r7, #14]
 8007070:	8053      	strh	r3, [r2, #2]
 8007072:	e03e      	b.n	80070f2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007074:	8bfb      	ldrh	r3, [r7, #30]
 8007076:	f103 0214 	add.w	r2, r3, #20
 800707a:	8abb      	ldrh	r3, [r7, #20]
 800707c:	429a      	cmp	r2, r3
 800707e:	d838      	bhi.n	80070f2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007080:	8afa      	ldrh	r2, [r7, #22]
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	4413      	add	r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	3308      	adds	r3, #8
 800708a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007094:	d106      	bne.n	80070a4 <mem_trim+0x180>
 8007096:	4b1b      	ldr	r3, [pc, #108]	@ (8007104 <mem_trim+0x1e0>)
 8007098:	f240 3216 	movw	r2, #790	@ 0x316
 800709c:	491d      	ldr	r1, [pc, #116]	@ (8007114 <mem_trim+0x1f0>)
 800709e:	481b      	ldr	r0, [pc, #108]	@ (800710c <mem_trim+0x1e8>)
 80070a0:	f00c fefe 	bl	8013ea0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80070a4:	89fb      	ldrh	r3, [r7, #14]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fd94 	bl	8006bd4 <ptr_to_mem>
 80070ac:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80070ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <mem_trim+0x1f4>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d202      	bcs.n	80070be <mem_trim+0x19a>
      lfree = mem2;
 80070b8:	4a17      	ldr	r2, [pc, #92]	@ (8007118 <mem_trim+0x1f4>)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2200      	movs	r2, #0
 80070c2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	8afa      	ldrh	r2, [r7, #22]
 80070d0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	89fa      	ldrh	r2, [r7, #14]
 80070d6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80070e0:	d007      	beq.n	80070f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fd74 	bl	8006bd4 <ptr_to_mem>
 80070ec:	4602      	mov	r2, r0
 80070ee:	89fb      	ldrh	r3, [r7, #14]
 80070f0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80070f2:	687b      	ldr	r3, [r7, #4]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	200013fc 	.word	0x200013fc
 8007100:	20001400 	.word	0x20001400
 8007104:	08014e18 	.word	0x08014e18
 8007108:	08014f88 	.word	0x08014f88
 800710c:	08014e60 	.word	0x08014e60
 8007110:	08014fa0 	.word	0x08014fa0
 8007114:	08014fc0 	.word	0x08014fc0
 8007118:	20001404 	.word	0x20001404

0800711c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <mem_malloc+0x14>
    return NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	e0d9      	b.n	80072e4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007130:	88fb      	ldrh	r3, [r7, #6]
 8007132:	3303      	adds	r3, #3
 8007134:	b29b      	uxth	r3, r3
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800713c:	8bbb      	ldrh	r3, [r7, #28]
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d801      	bhi.n	8007146 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007142:	230c      	movs	r3, #12
 8007144:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007146:	8bbb      	ldrh	r3, [r7, #28]
 8007148:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800714c:	d803      	bhi.n	8007156 <mem_malloc+0x3a>
 800714e:	8bba      	ldrh	r2, [r7, #28]
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	429a      	cmp	r2, r3
 8007154:	d201      	bcs.n	800715a <mem_malloc+0x3e>
    return NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	e0c4      	b.n	80072e4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800715a:	4b64      	ldr	r3, [pc, #400]	@ (80072ec <mem_malloc+0x1d0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fd4a 	bl	8006bf8 <mem_to_ptr>
 8007164:	4603      	mov	r3, r0
 8007166:	83fb      	strh	r3, [r7, #30]
 8007168:	e0b4      	b.n	80072d4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800716a:	8bfb      	ldrh	r3, [r7, #30]
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fd31 	bl	8006bd4 <ptr_to_mem>
 8007172:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 80a4 	bne.w	80072c6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	8bfb      	ldrh	r3, [r7, #30]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f1a3 0208 	sub.w	r2, r3, #8
 800718c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800718e:	429a      	cmp	r2, r3
 8007190:	f0c0 8099 	bcc.w	80072c6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	8bfb      	ldrh	r3, [r7, #30]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f1a3 0208 	sub.w	r2, r3, #8
 80071a2:	8bbb      	ldrh	r3, [r7, #28]
 80071a4:	3314      	adds	r3, #20
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d333      	bcc.n	8007212 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80071aa:	8bfa      	ldrh	r2, [r7, #30]
 80071ac:	8bbb      	ldrh	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3308      	adds	r3, #8
 80071b4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80071b6:	8a7b      	ldrh	r3, [r7, #18]
 80071b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071bc:	d106      	bne.n	80071cc <mem_malloc+0xb0>
 80071be:	4b4c      	ldr	r3, [pc, #304]	@ (80072f0 <mem_malloc+0x1d4>)
 80071c0:	f240 3287 	movw	r2, #903	@ 0x387
 80071c4:	494b      	ldr	r1, [pc, #300]	@ (80072f4 <mem_malloc+0x1d8>)
 80071c6:	484c      	ldr	r0, [pc, #304]	@ (80072f8 <mem_malloc+0x1dc>)
 80071c8:	f00c fe6a 	bl	8013ea0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80071cc:	8a7b      	ldrh	r3, [r7, #18]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fd00 	bl	8006bd4 <ptr_to_mem>
 80071d4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8bfa      	ldrh	r2, [r7, #30]
 80071e8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	8a7a      	ldrh	r2, [r7, #18]
 80071ee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2201      	movs	r2, #1
 80071f4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071fe:	d00b      	beq.n	8007218 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fce5 	bl	8006bd4 <ptr_to_mem>
 800720a:	4602      	mov	r2, r0
 800720c:	8a7b      	ldrh	r3, [r7, #18]
 800720e:	8053      	strh	r3, [r2, #2]
 8007210:	e002      	b.n	8007218 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2201      	movs	r2, #1
 8007216:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007218:	4b34      	ldr	r3, [pc, #208]	@ (80072ec <mem_malloc+0x1d0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	429a      	cmp	r2, r3
 8007220:	d127      	bne.n	8007272 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007222:	4b32      	ldr	r3, [pc, #200]	@ (80072ec <mem_malloc+0x1d0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007228:	e005      	b.n	8007236 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fcd0 	bl	8006bd4 <ptr_to_mem>
 8007234:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	791b      	ldrb	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <mem_malloc+0x12c>
 800723e:	4b2f      	ldr	r3, [pc, #188]	@ (80072fc <mem_malloc+0x1e0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d1f0      	bne.n	800722a <mem_malloc+0x10e>
          }
          lfree = cur;
 8007248:	4a28      	ldr	r2, [pc, #160]	@ (80072ec <mem_malloc+0x1d0>)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800724e:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <mem_malloc+0x1d0>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b2a      	ldr	r3, [pc, #168]	@ (80072fc <mem_malloc+0x1e0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d00b      	beq.n	8007272 <mem_malloc+0x156>
 800725a:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <mem_malloc+0x1d0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d006      	beq.n	8007272 <mem_malloc+0x156>
 8007264:	4b22      	ldr	r3, [pc, #136]	@ (80072f0 <mem_malloc+0x1d4>)
 8007266:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800726a:	4925      	ldr	r1, [pc, #148]	@ (8007300 <mem_malloc+0x1e4>)
 800726c:	4822      	ldr	r0, [pc, #136]	@ (80072f8 <mem_malloc+0x1dc>)
 800726e:	f00c fe17 	bl	8013ea0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007272:	8bba      	ldrh	r2, [r7, #28]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	4413      	add	r3, r2
 8007278:	3308      	adds	r3, #8
 800727a:	4a20      	ldr	r2, [pc, #128]	@ (80072fc <mem_malloc+0x1e0>)
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	4293      	cmp	r3, r2
 8007280:	d906      	bls.n	8007290 <mem_malloc+0x174>
 8007282:	4b1b      	ldr	r3, [pc, #108]	@ (80072f0 <mem_malloc+0x1d4>)
 8007284:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007288:	491e      	ldr	r1, [pc, #120]	@ (8007304 <mem_malloc+0x1e8>)
 800728a:	481b      	ldr	r0, [pc, #108]	@ (80072f8 <mem_malloc+0x1dc>)
 800728c:	f00c fe08 	bl	8013ea0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <mem_malloc+0x18c>
 800729a:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <mem_malloc+0x1d4>)
 800729c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80072a0:	4919      	ldr	r1, [pc, #100]	@ (8007308 <mem_malloc+0x1ec>)
 80072a2:	4815      	ldr	r0, [pc, #84]	@ (80072f8 <mem_malloc+0x1dc>)
 80072a4:	f00c fdfc 	bl	8013ea0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d006      	beq.n	80072c0 <mem_malloc+0x1a4>
 80072b2:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <mem_malloc+0x1d4>)
 80072b4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80072b8:	4914      	ldr	r1, [pc, #80]	@ (800730c <mem_malloc+0x1f0>)
 80072ba:	480f      	ldr	r0, [pc, #60]	@ (80072f8 <mem_malloc+0x1dc>)
 80072bc:	f00c fdf0 	bl	8013ea0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3308      	adds	r3, #8
 80072c4:	e00e      	b.n	80072e4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80072c6:	8bfb      	ldrh	r3, [r7, #30]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff fc83 	bl	8006bd4 <ptr_to_mem>
 80072ce:	4603      	mov	r3, r0
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80072d4:	8bfa      	ldrh	r2, [r7, #30]
 80072d6:	8bbb      	ldrh	r3, [r7, #28]
 80072d8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80072dc:	429a      	cmp	r2, r3
 80072de:	f4ff af44 	bcc.w	800716a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20001404 	.word	0x20001404
 80072f0:	08014e18 	.word	0x08014e18
 80072f4:	08014fc0 	.word	0x08014fc0
 80072f8:	08014e60 	.word	0x08014e60
 80072fc:	20001400 	.word	0x20001400
 8007300:	08014fd4 	.word	0x08014fd4
 8007304:	08014ff0 	.word	0x08014ff0
 8007308:	08015020 	.word	0x08015020
 800730c:	08015050 	.word	0x08015050

08007310 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	3303      	adds	r3, #3
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e011      	b.n	8007356 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	885b      	ldrh	r3, [r3, #2]
 800735a:	461a      	mov	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4293      	cmp	r3, r2
 8007360:	dbe7      	blt.n	8007332 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007376:	2300      	movs	r3, #0
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	e009      	b.n	8007390 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <memp_init+0x30>)
 8007380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ffc3 	bl	8007310 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	3301      	adds	r3, #1
 800738e:	80fb      	strh	r3, [r7, #6]
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	2b08      	cmp	r3, #8
 8007394:	d9f2      	bls.n	800737c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	08017c08 	.word	0x08017c08

080073a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d012      	beq.n	80073e0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d006      	beq.n	80073dc <do_memp_malloc_pool+0x38>
 80073ce:	4b07      	ldr	r3, [pc, #28]	@ (80073ec <do_memp_malloc_pool+0x48>)
 80073d0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80073d4:	4906      	ldr	r1, [pc, #24]	@ (80073f0 <do_memp_malloc_pool+0x4c>)
 80073d6:	4807      	ldr	r0, [pc, #28]	@ (80073f4 <do_memp_malloc_pool+0x50>)
 80073d8:	f00c fd62 	bl	8013ea0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	e000      	b.n	80073e2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	08015074 	.word	0x08015074
 80073f0:	080150a4 	.word	0x080150a4
 80073f4:	080150c8 	.word	0x080150c8

080073f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d908      	bls.n	800741a <memp_malloc+0x22>
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <memp_malloc+0x3c>)
 800740a:	f240 1257 	movw	r2, #343	@ 0x157
 800740e:	490a      	ldr	r1, [pc, #40]	@ (8007438 <memp_malloc+0x40>)
 8007410:	480a      	ldr	r0, [pc, #40]	@ (800743c <memp_malloc+0x44>)
 8007412:	f00c fd45 	bl	8013ea0 <iprintf>
 8007416:	2300      	movs	r3, #0
 8007418:	e008      	b.n	800742c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4a08      	ldr	r2, [pc, #32]	@ (8007440 <memp_malloc+0x48>)
 800741e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ffbe 	bl	80073a4 <do_memp_malloc_pool>
 8007428:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	08015074 	.word	0x08015074
 8007438:	08015104 	.word	0x08015104
 800743c:	080150c8 	.word	0x080150c8
 8007440:	08017c08 	.word	0x08017c08

08007444 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <do_memp_free_pool+0x22>
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <do_memp_free_pool+0x40>)
 800745a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800745e:	490a      	ldr	r1, [pc, #40]	@ (8007488 <do_memp_free_pool+0x44>)
 8007460:	480a      	ldr	r0, [pc, #40]	@ (800748c <do_memp_free_pool+0x48>)
 8007462:	f00c fd1d 	bl	8013ea0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	08015074 	.word	0x08015074
 8007488:	08015124 	.word	0x08015124
 800748c:	080150c8 	.word	0x080150c8

08007490 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	6039      	str	r1, [r7, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d907      	bls.n	80074b2 <memp_free+0x22>
 80074a2:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <memp_free+0x44>)
 80074a4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80074a8:	490b      	ldr	r1, [pc, #44]	@ (80074d8 <memp_free+0x48>)
 80074aa:	480c      	ldr	r0, [pc, #48]	@ (80074dc <memp_free+0x4c>)
 80074ac:	f00c fcf8 	bl	8013ea0 <iprintf>
 80074b0:	e00c      	b.n	80074cc <memp_free+0x3c>

  if (mem == NULL) {
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	4a09      	ldr	r2, [pc, #36]	@ (80074e0 <memp_free+0x50>)
 80074bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff ffbe 	bl	8007444 <do_memp_free_pool>
 80074c8:	e000      	b.n	80074cc <memp_free+0x3c>
    return;
 80074ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	08015074 	.word	0x08015074
 80074d8:	08015144 	.word	0x08015144
 80074dc:	080150c8 	.word	0x080150c8
 80074e0:	08017c08 	.word	0x08017c08

080074e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <netif_add+0x26>
 8007508:	4b5b      	ldr	r3, [pc, #364]	@ (8007678 <netif_add+0x184>)
 800750a:	f240 1227 	movw	r2, #295	@ 0x127
 800750e:	495b      	ldr	r1, [pc, #364]	@ (800767c <netif_add+0x188>)
 8007510:	485b      	ldr	r0, [pc, #364]	@ (8007680 <netif_add+0x18c>)
 8007512:	f00c fcc5 	bl	8013ea0 <iprintf>
 8007516:	2300      	movs	r3, #0
 8007518:	e0a9      	b.n	800766e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d108      	bne.n	8007532 <netif_add+0x3e>
 8007520:	4b55      	ldr	r3, [pc, #340]	@ (8007678 <netif_add+0x184>)
 8007522:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007526:	4957      	ldr	r1, [pc, #348]	@ (8007684 <netif_add+0x190>)
 8007528:	4855      	ldr	r0, [pc, #340]	@ (8007680 <netif_add+0x18c>)
 800752a:	f00c fcb9 	bl	8013ea0 <iprintf>
 800752e:	2300      	movs	r3, #0
 8007530:	e09d      	b.n	800766e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007538:	4b53      	ldr	r3, [pc, #332]	@ (8007688 <netif_add+0x194>)
 800753a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007542:	4b51      	ldr	r3, [pc, #324]	@ (8007688 <netif_add+0x194>)
 8007544:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800754c:	4b4e      	ldr	r3, [pc, #312]	@ (8007688 <netif_add+0x194>)
 800754e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4a49      	ldr	r2, [pc, #292]	@ (800768c <netif_add+0x198>)
 8007566:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3324      	adds	r3, #36	@ 0x24
 800757a:	2204      	movs	r2, #4
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f00c fcf3 	bl	8013f6a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007590:	4b3f      	ldr	r3, [pc, #252]	@ (8007690 <netif_add+0x19c>)
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800759e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f914 	bl	80077d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <netif_add+0xc8>
    return NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	e058      	b.n	800766e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075c2:	2bff      	cmp	r3, #255	@ 0xff
 80075c4:	d103      	bne.n	80075ce <netif_add+0xda>
        netif->num = 0;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075d2:	4b30      	ldr	r3, [pc, #192]	@ (8007694 <netif_add+0x1a0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e02b      	b.n	8007632 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d106      	bne.n	80075f0 <netif_add+0xfc>
 80075e2:	4b25      	ldr	r3, [pc, #148]	@ (8007678 <netif_add+0x184>)
 80075e4:	f240 128b 	movw	r2, #395	@ 0x18b
 80075e8:	492b      	ldr	r1, [pc, #172]	@ (8007698 <netif_add+0x1a4>)
 80075ea:	4825      	ldr	r0, [pc, #148]	@ (8007680 <netif_add+0x18c>)
 80075ec:	f00c fc58 	bl	8013ea0 <iprintf>
        num_netifs++;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3301      	adds	r3, #1
 80075f4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2bff      	cmp	r3, #255	@ 0xff
 80075fa:	dd06      	ble.n	800760a <netif_add+0x116>
 80075fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007678 <netif_add+0x184>)
 80075fe:	f240 128d 	movw	r2, #397	@ 0x18d
 8007602:	4926      	ldr	r1, [pc, #152]	@ (800769c <netif_add+0x1a8>)
 8007604:	481e      	ldr	r0, [pc, #120]	@ (8007680 <netif_add+0x18c>)
 8007606:	f00c fc4b 	bl	8013ea0 <iprintf>
        if (netif2->num == netif->num) {
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007616:	429a      	cmp	r2, r3
 8007618:	d108      	bne.n	800762c <netif_add+0x138>
          netif->num++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007620:	3301      	adds	r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800762a:	e005      	b.n	8007638 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1d0      	bne.n	80075da <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1be      	bne.n	80075bc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007644:	2bfe      	cmp	r3, #254	@ 0xfe
 8007646:	d103      	bne.n	8007650 <netif_add+0x15c>
    netif_num = 0;
 8007648:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <netif_add+0x19c>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e006      	b.n	800765e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007656:	3301      	adds	r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <netif_add+0x19c>)
 800765c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <netif_add+0x1a0>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007666:	4a0b      	ldr	r2, [pc, #44]	@ (8007694 <netif_add+0x1a0>)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800766c:	68fb      	ldr	r3, [r7, #12]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	08015160 	.word	0x08015160
 800767c:	080151f4 	.word	0x080151f4
 8007680:	080151b0 	.word	0x080151b0
 8007684:	08015210 	.word	0x08015210
 8007688:	08017c84 	.word	0x08017c84
 800768c:	08007ab7 	.word	0x08007ab7
 8007690:	2000432c 	.word	0x2000432c
 8007694:	20004324 	.word	0x20004324
 8007698:	08015234 	.word	0x08015234
 800769c:	08015248 	.word	0x08015248

080076a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f002 ff53 	bl	800a558 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f008 f84f 	bl	800f758 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <netif_do_set_ipaddr+0x20>
 80076d6:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <netif_do_set_ipaddr+0x88>)
 80076d8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80076dc:	491c      	ldr	r1, [pc, #112]	@ (8007750 <netif_do_set_ipaddr+0x8c>)
 80076de:	481d      	ldr	r0, [pc, #116]	@ (8007754 <netif_do_set_ipaddr+0x90>)
 80076e0:	f00c fbde 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <netif_do_set_ipaddr+0x34>
 80076ea:	4b18      	ldr	r3, [pc, #96]	@ (800774c <netif_do_set_ipaddr+0x88>)
 80076ec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80076f0:	4917      	ldr	r1, [pc, #92]	@ (8007750 <netif_do_set_ipaddr+0x8c>)
 80076f2:	4818      	ldr	r0, [pc, #96]	@ (8007754 <netif_do_set_ipaddr+0x90>)
 80076f4:	f00c fbd4 	bl	8013ea0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d01c      	beq.n	8007740 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3304      	adds	r3, #4
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007716:	f107 0314 	add.w	r3, r7, #20
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffbf 	bl	80076a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <netif_do_set_ipaddr+0x6a>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	e000      	b.n	8007730 <netif_do_set_ipaddr+0x6c>
 800772e:	2300      	movs	r3, #0
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007734:	2101      	movs	r1, #1
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f8d2 	bl	80078e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	08015160 	.word	0x08015160
 8007750:	08015278 	.word	0x08015278
 8007754:	080151b0 	.word	0x080151b0

08007758 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3308      	adds	r3, #8
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d00a      	beq.n	8007788 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <netif_do_set_netmask+0x26>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	e000      	b.n	8007780 <netif_do_set_netmask+0x28>
 800777e:	2300      	movs	r3, #0
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	330c      	adds	r3, #12
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d00a      	beq.n	80077c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <netif_do_set_gw+0x26>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	e000      	b.n	80077be <netif_do_set_gw+0x28>
 80077bc:	2300      	movs	r3, #0
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80077f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <netif_set_addr+0x90>)
 80077f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <netif_set_addr+0x90>)
 80077fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007804:	4b17      	ldr	r3, [pc, #92]	@ (8007864 <netif_set_addr+0x90>)
 8007806:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <netif_set_addr+0x42>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <netif_set_addr+0x46>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <netif_set_addr+0x48>
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d006      	beq.n	8007832 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	461a      	mov	r2, r3
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff ff49 	bl	80076c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff ff8e 	bl	8007758 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff ffa8 	bl	8007796 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800784c:	f107 0310 	add.w	r3, r7, #16
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff ff35 	bl	80076c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800785a:	bf00      	nop
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	08017c84 	.word	0x08017c84

08007868 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007870:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <netif_set_default+0x1c>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20004328 	.word	0x20004328

08007888 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d107      	bne.n	80078a6 <netif_set_up+0x1e>
 8007896:	4b0f      	ldr	r3, [pc, #60]	@ (80078d4 <netif_set_up+0x4c>)
 8007898:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800789c:	490e      	ldr	r1, [pc, #56]	@ (80078d8 <netif_set_up+0x50>)
 800789e:	480f      	ldr	r0, [pc, #60]	@ (80078dc <netif_set_up+0x54>)
 80078a0:	f00c fafe 	bl	8013ea0 <iprintf>
 80078a4:	e013      	b.n	80078ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10c      	bne.n	80078ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80078c6:	2103      	movs	r1, #3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f809 	bl	80078e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	08015160 	.word	0x08015160
 80078d8:	080152e8 	.word	0x080152e8
 80078dc:	080151b0 	.word	0x080151b0

080078e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <netif_issue_reports+0x20>
 80078f2:	4b18      	ldr	r3, [pc, #96]	@ (8007954 <netif_issue_reports+0x74>)
 80078f4:	f240 326d 	movw	r2, #877	@ 0x36d
 80078f8:	4917      	ldr	r1, [pc, #92]	@ (8007958 <netif_issue_reports+0x78>)
 80078fa:	4818      	ldr	r0, [pc, #96]	@ (800795c <netif_issue_reports+0x7c>)
 80078fc:	f00c fad0 	bl	8013ea0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01e      	beq.n	800794c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007914:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007918:	2b00      	cmp	r3, #0
 800791a:	d017      	beq.n	800794c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d013      	beq.n	800794e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3304      	adds	r3, #4
 800792a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f00a fd51 	bl	80123ec <etharp_request>
 800794a:	e000      	b.n	800794e <netif_issue_reports+0x6e>
    return;
 800794c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	08015160 	.word	0x08015160
 8007958:	08015304 	.word	0x08015304
 800795c:	080151b0 	.word	0x080151b0

08007960 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <netif_set_down+0x1e>
 800796e:	4b12      	ldr	r3, [pc, #72]	@ (80079b8 <netif_set_down+0x58>)
 8007970:	f240 329b 	movw	r2, #923	@ 0x39b
 8007974:	4911      	ldr	r1, [pc, #68]	@ (80079bc <netif_set_down+0x5c>)
 8007976:	4812      	ldr	r0, [pc, #72]	@ (80079c0 <netif_set_down+0x60>)
 8007978:	f00c fa92 	bl	8013ea0 <iprintf>
 800797c:	e019      	b.n	80079b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f00a f8d7 	bl	8011b60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	08015160 	.word	0x08015160
 80079bc:	08015328 	.word	0x08015328
 80079c0:	080151b0 	.word	0x080151b0

080079c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d107      	bne.n	80079e2 <netif_set_link_up+0x1e>
 80079d2:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <netif_set_link_up+0x64>)
 80079d4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80079d8:	4914      	ldr	r1, [pc, #80]	@ (8007a2c <netif_set_link_up+0x68>)
 80079da:	4815      	ldr	r0, [pc, #84]	@ (8007a30 <netif_set_link_up+0x6c>)
 80079dc:	f00c fa60 	bl	8013ea0 <iprintf>
 80079e0:	e01e      	b.n	8007a20 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d117      	bne.n	8007a20 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80079f6:	f043 0304 	orr.w	r3, r3, #4
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f008 faf2 	bl	800ffec <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007a08:	2103      	movs	r1, #3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff ff68 	bl	80078e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <netif_set_link_up+0x5c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	08015160 	.word	0x08015160
 8007a2c:	08015348 	.word	0x08015348
 8007a30:	080151b0 	.word	0x080151b0

08007a34 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <netif_set_link_down+0x1e>
 8007a42:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <netif_set_link_down+0x54>)
 8007a44:	f240 4206 	movw	r2, #1030	@ 0x406
 8007a48:	4910      	ldr	r1, [pc, #64]	@ (8007a8c <netif_set_link_down+0x58>)
 8007a4a:	4811      	ldr	r0, [pc, #68]	@ (8007a90 <netif_set_link_down+0x5c>)
 8007a4c:	f00c fa28 	bl	8013ea0 <iprintf>
 8007a50:	e017      	b.n	8007a82 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d010      	beq.n	8007a82 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a66:	f023 0304 	bic.w	r3, r3, #4
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <netif_set_link_down+0x4e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	08015160 	.word	0x08015160
 8007a8c:	0801536c 	.word	0x0801536c
 8007a90:	080151b0 	.word	0x080151b0

08007a94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	61da      	str	r2, [r3, #28]
  }
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007ac2:	f06f 030b 	mvn.w	r3, #11
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d013      	beq.n	8007b0c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <netif_get_by_index+0x48>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e00c      	b.n	8007b06 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007af2:	3301      	adds	r3, #1
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	79fa      	ldrb	r2, [r7, #7]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d101      	bne.n	8007b00 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	e006      	b.n	8007b0e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ef      	bne.n	8007aec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20004324 	.word	0x20004324

08007b20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007b26:	4b0c      	ldr	r3, [pc, #48]	@ (8007b58 <pbuf_free_ooseq+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <pbuf_free_ooseq+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	e00a      	b.n	8007b4a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 fd49 	bl	800a5d4 <tcp_free_ooseq>
      return;
 8007b42:	e005      	b.n	8007b50 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	607b      	str	r3, [r7, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f1      	bne.n	8007b34 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	2000432d 	.word	0x2000432d
 8007b5c:	2000433c 	.word	0x2000433c

08007b60 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007b64:	4b03      	ldr	r3, [pc, #12]	@ (8007b74 <pbuf_pool_is_empty+0x14>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007b6a:	bf00      	nop
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	2000432d 	.word	0x2000432d

08007b78 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4611      	mov	r1, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	460b      	mov	r3, r1
 8007b88:	80fb      	strh	r3, [r7, #6]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88ba      	ldrh	r2, [r7, #4]
 8007ba4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007ba6:	8b3b      	ldrh	r3, [r7, #24]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	7f3a      	ldrb	r2, [r7, #28]
 8007bb2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	73da      	strb	r2, [r3, #15]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	@ 0x30
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	71fb      	strb	r3, [r7, #7]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	80bb      	strh	r3, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007be8:	d07f      	beq.n	8007cea <pbuf_alloc+0x11e>
 8007bea:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007bee:	f300 80c8 	bgt.w	8007d82 <pbuf_alloc+0x1b6>
 8007bf2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007bf6:	d010      	beq.n	8007c1a <pbuf_alloc+0x4e>
 8007bf8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007bfc:	f300 80c1 	bgt.w	8007d82 <pbuf_alloc+0x1b6>
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d002      	beq.n	8007c0a <pbuf_alloc+0x3e>
 8007c04:	2b41      	cmp	r3, #65	@ 0x41
 8007c06:	f040 80bc 	bne.w	8007d82 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007c0a:	887a      	ldrh	r2, [r7, #2]
 8007c0c:	88bb      	ldrh	r3, [r7, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	2000      	movs	r0, #0
 8007c12:	f000 f8d1 	bl	8007db8 <pbuf_alloc_reference>
 8007c16:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007c18:	e0bd      	b.n	8007d96 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007c22:	88bb      	ldrh	r3, [r7, #4]
 8007c24:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007c26:	2008      	movs	r0, #8
 8007c28:	f7ff fbe6 	bl	80073f8 <memp_malloc>
 8007c2c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007c34:	f7ff ff94 	bl	8007b60 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007c3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c40:	f000 faa8 	bl	8008194 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e0a7      	b.n	8007d98 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c4a:	3303      	adds	r3, #3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8b7a      	ldrh	r2, [r7, #26]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	bf28      	it	cs
 8007c60:	4613      	movcs	r3, r2
 8007c62:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007c64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c66:	3310      	adds	r3, #16
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3303      	adds	r3, #3
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	4618      	mov	r0, r3
 8007c74:	89f9      	ldrh	r1, [r7, #14]
 8007c76:	8b7a      	ldrh	r2, [r7, #26]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	887b      	ldrh	r3, [r7, #2]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	460b      	mov	r3, r1
 8007c82:	4601      	mov	r1, r0
 8007c84:	6938      	ldr	r0, [r7, #16]
 8007c86:	f7ff ff77 	bl	8007b78 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d006      	beq.n	8007ca4 <pbuf_alloc+0xd8>
 8007c96:	4b42      	ldr	r3, [pc, #264]	@ (8007da0 <pbuf_alloc+0x1d4>)
 8007c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c9c:	4941      	ldr	r1, [pc, #260]	@ (8007da4 <pbuf_alloc+0x1d8>)
 8007c9e:	4842      	ldr	r0, [pc, #264]	@ (8007da8 <pbuf_alloc+0x1dc>)
 8007ca0:	f00c f8fe 	bl	8013ea0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007ca4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ca6:	3303      	adds	r3, #3
 8007ca8:	f023 0303 	bic.w	r3, r3, #3
 8007cac:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007cb0:	d106      	bne.n	8007cc0 <pbuf_alloc+0xf4>
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007da0 <pbuf_alloc+0x1d4>)
 8007cb4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007cb8:	493c      	ldr	r1, [pc, #240]	@ (8007dac <pbuf_alloc+0x1e0>)
 8007cba:	483b      	ldr	r0, [pc, #236]	@ (8007da8 <pbuf_alloc+0x1dc>)
 8007cbc:	f00c f8f0 	bl	8013ea0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cca:	e002      	b.n	8007cd2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007cd6:	8b7a      	ldrh	r2, [r7, #26]
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007ce2:	8b7b      	ldrh	r3, [r7, #26]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d19e      	bne.n	8007c26 <pbuf_alloc+0x5a>
      break;
 8007ce8:	e055      	b.n	8007d96 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007cea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007cec:	3303      	adds	r3, #3
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	88bb      	ldrh	r3, [r7, #4]
 8007cf8:	3303      	adds	r3, #3
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f023 0303 	bic.w	r3, r3, #3
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4413      	add	r3, r2
 8007d04:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007d06:	8b3b      	ldrh	r3, [r7, #24]
 8007d08:	3310      	adds	r3, #16
 8007d0a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007d0c:	8b3a      	ldrh	r2, [r7, #24]
 8007d0e:	88bb      	ldrh	r3, [r7, #4]
 8007d10:	3303      	adds	r3, #3
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d306      	bcc.n	8007d28 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007d1a:	8afa      	ldrh	r2, [r7, #22]
 8007d1c:	88bb      	ldrh	r3, [r7, #4]
 8007d1e:	3303      	adds	r3, #3
 8007d20:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d201      	bcs.n	8007d2c <pbuf_alloc+0x160>
        return NULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e035      	b.n	8007d98 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007d2c:	8afb      	ldrh	r3, [r7, #22]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f9f4 	bl	800711c <mem_malloc>
 8007d34:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <pbuf_alloc+0x174>
        return NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e02b      	b.n	8007d98 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007d40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007d42:	3310      	adds	r3, #16
 8007d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d46:	4413      	add	r3, r2
 8007d48:	3303      	adds	r3, #3
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	4618      	mov	r0, r3
 8007d50:	88b9      	ldrh	r1, [r7, #4]
 8007d52:	88ba      	ldrh	r2, [r7, #4]
 8007d54:	2300      	movs	r3, #0
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	887b      	ldrh	r3, [r7, #2]
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4601      	mov	r1, r0
 8007d60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d62:	f7ff ff09 	bl	8007b78 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <pbuf_alloc+0x1c8>
 8007d72:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <pbuf_alloc+0x1d4>)
 8007d74:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007d78:	490d      	ldr	r1, [pc, #52]	@ (8007db0 <pbuf_alloc+0x1e4>)
 8007d7a:	480b      	ldr	r0, [pc, #44]	@ (8007da8 <pbuf_alloc+0x1dc>)
 8007d7c:	f00c f890 	bl	8013ea0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007d80:	e008      	b.n	8007d94 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007d82:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <pbuf_alloc+0x1d4>)
 8007d84:	f240 1227 	movw	r2, #295	@ 0x127
 8007d88:	490a      	ldr	r1, [pc, #40]	@ (8007db4 <pbuf_alloc+0x1e8>)
 8007d8a:	4807      	ldr	r0, [pc, #28]	@ (8007da8 <pbuf_alloc+0x1dc>)
 8007d8c:	f00c f888 	bl	8013ea0 <iprintf>
      return NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e001      	b.n	8007d98 <pbuf_alloc+0x1cc>
      break;
 8007d94:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	@ 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	08015390 	.word	0x08015390
 8007da4:	080153c0 	.word	0x080153c0
 8007da8:	080153f0 	.word	0x080153f0
 8007dac:	08015418 	.word	0x08015418
 8007db0:	0801544c 	.word	0x0801544c
 8007db4:	08015478 	.word	0x08015478

08007db8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007dc8:	883b      	ldrh	r3, [r7, #0]
 8007dca:	2b41      	cmp	r3, #65	@ 0x41
 8007dcc:	d009      	beq.n	8007de2 <pbuf_alloc_reference+0x2a>
 8007dce:	883b      	ldrh	r3, [r7, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d006      	beq.n	8007de2 <pbuf_alloc_reference+0x2a>
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <pbuf_alloc_reference+0x5c>)
 8007dd6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007dda:	490f      	ldr	r1, [pc, #60]	@ (8007e18 <pbuf_alloc_reference+0x60>)
 8007ddc:	480f      	ldr	r0, [pc, #60]	@ (8007e1c <pbuf_alloc_reference+0x64>)
 8007dde:	f00c f85f 	bl	8013ea0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007de2:	2007      	movs	r0, #7
 8007de4:	f7ff fb08 	bl	80073f8 <memp_malloc>
 8007de8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e00b      	b.n	8007e0c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007df4:	8879      	ldrh	r1, [r7, #2]
 8007df6:	887a      	ldrh	r2, [r7, #2]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	883b      	ldrh	r3, [r7, #0]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	460b      	mov	r3, r1
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff feb7 	bl	8007b78 <pbuf_init_alloced_pbuf>
  return p;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	08015390 	.word	0x08015390
 8007e18:	08015494 	.word	0x08015494
 8007e1c:	080153f0 	.word	0x080153f0

08007e20 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	81bb      	strh	r3, [r7, #12]
 8007e30:	4613      	mov	r3, r2
 8007e32:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007e38:	8a7b      	ldrh	r3, [r7, #18]
 8007e3a:	3303      	adds	r3, #3
 8007e3c:	f023 0203 	bic.w	r2, r3, #3
 8007e40:	89bb      	ldrh	r3, [r7, #12]
 8007e42:	441a      	add	r2, r3
 8007e44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d901      	bls.n	8007e4e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e018      	b.n	8007e80 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007e54:	8a7b      	ldrh	r3, [r7, #18]
 8007e56:	3303      	adds	r3, #3
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	4413      	add	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	e001      	b.n	8007e68 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	89b9      	ldrh	r1, [r7, #12]
 8007e6c:	89ba      	ldrh	r2, [r7, #12]
 8007e6e:	2302      	movs	r3, #2
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	897b      	ldrh	r3, [r7, #10]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	460b      	mov	r3, r1
 8007e78:	6979      	ldr	r1, [r7, #20]
 8007e7a:	f7ff fe7d 	bl	8007b78 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007e7e:	687b      	ldr	r3, [r7, #4]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <pbuf_realloc+0x20>
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8007f84 <pbuf_realloc+0xfc>)
 8007e9c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007ea0:	4939      	ldr	r1, [pc, #228]	@ (8007f88 <pbuf_realloc+0x100>)
 8007ea2:	483a      	ldr	r0, [pc, #232]	@ (8007f8c <pbuf_realloc+0x104>)
 8007ea4:	f00b fffc 	bl	8013ea0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	891b      	ldrh	r3, [r3, #8]
 8007eac:	887a      	ldrh	r2, [r7, #2]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d263      	bcs.n	8007f7a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	891a      	ldrh	r2, [r3, #8]
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007ebc:	887b      	ldrh	r3, [r7, #2]
 8007ebe:	817b      	strh	r3, [r7, #10]
  q = p;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007ec4:	e018      	b.n	8007ef8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	895b      	ldrh	r3, [r3, #10]
 8007eca:	897a      	ldrh	r2, [r7, #10]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	891a      	ldrh	r2, [r3, #8]
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <pbuf_realloc+0x70>
 8007eea:	4b26      	ldr	r3, [pc, #152]	@ (8007f84 <pbuf_realloc+0xfc>)
 8007eec:	f240 12af 	movw	r2, #431	@ 0x1af
 8007ef0:	4927      	ldr	r1, [pc, #156]	@ (8007f90 <pbuf_realloc+0x108>)
 8007ef2:	4826      	ldr	r0, [pc, #152]	@ (8007f8c <pbuf_realloc+0x104>)
 8007ef4:	f00b ffd4 	bl	8013ea0 <iprintf>
  while (rem_len > q->len) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	895b      	ldrh	r3, [r3, #10]
 8007efc:	897a      	ldrh	r2, [r7, #10]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d8e1      	bhi.n	8007ec6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	7b1b      	ldrb	r3, [r3, #12]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d121      	bne.n	8007f52 <pbuf_realloc+0xca>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	895b      	ldrh	r3, [r3, #10]
 8007f12:	897a      	ldrh	r2, [r7, #10]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d01c      	beq.n	8007f52 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	7b5b      	ldrb	r3, [r3, #13]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d116      	bne.n	8007f52 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	897b      	ldrh	r3, [r7, #10]
 8007f30:	4413      	add	r3, r2
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4619      	mov	r1, r3
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7fe fff4 	bl	8006f24 <mem_trim>
 8007f3c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d106      	bne.n	8007f52 <pbuf_realloc+0xca>
 8007f44:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <pbuf_realloc+0xfc>)
 8007f46:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007f4a:	4912      	ldr	r1, [pc, #72]	@ (8007f94 <pbuf_realloc+0x10c>)
 8007f4c:	480f      	ldr	r0, [pc, #60]	@ (8007f8c <pbuf_realloc+0x104>)
 8007f4e:	f00b ffa7 	bl	8013ea0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	897a      	ldrh	r2, [r7, #10]
 8007f56:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	895a      	ldrh	r2, [r3, #10]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f911 	bl	8008194 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e000      	b.n	8007f7c <pbuf_realloc+0xf4>
    return;
 8007f7a:	bf00      	nop

}
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	08015390 	.word	0x08015390
 8007f88:	080154a8 	.word	0x080154a8
 8007f8c:	080153f0 	.word	0x080153f0
 8007f90:	080154c0 	.word	0x080154c0
 8007f94:	080154d8 	.word	0x080154d8

08007f98 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <pbuf_add_header_impl+0x22>
 8007fac:	4b2b      	ldr	r3, [pc, #172]	@ (800805c <pbuf_add_header_impl+0xc4>)
 8007fae:	f240 12df 	movw	r2, #479	@ 0x1df
 8007fb2:	492b      	ldr	r1, [pc, #172]	@ (8008060 <pbuf_add_header_impl+0xc8>)
 8007fb4:	482b      	ldr	r0, [pc, #172]	@ (8008064 <pbuf_add_header_impl+0xcc>)
 8007fb6:	f00b ff73 	bl	8013ea0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <pbuf_add_header_impl+0x30>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc6:	d301      	bcc.n	8007fcc <pbuf_add_header_impl+0x34>
    return 1;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e043      	b.n	8008054 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <pbuf_add_header_impl+0x3e>
    return 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e03e      	b.n	8008054 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	891a      	ldrh	r2, [r3, #8]
 8007fde:	8a7b      	ldrh	r3, [r7, #18]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8a7a      	ldrh	r2, [r7, #18]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d901      	bls.n	8007fee <pbuf_add_header_impl+0x56>
    return 1;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e032      	b.n	8008054 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	7b1b      	ldrb	r3, [r3, #12]
 8007ff2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007ff4:	8a3b      	ldrh	r3, [r7, #16]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	425b      	negs	r3, r3
 8008006:	4413      	add	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3310      	adds	r3, #16
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	429a      	cmp	r2, r3
 8008012:	d20d      	bcs.n	8008030 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008014:	2301      	movs	r3, #1
 8008016:	e01d      	b.n	8008054 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d006      	beq.n	800802c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	425b      	negs	r3, r3
 8008026:	4413      	add	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e001      	b.n	8008030 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800802c:	2301      	movs	r3, #1
 800802e:	e011      	b.n	8008054 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	895a      	ldrh	r2, [r3, #10]
 800803a:	8a7b      	ldrh	r3, [r7, #18]
 800803c:	4413      	add	r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	891a      	ldrh	r2, [r3, #8]
 8008048:	8a7b      	ldrh	r3, [r7, #18]
 800804a:	4413      	add	r3, r2
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	811a      	strh	r2, [r3, #8]


  return 0;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	08015390 	.word	0x08015390
 8008060:	080154f4 	.word	0x080154f4
 8008064:	080153f0 	.word	0x080153f0

08008068 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008072:	2200      	movs	r2, #0
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ff8e 	bl	8007f98 <pbuf_add_header_impl>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <pbuf_remove_header+0x1e>
 8008098:	4b20      	ldr	r3, [pc, #128]	@ (800811c <pbuf_remove_header+0x94>)
 800809a:	f240 224b 	movw	r2, #587	@ 0x24b
 800809e:	4920      	ldr	r1, [pc, #128]	@ (8008120 <pbuf_remove_header+0x98>)
 80080a0:	4820      	ldr	r0, [pc, #128]	@ (8008124 <pbuf_remove_header+0x9c>)
 80080a2:	f00b fefd 	bl	8013ea0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <pbuf_remove_header+0x2c>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b2:	d301      	bcc.n	80080b8 <pbuf_remove_header+0x30>
    return 1;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e02c      	b.n	8008112 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <pbuf_remove_header+0x3a>
    return 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	e027      	b.n	8008112 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	895b      	ldrh	r3, [r3, #10]
 80080ca:	89fa      	ldrh	r2, [r7, #14]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d908      	bls.n	80080e2 <pbuf_remove_header+0x5a>
 80080d0:	4b12      	ldr	r3, [pc, #72]	@ (800811c <pbuf_remove_header+0x94>)
 80080d2:	f240 2255 	movw	r2, #597	@ 0x255
 80080d6:	4914      	ldr	r1, [pc, #80]	@ (8008128 <pbuf_remove_header+0xa0>)
 80080d8:	4812      	ldr	r0, [pc, #72]	@ (8008124 <pbuf_remove_header+0x9c>)
 80080da:	f00b fee1 	bl	8013ea0 <iprintf>
 80080de:	2301      	movs	r3, #1
 80080e0:	e017      	b.n	8008112 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	441a      	add	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	895a      	ldrh	r2, [r3, #10]
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	891a      	ldrh	r2, [r3, #8]
 8008106:	89fb      	ldrh	r3, [r7, #14]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	08015390 	.word	0x08015390
 8008120:	080154f4 	.word	0x080154f4
 8008124:	080153f0 	.word	0x080153f0
 8008128:	08015500 	.word	0x08015500

0800812c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	807b      	strh	r3, [r7, #2]
 8008138:	4613      	mov	r3, r2
 800813a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800813c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	da08      	bge.n	8008156 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008144:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008148:	425b      	negs	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff ff9b 	bl	8008088 <pbuf_remove_header>
 8008152:	4603      	mov	r3, r0
 8008154:	e007      	b.n	8008166 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800815a:	787a      	ldrb	r2, [r7, #1]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff ff1a 	bl	8007f98 <pbuf_add_header_impl>
 8008164:	4603      	mov	r3, r0
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800817a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800817e:	2201      	movs	r2, #1
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff ffd2 	bl	800812c <pbuf_header_impl>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <pbuf_free+0x22>
 80081a8:	4b38      	ldr	r3, [pc, #224]	@ (800828c <pbuf_free+0xf8>)
 80081aa:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80081ae:	4938      	ldr	r1, [pc, #224]	@ (8008290 <pbuf_free+0xfc>)
 80081b0:	4838      	ldr	r0, [pc, #224]	@ (8008294 <pbuf_free+0x100>)
 80081b2:	f00b fe75 	bl	8013ea0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e063      	b.n	8008282 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80081be:	e05c      	b.n	800827a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7b9b      	ldrb	r3, [r3, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <pbuf_free+0x42>
 80081c8:	4b30      	ldr	r3, [pc, #192]	@ (800828c <pbuf_free+0xf8>)
 80081ca:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80081ce:	4932      	ldr	r1, [pc, #200]	@ (8008298 <pbuf_free+0x104>)
 80081d0:	4830      	ldr	r0, [pc, #192]	@ (8008294 <pbuf_free+0x100>)
 80081d2:	f00b fe65 	bl	8013ea0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7b9b      	ldrb	r3, [r3, #14]
 80081da:	3b01      	subs	r3, #1
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	739a      	strb	r2, [r3, #14]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7b9b      	ldrb	r3, [r3, #14]
 80081e6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80081e8:	7dbb      	ldrb	r3, [r7, #22]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d143      	bne.n	8008276 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7b1b      	ldrb	r3, [r3, #12]
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7b5b      	ldrb	r3, [r3, #13]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d011      	beq.n	800822e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <pbuf_free+0x90>
 8008216:	4b1d      	ldr	r3, [pc, #116]	@ (800828c <pbuf_free+0xf8>)
 8008218:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800821c:	491f      	ldr	r1, [pc, #124]	@ (800829c <pbuf_free+0x108>)
 800821e:	481d      	ldr	r0, [pc, #116]	@ (8008294 <pbuf_free+0x100>)
 8008220:	f00b fe3e 	bl	8013ea0 <iprintf>
        pc->custom_free_function(p);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
 800822c:	e01d      	b.n	800826a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d104      	bne.n	800823e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	2008      	movs	r0, #8
 8008238:	f7ff f92a 	bl	8007490 <memp_free>
 800823c:	e015      	b.n	800826a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d104      	bne.n	800824e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	2007      	movs	r0, #7
 8008248:	f7ff f922 	bl	8007490 <memp_free>
 800824c:	e00d      	b.n	800826a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <pbuf_free+0xc8>
          mem_free(p);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fe fdfb 	bl	8006e50 <mem_free>
 800825a:	e006      	b.n	800826a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800825c:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <pbuf_free+0xf8>)
 800825e:	f240 320f 	movw	r2, #783	@ 0x30f
 8008262:	490f      	ldr	r1, [pc, #60]	@ (80082a0 <pbuf_free+0x10c>)
 8008264:	480b      	ldr	r0, [pc, #44]	@ (8008294 <pbuf_free+0x100>)
 8008266:	f00b fe1b 	bl	8013ea0 <iprintf>
        }
      }
      count++;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	3301      	adds	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	607b      	str	r3, [r7, #4]
 8008274:	e001      	b.n	800827a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d19f      	bne.n	80081c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08015390 	.word	0x08015390
 8008290:	080154f4 	.word	0x080154f4
 8008294:	080153f0 	.word	0x080153f0
 8008298:	08015520 	.word	0x08015520
 800829c:	08015538 	.word	0x08015538
 80082a0:	0801555c 	.word	0x0801555c

080082a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80082b0:	e005      	b.n	80082be <pbuf_clen+0x1a>
    ++len;
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	3301      	adds	r3, #1
 80082b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f6      	bne.n	80082b2 <pbuf_clen+0xe>
  }
  return len;
 80082c4:	89fb      	ldrh	r3, [r7, #14]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7b9b      	ldrb	r3, [r3, #14]
 80082e6:	3301      	adds	r3, #1
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7b9b      	ldrb	r3, [r3, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <pbuf_ref+0x30>
 80082f6:	4b05      	ldr	r3, [pc, #20]	@ (800830c <pbuf_ref+0x38>)
 80082f8:	f240 3242 	movw	r2, #834	@ 0x342
 80082fc:	4904      	ldr	r1, [pc, #16]	@ (8008310 <pbuf_ref+0x3c>)
 80082fe:	4805      	ldr	r0, [pc, #20]	@ (8008314 <pbuf_ref+0x40>)
 8008300:	f00b fdce 	bl	8013ea0 <iprintf>
  }
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	08015390 	.word	0x08015390
 8008310:	08015570 	.word	0x08015570
 8008314:	080153f0 	.word	0x080153f0

08008318 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <pbuf_cat+0x16>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <pbuf_cat+0x26>
 800832e:	4b20      	ldr	r3, [pc, #128]	@ (80083b0 <pbuf_cat+0x98>)
 8008330:	f240 3259 	movw	r2, #857	@ 0x359
 8008334:	491f      	ldr	r1, [pc, #124]	@ (80083b4 <pbuf_cat+0x9c>)
 8008336:	4820      	ldr	r0, [pc, #128]	@ (80083b8 <pbuf_cat+0xa0>)
 8008338:	f00b fdb2 	bl	8013ea0 <iprintf>
 800833c:	e034      	b.n	80083a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e00a      	b.n	800835a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	891a      	ldrh	r2, [r3, #8]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	891b      	ldrh	r3, [r3, #8]
 800834c:	4413      	add	r3, r2
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f0      	bne.n	8008344 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	891a      	ldrh	r2, [r3, #8]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	895b      	ldrh	r3, [r3, #10]
 800836a:	429a      	cmp	r2, r3
 800836c:	d006      	beq.n	800837c <pbuf_cat+0x64>
 800836e:	4b10      	ldr	r3, [pc, #64]	@ (80083b0 <pbuf_cat+0x98>)
 8008370:	f240 3262 	movw	r2, #866	@ 0x362
 8008374:	4911      	ldr	r1, [pc, #68]	@ (80083bc <pbuf_cat+0xa4>)
 8008376:	4810      	ldr	r0, [pc, #64]	@ (80083b8 <pbuf_cat+0xa0>)
 8008378:	f00b fd92 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <pbuf_cat+0x7a>
 8008384:	4b0a      	ldr	r3, [pc, #40]	@ (80083b0 <pbuf_cat+0x98>)
 8008386:	f240 3263 	movw	r2, #867	@ 0x363
 800838a:	490d      	ldr	r1, [pc, #52]	@ (80083c0 <pbuf_cat+0xa8>)
 800838c:	480a      	ldr	r0, [pc, #40]	@ (80083b8 <pbuf_cat+0xa0>)
 800838e:	f00b fd87 	bl	8013ea0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	891a      	ldrh	r2, [r3, #8]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	891b      	ldrh	r3, [r3, #8]
 800839a:	4413      	add	r3, r2
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	08015390 	.word	0x08015390
 80083b4:	08015584 	.word	0x08015584
 80083b8:	080153f0 	.word	0x080153f0
 80083bc:	080155bc 	.word	0x080155bc
 80083c0:	080155ec 	.word	0x080155ec

080083c4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ffa1 	bl	8008318 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80083d6:	6838      	ldr	r0, [r7, #0]
 80083d8:	f7ff ff7c 	bl	80082d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d008      	beq.n	800840e <pbuf_copy+0x2a>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <pbuf_copy+0x2a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	891a      	ldrh	r2, [r3, #8]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	891b      	ldrh	r3, [r3, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	d209      	bcs.n	8008422 <pbuf_copy+0x3e>
 800840e:	4b57      	ldr	r3, [pc, #348]	@ (800856c <pbuf_copy+0x188>)
 8008410:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008414:	4956      	ldr	r1, [pc, #344]	@ (8008570 <pbuf_copy+0x18c>)
 8008416:	4857      	ldr	r0, [pc, #348]	@ (8008574 <pbuf_copy+0x190>)
 8008418:	f00b fd42 	bl	8013ea0 <iprintf>
 800841c:	f06f 030f 	mvn.w	r3, #15
 8008420:	e09f      	b.n	8008562 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	895b      	ldrh	r3, [r3, #10]
 8008426:	461a      	mov	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	1ad2      	subs	r2, r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	4619      	mov	r1, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1acb      	subs	r3, r1, r3
 8008436:	429a      	cmp	r2, r3
 8008438:	d306      	bcc.n	8008448 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	895b      	ldrh	r3, [r3, #10]
 800843e:	461a      	mov	r2, r3
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e005      	b.n	8008454 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	895b      	ldrh	r3, [r3, #10]
 800844c:	461a      	mov	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	18d0      	adds	r0, r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	4413      	add	r3, r2
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4619      	mov	r1, r3
 8008468:	f00b fdf5 	bl	8014056 <memcpy>
    offset_to += len;
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	895b      	ldrh	r3, [r3, #10]
 8008480:	461a      	mov	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4293      	cmp	r3, r2
 8008486:	d906      	bls.n	8008496 <pbuf_copy+0xb2>
 8008488:	4b38      	ldr	r3, [pc, #224]	@ (800856c <pbuf_copy+0x188>)
 800848a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800848e:	493a      	ldr	r1, [pc, #232]	@ (8008578 <pbuf_copy+0x194>)
 8008490:	4838      	ldr	r0, [pc, #224]	@ (8008574 <pbuf_copy+0x190>)
 8008492:	f00b fd05 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	895b      	ldrh	r3, [r3, #10]
 800849a:	461a      	mov	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	4293      	cmp	r3, r2
 80084a0:	d906      	bls.n	80084b0 <pbuf_copy+0xcc>
 80084a2:	4b32      	ldr	r3, [pc, #200]	@ (800856c <pbuf_copy+0x188>)
 80084a4:	f240 32da 	movw	r2, #986	@ 0x3da
 80084a8:	4934      	ldr	r1, [pc, #208]	@ (800857c <pbuf_copy+0x198>)
 80084aa:	4832      	ldr	r0, [pc, #200]	@ (8008574 <pbuf_copy+0x190>)
 80084ac:	f00b fcf8 	bl	8013ea0 <iprintf>
    if (offset_from >= p_from->len) {
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	461a      	mov	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d304      	bcc.n	80084c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	895b      	ldrh	r3, [r3, #10]
 80084ca:	461a      	mov	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d114      	bne.n	80084fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10c      	bne.n	80084fc <pbuf_copy+0x118>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <pbuf_copy+0x118>
 80084e8:	4b20      	ldr	r3, [pc, #128]	@ (800856c <pbuf_copy+0x188>)
 80084ea:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80084ee:	4924      	ldr	r1, [pc, #144]	@ (8008580 <pbuf_copy+0x19c>)
 80084f0:	4820      	ldr	r0, [pc, #128]	@ (8008574 <pbuf_copy+0x190>)
 80084f2:	f00b fcd5 	bl	8013ea0 <iprintf>
 80084f6:	f06f 030f 	mvn.w	r3, #15
 80084fa:	e032      	b.n	8008562 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d013      	beq.n	800852a <pbuf_copy+0x146>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	895a      	ldrh	r2, [r3, #10]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	891b      	ldrh	r3, [r3, #8]
 800850a:	429a      	cmp	r2, r3
 800850c:	d10d      	bne.n	800852a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <pbuf_copy+0x146>
 8008516:	4b15      	ldr	r3, [pc, #84]	@ (800856c <pbuf_copy+0x188>)
 8008518:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800851c:	4919      	ldr	r1, [pc, #100]	@ (8008584 <pbuf_copy+0x1a0>)
 800851e:	4815      	ldr	r0, [pc, #84]	@ (8008574 <pbuf_copy+0x190>)
 8008520:	f00b fcbe 	bl	8013ea0 <iprintf>
 8008524:	f06f 0305 	mvn.w	r3, #5
 8008528:	e01b      	b.n	8008562 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d013      	beq.n	8008558 <pbuf_copy+0x174>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	895a      	ldrh	r2, [r3, #10]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	891b      	ldrh	r3, [r3, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	d10d      	bne.n	8008558 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d009      	beq.n	8008558 <pbuf_copy+0x174>
 8008544:	4b09      	ldr	r3, [pc, #36]	@ (800856c <pbuf_copy+0x188>)
 8008546:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800854a:	490e      	ldr	r1, [pc, #56]	@ (8008584 <pbuf_copy+0x1a0>)
 800854c:	4809      	ldr	r0, [pc, #36]	@ (8008574 <pbuf_copy+0x190>)
 800854e:	f00b fca7 	bl	8013ea0 <iprintf>
 8008552:	f06f 0305 	mvn.w	r3, #5
 8008556:	e004      	b.n	8008562 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f47f af61 	bne.w	8008422 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	08015390 	.word	0x08015390
 8008570:	08015638 	.word	0x08015638
 8008574:	080153f0 	.word	0x080153f0
 8008578:	08015668 	.word	0x08015668
 800857c:	08015680 	.word	0x08015680
 8008580:	0801569c 	.word	0x0801569c
 8008584:	080156ac 	.word	0x080156ac

08008588 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	460b      	mov	r3, r1
 8008598:	80fb      	strh	r3, [r7, #6]
 800859a:	4613      	mov	r3, r2
 800859c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d108      	bne.n	80085be <pbuf_copy_partial+0x36>
 80085ac:	4b2b      	ldr	r3, [pc, #172]	@ (800865c <pbuf_copy_partial+0xd4>)
 80085ae:	f240 420a 	movw	r2, #1034	@ 0x40a
 80085b2:	492b      	ldr	r1, [pc, #172]	@ (8008660 <pbuf_copy_partial+0xd8>)
 80085b4:	482b      	ldr	r0, [pc, #172]	@ (8008664 <pbuf_copy_partial+0xdc>)
 80085b6:	f00b fc73 	bl	8013ea0 <iprintf>
 80085ba:	2300      	movs	r3, #0
 80085bc:	e04a      	b.n	8008654 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <pbuf_copy_partial+0x4e>
 80085c4:	4b25      	ldr	r3, [pc, #148]	@ (800865c <pbuf_copy_partial+0xd4>)
 80085c6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80085ca:	4927      	ldr	r1, [pc, #156]	@ (8008668 <pbuf_copy_partial+0xe0>)
 80085cc:	4825      	ldr	r0, [pc, #148]	@ (8008664 <pbuf_copy_partial+0xdc>)
 80085ce:	f00b fc67 	bl	8013ea0 <iprintf>
 80085d2:	2300      	movs	r3, #0
 80085d4:	e03e      	b.n	8008654 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	e034      	b.n	8008646 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80085dc:	88bb      	ldrh	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <pbuf_copy_partial+0x70>
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	895b      	ldrh	r3, [r3, #10]
 80085e6:	88ba      	ldrh	r2, [r7, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d305      	bcc.n	80085f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	895b      	ldrh	r3, [r3, #10]
 80085f0:	88ba      	ldrh	r2, [r7, #4]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	80bb      	strh	r3, [r7, #4]
 80085f6:	e023      	b.n	8008640 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	895a      	ldrh	r2, [r3, #10]
 80085fc:	88bb      	ldrh	r3, [r7, #4]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008602:	8b3a      	ldrh	r2, [r7, #24]
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	429a      	cmp	r2, r3
 8008608:	d901      	bls.n	800860e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800860e:	8b7b      	ldrh	r3, [r7, #26]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	18d0      	adds	r0, r2, r3
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	88bb      	ldrh	r3, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	8b3a      	ldrh	r2, [r7, #24]
 800861e:	4619      	mov	r1, r3
 8008620:	f00b fd19 	bl	8014056 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008624:	8afa      	ldrh	r2, [r7, #22]
 8008626:	8b3b      	ldrh	r3, [r7, #24]
 8008628:	4413      	add	r3, r2
 800862a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800862c:	8b7a      	ldrh	r2, [r7, #26]
 800862e:	8b3b      	ldrh	r3, [r7, #24]
 8008630:	4413      	add	r3, r2
 8008632:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	8b3b      	ldrh	r3, [r7, #24]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <pbuf_copy_partial+0xca>
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1c4      	bne.n	80085dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008652:	8afb      	ldrh	r3, [r7, #22]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	08015390 	.word	0x08015390
 8008660:	080156d8 	.word	0x080156d8
 8008664:	080153f0 	.word	0x080153f0
 8008668:	080156f8 	.word	0x080156f8

0800866c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	460b      	mov	r3, r1
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800867a:	897b      	ldrh	r3, [r7, #10]
 800867c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008682:	e007      	b.n	8008694 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	895b      	ldrh	r3, [r3, #10]
 8008688:	8afa      	ldrh	r2, [r7, #22]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <pbuf_skip_const+0x38>
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	895b      	ldrh	r3, [r3, #10]
 800869e:	8afa      	ldrh	r2, [r7, #22]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d2ef      	bcs.n	8008684 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8afa      	ldrh	r2, [r7, #22]
 80086ae:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80086b0:	693b      	ldr	r3, [r7, #16]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	460b      	mov	r3, r1
 80086c8:	607a      	str	r2, [r7, #4]
 80086ca:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80086cc:	897b      	ldrh	r3, [r7, #10]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4619      	mov	r1, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff ffca 	bl	800866c <pbuf_skip_const>
 80086d8:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80086da:	697b      	ldr	r3, [r7, #20]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d109      	bne.n	8008714 <pbuf_take+0x30>
 8008700:	4b3a      	ldr	r3, [pc, #232]	@ (80087ec <pbuf_take+0x108>)
 8008702:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8008706:	493a      	ldr	r1, [pc, #232]	@ (80087f0 <pbuf_take+0x10c>)
 8008708:	483a      	ldr	r0, [pc, #232]	@ (80087f4 <pbuf_take+0x110>)
 800870a:	f00b fbc9 	bl	8013ea0 <iprintf>
 800870e:	f06f 030f 	mvn.w	r3, #15
 8008712:	e067      	b.n	80087e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <pbuf_take+0x4a>
 800871a:	4b34      	ldr	r3, [pc, #208]	@ (80087ec <pbuf_take+0x108>)
 800871c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8008720:	4935      	ldr	r1, [pc, #212]	@ (80087f8 <pbuf_take+0x114>)
 8008722:	4834      	ldr	r0, [pc, #208]	@ (80087f4 <pbuf_take+0x110>)
 8008724:	f00b fbbc 	bl	8013ea0 <iprintf>
 8008728:	f06f 030f 	mvn.w	r3, #15
 800872c:	e05a      	b.n	80087e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	891b      	ldrh	r3, [r3, #8]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	429a      	cmp	r2, r3
 8008736:	d909      	bls.n	800874c <pbuf_take+0x68>
 8008738:	4b2c      	ldr	r3, [pc, #176]	@ (80087ec <pbuf_take+0x108>)
 800873a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800873e:	492f      	ldr	r1, [pc, #188]	@ (80087fc <pbuf_take+0x118>)
 8008740:	482c      	ldr	r0, [pc, #176]	@ (80087f4 <pbuf_take+0x110>)
 8008742:	f00b fbad 	bl	8013ea0 <iprintf>
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	e04b      	b.n	80087e4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <pbuf_take+0x7e>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d004      	beq.n	8008762 <pbuf_take+0x7e>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	891b      	ldrh	r3, [r3, #8]
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	429a      	cmp	r2, r3
 8008760:	d902      	bls.n	8008768 <pbuf_take+0x84>
    return ERR_ARG;
 8008762:	f06f 030f 	mvn.w	r3, #15
 8008766:	e03d      	b.n	80087e4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	61fb      	str	r3, [r7, #28]
 800876c:	e028      	b.n	80087c0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <pbuf_take+0x9e>
 8008774:	4b1d      	ldr	r3, [pc, #116]	@ (80087ec <pbuf_take+0x108>)
 8008776:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800877a:	4921      	ldr	r1, [pc, #132]	@ (8008800 <pbuf_take+0x11c>)
 800877c:	481d      	ldr	r0, [pc, #116]	@ (80087f4 <pbuf_take+0x110>)
 800877e:	f00b fb8f 	bl	8013ea0 <iprintf>
    buf_copy_len = total_copy_len;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	895b      	ldrh	r3, [r3, #10]
 800878a:	461a      	mov	r2, r3
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	4293      	cmp	r3, r2
 8008790:	d902      	bls.n	8008798 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	895b      	ldrh	r3, [r3, #10]
 8008796:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	6858      	ldr	r0, [r3, #4]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4413      	add	r3, r2
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4619      	mov	r1, r3
 80087a6:	f00b fc56 	bl	8014056 <memcpy>
    total_copy_len -= buf_copy_len;
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	4413      	add	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1d3      	bne.n	800876e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <pbuf_take+0xf0>
 80087cc:	88fb      	ldrh	r3, [r7, #6]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d006      	beq.n	80087e2 <pbuf_take+0xfe>
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <pbuf_take+0x108>)
 80087d6:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80087da:	490a      	ldr	r1, [pc, #40]	@ (8008804 <pbuf_take+0x120>)
 80087dc:	4805      	ldr	r0, [pc, #20]	@ (80087f4 <pbuf_take+0x110>)
 80087de:	f00b fb5f 	bl	8013ea0 <iprintf>
  return ERR_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	08015390 	.word	0x08015390
 80087f0:	08015768 	.word	0x08015768
 80087f4:	080153f0 	.word	0x080153f0
 80087f8:	08015780 	.word	0x08015780
 80087fc:	0801579c 	.word	0x0801579c
 8008800:	080157bc 	.word	0x080157bc
 8008804:	080157d4 	.word	0x080157d4

08008808 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4611      	mov	r1, r2
 8008814:	461a      	mov	r2, r3
 8008816:	460b      	mov	r3, r1
 8008818:	80fb      	strh	r3, [r7, #6]
 800881a:	4613      	mov	r3, r2
 800881c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800881e:	f107 0210 	add.w	r2, r7, #16
 8008822:	88bb      	ldrh	r3, [r7, #4]
 8008824:	4619      	mov	r1, r3
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f7ff ff49 	bl	80086be <pbuf_skip>
 800882c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d047      	beq.n	80088c4 <pbuf_take_at+0xbc>
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	461a      	mov	r2, r3
 800883a:	8a3b      	ldrh	r3, [r7, #16]
 800883c:	4619      	mov	r1, r3
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	440b      	add	r3, r1
 8008842:	429a      	cmp	r2, r3
 8008844:	db3e      	blt.n	80088c4 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	895a      	ldrh	r2, [r3, #10]
 8008852:	8a3b      	ldrh	r3, [r7, #16]
 8008854:	429a      	cmp	r2, r3
 8008856:	d806      	bhi.n	8008866 <pbuf_take_at+0x5e>
 8008858:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <pbuf_take_at+0xc8>)
 800885a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800885e:	491d      	ldr	r1, [pc, #116]	@ (80088d4 <pbuf_take_at+0xcc>)
 8008860:	481d      	ldr	r0, [pc, #116]	@ (80088d8 <pbuf_take_at+0xd0>)
 8008862:	f00b fb1d 	bl	8013ea0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	895b      	ldrh	r3, [r3, #10]
 800886a:	461a      	mov	r2, r3
 800886c:	8a3b      	ldrh	r3, [r7, #16]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	429a      	cmp	r2, r3
 8008874:	da05      	bge.n	8008882 <pbuf_take_at+0x7a>
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	895a      	ldrh	r2, [r3, #10]
 800887a:	8a3b      	ldrh	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	b29b      	uxth	r3, r3
 8008880:	e000      	b.n	8008884 <pbuf_take_at+0x7c>
 8008882:	88fb      	ldrh	r3, [r7, #6]
 8008884:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	8a3a      	ldrh	r2, [r7, #16]
 800888c:	4413      	add	r3, r2
 800888e:	8a7a      	ldrh	r2, [r7, #18]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	4618      	mov	r0, r3
 8008894:	f00b fbdf 	bl	8014056 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008898:	8b7a      	ldrh	r2, [r7, #26]
 800889a:	8a7b      	ldrh	r3, [r7, #18]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80088a0:	8a7b      	ldrh	r3, [r7, #18]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80088a8:	8b7b      	ldrh	r3, [r7, #26]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	8b7a      	ldrh	r2, [r7, #26]
 80088b4:	6979      	ldr	r1, [r7, #20]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff ff14 	bl	80086e4 <pbuf_take>
 80088bc:	4603      	mov	r3, r0
 80088be:	e003      	b.n	80088c8 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e001      	b.n	80088c8 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	08015390 	.word	0x08015390
 80088d4:	080157ec 	.word	0x080157ec
 80088d8:	080153f0 	.word	0x080153f0

080088dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	603a      	str	r2, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
 80088e8:	460b      	mov	r3, r1
 80088ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	8919      	ldrh	r1, [r3, #8]
 80088f0:	88ba      	ldrh	r2, [r7, #4]
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f969 	bl	8007bcc <pbuf_alloc>
 80088fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <pbuf_clone+0x2a>
    return NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	e011      	b.n	800892a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7ff fd6b 	bl	80083e4 <pbuf_copy>
 800890e:	4603      	mov	r3, r0
 8008910:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008912:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <pbuf_clone+0x4c>
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <pbuf_clone+0x58>)
 800891c:	f240 5224 	movw	r2, #1316	@ 0x524
 8008920:	4905      	ldr	r1, [pc, #20]	@ (8008938 <pbuf_clone+0x5c>)
 8008922:	4806      	ldr	r0, [pc, #24]	@ (800893c <pbuf_clone+0x60>)
 8008924:	f00b fabc 	bl	8013ea0 <iprintf>
  return q;
 8008928:	68fb      	ldr	r3, [r7, #12]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	08015390 	.word	0x08015390
 8008938:	08015804 	.word	0x08015804
 800893c:	080153f0 	.word	0x080153f0

08008940 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	807b      	strh	r3, [r7, #2]
 800894c:	4613      	mov	r3, r2
 800894e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8008950:	f107 020a 	add.w	r2, r7, #10
 8008954:	887b      	ldrh	r3, [r7, #2]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff feb0 	bl	80086be <pbuf_skip>
 800895e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <pbuf_put_at+0x3c>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	895a      	ldrh	r2, [r3, #10]
 800896a:	897b      	ldrh	r3, [r7, #10]
 800896c:	429a      	cmp	r2, r3
 800896e:	d905      	bls.n	800897c <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	897a      	ldrh	r2, [r7, #10]
 8008976:	4413      	add	r3, r2
 8008978:	787a      	ldrb	r2, [r7, #1]
 800897a:	701a      	strb	r2, [r3, #0]
  }
}
 800897c:	bf00      	nop
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008988:	f00b f98a 	bl	8013ca0 <rand>
 800898c:	4603      	mov	r3, r0
 800898e:	b29b      	uxth	r3, r3
 8008990:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008994:	b29b      	uxth	r3, r3
 8008996:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800899a:	b29a      	uxth	r2, r3
 800899c:	4b01      	ldr	r3, [pc, #4]	@ (80089a4 <tcp_init+0x20>)
 800899e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80089a0:	bf00      	nop
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	2000000a 	.word	0x2000000a

080089a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7d1b      	ldrb	r3, [r3, #20]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d105      	bne.n	80089c4 <tcp_free+0x1c>
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <tcp_free+0x2c>)
 80089ba:	22d4      	movs	r2, #212	@ 0xd4
 80089bc:	4906      	ldr	r1, [pc, #24]	@ (80089d8 <tcp_free+0x30>)
 80089be:	4807      	ldr	r0, [pc, #28]	@ (80089dc <tcp_free+0x34>)
 80089c0:	f00b fa6e 	bl	8013ea0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	2001      	movs	r0, #1
 80089c8:	f7fe fd62 	bl	8007490 <memp_free>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	08015890 	.word	0x08015890
 80089d8:	080158c0 	.word	0x080158c0
 80089dc:	080158d4 	.word	0x080158d4

080089e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7d1b      	ldrb	r3, [r3, #20]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d105      	bne.n	80089fc <tcp_free_listen+0x1c>
 80089f0:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <tcp_free_listen+0x2c>)
 80089f2:	22df      	movs	r2, #223	@ 0xdf
 80089f4:	4906      	ldr	r1, [pc, #24]	@ (8008a10 <tcp_free_listen+0x30>)
 80089f6:	4807      	ldr	r0, [pc, #28]	@ (8008a14 <tcp_free_listen+0x34>)
 80089f8:	f00b fa52 	bl	8013ea0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	2002      	movs	r0, #2
 8008a00:	f7fe fd46 	bl	8007490 <memp_free>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	08015890 	.word	0x08015890
 8008a10:	080158fc 	.word	0x080158fc
 8008a14:	080158d4 	.word	0x080158d4

08008a18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008a1c:	f001 f85e 	bl	8009adc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <tcp_tmr+0x28>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	4b05      	ldr	r3, [pc, #20]	@ (8008a40 <tcp_tmr+0x28>)
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	4b04      	ldr	r3, [pc, #16]	@ (8008a40 <tcp_tmr+0x28>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008a38:	f000 fd0e 	bl	8009458 <tcp_slowtmr>
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20004345 	.word	0x20004345

08008a44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <tcp_remove_listener+0x1c>
 8008a54:	4b0d      	ldr	r3, [pc, #52]	@ (8008a8c <tcp_remove_listener+0x48>)
 8008a56:	22ff      	movs	r2, #255	@ 0xff
 8008a58:	490d      	ldr	r1, [pc, #52]	@ (8008a90 <tcp_remove_listener+0x4c>)
 8008a5a:	480e      	ldr	r0, [pc, #56]	@ (8008a94 <tcp_remove_listener+0x50>)
 8008a5c:	f00b fa20 	bl	8013ea0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e00a      	b.n	8008a7c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d102      	bne.n	8008a76 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f1      	bne.n	8008a66 <tcp_remove_listener+0x22>
    }
  }
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	08015890 	.word	0x08015890
 8008a90:	08015918 	.word	0x08015918
 8008a94:	080158d4 	.word	0x080158d4

08008a98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <tcp_listen_closed+0x1c>
 8008aa6:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <tcp_listen_closed+0x60>)
 8008aa8:	f240 1211 	movw	r2, #273	@ 0x111
 8008aac:	4913      	ldr	r1, [pc, #76]	@ (8008afc <tcp_listen_closed+0x64>)
 8008aae:	4814      	ldr	r0, [pc, #80]	@ (8008b00 <tcp_listen_closed+0x68>)
 8008ab0:	f00b f9f6 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7d1b      	ldrb	r3, [r3, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d006      	beq.n	8008aca <tcp_listen_closed+0x32>
 8008abc:	4b0e      	ldr	r3, [pc, #56]	@ (8008af8 <tcp_listen_closed+0x60>)
 8008abe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ac2:	4910      	ldr	r1, [pc, #64]	@ (8008b04 <tcp_listen_closed+0x6c>)
 8008ac4:	480e      	ldr	r0, [pc, #56]	@ (8008b00 <tcp_listen_closed+0x68>)
 8008ac6:	f00b f9eb 	bl	8013ea0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008aca:	2301      	movs	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e00b      	b.n	8008ae8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8008b08 <tcp_listen_closed+0x70>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff ffb1 	bl	8008a44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d9f0      	bls.n	8008ad0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	08015890 	.word	0x08015890
 8008afc:	08015940 	.word	0x08015940
 8008b00:	080158d4 	.word	0x080158d4
 8008b04:	0801594c 	.word	0x0801594c
 8008b08:	08017c44 	.word	0x08017c44

08008b0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008b0c:	b5b0      	push	{r4, r5, r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af04      	add	r7, sp, #16
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <tcp_close_shutdown+0x20>
 8008b1e:	4b63      	ldr	r3, [pc, #396]	@ (8008cac <tcp_close_shutdown+0x1a0>)
 8008b20:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008b24:	4962      	ldr	r1, [pc, #392]	@ (8008cb0 <tcp_close_shutdown+0x1a4>)
 8008b26:	4863      	ldr	r0, [pc, #396]	@ (8008cb4 <tcp_close_shutdown+0x1a8>)
 8008b28:	f00b f9ba 	bl	8013ea0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d066      	beq.n	8008c00 <tcp_close_shutdown+0xf4>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7d1b      	ldrb	r3, [r3, #20]
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d003      	beq.n	8008b42 <tcp_close_shutdown+0x36>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7d1b      	ldrb	r3, [r3, #20]
 8008b3e:	2b07      	cmp	r3, #7
 8008b40:	d15e      	bne.n	8008c00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <tcp_close_shutdown+0x48>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008b52:	d055      	beq.n	8008c00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8b5b      	ldrh	r3, [r3, #26]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <tcp_close_shutdown+0x62>
 8008b60:	4b52      	ldr	r3, [pc, #328]	@ (8008cac <tcp_close_shutdown+0x1a0>)
 8008b62:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008b66:	4954      	ldr	r1, [pc, #336]	@ (8008cb8 <tcp_close_shutdown+0x1ac>)
 8008b68:	4852      	ldr	r0, [pc, #328]	@ (8008cb4 <tcp_close_shutdown+0x1a8>)
 8008b6a:	f00b f999 	bl	8013ea0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008b76:	687d      	ldr	r5, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	8ad2      	ldrh	r2, [r2, #22]
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	8b09      	ldrh	r1, [r1, #24]
 8008b84:	9102      	str	r1, [sp, #8]
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4601      	mov	r1, r0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f005 fdbb 	bl	800e70c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f001 fb68 	bl	800a26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008b9c:	4b47      	ldr	r3, [pc, #284]	@ (8008cbc <tcp_close_shutdown+0x1b0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d105      	bne.n	8008bb2 <tcp_close_shutdown+0xa6>
 8008ba6:	4b45      	ldr	r3, [pc, #276]	@ (8008cbc <tcp_close_shutdown+0x1b0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4a43      	ldr	r2, [pc, #268]	@ (8008cbc <tcp_close_shutdown+0x1b0>)
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e013      	b.n	8008bda <tcp_close_shutdown+0xce>
 8008bb2:	4b42      	ldr	r3, [pc, #264]	@ (8008cbc <tcp_close_shutdown+0x1b0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	e00c      	b.n	8008bd4 <tcp_close_shutdown+0xc8>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d104      	bne.n	8008bce <tcp_close_shutdown+0xc2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	60da      	str	r2, [r3, #12]
 8008bcc:	e005      	b.n	8008bda <tcp_close_shutdown+0xce>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1ef      	bne.n	8008bba <tcp_close_shutdown+0xae>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	4b37      	ldr	r3, [pc, #220]	@ (8008cc0 <tcp_close_shutdown+0x1b4>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008be6:	4b37      	ldr	r3, [pc, #220]	@ (8008cc4 <tcp_close_shutdown+0x1b8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d102      	bne.n	8008bf6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008bf0:	f004 f810 	bl	800cc14 <tcp_trigger_input_pcb_close>
 8008bf4:	e002      	b.n	8008bfc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff fed6 	bl	80089a8 <tcp_free>
      }
      return ERR_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e050      	b.n	8008ca2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d03b      	beq.n	8008c80 <tcp_close_shutdown+0x174>
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	dc44      	bgt.n	8008c96 <tcp_close_shutdown+0x18a>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <tcp_close_shutdown+0x10a>
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d02a      	beq.n	8008c6a <tcp_close_shutdown+0x15e>
 8008c14:	e03f      	b.n	8008c96 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	8adb      	ldrh	r3, [r3, #22]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d021      	beq.n	8008c62 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cc8 <tcp_close_shutdown+0x1bc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d105      	bne.n	8008c34 <tcp_close_shutdown+0x128>
 8008c28:	4b27      	ldr	r3, [pc, #156]	@ (8008cc8 <tcp_close_shutdown+0x1bc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	4a26      	ldr	r2, [pc, #152]	@ (8008cc8 <tcp_close_shutdown+0x1bc>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e013      	b.n	8008c5c <tcp_close_shutdown+0x150>
 8008c34:	4b24      	ldr	r3, [pc, #144]	@ (8008cc8 <tcp_close_shutdown+0x1bc>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	e00c      	b.n	8008c56 <tcp_close_shutdown+0x14a>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d104      	bne.n	8008c50 <tcp_close_shutdown+0x144>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	60da      	str	r2, [r3, #12]
 8008c4e:	e005      	b.n	8008c5c <tcp_close_shutdown+0x150>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1ef      	bne.n	8008c3c <tcp_close_shutdown+0x130>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff fea0 	bl	80089a8 <tcp_free>
      break;
 8008c68:	e01a      	b.n	8008ca0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ff14 	bl	8008a98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4816      	ldr	r0, [pc, #88]	@ (8008ccc <tcp_close_shutdown+0x1c0>)
 8008c74:	f001 fb4a 	bl	800a30c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff feb1 	bl	80089e0 <tcp_free_listen>
      break;
 8008c7e:	e00f      	b.n	8008ca0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	480e      	ldr	r0, [pc, #56]	@ (8008cbc <tcp_close_shutdown+0x1b0>)
 8008c84:	f001 fb42 	bl	800a30c <tcp_pcb_remove>
 8008c88:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <tcp_close_shutdown+0x1b4>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff fe8a 	bl	80089a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008c94:	e004      	b.n	8008ca0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f81a 	bl	8008cd0 <tcp_close_shutdown_fin>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	e000      	b.n	8008ca2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08015890 	.word	0x08015890
 8008cb0:	08015964 	.word	0x08015964
 8008cb4:	080158d4 	.word	0x080158d4
 8008cb8:	08015984 	.word	0x08015984
 8008cbc:	2000433c 	.word	0x2000433c
 8008cc0:	20004344 	.word	0x20004344
 8008cc4:	2000437c 	.word	0x2000437c
 8008cc8:	20004334 	.word	0x20004334
 8008ccc:	20004338 	.word	0x20004338

08008cd0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <tcp_close_shutdown_fin+0x1c>
 8008cde:	4b2e      	ldr	r3, [pc, #184]	@ (8008d98 <tcp_close_shutdown_fin+0xc8>)
 8008ce0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008ce4:	492d      	ldr	r1, [pc, #180]	@ (8008d9c <tcp_close_shutdown_fin+0xcc>)
 8008ce6:	482e      	ldr	r0, [pc, #184]	@ (8008da0 <tcp_close_shutdown_fin+0xd0>)
 8008ce8:	f00b f8da 	bl	8013ea0 <iprintf>

  switch (pcb->state) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
 8008cf0:	2b07      	cmp	r3, #7
 8008cf2:	d020      	beq.n	8008d36 <tcp_close_shutdown_fin+0x66>
 8008cf4:	2b07      	cmp	r3, #7
 8008cf6:	dc2b      	bgt.n	8008d50 <tcp_close_shutdown_fin+0x80>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d002      	beq.n	8008d02 <tcp_close_shutdown_fin+0x32>
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d00d      	beq.n	8008d1c <tcp_close_shutdown_fin+0x4c>
 8008d00:	e026      	b.n	8008d50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f004 fdee 	bl	800d8e4 <tcp_send_fin>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11f      	bne.n	8008d54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2205      	movs	r2, #5
 8008d18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d1a:	e01b      	b.n	8008d54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f004 fde1 	bl	800d8e4 <tcp_send_fin>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d114      	bne.n	8008d58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2205      	movs	r2, #5
 8008d32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d34:	e010      	b.n	8008d58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f004 fdd4 	bl	800d8e4 <tcp_send_fin>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2209      	movs	r2, #9
 8008d4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d4e:	e005      	b.n	8008d5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e01c      	b.n	8008d8e <tcp_close_shutdown_fin+0xbe>
      break;
 8008d54:	bf00      	nop
 8008d56:	e002      	b.n	8008d5e <tcp_close_shutdown_fin+0x8e>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e000      	b.n	8008d5e <tcp_close_shutdown_fin+0x8e>
      break;
 8008d5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d103      	bne.n	8008d6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f004 fefa 	bl	800db60 <tcp_output>
 8008d6c:	e00d      	b.n	8008d8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d108      	bne.n	8008d8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8b5b      	ldrh	r3, [r3, #26]
 8008d7c:	f043 0308 	orr.w	r3, r3, #8
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	e001      	b.n	8008d8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	08015890 	.word	0x08015890
 8008d9c:	08015940 	.word	0x08015940
 8008da0:	080158d4 	.word	0x080158d4

08008da4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <tcp_close+0x22>
 8008db2:	4b0f      	ldr	r3, [pc, #60]	@ (8008df0 <tcp_close+0x4c>)
 8008db4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008db8:	490e      	ldr	r1, [pc, #56]	@ (8008df4 <tcp_close+0x50>)
 8008dba:	480f      	ldr	r0, [pc, #60]	@ (8008df8 <tcp_close+0x54>)
 8008dbc:	f00b f870 	bl	8013ea0 <iprintf>
 8008dc0:	f06f 030f 	mvn.w	r3, #15
 8008dc4:	e00f      	b.n	8008de6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7d1b      	ldrb	r3, [r3, #20]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d006      	beq.n	8008ddc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8b5b      	ldrh	r3, [r3, #26]
 8008dd2:	f043 0310 	orr.w	r3, r3, #16
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008ddc:	2101      	movs	r1, #1
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fe94 	bl	8008b0c <tcp_close_shutdown>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	08015890 	.word	0x08015890
 8008df4:	080159a0 	.word	0x080159a0
 8008df8:	080158d4 	.word	0x080158d4

08008dfc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08e      	sub	sp, #56	@ 0x38
 8008e00:	af04      	add	r7, sp, #16
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d107      	bne.n	8008e1c <tcp_abandon+0x20>
 8008e0c:	4b52      	ldr	r3, [pc, #328]	@ (8008f58 <tcp_abandon+0x15c>)
 8008e0e:	f240 223d 	movw	r2, #573	@ 0x23d
 8008e12:	4952      	ldr	r1, [pc, #328]	@ (8008f5c <tcp_abandon+0x160>)
 8008e14:	4852      	ldr	r0, [pc, #328]	@ (8008f60 <tcp_abandon+0x164>)
 8008e16:	f00b f843 	bl	8013ea0 <iprintf>
 8008e1a:	e099      	b.n	8008f50 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7d1b      	ldrb	r3, [r3, #20]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d106      	bne.n	8008e32 <tcp_abandon+0x36>
 8008e24:	4b4c      	ldr	r3, [pc, #304]	@ (8008f58 <tcp_abandon+0x15c>)
 8008e26:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008e2a:	494e      	ldr	r1, [pc, #312]	@ (8008f64 <tcp_abandon+0x168>)
 8008e2c:	484c      	ldr	r0, [pc, #304]	@ (8008f60 <tcp_abandon+0x164>)
 8008e2e:	f00b f837 	bl	8013ea0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7d1b      	ldrb	r3, [r3, #20]
 8008e36:	2b0a      	cmp	r3, #10
 8008e38:	d107      	bne.n	8008e4a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	484a      	ldr	r0, [pc, #296]	@ (8008f68 <tcp_abandon+0x16c>)
 8008e3e:	f001 fa65 	bl	800a30c <tcp_pcb_remove>
    tcp_free(pcb);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fdb0 	bl	80089a8 <tcp_free>
 8008e48:	e082      	b.n	8008f50 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e56:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e64:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7d1b      	ldrb	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d126      	bne.n	8008ec2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	8adb      	ldrh	r3, [r3, #22]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02e      	beq.n	8008eda <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f6c <tcp_abandon+0x170>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d105      	bne.n	8008e92 <tcp_abandon+0x96>
 8008e86:	4b39      	ldr	r3, [pc, #228]	@ (8008f6c <tcp_abandon+0x170>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4a37      	ldr	r2, [pc, #220]	@ (8008f6c <tcp_abandon+0x170>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e013      	b.n	8008eba <tcp_abandon+0xbe>
 8008e92:	4b36      	ldr	r3, [pc, #216]	@ (8008f6c <tcp_abandon+0x170>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e00c      	b.n	8008eb4 <tcp_abandon+0xb8>
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d104      	bne.n	8008eae <tcp_abandon+0xb2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e005      	b.n	8008eba <tcp_abandon+0xbe>
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ef      	bne.n	8008e9a <tcp_abandon+0x9e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	60da      	str	r2, [r3, #12]
 8008ec0:	e00b      	b.n	8008eda <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8adb      	ldrh	r3, [r3, #22]
 8008eca:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4828      	ldr	r0, [pc, #160]	@ (8008f70 <tcp_abandon+0x174>)
 8008ed0:	f001 fa1c 	bl	800a30c <tcp_pcb_remove>
 8008ed4:	4b27      	ldr	r3, [pc, #156]	@ (8008f74 <tcp_abandon+0x178>)
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fed8 	bl	8009c9c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fecf 	bl	8009c9c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fec6 	bl	8009c9c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00e      	beq.n	8008f34 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	8b12      	ldrh	r2, [r2, #24]
 8008f20:	9202      	str	r2, [sp, #8]
 8008f22:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008f24:	9201      	str	r2, [sp, #4]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	69b9      	ldr	r1, [r7, #24]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f005 fbec 	bl	800e70c <tcp_rst>
    }
    last_state = pcb->state;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7d1b      	ldrb	r3, [r3, #20]
 8008f38:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff fd34 	bl	80089a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <tcp_abandon+0x154>
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f06f 010c 	mvn.w	r1, #12
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	4798      	blx	r3
  }
}
 8008f50:	3728      	adds	r7, #40	@ 0x28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	08015890 	.word	0x08015890
 8008f5c:	080159d4 	.word	0x080159d4
 8008f60:	080158d4 	.word	0x080158d4
 8008f64:	080159f0 	.word	0x080159f0
 8008f68:	20004340 	.word	0x20004340
 8008f6c:	20004334 	.word	0x20004334
 8008f70:	2000433c 	.word	0x2000433c
 8008f74:	20004344 	.word	0x20004344

08008f78 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008f80:	2101      	movs	r1, #1
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff ff3a 	bl	8008dfc <tcp_abandon>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008f9e:	2304      	movs	r3, #4
 8008fa0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80090a4 <tcp_bind+0x114>)
 8008faa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <tcp_bind+0x36>
 8008fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80090a8 <tcp_bind+0x118>)
 8008fb4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008fb8:	493c      	ldr	r1, [pc, #240]	@ (80090ac <tcp_bind+0x11c>)
 8008fba:	483d      	ldr	r0, [pc, #244]	@ (80090b0 <tcp_bind+0x120>)
 8008fbc:	f00a ff70 	bl	8013ea0 <iprintf>
 8008fc0:	f06f 030f 	mvn.w	r3, #15
 8008fc4:	e06a      	b.n	800909c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	7d1b      	ldrb	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <tcp_bind+0x52>
 8008fce:	4b36      	ldr	r3, [pc, #216]	@ (80090a8 <tcp_bind+0x118>)
 8008fd0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8008fd4:	4937      	ldr	r1, [pc, #220]	@ (80090b4 <tcp_bind+0x124>)
 8008fd6:	4836      	ldr	r0, [pc, #216]	@ (80090b0 <tcp_bind+0x120>)
 8008fd8:	f00a ff62 	bl	8013ea0 <iprintf>
 8008fdc:	f06f 0305 	mvn.w	r3, #5
 8008fe0:	e05c      	b.n	800909c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <tcp_bind+0x6c>
    port = tcp_new_port();
 8008fe8:	f000 f9f0 	bl	80093cc <tcp_new_port>
 8008fec:	4603      	mov	r3, r0
 8008fee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d135      	bne.n	8009062 <tcp_bind+0xd2>
      return ERR_BUF;
 8008ff6:	f06f 0301 	mvn.w	r3, #1
 8008ffa:	e04f      	b.n	800909c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	e02b      	b.n	800905a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009002:	4a2d      	ldr	r2, [pc, #180]	@ (80090b8 <tcp_bind+0x128>)
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	e01e      	b.n	800904e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	8adb      	ldrh	r3, [r3, #22]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	429a      	cmp	r2, r3
 8009018:	d116      	bne.n	8009048 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800901a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <tcp_bind+0xb2>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800903e:	429a      	cmp	r2, r3
 8009040:	d102      	bne.n	8009048 <tcp_bind+0xb8>
              return ERR_USE;
 8009042:	f06f 0307 	mvn.w	r3, #7
 8009046:	e029      	b.n	800909c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1dd      	bne.n	8009010 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3301      	adds	r3, #1
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	429a      	cmp	r2, r3
 8009060:	dbcf      	blt.n	8009002 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <tcp_bind+0xf2>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d008      	beq.n	8009082 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <tcp_bind+0xec>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	e000      	b.n	800907e <tcp_bind+0xee>
 800907c:	2300      	movs	r3, #0
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009088:	4b0c      	ldr	r3, [pc, #48]	@ (80090bc <tcp_bind+0x12c>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	60da      	str	r2, [r3, #12]
 8009090:	4a0a      	ldr	r2, [pc, #40]	@ (80090bc <tcp_bind+0x12c>)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	f005 fcfb 	bl	800ea90 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	08017c84 	.word	0x08017c84
 80090a8:	08015890 	.word	0x08015890
 80090ac:	08015a24 	.word	0x08015a24
 80090b0:	080158d4 	.word	0x080158d4
 80090b4:	08015a3c 	.word	0x08015a3c
 80090b8:	08017c44 	.word	0x08017c44
 80090bc:	20004334 	.word	0x20004334

080090c0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <tcp_accept_null+0x22>
 80090d4:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <tcp_accept_null+0x34>)
 80090d6:	f240 320f 	movw	r2, #783	@ 0x30f
 80090da:	4907      	ldr	r1, [pc, #28]	@ (80090f8 <tcp_accept_null+0x38>)
 80090dc:	4807      	ldr	r0, [pc, #28]	@ (80090fc <tcp_accept_null+0x3c>)
 80090de:	f00a fedf 	bl	8013ea0 <iprintf>

  tcp_abort(pcb);
 80090e2:	68b8      	ldr	r0, [r7, #8]
 80090e4:	f7ff ff48 	bl	8008f78 <tcp_abort>

  return ERR_ABRT;
 80090e8:	f06f 030c 	mvn.w	r3, #12
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	08015890 	.word	0x08015890
 80090f8:	08015a64 	.word	0x08015a64
 80090fc:	080158d4 	.word	0x080158d4

08009100 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	2200      	movs	r2, #0
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f806 	bl	8009124 <tcp_listen_with_backlog_and_err>
 8009118:	4603      	mov	r3, r0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	460b      	mov	r3, r1
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <tcp_listen_with_backlog_and_err+0x2c>
 800913c:	4b47      	ldr	r3, [pc, #284]	@ (800925c <tcp_listen_with_backlog_and_err+0x138>)
 800913e:	f240 3259 	movw	r2, #857	@ 0x359
 8009142:	4947      	ldr	r1, [pc, #284]	@ (8009260 <tcp_listen_with_backlog_and_err+0x13c>)
 8009144:	4847      	ldr	r0, [pc, #284]	@ (8009264 <tcp_listen_with_backlog_and_err+0x140>)
 8009146:	f00a feab 	bl	8013ea0 <iprintf>
 800914a:	23f0      	movs	r3, #240	@ 0xf0
 800914c:	76fb      	strb	r3, [r7, #27]
 800914e:	e079      	b.n	8009244 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	7d1b      	ldrb	r3, [r3, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d009      	beq.n	800916c <tcp_listen_with_backlog_and_err+0x48>
 8009158:	4b40      	ldr	r3, [pc, #256]	@ (800925c <tcp_listen_with_backlog_and_err+0x138>)
 800915a:	f240 325a 	movw	r2, #858	@ 0x35a
 800915e:	4942      	ldr	r1, [pc, #264]	@ (8009268 <tcp_listen_with_backlog_and_err+0x144>)
 8009160:	4840      	ldr	r0, [pc, #256]	@ (8009264 <tcp_listen_with_backlog_and_err+0x140>)
 8009162:	f00a fe9d 	bl	8013ea0 <iprintf>
 8009166:	23f1      	movs	r3, #241	@ 0xf1
 8009168:	76fb      	strb	r3, [r7, #27]
 800916a:	e06b      	b.n	8009244 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	7d1b      	ldrb	r3, [r3, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d104      	bne.n	800917e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009178:	23f7      	movs	r3, #247	@ 0xf7
 800917a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800917c:	e062      	b.n	8009244 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800917e:	2002      	movs	r0, #2
 8009180:	f7fe f93a 	bl	80073f8 <memp_malloc>
 8009184:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800918c:	23ff      	movs	r3, #255	@ 0xff
 800918e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009190:	e058      	b.n	8009244 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8ada      	ldrh	r2, [r3, #22]
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2201      	movs	r2, #1
 80091a6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	7d5a      	ldrb	r2, [r3, #21]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	7a5a      	ldrb	r2, [r3, #9]
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	2200      	movs	r2, #0
 80091bc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	7ada      	ldrb	r2, [r3, #11]
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	7a9a      	ldrb	r2, [r3, #10]
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8adb      	ldrh	r3, [r3, #22]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d021      	beq.n	8009222 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80091de:	4b23      	ldr	r3, [pc, #140]	@ (800926c <tcp_listen_with_backlog_and_err+0x148>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d105      	bne.n	80091f4 <tcp_listen_with_backlog_and_err+0xd0>
 80091e8:	4b20      	ldr	r3, [pc, #128]	@ (800926c <tcp_listen_with_backlog_and_err+0x148>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	4a1f      	ldr	r2, [pc, #124]	@ (800926c <tcp_listen_with_backlog_and_err+0x148>)
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	e013      	b.n	800921c <tcp_listen_with_backlog_and_err+0xf8>
 80091f4:	4b1d      	ldr	r3, [pc, #116]	@ (800926c <tcp_listen_with_backlog_and_err+0x148>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e00c      	b.n	8009216 <tcp_listen_with_backlog_and_err+0xf2>
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	429a      	cmp	r2, r3
 8009204:	d104      	bne.n	8009210 <tcp_listen_with_backlog_and_err+0xec>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	60da      	str	r2, [r3, #12]
 800920e:	e005      	b.n	800921c <tcp_listen_with_backlog_and_err+0xf8>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1ef      	bne.n	80091fc <tcp_listen_with_backlog_and_err+0xd8>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fbc0 	bl	80089a8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4a11      	ldr	r2, [pc, #68]	@ (8009270 <tcp_listen_with_backlog_and_err+0x14c>)
 800922c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800922e:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <tcp_listen_with_backlog_and_err+0x150>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	60da      	str	r2, [r3, #12]
 8009236:	4a0f      	ldr	r2, [pc, #60]	@ (8009274 <tcp_listen_with_backlog_and_err+0x150>)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	f005 fc28 	bl	800ea90 <tcp_timer_needed>
  res = ERR_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7efa      	ldrb	r2, [r7, #27]
 800924e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009250:	69fb      	ldr	r3, [r7, #28]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	08015890 	.word	0x08015890
 8009260:	08015a84 	.word	0x08015a84
 8009264:	080158d4 	.word	0x080158d4
 8009268:	08015ab4 	.word	0x08015ab4
 800926c:	20004334 	.word	0x20004334
 8009270:	080090c1 	.word	0x080090c1
 8009274:	20004338 	.word	0x20004338

08009278 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <tcp_update_rcv_ann_wnd+0x1c>
 8009286:	4b25      	ldr	r3, [pc, #148]	@ (800931c <tcp_update_rcv_ann_wnd+0xa4>)
 8009288:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800928c:	4924      	ldr	r1, [pc, #144]	@ (8009320 <tcp_update_rcv_ann_wnd+0xa8>)
 800928e:	4825      	ldr	r0, [pc, #148]	@ (8009324 <tcp_update_rcv_ann_wnd+0xac>)
 8009290:	f00a fe06 	bl	8013ea0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800929c:	4413      	add	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80092a8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80092ac:	bf28      	it	cs
 80092ae:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80092b2:	b292      	uxth	r2, r2
 80092b4:	4413      	add	r3, r2
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	db08      	blt.n	80092d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	e020      	b.n	8009312 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd03      	ble.n	80092e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092e4:	e014      	b.n	8009310 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f8:	d306      	bcc.n	8009308 <tcp_update_rcv_ann_wnd+0x90>
 80092fa:	4b08      	ldr	r3, [pc, #32]	@ (800931c <tcp_update_rcv_ann_wnd+0xa4>)
 80092fc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009300:	4909      	ldr	r1, [pc, #36]	@ (8009328 <tcp_update_rcv_ann_wnd+0xb0>)
 8009302:	4808      	ldr	r0, [pc, #32]	@ (8009324 <tcp_update_rcv_ann_wnd+0xac>)
 8009304:	f00a fdcc 	bl	8013ea0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	b29a      	uxth	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009310:	2300      	movs	r3, #0
  }
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	08015890 	.word	0x08015890
 8009320:	08015aec 	.word	0x08015aec
 8009324:	080158d4 	.word	0x080158d4
 8009328:	08015b10 	.word	0x08015b10

0800932c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d107      	bne.n	800934e <tcp_recved+0x22>
 800933e:	4b1f      	ldr	r3, [pc, #124]	@ (80093bc <tcp_recved+0x90>)
 8009340:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009344:	491e      	ldr	r1, [pc, #120]	@ (80093c0 <tcp_recved+0x94>)
 8009346:	481f      	ldr	r0, [pc, #124]	@ (80093c4 <tcp_recved+0x98>)
 8009348:	f00a fdaa 	bl	8013ea0 <iprintf>
 800934c:	e032      	b.n	80093b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	7d1b      	ldrb	r3, [r3, #20]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d106      	bne.n	8009364 <tcp_recved+0x38>
 8009356:	4b19      	ldr	r3, [pc, #100]	@ (80093bc <tcp_recved+0x90>)
 8009358:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800935c:	491a      	ldr	r1, [pc, #104]	@ (80093c8 <tcp_recved+0x9c>)
 800935e:	4819      	ldr	r0, [pc, #100]	@ (80093c4 <tcp_recved+0x98>)
 8009360:	f00a fd9e 	bl	8013ea0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009368:	887b      	ldrh	r3, [r7, #2]
 800936a:	4413      	add	r3, r2
 800936c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800936e:	89fb      	ldrh	r3, [r7, #14]
 8009370:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009374:	d804      	bhi.n	8009380 <tcp_recved+0x54>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800937a:	89fa      	ldrh	r2, [r7, #14]
 800937c:	429a      	cmp	r2, r3
 800937e:	d204      	bcs.n	800938a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009386:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009388:	e002      	b.n	8009390 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	89fa      	ldrh	r2, [r7, #14]
 800938e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff71 	bl	8009278 <tcp_update_rcv_ann_wnd>
 8009396:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800939e:	d309      	bcc.n	80093b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	8b5b      	ldrh	r3, [r3, #26]
 80093a4:	f043 0302 	orr.w	r3, r3, #2
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f004 fbd6 	bl	800db60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	08015890 	.word	0x08015890
 80093c0:	08015b2c 	.word	0x08015b2c
 80093c4:	080158d4 	.word	0x080158d4
 80093c8:	08015b44 	.word	0x08015b44

080093cc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80093d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009450 <tcp_new_port+0x84>)
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	b29a      	uxth	r2, r3
 80093de:	4b1c      	ldr	r3, [pc, #112]	@ (8009450 <tcp_new_port+0x84>)
 80093e0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80093e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <tcp_new_port+0x84>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d103      	bne.n	80093f6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80093ee:	4b18      	ldr	r3, [pc, #96]	@ (8009450 <tcp_new_port+0x84>)
 80093f0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80093f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80093f6:	2300      	movs	r3, #0
 80093f8:	71fb      	strb	r3, [r7, #7]
 80093fa:	e01e      	b.n	800943a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	4a15      	ldr	r2, [pc, #84]	@ (8009454 <tcp_new_port+0x88>)
 8009400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	e011      	b.n	800942e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	8ada      	ldrh	r2, [r3, #22]
 800940e:	4b10      	ldr	r3, [pc, #64]	@ (8009450 <tcp_new_port+0x84>)
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d108      	bne.n	8009428 <tcp_new_port+0x5c>
        n++;
 8009416:	88bb      	ldrh	r3, [r7, #4]
 8009418:	3301      	adds	r3, #1
 800941a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800941c:	88bb      	ldrh	r3, [r7, #4]
 800941e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009422:	d3d8      	bcc.n	80093d6 <tcp_new_port+0xa>
          return 0;
 8009424:	2300      	movs	r3, #0
 8009426:	e00d      	b.n	8009444 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	603b      	str	r3, [r7, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1ea      	bne.n	800940a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	3301      	adds	r3, #1
 8009438:	71fb      	strb	r3, [r7, #7]
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	2b03      	cmp	r3, #3
 800943e:	d9dd      	bls.n	80093fc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009440:	4b03      	ldr	r3, [pc, #12]	@ (8009450 <tcp_new_port+0x84>)
 8009442:	881b      	ldrh	r3, [r3, #0]
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	2000000a 	.word	0x2000000a
 8009454:	08017c44 	.word	0x08017c44

08009458 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009458:	b5b0      	push	{r4, r5, r7, lr}
 800945a:	b090      	sub	sp, #64	@ 0x40
 800945c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009464:	4b95      	ldr	r3, [pc, #596]	@ (80096bc <tcp_slowtmr+0x264>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	4a94      	ldr	r2, [pc, #592]	@ (80096bc <tcp_slowtmr+0x264>)
 800946c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800946e:	4b94      	ldr	r3, [pc, #592]	@ (80096c0 <tcp_slowtmr+0x268>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	4b92      	ldr	r3, [pc, #584]	@ (80096c0 <tcp_slowtmr+0x268>)
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e000      	b.n	800947e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800947c:	bf00      	nop
  prev = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009482:	4b90      	ldr	r3, [pc, #576]	@ (80096c4 <tcp_slowtmr+0x26c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009488:	e29f      	b.n	80099ca <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	7d1b      	ldrb	r3, [r3, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <tcp_slowtmr+0x48>
 8009492:	4b8d      	ldr	r3, [pc, #564]	@ (80096c8 <tcp_slowtmr+0x270>)
 8009494:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009498:	498c      	ldr	r1, [pc, #560]	@ (80096cc <tcp_slowtmr+0x274>)
 800949a:	488d      	ldr	r0, [pc, #564]	@ (80096d0 <tcp_slowtmr+0x278>)
 800949c:	f00a fd00 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	7d1b      	ldrb	r3, [r3, #20]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d106      	bne.n	80094b6 <tcp_slowtmr+0x5e>
 80094a8:	4b87      	ldr	r3, [pc, #540]	@ (80096c8 <tcp_slowtmr+0x270>)
 80094aa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80094ae:	4989      	ldr	r1, [pc, #548]	@ (80096d4 <tcp_slowtmr+0x27c>)
 80094b0:	4887      	ldr	r0, [pc, #540]	@ (80096d0 <tcp_slowtmr+0x278>)
 80094b2:	f00a fcf5 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	7d1b      	ldrb	r3, [r3, #20]
 80094ba:	2b0a      	cmp	r3, #10
 80094bc:	d106      	bne.n	80094cc <tcp_slowtmr+0x74>
 80094be:	4b82      	ldr	r3, [pc, #520]	@ (80096c8 <tcp_slowtmr+0x270>)
 80094c0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80094c4:	4984      	ldr	r1, [pc, #528]	@ (80096d8 <tcp_slowtmr+0x280>)
 80094c6:	4882      	ldr	r0, [pc, #520]	@ (80096d0 <tcp_slowtmr+0x278>)
 80094c8:	f00a fcea 	bl	8013ea0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	7f9a      	ldrb	r2, [r3, #30]
 80094d0:	4b7b      	ldr	r3, [pc, #492]	@ (80096c0 <tcp_slowtmr+0x268>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d105      	bne.n	80094e4 <tcp_slowtmr+0x8c>
      prev = pcb;
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80094e2:	e272      	b.n	80099ca <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80094e4:	4b76      	ldr	r3, [pc, #472]	@ (80096c0 <tcp_slowtmr+0x268>)
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ea:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	7d1b      	ldrb	r3, [r3, #20]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d10a      	bne.n	8009516 <tcp_slowtmr+0xbe>
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009506:	2b05      	cmp	r3, #5
 8009508:	d905      	bls.n	8009516 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800950a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800950e:	3301      	adds	r3, #1
 8009510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009514:	e11e      	b.n	8009754 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800951c:	2b0b      	cmp	r3, #11
 800951e:	d905      	bls.n	800952c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009524:	3301      	adds	r3, #1
 8009526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800952a:	e113      	b.n	8009754 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009532:	2b00      	cmp	r3, #0
 8009534:	d075      	beq.n	8009622 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800953a:	2b00      	cmp	r3, #0
 800953c:	d006      	beq.n	800954c <tcp_slowtmr+0xf4>
 800953e:	4b62      	ldr	r3, [pc, #392]	@ (80096c8 <tcp_slowtmr+0x270>)
 8009540:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009544:	4965      	ldr	r1, [pc, #404]	@ (80096dc <tcp_slowtmr+0x284>)
 8009546:	4862      	ldr	r0, [pc, #392]	@ (80096d0 <tcp_slowtmr+0x278>)
 8009548:	f00a fcaa 	bl	8013ea0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <tcp_slowtmr+0x10a>
 8009554:	4b5c      	ldr	r3, [pc, #368]	@ (80096c8 <tcp_slowtmr+0x270>)
 8009556:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800955a:	4961      	ldr	r1, [pc, #388]	@ (80096e0 <tcp_slowtmr+0x288>)
 800955c:	485c      	ldr	r0, [pc, #368]	@ (80096d0 <tcp_slowtmr+0x278>)
 800955e:	f00a fc9f 	bl	8013ea0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009564:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009568:	2b0b      	cmp	r3, #11
 800956a:	d905      	bls.n	8009578 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009570:	3301      	adds	r3, #1
 8009572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009576:	e0ed      	b.n	8009754 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800957e:	3b01      	subs	r3, #1
 8009580:	4a58      	ldr	r2, [pc, #352]	@ (80096e4 <tcp_slowtmr+0x28c>)
 8009582:	5cd3      	ldrb	r3, [r2, r3]
 8009584:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009588:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800958c:	7c7a      	ldrb	r2, [r7, #17]
 800958e:	429a      	cmp	r2, r3
 8009590:	d907      	bls.n	80095a2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009594:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009598:	3301      	adds	r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80095a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80095a8:	7c7a      	ldrb	r2, [r7, #17]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	f200 80d2 	bhi.w	8009754 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80095b0:	2301      	movs	r3, #1
 80095b2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d108      	bne.n	80095d0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80095be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095c0:	f005 f998 	bl	800e8f4 <tcp_zero_window_probe>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d014      	beq.n	80095f4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80095ca:	2300      	movs	r3, #0
 80095cc:	623b      	str	r3, [r7, #32]
 80095ce:	e011      	b.n	80095f4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80095d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095d6:	4619      	mov	r1, r3
 80095d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095da:	f004 f83b 	bl	800d654 <tcp_split_unsent_seg>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80095e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095e6:	f004 fabb 	bl	800db60 <tcp_output>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80ac 	beq.w	8009754 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80095fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800960a:	2b06      	cmp	r3, #6
 800960c:	f200 80a2 	bhi.w	8009754 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009616:	3301      	adds	r3, #1
 8009618:	b2da      	uxtb	r2, r3
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009620:	e098      	b.n	8009754 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	db0f      	blt.n	800964c <tcp_slowtmr+0x1f4>
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009632:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009636:	4293      	cmp	r3, r2
 8009638:	d008      	beq.n	800964c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800963a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009640:	b29b      	uxth	r3, r3
 8009642:	3301      	adds	r3, #1
 8009644:	b29b      	uxth	r3, r3
 8009646:	b21a      	sxth	r2, r3
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009658:	429a      	cmp	r2, r3
 800965a:	db7b      	blt.n	8009754 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800965c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800965e:	f004 fd85 	bl	800e16c <tcp_rexmit_rto_prepare>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <tcp_slowtmr+0x220>
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966c:	2b00      	cmp	r3, #0
 800966e:	d171      	bne.n	8009754 <tcp_slowtmr+0x2fc>
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d06d      	beq.n	8009754 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967a:	7d1b      	ldrb	r3, [r3, #20]
 800967c:	2b02      	cmp	r3, #2
 800967e:	d03a      	beq.n	80096f6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009686:	2b0c      	cmp	r3, #12
 8009688:	bf28      	it	cs
 800968a:	230c      	movcs	r3, #12
 800968c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800968e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009690:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009694:	10db      	asrs	r3, r3, #3
 8009696:	b21b      	sxth	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80096a0:	4413      	add	r3, r2
 80096a2:	7efa      	ldrb	r2, [r7, #27]
 80096a4:	4910      	ldr	r1, [pc, #64]	@ (80096e8 <tcp_slowtmr+0x290>)
 80096a6:	5c8a      	ldrb	r2, [r1, r2]
 80096a8:	4093      	lsls	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80096b2:	4293      	cmp	r3, r2
 80096b4:	dc1a      	bgt.n	80096ec <tcp_slowtmr+0x294>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	b21a      	sxth	r2, r3
 80096ba:	e019      	b.n	80096f0 <tcp_slowtmr+0x298>
 80096bc:	20004330 	.word	0x20004330
 80096c0:	20004346 	.word	0x20004346
 80096c4:	2000433c 	.word	0x2000433c
 80096c8:	08015890 	.word	0x08015890
 80096cc:	08015bd4 	.word	0x08015bd4
 80096d0:	080158d4 	.word	0x080158d4
 80096d4:	08015c00 	.word	0x08015c00
 80096d8:	08015c2c 	.word	0x08015c2c
 80096dc:	08015c5c 	.word	0x08015c5c
 80096e0:	08015c90 	.word	0x08015c90
 80096e4:	08017c3c 	.word	0x08017c3c
 80096e8:	08017c2c 	.word	0x08017c2c
 80096ec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80096f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80096f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f8:	2200      	movs	r2, #0
 80096fa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80096fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009708:	4293      	cmp	r3, r2
 800970a:	bf28      	it	cs
 800970c:	4613      	movcs	r3, r2
 800970e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009710:	8a7b      	ldrh	r3, [r7, #18]
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009718:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	b29b      	uxth	r3, r3
 800972a:	429a      	cmp	r2, r3
 800972c:	d206      	bcs.n	800973c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	2200      	movs	r2, #0
 800974a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800974e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009750:	f004 fd7c 	bl	800e24c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009756:	7d1b      	ldrb	r3, [r3, #20]
 8009758:	2b06      	cmp	r3, #6
 800975a:	d111      	bne.n	8009780 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	8b5b      	ldrh	r3, [r3, #26]
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009768:	4b9d      	ldr	r3, [pc, #628]	@ (80099e0 <tcp_slowtmr+0x588>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b28      	cmp	r3, #40	@ 0x28
 8009774:	d904      	bls.n	8009780 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800977a:	3301      	adds	r3, #1
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	7a5b      	ldrb	r3, [r3, #9]
 8009784:	f003 0308 	and.w	r3, r3, #8
 8009788:	2b00      	cmp	r3, #0
 800978a:	d04c      	beq.n	8009826 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800978c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009790:	2b04      	cmp	r3, #4
 8009792:	d003      	beq.n	800979c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009798:	2b07      	cmp	r3, #7
 800979a:	d144      	bne.n	8009826 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800979c:	4b90      	ldr	r3, [pc, #576]	@ (80099e0 <tcp_slowtmr+0x588>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097ac:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80097b0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80097b4:	498b      	ldr	r1, [pc, #556]	@ (80099e4 <tcp_slowtmr+0x58c>)
 80097b6:	fba1 1303 	umull	r1, r3, r1, r3
 80097ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097bc:	429a      	cmp	r2, r3
 80097be:	d90a      	bls.n	80097d6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80097c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c4:	3301      	adds	r3, #1
 80097c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80097ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097ce:	3301      	adds	r3, #1
 80097d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80097d4:	e027      	b.n	8009826 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097d6:	4b82      	ldr	r3, [pc, #520]	@ (80099e0 <tcp_slowtmr+0x588>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80097e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80097ec:	4618      	mov	r0, r3
 80097ee:	4b7e      	ldr	r3, [pc, #504]	@ (80099e8 <tcp_slowtmr+0x590>)
 80097f0:	fb00 f303 	mul.w	r3, r0, r3
 80097f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80097f6:	497b      	ldr	r1, [pc, #492]	@ (80099e4 <tcp_slowtmr+0x58c>)
 80097f8:	fba1 1303 	umull	r1, r3, r1, r3
 80097fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097fe:	429a      	cmp	r2, r3
 8009800:	d911      	bls.n	8009826 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8009802:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009804:	f005 f836 	bl	800e874 <tcp_keepalive>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800980e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009812:	2b00      	cmp	r3, #0
 8009814:	d107      	bne.n	8009826 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8009816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009818:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800981c:	3301      	adds	r3, #1
 800981e:	b2da      	uxtb	r2, r3
 8009820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009822:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982a:	2b00      	cmp	r3, #0
 800982c:	d011      	beq.n	8009852 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800982e:	4b6c      	ldr	r3, [pc, #432]	@ (80099e0 <tcp_slowtmr+0x588>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	1ad2      	subs	r2, r2, r3
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800983e:	4619      	mov	r1, r3
 8009840:	460b      	mov	r3, r1
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	440b      	add	r3, r1
 8009846:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800984c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800984e:	f000 fec1 	bl	800a5d4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	7d1b      	ldrb	r3, [r3, #20]
 8009856:	2b03      	cmp	r3, #3
 8009858:	d10b      	bne.n	8009872 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800985a:	4b61      	ldr	r3, [pc, #388]	@ (80099e0 <tcp_slowtmr+0x588>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b28      	cmp	r3, #40	@ 0x28
 8009866:	d904      	bls.n	8009872 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8009868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800986c:	3301      	adds	r3, #1
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	7d1b      	ldrb	r3, [r3, #20]
 8009876:	2b09      	cmp	r3, #9
 8009878:	d10b      	bne.n	8009892 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800987a:	4b59      	ldr	r3, [pc, #356]	@ (80099e0 <tcp_slowtmr+0x588>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2bf0      	cmp	r3, #240	@ 0xf0
 8009886:	d904      	bls.n	8009892 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8009888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800988c:	3301      	adds	r3, #1
 800988e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009896:	2b00      	cmp	r3, #0
 8009898:	d060      	beq.n	800995c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800989a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80098a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098a4:	f000 fce2 	bl	800a26c <tcp_pcb_purge>
      if (prev != NULL) {
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d010      	beq.n	80098d0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80098ae:	4b4f      	ldr	r3, [pc, #316]	@ (80099ec <tcp_slowtmr+0x594>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d106      	bne.n	80098c6 <tcp_slowtmr+0x46e>
 80098b8:	4b4d      	ldr	r3, [pc, #308]	@ (80099f0 <tcp_slowtmr+0x598>)
 80098ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 80098be:	494d      	ldr	r1, [pc, #308]	@ (80099f4 <tcp_slowtmr+0x59c>)
 80098c0:	484d      	ldr	r0, [pc, #308]	@ (80099f8 <tcp_slowtmr+0x5a0>)
 80098c2:	f00a faed 	bl	8013ea0 <iprintf>
        prev->next = pcb->next;
 80098c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	e00f      	b.n	80098f0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80098d0:	4b46      	ldr	r3, [pc, #280]	@ (80099ec <tcp_slowtmr+0x594>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d006      	beq.n	80098e8 <tcp_slowtmr+0x490>
 80098da:	4b45      	ldr	r3, [pc, #276]	@ (80099f0 <tcp_slowtmr+0x598>)
 80098dc:	f240 5271 	movw	r2, #1393	@ 0x571
 80098e0:	4946      	ldr	r1, [pc, #280]	@ (80099fc <tcp_slowtmr+0x5a4>)
 80098e2:	4845      	ldr	r0, [pc, #276]	@ (80099f8 <tcp_slowtmr+0x5a0>)
 80098e4:	f00a fadc 	bl	8013ea0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	4a3f      	ldr	r2, [pc, #252]	@ (80099ec <tcp_slowtmr+0x594>)
 80098ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80098f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d013      	beq.n	8009920 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80098fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009900:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009904:	3304      	adds	r3, #4
 8009906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009908:	8ad2      	ldrh	r2, [r2, #22]
 800990a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800990c:	8b09      	ldrh	r1, [r1, #24]
 800990e:	9102      	str	r1, [sp, #8]
 8009910:	9201      	str	r2, [sp, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	462b      	mov	r3, r5
 8009916:	4622      	mov	r2, r4
 8009918:	4601      	mov	r1, r0
 800991a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800991c:	f004 fef6 	bl	800e70c <tcp_rst>
      err_arg = pcb->callback_arg;
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	7d1b      	ldrb	r3, [r3, #20]
 800992a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009936:	6838      	ldr	r0, [r7, #0]
 8009938:	f7ff f836 	bl	80089a8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800993c:	4b30      	ldr	r3, [pc, #192]	@ (8009a00 <tcp_slowtmr+0x5a8>)
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <tcp_slowtmr+0x4fa>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f06f 010c 	mvn.w	r1, #12
 800994e:	68b8      	ldr	r0, [r7, #8]
 8009950:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009952:	4b2b      	ldr	r3, [pc, #172]	@ (8009a00 <tcp_slowtmr+0x5a8>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d037      	beq.n	80099ca <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800995a:	e590      	b.n	800947e <tcp_slowtmr+0x26>
      prev = pcb;
 800995c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800995e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	7f1b      	ldrb	r3, [r3, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	7f1a      	ldrb	r2, [r3, #28]
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	7f5b      	ldrb	r3, [r3, #29]
 800997a:	429a      	cmp	r2, r3
 800997c:	d325      	bcc.n	80099ca <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	2200      	movs	r2, #0
 8009982:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009984:	4b1e      	ldr	r3, [pc, #120]	@ (8009a00 <tcp_slowtmr+0x5a8>)
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <tcp_slowtmr+0x554>
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800999a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800999c:	6912      	ldr	r2, [r2, #16]
 800999e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80099aa:	e002      	b.n	80099b2 <tcp_slowtmr+0x55a>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80099b2:	4b13      	ldr	r3, [pc, #76]	@ (8009a00 <tcp_slowtmr+0x5a8>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f47f ad60 	bne.w	800947c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80099bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <tcp_slowtmr+0x572>
          tcp_output(prev);
 80099c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099c6:	f004 f8cb 	bl	800db60 <tcp_output>
  while (pcb != NULL) {
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f47f ad5c 	bne.w	800948a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80099d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a04 <tcp_slowtmr+0x5ac>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80099dc:	e067      	b.n	8009aae <tcp_slowtmr+0x656>
 80099de:	bf00      	nop
 80099e0:	20004330 	.word	0x20004330
 80099e4:	10624dd3 	.word	0x10624dd3
 80099e8:	000124f8 	.word	0x000124f8
 80099ec:	2000433c 	.word	0x2000433c
 80099f0:	08015890 	.word	0x08015890
 80099f4:	08015cc8 	.word	0x08015cc8
 80099f8:	080158d4 	.word	0x080158d4
 80099fc:	08015cf4 	.word	0x08015cf4
 8009a00:	20004344 	.word	0x20004344
 8009a04:	20004340 	.word	0x20004340
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0a:	7d1b      	ldrb	r3, [r3, #20]
 8009a0c:	2b0a      	cmp	r3, #10
 8009a0e:	d006      	beq.n	8009a1e <tcp_slowtmr+0x5c6>
 8009a10:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac0 <tcp_slowtmr+0x668>)
 8009a12:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009a16:	492b      	ldr	r1, [pc, #172]	@ (8009ac4 <tcp_slowtmr+0x66c>)
 8009a18:	482b      	ldr	r0, [pc, #172]	@ (8009ac8 <tcp_slowtmr+0x670>)
 8009a1a:	f00a fa41 	bl	8013ea0 <iprintf>
    pcb_remove = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009a24:	4b29      	ldr	r3, [pc, #164]	@ (8009acc <tcp_slowtmr+0x674>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a30:	d904      	bls.n	8009a3c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009a32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a36:	3301      	adds	r3, #1
 8009a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02f      	beq.n	8009aa4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009a44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a46:	f000 fc11 	bl	800a26c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d010      	beq.n	8009a72 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009a50:	4b1f      	ldr	r3, [pc, #124]	@ (8009ad0 <tcp_slowtmr+0x678>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d106      	bne.n	8009a68 <tcp_slowtmr+0x610>
 8009a5a:	4b19      	ldr	r3, [pc, #100]	@ (8009ac0 <tcp_slowtmr+0x668>)
 8009a5c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009a60:	491c      	ldr	r1, [pc, #112]	@ (8009ad4 <tcp_slowtmr+0x67c>)
 8009a62:	4819      	ldr	r0, [pc, #100]	@ (8009ac8 <tcp_slowtmr+0x670>)
 8009a64:	f00a fa1c 	bl	8013ea0 <iprintf>
        prev->next = pcb->next;
 8009a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	60da      	str	r2, [r3, #12]
 8009a70:	e00f      	b.n	8009a92 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a72:	4b17      	ldr	r3, [pc, #92]	@ (8009ad0 <tcp_slowtmr+0x678>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d006      	beq.n	8009a8a <tcp_slowtmr+0x632>
 8009a7c:	4b10      	ldr	r3, [pc, #64]	@ (8009ac0 <tcp_slowtmr+0x668>)
 8009a7e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009a82:	4915      	ldr	r1, [pc, #84]	@ (8009ad8 <tcp_slowtmr+0x680>)
 8009a84:	4810      	ldr	r0, [pc, #64]	@ (8009ac8 <tcp_slowtmr+0x670>)
 8009a86:	f00a fa0b 	bl	8013ea0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	4a10      	ldr	r2, [pc, #64]	@ (8009ad0 <tcp_slowtmr+0x678>)
 8009a90:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a94:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009a9c:	69f8      	ldr	r0, [r7, #28]
 8009a9e:	f7fe ff83 	bl	80089a8 <tcp_free>
 8009aa2:	e004      	b.n	8009aae <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1a9      	bne.n	8009a08 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	3730      	adds	r7, #48	@ 0x30
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bdb0      	pop	{r4, r5, r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	08015890 	.word	0x08015890
 8009ac4:	08015d20 	.word	0x08015d20
 8009ac8:	080158d4 	.word	0x080158d4
 8009acc:	20004330 	.word	0x20004330
 8009ad0:	20004340 	.word	0x20004340
 8009ad4:	08015d50 	.word	0x08015d50
 8009ad8:	08015d78 	.word	0x08015d78

08009adc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8009b98 <tcp_fasttmr+0xbc>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b2b      	ldr	r3, [pc, #172]	@ (8009b98 <tcp_fasttmr+0xbc>)
 8009aec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009aee:	4b2b      	ldr	r3, [pc, #172]	@ (8009b9c <tcp_fasttmr+0xc0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009af4:	e048      	b.n	8009b88 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	7f9a      	ldrb	r2, [r3, #30]
 8009afa:	4b27      	ldr	r3, [pc, #156]	@ (8009b98 <tcp_fasttmr+0xbc>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d03f      	beq.n	8009b82 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009b02:	4b25      	ldr	r3, [pc, #148]	@ (8009b98 <tcp_fasttmr+0xbc>)
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8b5b      	ldrh	r3, [r3, #26]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d010      	beq.n	8009b38 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	8b5b      	ldrh	r3, [r3, #26]
 8009b1a:	f043 0302 	orr.w	r3, r3, #2
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f004 f81b 	bl	800db60 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	8b5b      	ldrh	r3, [r3, #26]
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8b5b      	ldrh	r3, [r3, #26]
 8009b3c:	f003 0308 	and.w	r3, r3, #8
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d009      	beq.n	8009b58 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8b5b      	ldrh	r3, [r3, #26]
 8009b48:	f023 0308 	bic.w	r3, r3, #8
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff f8bc 	bl	8008cd0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009b66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba0 <tcp_fasttmr+0xc4>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f819 	bl	8009ba4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b72:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba0 <tcp_fasttmr+0xc4>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d000      	beq.n	8009b7c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b7a:	e7b8      	b.n	8009aee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	607b      	str	r3, [r7, #4]
 8009b80:	e002      	b.n	8009b88 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1b3      	bne.n	8009af6 <tcp_fasttmr+0x1a>
    }
  }
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20004346 	.word	0x20004346
 8009b9c:	2000433c 	.word	0x2000433c
 8009ba0:	20004344 	.word	0x20004344

08009ba4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d109      	bne.n	8009bc6 <tcp_process_refused_data+0x22>
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <tcp_process_refused_data+0xec>)
 8009bb4:	f240 6209 	movw	r2, #1545	@ 0x609
 8009bb8:	4936      	ldr	r1, [pc, #216]	@ (8009c94 <tcp_process_refused_data+0xf0>)
 8009bba:	4837      	ldr	r0, [pc, #220]	@ (8009c98 <tcp_process_refused_data+0xf4>)
 8009bbc:	f00a f970 	bl	8013ea0 <iprintf>
 8009bc0:	f06f 030f 	mvn.w	r3, #15
 8009bc4:	e060      	b.n	8009c88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bca:	7b5b      	ldrb	r3, [r3, #13]
 8009bcc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bd2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <tcp_process_refused_data+0x58>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6918      	ldr	r0, [r3, #16]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	47a0      	blx	r4
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]
 8009bfa:	e007      	b.n	8009c0c <tcp_process_refused_data+0x68>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	2000      	movs	r0, #0
 8009c04:	f000 f8c2 	bl	8009d8c <tcp_recv_null>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d12a      	bne.n	8009c6a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d033      	beq.n	8009c86 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009c26:	d005      	beq.n	8009c34 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00b      	beq.n	8009c56 <tcp_process_refused_data+0xb2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6918      	ldr	r0, [r3, #16]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	47a0      	blx	r4
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
 8009c54:	e001      	b.n	8009c5a <tcp_process_refused_data+0xb6>
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5e:	f113 0f0d 	cmn.w	r3, #13
 8009c62:	d110      	bne.n	8009c86 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009c64:	f06f 030c 	mvn.w	r3, #12
 8009c68:	e00e      	b.n	8009c88 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c6e:	f113 0f0d 	cmn.w	r3, #13
 8009c72:	d102      	bne.n	8009c7a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009c74:	f06f 030c 	mvn.w	r3, #12
 8009c78:	e006      	b.n	8009c88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009c80:	f06f 0304 	mvn.w	r3, #4
 8009c84:	e000      	b.n	8009c88 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd90      	pop	{r4, r7, pc}
 8009c90:	08015890 	.word	0x08015890
 8009c94:	08015da0 	.word	0x08015da0
 8009c98:	080158d4 	.word	0x080158d4

08009c9c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009ca4:	e007      	b.n	8009cb6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f80a 	bl	8009cc6 <tcp_seg_free>
    seg = next;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f4      	bne.n	8009ca6 <tcp_segs_free+0xa>
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00c      	beq.n	8009cee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fa57 	bl	8008194 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	2003      	movs	r0, #3
 8009cea:	f7fd fbd1 	bl	8007490 <memp_free>
  }
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <tcp_setprio+0x22>
 8009d0a:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <tcp_setprio+0x30>)
 8009d0c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009d10:	4906      	ldr	r1, [pc, #24]	@ (8009d2c <tcp_setprio+0x34>)
 8009d12:	4807      	ldr	r0, [pc, #28]	@ (8009d30 <tcp_setprio+0x38>)
 8009d14:	f00a f8c4 	bl	8013ea0 <iprintf>
 8009d18:	e002      	b.n	8009d20 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	755a      	strb	r2, [r3, #21]
}
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	08015890 	.word	0x08015890
 8009d2c:	08015dc8 	.word	0x08015dc8
 8009d30:	080158d4 	.word	0x080158d4

08009d34 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <tcp_seg_copy+0x1c>
 8009d42:	4b0f      	ldr	r3, [pc, #60]	@ (8009d80 <tcp_seg_copy+0x4c>)
 8009d44:	f240 6282 	movw	r2, #1666	@ 0x682
 8009d48:	490e      	ldr	r1, [pc, #56]	@ (8009d84 <tcp_seg_copy+0x50>)
 8009d4a:	480f      	ldr	r0, [pc, #60]	@ (8009d88 <tcp_seg_copy+0x54>)
 8009d4c:	f00a f8a8 	bl	8013ea0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009d50:	2003      	movs	r0, #3
 8009d52:	f7fd fb51 	bl	80073f8 <memp_malloc>
 8009d56:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <tcp_seg_copy+0x2e>
    return NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e00a      	b.n	8009d78 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009d62:	2210      	movs	r2, #16
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f00a f975 	bl	8014056 <memcpy>
  pbuf_ref(cseg->p);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe faaf 	bl	80082d4 <pbuf_ref>
  return cseg;
 8009d76:	68fb      	ldr	r3, [r7, #12]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	08015890 	.word	0x08015890
 8009d84:	08015de4 	.word	0x08015de4
 8009d88:	080158d4 	.word	0x080158d4

08009d8c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <tcp_recv_null+0x28>
 8009da0:	4b12      	ldr	r3, [pc, #72]	@ (8009dec <tcp_recv_null+0x60>)
 8009da2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009da6:	4912      	ldr	r1, [pc, #72]	@ (8009df0 <tcp_recv_null+0x64>)
 8009da8:	4812      	ldr	r0, [pc, #72]	@ (8009df4 <tcp_recv_null+0x68>)
 8009daa:	f00a f879 	bl	8013ea0 <iprintf>
 8009dae:	f06f 030f 	mvn.w	r3, #15
 8009db2:	e016      	b.n	8009de2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d009      	beq.n	8009dce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	891b      	ldrh	r3, [r3, #8]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	68b8      	ldr	r0, [r7, #8]
 8009dc2:	f7ff fab3 	bl	800932c <tcp_recved>
    pbuf_free(p);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7fe f9e4 	bl	8008194 <pbuf_free>
 8009dcc:	e008      	b.n	8009de0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d104      	bne.n	8009de0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009dd6:	68b8      	ldr	r0, [r7, #8]
 8009dd8:	f7fe ffe4 	bl	8008da4 <tcp_close>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	e000      	b.n	8009de2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	08015890 	.word	0x08015890
 8009df0:	08015e00 	.word	0x08015e00
 8009df4:	080158d4 	.word	0x080158d4

08009df8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	db01      	blt.n	8009e0e <tcp_kill_prio+0x16>
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	e000      	b.n	8009e10 <tcp_kill_prio+0x18>
 8009e0e:	237f      	movs	r3, #127	@ 0x7f
 8009e10:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d034      	beq.n	8009e82 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e26:	4b19      	ldr	r3, [pc, #100]	@ (8009e8c <tcp_kill_prio+0x94>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e01f      	b.n	8009e6e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	7d5b      	ldrb	r3, [r3, #21]
 8009e32:	7afa      	ldrb	r2, [r7, #11]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d80c      	bhi.n	8009e52 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009e3c:	7afa      	ldrb	r2, [r7, #11]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d112      	bne.n	8009e68 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009e42:	4b13      	ldr	r3, [pc, #76]	@ (8009e90 <tcp_kill_prio+0x98>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d80a      	bhi.n	8009e68 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009e52:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <tcp_kill_prio+0x98>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	7d5b      	ldrb	r3, [r3, #21]
 8009e66:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1dc      	bne.n	8009e2e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f7ff f87c 	bl	8008f78 <tcp_abort>
 8009e80:	e000      	b.n	8009e84 <tcp_kill_prio+0x8c>
    return;
 8009e82:	bf00      	nop
  }
}
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000433c 	.word	0x2000433c
 8009e90:	20004330 	.word	0x20004330

08009e94 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d009      	beq.n	8009eb8 <tcp_kill_state+0x24>
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	d006      	beq.n	8009eb8 <tcp_kill_state+0x24>
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009f14 <tcp_kill_state+0x80>)
 8009eac:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009eb0:	4919      	ldr	r1, [pc, #100]	@ (8009f18 <tcp_kill_state+0x84>)
 8009eb2:	481a      	ldr	r0, [pc, #104]	@ (8009f1c <tcp_kill_state+0x88>)
 8009eb4:	f009 fff4 	bl	8013ea0 <iprintf>

  inactivity = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ec0:	4b17      	ldr	r3, [pc, #92]	@ (8009f20 <tcp_kill_state+0x8c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e017      	b.n	8009ef8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	7d1b      	ldrb	r3, [r3, #20]
 8009ecc:	79fa      	ldrb	r2, [r7, #7]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d10f      	bne.n	8009ef2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ed2:	4b14      	ldr	r3, [pc, #80]	@ (8009f24 <tcp_kill_state+0x90>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d807      	bhi.n	8009ef2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009ee2:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <tcp_kill_state+0x90>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e4      	bne.n	8009ec8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009f04:	2100      	movs	r1, #0
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f7fe ff78 	bl	8008dfc <tcp_abandon>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	08015890 	.word	0x08015890
 8009f18:	08015e1c 	.word	0x08015e1c
 8009f1c:	080158d4 	.word	0x080158d4
 8009f20:	2000433c 	.word	0x2000433c
 8009f24:	20004330 	.word	0x20004330

08009f28 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f36:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <tcp_kill_timewait+0x58>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e012      	b.n	8009f64 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f3e:	4b11      	ldr	r3, [pc, #68]	@ (8009f84 <tcp_kill_timewait+0x5c>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d807      	bhi.n	8009f5e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <tcp_kill_timewait+0x5c>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e9      	bne.n	8009f3e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f7ff f801 	bl	8008f78 <tcp_abort>
  }
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20004340 	.word	0x20004340
 8009f84:	20004330 	.word	0x20004330

08009f88 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009f8e:	4b10      	ldr	r3, [pc, #64]	@ (8009fd0 <tcp_handle_closepend+0x48>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009f94:	e014      	b.n	8009fc0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8b5b      	ldrh	r3, [r3, #26]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	8b5b      	ldrh	r3, [r3, #26]
 8009fac:	f023 0308 	bic.w	r3, r3, #8
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fe fe8a 	bl	8008cd0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e7      	bne.n	8009f96 <tcp_handle_closepend+0xe>
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	2000433c 	.word	0x2000433c

08009fd4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009fde:	2001      	movs	r0, #1
 8009fe0:	f7fd fa0a 	bl	80073f8 <memp_malloc>
 8009fe4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d126      	bne.n	800a03a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009fec:	f7ff ffcc 	bl	8009f88 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009ff0:	f7ff ff9a 	bl	8009f28 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7fd f9ff 	bl	80073f8 <memp_malloc>
 8009ffa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d11b      	bne.n	800a03a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a002:	2009      	movs	r0, #9
 800a004:	f7ff ff46 	bl	8009e94 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a008:	2001      	movs	r0, #1
 800a00a:	f7fd f9f5 	bl	80073f8 <memp_malloc>
 800a00e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d111      	bne.n	800a03a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a016:	2008      	movs	r0, #8
 800a018:	f7ff ff3c 	bl	8009e94 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a01c:	2001      	movs	r0, #1
 800a01e:	f7fd f9eb 	bl	80073f8 <memp_malloc>
 800a022:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d107      	bne.n	800a03a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fee3 	bl	8009df8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a032:	2001      	movs	r0, #1
 800a034:	f7fd f9e0 	bl	80073f8 <memp_malloc>
 800a038:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d03f      	beq.n	800a0c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a040:	229c      	movs	r2, #156	@ 0x9c
 800a042:	2100      	movs	r1, #0
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f009 ff90 	bl	8013f6a <memset>
    pcb->prio = prio;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	79fa      	ldrb	r2, [r7, #7]
 800a04e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a056:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a060:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	22ff      	movs	r2, #255	@ 0xff
 800a06e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a076:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2206      	movs	r2, #6
 800a07c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2206      	movs	r2, #6
 800a084:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a08c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <tcp_alloc+0xf8>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a09e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d0 <tcp_alloc+0xfc>)
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a0ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a08      	ldr	r2, [pc, #32]	@ (800a0d4 <tcp_alloc+0x100>)
 800a0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4a07      	ldr	r2, [pc, #28]	@ (800a0d8 <tcp_alloc+0x104>)
 800a0bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20004330 	.word	0x20004330
 800a0d0:	20004346 	.word	0x20004346
 800a0d4:	08009d8d 	.word	0x08009d8d
 800a0d8:	006ddd00 	.word	0x006ddd00

0800a0dc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a0e0:	2040      	movs	r0, #64	@ 0x40
 800a0e2:	f7ff ff77 	bl	8009fd4 <tcp_alloc>
 800a0e6:	4603      	mov	r3, r0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	611a      	str	r2, [r3, #16]
  }
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7d1b      	ldrb	r3, [r3, #20]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d106      	bne.n	800a136 <tcp_recv+0x26>
 800a128:	4b07      	ldr	r3, [pc, #28]	@ (800a148 <tcp_recv+0x38>)
 800a12a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a12e:	4907      	ldr	r1, [pc, #28]	@ (800a14c <tcp_recv+0x3c>)
 800a130:	4807      	ldr	r0, [pc, #28]	@ (800a150 <tcp_recv+0x40>)
 800a132:	f009 feb5 	bl	8013ea0 <iprintf>
    pcb->recv = recv;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	08015890 	.word	0x08015890
 800a14c:	08015e2c 	.word	0x08015e2c
 800a150:	080158d4 	.word	0x080158d4

0800a154 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d106      	bne.n	800a17a <tcp_sent+0x26>
 800a16c:	4b07      	ldr	r3, [pc, #28]	@ (800a18c <tcp_sent+0x38>)
 800a16e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a172:	4907      	ldr	r1, [pc, #28]	@ (800a190 <tcp_sent+0x3c>)
 800a174:	4807      	ldr	r0, [pc, #28]	@ (800a194 <tcp_sent+0x40>)
 800a176:	f009 fe93 	bl	8013ea0 <iprintf>
    pcb->sent = sent;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	08015890 	.word	0x08015890
 800a190:	08015e54 	.word	0x08015e54
 800a194:	080158d4 	.word	0x080158d4

0800a198 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00e      	beq.n	800a1c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d106      	bne.n	800a1be <tcp_err+0x26>
 800a1b0:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <tcp_err+0x38>)
 800a1b2:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a1b6:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <tcp_err+0x3c>)
 800a1b8:	4807      	ldr	r0, [pc, #28]	@ (800a1d8 <tcp_err+0x40>)
 800a1ba:	f009 fe71 	bl	8013ea0 <iprintf>
    pcb->errf = err;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08015890 	.word	0x08015890
 800a1d4:	08015e7c 	.word	0x08015e7c
 800a1d8:	080158d4 	.word	0x080158d4

0800a1dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <tcp_accept+0x22>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7d1b      	ldrb	r3, [r3, #20]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d104      	bne.n	800a1fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	619a      	str	r2, [r3, #24]
  }
}
 800a1fe:	bf00      	nop
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d107      	bne.n	800a230 <tcp_poll+0x24>
 800a220:	4b0e      	ldr	r3, [pc, #56]	@ (800a25c <tcp_poll+0x50>)
 800a222:	f640 023d 	movw	r2, #2109	@ 0x83d
 800a226:	490e      	ldr	r1, [pc, #56]	@ (800a260 <tcp_poll+0x54>)
 800a228:	480e      	ldr	r0, [pc, #56]	@ (800a264 <tcp_poll+0x58>)
 800a22a:	f009 fe39 	bl	8013ea0 <iprintf>
 800a22e:	e011      	b.n	800a254 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	7d1b      	ldrb	r3, [r3, #20]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d106      	bne.n	800a246 <tcp_poll+0x3a>
 800a238:	4b08      	ldr	r3, [pc, #32]	@ (800a25c <tcp_poll+0x50>)
 800a23a:	f640 023e 	movw	r2, #2110	@ 0x83e
 800a23e:	490a      	ldr	r1, [pc, #40]	@ (800a268 <tcp_poll+0x5c>)
 800a240:	4808      	ldr	r0, [pc, #32]	@ (800a264 <tcp_poll+0x58>)
 800a242:	f009 fe2d 	bl	8013ea0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	79fa      	ldrb	r2, [r7, #7]
 800a252:	775a      	strb	r2, [r3, #29]
}
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	08015890 	.word	0x08015890
 800a260:	08015ea4 	.word	0x08015ea4
 800a264:	080158d4 	.word	0x080158d4
 800a268:	08015ebc 	.word	0x08015ebc

0800a26c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d107      	bne.n	800a28a <tcp_pcb_purge+0x1e>
 800a27a:	4b21      	ldr	r3, [pc, #132]	@ (800a300 <tcp_pcb_purge+0x94>)
 800a27c:	f640 0251 	movw	r2, #2129	@ 0x851
 800a280:	4920      	ldr	r1, [pc, #128]	@ (800a304 <tcp_pcb_purge+0x98>)
 800a282:	4821      	ldr	r0, [pc, #132]	@ (800a308 <tcp_pcb_purge+0x9c>)
 800a284:	f009 fe0c 	bl	8013ea0 <iprintf>
 800a288:	e037      	b.n	800a2fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d033      	beq.n	800a2fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a296:	2b0a      	cmp	r3, #10
 800a298:	d02f      	beq.n	800a2fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d02b      	beq.n	800a2fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd ff70 	bl	8008194 <pbuf_free>
      pcb->refused_data = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f986 	bl	800a5d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2ce:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fce1 	bl	8009c9c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fcdc 	bl	8009c9c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	08015890 	.word	0x08015890
 800a304:	08015edc 	.word	0x08015edc
 800a308:	080158d4 	.word	0x080158d4

0800a30c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <tcp_pcb_remove+0x1e>
 800a31c:	4b3e      	ldr	r3, [pc, #248]	@ (800a418 <tcp_pcb_remove+0x10c>)
 800a31e:	f640 0283 	movw	r2, #2179	@ 0x883
 800a322:	493e      	ldr	r1, [pc, #248]	@ (800a41c <tcp_pcb_remove+0x110>)
 800a324:	483e      	ldr	r0, [pc, #248]	@ (800a420 <tcp_pcb_remove+0x114>)
 800a326:	f009 fdbb 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <tcp_pcb_remove+0x32>
 800a330:	4b39      	ldr	r3, [pc, #228]	@ (800a418 <tcp_pcb_remove+0x10c>)
 800a332:	f640 0284 	movw	r2, #2180	@ 0x884
 800a336:	493b      	ldr	r1, [pc, #236]	@ (800a424 <tcp_pcb_remove+0x118>)
 800a338:	4839      	ldr	r0, [pc, #228]	@ (800a420 <tcp_pcb_remove+0x114>)
 800a33a:	f009 fdb1 	bl	8013ea0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d105      	bne.n	800a354 <tcp_pcb_remove+0x48>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	e013      	b.n	800a37c <tcp_pcb_remove+0x70>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e00c      	b.n	800a376 <tcp_pcb_remove+0x6a>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d104      	bne.n	800a370 <tcp_pcb_remove+0x64>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	60da      	str	r2, [r3, #12]
 800a36e:	e005      	b.n	800a37c <tcp_pcb_remove+0x70>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1ef      	bne.n	800a35c <tcp_pcb_remove+0x50>
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2200      	movs	r2, #0
 800a380:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a382:	6838      	ldr	r0, [r7, #0]
 800a384:	f7ff ff72 	bl	800a26c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	7d1b      	ldrb	r3, [r3, #20]
 800a38c:	2b0a      	cmp	r3, #10
 800a38e:	d013      	beq.n	800a3b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a394:	2b01      	cmp	r3, #1
 800a396:	d00f      	beq.n	800a3b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	8b5b      	ldrh	r3, [r3, #26]
 800a39c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	8b5b      	ldrh	r3, [r3, #26]
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a3b2:	6838      	ldr	r0, [r7, #0]
 800a3b4:	f003 fbd4 	bl	800db60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	7d1b      	ldrb	r3, [r3, #20]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d020      	beq.n	800a402 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d006      	beq.n	800a3d6 <tcp_pcb_remove+0xca>
 800a3c8:	4b13      	ldr	r3, [pc, #76]	@ (800a418 <tcp_pcb_remove+0x10c>)
 800a3ca:	f640 0293 	movw	r2, #2195	@ 0x893
 800a3ce:	4916      	ldr	r1, [pc, #88]	@ (800a428 <tcp_pcb_remove+0x11c>)
 800a3d0:	4813      	ldr	r0, [pc, #76]	@ (800a420 <tcp_pcb_remove+0x114>)
 800a3d2:	f009 fd65 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d006      	beq.n	800a3ec <tcp_pcb_remove+0xe0>
 800a3de:	4b0e      	ldr	r3, [pc, #56]	@ (800a418 <tcp_pcb_remove+0x10c>)
 800a3e0:	f640 0294 	movw	r2, #2196	@ 0x894
 800a3e4:	4911      	ldr	r1, [pc, #68]	@ (800a42c <tcp_pcb_remove+0x120>)
 800a3e6:	480e      	ldr	r0, [pc, #56]	@ (800a420 <tcp_pcb_remove+0x114>)
 800a3e8:	f009 fd5a 	bl	8013ea0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d006      	beq.n	800a402 <tcp_pcb_remove+0xf6>
 800a3f4:	4b08      	ldr	r3, [pc, #32]	@ (800a418 <tcp_pcb_remove+0x10c>)
 800a3f6:	f640 0296 	movw	r2, #2198	@ 0x896
 800a3fa:	490d      	ldr	r1, [pc, #52]	@ (800a430 <tcp_pcb_remove+0x124>)
 800a3fc:	4808      	ldr	r0, [pc, #32]	@ (800a420 <tcp_pcb_remove+0x114>)
 800a3fe:	f009 fd4f 	bl	8013ea0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2200      	movs	r2, #0
 800a406:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	08015890 	.word	0x08015890
 800a41c:	08015ef8 	.word	0x08015ef8
 800a420:	080158d4 	.word	0x080158d4
 800a424:	08015f14 	.word	0x08015f14
 800a428:	08015f34 	.word	0x08015f34
 800a42c:	08015f4c 	.word	0x08015f4c
 800a430:	08015f68 	.word	0x08015f68

0800a434 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <tcp_next_iss+0x1c>
 800a442:	4b0a      	ldr	r3, [pc, #40]	@ (800a46c <tcp_next_iss+0x38>)
 800a444:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a448:	4909      	ldr	r1, [pc, #36]	@ (800a470 <tcp_next_iss+0x3c>)
 800a44a:	480a      	ldr	r0, [pc, #40]	@ (800a474 <tcp_next_iss+0x40>)
 800a44c:	f009 fd28 	bl	8013ea0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a450:	4b09      	ldr	r3, [pc, #36]	@ (800a478 <tcp_next_iss+0x44>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <tcp_next_iss+0x48>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	4a07      	ldr	r2, [pc, #28]	@ (800a478 <tcp_next_iss+0x44>)
 800a45c:	6013      	str	r3, [r2, #0]
  return iss;
 800a45e:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <tcp_next_iss+0x44>)
 800a460:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	08015890 	.word	0x08015890
 800a470:	08015f80 	.word	0x08015f80
 800a474:	080158d4 	.word	0x080158d4
 800a478:	2000000c 	.word	0x2000000c
 800a47c:	20004330 	.word	0x20004330

0800a480 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <tcp_eff_send_mss_netif+0x22>
 800a494:	4b14      	ldr	r3, [pc, #80]	@ (800a4e8 <tcp_eff_send_mss_netif+0x68>)
 800a496:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a49a:	4914      	ldr	r1, [pc, #80]	@ (800a4ec <tcp_eff_send_mss_netif+0x6c>)
 800a49c:	4814      	ldr	r0, [pc, #80]	@ (800a4f0 <tcp_eff_send_mss_netif+0x70>)
 800a49e:	f009 fcff 	bl	8013ea0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a4a8:	89fb      	ldrh	r3, [r7, #14]
 800a4aa:	e019      	b.n	800a4e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a4b2:	8afb      	ldrh	r3, [r7, #22]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d012      	beq.n	800a4de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a4b8:	2328      	movs	r3, #40	@ 0x28
 800a4ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a4bc:	8afa      	ldrh	r2, [r7, #22]
 800a4be:	8abb      	ldrh	r3, [r7, #20]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d904      	bls.n	800a4ce <tcp_eff_send_mss_netif+0x4e>
 800a4c4:	8afa      	ldrh	r2, [r7, #22]
 800a4c6:	8abb      	ldrh	r3, [r7, #20]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	e000      	b.n	800a4d0 <tcp_eff_send_mss_netif+0x50>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a4d2:	8a7a      	ldrh	r2, [r7, #18]
 800a4d4:	89fb      	ldrh	r3, [r7, #14]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bf28      	it	cs
 800a4da:	4613      	movcs	r3, r2
 800a4dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a4de:	89fb      	ldrh	r3, [r7, #14]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	08015890 	.word	0x08015890
 800a4ec:	08015f9c 	.word	0x08015f9c
 800a4f0:	080158d4 	.word	0x080158d4

0800a4f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d119      	bne.n	800a53c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a508:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a50a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a50e:	4910      	ldr	r1, [pc, #64]	@ (800a550 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a510:	4810      	ldr	r0, [pc, #64]	@ (800a554 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a512:	f009 fcc5 	bl	8013ea0 <iprintf>

  while (pcb != NULL) {
 800a516:	e011      	b.n	800a53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d108      	bne.n	800a536 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7fe fd24 	bl	8008f78 <tcp_abort>
      pcb = next;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e002      	b.n	800a53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1ea      	bne.n	800a518 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	08015890 	.word	0x08015890
 800a550:	08015fc4 	.word	0x08015fc4
 800a554:	080158d4 	.word	0x080158d4

0800a558 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d02a      	beq.n	800a5be <tcp_netif_ip_addr_changed+0x66>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d026      	beq.n	800a5be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a570:	4b15      	ldr	r3, [pc, #84]	@ (800a5c8 <tcp_netif_ip_addr_changed+0x70>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff ffbc 	bl	800a4f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a57c:	4b13      	ldr	r3, [pc, #76]	@ (800a5cc <tcp_netif_ip_addr_changed+0x74>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff ffb6 	bl	800a4f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d017      	beq.n	800a5be <tcp_netif_ip_addr_changed+0x66>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d013      	beq.n	800a5be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a596:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <tcp_netif_ip_addr_changed+0x78>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e00c      	b.n	800a5b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d103      	bne.n	800a5b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1ef      	bne.n	800a59e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	2000433c 	.word	0x2000433c
 800a5cc:	20004334 	.word	0x20004334
 800a5d0:	20004338 	.word	0x20004338

0800a5d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d007      	beq.n	800a5f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fb57 	bl	8009c9c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b08d      	sub	sp, #52	@ 0x34
 800a600:	af04      	add	r7, sp, #16
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <tcp_input+0x1c>
 800a60c:	4b8b      	ldr	r3, [pc, #556]	@ (800a83c <tcp_input+0x240>)
 800a60e:	2283      	movs	r2, #131	@ 0x83
 800a610:	498b      	ldr	r1, [pc, #556]	@ (800a840 <tcp_input+0x244>)
 800a612:	488c      	ldr	r0, [pc, #560]	@ (800a844 <tcp_input+0x248>)
 800a614:	f009 fc44 	bl	8013ea0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4a8a      	ldr	r2, [pc, #552]	@ (800a848 <tcp_input+0x24c>)
 800a61e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	895b      	ldrh	r3, [r3, #10]
 800a624:	2b13      	cmp	r3, #19
 800a626:	f240 83e3 	bls.w	800adf0 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a62a:	4b88      	ldr	r3, [pc, #544]	@ (800a84c <tcp_input+0x250>)
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	4a87      	ldr	r2, [pc, #540]	@ (800a84c <tcp_input+0x250>)
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f008 fbcd 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f040 83d9 	bne.w	800adf4 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a642:	4b82      	ldr	r3, [pc, #520]	@ (800a84c <tcp_input+0x250>)
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a64a:	2be0      	cmp	r3, #224	@ 0xe0
 800a64c:	f000 83d2 	beq.w	800adf4 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	891a      	ldrh	r2, [r3, #8]
 800a654:	4b7e      	ldr	r3, [pc, #504]	@ (800a850 <tcp_input+0x254>)
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	4b7e      	ldr	r3, [pc, #504]	@ (800a854 <tcp_input+0x258>)
 800a65a:	2106      	movs	r1, #6
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7fc fa2c 	bl	8006aba <ip_chksum_pseudo>
 800a662:	4603      	mov	r3, r0
 800a664:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800a666:	8a3b      	ldrh	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f040 83c5 	bne.w	800adf8 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a66e:	4b76      	ldr	r3, [pc, #472]	@ (800a848 <tcp_input+0x24c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	899b      	ldrh	r3, [r3, #12]
 800a674:	b29b      	uxth	r3, r3
 800a676:	4618      	mov	r0, r3
 800a678:	f7fb fe00 	bl	800627c <lwip_htons>
 800a67c:	4603      	mov	r3, r0
 800a67e:	0b1b      	lsrs	r3, r3, #12
 800a680:	b29b      	uxth	r3, r3
 800a682:	b2db      	uxtb	r3, r3
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	2b13      	cmp	r3, #19
 800a68c:	f240 83b6 	bls.w	800adfc <tcp_input+0x800>
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	891b      	ldrh	r3, [r3, #8]
 800a698:	429a      	cmp	r2, r3
 800a69a:	f200 83af 	bhi.w	800adfc <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	3b14      	subs	r3, #20
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	4b6c      	ldr	r3, [pc, #432]	@ (800a858 <tcp_input+0x25c>)
 800a6a8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6aa:	4b6c      	ldr	r3, [pc, #432]	@ (800a85c <tcp_input+0x260>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	895a      	ldrh	r2, [r3, #10]
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d309      	bcc.n	800a6d0 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6bc:	4b66      	ldr	r3, [pc, #408]	@ (800a858 <tcp_input+0x25c>)
 800a6be:	881a      	ldrh	r2, [r3, #0]
 800a6c0:	4b67      	ldr	r3, [pc, #412]	@ (800a860 <tcp_input+0x264>)
 800a6c2:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7fd fcdd 	bl	8008088 <pbuf_remove_header>
 800a6ce:	e04e      	b.n	800a76e <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d105      	bne.n	800a6e4 <tcp_input+0xe8>
 800a6d8:	4b58      	ldr	r3, [pc, #352]	@ (800a83c <tcp_input+0x240>)
 800a6da:	22c2      	movs	r2, #194	@ 0xc2
 800a6dc:	4961      	ldr	r1, [pc, #388]	@ (800a864 <tcp_input+0x268>)
 800a6de:	4859      	ldr	r0, [pc, #356]	@ (800a844 <tcp_input+0x248>)
 800a6e0:	f009 fbde 	bl	8013ea0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a6e4:	2114      	movs	r1, #20
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7fd fcce 	bl	8008088 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	895a      	ldrh	r2, [r3, #10]
 800a6f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a860 <tcp_input+0x264>)
 800a6f2:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a6f4:	4b58      	ldr	r3, [pc, #352]	@ (800a858 <tcp_input+0x25c>)
 800a6f6:	881a      	ldrh	r2, [r3, #0]
 800a6f8:	4b59      	ldr	r3, [pc, #356]	@ (800a860 <tcp_input+0x264>)
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a700:	4b57      	ldr	r3, [pc, #348]	@ (800a860 <tcp_input+0x264>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7fd fcbe 	bl	8008088 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	895b      	ldrh	r3, [r3, #10]
 800a712:	89ba      	ldrh	r2, [r7, #12]
 800a714:	429a      	cmp	r2, r3
 800a716:	f200 8373 	bhi.w	800ae00 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	4a4e      	ldr	r2, [pc, #312]	@ (800a85c <tcp_input+0x260>)
 800a722:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	89ba      	ldrh	r2, [r7, #12]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fd fcab 	bl	8008088 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	891a      	ldrh	r2, [r3, #8]
 800a736:	89bb      	ldrh	r3, [r7, #12]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	895b      	ldrh	r3, [r3, #10]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <tcp_input+0x158>
 800a748:	4b3c      	ldr	r3, [pc, #240]	@ (800a83c <tcp_input+0x240>)
 800a74a:	22df      	movs	r2, #223	@ 0xdf
 800a74c:	4946      	ldr	r1, [pc, #280]	@ (800a868 <tcp_input+0x26c>)
 800a74e:	483d      	ldr	r0, [pc, #244]	@ (800a844 <tcp_input+0x248>)
 800a750:	f009 fba6 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	891a      	ldrh	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	891b      	ldrh	r3, [r3, #8]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d005      	beq.n	800a76e <tcp_input+0x172>
 800a762:	4b36      	ldr	r3, [pc, #216]	@ (800a83c <tcp_input+0x240>)
 800a764:	22e0      	movs	r2, #224	@ 0xe0
 800a766:	4941      	ldr	r1, [pc, #260]	@ (800a86c <tcp_input+0x270>)
 800a768:	4836      	ldr	r0, [pc, #216]	@ (800a844 <tcp_input+0x248>)
 800a76a:	f009 fb99 	bl	8013ea0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a76e:	4b36      	ldr	r3, [pc, #216]	@ (800a848 <tcp_input+0x24c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	b29b      	uxth	r3, r3
 800a776:	4a34      	ldr	r2, [pc, #208]	@ (800a848 <tcp_input+0x24c>)
 800a778:	6814      	ldr	r4, [r2, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fb fd7e 	bl	800627c <lwip_htons>
 800a780:	4603      	mov	r3, r0
 800a782:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a784:	4b30      	ldr	r3, [pc, #192]	@ (800a848 <tcp_input+0x24c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	885b      	ldrh	r3, [r3, #2]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4a2e      	ldr	r2, [pc, #184]	@ (800a848 <tcp_input+0x24c>)
 800a78e:	6814      	ldr	r4, [r2, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f7fb fd73 	bl	800627c <lwip_htons>
 800a796:	4603      	mov	r3, r0
 800a798:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a79a:	4b2b      	ldr	r3, [pc, #172]	@ (800a848 <tcp_input+0x24c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	4a29      	ldr	r2, [pc, #164]	@ (800a848 <tcp_input+0x24c>)
 800a7a2:	6814      	ldr	r4, [r2, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fb fd7e 	bl	80062a6 <lwip_htonl>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6063      	str	r3, [r4, #4]
 800a7ae:	6863      	ldr	r3, [r4, #4]
 800a7b0:	4a2f      	ldr	r2, [pc, #188]	@ (800a870 <tcp_input+0x274>)
 800a7b2:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7b4:	4b24      	ldr	r3, [pc, #144]	@ (800a848 <tcp_input+0x24c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	4a23      	ldr	r2, [pc, #140]	@ (800a848 <tcp_input+0x24c>)
 800a7bc:	6814      	ldr	r4, [r2, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fb fd71 	bl	80062a6 <lwip_htonl>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	68a3      	ldr	r3, [r4, #8]
 800a7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a874 <tcp_input+0x278>)
 800a7cc:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <tcp_input+0x24c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	89db      	ldrh	r3, [r3, #14]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a848 <tcp_input+0x24c>)
 800a7d8:	6814      	ldr	r4, [r2, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fb fd4e 	bl	800627c <lwip_htons>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a7e4:	4b18      	ldr	r3, [pc, #96]	@ (800a848 <tcp_input+0x24c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	899b      	ldrh	r3, [r3, #12]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fb fd45 	bl	800627c <lwip_htons>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	4b1e      	ldr	r3, [pc, #120]	@ (800a878 <tcp_input+0x27c>)
 800a7fe:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	891a      	ldrh	r2, [r3, #8]
 800a804:	4b1d      	ldr	r3, [pc, #116]	@ (800a87c <tcp_input+0x280>)
 800a806:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a808:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <tcp_input+0x27c>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 0303 	and.w	r3, r3, #3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <tcp_input+0x232>
    tcplen++;
 800a814:	4b19      	ldr	r3, [pc, #100]	@ (800a87c <tcp_input+0x280>)
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	4b17      	ldr	r3, [pc, #92]	@ (800a87c <tcp_input+0x280>)
 800a81e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	891a      	ldrh	r2, [r3, #8]
 800a824:	4b15      	ldr	r3, [pc, #84]	@ (800a87c <tcp_input+0x280>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	f200 82eb 	bhi.w	800ae04 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a832:	4b13      	ldr	r3, [pc, #76]	@ (800a880 <tcp_input+0x284>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	e09b      	b.n	800a972 <tcp_input+0x376>
 800a83a:	bf00      	nop
 800a83c:	08015ff8 	.word	0x08015ff8
 800a840:	0801602c 	.word	0x0801602c
 800a844:	08016044 	.word	0x08016044
 800a848:	20004358 	.word	0x20004358
 800a84c:	20000d90 	.word	0x20000d90
 800a850:	20000da4 	.word	0x20000da4
 800a854:	20000da0 	.word	0x20000da0
 800a858:	2000435c 	.word	0x2000435c
 800a85c:	20004360 	.word	0x20004360
 800a860:	2000435e 	.word	0x2000435e
 800a864:	0801606c 	.word	0x0801606c
 800a868:	0801607c 	.word	0x0801607c
 800a86c:	08016088 	.word	0x08016088
 800a870:	20004368 	.word	0x20004368
 800a874:	2000436c 	.word	0x2000436c
 800a878:	20004374 	.word	0x20004374
 800a87c:	20004372 	.word	0x20004372
 800a880:	2000433c 	.word	0x2000433c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d105      	bne.n	800a898 <tcp_input+0x29c>
 800a88c:	4b88      	ldr	r3, [pc, #544]	@ (800aab0 <tcp_input+0x4b4>)
 800a88e:	22fb      	movs	r2, #251	@ 0xfb
 800a890:	4988      	ldr	r1, [pc, #544]	@ (800aab4 <tcp_input+0x4b8>)
 800a892:	4889      	ldr	r0, [pc, #548]	@ (800aab8 <tcp_input+0x4bc>)
 800a894:	f009 fb04 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	7d1b      	ldrb	r3, [r3, #20]
 800a89c:	2b0a      	cmp	r3, #10
 800a89e:	d105      	bne.n	800a8ac <tcp_input+0x2b0>
 800a8a0:	4b83      	ldr	r3, [pc, #524]	@ (800aab0 <tcp_input+0x4b4>)
 800a8a2:	22fc      	movs	r2, #252	@ 0xfc
 800a8a4:	4985      	ldr	r1, [pc, #532]	@ (800aabc <tcp_input+0x4c0>)
 800a8a6:	4884      	ldr	r0, [pc, #528]	@ (800aab8 <tcp_input+0x4bc>)
 800a8a8:	f009 fafa 	bl	8013ea0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	7d1b      	ldrb	r3, [r3, #20]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d105      	bne.n	800a8c0 <tcp_input+0x2c4>
 800a8b4:	4b7e      	ldr	r3, [pc, #504]	@ (800aab0 <tcp_input+0x4b4>)
 800a8b6:	22fd      	movs	r2, #253	@ 0xfd
 800a8b8:	4981      	ldr	r1, [pc, #516]	@ (800aac0 <tcp_input+0x4c4>)
 800a8ba:	487f      	ldr	r0, [pc, #508]	@ (800aab8 <tcp_input+0x4bc>)
 800a8bc:	f009 faf0 	bl	8013ea0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	7a1b      	ldrb	r3, [r3, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	7a1a      	ldrb	r2, [r3, #8]
 800a8cc:	4b7d      	ldr	r3, [pc, #500]	@ (800aac4 <tcp_input+0x4c8>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d002      	beq.n	800a8e2 <tcp_input+0x2e6>
      prev = pcb;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	61bb      	str	r3, [r7, #24]
      continue;
 800a8e0:	e044      	b.n	800a96c <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	8b1a      	ldrh	r2, [r3, #24]
 800a8e6:	4b78      	ldr	r3, [pc, #480]	@ (800aac8 <tcp_input+0x4cc>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d13a      	bne.n	800a968 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	8ada      	ldrh	r2, [r3, #22]
 800a8f6:	4b74      	ldr	r3, [pc, #464]	@ (800aac8 <tcp_input+0x4cc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	885b      	ldrh	r3, [r3, #2]
 800a8fc:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d132      	bne.n	800a968 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	4b6f      	ldr	r3, [pc, #444]	@ (800aac4 <tcp_input+0x4c8>)
 800a908:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d12c      	bne.n	800a968 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b6c      	ldr	r3, [pc, #432]	@ (800aac4 <tcp_input+0x4c8>)
 800a914:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a916:	429a      	cmp	r2, r3
 800a918:	d126      	bne.n	800a968 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	69fa      	ldr	r2, [r7, #28]
 800a920:	429a      	cmp	r2, r3
 800a922:	d106      	bne.n	800a932 <tcp_input+0x336>
 800a924:	4b62      	ldr	r3, [pc, #392]	@ (800aab0 <tcp_input+0x4b4>)
 800a926:	f240 120d 	movw	r2, #269	@ 0x10d
 800a92a:	4968      	ldr	r1, [pc, #416]	@ (800aacc <tcp_input+0x4d0>)
 800a92c:	4862      	ldr	r0, [pc, #392]	@ (800aab8 <tcp_input+0x4bc>)
 800a92e:	f009 fab7 	bl	8013ea0 <iprintf>
      if (prev != NULL) {
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <tcp_input+0x352>
        prev->next = pcb->next;
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a940:	4b63      	ldr	r3, [pc, #396]	@ (800aad0 <tcp_input+0x4d4>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a948:	4a61      	ldr	r2, [pc, #388]	@ (800aad0 <tcp_input+0x4d4>)
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	429a      	cmp	r2, r3
 800a956:	d110      	bne.n	800a97a <tcp_input+0x37e>
 800a958:	4b55      	ldr	r3, [pc, #340]	@ (800aab0 <tcp_input+0x4b4>)
 800a95a:	f240 1215 	movw	r2, #277	@ 0x115
 800a95e:	495d      	ldr	r1, [pc, #372]	@ (800aad4 <tcp_input+0x4d8>)
 800a960:	4855      	ldr	r0, [pc, #340]	@ (800aab8 <tcp_input+0x4bc>)
 800a962:	f009 fa9d 	bl	8013ea0 <iprintf>
      break;
 800a966:	e008      	b.n	800a97a <tcp_input+0x37e>
    }
    prev = pcb;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	61fb      	str	r3, [r7, #28]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d185      	bne.n	800a884 <tcp_input+0x288>
 800a978:	e000      	b.n	800a97c <tcp_input+0x380>
      break;
 800a97a:	bf00      	nop
  }

  if (pcb == NULL) {
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 80b0 	bne.w	800aae4 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a984:	4b54      	ldr	r3, [pc, #336]	@ (800aad8 <tcp_input+0x4dc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	61fb      	str	r3, [r7, #28]
 800a98a:	e03f      	b.n	800aa0c <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	7d1b      	ldrb	r3, [r3, #20]
 800a990:	2b0a      	cmp	r3, #10
 800a992:	d006      	beq.n	800a9a2 <tcp_input+0x3a6>
 800a994:	4b46      	ldr	r3, [pc, #280]	@ (800aab0 <tcp_input+0x4b4>)
 800a996:	f240 121f 	movw	r2, #287	@ 0x11f
 800a99a:	4950      	ldr	r1, [pc, #320]	@ (800aadc <tcp_input+0x4e0>)
 800a99c:	4846      	ldr	r0, [pc, #280]	@ (800aab8 <tcp_input+0x4bc>)
 800a99e:	f009 fa7f 	bl	8013ea0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	7a1b      	ldrb	r3, [r3, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d009      	beq.n	800a9be <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	7a1a      	ldrb	r2, [r3, #8]
 800a9ae:	4b45      	ldr	r3, [pc, #276]	@ (800aac4 <tcp_input+0x4c8>)
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d122      	bne.n	800aa04 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	8b1a      	ldrh	r2, [r3, #24]
 800a9c2:	4b41      	ldr	r3, [pc, #260]	@ (800aac8 <tcp_input+0x4cc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d11b      	bne.n	800aa06 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	8ada      	ldrh	r2, [r3, #22]
 800a9d2:	4b3d      	ldr	r3, [pc, #244]	@ (800aac8 <tcp_input+0x4cc>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d113      	bne.n	800aa06 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	4b38      	ldr	r3, [pc, #224]	@ (800aac4 <tcp_input+0x4c8>)
 800a9e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d10d      	bne.n	800aa06 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b35      	ldr	r3, [pc, #212]	@ (800aac4 <tcp_input+0x4c8>)
 800a9f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d107      	bne.n	800aa06 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a9f6:	69f8      	ldr	r0, [r7, #28]
 800a9f8:	f000 fb5e 	bl	800b0b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fd fbc9 	bl	8008194 <pbuf_free>
        return;
 800aa02:	e205      	b.n	800ae10 <tcp_input+0x814>
        continue;
 800aa04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1bc      	bne.n	800a98c <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa16:	4b32      	ldr	r3, [pc, #200]	@ (800aae0 <tcp_input+0x4e4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	e02a      	b.n	800aa74 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	7a1b      	ldrb	r3, [r3, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00c      	beq.n	800aa40 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	7a1a      	ldrb	r2, [r3, #8]
 800aa2a:	4b26      	ldr	r3, [pc, #152]	@ (800aac4 <tcp_input+0x4c8>)
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800aa32:	3301      	adds	r3, #1
 800aa34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d002      	beq.n	800aa40 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	61bb      	str	r3, [r7, #24]
        continue;
 800aa3e:	e016      	b.n	800aa6e <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	8ada      	ldrh	r2, [r3, #22]
 800aa44:	4b20      	ldr	r3, [pc, #128]	@ (800aac8 <tcp_input+0x4cc>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d10c      	bne.n	800aa6a <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	4b1b      	ldr	r3, [pc, #108]	@ (800aac4 <tcp_input+0x4c8>)
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d00f      	beq.n	800aa7c <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00d      	beq.n	800aa7e <tcp_input+0x482>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1d1      	bne.n	800aa1e <tcp_input+0x422>
 800aa7a:	e000      	b.n	800aa7e <tcp_input+0x482>
            break;
 800aa7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d02f      	beq.n	800aae4 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa92:	4b13      	ldr	r3, [pc, #76]	@ (800aae0 <tcp_input+0x4e4>)
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa9a:	4a11      	ldr	r2, [pc, #68]	@ (800aae0 <tcp_input+0x4e4>)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aaa0:	6978      	ldr	r0, [r7, #20]
 800aaa2:	f000 fa0b 	bl	800aebc <tcp_listen_input>
      }
      pbuf_free(p);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7fd fb74 	bl	8008194 <pbuf_free>
      return;
 800aaac:	e1b0      	b.n	800ae10 <tcp_input+0x814>
 800aaae:	bf00      	nop
 800aab0:	08015ff8 	.word	0x08015ff8
 800aab4:	080160a8 	.word	0x080160a8
 800aab8:	08016044 	.word	0x08016044
 800aabc:	080160d0 	.word	0x080160d0
 800aac0:	080160fc 	.word	0x080160fc
 800aac4:	20000d90 	.word	0x20000d90
 800aac8:	20004358 	.word	0x20004358
 800aacc:	08016124 	.word	0x08016124
 800aad0:	2000433c 	.word	0x2000433c
 800aad4:	08016150 	.word	0x08016150
 800aad8:	20004340 	.word	0x20004340
 800aadc:	0801617c 	.word	0x0801617c
 800aae0:	20004338 	.word	0x20004338
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 8158 	beq.w	800ad9c <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aaec:	4b95      	ldr	r3, [pc, #596]	@ (800ad44 <tcp_input+0x748>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	891a      	ldrh	r2, [r3, #8]
 800aaf6:	4b93      	ldr	r3, [pc, #588]	@ (800ad44 <tcp_input+0x748>)
 800aaf8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aafa:	4a92      	ldr	r2, [pc, #584]	@ (800ad44 <tcp_input+0x748>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ab00:	4b91      	ldr	r3, [pc, #580]	@ (800ad48 <tcp_input+0x74c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a8f      	ldr	r2, [pc, #572]	@ (800ad44 <tcp_input+0x748>)
 800ab06:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ab08:	4b90      	ldr	r3, [pc, #576]	@ (800ad4c <tcp_input+0x750>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ab0e:	4b90      	ldr	r3, [pc, #576]	@ (800ad50 <tcp_input+0x754>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ab14:	4b8f      	ldr	r3, [pc, #572]	@ (800ad54 <tcp_input+0x758>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ab1a:	4b8f      	ldr	r3, [pc, #572]	@ (800ad58 <tcp_input+0x75c>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 0308 	and.w	r3, r3, #8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d006      	beq.n	800ab34 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7b5b      	ldrb	r3, [r3, #13]
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab3c:	69f8      	ldr	r0, [r7, #28]
 800ab3e:	f7ff f831 	bl	8009ba4 <tcp_process_refused_data>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f113 0f0d 	cmn.w	r3, #13
 800ab48:	d007      	beq.n	800ab5a <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00c      	beq.n	800ab6c <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab52:	4b82      	ldr	r3, [pc, #520]	@ (800ad5c <tcp_input+0x760>)
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d008      	beq.n	800ab6c <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f040 80e3 	bne.w	800ad2a <tcp_input+0x72e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab64:	69f8      	ldr	r0, [r7, #28]
 800ab66:	f003 fe23 	bl	800e7b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ab6a:	e0de      	b.n	800ad2a <tcp_input+0x72e>
      }
    }
    tcp_input_pcb = pcb;
 800ab6c:	4a7c      	ldr	r2, [pc, #496]	@ (800ad60 <tcp_input+0x764>)
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ab72:	69f8      	ldr	r0, [r7, #28]
 800ab74:	f000 fb1a 	bl	800b1ac <tcp_process>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab80:	f113 0f0d 	cmn.w	r3, #13
 800ab84:	f000 80d3 	beq.w	800ad2e <tcp_input+0x732>
      if (recv_flags & TF_RESET) {
 800ab88:	4b71      	ldr	r3, [pc, #452]	@ (800ad50 <tcp_input+0x754>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d015      	beq.n	800abc0 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d008      	beq.n	800abb0 <tcp_input+0x5b4>
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	6912      	ldr	r2, [r2, #16]
 800aba8:	f06f 010d 	mvn.w	r1, #13
 800abac:	4610      	mov	r0, r2
 800abae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abb0:	69f9      	ldr	r1, [r7, #28]
 800abb2:	486c      	ldr	r0, [pc, #432]	@ (800ad64 <tcp_input+0x768>)
 800abb4:	f7ff fbaa 	bl	800a30c <tcp_pcb_remove>
        tcp_free(pcb);
 800abb8:	69f8      	ldr	r0, [r7, #28]
 800abba:	f7fd fef5 	bl	80089a8 <tcp_free>
 800abbe:	e0da      	b.n	800ad76 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800abc4:	4b63      	ldr	r3, [pc, #396]	@ (800ad54 <tcp_input+0x758>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01d      	beq.n	800ac08 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800abcc:	4b61      	ldr	r3, [pc, #388]	@ (800ad54 <tcp_input+0x758>)
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00a      	beq.n	800abf2 <tcp_input+0x5f6>
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abe2:	69fa      	ldr	r2, [r7, #28]
 800abe4:	6910      	ldr	r0, [r2, #16]
 800abe6:	897a      	ldrh	r2, [r7, #10]
 800abe8:	69f9      	ldr	r1, [r7, #28]
 800abea:	4798      	blx	r3
 800abec:	4603      	mov	r3, r0
 800abee:	74fb      	strb	r3, [r7, #19]
 800abf0:	e001      	b.n	800abf6 <tcp_input+0x5fa>
 800abf2:	2300      	movs	r3, #0
 800abf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abfa:	f113 0f0d 	cmn.w	r3, #13
 800abfe:	f000 8098 	beq.w	800ad32 <tcp_input+0x736>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ac02:	4b54      	ldr	r3, [pc, #336]	@ (800ad54 <tcp_input+0x758>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ac08:	69f8      	ldr	r0, [r7, #28]
 800ac0a:	f000 f917 	bl	800ae3c <tcp_input_delayed_close>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f040 8090 	bne.w	800ad36 <tcp_input+0x73a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ac16:	4b4d      	ldr	r3, [pc, #308]	@ (800ad4c <tcp_input+0x750>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d041      	beq.n	800aca2 <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d006      	beq.n	800ac34 <tcp_input+0x638>
 800ac26:	4b50      	ldr	r3, [pc, #320]	@ (800ad68 <tcp_input+0x76c>)
 800ac28:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ac2c:	494f      	ldr	r1, [pc, #316]	@ (800ad6c <tcp_input+0x770>)
 800ac2e:	4850      	ldr	r0, [pc, #320]	@ (800ad70 <tcp_input+0x774>)
 800ac30:	f009 f936 	bl	8013ea0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	8b5b      	ldrh	r3, [r3, #26]
 800ac38:	f003 0310 	and.w	r3, r3, #16
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d008      	beq.n	800ac52 <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac40:	4b42      	ldr	r3, [pc, #264]	@ (800ad4c <tcp_input+0x750>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd faa5 	bl	8008194 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac4a:	69f8      	ldr	r0, [r7, #28]
 800ac4c:	f7fe f994 	bl	8008f78 <tcp_abort>
            goto aborted;
 800ac50:	e091      	b.n	800ad76 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00c      	beq.n	800ac76 <tcp_input+0x67a>
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	6918      	ldr	r0, [r3, #16]
 800ac66:	4b39      	ldr	r3, [pc, #228]	@ (800ad4c <tcp_input+0x750>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	69f9      	ldr	r1, [r7, #28]
 800ac6e:	47a0      	blx	r4
 800ac70:	4603      	mov	r3, r0
 800ac72:	74fb      	strb	r3, [r7, #19]
 800ac74:	e008      	b.n	800ac88 <tcp_input+0x68c>
 800ac76:	4b35      	ldr	r3, [pc, #212]	@ (800ad4c <tcp_input+0x750>)
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	69f9      	ldr	r1, [r7, #28]
 800ac7e:	2000      	movs	r0, #0
 800ac80:	f7ff f884 	bl	8009d8c <tcp_recv_null>
 800ac84:	4603      	mov	r3, r0
 800ac86:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ac88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac8c:	f113 0f0d 	cmn.w	r3, #13
 800ac90:	d053      	beq.n	800ad3a <tcp_input+0x73e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ac92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ac9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ad4c <tcp_input+0x750>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aca2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad50 <tcp_input+0x754>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d030      	beq.n	800ad10 <tcp_input+0x714>
          if (pcb->refused_data != NULL) {
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acba:	7b5a      	ldrb	r2, [r3, #13]
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acc0:	f042 0220 	orr.w	r2, r2, #32
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	735a      	strb	r2, [r3, #13]
 800acc8:	e022      	b.n	800ad10 <tcp_input+0x714>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800acd2:	d005      	beq.n	800ace0 <tcp_input+0x6e4>
              pcb->rcv_wnd++;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acd8:	3301      	adds	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00b      	beq.n	800ad02 <tcp_input+0x706>
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	6918      	ldr	r0, [r3, #16]
 800acf4:	2300      	movs	r3, #0
 800acf6:	2200      	movs	r2, #0
 800acf8:	69f9      	ldr	r1, [r7, #28]
 800acfa:	47a0      	blx	r4
 800acfc:	4603      	mov	r3, r0
 800acfe:	74fb      	strb	r3, [r7, #19]
 800ad00:	e001      	b.n	800ad06 <tcp_input+0x70a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ad06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad0a:	f113 0f0d 	cmn.w	r3, #13
 800ad0e:	d016      	beq.n	800ad3e <tcp_input+0x742>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ad10:	4b13      	ldr	r3, [pc, #76]	@ (800ad60 <tcp_input+0x764>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad16:	69f8      	ldr	r0, [r7, #28]
 800ad18:	f000 f890 	bl	800ae3c <tcp_input_delayed_close>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d128      	bne.n	800ad74 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad22:	69f8      	ldr	r0, [r7, #28]
 800ad24:	f002 ff1c 	bl	800db60 <tcp_output>
 800ad28:	e025      	b.n	800ad76 <tcp_input+0x77a>
        goto aborted;
 800ad2a:	bf00      	nop
 800ad2c:	e023      	b.n	800ad76 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad2e:	bf00      	nop
 800ad30:	e021      	b.n	800ad76 <tcp_input+0x77a>
              goto aborted;
 800ad32:	bf00      	nop
 800ad34:	e01f      	b.n	800ad76 <tcp_input+0x77a>
          goto aborted;
 800ad36:	bf00      	nop
 800ad38:	e01d      	b.n	800ad76 <tcp_input+0x77a>
            goto aborted;
 800ad3a:	bf00      	nop
 800ad3c:	e01b      	b.n	800ad76 <tcp_input+0x77a>
              goto aborted;
 800ad3e:	bf00      	nop
 800ad40:	e019      	b.n	800ad76 <tcp_input+0x77a>
 800ad42:	bf00      	nop
 800ad44:	20004348 	.word	0x20004348
 800ad48:	20004358 	.word	0x20004358
 800ad4c:	20004378 	.word	0x20004378
 800ad50:	20004375 	.word	0x20004375
 800ad54:	20004370 	.word	0x20004370
 800ad58:	20004374 	.word	0x20004374
 800ad5c:	20004372 	.word	0x20004372
 800ad60:	2000437c 	.word	0x2000437c
 800ad64:	2000433c 	.word	0x2000433c
 800ad68:	08015ff8 	.word	0x08015ff8
 800ad6c:	080161ac 	.word	0x080161ac
 800ad70:	08016044 	.word	0x08016044
          goto aborted;
 800ad74:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad76:	4b28      	ldr	r3, [pc, #160]	@ (800ae18 <tcp_input+0x81c>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad7c:	4b27      	ldr	r3, [pc, #156]	@ (800ae1c <tcp_input+0x820>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ad82:	4b27      	ldr	r3, [pc, #156]	@ (800ae20 <tcp_input+0x824>)
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d041      	beq.n	800ae0e <tcp_input+0x812>
      pbuf_free(inseg.p);
 800ad8a:	4b25      	ldr	r3, [pc, #148]	@ (800ae20 <tcp_input+0x824>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd fa00 	bl	8008194 <pbuf_free>
      inseg.p = NULL;
 800ad94:	4b22      	ldr	r3, [pc, #136]	@ (800ae20 <tcp_input+0x824>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad9a:	e038      	b.n	800ae0e <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad9c:	4b21      	ldr	r3, [pc, #132]	@ (800ae24 <tcp_input+0x828>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	899b      	ldrh	r3, [r3, #12]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fb fa69 	bl	800627c <lwip_htons>
 800adaa:	4603      	mov	r3, r0
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0304 	and.w	r3, r3, #4
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d118      	bne.n	800ade8 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adb6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae28 <tcp_input+0x82c>)
 800adb8:	6819      	ldr	r1, [r3, #0]
 800adba:	4b1c      	ldr	r3, [pc, #112]	@ (800ae2c <tcp_input+0x830>)
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <tcp_input+0x834>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adc6:	4b17      	ldr	r3, [pc, #92]	@ (800ae24 <tcp_input+0x828>)
 800adc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adca:	885b      	ldrh	r3, [r3, #2]
 800adcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adce:	4a15      	ldr	r2, [pc, #84]	@ (800ae24 <tcp_input+0x828>)
 800add0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800add2:	8812      	ldrh	r2, [r2, #0]
 800add4:	b292      	uxth	r2, r2
 800add6:	9202      	str	r2, [sp, #8]
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	4b16      	ldr	r3, [pc, #88]	@ (800ae34 <tcp_input+0x838>)
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	4b16      	ldr	r3, [pc, #88]	@ (800ae38 <tcp_input+0x83c>)
 800ade0:	4602      	mov	r2, r0
 800ade2:	2000      	movs	r0, #0
 800ade4:	f003 fc92 	bl	800e70c <tcp_rst>
    pbuf_free(p);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7fd f9d3 	bl	8008194 <pbuf_free>
  return;
 800adee:	e00e      	b.n	800ae0e <tcp_input+0x812>
    goto dropped;
 800adf0:	bf00      	nop
 800adf2:	e008      	b.n	800ae06 <tcp_input+0x80a>
    goto dropped;
 800adf4:	bf00      	nop
 800adf6:	e006      	b.n	800ae06 <tcp_input+0x80a>
      goto dropped;
 800adf8:	bf00      	nop
 800adfa:	e004      	b.n	800ae06 <tcp_input+0x80a>
    goto dropped;
 800adfc:	bf00      	nop
 800adfe:	e002      	b.n	800ae06 <tcp_input+0x80a>
      goto dropped;
 800ae00:	bf00      	nop
 800ae02:	e000      	b.n	800ae06 <tcp_input+0x80a>
      goto dropped;
 800ae04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7fd f9c4 	bl	8008194 <pbuf_free>
 800ae0c:	e000      	b.n	800ae10 <tcp_input+0x814>
  return;
 800ae0e:	bf00      	nop
}
 800ae10:	3724      	adds	r7, #36	@ 0x24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd90      	pop	{r4, r7, pc}
 800ae16:	bf00      	nop
 800ae18:	2000437c 	.word	0x2000437c
 800ae1c:	20004378 	.word	0x20004378
 800ae20:	20004348 	.word	0x20004348
 800ae24:	20004358 	.word	0x20004358
 800ae28:	2000436c 	.word	0x2000436c
 800ae2c:	20004372 	.word	0x20004372
 800ae30:	20004368 	.word	0x20004368
 800ae34:	20000da0 	.word	0x20000da0
 800ae38:	20000da4 	.word	0x20000da4

0800ae3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <tcp_input_delayed_close+0x1c>
 800ae4a:	4b17      	ldr	r3, [pc, #92]	@ (800aea8 <tcp_input_delayed_close+0x6c>)
 800ae4c:	f240 225a 	movw	r2, #602	@ 0x25a
 800ae50:	4916      	ldr	r1, [pc, #88]	@ (800aeac <tcp_input_delayed_close+0x70>)
 800ae52:	4817      	ldr	r0, [pc, #92]	@ (800aeb0 <tcp_input_delayed_close+0x74>)
 800ae54:	f009 f824 	bl	8013ea0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ae58:	4b16      	ldr	r3, [pc, #88]	@ (800aeb4 <tcp_input_delayed_close+0x78>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0310 	and.w	r3, r3, #16
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01c      	beq.n	800ae9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	8b5b      	ldrh	r3, [r3, #26]
 800ae68:	f003 0310 	and.w	r3, r3, #16
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10d      	bne.n	800ae8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d008      	beq.n	800ae8c <tcp_input_delayed_close+0x50>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	6912      	ldr	r2, [r2, #16]
 800ae84:	f06f 010e 	mvn.w	r1, #14
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	480a      	ldr	r0, [pc, #40]	@ (800aeb8 <tcp_input_delayed_close+0x7c>)
 800ae90:	f7ff fa3c 	bl	800a30c <tcp_pcb_remove>
    tcp_free(pcb);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fd fd87 	bl	80089a8 <tcp_free>
    return 1;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	08015ff8 	.word	0x08015ff8
 800aeac:	080161c8 	.word	0x080161c8
 800aeb0:	08016044 	.word	0x08016044
 800aeb4:	20004375 	.word	0x20004375
 800aeb8:	2000433c 	.word	0x2000433c

0800aebc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b08b      	sub	sp, #44	@ 0x2c
 800aec0:	af04      	add	r7, sp, #16
 800aec2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aec4:	4b6f      	ldr	r3, [pc, #444]	@ (800b084 <tcp_listen_input+0x1c8>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f040 80d2 	bne.w	800b076 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <tcp_listen_input+0x2a>
 800aed8:	4b6b      	ldr	r3, [pc, #428]	@ (800b088 <tcp_listen_input+0x1cc>)
 800aeda:	f240 2281 	movw	r2, #641	@ 0x281
 800aede:	496b      	ldr	r1, [pc, #428]	@ (800b08c <tcp_listen_input+0x1d0>)
 800aee0:	486b      	ldr	r0, [pc, #428]	@ (800b090 <tcp_listen_input+0x1d4>)
 800aee2:	f008 ffdd 	bl	8013ea0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aee6:	4b67      	ldr	r3, [pc, #412]	@ (800b084 <tcp_listen_input+0x1c8>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0310 	and.w	r3, r3, #16
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d019      	beq.n	800af26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aef2:	4b68      	ldr	r3, [pc, #416]	@ (800b094 <tcp_listen_input+0x1d8>)
 800aef4:	6819      	ldr	r1, [r3, #0]
 800aef6:	4b68      	ldr	r3, [pc, #416]	@ (800b098 <tcp_listen_input+0x1dc>)
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	4b67      	ldr	r3, [pc, #412]	@ (800b09c <tcp_listen_input+0x1e0>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af02:	4b67      	ldr	r3, [pc, #412]	@ (800b0a0 <tcp_listen_input+0x1e4>)
 800af04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af06:	885b      	ldrh	r3, [r3, #2]
 800af08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af0a:	4a65      	ldr	r2, [pc, #404]	@ (800b0a0 <tcp_listen_input+0x1e4>)
 800af0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af0e:	8812      	ldrh	r2, [r2, #0]
 800af10:	b292      	uxth	r2, r2
 800af12:	9202      	str	r2, [sp, #8]
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	4b63      	ldr	r3, [pc, #396]	@ (800b0a4 <tcp_listen_input+0x1e8>)
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	4b63      	ldr	r3, [pc, #396]	@ (800b0a8 <tcp_listen_input+0x1ec>)
 800af1c:	4602      	mov	r2, r0
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f003 fbf4 	bl	800e70c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800af24:	e0a9      	b.n	800b07a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800af26:	4b57      	ldr	r3, [pc, #348]	@ (800b084 <tcp_listen_input+0x1c8>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80a3 	beq.w	800b07a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	7d5b      	ldrb	r3, [r3, #21]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff f84b 	bl	8009fd4 <tcp_alloc>
 800af3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d111      	bne.n	800af6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <tcp_listen_input+0xa8>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	6910      	ldr	r0, [r2, #16]
 800af56:	f04f 32ff 	mov.w	r2, #4294967295
 800af5a:	2100      	movs	r1, #0
 800af5c:	4798      	blx	r3
 800af5e:	4603      	mov	r3, r0
 800af60:	73bb      	strb	r3, [r7, #14]
      return;
 800af62:	e08b      	b.n	800b07c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af64:	23f0      	movs	r3, #240	@ 0xf0
 800af66:	73bb      	strb	r3, [r7, #14]
      return;
 800af68:	e088      	b.n	800b07c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800af6a:	4b50      	ldr	r3, [pc, #320]	@ (800b0ac <tcp_listen_input+0x1f0>)
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800af72:	4b4e      	ldr	r3, [pc, #312]	@ (800b0ac <tcp_listen_input+0x1f0>)
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	8ada      	ldrh	r2, [r3, #22]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800af82:	4b47      	ldr	r3, [pc, #284]	@ (800b0a0 <tcp_listen_input+0x1e4>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29a      	uxth	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2203      	movs	r2, #3
 800af92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800af94:	4b41      	ldr	r3, [pc, #260]	@ (800b09c <tcp_listen_input+0x1e0>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800afa6:	6978      	ldr	r0, [r7, #20]
 800afa8:	f7ff fa44 	bl	800a434 <tcp_next_iss>
 800afac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800afc6:	4b35      	ldr	r3, [pc, #212]	@ (800b09c <tcp_listen_input+0x1e0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	1e5a      	subs	r2, r3, #1
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7a5b      	ldrb	r3, [r3, #9]
 800afe2:	f003 030c 	and.w	r3, r3, #12
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7a1a      	ldrb	r2, [r3, #8]
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aff4:	4b2e      	ldr	r3, [pc, #184]	@ (800b0b0 <tcp_listen_input+0x1f4>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	60da      	str	r2, [r3, #12]
 800affc:	4a2c      	ldr	r2, [pc, #176]	@ (800b0b0 <tcp_listen_input+0x1f4>)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	f003 fd45 	bl	800ea90 <tcp_timer_needed>
 800b006:	4b2b      	ldr	r3, [pc, #172]	@ (800b0b4 <tcp_listen_input+0x1f8>)
 800b008:	2201      	movs	r2, #1
 800b00a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b00c:	6978      	ldr	r0, [r7, #20]
 800b00e:	f001 fd8b 	bl	800cb28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b012:	4b23      	ldr	r3, [pc, #140]	@ (800b0a0 <tcp_listen_input+0x1e4>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	89db      	ldrh	r3, [r3, #14]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3304      	adds	r3, #4
 800b034:	4618      	mov	r0, r3
 800b036:	f007 fba7 	bl	8012788 <ip4_route>
 800b03a:	4601      	mov	r1, r0
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	3304      	adds	r3, #4
 800b040:	461a      	mov	r2, r3
 800b042:	4620      	mov	r0, r4
 800b044:	f7ff fa1c 	bl	800a480 <tcp_eff_send_mss_netif>
 800b048:	4603      	mov	r3, r0
 800b04a:	461a      	mov	r2, r3
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b050:	2112      	movs	r1, #18
 800b052:	6978      	ldr	r0, [r7, #20]
 800b054:	f002 fc96 	bl	800d984 <tcp_enqueue_flags>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b064:	2100      	movs	r1, #0
 800b066:	6978      	ldr	r0, [r7, #20]
 800b068:	f7fd fec8 	bl	8008dfc <tcp_abandon>
      return;
 800b06c:	e006      	b.n	800b07c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b06e:	6978      	ldr	r0, [r7, #20]
 800b070:	f002 fd76 	bl	800db60 <tcp_output>
  return;
 800b074:	e001      	b.n	800b07a <tcp_listen_input+0x1be>
    return;
 800b076:	bf00      	nop
 800b078:	e000      	b.n	800b07c <tcp_listen_input+0x1c0>
  return;
 800b07a:	bf00      	nop
}
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd90      	pop	{r4, r7, pc}
 800b082:	bf00      	nop
 800b084:	20004374 	.word	0x20004374
 800b088:	08015ff8 	.word	0x08015ff8
 800b08c:	080161f0 	.word	0x080161f0
 800b090:	08016044 	.word	0x08016044
 800b094:	2000436c 	.word	0x2000436c
 800b098:	20004372 	.word	0x20004372
 800b09c:	20004368 	.word	0x20004368
 800b0a0:	20004358 	.word	0x20004358
 800b0a4:	20000da0 	.word	0x20000da0
 800b0a8:	20000da4 	.word	0x20000da4
 800b0ac:	20000d90 	.word	0x20000d90
 800b0b0:	2000433c 	.word	0x2000433c
 800b0b4:	20004344 	.word	0x20004344

0800b0b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af04      	add	r7, sp, #16
 800b0be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b0c0:	4b2f      	ldr	r3, [pc, #188]	@ (800b180 <tcp_timewait_input+0xc8>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d153      	bne.n	800b174 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <tcp_timewait_input+0x28>
 800b0d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b184 <tcp_timewait_input+0xcc>)
 800b0d4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b0d8:	492b      	ldr	r1, [pc, #172]	@ (800b188 <tcp_timewait_input+0xd0>)
 800b0da:	482c      	ldr	r0, [pc, #176]	@ (800b18c <tcp_timewait_input+0xd4>)
 800b0dc:	f008 fee0 	bl	8013ea0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b0e0:	4b27      	ldr	r3, [pc, #156]	@ (800b180 <tcp_timewait_input+0xc8>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d02a      	beq.n	800b142 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b0ec:	4b28      	ldr	r3, [pc, #160]	@ (800b190 <tcp_timewait_input+0xd8>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	db2d      	blt.n	800b156 <tcp_timewait_input+0x9e>
 800b0fa:	4b25      	ldr	r3, [pc, #148]	@ (800b190 <tcp_timewait_input+0xd8>)
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b106:	440b      	add	r3, r1
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dc23      	bgt.n	800b156 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b10e:	4b21      	ldr	r3, [pc, #132]	@ (800b194 <tcp_timewait_input+0xdc>)
 800b110:	6819      	ldr	r1, [r3, #0]
 800b112:	4b21      	ldr	r3, [pc, #132]	@ (800b198 <tcp_timewait_input+0xe0>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	4b1d      	ldr	r3, [pc, #116]	@ (800b190 <tcp_timewait_input+0xd8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b11e:	4b1f      	ldr	r3, [pc, #124]	@ (800b19c <tcp_timewait_input+0xe4>)
 800b120:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b122:	885b      	ldrh	r3, [r3, #2]
 800b124:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b126:	4a1d      	ldr	r2, [pc, #116]	@ (800b19c <tcp_timewait_input+0xe4>)
 800b128:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b12a:	8812      	ldrh	r2, [r2, #0]
 800b12c:	b292      	uxth	r2, r2
 800b12e:	9202      	str	r2, [sp, #8]
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a0 <tcp_timewait_input+0xe8>)
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a4 <tcp_timewait_input+0xec>)
 800b138:	4602      	mov	r2, r0
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f003 fae6 	bl	800e70c <tcp_rst>
      return;
 800b140:	e01b      	b.n	800b17a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b142:	4b0f      	ldr	r3, [pc, #60]	@ (800b180 <tcp_timewait_input+0xc8>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b14e:	4b16      	ldr	r3, [pc, #88]	@ (800b1a8 <tcp_timewait_input+0xf0>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b156:	4b10      	ldr	r3, [pc, #64]	@ (800b198 <tcp_timewait_input+0xe0>)
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00c      	beq.n	800b178 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	8b5b      	ldrh	r3, [r3, #26]
 800b162:	f043 0302 	orr.w	r3, r3, #2
 800b166:	b29a      	uxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f002 fcf7 	bl	800db60 <tcp_output>
  }
  return;
 800b172:	e001      	b.n	800b178 <tcp_timewait_input+0xc0>
    return;
 800b174:	bf00      	nop
 800b176:	e000      	b.n	800b17a <tcp_timewait_input+0xc2>
  return;
 800b178:	bf00      	nop
}
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20004374 	.word	0x20004374
 800b184:	08015ff8 	.word	0x08015ff8
 800b188:	08016210 	.word	0x08016210
 800b18c:	08016044 	.word	0x08016044
 800b190:	20004368 	.word	0x20004368
 800b194:	2000436c 	.word	0x2000436c
 800b198:	20004372 	.word	0x20004372
 800b19c:	20004358 	.word	0x20004358
 800b1a0:	20000da0 	.word	0x20000da0
 800b1a4:	20000da4 	.word	0x20000da4
 800b1a8:	20004330 	.word	0x20004330

0800b1ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b08d      	sub	sp, #52	@ 0x34
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d106      	bne.n	800b1d0 <tcp_process+0x24>
 800b1c2:	4b9d      	ldr	r3, [pc, #628]	@ (800b438 <tcp_process+0x28c>)
 800b1c4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b1c8:	499c      	ldr	r1, [pc, #624]	@ (800b43c <tcp_process+0x290>)
 800b1ca:	489d      	ldr	r0, [pc, #628]	@ (800b440 <tcp_process+0x294>)
 800b1cc:	f008 fe68 	bl	8013ea0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b1d0:	4b9c      	ldr	r3, [pc, #624]	@ (800b444 <tcp_process+0x298>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d04e      	beq.n	800b27a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	7d1b      	ldrb	r3, [r3, #20]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d108      	bne.n	800b1f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1e8:	4b97      	ldr	r3, [pc, #604]	@ (800b448 <tcp_process+0x29c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d123      	bne.n	800b238 <tcp_process+0x8c>
        acceptable = 1;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	76fb      	strb	r3, [r7, #27]
 800b1f4:	e020      	b.n	800b238 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1fa:	4b94      	ldr	r3, [pc, #592]	@ (800b44c <tcp_process+0x2a0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d102      	bne.n	800b208 <tcp_process+0x5c>
        acceptable = 1;
 800b202:	2301      	movs	r3, #1
 800b204:	76fb      	strb	r3, [r7, #27]
 800b206:	e017      	b.n	800b238 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b208:	4b90      	ldr	r3, [pc, #576]	@ (800b44c <tcp_process+0x2a0>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	db10      	blt.n	800b238 <tcp_process+0x8c>
 800b216:	4b8d      	ldr	r3, [pc, #564]	@ (800b44c <tcp_process+0x2a0>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b222:	440b      	add	r3, r1
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc06      	bgt.n	800b238 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	8b5b      	ldrh	r3, [r3, #26]
 800b22e:	f043 0302 	orr.w	r3, r3, #2
 800b232:	b29a      	uxth	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b238:	7efb      	ldrb	r3, [r7, #27]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01b      	beq.n	800b276 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7d1b      	ldrb	r3, [r3, #20]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <tcp_process+0xa8>
 800b246:	4b7c      	ldr	r3, [pc, #496]	@ (800b438 <tcp_process+0x28c>)
 800b248:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b24c:	4980      	ldr	r1, [pc, #512]	@ (800b450 <tcp_process+0x2a4>)
 800b24e:	487c      	ldr	r0, [pc, #496]	@ (800b440 <tcp_process+0x294>)
 800b250:	f008 fe26 	bl	8013ea0 <iprintf>
      recv_flags |= TF_RESET;
 800b254:	4b7f      	ldr	r3, [pc, #508]	@ (800b454 <tcp_process+0x2a8>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f043 0308 	orr.w	r3, r3, #8
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	4b7d      	ldr	r3, [pc, #500]	@ (800b454 <tcp_process+0x2a8>)
 800b260:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	8b5b      	ldrh	r3, [r3, #26]
 800b266:	f023 0301 	bic.w	r3, r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b270:	f06f 030d 	mvn.w	r3, #13
 800b274:	e37a      	b.n	800b96c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	e378      	b.n	800b96c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b27a:	4b72      	ldr	r3, [pc, #456]	@ (800b444 <tcp_process+0x298>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d010      	beq.n	800b2a8 <tcp_process+0xfc>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	7d1b      	ldrb	r3, [r3, #20]
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d00c      	beq.n	800b2a8 <tcp_process+0xfc>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7d1b      	ldrb	r3, [r3, #20]
 800b292:	2b03      	cmp	r3, #3
 800b294:	d008      	beq.n	800b2a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8b5b      	ldrh	r3, [r3, #26]
 800b29a:	f043 0302 	orr.w	r3, r3, #2
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e361      	b.n	800b96c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8b5b      	ldrh	r3, [r3, #26]
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b2b4:	4b68      	ldr	r3, [pc, #416]	@ (800b458 <tcp_process+0x2ac>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 fc2b 	bl	800cb28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7d1b      	ldrb	r3, [r3, #20]
 800b2d6:	3b02      	subs	r3, #2
 800b2d8:	2b07      	cmp	r3, #7
 800b2da:	f200 8337 	bhi.w	800b94c <tcp_process+0x7a0>
 800b2de:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <tcp_process+0x138>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b305 	.word	0x0800b305
 800b2e8:	0800b535 	.word	0x0800b535
 800b2ec:	0800b6ad 	.word	0x0800b6ad
 800b2f0:	0800b6d7 	.word	0x0800b6d7
 800b2f4:	0800b7fb 	.word	0x0800b7fb
 800b2f8:	0800b6ad 	.word	0x0800b6ad
 800b2fc:	0800b887 	.word	0x0800b887
 800b300:	0800b917 	.word	0x0800b917
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b304:	4b4f      	ldr	r3, [pc, #316]	@ (800b444 <tcp_process+0x298>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80e4 	beq.w	800b4da <tcp_process+0x32e>
 800b312:	4b4c      	ldr	r3, [pc, #304]	@ (800b444 <tcp_process+0x298>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	f003 0302 	and.w	r3, r3, #2
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 80dd 	beq.w	800b4da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	4b48      	ldr	r3, [pc, #288]	@ (800b448 <tcp_process+0x29c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f040 80d5 	bne.w	800b4da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b330:	4b46      	ldr	r3, [pc, #280]	@ (800b44c <tcp_process+0x2a0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b342:	4b41      	ldr	r3, [pc, #260]	@ (800b448 <tcp_process+0x29c>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b34a:	4b44      	ldr	r3, [pc, #272]	@ (800b45c <tcp_process+0x2b0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	89db      	ldrh	r3, [r3, #14]
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b364:	4b39      	ldr	r3, [pc, #228]	@ (800b44c <tcp_process+0x2a0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	1e5a      	subs	r2, r3, #1
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2204      	movs	r2, #4
 800b372:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	3304      	adds	r3, #4
 800b37c:	4618      	mov	r0, r3
 800b37e:	f007 fa03 	bl	8012788 <ip4_route>
 800b382:	4601      	mov	r1, r0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3304      	adds	r3, #4
 800b388:	461a      	mov	r2, r3
 800b38a:	4620      	mov	r0, r4
 800b38c:	f7ff f878 	bl	800a480 <tcp_eff_send_mss_netif>
 800b390:	4603      	mov	r3, r0
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b39c:	009a      	lsls	r2, r3, #2
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf38      	it	cc
 800b3ac:	460b      	movcc	r3, r1
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d204      	bcs.n	800b3bc <tcp_process+0x210>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	e00d      	b.n	800b3d8 <tcp_process+0x22c>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d904      	bls.n	800b3d4 <tcp_process+0x228>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	e001      	b.n	800b3d8 <tcp_process+0x22c>
 800b3d4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d106      	bne.n	800b3f6 <tcp_process+0x24a>
 800b3e8:	4b13      	ldr	r3, [pc, #76]	@ (800b438 <tcp_process+0x28c>)
 800b3ea:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b3ee:	491c      	ldr	r1, [pc, #112]	@ (800b460 <tcp_process+0x2b4>)
 800b3f0:	4813      	ldr	r0, [pc, #76]	@ (800b440 <tcp_process+0x294>)
 800b3f2:	f008 fd55 	bl	8013ea0 <iprintf>
        --pcb->snd_queuelen;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b40a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d12a      	bne.n	800b468 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b416:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <tcp_process+0x280>
 800b41e:	4b06      	ldr	r3, [pc, #24]	@ (800b438 <tcp_process+0x28c>)
 800b420:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b424:	490f      	ldr	r1, [pc, #60]	@ (800b464 <tcp_process+0x2b8>)
 800b426:	4806      	ldr	r0, [pc, #24]	@ (800b440 <tcp_process+0x294>)
 800b428:	f008 fd3a 	bl	8013ea0 <iprintf>
          pcb->unsent = rseg->next;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b434:	e01c      	b.n	800b470 <tcp_process+0x2c4>
 800b436:	bf00      	nop
 800b438:	08015ff8 	.word	0x08015ff8
 800b43c:	08016230 	.word	0x08016230
 800b440:	08016044 	.word	0x08016044
 800b444:	20004374 	.word	0x20004374
 800b448:	2000436c 	.word	0x2000436c
 800b44c:	20004368 	.word	0x20004368
 800b450:	0801624c 	.word	0x0801624c
 800b454:	20004375 	.word	0x20004375
 800b458:	20004330 	.word	0x20004330
 800b45c:	20004358 	.word	0x20004358
 800b460:	0801626c 	.word	0x0801626c
 800b464:	08016284 	.word	0x08016284
        } else {
          pcb->unacked = rseg->next;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b470:	69f8      	ldr	r0, [r7, #28]
 800b472:	f7fe fc28 	bl	8009cc6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d104      	bne.n	800b488 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b484:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b486:	e006      	b.n	800b496 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <tcp_process+0x30a>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6910      	ldr	r0, [r2, #16]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4798      	blx	r3
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	76bb      	strb	r3, [r7, #26]
 800b4b4:	e001      	b.n	800b4ba <tcp_process+0x30e>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b4ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4be:	f113 0f0d 	cmn.w	r3, #13
 800b4c2:	d102      	bne.n	800b4ca <tcp_process+0x31e>
          return ERR_ABRT;
 800b4c4:	f06f 030c 	mvn.w	r3, #12
 800b4c8:	e250      	b.n	800b96c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	8b5b      	ldrh	r3, [r3, #26]
 800b4ce:	f043 0302 	orr.w	r3, r3, #2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b4d8:	e23a      	b.n	800b950 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b4da:	4b98      	ldr	r3, [pc, #608]	@ (800b73c <tcp_process+0x590>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	f003 0310 	and.w	r3, r3, #16
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8234 	beq.w	800b950 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4e8:	4b95      	ldr	r3, [pc, #596]	@ (800b740 <tcp_process+0x594>)
 800b4ea:	6819      	ldr	r1, [r3, #0]
 800b4ec:	4b95      	ldr	r3, [pc, #596]	@ (800b744 <tcp_process+0x598>)
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4b95      	ldr	r3, [pc, #596]	@ (800b748 <tcp_process+0x59c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4f8:	4b94      	ldr	r3, [pc, #592]	@ (800b74c <tcp_process+0x5a0>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b500:	4a92      	ldr	r2, [pc, #584]	@ (800b74c <tcp_process+0x5a0>)
 800b502:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b504:	8812      	ldrh	r2, [r2, #0]
 800b506:	b292      	uxth	r2, r2
 800b508:	9202      	str	r2, [sp, #8]
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	4b90      	ldr	r3, [pc, #576]	@ (800b750 <tcp_process+0x5a4>)
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	4b90      	ldr	r3, [pc, #576]	@ (800b754 <tcp_process+0x5a8>)
 800b512:	4602      	mov	r2, r0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f003 f8f9 	bl	800e70c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b520:	2b05      	cmp	r3, #5
 800b522:	f200 8215 	bhi.w	800b950 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f002 feb5 	bl	800e29c <tcp_rexmit_rto>
      break;
 800b532:	e20d      	b.n	800b950 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b534:	4b81      	ldr	r3, [pc, #516]	@ (800b73c <tcp_process+0x590>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 80a1 	beq.w	800b684 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b542:	4b7f      	ldr	r3, [pc, #508]	@ (800b740 <tcp_process+0x594>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	3b01      	subs	r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	db7e      	blt.n	800b650 <tcp_process+0x4a4>
 800b552:	4b7b      	ldr	r3, [pc, #492]	@ (800b740 <tcp_process+0x594>)
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc77      	bgt.n	800b650 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2204      	movs	r2, #4
 800b564:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d102      	bne.n	800b574 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b56e:	23fa      	movs	r3, #250	@ 0xfa
 800b570:	76bb      	strb	r3, [r7, #26]
 800b572:	e01d      	b.n	800b5b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <tcp_process+0x3e0>
 800b57e:	4b76      	ldr	r3, [pc, #472]	@ (800b758 <tcp_process+0x5ac>)
 800b580:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b584:	4975      	ldr	r1, [pc, #468]	@ (800b75c <tcp_process+0x5b0>)
 800b586:	4876      	ldr	r0, [pc, #472]	@ (800b760 <tcp_process+0x5b4>)
 800b588:	f008 fc8a 	bl	8013ea0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <tcp_process+0x400>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6910      	ldr	r0, [r2, #16]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	4798      	blx	r3
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	76bb      	strb	r3, [r7, #26]
 800b5aa:	e001      	b.n	800b5b0 <tcp_process+0x404>
 800b5ac:	23f0      	movs	r3, #240	@ 0xf0
 800b5ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b5b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00a      	beq.n	800b5ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b5b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5bc:	f113 0f0d 	cmn.w	r3, #13
 800b5c0:	d002      	beq.n	800b5c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fd fcd8 	bl	8008f78 <tcp_abort>
            }
            return ERR_ABRT;
 800b5c8:	f06f 030c 	mvn.w	r3, #12
 800b5cc:	e1ce      	b.n	800b96c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fae0 	bl	800bb94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b5d4:	4b63      	ldr	r3, [pc, #396]	@ (800b764 <tcp_process+0x5b8>)
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <tcp_process+0x43c>
            recv_acked--;
 800b5dc:	4b61      	ldr	r3, [pc, #388]	@ (800b764 <tcp_process+0x5b8>)
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	4b5f      	ldr	r3, [pc, #380]	@ (800b764 <tcp_process+0x5b8>)
 800b5e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5ec:	009a      	lsls	r2, r3, #2
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b5f8:	428b      	cmp	r3, r1
 800b5fa:	bf38      	it	cc
 800b5fc:	460b      	movcc	r3, r1
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d204      	bcs.n	800b60c <tcp_process+0x460>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	b29b      	uxth	r3, r3
 800b60a:	e00d      	b.n	800b628 <tcp_process+0x47c>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b616:	4293      	cmp	r3, r2
 800b618:	d904      	bls.n	800b624 <tcp_process+0x478>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	b29b      	uxth	r3, r3
 800b622:	e001      	b.n	800b628 <tcp_process+0x47c>
 800b624:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b62e:	4b4e      	ldr	r3, [pc, #312]	@ (800b768 <tcp_process+0x5bc>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	f003 0320 	and.w	r3, r3, #32
 800b636:	2b00      	cmp	r3, #0
 800b638:	d037      	beq.n	800b6aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	8b5b      	ldrh	r3, [r3, #26]
 800b63e:	f043 0302 	orr.w	r3, r3, #2
 800b642:	b29a      	uxth	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2207      	movs	r2, #7
 800b64c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b64e:	e02c      	b.n	800b6aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b650:	4b3b      	ldr	r3, [pc, #236]	@ (800b740 <tcp_process+0x594>)
 800b652:	6819      	ldr	r1, [r3, #0]
 800b654:	4b3b      	ldr	r3, [pc, #236]	@ (800b744 <tcp_process+0x598>)
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	4b3b      	ldr	r3, [pc, #236]	@ (800b748 <tcp_process+0x59c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b660:	4b3a      	ldr	r3, [pc, #232]	@ (800b74c <tcp_process+0x5a0>)
 800b662:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b664:	885b      	ldrh	r3, [r3, #2]
 800b666:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b668:	4a38      	ldr	r2, [pc, #224]	@ (800b74c <tcp_process+0x5a0>)
 800b66a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b66c:	8812      	ldrh	r2, [r2, #0]
 800b66e:	b292      	uxth	r2, r2
 800b670:	9202      	str	r2, [sp, #8]
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	4b36      	ldr	r3, [pc, #216]	@ (800b750 <tcp_process+0x5a4>)
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4b36      	ldr	r3, [pc, #216]	@ (800b754 <tcp_process+0x5a8>)
 800b67a:	4602      	mov	r2, r0
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f003 f845 	bl	800e70c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b682:	e167      	b.n	800b954 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b684:	4b2d      	ldr	r3, [pc, #180]	@ (800b73c <tcp_process+0x590>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 8161 	beq.w	800b954 <tcp_process+0x7a8>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	4b2b      	ldr	r3, [pc, #172]	@ (800b748 <tcp_process+0x59c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	f040 8159 	bne.w	800b954 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 fe1c 	bl	800e2e0 <tcp_rexmit>
      break;
 800b6a8:	e154      	b.n	800b954 <tcp_process+0x7a8>
 800b6aa:	e153      	b.n	800b954 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa71 	bl	800bb94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b6b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b768 <tcp_process+0x5bc>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	f003 0320 	and.w	r3, r3, #32
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 814c 	beq.w	800b958 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	8b5b      	ldrh	r3, [r3, #26]
 800b6c4:	f043 0302 	orr.w	r3, r3, #2
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6d4:	e140      	b.n	800b958 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa5c 	bl	800bb94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6dc:	4b22      	ldr	r3, [pc, #136]	@ (800b768 <tcp_process+0x5bc>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	f003 0320 	and.w	r3, r3, #32
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d071      	beq.n	800b7cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6e8:	4b14      	ldr	r3, [pc, #80]	@ (800b73c <tcp_process+0x590>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	f003 0310 	and.w	r3, r3, #16
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d060      	beq.n	800b7b6 <tcp_process+0x60a>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6f8:	4b11      	ldr	r3, [pc, #68]	@ (800b740 <tcp_process+0x594>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d15a      	bne.n	800b7b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b704:	2b00      	cmp	r3, #0
 800b706:	d156      	bne.n	800b7b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	8b5b      	ldrh	r3, [r3, #26]
 800b70c:	f043 0302 	orr.w	r3, r3, #2
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7fe fda8 	bl	800a26c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b71c:	4b13      	ldr	r3, [pc, #76]	@ (800b76c <tcp_process+0x5c0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	429a      	cmp	r2, r3
 800b724:	d105      	bne.n	800b732 <tcp_process+0x586>
 800b726:	4b11      	ldr	r3, [pc, #68]	@ (800b76c <tcp_process+0x5c0>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	4a0f      	ldr	r2, [pc, #60]	@ (800b76c <tcp_process+0x5c0>)
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	e02e      	b.n	800b790 <tcp_process+0x5e4>
 800b732:	4b0e      	ldr	r3, [pc, #56]	@ (800b76c <tcp_process+0x5c0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	e027      	b.n	800b78a <tcp_process+0x5de>
 800b73a:	bf00      	nop
 800b73c:	20004374 	.word	0x20004374
 800b740:	2000436c 	.word	0x2000436c
 800b744:	20004372 	.word	0x20004372
 800b748:	20004368 	.word	0x20004368
 800b74c:	20004358 	.word	0x20004358
 800b750:	20000da0 	.word	0x20000da0
 800b754:	20000da4 	.word	0x20000da4
 800b758:	08015ff8 	.word	0x08015ff8
 800b75c:	08016298 	.word	0x08016298
 800b760:	08016044 	.word	0x08016044
 800b764:	20004370 	.word	0x20004370
 800b768:	20004375 	.word	0x20004375
 800b76c:	2000433c 	.word	0x2000433c
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	429a      	cmp	r2, r3
 800b778:	d104      	bne.n	800b784 <tcp_process+0x5d8>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	60da      	str	r2, [r3, #12]
 800b782:	e005      	b.n	800b790 <tcp_process+0x5e4>
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1ef      	bne.n	800b770 <tcp_process+0x5c4>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	60da      	str	r2, [r3, #12]
 800b796:	4b77      	ldr	r3, [pc, #476]	@ (800b974 <tcp_process+0x7c8>)
 800b798:	2201      	movs	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	220a      	movs	r2, #10
 800b7a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b7a2:	4b75      	ldr	r3, [pc, #468]	@ (800b978 <tcp_process+0x7cc>)
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60da      	str	r2, [r3, #12]
 800b7aa:	4a73      	ldr	r2, [pc, #460]	@ (800b978 <tcp_process+0x7cc>)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	f003 f96e 	bl	800ea90 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b7b4:	e0d2      	b.n	800b95c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ba:	f043 0302 	orr.w	r3, r3, #2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2208      	movs	r2, #8
 800b7c8:	751a      	strb	r2, [r3, #20]
      break;
 800b7ca:	e0c7      	b.n	800b95c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7cc:	4b6b      	ldr	r3, [pc, #428]	@ (800b97c <tcp_process+0x7d0>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	f003 0310 	and.w	r3, r3, #16
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80c1 	beq.w	800b95c <tcp_process+0x7b0>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7de:	4b68      	ldr	r3, [pc, #416]	@ (800b980 <tcp_process+0x7d4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	f040 80ba 	bne.w	800b95c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 80b5 	bne.w	800b95c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2206      	movs	r2, #6
 800b7f6:	751a      	strb	r2, [r3, #20]
      break;
 800b7f8:	e0b0      	b.n	800b95c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f9ca 	bl	800bb94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b800:	4b60      	ldr	r3, [pc, #384]	@ (800b984 <tcp_process+0x7d8>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 0320 	and.w	r3, r3, #32
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80a9 	beq.w	800b960 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	8b5b      	ldrh	r3, [r3, #26]
 800b812:	f043 0302 	orr.w	r3, r3, #2
 800b816:	b29a      	uxth	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7fe fd25 	bl	800a26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b822:	4b59      	ldr	r3, [pc, #356]	@ (800b988 <tcp_process+0x7dc>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d105      	bne.n	800b838 <tcp_process+0x68c>
 800b82c:	4b56      	ldr	r3, [pc, #344]	@ (800b988 <tcp_process+0x7dc>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	4a55      	ldr	r2, [pc, #340]	@ (800b988 <tcp_process+0x7dc>)
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	e013      	b.n	800b860 <tcp_process+0x6b4>
 800b838:	4b53      	ldr	r3, [pc, #332]	@ (800b988 <tcp_process+0x7dc>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	e00c      	b.n	800b85a <tcp_process+0x6ae>
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d104      	bne.n	800b854 <tcp_process+0x6a8>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	60da      	str	r2, [r3, #12]
 800b852:	e005      	b.n	800b860 <tcp_process+0x6b4>
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1ef      	bne.n	800b840 <tcp_process+0x694>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	60da      	str	r2, [r3, #12]
 800b866:	4b43      	ldr	r3, [pc, #268]	@ (800b974 <tcp_process+0x7c8>)
 800b868:	2201      	movs	r2, #1
 800b86a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	220a      	movs	r2, #10
 800b870:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b872:	4b41      	ldr	r3, [pc, #260]	@ (800b978 <tcp_process+0x7cc>)
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	60da      	str	r2, [r3, #12]
 800b87a:	4a3f      	ldr	r2, [pc, #252]	@ (800b978 <tcp_process+0x7cc>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	f003 f906 	bl	800ea90 <tcp_timer_needed>
      }
      break;
 800b884:	e06c      	b.n	800b960 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f984 	bl	800bb94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b88c:	4b3b      	ldr	r3, [pc, #236]	@ (800b97c <tcp_process+0x7d0>)
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	f003 0310 	and.w	r3, r3, #16
 800b894:	2b00      	cmp	r3, #0
 800b896:	d065      	beq.n	800b964 <tcp_process+0x7b8>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b89c:	4b38      	ldr	r3, [pc, #224]	@ (800b980 <tcp_process+0x7d4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d15f      	bne.n	800b964 <tcp_process+0x7b8>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d15b      	bne.n	800b964 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7fe fcdd 	bl	800a26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b8b2:	4b35      	ldr	r3, [pc, #212]	@ (800b988 <tcp_process+0x7dc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d105      	bne.n	800b8c8 <tcp_process+0x71c>
 800b8bc:	4b32      	ldr	r3, [pc, #200]	@ (800b988 <tcp_process+0x7dc>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	4a31      	ldr	r2, [pc, #196]	@ (800b988 <tcp_process+0x7dc>)
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e013      	b.n	800b8f0 <tcp_process+0x744>
 800b8c8:	4b2f      	ldr	r3, [pc, #188]	@ (800b988 <tcp_process+0x7dc>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]
 800b8ce:	e00c      	b.n	800b8ea <tcp_process+0x73e>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d104      	bne.n	800b8e4 <tcp_process+0x738>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	60da      	str	r2, [r3, #12]
 800b8e2:	e005      	b.n	800b8f0 <tcp_process+0x744>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1ef      	bne.n	800b8d0 <tcp_process+0x724>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	60da      	str	r2, [r3, #12]
 800b8f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b974 <tcp_process+0x7c8>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	220a      	movs	r2, #10
 800b900:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b902:	4b1d      	ldr	r3, [pc, #116]	@ (800b978 <tcp_process+0x7cc>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60da      	str	r2, [r3, #12]
 800b90a:	4a1b      	ldr	r2, [pc, #108]	@ (800b978 <tcp_process+0x7cc>)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	f003 f8be 	bl	800ea90 <tcp_timer_needed>
      }
      break;
 800b914:	e026      	b.n	800b964 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f93c 	bl	800bb94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b91c:	4b17      	ldr	r3, [pc, #92]	@ (800b97c <tcp_process+0x7d0>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	f003 0310 	and.w	r3, r3, #16
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01f      	beq.n	800b968 <tcp_process+0x7bc>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b92c:	4b14      	ldr	r3, [pc, #80]	@ (800b980 <tcp_process+0x7d4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d119      	bne.n	800b968 <tcp_process+0x7bc>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d115      	bne.n	800b968 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b93c:	4b11      	ldr	r3, [pc, #68]	@ (800b984 <tcp_process+0x7d8>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f043 0310 	orr.w	r3, r3, #16
 800b944:	b2da      	uxtb	r2, r3
 800b946:	4b0f      	ldr	r3, [pc, #60]	@ (800b984 <tcp_process+0x7d8>)
 800b948:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b94a:	e00d      	b.n	800b968 <tcp_process+0x7bc>
    default:
      break;
 800b94c:	bf00      	nop
 800b94e:	e00c      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b950:	bf00      	nop
 800b952:	e00a      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b954:	bf00      	nop
 800b956:	e008      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b958:	bf00      	nop
 800b95a:	e006      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b95c:	bf00      	nop
 800b95e:	e004      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b960:	bf00      	nop
 800b962:	e002      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b964:	bf00      	nop
 800b966:	e000      	b.n	800b96a <tcp_process+0x7be>
      break;
 800b968:	bf00      	nop
  }
  return ERR_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3724      	adds	r7, #36	@ 0x24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}
 800b974:	20004344 	.word	0x20004344
 800b978:	20004340 	.word	0x20004340
 800b97c:	20004374 	.word	0x20004374
 800b980:	2000436c 	.word	0x2000436c
 800b984:	20004375 	.word	0x20004375
 800b988:	2000433c 	.word	0x2000433c

0800b98c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d106      	bne.n	800b9aa <tcp_oos_insert_segment+0x1e>
 800b99c:	4b3b      	ldr	r3, [pc, #236]	@ (800ba8c <tcp_oos_insert_segment+0x100>)
 800b99e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b9a2:	493b      	ldr	r1, [pc, #236]	@ (800ba90 <tcp_oos_insert_segment+0x104>)
 800b9a4:	483b      	ldr	r0, [pc, #236]	@ (800ba94 <tcp_oos_insert_segment+0x108>)
 800b9a6:	f008 fa7b 	bl	8013ea0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	899b      	ldrh	r3, [r3, #12]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fa fc62 	bl	800627c <lwip_htons>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d028      	beq.n	800ba16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b9c4:	6838      	ldr	r0, [r7, #0]
 800b9c6:	f7fe f969 	bl	8009c9c <tcp_segs_free>
    next = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	e056      	b.n	800ba7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	899b      	ldrh	r3, [r3, #12]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fa fc4f 	bl	800627c <lwip_htons>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00d      	beq.n	800ba06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	b29c      	uxth	r4, r3
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	f7fa fc42 	bl	800627c <lwip_htons>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	4322      	orrs	r2, r4
 800ba02:	b292      	uxth	r2, r2
 800ba04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7fe f958 	bl	8009cc6 <tcp_seg_free>
    while (next &&
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00e      	beq.n	800ba3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	891b      	ldrh	r3, [r3, #8]
 800ba20:	461a      	mov	r2, r3
 800ba22:	4b1d      	ldr	r3, [pc, #116]	@ (800ba98 <tcp_oos_insert_segment+0x10c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	441a      	add	r2, r3
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	8909      	ldrh	r1, [r1, #8]
 800ba32:	440b      	add	r3, r1
 800ba34:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	daca      	bge.n	800b9d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01e      	beq.n	800ba7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	891b      	ldrh	r3, [r3, #8]
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b14      	ldr	r3, [pc, #80]	@ (800ba98 <tcp_oos_insert_segment+0x10c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	441a      	add	r2, r3
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd12      	ble.n	800ba7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	4b0d      	ldr	r3, [pc, #52]	@ (800ba98 <tcp_oos_insert_segment+0x10c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	891b      	ldrh	r3, [r3, #8]
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7fc fa05 	bl	8007e88 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd90      	pop	{r4, r7, pc}
 800ba8c:	08015ff8 	.word	0x08015ff8
 800ba90:	080162b8 	.word	0x080162b8
 800ba94:	08016044 	.word	0x08016044
 800ba98:	20004368 	.word	0x20004368

0800ba9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ba9c:	b5b0      	push	{r4, r5, r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800baaa:	e03e      	b.n	800bb2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	f7fc fbf2 	bl	80082a4 <pbuf_clen>
 800bac0:	4603      	mov	r3, r0
 800bac2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800baca:	8a7a      	ldrh	r2, [r7, #18]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d906      	bls.n	800bade <tcp_free_acked_segments+0x42>
 800bad0:	4b2a      	ldr	r3, [pc, #168]	@ (800bb7c <tcp_free_acked_segments+0xe0>)
 800bad2:	f240 4257 	movw	r2, #1111	@ 0x457
 800bad6:	492a      	ldr	r1, [pc, #168]	@ (800bb80 <tcp_free_acked_segments+0xe4>)
 800bad8:	482a      	ldr	r0, [pc, #168]	@ (800bb84 <tcp_free_acked_segments+0xe8>)
 800bada:	f008 f9e1 	bl	8013ea0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bae4:	8a7b      	ldrh	r3, [r7, #18]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	891a      	ldrh	r2, [r3, #8]
 800baf4:	4b24      	ldr	r3, [pc, #144]	@ (800bb88 <tcp_free_acked_segments+0xec>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	4413      	add	r3, r2
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	4b22      	ldr	r3, [pc, #136]	@ (800bb88 <tcp_free_acked_segments+0xec>)
 800bafe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bb00:	6978      	ldr	r0, [r7, #20]
 800bb02:	f7fe f8e0 	bl	8009cc6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00c      	beq.n	800bb2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d109      	bne.n	800bb2a <tcp_free_acked_segments+0x8e>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <tcp_free_acked_segments+0x8e>
 800bb1c:	4b17      	ldr	r3, [pc, #92]	@ (800bb7c <tcp_free_acked_segments+0xe0>)
 800bb1e:	f240 4261 	movw	r2, #1121	@ 0x461
 800bb22:	491a      	ldr	r1, [pc, #104]	@ (800bb8c <tcp_free_acked_segments+0xf0>)
 800bb24:	4817      	ldr	r0, [pc, #92]	@ (800bb84 <tcp_free_acked_segments+0xe8>)
 800bb26:	f008 f9bb 	bl	8013ea0 <iprintf>
  while (seg_list != NULL &&
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d020      	beq.n	800bb72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fa fbb5 	bl	80062a6 <lwip_htonl>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	891b      	ldrh	r3, [r3, #8]
 800bb42:	461d      	mov	r5, r3
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	899b      	ldrh	r3, [r3, #12]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fa fb95 	bl	800627c <lwip_htons>
 800bb52:	4603      	mov	r3, r0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0303 	and.w	r3, r3, #3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <tcp_free_acked_segments+0xc6>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <tcp_free_acked_segments+0xc8>
 800bb62:	2300      	movs	r3, #0
 800bb64:	442b      	add	r3, r5
 800bb66:	18e2      	adds	r2, r4, r3
 800bb68:	4b09      	ldr	r3, [pc, #36]	@ (800bb90 <tcp_free_acked_segments+0xf4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	dd9c      	ble.n	800baac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bb72:	68bb      	ldr	r3, [r7, #8]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb7c:	08015ff8 	.word	0x08015ff8
 800bb80:	080162e0 	.word	0x080162e0
 800bb84:	08016044 	.word	0x08016044
 800bb88:	20004370 	.word	0x20004370
 800bb8c:	08016308 	.word	0x08016308
 800bb90:	2000436c 	.word	0x2000436c

0800bb94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bb94:	b5b0      	push	{r4, r5, r7, lr}
 800bb96:	b094      	sub	sp, #80	@ 0x50
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <tcp_receive+0x20>
 800bba6:	4b91      	ldr	r3, [pc, #580]	@ (800bdec <tcp_receive+0x258>)
 800bba8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800bbac:	4990      	ldr	r1, [pc, #576]	@ (800bdf0 <tcp_receive+0x25c>)
 800bbae:	4891      	ldr	r0, [pc, #580]	@ (800bdf4 <tcp_receive+0x260>)
 800bbb0:	f008 f976 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d806      	bhi.n	800bbca <tcp_receive+0x36>
 800bbbc:	4b8b      	ldr	r3, [pc, #556]	@ (800bdec <tcp_receive+0x258>)
 800bbbe:	f240 427c 	movw	r2, #1148	@ 0x47c
 800bbc2:	498d      	ldr	r1, [pc, #564]	@ (800bdf8 <tcp_receive+0x264>)
 800bbc4:	488b      	ldr	r0, [pc, #556]	@ (800bdf4 <tcp_receive+0x260>)
 800bbc6:	f008 f96b 	bl	8013ea0 <iprintf>

  if (flags & TCP_ACK) {
 800bbca:	4b8c      	ldr	r3, [pc, #560]	@ (800bdfc <tcp_receive+0x268>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 8264 	beq.w	800c0a0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbde:	461a      	mov	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbe4:	4413      	add	r3, r2
 800bbe6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbec:	4b84      	ldr	r3, [pc, #528]	@ (800be00 <tcp_receive+0x26c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db1b      	blt.n	800bc2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbfa:	4b81      	ldr	r3, [pc, #516]	@ (800be00 <tcp_receive+0x26c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d106      	bne.n	800bc10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc06:	4b7f      	ldr	r3, [pc, #508]	@ (800be04 <tcp_receive+0x270>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	db0e      	blt.n	800bc2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc14:	4b7b      	ldr	r3, [pc, #492]	@ (800be04 <tcp_receive+0x270>)
 800bc16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d125      	bne.n	800bc68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc1c:	4b7a      	ldr	r3, [pc, #488]	@ (800be08 <tcp_receive+0x274>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	89db      	ldrh	r3, [r3, #14]
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d91c      	bls.n	800bc68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc2e:	4b76      	ldr	r3, [pc, #472]	@ (800be08 <tcp_receive+0x274>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	89db      	ldrh	r3, [r3, #14]
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d205      	bcs.n	800bc58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bc58:	4b69      	ldr	r3, [pc, #420]	@ (800be00 <tcp_receive+0x26c>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bc60:	4b68      	ldr	r3, [pc, #416]	@ (800be04 <tcp_receive+0x270>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bc68:	4b66      	ldr	r3, [pc, #408]	@ (800be04 <tcp_receive+0x270>)
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dc58      	bgt.n	800bd28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bc76:	4b65      	ldr	r3, [pc, #404]	@ (800be0c <tcp_receive+0x278>)
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d14b      	bne.n	800bd16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bc88:	4413      	add	r3, r2
 800bc8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d142      	bne.n	800bd16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	db3d      	blt.n	800bd16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc9e:	4b59      	ldr	r3, [pc, #356]	@ (800be04 <tcp_receive+0x270>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d137      	bne.n	800bd16 <tcp_receive+0x182>
              found_dupack = 1;
 800bca6:	2301      	movs	r3, #1
 800bca8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcb0:	2bff      	cmp	r3, #255	@ 0xff
 800bcb2:	d007      	beq.n	800bcc4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcba:	3301      	adds	r3, #1
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d91b      	bls.n	800bd06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcd8:	4413      	add	r3, r2
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d30a      	bcc.n	800bcfc <tcp_receive+0x168>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcf0:	4413      	add	r3, r2
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bcfa:	e004      	b.n	800bd06 <tcp_receive+0x172>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d902      	bls.n	800bd16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f002 fb51 	bl	800e3b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bd16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f040 8161 	bne.w	800bfe0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd26:	e15b      	b.n	800bfe0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd28:	4b36      	ldr	r3, [pc, #216]	@ (800be04 <tcp_receive+0x270>)
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f2c0 814e 	blt.w	800bfd6 <tcp_receive+0x442>
 800bd3a:	4b32      	ldr	r3, [pc, #200]	@ (800be04 <tcp_receive+0x270>)
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f300 8146 	bgt.w	800bfd6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	8b5b      	ldrh	r3, [r3, #26]
 800bd4e:	f003 0304 	and.w	r3, r3, #4
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d010      	beq.n	800bd78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8b5b      	ldrh	r3, [r3, #26]
 800bd5a:	f023 0304 	bic.w	r3, r3, #4
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bd86:	10db      	asrs	r3, r3, #3
 800bd88:	b21b      	sxth	r3, r3
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	4413      	add	r3, r2
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	b21a      	sxth	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bda0:	4b18      	ldr	r3, [pc, #96]	@ (800be04 <tcp_receive+0x270>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800bdb8:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <tcp_receive+0x270>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7d1b      	ldrb	r3, [r3, #20]
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	f240 8097 	bls.w	800bef8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d245      	bcs.n	800be66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8b5b      	ldrh	r3, [r3, #26]
 800bdde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d014      	beq.n	800be10 <tcp_receive+0x27c>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e013      	b.n	800be12 <tcp_receive+0x27e>
 800bdea:	bf00      	nop
 800bdec:	08015ff8 	.word	0x08015ff8
 800bdf0:	08016328 	.word	0x08016328
 800bdf4:	08016044 	.word	0x08016044
 800bdf8:	08016344 	.word	0x08016344
 800bdfc:	20004374 	.word	0x20004374
 800be00:	20004368 	.word	0x20004368
 800be04:	2000436c 	.word	0x2000436c
 800be08:	20004358 	.word	0x20004358
 800be0c:	20004372 	.word	0x20004372
 800be10:	2302      	movs	r3, #2
 800be12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be16:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be20:	fb12 f303 	smulbb	r3, r2, r3
 800be24:	b29b      	uxth	r3, r3
 800be26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be28:	4293      	cmp	r3, r2
 800be2a:	bf28      	it	cs
 800be2c:	4613      	movcs	r3, r2
 800be2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be38:	4413      	add	r3, r2
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be42:	429a      	cmp	r2, r3
 800be44:	d309      	bcc.n	800be5a <tcp_receive+0x2c6>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be4e:	4413      	add	r3, r2
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be58:	e04e      	b.n	800bef8 <tcp_receive+0x364>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be64:	e048      	b.n	800bef8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be6e:	4413      	add	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be78:	429a      	cmp	r2, r3
 800be7a:	d309      	bcc.n	800be90 <tcp_receive+0x2fc>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be84:	4413      	add	r3, r2
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be8e:	e004      	b.n	800be9a <tcp_receive+0x306>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d326      	bcc.n	800bef8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800beca:	4413      	add	r3, r2
 800becc:	b29a      	uxth	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d30a      	bcc.n	800beee <tcp_receive+0x35a>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bee2:	4413      	add	r3, r2
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800beec:	e004      	b.n	800bef8 <tcp_receive+0x364>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bef4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf00:	4a98      	ldr	r2, [pc, #608]	@ (800c164 <tcp_receive+0x5d0>)
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fdca 	bl	800ba9c <tcp_free_acked_segments>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf16:	4a94      	ldr	r2, [pc, #592]	@ (800c168 <tcp_receive+0x5d4>)
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff fdbf 	bl	800ba9c <tcp_free_acked_segments>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d104      	bne.n	800bf36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf32:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bf34:	e002      	b.n	800bf3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d103      	bne.n	800bf52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bf58:	4b84      	ldr	r3, [pc, #528]	@ (800c16c <tcp_receive+0x5d8>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8b5b      	ldrh	r3, [r3, #26]
 800bf6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d035      	beq.n	800bfde <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d118      	bne.n	800bfac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00c      	beq.n	800bf9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fa f989 	bl	80062a6 <lwip_htonl>
 800bf94:	4603      	mov	r3, r0
 800bf96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	dc20      	bgt.n	800bfde <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	8b5b      	ldrh	r3, [r3, #26]
 800bfa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfaa:	e018      	b.n	800bfde <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fa f974 	bl	80062a6 <lwip_htonl>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	1ae3      	subs	r3, r4, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc0b      	bgt.n	800bfde <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	8b5b      	ldrh	r3, [r3, #26]
 800bfca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfd4:	e003      	b.n	800bfde <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f002 fbea 	bl	800e7b0 <tcp_send_empty_ack>
 800bfdc:	e000      	b.n	800bfe0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfde:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d05b      	beq.n	800c0a0 <tcp_receive+0x50c>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfec:	4b60      	ldr	r3, [pc, #384]	@ (800c170 <tcp_receive+0x5dc>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da54      	bge.n	800c0a0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bff6:	4b5f      	ldr	r3, [pc, #380]	@ (800c174 <tcp_receive+0x5e0>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c000:	b29b      	uxth	r3, r3
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	b29b      	uxth	r3, r3
 800c006:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c00a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c014:	10db      	asrs	r3, r3, #3
 800c016:	b21b      	sxth	r3, r3
 800c018:	b29b      	uxth	r3, r3
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c028:	b29a      	uxth	r2, r3
 800c02a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c02e:	4413      	add	r3, r2
 800c030:	b29b      	uxth	r3, r3
 800c032:	b21a      	sxth	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c038:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	da05      	bge.n	800c04c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c044:	425b      	negs	r3, r3
 800c046:	b29b      	uxth	r3, r3
 800c048:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c04c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c056:	109b      	asrs	r3, r3, #2
 800c058:	b21b      	sxth	r3, r3
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c070:	4413      	add	r3, r2
 800c072:	b29b      	uxth	r3, r3
 800c074:	b21a      	sxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c080:	10db      	asrs	r3, r3, #3
 800c082:	b21b      	sxth	r3, r3
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	4413      	add	r3, r2
 800c090:	b29b      	uxth	r3, r3
 800c092:	b21a      	sxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c0a0:	4b35      	ldr	r3, [pc, #212]	@ (800c178 <tcp_receive+0x5e4>)
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 84df 	beq.w	800ca68 <tcp_receive+0xed4>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7d1b      	ldrb	r3, [r3, #20]
 800c0ae:	2b06      	cmp	r3, #6
 800c0b0:	f200 84da 	bhi.w	800ca68 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0b8:	4b30      	ldr	r3, [pc, #192]	@ (800c17c <tcp_receive+0x5e8>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f2c0 808f 	blt.w	800c1e4 <tcp_receive+0x650>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c178 <tcp_receive+0x5e4>)
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4b2a      	ldr	r3, [pc, #168]	@ (800c17c <tcp_receive+0x5e8>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	440b      	add	r3, r1
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	3301      	adds	r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f300 8082 	bgt.w	800c1e4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c0e0:	4b27      	ldr	r3, [pc, #156]	@ (800c180 <tcp_receive+0x5ec>)
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ea:	4b24      	ldr	r3, [pc, #144]	@ (800c17c <tcp_receive+0x5e8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c0f2:	4b23      	ldr	r3, [pc, #140]	@ (800c180 <tcp_receive+0x5ec>)
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <tcp_receive+0x574>
 800c0fa:	4b22      	ldr	r3, [pc, #136]	@ (800c184 <tcp_receive+0x5f0>)
 800c0fc:	f240 5294 	movw	r2, #1428	@ 0x594
 800c100:	4921      	ldr	r1, [pc, #132]	@ (800c188 <tcp_receive+0x5f4>)
 800c102:	4822      	ldr	r0, [pc, #136]	@ (800c18c <tcp_receive+0x5f8>)
 800c104:	f007 fecc 	bl	8013ea0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c10e:	4293      	cmp	r3, r2
 800c110:	d906      	bls.n	800c120 <tcp_receive+0x58c>
 800c112:	4b1c      	ldr	r3, [pc, #112]	@ (800c184 <tcp_receive+0x5f0>)
 800c114:	f240 5295 	movw	r2, #1429	@ 0x595
 800c118:	491d      	ldr	r1, [pc, #116]	@ (800c190 <tcp_receive+0x5fc>)
 800c11a:	481c      	ldr	r0, [pc, #112]	@ (800c18c <tcp_receive+0x5f8>)
 800c11c:	f007 fec0 	bl	8013ea0 <iprintf>
      off = (u16_t)off32;
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c126:	4b16      	ldr	r3, [pc, #88]	@ (800c180 <tcp_receive+0x5ec>)
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	891b      	ldrh	r3, [r3, #8]
 800c12c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c130:	429a      	cmp	r2, r3
 800c132:	d906      	bls.n	800c142 <tcp_receive+0x5ae>
 800c134:	4b13      	ldr	r3, [pc, #76]	@ (800c184 <tcp_receive+0x5f0>)
 800c136:	f240 5297 	movw	r2, #1431	@ 0x597
 800c13a:	4916      	ldr	r1, [pc, #88]	@ (800c194 <tcp_receive+0x600>)
 800c13c:	4813      	ldr	r0, [pc, #76]	@ (800c18c <tcp_receive+0x5f8>)
 800c13e:	f007 feaf 	bl	8013ea0 <iprintf>
      inseg.len -= off;
 800c142:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <tcp_receive+0x5ec>)
 800c144:	891a      	ldrh	r2, [r3, #8]
 800c146:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	4b0c      	ldr	r3, [pc, #48]	@ (800c180 <tcp_receive+0x5ec>)
 800c150:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c152:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <tcp_receive+0x5ec>)
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	891a      	ldrh	r2, [r3, #8]
 800c158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c160:	e02a      	b.n	800c1b8 <tcp_receive+0x624>
 800c162:	bf00      	nop
 800c164:	08016360 	.word	0x08016360
 800c168:	08016368 	.word	0x08016368
 800c16c:	20004370 	.word	0x20004370
 800c170:	2000436c 	.word	0x2000436c
 800c174:	20004330 	.word	0x20004330
 800c178:	20004372 	.word	0x20004372
 800c17c:	20004368 	.word	0x20004368
 800c180:	20004348 	.word	0x20004348
 800c184:	08015ff8 	.word	0x08015ff8
 800c188:	08016370 	.word	0x08016370
 800c18c:	08016044 	.word	0x08016044
 800c190:	08016380 	.word	0x08016380
 800c194:	08016390 	.word	0x08016390
        off -= p->len;
 800c198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c19a:	895b      	ldrh	r3, [r3, #10]
 800c19c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c1a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c1aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ba:	895b      	ldrh	r3, [r3, #10]
 800c1bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d8e9      	bhi.n	800c198 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c1c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c1cc:	f7fb ff5c 	bl	8008088 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d4:	4a90      	ldr	r2, [pc, #576]	@ (800c418 <tcp_receive+0x884>)
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	4b90      	ldr	r3, [pc, #576]	@ (800c41c <tcp_receive+0x888>)
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	4a8e      	ldr	r2, [pc, #568]	@ (800c418 <tcp_receive+0x884>)
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c1e2:	e00d      	b.n	800c200 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c1e4:	4b8c      	ldr	r3, [pc, #560]	@ (800c418 <tcp_receive+0x884>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da06      	bge.n	800c200 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	8b5b      	ldrh	r3, [r3, #26]
 800c1f6:	f043 0302 	orr.w	r3, r3, #2
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c200:	4b85      	ldr	r3, [pc, #532]	@ (800c418 <tcp_receive+0x884>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f2c0 8427 	blt.w	800ca5e <tcp_receive+0xeca>
 800c210:	4b81      	ldr	r3, [pc, #516]	@ (800c418 <tcp_receive+0x884>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c21c:	440b      	add	r3, r1
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	3301      	adds	r3, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	f300 841b 	bgt.w	800ca5e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c22c:	4b7a      	ldr	r3, [pc, #488]	@ (800c418 <tcp_receive+0x884>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	f040 8298 	bne.w	800c766 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c236:	4b79      	ldr	r3, [pc, #484]	@ (800c41c <tcp_receive+0x888>)
 800c238:	891c      	ldrh	r4, [r3, #8]
 800c23a:	4b78      	ldr	r3, [pc, #480]	@ (800c41c <tcp_receive+0x888>)
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	899b      	ldrh	r3, [r3, #12]
 800c240:	b29b      	uxth	r3, r3
 800c242:	4618      	mov	r0, r3
 800c244:	f7fa f81a 	bl	800627c <lwip_htons>
 800c248:	4603      	mov	r3, r0
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	f003 0303 	and.w	r3, r3, #3
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <tcp_receive+0x6c4>
 800c254:	2301      	movs	r3, #1
 800c256:	e000      	b.n	800c25a <tcp_receive+0x6c6>
 800c258:	2300      	movs	r3, #0
 800c25a:	4423      	add	r3, r4
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	4b70      	ldr	r3, [pc, #448]	@ (800c420 <tcp_receive+0x88c>)
 800c260:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c266:	4b6e      	ldr	r3, [pc, #440]	@ (800c420 <tcp_receive+0x88c>)
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d274      	bcs.n	800c358 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c26e:	4b6b      	ldr	r3, [pc, #428]	@ (800c41c <tcp_receive+0x888>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7fa f800 	bl	800627c <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01e      	beq.n	800c2c6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c288:	4b64      	ldr	r3, [pc, #400]	@ (800c41c <tcp_receive+0x888>)
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	899b      	ldrh	r3, [r3, #12]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	b21b      	sxth	r3, r3
 800c292:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c296:	b21c      	sxth	r4, r3
 800c298:	4b60      	ldr	r3, [pc, #384]	@ (800c41c <tcp_receive+0x888>)
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	899b      	ldrh	r3, [r3, #12]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f9 ffeb 	bl	800627c <lwip_htons>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f9 ffe3 	bl	800627c <lwip_htons>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	b21b      	sxth	r3, r3
 800c2ba:	4323      	orrs	r3, r4
 800c2bc:	b21a      	sxth	r2, r3
 800c2be:	4b57      	ldr	r3, [pc, #348]	@ (800c41c <tcp_receive+0x888>)
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	b292      	uxth	r2, r2
 800c2c4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c2ca:	4b54      	ldr	r3, [pc, #336]	@ (800c41c <tcp_receive+0x888>)
 800c2cc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c2ce:	4b53      	ldr	r3, [pc, #332]	@ (800c41c <tcp_receive+0x888>)
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	899b      	ldrh	r3, [r3, #12]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f9 ffd0 	bl	800627c <lwip_htons>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d005      	beq.n	800c2f4 <tcp_receive+0x760>
            inseg.len -= 1;
 800c2e8:	4b4c      	ldr	r3, [pc, #304]	@ (800c41c <tcp_receive+0x888>)
 800c2ea:	891b      	ldrh	r3, [r3, #8]
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c41c <tcp_receive+0x888>)
 800c2f2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c2f4:	4b49      	ldr	r3, [pc, #292]	@ (800c41c <tcp_receive+0x888>)
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a48      	ldr	r2, [pc, #288]	@ (800c41c <tcp_receive+0x888>)
 800c2fa:	8912      	ldrh	r2, [r2, #8]
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fb fdc2 	bl	8007e88 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c304:	4b45      	ldr	r3, [pc, #276]	@ (800c41c <tcp_receive+0x888>)
 800c306:	891c      	ldrh	r4, [r3, #8]
 800c308:	4b44      	ldr	r3, [pc, #272]	@ (800c41c <tcp_receive+0x888>)
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	4618      	mov	r0, r3
 800c312:	f7f9 ffb3 	bl	800627c <lwip_htons>
 800c316:	4603      	mov	r3, r0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <tcp_receive+0x792>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <tcp_receive+0x794>
 800c326:	2300      	movs	r3, #0
 800c328:	4423      	add	r3, r4
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	4b3c      	ldr	r3, [pc, #240]	@ (800c420 <tcp_receive+0x88c>)
 800c32e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c330:	4b3b      	ldr	r3, [pc, #236]	@ (800c420 <tcp_receive+0x88c>)
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	4b38      	ldr	r3, [pc, #224]	@ (800c418 <tcp_receive+0x884>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	441a      	add	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c344:	440b      	add	r3, r1
 800c346:	429a      	cmp	r2, r3
 800c348:	d006      	beq.n	800c358 <tcp_receive+0x7c4>
 800c34a:	4b36      	ldr	r3, [pc, #216]	@ (800c424 <tcp_receive+0x890>)
 800c34c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c350:	4935      	ldr	r1, [pc, #212]	@ (800c428 <tcp_receive+0x894>)
 800c352:	4836      	ldr	r0, [pc, #216]	@ (800c42c <tcp_receive+0x898>)
 800c354:	f007 fda4 	bl	8013ea0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 80e6 	beq.w	800c52e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c362:	4b2e      	ldr	r3, [pc, #184]	@ (800c41c <tcp_receive+0x888>)
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	899b      	ldrh	r3, [r3, #12]
 800c368:	b29b      	uxth	r3, r3
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7f9 ff86 	bl	800627c <lwip_htons>
 800c370:	4603      	mov	r3, r0
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d010      	beq.n	800c39e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c37c:	e00a      	b.n	800c394 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c382:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7fd fc99 	bl	8009cc6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f0      	bne.n	800c37e <tcp_receive+0x7ea>
 800c39c:	e0c7      	b.n	800c52e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c3a4:	e051      	b.n	800c44a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	899b      	ldrh	r3, [r3, #12]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f9 ff64 	bl	800627c <lwip_htons>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d03c      	beq.n	800c43a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c3c0:	4b16      	ldr	r3, [pc, #88]	@ (800c41c <tcp_receive+0x888>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	899b      	ldrh	r3, [r3, #12]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f9 ff57 	bl	800627c <lwip_htons>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d12f      	bne.n	800c43a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c3da:	4b10      	ldr	r3, [pc, #64]	@ (800c41c <tcp_receive+0x888>)
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	899b      	ldrh	r3, [r3, #12]
 800c3e0:	b29c      	uxth	r4, r3
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f7f9 ff4a 	bl	800627c <lwip_htons>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c41c <tcp_receive+0x888>)
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	4322      	orrs	r2, r4
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c3f6:	4b09      	ldr	r3, [pc, #36]	@ (800c41c <tcp_receive+0x888>)
 800c3f8:	891c      	ldrh	r4, [r3, #8]
 800c3fa:	4b08      	ldr	r3, [pc, #32]	@ (800c41c <tcp_receive+0x888>)
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	899b      	ldrh	r3, [r3, #12]
 800c400:	b29b      	uxth	r3, r3
 800c402:	4618      	mov	r0, r3
 800c404:	f7f9 ff3a 	bl	800627c <lwip_htons>
 800c408:	4603      	mov	r3, r0
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 0303 	and.w	r3, r3, #3
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00d      	beq.n	800c430 <tcp_receive+0x89c>
 800c414:	2301      	movs	r3, #1
 800c416:	e00c      	b.n	800c432 <tcp_receive+0x89e>
 800c418:	20004368 	.word	0x20004368
 800c41c:	20004348 	.word	0x20004348
 800c420:	20004372 	.word	0x20004372
 800c424:	08015ff8 	.word	0x08015ff8
 800c428:	080163a0 	.word	0x080163a0
 800c42c:	08016044 	.word	0x08016044
 800c430:	2300      	movs	r3, #0
 800c432:	4423      	add	r3, r4
 800c434:	b29a      	uxth	r2, r3
 800c436:	4b98      	ldr	r3, [pc, #608]	@ (800c698 <tcp_receive+0xb04>)
 800c438:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c444:	6938      	ldr	r0, [r7, #16]
 800c446:	f7fd fc3e 	bl	8009cc6 <tcp_seg_free>
            while (next &&
 800c44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00e      	beq.n	800c46e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c450:	4b91      	ldr	r3, [pc, #580]	@ (800c698 <tcp_receive+0xb04>)
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	461a      	mov	r2, r3
 800c456:	4b91      	ldr	r3, [pc, #580]	@ (800c69c <tcp_receive+0xb08>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	441a      	add	r2, r3
 800c45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c464:	8909      	ldrh	r1, [r1, #8]
 800c466:	440b      	add	r3, r1
 800c468:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	da9b      	bge.n	800c3a6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d059      	beq.n	800c528 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c474:	4b88      	ldr	r3, [pc, #544]	@ (800c698 <tcp_receive+0xb04>)
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	4b88      	ldr	r3, [pc, #544]	@ (800c69c <tcp_receive+0xb08>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	441a      	add	r2, r3
 800c480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd4d      	ble.n	800c528 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	b29a      	uxth	r2, r3
 800c494:	4b81      	ldr	r3, [pc, #516]	@ (800c69c <tcp_receive+0xb08>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	4b80      	ldr	r3, [pc, #512]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c4a2:	4b7f      	ldr	r3, [pc, #508]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	899b      	ldrh	r3, [r3, #12]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f9 fee6 	bl	800627c <lwip_htons>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0302 	and.w	r3, r3, #2
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <tcp_receive+0x934>
                inseg.len -= 1;
 800c4bc:	4b78      	ldr	r3, [pc, #480]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4be:	891b      	ldrh	r3, [r3, #8]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	4b76      	ldr	r3, [pc, #472]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c4c8:	4b75      	ldr	r3, [pc, #468]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	4a74      	ldr	r2, [pc, #464]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4ce:	8912      	ldrh	r2, [r2, #8]
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fb fcd8 	bl	8007e88 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c4d8:	4b71      	ldr	r3, [pc, #452]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4da:	891c      	ldrh	r4, [r3, #8]
 800c4dc:	4b70      	ldr	r3, [pc, #448]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	899b      	ldrh	r3, [r3, #12]
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7f9 fec9 	bl	800627c <lwip_htons>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d001      	beq.n	800c4fa <tcp_receive+0x966>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <tcp_receive+0x968>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4423      	add	r3, r4
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	4b65      	ldr	r3, [pc, #404]	@ (800c698 <tcp_receive+0xb04>)
 800c502:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c504:	4b64      	ldr	r3, [pc, #400]	@ (800c698 <tcp_receive+0xb04>)
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	4b64      	ldr	r3, [pc, #400]	@ (800c69c <tcp_receive+0xb08>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	441a      	add	r2, r3
 800c510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	429a      	cmp	r2, r3
 800c518:	d006      	beq.n	800c528 <tcp_receive+0x994>
 800c51a:	4b62      	ldr	r3, [pc, #392]	@ (800c6a4 <tcp_receive+0xb10>)
 800c51c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c520:	4961      	ldr	r1, [pc, #388]	@ (800c6a8 <tcp_receive+0xb14>)
 800c522:	4862      	ldr	r0, [pc, #392]	@ (800c6ac <tcp_receive+0xb18>)
 800c524:	f007 fcbc 	bl	8013ea0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c52c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c52e:	4b5a      	ldr	r3, [pc, #360]	@ (800c698 <tcp_receive+0xb04>)
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	4b59      	ldr	r3, [pc, #356]	@ (800c69c <tcp_receive+0xb08>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	441a      	add	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c542:	4b55      	ldr	r3, [pc, #340]	@ (800c698 <tcp_receive+0xb04>)
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d206      	bcs.n	800c558 <tcp_receive+0x9c4>
 800c54a:	4b56      	ldr	r3, [pc, #344]	@ (800c6a4 <tcp_receive+0xb10>)
 800c54c:	f240 6207 	movw	r2, #1543	@ 0x607
 800c550:	4957      	ldr	r1, [pc, #348]	@ (800c6b0 <tcp_receive+0xb1c>)
 800c552:	4856      	ldr	r0, [pc, #344]	@ (800c6ac <tcp_receive+0xb18>)
 800c554:	f007 fca4 	bl	8013ea0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c55c:	4b4e      	ldr	r3, [pc, #312]	@ (800c698 <tcp_receive+0xb04>)
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7fc fe85 	bl	8009278 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c56e:	4b4c      	ldr	r3, [pc, #304]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d006      	beq.n	800c586 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c578:	4b49      	ldr	r3, [pc, #292]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	4a4d      	ldr	r2, [pc, #308]	@ (800c6b4 <tcp_receive+0xb20>)
 800c57e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c580:	4b47      	ldr	r3, [pc, #284]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c586:	4b46      	ldr	r3, [pc, #280]	@ (800c6a0 <tcp_receive+0xb0c>)
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	899b      	ldrh	r3, [r3, #12]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f9 fe74 	bl	800627c <lwip_htons>
 800c594:	4603      	mov	r3, r0
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80b8 	beq.w	800c712 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c5a2:	4b45      	ldr	r3, [pc, #276]	@ (800c6b8 <tcp_receive+0xb24>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	f043 0320 	orr.w	r3, r3, #32
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	4b42      	ldr	r3, [pc, #264]	@ (800c6b8 <tcp_receive+0xb24>)
 800c5ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c5b0:	e0af      	b.n	800c712 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4a36      	ldr	r2, [pc, #216]	@ (800c69c <tcp_receive+0xb08>)
 800c5c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	891b      	ldrh	r3, [r3, #8]
 800c5c8:	461c      	mov	r4, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	899b      	ldrh	r3, [r3, #12]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f9 fe52 	bl	800627c <lwip_htons>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <tcp_receive+0xa54>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e000      	b.n	800c5ea <tcp_receive+0xa56>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	191a      	adds	r2, r3, r4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f0:	441a      	add	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	891b      	ldrh	r3, [r3, #8]
 800c600:	461d      	mov	r5, r3
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	899b      	ldrh	r3, [r3, #12]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7f9 fe36 	bl	800627c <lwip_htons>
 800c610:	4603      	mov	r3, r0
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 0303 	and.w	r3, r3, #3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <tcp_receive+0xa8c>
 800c61c:	2301      	movs	r3, #1
 800c61e:	e000      	b.n	800c622 <tcp_receive+0xa8e>
 800c620:	2300      	movs	r3, #0
 800c622:	442b      	add	r3, r5
 800c624:	429c      	cmp	r4, r3
 800c626:	d206      	bcs.n	800c636 <tcp_receive+0xaa2>
 800c628:	4b1e      	ldr	r3, [pc, #120]	@ (800c6a4 <tcp_receive+0xb10>)
 800c62a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c62e:	4923      	ldr	r1, [pc, #140]	@ (800c6bc <tcp_receive+0xb28>)
 800c630:	481e      	ldr	r0, [pc, #120]	@ (800c6ac <tcp_receive+0xb18>)
 800c632:	f007 fc35 	bl	8013ea0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	891b      	ldrh	r3, [r3, #8]
 800c63a:	461c      	mov	r4, r3
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	899b      	ldrh	r3, [r3, #12]
 800c642:	b29b      	uxth	r3, r3
 800c644:	4618      	mov	r0, r3
 800c646:	f7f9 fe19 	bl	800627c <lwip_htons>
 800c64a:	4603      	mov	r3, r0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	f003 0303 	and.w	r3, r3, #3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <tcp_receive+0xac6>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <tcp_receive+0xac8>
 800c65a:	2300      	movs	r3, #0
 800c65c:	1919      	adds	r1, r3, r4
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c662:	b28b      	uxth	r3, r1
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7fc fe03 	bl	8009278 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	891b      	ldrh	r3, [r3, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d028      	beq.n	800c6ce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c67c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b4 <tcp_receive+0xb20>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01d      	beq.n	800c6c0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c684:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b4 <tcp_receive+0xb20>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	4619      	mov	r1, r3
 800c68e:	4610      	mov	r0, r2
 800c690:	f7fb fe42 	bl	8008318 <pbuf_cat>
 800c694:	e018      	b.n	800c6c8 <tcp_receive+0xb34>
 800c696:	bf00      	nop
 800c698:	20004372 	.word	0x20004372
 800c69c:	20004368 	.word	0x20004368
 800c6a0:	20004348 	.word	0x20004348
 800c6a4:	08015ff8 	.word	0x08015ff8
 800c6a8:	080163d8 	.word	0x080163d8
 800c6ac:	08016044 	.word	0x08016044
 800c6b0:	08016414 	.word	0x08016414
 800c6b4:	20004378 	.word	0x20004378
 800c6b8:	20004375 	.word	0x20004375
 800c6bc:	08016434 	.word	0x08016434
            } else {
              recv_data = cseg->p;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	4a70      	ldr	r2, [pc, #448]	@ (800c888 <tcp_receive+0xcf4>)
 800c6c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	899b      	ldrh	r3, [r3, #12]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f9 fdd0 	bl	800627c <lwip_htons>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00d      	beq.n	800c704 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c6e8:	4b68      	ldr	r3, [pc, #416]	@ (800c88c <tcp_receive+0xcf8>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	f043 0320 	orr.w	r3, r3, #32
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	4b66      	ldr	r3, [pc, #408]	@ (800c88c <tcp_receive+0xcf8>)
 800c6f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	7d1b      	ldrb	r3, [r3, #20]
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d102      	bne.n	800c704 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2207      	movs	r2, #7
 800c702:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c70c:	68b8      	ldr	r0, [r7, #8]
 800c70e:	f7fd fada 	bl	8009cc6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c716:	2b00      	cmp	r3, #0
 800c718:	d008      	beq.n	800c72c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c726:	429a      	cmp	r2, r3
 800c728:	f43f af43 	beq.w	800c5b2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	8b5b      	ldrh	r3, [r3, #26]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00e      	beq.n	800c756 <tcp_receive+0xbc2>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8b5b      	ldrh	r3, [r3, #26]
 800c73c:	f023 0301 	bic.w	r3, r3, #1
 800c740:	b29a      	uxth	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	835a      	strh	r2, [r3, #26]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	8b5b      	ldrh	r3, [r3, #26]
 800c74a:	f043 0302 	orr.w	r3, r3, #2
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c754:	e187      	b.n	800ca66 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	8b5b      	ldrh	r3, [r3, #26]
 800c75a:	f043 0301 	orr.w	r3, r3, #1
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c764:	e17f      	b.n	800ca66 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c76e:	4848      	ldr	r0, [pc, #288]	@ (800c890 <tcp_receive+0xcfc>)
 800c770:	f7fd fae0 	bl	8009d34 <tcp_seg_copy>
 800c774:	4602      	mov	r2, r0
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	675a      	str	r2, [r3, #116]	@ 0x74
 800c77a:	e16c      	b.n	800ca56 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c784:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c786:	e156      	b.n	800ca36 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	4b41      	ldr	r3, [pc, #260]	@ (800c894 <tcp_receive+0xd00>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	429a      	cmp	r2, r3
 800c794:	d11d      	bne.n	800c7d2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c796:	4b3e      	ldr	r3, [pc, #248]	@ (800c890 <tcp_receive+0xcfc>)
 800c798:	891a      	ldrh	r2, [r3, #8]
 800c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79c:	891b      	ldrh	r3, [r3, #8]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	f240 814e 	bls.w	800ca40 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7a4:	483a      	ldr	r0, [pc, #232]	@ (800c890 <tcp_receive+0xcfc>)
 800c7a6:	f7fd fac5 	bl	8009d34 <tcp_seg_copy>
 800c7aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8148 	beq.w	800ca44 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e002      	b.n	800c7c8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c7c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7ca:	6978      	ldr	r0, [r7, #20]
 800c7cc:	f7ff f8de 	bl	800b98c <tcp_oos_insert_segment>
                }
                break;
 800c7d0:	e138      	b.n	800ca44 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d117      	bne.n	800c808 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c7d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c894 <tcp_receive+0xd00>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da57      	bge.n	800c898 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7e8:	4829      	ldr	r0, [pc, #164]	@ (800c890 <tcp_receive+0xcfc>)
 800c7ea:	f7fd faa3 	bl	8009d34 <tcp_seg_copy>
 800c7ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 8128 	beq.w	800ca48 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c7fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c800:	69b8      	ldr	r0, [r7, #24]
 800c802:	f7ff f8c3 	bl	800b98c <tcp_oos_insert_segment>
                  }
                  break;
 800c806:	e11f      	b.n	800ca48 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c808:	4b22      	ldr	r3, [pc, #136]	@ (800c894 <tcp_receive+0xd00>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	3b01      	subs	r3, #1
 800c816:	2b00      	cmp	r3, #0
 800c818:	db3e      	blt.n	800c898 <tcp_receive+0xd04>
 800c81a:	4b1e      	ldr	r3, [pc, #120]	@ (800c894 <tcp_receive+0xd00>)
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	3301      	adds	r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dc35      	bgt.n	800c898 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c82c:	4818      	ldr	r0, [pc, #96]	@ (800c890 <tcp_receive+0xcfc>)
 800c82e:	f7fd fa81 	bl	8009d34 <tcp_seg_copy>
 800c832:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f000 8108 	beq.w	800ca4c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c844:	8912      	ldrh	r2, [r2, #8]
 800c846:	441a      	add	r2, r3
 800c848:	4b12      	ldr	r3, [pc, #72]	@ (800c894 <tcp_receive+0xd00>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd12      	ble.n	800c878 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c852:	4b10      	ldr	r3, [pc, #64]	@ (800c894 <tcp_receive+0xd00>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	b29a      	uxth	r2, r3
 800c858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	b29a      	uxth	r2, r3
 800c864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c866:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86e:	891b      	ldrh	r3, [r3, #8]
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f7fb fb08 	bl	8007e88 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c87a:	69fa      	ldr	r2, [r7, #28]
 800c87c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c87e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c880:	69f8      	ldr	r0, [r7, #28]
 800c882:	f7ff f883 	bl	800b98c <tcp_oos_insert_segment>
                  }
                  break;
 800c886:	e0e1      	b.n	800ca4c <tcp_receive+0xeb8>
 800c888:	20004378 	.word	0x20004378
 800c88c:	20004375 	.word	0x20004375
 800c890:	20004348 	.word	0x20004348
 800c894:	20004368 	.word	0x20004368
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f040 80c5 	bne.w	800ca30 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c8a6:	4b7f      	ldr	r3, [pc, #508]	@ (800caa4 <tcp_receive+0xf10>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f340 80bc 	ble.w	800ca30 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	899b      	ldrh	r3, [r3, #12]
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7f9 fcdb 	bl	800627c <lwip_htons>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f040 80be 	bne.w	800ca50 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c8d4:	4874      	ldr	r0, [pc, #464]	@ (800caa8 <tcp_receive+0xf14>)
 800c8d6:	f7fd fa2d 	bl	8009d34 <tcp_seg_copy>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8de:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 80b5 	beq.w	800ca54 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8f2:	8912      	ldrh	r2, [r2, #8]
 800c8f4:	441a      	add	r2, r3
 800c8f6:	4b6b      	ldr	r3, [pc, #428]	@ (800caa4 <tcp_receive+0xf10>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	dd12      	ble.n	800c926 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c900:	4b68      	ldr	r3, [pc, #416]	@ (800caa4 <tcp_receive+0xf10>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	b29a      	uxth	r2, r3
 800c906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	b29a      	uxth	r2, r3
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	891b      	ldrh	r3, [r3, #8]
 800c91e:	4619      	mov	r1, r3
 800c920:	4610      	mov	r0, r2
 800c922:	f7fb fab1 	bl	8007e88 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c926:	4b61      	ldr	r3, [pc, #388]	@ (800caac <tcp_receive+0xf18>)
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b5d      	ldr	r3, [pc, #372]	@ (800caa4 <tcp_receive+0xf10>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	441a      	add	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c93a:	440b      	add	r3, r1
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f340 8088 	ble.w	800ca54 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	899b      	ldrh	r3, [r3, #12]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f9 fc94 	bl	800627c <lwip_htons>
 800c954:	4603      	mov	r3, r0
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d021      	beq.n	800c9a4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	899b      	ldrh	r3, [r3, #12]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	b21b      	sxth	r3, r3
 800c96c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c970:	b21c      	sxth	r4, r3
 800c972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	899b      	ldrh	r3, [r3, #12]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f9 fc7d 	bl	800627c <lwip_htons>
 800c982:	4603      	mov	r3, r0
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7f9 fc75 	bl	800627c <lwip_htons>
 800c992:	4603      	mov	r3, r0
 800c994:	b21b      	sxth	r3, r3
 800c996:	4323      	orrs	r3, r4
 800c998:	b21a      	sxth	r2, r3
 800c99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	b292      	uxth	r2, r2
 800c9a2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9ae:	4413      	add	r3, r2
 800c9b0:	b299      	uxth	r1, r3
 800c9b2:	4b3c      	ldr	r3, [pc, #240]	@ (800caa4 <tcp_receive+0xf10>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	1a8a      	subs	r2, r1, r2
 800c9be:	b292      	uxth	r2, r2
 800c9c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	891b      	ldrh	r3, [r3, #8]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fb fa59 	bl	8007e88 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	891c      	ldrh	r4, [r3, #8]
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	899b      	ldrh	r3, [r3, #12]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f9 fc48 	bl	800627c <lwip_htons>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <tcp_receive+0xe68>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <tcp_receive+0xe6a>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4423      	add	r3, r4
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	4b2a      	ldr	r3, [pc, #168]	@ (800caac <tcp_receive+0xf18>)
 800ca04:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca06:	4b29      	ldr	r3, [pc, #164]	@ (800caac <tcp_receive+0xf18>)
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b25      	ldr	r3, [pc, #148]	@ (800caa4 <tcp_receive+0xf10>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	441a      	add	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca16:	6879      	ldr	r1, [r7, #4]
 800ca18:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca1a:	440b      	add	r3, r1
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d019      	beq.n	800ca54 <tcp_receive+0xec0>
 800ca20:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <tcp_receive+0xf1c>)
 800ca22:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ca26:	4923      	ldr	r1, [pc, #140]	@ (800cab4 <tcp_receive+0xf20>)
 800ca28:	4823      	ldr	r0, [pc, #140]	@ (800cab8 <tcp_receive+0xf24>)
 800ca2a:	f007 fa39 	bl	8013ea0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca2e:	e011      	b.n	800ca54 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f47f aea5 	bne.w	800c788 <tcp_receive+0xbf4>
 800ca3e:	e00a      	b.n	800ca56 <tcp_receive+0xec2>
                break;
 800ca40:	bf00      	nop
 800ca42:	e008      	b.n	800ca56 <tcp_receive+0xec2>
                break;
 800ca44:	bf00      	nop
 800ca46:	e006      	b.n	800ca56 <tcp_receive+0xec2>
                  break;
 800ca48:	bf00      	nop
 800ca4a:	e004      	b.n	800ca56 <tcp_receive+0xec2>
                  break;
 800ca4c:	bf00      	nop
 800ca4e:	e002      	b.n	800ca56 <tcp_receive+0xec2>
                  break;
 800ca50:	bf00      	nop
 800ca52:	e000      	b.n	800ca56 <tcp_receive+0xec2>
                break;
 800ca54:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f001 feaa 	bl	800e7b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ca5c:	e003      	b.n	800ca66 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f001 fea6 	bl	800e7b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca64:	e01a      	b.n	800ca9c <tcp_receive+0xf08>
 800ca66:	e019      	b.n	800ca9c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ca68:	4b0e      	ldr	r3, [pc, #56]	@ (800caa4 <tcp_receive+0xf10>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	db0a      	blt.n	800ca8c <tcp_receive+0xef8>
 800ca76:	4b0b      	ldr	r3, [pc, #44]	@ (800caa4 <tcp_receive+0xf10>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca82:	440b      	add	r3, r1
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	3301      	adds	r3, #1
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dd07      	ble.n	800ca9c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	8b5b      	ldrh	r3, [r3, #26]
 800ca90:	f043 0302 	orr.w	r3, r3, #2
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ca9a:	e7ff      	b.n	800ca9c <tcp_receive+0xf08>
 800ca9c:	bf00      	nop
 800ca9e:	3750      	adds	r7, #80	@ 0x50
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bdb0      	pop	{r4, r5, r7, pc}
 800caa4:	20004368 	.word	0x20004368
 800caa8:	20004348 	.word	0x20004348
 800caac:	20004372 	.word	0x20004372
 800cab0:	08015ff8 	.word	0x08015ff8
 800cab4:	080163a0 	.word	0x080163a0
 800cab8:	08016044 	.word	0x08016044

0800cabc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cac2:	4b15      	ldr	r3, [pc, #84]	@ (800cb18 <tcp_get_next_optbyte+0x5c>)
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	b291      	uxth	r1, r2
 800caca:	4a13      	ldr	r2, [pc, #76]	@ (800cb18 <tcp_get_next_optbyte+0x5c>)
 800cacc:	8011      	strh	r1, [r2, #0]
 800cace:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cad0:	4b12      	ldr	r3, [pc, #72]	@ (800cb1c <tcp_get_next_optbyte+0x60>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <tcp_get_next_optbyte+0x26>
 800cad8:	4b11      	ldr	r3, [pc, #68]	@ (800cb20 <tcp_get_next_optbyte+0x64>)
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	88fa      	ldrh	r2, [r7, #6]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d208      	bcs.n	800caf4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cae2:	4b10      	ldr	r3, [pc, #64]	@ (800cb24 <tcp_get_next_optbyte+0x68>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3314      	adds	r3, #20
 800cae8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800caea:	88fb      	ldrh	r3, [r7, #6]
 800caec:	683a      	ldr	r2, [r7, #0]
 800caee:	4413      	add	r3, r2
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	e00b      	b.n	800cb0c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <tcp_get_next_optbyte+0x64>)
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cb02:	4b06      	ldr	r3, [pc, #24]	@ (800cb1c <tcp_get_next_optbyte+0x60>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	797b      	ldrb	r3, [r7, #5]
 800cb08:	4413      	add	r3, r2
 800cb0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	20004364 	.word	0x20004364
 800cb1c:	20004360 	.word	0x20004360
 800cb20:	2000435e 	.word	0x2000435e
 800cb24:	20004358 	.word	0x20004358

0800cb28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d106      	bne.n	800cb44 <tcp_parseopt+0x1c>
 800cb36:	4b32      	ldr	r3, [pc, #200]	@ (800cc00 <tcp_parseopt+0xd8>)
 800cb38:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cb3c:	4931      	ldr	r1, [pc, #196]	@ (800cc04 <tcp_parseopt+0xdc>)
 800cb3e:	4832      	ldr	r0, [pc, #200]	@ (800cc08 <tcp_parseopt+0xe0>)
 800cb40:	f007 f9ae 	bl	8013ea0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cb44:	4b31      	ldr	r3, [pc, #196]	@ (800cc0c <tcp_parseopt+0xe4>)
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d056      	beq.n	800cbfa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb4c:	4b30      	ldr	r3, [pc, #192]	@ (800cc10 <tcp_parseopt+0xe8>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	801a      	strh	r2, [r3, #0]
 800cb52:	e046      	b.n	800cbe2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cb54:	f7ff ffb2 	bl	800cabc <tcp_get_next_optbyte>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d006      	beq.n	800cb70 <tcp_parseopt+0x48>
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	dc2a      	bgt.n	800cbbc <tcp_parseopt+0x94>
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d042      	beq.n	800cbf0 <tcp_parseopt+0xc8>
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d038      	beq.n	800cbe0 <tcp_parseopt+0xb8>
 800cb6e:	e025      	b.n	800cbbc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cb70:	f7ff ffa4 	bl	800cabc <tcp_get_next_optbyte>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b04      	cmp	r3, #4
 800cb78:	d13c      	bne.n	800cbf4 <tcp_parseopt+0xcc>
 800cb7a:	4b25      	ldr	r3, [pc, #148]	@ (800cc10 <tcp_parseopt+0xe8>)
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	4a22      	ldr	r2, [pc, #136]	@ (800cc0c <tcp_parseopt+0xe4>)
 800cb82:	8812      	ldrh	r2, [r2, #0]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	da35      	bge.n	800cbf4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cb88:	f7ff ff98 	bl	800cabc <tcp_get_next_optbyte>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cb92:	f7ff ff93 	bl	800cabc <tcp_get_next_optbyte>
 800cb96:	4603      	mov	r3, r0
 800cb98:	461a      	mov	r2, r3
 800cb9a:	89bb      	ldrh	r3, [r7, #12]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cba0:	89bb      	ldrh	r3, [r7, #12]
 800cba2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cba6:	d804      	bhi.n	800cbb2 <tcp_parseopt+0x8a>
 800cba8:	89bb      	ldrh	r3, [r7, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <tcp_parseopt+0x8a>
 800cbae:	89ba      	ldrh	r2, [r7, #12]
 800cbb0:	e001      	b.n	800cbb6 <tcp_parseopt+0x8e>
 800cbb2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800cbba:	e012      	b.n	800cbe2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cbbc:	f7ff ff7e 	bl	800cabc <tcp_get_next_optbyte>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d916      	bls.n	800cbf8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cbca:	7afb      	ldrb	r3, [r7, #11]
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	4b10      	ldr	r3, [pc, #64]	@ (800cc10 <tcp_parseopt+0xe8>)
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	3b02      	subs	r3, #2
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <tcp_parseopt+0xe8>)
 800cbdc:	801a      	strh	r2, [r3, #0]
 800cbde:	e000      	b.n	800cbe2 <tcp_parseopt+0xba>
          break;
 800cbe0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800cc10 <tcp_parseopt+0xe8>)
 800cbe4:	881a      	ldrh	r2, [r3, #0]
 800cbe6:	4b09      	ldr	r3, [pc, #36]	@ (800cc0c <tcp_parseopt+0xe4>)
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d3b2      	bcc.n	800cb54 <tcp_parseopt+0x2c>
 800cbee:	e004      	b.n	800cbfa <tcp_parseopt+0xd2>
          return;
 800cbf0:	bf00      	nop
 800cbf2:	e002      	b.n	800cbfa <tcp_parseopt+0xd2>
            return;
 800cbf4:	bf00      	nop
 800cbf6:	e000      	b.n	800cbfa <tcp_parseopt+0xd2>
            return;
 800cbf8:	bf00      	nop
      }
    }
  }
}
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08015ff8 	.word	0x08015ff8
 800cc04:	0801645c 	.word	0x0801645c
 800cc08:	08016044 	.word	0x08016044
 800cc0c:	2000435c 	.word	0x2000435c
 800cc10:	20004364 	.word	0x20004364

0800cc14 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cc18:	4b05      	ldr	r3, [pc, #20]	@ (800cc30 <tcp_trigger_input_pcb_close+0x1c>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	f043 0310 	orr.w	r3, r3, #16
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	4b03      	ldr	r3, [pc, #12]	@ (800cc30 <tcp_trigger_input_pcb_close+0x1c>)
 800cc24:	701a      	strb	r2, [r3, #0]
}
 800cc26:	bf00      	nop
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	20004375 	.word	0x20004375

0800cc34 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <tcp_route+0x28>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7a1b      	ldrb	r3, [r3, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	7a1b      	ldrb	r3, [r3, #8]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fa ff3e 	bl	8007ad4 <netif_get_by_index>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	e003      	b.n	800cc64 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f005 fd93 	bl	8012788 <ip4_route>
 800cc62:	4603      	mov	r3, r0
  }
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cc6c:	b590      	push	{r4, r7, lr}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d105      	bne.n	800cc8e <tcp_create_segment+0x22>
 800cc82:	4b43      	ldr	r3, [pc, #268]	@ (800cd90 <tcp_create_segment+0x124>)
 800cc84:	22a3      	movs	r2, #163	@ 0xa3
 800cc86:	4943      	ldr	r1, [pc, #268]	@ (800cd94 <tcp_create_segment+0x128>)
 800cc88:	4843      	ldr	r0, [pc, #268]	@ (800cd98 <tcp_create_segment+0x12c>)
 800cc8a:	f007 f909 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d105      	bne.n	800cca0 <tcp_create_segment+0x34>
 800cc94:	4b3e      	ldr	r3, [pc, #248]	@ (800cd90 <tcp_create_segment+0x124>)
 800cc96:	22a4      	movs	r2, #164	@ 0xa4
 800cc98:	4940      	ldr	r1, [pc, #256]	@ (800cd9c <tcp_create_segment+0x130>)
 800cc9a:	483f      	ldr	r0, [pc, #252]	@ (800cd98 <tcp_create_segment+0x12c>)
 800cc9c:	f007 f900 	bl	8013ea0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cca0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ccae:	2003      	movs	r0, #3
 800ccb0:	f7fa fba2 	bl	80073f8 <memp_malloc>
 800ccb4:	6138      	str	r0, [r7, #16]
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d104      	bne.n	800ccc6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ccbc:	68b8      	ldr	r0, [r7, #8]
 800ccbe:	f7fb fa69 	bl	8008194 <pbuf_free>
    return NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e060      	b.n	800cd88 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cccc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	891a      	ldrh	r2, [r3, #8]
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d205      	bcs.n	800ccf2 <tcp_create_segment+0x86>
 800cce6:	4b2a      	ldr	r3, [pc, #168]	@ (800cd90 <tcp_create_segment+0x124>)
 800cce8:	22b0      	movs	r2, #176	@ 0xb0
 800ccea:	492d      	ldr	r1, [pc, #180]	@ (800cda0 <tcp_create_segment+0x134>)
 800ccec:	482a      	ldr	r0, [pc, #168]	@ (800cd98 <tcp_create_segment+0x12c>)
 800ccee:	f007 f8d7 	bl	8013ea0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	891a      	ldrh	r2, [r3, #8]
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cd02:	2114      	movs	r1, #20
 800cd04:	68b8      	ldr	r0, [r7, #8]
 800cd06:	f7fb f9af 	bl	8008068 <pbuf_add_header>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d004      	beq.n	800cd1a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cd10:	6938      	ldr	r0, [r7, #16]
 800cd12:	f7fc ffd8 	bl	8009cc6 <tcp_seg_free>
    return NULL;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e036      	b.n	800cd88 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	8ada      	ldrh	r2, [r3, #22]
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	68dc      	ldr	r4, [r3, #12]
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7f9 faa5 	bl	800627c <lwip_htons>
 800cd32:	4603      	mov	r3, r0
 800cd34:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	8b1a      	ldrh	r2, [r3, #24]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	68dc      	ldr	r4, [r3, #12]
 800cd3e:	4610      	mov	r0, r2
 800cd40:	f7f9 fa9c 	bl	800627c <lwip_htons>
 800cd44:	4603      	mov	r3, r0
 800cd46:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	68dc      	ldr	r4, [r3, #12]
 800cd4c:	6838      	ldr	r0, [r7, #0]
 800cd4e:	f7f9 faaa 	bl	80062a6 <lwip_htonl>
 800cd52:	4603      	mov	r3, r0
 800cd54:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	089b      	lsrs	r3, r3, #2
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	3305      	adds	r3, #5
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	031b      	lsls	r3, r3, #12
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	68dc      	ldr	r4, [r3, #12]
 800cd70:	4610      	mov	r0, r2
 800cd72:	f7f9 fa83 	bl	800627c <lwip_htons>
 800cd76:	4603      	mov	r3, r0
 800cd78:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	749a      	strb	r2, [r3, #18]
 800cd82:	2200      	movs	r2, #0
 800cd84:	74da      	strb	r2, [r3, #19]
  return seg;
 800cd86:	693b      	ldr	r3, [r7, #16]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	371c      	adds	r7, #28
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd90      	pop	{r4, r7, pc}
 800cd90:	08016478 	.word	0x08016478
 800cd94:	080164ac 	.word	0x080164ac
 800cd98:	080164cc 	.word	0x080164cc
 800cd9c:	080164f4 	.word	0x080164f4
 800cda0:	08016518 	.word	0x08016518

0800cda4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	607b      	str	r3, [r7, #4]
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	81bb      	strh	r3, [r7, #12]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cdb8:	89bb      	ldrh	r3, [r7, #12]
 800cdba:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d105      	bne.n	800cdce <tcp_pbuf_prealloc+0x2a>
 800cdc2:	4b30      	ldr	r3, [pc, #192]	@ (800ce84 <tcp_pbuf_prealloc+0xe0>)
 800cdc4:	22e8      	movs	r2, #232	@ 0xe8
 800cdc6:	4930      	ldr	r1, [pc, #192]	@ (800ce88 <tcp_pbuf_prealloc+0xe4>)
 800cdc8:	4830      	ldr	r0, [pc, #192]	@ (800ce8c <tcp_pbuf_prealloc+0xe8>)
 800cdca:	f007 f869 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d105      	bne.n	800cde0 <tcp_pbuf_prealloc+0x3c>
 800cdd4:	4b2b      	ldr	r3, [pc, #172]	@ (800ce84 <tcp_pbuf_prealloc+0xe0>)
 800cdd6:	22e9      	movs	r2, #233	@ 0xe9
 800cdd8:	492d      	ldr	r1, [pc, #180]	@ (800ce90 <tcp_pbuf_prealloc+0xec>)
 800cdda:	482c      	ldr	r0, [pc, #176]	@ (800ce8c <tcp_pbuf_prealloc+0xe8>)
 800cddc:	f007 f860 	bl	8013ea0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cde0:	89ba      	ldrh	r2, [r7, #12]
 800cde2:	897b      	ldrh	r3, [r7, #10]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d221      	bcs.n	800ce2c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cde8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cdec:	f003 0302 	and.w	r3, r3, #2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d111      	bne.n	800ce18 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	8b5b      	ldrh	r3, [r3, #26]
 800cdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d115      	bne.n	800ce2c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ce00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d103      	bne.n	800ce18 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ce18:	89bb      	ldrh	r3, [r7, #12]
 800ce1a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800ce1e:	f023 0203 	bic.w	r2, r3, #3
 800ce22:	897b      	ldrh	r3, [r7, #10]
 800ce24:	4293      	cmp	r3, r2
 800ce26:	bf28      	it	cs
 800ce28:	4613      	movcs	r3, r2
 800ce2a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ce2c:	8af9      	ldrh	r1, [r7, #22]
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fa fec9 	bl	8007bcc <pbuf_alloc>
 800ce3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e019      	b.n	800ce7a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d006      	beq.n	800ce5c <tcp_pbuf_prealloc+0xb8>
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <tcp_pbuf_prealloc+0xe0>)
 800ce50:	f240 120b 	movw	r2, #267	@ 0x10b
 800ce54:	490f      	ldr	r1, [pc, #60]	@ (800ce94 <tcp_pbuf_prealloc+0xf0>)
 800ce56:	480d      	ldr	r0, [pc, #52]	@ (800ce8c <tcp_pbuf_prealloc+0xe8>)
 800ce58:	f007 f822 	bl	8013ea0 <iprintf>
  *oversize = p->len - length;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	895a      	ldrh	r2, [r3, #10]
 800ce60:	89bb      	ldrh	r3, [r7, #12]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	89ba      	ldrh	r2, [r7, #12]
 800ce6e:	811a      	strh	r2, [r3, #8]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	891a      	ldrh	r2, [r3, #8]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	815a      	strh	r2, [r3, #10]
  return p;
 800ce78:	693b      	ldr	r3, [r7, #16]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	08016478 	.word	0x08016478
 800ce88:	08016530 	.word	0x08016530
 800ce8c:	080164cc 	.word	0x080164cc
 800ce90:	08016554 	.word	0x08016554
 800ce94:	08016574 	.word	0x08016574

0800ce98 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <tcp_write_checks+0x20>
 800ceaa:	4b33      	ldr	r3, [pc, #204]	@ (800cf78 <tcp_write_checks+0xe0>)
 800ceac:	f240 1233 	movw	r2, #307	@ 0x133
 800ceb0:	4932      	ldr	r1, [pc, #200]	@ (800cf7c <tcp_write_checks+0xe4>)
 800ceb2:	4833      	ldr	r0, [pc, #204]	@ (800cf80 <tcp_write_checks+0xe8>)
 800ceb4:	f006 fff4 	bl	8013ea0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7d1b      	ldrb	r3, [r3, #20]
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	d00e      	beq.n	800cede <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cec4:	2b07      	cmp	r3, #7
 800cec6:	d00a      	beq.n	800cede <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d006      	beq.n	800cede <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ced4:	2b03      	cmp	r3, #3
 800ced6:	d002      	beq.n	800cede <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ced8:	f06f 030a 	mvn.w	r3, #10
 800cedc:	e048      	b.n	800cf70 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800cede:	887b      	ldrh	r3, [r7, #2]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <tcp_write_checks+0x50>
    return ERR_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e043      	b.n	800cf70 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ceee:	887a      	ldrh	r2, [r7, #2]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d909      	bls.n	800cf08 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	8b5b      	ldrh	r3, [r3, #26]
 800cef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cf02:	f04f 33ff 	mov.w	r3, #4294967295
 800cf06:	e033      	b.n	800cf70 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf0e:	2b08      	cmp	r3, #8
 800cf10:	d909      	bls.n	800cf26 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	8b5b      	ldrh	r3, [r3, #26]
 800cf16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	e024      	b.n	800cf70 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00f      	beq.n	800cf50 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d11a      	bne.n	800cf6e <tcp_write_checks+0xd6>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d116      	bne.n	800cf6e <tcp_write_checks+0xd6>
 800cf40:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <tcp_write_checks+0xe0>)
 800cf42:	f240 1255 	movw	r2, #341	@ 0x155
 800cf46:	490f      	ldr	r1, [pc, #60]	@ (800cf84 <tcp_write_checks+0xec>)
 800cf48:	480d      	ldr	r0, [pc, #52]	@ (800cf80 <tcp_write_checks+0xe8>)
 800cf4a:	f006 ffa9 	bl	8013ea0 <iprintf>
 800cf4e:	e00e      	b.n	800cf6e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d103      	bne.n	800cf60 <tcp_write_checks+0xc8>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d006      	beq.n	800cf6e <tcp_write_checks+0xd6>
 800cf60:	4b05      	ldr	r3, [pc, #20]	@ (800cf78 <tcp_write_checks+0xe0>)
 800cf62:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800cf66:	4908      	ldr	r1, [pc, #32]	@ (800cf88 <tcp_write_checks+0xf0>)
 800cf68:	4805      	ldr	r0, [pc, #20]	@ (800cf80 <tcp_write_checks+0xe8>)
 800cf6a:	f006 ff99 	bl	8013ea0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	08016478 	.word	0x08016478
 800cf7c:	08016588 	.word	0x08016588
 800cf80:	080164cc 	.word	0x080164cc
 800cf84:	080165a8 	.word	0x080165a8
 800cf88:	080165e4 	.word	0x080165e4

0800cf8c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cf8c:	b590      	push	{r4, r7, lr}
 800cf8e:	b09b      	sub	sp, #108	@ 0x6c
 800cf90:	af04      	add	r7, sp, #16
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4611      	mov	r1, r2
 800cf98:	461a      	mov	r2, r3
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	80fb      	strh	r3, [r7, #6]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfaa:	2300      	movs	r3, #0
 800cfac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfae:	2300      	movs	r3, #0
 800cfb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d109      	bne.n	800cfe8 <tcp_write+0x5c>
 800cfd4:	4ba4      	ldr	r3, [pc, #656]	@ (800d268 <tcp_write+0x2dc>)
 800cfd6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cfda:	49a4      	ldr	r1, [pc, #656]	@ (800d26c <tcp_write+0x2e0>)
 800cfdc:	48a4      	ldr	r0, [pc, #656]	@ (800d270 <tcp_write+0x2e4>)
 800cfde:	f006 ff5f 	bl	8013ea0 <iprintf>
 800cfe2:	f06f 030f 	mvn.w	r3, #15
 800cfe6:	e32a      	b.n	800d63e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfee:	085b      	lsrs	r3, r3, #1
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cff6:	4293      	cmp	r3, r2
 800cff8:	bf28      	it	cs
 800cffa:	4613      	movcs	r3, r2
 800cffc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <tcp_write+0x7e>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d008:	e000      	b.n	800d00c <tcp_write+0x80>
 800d00a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d00c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d109      	bne.n	800d028 <tcp_write+0x9c>
 800d014:	4b94      	ldr	r3, [pc, #592]	@ (800d268 <tcp_write+0x2dc>)
 800d016:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d01a:	4996      	ldr	r1, [pc, #600]	@ (800d274 <tcp_write+0x2e8>)
 800d01c:	4894      	ldr	r0, [pc, #592]	@ (800d270 <tcp_write+0x2e4>)
 800d01e:	f006 ff3f 	bl	8013ea0 <iprintf>
 800d022:	f06f 030f 	mvn.w	r3, #15
 800d026:	e30a      	b.n	800d63e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d028:	88fb      	ldrh	r3, [r7, #6]
 800d02a:	4619      	mov	r1, r3
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff ff33 	bl	800ce98 <tcp_write_checks>
 800d032:	4603      	mov	r3, r0
 800d034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d038:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <tcp_write+0xba>
    return err;
 800d040:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d044:	e2fb      	b.n	800d63e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d04c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d050:	2300      	movs	r3, #0
 800d052:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 80f6 	beq.w	800d24c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d064:	653b      	str	r3, [r7, #80]	@ 0x50
 800d066:	e002      	b.n	800d06e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d06e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1f8      	bne.n	800d068 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d078:	7a9b      	ldrb	r3, [r3, #10]
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d084:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d088:	891b      	ldrh	r3, [r3, #8]
 800d08a:	4619      	mov	r1, r3
 800d08c:	8c3b      	ldrh	r3, [r7, #32]
 800d08e:	440b      	add	r3, r1
 800d090:	429a      	cmp	r2, r3
 800d092:	da06      	bge.n	800d0a2 <tcp_write+0x116>
 800d094:	4b74      	ldr	r3, [pc, #464]	@ (800d268 <tcp_write+0x2dc>)
 800d096:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d09a:	4977      	ldr	r1, [pc, #476]	@ (800d278 <tcp_write+0x2ec>)
 800d09c:	4874      	ldr	r0, [pc, #464]	@ (800d270 <tcp_write+0x2e4>)
 800d09e:	f006 feff 	bl	8013ea0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a4:	891a      	ldrh	r2, [r3, #8]
 800d0a6:	8c3b      	ldrh	r3, [r7, #32]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d0b8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d0ba:	8a7b      	ldrh	r3, [r7, #18]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d026      	beq.n	800d10e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d0c0:	8a7b      	ldrh	r3, [r7, #18]
 800d0c2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d206      	bcs.n	800d0d6 <tcp_write+0x14a>
 800d0c8:	4b67      	ldr	r3, [pc, #412]	@ (800d268 <tcp_write+0x2dc>)
 800d0ca:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d0ce:	496b      	ldr	r1, [pc, #428]	@ (800d27c <tcp_write+0x2f0>)
 800d0d0:	4867      	ldr	r0, [pc, #412]	@ (800d270 <tcp_write+0x2e4>)
 800d0d2:	f006 fee5 	bl	8013ea0 <iprintf>
      seg = last_unsent;
 800d0d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d0da:	8a7b      	ldrh	r3, [r7, #18]
 800d0dc:	88fa      	ldrh	r2, [r7, #6]
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	bf28      	it	cs
 800d0e2:	4613      	movcs	r3, r2
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	bf28      	it	cs
 800d0ec:	4613      	movcs	r3, r2
 800d0ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d0f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d0f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d0fc:	8a7a      	ldrh	r2, [r7, #18]
 800d0fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	b29b      	uxth	r3, r3
 800d104:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d106:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d108:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d10e:	8a7b      	ldrh	r3, [r7, #18]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00b      	beq.n	800d12c <tcp_write+0x1a0>
 800d114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d118:	88fb      	ldrh	r3, [r7, #6]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d006      	beq.n	800d12c <tcp_write+0x1a0>
 800d11e:	4b52      	ldr	r3, [pc, #328]	@ (800d268 <tcp_write+0x2dc>)
 800d120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d124:	4956      	ldr	r1, [pc, #344]	@ (800d280 <tcp_write+0x2f4>)
 800d126:	4852      	ldr	r0, [pc, #328]	@ (800d270 <tcp_write+0x2e4>)
 800d128:	f006 feba 	bl	8013ea0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d12c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d130:	88fb      	ldrh	r3, [r7, #6]
 800d132:	429a      	cmp	r2, r3
 800d134:	f080 8167 	bcs.w	800d406 <tcp_write+0x47a>
 800d138:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 8163 	beq.w	800d406 <tcp_write+0x47a>
 800d140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d142:	891b      	ldrh	r3, [r3, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 815e 	beq.w	800d406 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d14a:	88fa      	ldrh	r2, [r7, #6]
 800d14c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d150:	1ad2      	subs	r2, r2, r3
 800d152:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d154:	4293      	cmp	r3, r2
 800d156:	bfa8      	it	ge
 800d158:	4613      	movge	r3, r2
 800d15a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d160:	797b      	ldrb	r3, [r7, #5]
 800d162:	f003 0301 	and.w	r3, r3, #1
 800d166:	2b00      	cmp	r3, #0
 800d168:	d027      	beq.n	800d1ba <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d16a:	f107 0012 	add.w	r0, r7, #18
 800d16e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d170:	8bf9      	ldrh	r1, [r7, #30]
 800d172:	2301      	movs	r3, #1
 800d174:	9302      	str	r3, [sp, #8]
 800d176:	797b      	ldrb	r3, [r7, #5]
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	4603      	mov	r3, r0
 800d180:	2000      	movs	r0, #0
 800d182:	f7ff fe0f 	bl	800cda4 <tcp_pbuf_prealloc>
 800d186:	6578      	str	r0, [r7, #84]	@ 0x54
 800d188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 8225 	beq.w	800d5da <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d192:	6858      	ldr	r0, [r3, #4]
 800d194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	4413      	add	r3, r2
 800d19c:	8bfa      	ldrh	r2, [r7, #30]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	f006 ff59 	bl	8014056 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d1a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d1a6:	f7fb f87d 	bl	80082a4 <pbuf_clen>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d1b8:	e041      	b.n	800d23e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1c0:	e002      	b.n	800d1c8 <tcp_write+0x23c>
 800d1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1f8      	bne.n	800d1c2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d2:	7b1b      	ldrb	r3, [r3, #12]
 800d1d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d115      	bne.n	800d208 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e2:	8952      	ldrh	r2, [r2, #10]
 800d1e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d10d      	bne.n	800d208 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d1ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d006      	beq.n	800d202 <tcp_write+0x276>
 800d1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800d268 <tcp_write+0x2dc>)
 800d1f6:	f240 2231 	movw	r2, #561	@ 0x231
 800d1fa:	4922      	ldr	r1, [pc, #136]	@ (800d284 <tcp_write+0x2f8>)
 800d1fc:	481c      	ldr	r0, [pc, #112]	@ (800d270 <tcp_write+0x2e4>)
 800d1fe:	f006 fe4f 	bl	8013ea0 <iprintf>
          extendlen = seglen;
 800d202:	8bfb      	ldrh	r3, [r7, #30]
 800d204:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d206:	e01a      	b.n	800d23e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d208:	8bfb      	ldrh	r3, [r7, #30]
 800d20a:	2201      	movs	r2, #1
 800d20c:	4619      	mov	r1, r3
 800d20e:	2000      	movs	r0, #0
 800d210:	f7fa fcdc 	bl	8007bcc <pbuf_alloc>
 800d214:	6578      	str	r0, [r7, #84]	@ 0x54
 800d216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f000 81e0 	beq.w	800d5de <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d21e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	441a      	add	r2, r3
 800d226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d228:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d22a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d22c:	f7fb f83a 	bl	80082a4 <pbuf_clen>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d238:	4413      	add	r3, r2
 800d23a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d23e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d242:	8bfb      	ldrh	r3, [r7, #30]
 800d244:	4413      	add	r3, r2
 800d246:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d24a:	e0dc      	b.n	800d406 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 80d7 	beq.w	800d406 <tcp_write+0x47a>
 800d258:	4b03      	ldr	r3, [pc, #12]	@ (800d268 <tcp_write+0x2dc>)
 800d25a:	f240 224a 	movw	r2, #586	@ 0x24a
 800d25e:	490a      	ldr	r1, [pc, #40]	@ (800d288 <tcp_write+0x2fc>)
 800d260:	4803      	ldr	r0, [pc, #12]	@ (800d270 <tcp_write+0x2e4>)
 800d262:	f006 fe1d 	bl	8013ea0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d266:	e0ce      	b.n	800d406 <tcp_write+0x47a>
 800d268:	08016478 	.word	0x08016478
 800d26c:	08016618 	.word	0x08016618
 800d270:	080164cc 	.word	0x080164cc
 800d274:	08016630 	.word	0x08016630
 800d278:	08016664 	.word	0x08016664
 800d27c:	0801667c 	.word	0x0801667c
 800d280:	0801669c 	.word	0x0801669c
 800d284:	080166bc 	.word	0x080166bc
 800d288:	080166e8 	.word	0x080166e8
    struct pbuf *p;
    u16_t left = len - pos;
 800d28c:	88fa      	ldrh	r2, [r7, #6]
 800d28e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d296:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d2a2:	8b7a      	ldrh	r2, [r7, #26]
 800d2a4:	8bbb      	ldrh	r3, [r7, #28]
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	bf28      	it	cs
 800d2aa:	4613      	movcs	r3, r2
 800d2ac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d2ae:	797b      	ldrb	r3, [r7, #5]
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d036      	beq.n	800d326 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d2b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	8b3b      	ldrh	r3, [r7, #24]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	b299      	uxth	r1, r3
 800d2c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	bf0c      	ite	eq
 800d2ca:	2301      	moveq	r3, #1
 800d2cc:	2300      	movne	r3, #0
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	f107 0012 	add.w	r0, r7, #18
 800d2d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d2d6:	9302      	str	r3, [sp, #8]
 800d2d8:	797b      	ldrb	r3, [r7, #5]
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2036      	movs	r0, #54	@ 0x36
 800d2e4:	f7ff fd5e 	bl	800cda4 <tcp_pbuf_prealloc>
 800d2e8:	6338      	str	r0, [r7, #48]	@ 0x30
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8178 	beq.w	800d5e2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	895b      	ldrh	r3, [r3, #10]
 800d2f6:	8b3a      	ldrh	r2, [r7, #24]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d906      	bls.n	800d30a <tcp_write+0x37e>
 800d2fc:	4b8c      	ldr	r3, [pc, #560]	@ (800d530 <tcp_write+0x5a4>)
 800d2fe:	f240 2266 	movw	r2, #614	@ 0x266
 800d302:	498c      	ldr	r1, [pc, #560]	@ (800d534 <tcp_write+0x5a8>)
 800d304:	488c      	ldr	r0, [pc, #560]	@ (800d538 <tcp_write+0x5ac>)
 800d306:	f006 fdcb 	bl	8013ea0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d312:	18d0      	adds	r0, r2, r3
 800d314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	4413      	add	r3, r2
 800d31c:	8b3a      	ldrh	r2, [r7, #24]
 800d31e:	4619      	mov	r1, r3
 800d320:	f006 fe99 	bl	8014056 <memcpy>
 800d324:	e02f      	b.n	800d386 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d326:	8a7b      	ldrh	r3, [r7, #18]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <tcp_write+0x3ae>
 800d32c:	4b80      	ldr	r3, [pc, #512]	@ (800d530 <tcp_write+0x5a4>)
 800d32e:	f240 2271 	movw	r2, #625	@ 0x271
 800d332:	4982      	ldr	r1, [pc, #520]	@ (800d53c <tcp_write+0x5b0>)
 800d334:	4880      	ldr	r0, [pc, #512]	@ (800d538 <tcp_write+0x5ac>)
 800d336:	f006 fdb3 	bl	8013ea0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d33a:	8b3b      	ldrh	r3, [r7, #24]
 800d33c:	2201      	movs	r2, #1
 800d33e:	4619      	mov	r1, r3
 800d340:	2036      	movs	r0, #54	@ 0x36
 800d342:	f7fa fc43 	bl	8007bcc <pbuf_alloc>
 800d346:	6178      	str	r0, [r7, #20]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 814b 	beq.w	800d5e6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	441a      	add	r2, r3
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d35c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d360:	b29b      	uxth	r3, r3
 800d362:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d366:	4619      	mov	r1, r3
 800d368:	2036      	movs	r0, #54	@ 0x36
 800d36a:	f7fa fc2f 	bl	8007bcc <pbuf_alloc>
 800d36e:	6338      	str	r0, [r7, #48]	@ 0x30
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d376:	6978      	ldr	r0, [r7, #20]
 800d378:	f7fa ff0c 	bl	8008194 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d37c:	e136      	b.n	800d5ec <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d37e:	6979      	ldr	r1, [r7, #20]
 800d380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d382:	f7fa ffc9 	bl	8008318 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d386:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d388:	f7fa ff8c 	bl	80082a4 <pbuf_clen>
 800d38c:	4603      	mov	r3, r0
 800d38e:	461a      	mov	r2, r3
 800d390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d394:	4413      	add	r3, r2
 800d396:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d39a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d39e:	2b09      	cmp	r3, #9
 800d3a0:	d903      	bls.n	800d3aa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d3a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3a4:	f7fa fef6 	bl	8008194 <pbuf_free>
      goto memerr;
 800d3a8:	e120      	b.n	800d5ec <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3b2:	441a      	add	r2, r3
 800d3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	2200      	movs	r2, #0
 800d3be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff fc53 	bl	800cc6c <tcp_create_segment>
 800d3c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f000 810d 	beq.w	800d5ea <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d3d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d102      	bne.n	800d3dc <tcp_write+0x450>
      queue = seg;
 800d3d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3da:	e00c      	b.n	800d3f6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d3dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <tcp_write+0x464>
 800d3e2:	4b53      	ldr	r3, [pc, #332]	@ (800d530 <tcp_write+0x5a4>)
 800d3e4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d3e8:	4955      	ldr	r1, [pc, #340]	@ (800d540 <tcp_write+0x5b4>)
 800d3ea:	4853      	ldr	r0, [pc, #332]	@ (800d538 <tcp_write+0x5ac>)
 800d3ec:	f006 fd58 	bl	8013ea0 <iprintf>
      prev_seg->next = seg;
 800d3f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3f4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d3f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3f8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d3fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d3fe:	8b3b      	ldrh	r3, [r7, #24]
 800d400:	4413      	add	r3, r2
 800d402:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d406:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d40a:	88fb      	ldrh	r3, [r7, #6]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	f4ff af3d 	bcc.w	800d28c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d412:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d414:	2b00      	cmp	r3, #0
 800d416:	d02c      	beq.n	800d472 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d41e:	e01e      	b.n	800d45e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d422:	891a      	ldrh	r2, [r3, #8]
 800d424:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d426:	4413      	add	r3, r2
 800d428:	b29a      	uxth	r2, r3
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d110      	bne.n	800d458 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d43c:	8952      	ldrh	r2, [r2, #10]
 800d43e:	4413      	add	r3, r2
 800d440:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	4618      	mov	r0, r3
 800d446:	f006 fe06 	bl	8014056 <memcpy>
        p->len += oversize_used;
 800d44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44c:	895a      	ldrh	r2, [r3, #10]
 800d44e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d450:	4413      	add	r3, r2
 800d452:	b29a      	uxth	r2, r3
 800d454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d456:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1dd      	bne.n	800d420 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d466:	891a      	ldrh	r2, [r3, #8]
 800d468:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d46a:	4413      	add	r3, r2
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d470:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d472:	8a7a      	ldrh	r2, [r7, #18]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d018      	beq.n	800d4b2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d482:	2b00      	cmp	r3, #0
 800d484:	d106      	bne.n	800d494 <tcp_write+0x508>
 800d486:	4b2a      	ldr	r3, [pc, #168]	@ (800d530 <tcp_write+0x5a4>)
 800d488:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d48c:	492d      	ldr	r1, [pc, #180]	@ (800d544 <tcp_write+0x5b8>)
 800d48e:	482a      	ldr	r0, [pc, #168]	@ (800d538 <tcp_write+0x5ac>)
 800d490:	f006 fd06 	bl	8013ea0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fa ff3c 	bl	8008318 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d4a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a2:	891a      	ldrh	r2, [r3, #8]
 800d4a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a6:	891b      	ldrh	r3, [r3, #8]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ae:	811a      	strh	r2, [r3, #8]
 800d4b0:	e037      	b.n	800d522 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d4b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d034      	beq.n	800d522 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <tcp_write+0x53a>
 800d4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <tcp_write+0x548>
 800d4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d530 <tcp_write+0x5a4>)
 800d4c8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d4cc:	491e      	ldr	r1, [pc, #120]	@ (800d548 <tcp_write+0x5bc>)
 800d4ce:	481a      	ldr	r0, [pc, #104]	@ (800d538 <tcp_write+0x5ac>)
 800d4d0:	f006 fce6 	bl	8013ea0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4da:	e009      	b.n	800d4f0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4de:	891a      	ldrh	r2, [r3, #8]
 800d4e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4e2:	4413      	add	r3, r2
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f1      	bne.n	800d4dc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fa:	891a      	ldrh	r2, [r3, #8]
 800d4fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4fe:	4413      	add	r3, r2
 800d500:	b29a      	uxth	r2, r3
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d508:	895a      	ldrh	r2, [r3, #10]
 800d50a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d50c:	4413      	add	r3, r2
 800d50e:	b29a      	uxth	r2, r3
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d516:	891a      	ldrh	r2, [r3, #8]
 800d518:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d51a:	4413      	add	r3, r2
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d520:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d524:	2b00      	cmp	r3, #0
 800d526:	d111      	bne.n	800d54c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d52c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d52e:	e010      	b.n	800d552 <tcp_write+0x5c6>
 800d530:	08016478 	.word	0x08016478
 800d534:	08016718 	.word	0x08016718
 800d538:	080164cc 	.word	0x080164cc
 800d53c:	08016758 	.word	0x08016758
 800d540:	08016768 	.word	0x08016768
 800d544:	0801677c 	.word	0x0801677c
 800d548:	080167b4 	.word	0x080167b4
  } else {
    last_unsent->next = queue;
 800d54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d550:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d556:	88fb      	ldrh	r3, [r7, #6]
 800d558:	441a      	add	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d564:	88fb      	ldrh	r3, [r7, #6]
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	b29a      	uxth	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d576:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00e      	beq.n	800d5a2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10a      	bne.n	800d5a2 <tcp_write+0x616>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d590:	2b00      	cmp	r3, #0
 800d592:	d106      	bne.n	800d5a2 <tcp_write+0x616>
 800d594:	4b2c      	ldr	r3, [pc, #176]	@ (800d648 <tcp_write+0x6bc>)
 800d596:	f240 3212 	movw	r2, #786	@ 0x312
 800d59a:	492c      	ldr	r1, [pc, #176]	@ (800d64c <tcp_write+0x6c0>)
 800d59c:	482c      	ldr	r0, [pc, #176]	@ (800d650 <tcp_write+0x6c4>)
 800d59e:	f006 fc7f 	bl	8013ea0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d5a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d016      	beq.n	800d5d6 <tcp_write+0x64a>
 800d5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d012      	beq.n	800d5d6 <tcp_write+0x64a>
 800d5b0:	797b      	ldrb	r3, [r7, #5]
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10d      	bne.n	800d5d6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d5ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	899b      	ldrh	r3, [r3, #12]
 800d5c0:	b29c      	uxth	r4, r3
 800d5c2:	2008      	movs	r0, #8
 800d5c4:	f7f8 fe5a 	bl	800627c <lwip_htons>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	4322      	orrs	r2, r4
 800d5d2:	b292      	uxth	r2, r2
 800d5d4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e031      	b.n	800d63e <tcp_write+0x6b2>
          goto memerr;
 800d5da:	bf00      	nop
 800d5dc:	e006      	b.n	800d5ec <tcp_write+0x660>
            goto memerr;
 800d5de:	bf00      	nop
 800d5e0:	e004      	b.n	800d5ec <tcp_write+0x660>
        goto memerr;
 800d5e2:	bf00      	nop
 800d5e4:	e002      	b.n	800d5ec <tcp_write+0x660>
        goto memerr;
 800d5e6:	bf00      	nop
 800d5e8:	e000      	b.n	800d5ec <tcp_write+0x660>
      goto memerr;
 800d5ea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d600:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d602:	f7fa fdc7 	bl	8008194 <pbuf_free>
  }
  if (queue != NULL) {
 800d606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <tcp_write+0x686>
    tcp_segs_free(queue);
 800d60c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d60e:	f7fc fb45 	bl	8009c9c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00e      	beq.n	800d63a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <tcp_write+0x6ae>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <tcp_write+0x6ae>
 800d62c:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <tcp_write+0x6bc>)
 800d62e:	f240 3227 	movw	r2, #807	@ 0x327
 800d632:	4906      	ldr	r1, [pc, #24]	@ (800d64c <tcp_write+0x6c0>)
 800d634:	4806      	ldr	r0, [pc, #24]	@ (800d650 <tcp_write+0x6c4>)
 800d636:	f006 fc33 	bl	8013ea0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d63a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d63e:	4618      	mov	r0, r3
 800d640:	375c      	adds	r7, #92	@ 0x5c
 800d642:	46bd      	mov	sp, r7
 800d644:	bd90      	pop	{r4, r7, pc}
 800d646:	bf00      	nop
 800d648:	08016478 	.word	0x08016478
 800d64c:	080167ec 	.word	0x080167ec
 800d650:	080164cc 	.word	0x080164cc

0800d654 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b08b      	sub	sp, #44	@ 0x2c
 800d658:	af02      	add	r7, sp, #8
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d660:	2300      	movs	r3, #0
 800d662:	61fb      	str	r3, [r7, #28]
 800d664:	2300      	movs	r3, #0
 800d666:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d668:	2300      	movs	r3, #0
 800d66a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <tcp_split_unsent_seg+0x2c>
 800d672:	4b95      	ldr	r3, [pc, #596]	@ (800d8c8 <tcp_split_unsent_seg+0x274>)
 800d674:	f240 324b 	movw	r2, #843	@ 0x34b
 800d678:	4994      	ldr	r1, [pc, #592]	@ (800d8cc <tcp_split_unsent_seg+0x278>)
 800d67a:	4895      	ldr	r0, [pc, #596]	@ (800d8d0 <tcp_split_unsent_seg+0x27c>)
 800d67c:	f006 fc10 	bl	8013ea0 <iprintf>

  useg = pcb->unsent;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d684:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d68c:	f04f 33ff 	mov.w	r3, #4294967295
 800d690:	e116      	b.n	800d8c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d692:	887b      	ldrh	r3, [r7, #2]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d109      	bne.n	800d6ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d698:	4b8b      	ldr	r3, [pc, #556]	@ (800d8c8 <tcp_split_unsent_seg+0x274>)
 800d69a:	f240 3253 	movw	r2, #851	@ 0x353
 800d69e:	498d      	ldr	r1, [pc, #564]	@ (800d8d4 <tcp_split_unsent_seg+0x280>)
 800d6a0:	488b      	ldr	r0, [pc, #556]	@ (800d8d0 <tcp_split_unsent_seg+0x27c>)
 800d6a2:	f006 fbfd 	bl	8013ea0 <iprintf>
    return ERR_VAL;
 800d6a6:	f06f 0305 	mvn.w	r3, #5
 800d6aa:	e109      	b.n	800d8c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	891b      	ldrh	r3, [r3, #8]
 800d6b0:	887a      	ldrh	r2, [r7, #2]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d301      	bcc.n	800d6ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e102      	b.n	800d8c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6be:	887a      	ldrh	r2, [r7, #2]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d906      	bls.n	800d6d2 <tcp_split_unsent_seg+0x7e>
 800d6c4:	4b80      	ldr	r3, [pc, #512]	@ (800d8c8 <tcp_split_unsent_seg+0x274>)
 800d6c6:	f240 325b 	movw	r2, #859	@ 0x35b
 800d6ca:	4983      	ldr	r1, [pc, #524]	@ (800d8d8 <tcp_split_unsent_seg+0x284>)
 800d6cc:	4880      	ldr	r0, [pc, #512]	@ (800d8d0 <tcp_split_unsent_seg+0x27c>)
 800d6ce:	f006 fbe7 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	891b      	ldrh	r3, [r3, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <tcp_split_unsent_seg+0x94>
 800d6da:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c8 <tcp_split_unsent_seg+0x274>)
 800d6dc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d6e0:	497e      	ldr	r1, [pc, #504]	@ (800d8dc <tcp_split_unsent_seg+0x288>)
 800d6e2:	487b      	ldr	r0, [pc, #492]	@ (800d8d0 <tcp_split_unsent_seg+0x27c>)
 800d6e4:	f006 fbdc 	bl	8013ea0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	7a9b      	ldrb	r3, [r3, #10]
 800d6ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0304 	and.w	r3, r3, #4
 800d6f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	891a      	ldrh	r2, [r3, #8]
 800d6fe:	887b      	ldrh	r3, [r7, #2]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d704:	7bbb      	ldrb	r3, [r7, #14]
 800d706:	b29a      	uxth	r2, r3
 800d708:	89bb      	ldrh	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d712:	4619      	mov	r1, r3
 800d714:	2036      	movs	r0, #54	@ 0x36
 800d716:	f7fa fa59 	bl	8007bcc <pbuf_alloc>
 800d71a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 80b7 	beq.w	800d892 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	891a      	ldrh	r2, [r3, #8]
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	891b      	ldrh	r3, [r3, #8]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	b29a      	uxth	r2, r3
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	4413      	add	r3, r2
 800d736:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	6858      	ldr	r0, [r3, #4]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	7bbb      	ldrb	r3, [r7, #14]
 800d742:	18d1      	adds	r1, r2, r3
 800d744:	897b      	ldrh	r3, [r7, #10]
 800d746:	89ba      	ldrh	r2, [r7, #12]
 800d748:	f7fa ff1e 	bl	8008588 <pbuf_copy_partial>
 800d74c:	4603      	mov	r3, r0
 800d74e:	461a      	mov	r2, r3
 800d750:	89bb      	ldrh	r3, [r7, #12]
 800d752:	4293      	cmp	r3, r2
 800d754:	f040 809f 	bne.w	800d896 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	899b      	ldrh	r3, [r3, #12]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	4618      	mov	r0, r3
 800d762:	f7f8 fd8b 	bl	800627c <lwip_htons>
 800d766:	4603      	mov	r3, r0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d76e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d770:	2300      	movs	r3, #0
 800d772:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d774:	7efb      	ldrb	r3, [r7, #27]
 800d776:	f003 0308 	and.w	r3, r3, #8
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d007      	beq.n	800d78e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d77e:	7efb      	ldrb	r3, [r7, #27]
 800d780:	f023 0308 	bic.w	r3, r3, #8
 800d784:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d786:	7ebb      	ldrb	r3, [r7, #26]
 800d788:	f043 0308 	orr.w	r3, r3, #8
 800d78c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d78e:	7efb      	ldrb	r3, [r7, #27]
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d798:	7efb      	ldrb	r3, [r7, #27]
 800d79a:	f023 0301 	bic.w	r3, r3, #1
 800d79e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d7a0:	7ebb      	ldrb	r3, [r7, #26]
 800d7a2:	f043 0301 	orr.w	r3, r3, #1
 800d7a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7f8 fd79 	bl	80062a6 <lwip_htonl>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	887b      	ldrh	r3, [r7, #2]
 800d7b8:	18d1      	adds	r1, r2, r3
 800d7ba:	7eba      	ldrb	r2, [r7, #26]
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	6939      	ldr	r1, [r7, #16]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7ff fa51 	bl	800cc6c <tcp_create_segment>
 800d7ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d063      	beq.n	800d89a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fa fd64 	bl	80082a4 <pbuf_clen>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	461a      	mov	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7e6:	1a9b      	subs	r3, r3, r2
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	6858      	ldr	r0, [r3, #4]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	891a      	ldrh	r2, [r3, #8]
 800d7fa:	89bb      	ldrh	r3, [r7, #12]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	4619      	mov	r1, r3
 800d802:	f7fa fb41 	bl	8007e88 <pbuf_realloc>
  useg->len -= remainder;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	891a      	ldrh	r2, [r3, #8]
 800d80a:	89bb      	ldrh	r3, [r7, #12]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	b29a      	uxth	r2, r3
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	899b      	ldrh	r3, [r3, #12]
 800d81a:	b29c      	uxth	r4, r3
 800d81c:	7efb      	ldrb	r3, [r7, #27]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	4618      	mov	r0, r3
 800d822:	f7f8 fd2b 	bl	800627c <lwip_htons>
 800d826:	4603      	mov	r3, r0
 800d828:	461a      	mov	r2, r3
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	4322      	orrs	r2, r4
 800d830:	b292      	uxth	r2, r2
 800d832:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fa fd33 	bl	80082a4 <pbuf_clen>
 800d83e:	4603      	mov	r3, r0
 800d840:	461a      	mov	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d848:	4413      	add	r3, r2
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	4618      	mov	r0, r3
 800d858:	f7fa fd24 	bl	80082a4 <pbuf_clen>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d866:	4413      	add	r3, r2
 800d868:	b29a      	uxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d103      	bne.n	800d88e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	e016      	b.n	800d8c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d892:	bf00      	nop
 800d894:	e002      	b.n	800d89c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d896:	bf00      	nop
 800d898:	e000      	b.n	800d89c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d89a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d006      	beq.n	800d8b0 <tcp_split_unsent_seg+0x25c>
 800d8a2:	4b09      	ldr	r3, [pc, #36]	@ (800d8c8 <tcp_split_unsent_seg+0x274>)
 800d8a4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d8a8:	490d      	ldr	r1, [pc, #52]	@ (800d8e0 <tcp_split_unsent_seg+0x28c>)
 800d8aa:	4809      	ldr	r0, [pc, #36]	@ (800d8d0 <tcp_split_unsent_seg+0x27c>)
 800d8ac:	f006 faf8 	bl	8013ea0 <iprintf>
  if (p != NULL) {
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d8b6:	6938      	ldr	r0, [r7, #16]
 800d8b8:	f7fa fc6c 	bl	8008194 <pbuf_free>
  }

  return ERR_MEM;
 800d8bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3724      	adds	r7, #36	@ 0x24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd90      	pop	{r4, r7, pc}
 800d8c8:	08016478 	.word	0x08016478
 800d8cc:	0801680c 	.word	0x0801680c
 800d8d0:	080164cc 	.word	0x080164cc
 800d8d4:	08016830 	.word	0x08016830
 800d8d8:	08016854 	.word	0x08016854
 800d8dc:	08016864 	.word	0x08016864
 800d8e0:	08016874 	.word	0x08016874

0800d8e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <tcp_send_fin+0x1c>
 800d8f2:	4b21      	ldr	r3, [pc, #132]	@ (800d978 <tcp_send_fin+0x94>)
 800d8f4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d8f8:	4920      	ldr	r1, [pc, #128]	@ (800d97c <tcp_send_fin+0x98>)
 800d8fa:	4821      	ldr	r0, [pc, #132]	@ (800d980 <tcp_send_fin+0x9c>)
 800d8fc:	f006 fad0 	bl	8013ea0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d02e      	beq.n	800d966 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d90c:	60fb      	str	r3, [r7, #12]
 800d90e:	e002      	b.n	800d916 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1f8      	bne.n	800d910 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	899b      	ldrh	r3, [r3, #12]
 800d924:	b29b      	uxth	r3, r3
 800d926:	4618      	mov	r0, r3
 800d928:	f7f8 fca8 	bl	800627c <lwip_htons>
 800d92c:	4603      	mov	r3, r0
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0307 	and.w	r3, r3, #7
 800d934:	2b00      	cmp	r3, #0
 800d936:	d116      	bne.n	800d966 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	899b      	ldrh	r3, [r3, #12]
 800d93e:	b29c      	uxth	r4, r3
 800d940:	2001      	movs	r0, #1
 800d942:	f7f8 fc9b 	bl	800627c <lwip_htons>
 800d946:	4603      	mov	r3, r0
 800d948:	461a      	mov	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	4322      	orrs	r2, r4
 800d950:	b292      	uxth	r2, r2
 800d952:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	8b5b      	ldrh	r3, [r3, #26]
 800d958:	f043 0320 	orr.w	r3, r3, #32
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	e004      	b.n	800d970 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d966:	2101      	movs	r1, #1
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f80b 	bl	800d984 <tcp_enqueue_flags>
 800d96e:	4603      	mov	r3, r0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	bd90      	pop	{r4, r7, pc}
 800d978:	08016478 	.word	0x08016478
 800d97c:	08016880 	.word	0x08016880
 800d980:	080164cc 	.word	0x080164cc

0800d984 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	@ 0x28
 800d988:	af02      	add	r7, sp, #8
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d990:	2300      	movs	r3, #0
 800d992:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d106      	bne.n	800d9b0 <tcp_enqueue_flags+0x2c>
 800d9a2:	4b67      	ldr	r3, [pc, #412]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800d9a4:	f240 4211 	movw	r2, #1041	@ 0x411
 800d9a8:	4966      	ldr	r1, [pc, #408]	@ (800db44 <tcp_enqueue_flags+0x1c0>)
 800d9aa:	4867      	ldr	r0, [pc, #412]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800d9ac:	f006 fa78 	bl	8013ea0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d106      	bne.n	800d9c4 <tcp_enqueue_flags+0x40>
 800d9b6:	4b62      	ldr	r3, [pc, #392]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800d9b8:	f240 4213 	movw	r2, #1043	@ 0x413
 800d9bc:	4963      	ldr	r1, [pc, #396]	@ (800db4c <tcp_enqueue_flags+0x1c8>)
 800d9be:	4862      	ldr	r0, [pc, #392]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800d9c0:	f006 fa6e 	bl	8013ea0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	f003 0302 	and.w	r3, r3, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9d2:	7ffb      	ldrb	r3, [r7, #31]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	f003 0304 	and.w	r3, r3, #4
 800d9dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	2036      	movs	r0, #54	@ 0x36
 800d9ea:	f7fa f8ef 	bl	8007bcc <pbuf_alloc>
 800d9ee:	6138      	str	r0, [r7, #16]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d109      	bne.n	800da0a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800da04:	f04f 33ff 	mov.w	r3, #4294967295
 800da08:	e095      	b.n	800db36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	895a      	ldrh	r2, [r3, #10]
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	b29b      	uxth	r3, r3
 800da12:	429a      	cmp	r2, r3
 800da14:	d206      	bcs.n	800da24 <tcp_enqueue_flags+0xa0>
 800da16:	4b4a      	ldr	r3, [pc, #296]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800da18:	f240 4239 	movw	r2, #1081	@ 0x439
 800da1c:	494c      	ldr	r1, [pc, #304]	@ (800db50 <tcp_enqueue_flags+0x1cc>)
 800da1e:	484a      	ldr	r0, [pc, #296]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800da20:	f006 fa3e 	bl	8013ea0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800da28:	78fa      	ldrb	r2, [r7, #3]
 800da2a:	7ffb      	ldrb	r3, [r7, #31]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	460b      	mov	r3, r1
 800da30:	6939      	ldr	r1, [r7, #16]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff f91a 	bl	800cc6c <tcp_create_segment>
 800da38:	60f8      	str	r0, [r7, #12]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d109      	bne.n	800da54 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8b5b      	ldrh	r3, [r3, #26]
 800da44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da48:	b29a      	uxth	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800da4e:	f04f 33ff 	mov.w	r3, #4294967295
 800da52:	e070      	b.n	800db36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f003 0303 	and.w	r3, r3, #3
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <tcp_enqueue_flags+0xea>
 800da60:	4b37      	ldr	r3, [pc, #220]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800da62:	f240 4242 	movw	r2, #1090	@ 0x442
 800da66:	493b      	ldr	r1, [pc, #236]	@ (800db54 <tcp_enqueue_flags+0x1d0>)
 800da68:	4837      	ldr	r0, [pc, #220]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800da6a:	f006 fa19 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	891b      	ldrh	r3, [r3, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d006      	beq.n	800da84 <tcp_enqueue_flags+0x100>
 800da76:	4b32      	ldr	r3, [pc, #200]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800da78:	f240 4243 	movw	r2, #1091	@ 0x443
 800da7c:	4936      	ldr	r1, [pc, #216]	@ (800db58 <tcp_enqueue_flags+0x1d4>)
 800da7e:	4832      	ldr	r0, [pc, #200]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800da80:	f006 fa0e 	bl	8013ea0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d103      	bne.n	800da94 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	66da      	str	r2, [r3, #108]	@ 0x6c
 800da92:	e00d      	b.n	800dab0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da98:	61bb      	str	r3, [r7, #24]
 800da9a:	e002      	b.n	800daa2 <tcp_enqueue_flags+0x11e>
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	61bb      	str	r3, [r7, #24]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1f8      	bne.n	800da9c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d104      	bne.n	800dacc <tcp_enqueue_flags+0x148>
 800dac2:	78fb      	ldrb	r3, [r7, #3]
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d004      	beq.n	800dad6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dad6:	78fb      	ldrb	r3, [r7, #3]
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	8b5b      	ldrh	r3, [r3, #26]
 800dae4:	f043 0320 	orr.w	r3, r3, #32
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fa fbd6 	bl	80082a4 <pbuf_clen>
 800daf8:	4603      	mov	r3, r0
 800dafa:	461a      	mov	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db02:	4413      	add	r3, r2
 800db04:	b29a      	uxth	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <tcp_enqueue_flags+0x1b0>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d106      	bne.n	800db34 <tcp_enqueue_flags+0x1b0>
 800db26:	4b06      	ldr	r3, [pc, #24]	@ (800db40 <tcp_enqueue_flags+0x1bc>)
 800db28:	f240 4265 	movw	r2, #1125	@ 0x465
 800db2c:	490b      	ldr	r1, [pc, #44]	@ (800db5c <tcp_enqueue_flags+0x1d8>)
 800db2e:	4806      	ldr	r0, [pc, #24]	@ (800db48 <tcp_enqueue_flags+0x1c4>)
 800db30:	f006 f9b6 	bl	8013ea0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3720      	adds	r7, #32
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08016478 	.word	0x08016478
 800db44:	0801689c 	.word	0x0801689c
 800db48:	080164cc 	.word	0x080164cc
 800db4c:	080168f4 	.word	0x080168f4
 800db50:	08016914 	.word	0x08016914
 800db54:	08016950 	.word	0x08016950
 800db58:	08016968 	.word	0x08016968
 800db5c:	08016994 	.word	0x08016994

0800db60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800db60:	b5b0      	push	{r4, r5, r7, lr}
 800db62:	b08a      	sub	sp, #40	@ 0x28
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d106      	bne.n	800db7c <tcp_output+0x1c>
 800db6e:	4b8a      	ldr	r3, [pc, #552]	@ (800dd98 <tcp_output+0x238>)
 800db70:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800db74:	4989      	ldr	r1, [pc, #548]	@ (800dd9c <tcp_output+0x23c>)
 800db76:	488a      	ldr	r0, [pc, #552]	@ (800dda0 <tcp_output+0x240>)
 800db78:	f006 f992 	bl	8013ea0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7d1b      	ldrb	r3, [r3, #20]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d106      	bne.n	800db92 <tcp_output+0x32>
 800db84:	4b84      	ldr	r3, [pc, #528]	@ (800dd98 <tcp_output+0x238>)
 800db86:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800db8a:	4986      	ldr	r1, [pc, #536]	@ (800dda4 <tcp_output+0x244>)
 800db8c:	4884      	ldr	r0, [pc, #528]	@ (800dda0 <tcp_output+0x240>)
 800db8e:	f006 f987 	bl	8013ea0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800db92:	4b85      	ldr	r3, [pc, #532]	@ (800dda8 <tcp_output+0x248>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d101      	bne.n	800dba0 <tcp_output+0x40>
    return ERR_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	e1ce      	b.n	800df3e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dbac:	4293      	cmp	r3, r2
 800dbae:	bf28      	it	cs
 800dbb0:	4613      	movcs	r3, r2
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10b      	bne.n	800dbda <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	8b5b      	ldrh	r3, [r3, #26]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 81aa 	beq.w	800df24 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fded 	bl	800e7b0 <tcp_send_empty_ack>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	e1b1      	b.n	800df3e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dbda:	6879      	ldr	r1, [r7, #4]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff f826 	bl	800cc34 <tcp_route>
 800dbe8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d102      	bne.n	800dbf6 <tcp_output+0x96>
    return ERR_RTE;
 800dbf0:	f06f 0303 	mvn.w	r3, #3
 800dbf4:	e1a3      	b.n	800df3e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <tcp_output+0xa4>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d111      	bne.n	800dc28 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <tcp_output+0xb0>
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	e000      	b.n	800dc12 <tcp_output+0xb2>
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d102      	bne.n	800dc20 <tcp_output+0xc0>
      return ERR_RTE;
 800dc1a:	f06f 0303 	mvn.w	r3, #3
 800dc1e:	e18e      	b.n	800df3e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f8 fb39 	bl	80062a6 <lwip_htonl>
 800dc34:	4602      	mov	r2, r0
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc3e:	8912      	ldrh	r2, [r2, #8]
 800dc40:	4413      	add	r3, r2
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d227      	bcs.n	800dc98 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc4e:	461a      	mov	r2, r3
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d114      	bne.n	800dc80 <tcp_output+0x120>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d110      	bne.n	800dc80 <tcp_output+0x120>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10b      	bne.n	800dc80 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8b5b      	ldrh	r3, [r3, #26]
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f000 814d 	beq.w	800df28 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fd8e 	bl	800e7b0 <tcp_send_empty_ack>
 800dc94:	4603      	mov	r3, r0
 800dc96:	e152      	b.n	800df3e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dca4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f000 811c 	beq.w	800dee6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dcae:	e002      	b.n	800dcb6 <tcp_output+0x156>
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1f8      	bne.n	800dcb0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dcbe:	e112      	b.n	800dee6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	899b      	ldrh	r3, [r3, #12]
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7f8 fad7 	bl	800627c <lwip_htons>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	f003 0304 	and.w	r3, r3, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <tcp_output+0x188>
 800dcda:	4b2f      	ldr	r3, [pc, #188]	@ (800dd98 <tcp_output+0x238>)
 800dcdc:	f240 5236 	movw	r2, #1334	@ 0x536
 800dce0:	4932      	ldr	r1, [pc, #200]	@ (800ddac <tcp_output+0x24c>)
 800dce2:	482f      	ldr	r0, [pc, #188]	@ (800dda0 <tcp_output+0x240>)
 800dce4:	f006 f8dc 	bl	8013ea0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d01f      	beq.n	800dd30 <tcp_output+0x1d0>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8b5b      	ldrh	r3, [r3, #26]
 800dcf4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d119      	bne.n	800dd30 <tcp_output+0x1d0>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00b      	beq.n	800dd1c <tcp_output+0x1bc>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d110      	bne.n	800dd30 <tcp_output+0x1d0>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd12:	891a      	ldrh	r2, [r3, #8]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d209      	bcs.n	800dd30 <tcp_output+0x1d0>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d004      	beq.n	800dd30 <tcp_output+0x1d0>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd2c:	2b08      	cmp	r3, #8
 800dd2e:	d901      	bls.n	800dd34 <tcp_output+0x1d4>
 800dd30:	2301      	movs	r3, #1
 800dd32:	e000      	b.n	800dd36 <tcp_output+0x1d6>
 800dd34:	2300      	movs	r3, #0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	8b5b      	ldrh	r3, [r3, #26]
 800dd3e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 80e4 	beq.w	800df10 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d00d      	beq.n	800dd6c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	b29c      	uxth	r4, r3
 800dd58:	2010      	movs	r0, #16
 800dd5a:	f7f8 fa8f 	bl	800627c <lwip_htons>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	461a      	mov	r2, r3
 800dd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	4322      	orrs	r2, r4
 800dd68:	b292      	uxth	r2, r2
 800dd6a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dd6c:	697a      	ldr	r2, [r7, #20]
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd72:	f000 f909 	bl	800df88 <tcp_output_segment>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d016      	beq.n	800ddb0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	8b5b      	ldrh	r3, [r3, #26]
 800dd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	835a      	strh	r2, [r3, #26]
      return err;
 800dd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd94:	e0d3      	b.n	800df3e <tcp_output+0x3de>
 800dd96:	bf00      	nop
 800dd98:	08016478 	.word	0x08016478
 800dd9c:	080169bc 	.word	0x080169bc
 800dda0:	080164cc 	.word	0x080164cc
 800dda4:	080169d4 	.word	0x080169d4
 800dda8:	2000437c 	.word	0x2000437c
 800ddac:	080169fc 	.word	0x080169fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	7d1b      	ldrb	r3, [r3, #20]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d006      	beq.n	800ddce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8b5b      	ldrh	r3, [r3, #26]
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ddce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f8 fa66 	bl	80062a6 <lwip_htonl>
 800ddda:	4604      	mov	r4, r0
 800dddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddde:	891b      	ldrh	r3, [r3, #8]
 800dde0:	461d      	mov	r5, r3
 800dde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	899b      	ldrh	r3, [r3, #12]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f8 fa46 	bl	800627c <lwip_htons>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <tcp_output+0x2a0>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <tcp_output+0x2a2>
 800de00:	2300      	movs	r3, #0
 800de02:	442b      	add	r3, r5
 800de04:	4423      	add	r3, r4
 800de06:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	da02      	bge.n	800de1a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800de1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1c:	891b      	ldrh	r3, [r3, #8]
 800de1e:	461c      	mov	r4, r3
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	b29b      	uxth	r3, r3
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f8 fa27 	bl	800627c <lwip_htons>
 800de2e:	4603      	mov	r3, r0
 800de30:	b2db      	uxtb	r3, r3
 800de32:	f003 0303 	and.w	r3, r3, #3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <tcp_output+0x2de>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e000      	b.n	800de40 <tcp_output+0x2e0>
 800de3e:	2300      	movs	r3, #0
 800de40:	4423      	add	r3, r4
 800de42:	2b00      	cmp	r3, #0
 800de44:	d049      	beq.n	800deda <tcp_output+0x37a>
      seg->next = NULL;
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	2200      	movs	r2, #0
 800de4a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de50:	2b00      	cmp	r3, #0
 800de52:	d105      	bne.n	800de60 <tcp_output+0x300>
        pcb->unacked = seg;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de58:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5c:	623b      	str	r3, [r7, #32]
 800de5e:	e03f      	b.n	800dee0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800de60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	4618      	mov	r0, r3
 800de68:	f7f8 fa1d 	bl	80062a6 <lwip_htonl>
 800de6c:	4604      	mov	r4, r0
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	f7f8 fa16 	bl	80062a6 <lwip_htonl>
 800de7a:	4603      	mov	r3, r0
 800de7c:	1ae3      	subs	r3, r4, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	da24      	bge.n	800decc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3370      	adds	r3, #112	@ 0x70
 800de86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800de88:	e002      	b.n	800de90 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d011      	beq.n	800debc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7f8 fa00 	bl	80062a6 <lwip_htonl>
 800dea6:	4604      	mov	r4, r0
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 f9f9 	bl	80062a6 <lwip_htonl>
 800deb4:	4603      	mov	r3, r0
 800deb6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800deb8:	2b00      	cmp	r3, #0
 800deba:	dbe6      	blt.n	800de8a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	e009      	b.n	800dee0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ded0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	623b      	str	r3, [r7, #32]
 800ded8:	e002      	b.n	800dee0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800deda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dedc:	f7fb fef3 	bl	8009cc6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dee4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d012      	beq.n	800df12 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800deec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	4618      	mov	r0, r3
 800def4:	f7f8 f9d7 	bl	80062a6 <lwip_htonl>
 800def8:	4602      	mov	r2, r0
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df02:	8912      	ldrh	r2, [r2, #8]
 800df04:	4413      	add	r3, r2
  while (seg != NULL &&
 800df06:	69ba      	ldr	r2, [r7, #24]
 800df08:	429a      	cmp	r2, r3
 800df0a:	f4bf aed9 	bcs.w	800dcc0 <tcp_output+0x160>
 800df0e:	e000      	b.n	800df12 <tcp_output+0x3b2>
      break;
 800df10:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df16:	2b00      	cmp	r3, #0
 800df18:	d108      	bne.n	800df2c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800df22:	e004      	b.n	800df2e <tcp_output+0x3ce>
    goto output_done;
 800df24:	bf00      	nop
 800df26:	e002      	b.n	800df2e <tcp_output+0x3ce>
    goto output_done;
 800df28:	bf00      	nop
 800df2a:	e000      	b.n	800df2e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800df2c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	8b5b      	ldrh	r3, [r3, #26]
 800df32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df36:	b29a      	uxth	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3728      	adds	r7, #40	@ 0x28
 800df42:	46bd      	mov	sp, r7
 800df44:	bdb0      	pop	{r4, r5, r7, pc}
 800df46:	bf00      	nop

0800df48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <tcp_output_segment_busy+0x1c>
 800df56:	4b09      	ldr	r3, [pc, #36]	@ (800df7c <tcp_output_segment_busy+0x34>)
 800df58:	f240 529a 	movw	r2, #1434	@ 0x59a
 800df5c:	4908      	ldr	r1, [pc, #32]	@ (800df80 <tcp_output_segment_busy+0x38>)
 800df5e:	4809      	ldr	r0, [pc, #36]	@ (800df84 <tcp_output_segment_busy+0x3c>)
 800df60:	f005 ff9e 	bl	8013ea0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	7b9b      	ldrb	r3, [r3, #14]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d001      	beq.n	800df72 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	e000      	b.n	800df74 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	08016478 	.word	0x08016478
 800df80:	08016a14 	.word	0x08016a14
 800df84:	080164cc 	.word	0x080164cc

0800df88 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800df88:	b5b0      	push	{r4, r5, r7, lr}
 800df8a:	b08c      	sub	sp, #48	@ 0x30
 800df8c:	af04      	add	r7, sp, #16
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d106      	bne.n	800dfa8 <tcp_output_segment+0x20>
 800df9a:	4b6d      	ldr	r3, [pc, #436]	@ (800e150 <tcp_output_segment+0x1c8>)
 800df9c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800dfa0:	496c      	ldr	r1, [pc, #432]	@ (800e154 <tcp_output_segment+0x1cc>)
 800dfa2:	486d      	ldr	r0, [pc, #436]	@ (800e158 <tcp_output_segment+0x1d0>)
 800dfa4:	f005 ff7c 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d106      	bne.n	800dfbc <tcp_output_segment+0x34>
 800dfae:	4b68      	ldr	r3, [pc, #416]	@ (800e150 <tcp_output_segment+0x1c8>)
 800dfb0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800dfb4:	4969      	ldr	r1, [pc, #420]	@ (800e15c <tcp_output_segment+0x1d4>)
 800dfb6:	4868      	ldr	r0, [pc, #416]	@ (800e158 <tcp_output_segment+0x1d0>)
 800dfb8:	f005 ff72 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d106      	bne.n	800dfd0 <tcp_output_segment+0x48>
 800dfc2:	4b63      	ldr	r3, [pc, #396]	@ (800e150 <tcp_output_segment+0x1c8>)
 800dfc4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800dfc8:	4965      	ldr	r1, [pc, #404]	@ (800e160 <tcp_output_segment+0x1d8>)
 800dfca:	4863      	ldr	r0, [pc, #396]	@ (800e158 <tcp_output_segment+0x1d0>)
 800dfcc:	f005 ff68 	bl	8013ea0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7ff ffb9 	bl	800df48 <tcp_output_segment_busy>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e0b3      	b.n	800e148 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	68dc      	ldr	r4, [r3, #12]
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7f8 f95c 	bl	80062a6 <lwip_htonl>
 800dfee:	4603      	mov	r3, r0
 800dff0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	68dc      	ldr	r4, [r3, #12]
 800dffa:	4610      	mov	r0, r2
 800dffc:	f7f8 f93e 	bl	800627c <lwip_htons>
 800e000:	4603      	mov	r3, r0
 800e002:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e00c:	441a      	add	r2, r3
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	3314      	adds	r3, #20
 800e018:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	7a9b      	ldrb	r3, [r3, #10]
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d015      	beq.n	800e052 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	3304      	adds	r3, #4
 800e02a:	461a      	mov	r2, r3
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e032:	f7fc fa25 	bl	800a480 <tcp_eff_send_mss_netif>
 800e036:	4603      	mov	r3, r0
 800e038:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e03a:	8b7b      	ldrh	r3, [r7, #26]
 800e03c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e040:	4618      	mov	r0, r3
 800e042:	f7f8 f930 	bl	80062a6 <lwip_htonl>
 800e046:	4602      	mov	r2, r0
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	3304      	adds	r3, #4
 800e050:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da02      	bge.n	800e062 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2200      	movs	r2, #0
 800e060:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10c      	bne.n	800e084 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e06a:	4b3e      	ldr	r3, [pc, #248]	@ (800e164 <tcp_output_segment+0x1dc>)
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	f7f8 f914 	bl	80062a6 <lwip_htonl>
 800e07e:	4602      	mov	r2, r0
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	68da      	ldr	r2, [r3, #12]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	8959      	ldrh	r1, [r3, #10]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	8b3a      	ldrh	r2, [r7, #24]
 800e09e:	1a8a      	subs	r2, r1, r2
 800e0a0:	b292      	uxth	r2, r2
 800e0a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	8919      	ldrh	r1, [r3, #8]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	8b3a      	ldrh	r2, [r7, #24]
 800e0b0:	1a8a      	subs	r2, r1, r2
 800e0b2:	b292      	uxth	r2, r2
 800e0b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	68d2      	ldr	r2, [r2, #12]
 800e0be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	741a      	strb	r2, [r3, #16]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68da      	ldr	r2, [r3, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	7a9b      	ldrb	r3, [r3, #10]
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <tcp_output_segment+0x158>
 800e0dc:	2318      	movs	r3, #24
 800e0de:	e000      	b.n	800e0e2 <tcp_output_segment+0x15a>
 800e0e0:	2314      	movs	r3, #20
 800e0e2:	4413      	add	r3, r2
 800e0e4:	69fa      	ldr	r2, [r7, #28]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d006      	beq.n	800e0f8 <tcp_output_segment+0x170>
 800e0ea:	4b19      	ldr	r3, [pc, #100]	@ (800e150 <tcp_output_segment+0x1c8>)
 800e0ec:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e0f0:	491d      	ldr	r1, [pc, #116]	@ (800e168 <tcp_output_segment+0x1e0>)
 800e0f2:	4819      	ldr	r0, [pc, #100]	@ (800e158 <tcp_output_segment+0x1d0>)
 800e0f4:	f005 fed4 	bl	8013ea0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e100:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e102:	68bd      	ldr	r5, [r7, #8]
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	68d4      	ldr	r4, [r2, #12]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	462b      	mov	r3, r5
 800e110:	460a      	mov	r2, r1
 800e112:	2106      	movs	r1, #6
 800e114:	f7f8 fcd1 	bl	8006aba <ip_chksum_pseudo>
 800e118:	4603      	mov	r3, r0
 800e11a:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6858      	ldr	r0, [r3, #4]
 800e120:	68b9      	ldr	r1, [r7, #8]
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	1d1c      	adds	r4, r3, #4
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	7add      	ldrb	r5, [r3, #11]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	7a9b      	ldrb	r3, [r3, #10]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	9202      	str	r2, [sp, #8]
 800e132:	2206      	movs	r2, #6
 800e134:	9201      	str	r2, [sp, #4]
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	462b      	mov	r3, r5
 800e13a:	4622      	mov	r2, r4
 800e13c:	f004 fd0c 	bl	8012b58 <ip4_output_if>
 800e140:	4603      	mov	r3, r0
 800e142:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bdb0      	pop	{r4, r5, r7, pc}
 800e150:	08016478 	.word	0x08016478
 800e154:	08016a3c 	.word	0x08016a3c
 800e158:	080164cc 	.word	0x080164cc
 800e15c:	08016a5c 	.word	0x08016a5c
 800e160:	08016a7c 	.word	0x08016a7c
 800e164:	20004330 	.word	0x20004330
 800e168:	08016aa0 	.word	0x08016aa0

0800e16c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e16c:	b5b0      	push	{r4, r5, r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <tcp_rexmit_rto_prepare+0x1c>
 800e17a:	4b31      	ldr	r3, [pc, #196]	@ (800e240 <tcp_rexmit_rto_prepare+0xd4>)
 800e17c:	f240 6263 	movw	r2, #1635	@ 0x663
 800e180:	4930      	ldr	r1, [pc, #192]	@ (800e244 <tcp_rexmit_rto_prepare+0xd8>)
 800e182:	4831      	ldr	r0, [pc, #196]	@ (800e248 <tcp_rexmit_rto_prepare+0xdc>)
 800e184:	f005 fe8c 	bl	8013ea0 <iprintf>

  if (pcb->unacked == NULL) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e190:	f06f 0305 	mvn.w	r3, #5
 800e194:	e050      	b.n	800e238 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e00b      	b.n	800e1b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f7ff fed2 	bl	800df48 <tcp_output_segment_busy>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e1aa:	f06f 0305 	mvn.w	r3, #5
 800e1ae:	e043      	b.n	800e238 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1ef      	bne.n	800e19e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f7ff fec2 	bl	800df48 <tcp_output_segment_busy>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d002      	beq.n	800e1d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e1ca:	f06f 0305 	mvn.w	r3, #5
 800e1ce:	e033      	b.n	800e238 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f8 f853 	bl	80062a6 <lwip_htonl>
 800e200:	4604      	mov	r4, r0
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	891b      	ldrh	r3, [r3, #8]
 800e206:	461d      	mov	r5, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	899b      	ldrh	r3, [r3, #12]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4618      	mov	r0, r3
 800e212:	f7f8 f833 	bl	800627c <lwip_htons>
 800e216:	4603      	mov	r3, r0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <tcp_rexmit_rto_prepare+0xba>
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <tcp_rexmit_rto_prepare+0xbc>
 800e226:	2300      	movs	r3, #0
 800e228:	442b      	add	r3, r5
 800e22a:	18e2      	adds	r2, r4, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bdb0      	pop	{r4, r5, r7, pc}
 800e240:	08016478 	.word	0x08016478
 800e244:	08016ab4 	.word	0x08016ab4
 800e248:	080164cc 	.word	0x080164cc

0800e24c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d106      	bne.n	800e268 <tcp_rexmit_rto_commit+0x1c>
 800e25a:	4b0d      	ldr	r3, [pc, #52]	@ (800e290 <tcp_rexmit_rto_commit+0x44>)
 800e25c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e260:	490c      	ldr	r1, [pc, #48]	@ (800e294 <tcp_rexmit_rto_commit+0x48>)
 800e262:	480d      	ldr	r0, [pc, #52]	@ (800e298 <tcp_rexmit_rto_commit+0x4c>)
 800e264:	f005 fe1c 	bl	8013ea0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e26e:	2bff      	cmp	r3, #255	@ 0xff
 800e270:	d007      	beq.n	800e282 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e278:	3301      	adds	r3, #1
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff fc6c 	bl	800db60 <tcp_output>
}
 800e288:	bf00      	nop
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	08016478 	.word	0x08016478
 800e294:	08016ad8 	.word	0x08016ad8
 800e298:	080164cc 	.word	0x080164cc

0800e29c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d106      	bne.n	800e2b8 <tcp_rexmit_rto+0x1c>
 800e2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d4 <tcp_rexmit_rto+0x38>)
 800e2ac:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e2b0:	4909      	ldr	r1, [pc, #36]	@ (800e2d8 <tcp_rexmit_rto+0x3c>)
 800e2b2:	480a      	ldr	r0, [pc, #40]	@ (800e2dc <tcp_rexmit_rto+0x40>)
 800e2b4:	f005 fdf4 	bl	8013ea0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff ff57 	bl	800e16c <tcp_rexmit_rto_prepare>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff ffc1 	bl	800e24c <tcp_rexmit_rto_commit>
  }
}
 800e2ca:	bf00      	nop
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	08016478 	.word	0x08016478
 800e2d8:	08016afc 	.word	0x08016afc
 800e2dc:	080164cc 	.word	0x080164cc

0800e2e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e2e0:	b590      	push	{r4, r7, lr}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d106      	bne.n	800e2fc <tcp_rexmit+0x1c>
 800e2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800e3ac <tcp_rexmit+0xcc>)
 800e2f0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e2f4:	492e      	ldr	r1, [pc, #184]	@ (800e3b0 <tcp_rexmit+0xd0>)
 800e2f6:	482f      	ldr	r0, [pc, #188]	@ (800e3b4 <tcp_rexmit+0xd4>)
 800e2f8:	f005 fdd2 	bl	8013ea0 <iprintf>

  if (pcb->unacked == NULL) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e300:	2b00      	cmp	r3, #0
 800e302:	d102      	bne.n	800e30a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e304:	f06f 0305 	mvn.w	r3, #5
 800e308:	e04c      	b.n	800e3a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e30e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e310:	68b8      	ldr	r0, [r7, #8]
 800e312:	f7ff fe19 	bl	800df48 <tcp_output_segment_busy>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e31c:	f06f 0305 	mvn.w	r3, #5
 800e320:	e040      	b.n	800e3a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	336c      	adds	r3, #108	@ 0x6c
 800e32e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e330:	e002      	b.n	800e338 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d011      	beq.n	800e364 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f7 ffac 	bl	80062a6 <lwip_htonl>
 800e34e:	4604      	mov	r4, r0
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	f7f7 ffa5 	bl	80062a6 <lwip_htonl>
 800e35c:	4603      	mov	r3, r0
 800e35e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e360:	2b00      	cmp	r3, #0
 800e362:	dbe6      	blt.n	800e332 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d103      	bne.n	800e382 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e388:	2bff      	cmp	r3, #255	@ 0xff
 800e38a:	d007      	beq.n	800e39c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e392:	3301      	adds	r3, #1
 800e394:	b2da      	uxtb	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd90      	pop	{r4, r7, pc}
 800e3ac:	08016478 	.word	0x08016478
 800e3b0:	08016b18 	.word	0x08016b18
 800e3b4:	080164cc 	.word	0x080164cc

0800e3b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <tcp_rexmit_fast+0x1c>
 800e3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800e470 <tcp_rexmit_fast+0xb8>)
 800e3c8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e3cc:	4929      	ldr	r1, [pc, #164]	@ (800e474 <tcp_rexmit_fast+0xbc>)
 800e3ce:	482a      	ldr	r0, [pc, #168]	@ (800e478 <tcp_rexmit_fast+0xc0>)
 800e3d0:	f005 fd66 	bl	8013ea0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d044      	beq.n	800e466 <tcp_rexmit_fast+0xae>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	8b5b      	ldrh	r3, [r3, #26]
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d13e      	bne.n	800e466 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff ff79 	bl	800e2e0 <tcp_rexmit>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d138      	bne.n	800e466 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e400:	4293      	cmp	r3, r2
 800e402:	bf28      	it	cs
 800e404:	4613      	movcs	r3, r2
 800e406:	b29b      	uxth	r3, r3
 800e408:	0fda      	lsrs	r2, r3, #31
 800e40a:	4413      	add	r3, r2
 800e40c:	105b      	asrs	r3, r3, #1
 800e40e:	b29a      	uxth	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e41c:	461a      	mov	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	429a      	cmp	r2, r3
 800e426:	d206      	bcs.n	800e436 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e42c:	005b      	lsls	r3, r3, #1
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e440:	4619      	mov	r1, r3
 800e442:	0049      	lsls	r1, r1, #1
 800e444:	440b      	add	r3, r1
 800e446:	b29b      	uxth	r3, r3
 800e448:	4413      	add	r3, r2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	8b5b      	ldrh	r3, [r3, #26]
 800e456:	f043 0304 	orr.w	r3, r3, #4
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	08016478 	.word	0x08016478
 800e474:	08016b30 	.word	0x08016b30
 800e478:	080164cc 	.word	0x080164cc

0800e47c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	607b      	str	r3, [r7, #4]
 800e486:	460b      	mov	r3, r1
 800e488:	817b      	strh	r3, [r7, #10]
 800e48a:	4613      	mov	r3, r2
 800e48c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e48e:	897a      	ldrh	r2, [r7, #10]
 800e490:	893b      	ldrh	r3, [r7, #8]
 800e492:	4413      	add	r3, r2
 800e494:	b29b      	uxth	r3, r3
 800e496:	3314      	adds	r3, #20
 800e498:	b29b      	uxth	r3, r3
 800e49a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e49e:	4619      	mov	r1, r3
 800e4a0:	2022      	movs	r0, #34	@ 0x22
 800e4a2:	f7f9 fb93 	bl	8007bcc <pbuf_alloc>
 800e4a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d04d      	beq.n	800e54a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e4ae:	897b      	ldrh	r3, [r7, #10]
 800e4b0:	3313      	adds	r3, #19
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	8952      	ldrh	r2, [r2, #10]
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	db06      	blt.n	800e4c8 <tcp_output_alloc_header_common+0x4c>
 800e4ba:	4b26      	ldr	r3, [pc, #152]	@ (800e554 <tcp_output_alloc_header_common+0xd8>)
 800e4bc:	f240 7223 	movw	r2, #1827	@ 0x723
 800e4c0:	4925      	ldr	r1, [pc, #148]	@ (800e558 <tcp_output_alloc_header_common+0xdc>)
 800e4c2:	4826      	ldr	r0, [pc, #152]	@ (800e55c <tcp_output_alloc_header_common+0xe0>)
 800e4c4:	f005 fcec 	bl	8013ea0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e4ce:	8c3b      	ldrh	r3, [r7, #32]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7f7 fed3 	bl	800627c <lwip_htons>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	461a      	mov	r2, r3
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e4de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f7 fecb 	bl	800627c <lwip_htons>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7f7 fed6 	bl	80062a6 <lwip_htonl>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e500:	897b      	ldrh	r3, [r7, #10]
 800e502:	089b      	lsrs	r3, r3, #2
 800e504:	b29b      	uxth	r3, r3
 800e506:	3305      	adds	r3, #5
 800e508:	b29b      	uxth	r3, r3
 800e50a:	031b      	lsls	r3, r3, #12
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e512:	b29b      	uxth	r3, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	b29b      	uxth	r3, r3
 800e518:	4618      	mov	r0, r3
 800e51a:	f7f7 feaf 	bl	800627c <lwip_htons>
 800e51e:	4603      	mov	r3, r0
 800e520:	461a      	mov	r2, r3
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e526:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e528:	4618      	mov	r0, r3
 800e52a:	f7f7 fea7 	bl	800627c <lwip_htons>
 800e52e:	4603      	mov	r3, r0
 800e530:	461a      	mov	r2, r3
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	2200      	movs	r2, #0
 800e53a:	741a      	strb	r2, [r3, #16]
 800e53c:	2200      	movs	r2, #0
 800e53e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	2200      	movs	r2, #0
 800e544:	749a      	strb	r2, [r3, #18]
 800e546:	2200      	movs	r2, #0
 800e548:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e54a:	697b      	ldr	r3, [r7, #20]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	08016478 	.word	0x08016478
 800e558:	08016b50 	.word	0x08016b50
 800e55c:	080164cc 	.word	0x080164cc

0800e560 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e560:	b5b0      	push	{r4, r5, r7, lr}
 800e562:	b08a      	sub	sp, #40	@ 0x28
 800e564:	af04      	add	r7, sp, #16
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	607b      	str	r3, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	817b      	strh	r3, [r7, #10]
 800e56e:	4613      	mov	r3, r2
 800e570:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d106      	bne.n	800e586 <tcp_output_alloc_header+0x26>
 800e578:	4b15      	ldr	r3, [pc, #84]	@ (800e5d0 <tcp_output_alloc_header+0x70>)
 800e57a:	f240 7242 	movw	r2, #1858	@ 0x742
 800e57e:	4915      	ldr	r1, [pc, #84]	@ (800e5d4 <tcp_output_alloc_header+0x74>)
 800e580:	4815      	ldr	r0, [pc, #84]	@ (800e5d8 <tcp_output_alloc_header+0x78>)
 800e582:	f005 fc8d 	bl	8013ea0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	8adb      	ldrh	r3, [r3, #22]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	8b12      	ldrh	r2, [r2, #24]
 800e592:	68f9      	ldr	r1, [r7, #12]
 800e594:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e596:	893d      	ldrh	r5, [r7, #8]
 800e598:	897c      	ldrh	r4, [r7, #10]
 800e59a:	9103      	str	r1, [sp, #12]
 800e59c:	2110      	movs	r1, #16
 800e59e:	9102      	str	r1, [sp, #8]
 800e5a0:	9201      	str	r2, [sp, #4]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	462a      	mov	r2, r5
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	f7ff ff67 	bl	800e47c <tcp_output_alloc_header_common>
 800e5ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d006      	beq.n	800e5c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e5be:	441a      	add	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e5c4:	697b      	ldr	r3, [r7, #20]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	08016478 	.word	0x08016478
 800e5d4:	08016b80 	.word	0x08016b80
 800e5d8:	080164cc 	.word	0x080164cc

0800e5dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b088      	sub	sp, #32
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	71fb      	strb	r3, [r7, #7]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d106      	bne.n	800e60a <tcp_output_fill_options+0x2e>
 800e5fc:	4b12      	ldr	r3, [pc, #72]	@ (800e648 <tcp_output_fill_options+0x6c>)
 800e5fe:	f240 7256 	movw	r2, #1878	@ 0x756
 800e602:	4912      	ldr	r1, [pc, #72]	@ (800e64c <tcp_output_fill_options+0x70>)
 800e604:	4812      	ldr	r0, [pc, #72]	@ (800e650 <tcp_output_fill_options+0x74>)
 800e606:	f005 fc4b 	bl	8013ea0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	3314      	adds	r3, #20
 800e614:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e616:	8bfb      	ldrh	r3, [r7, #30]
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	461a      	mov	r2, r3
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	4413      	add	r3, r2
 800e626:	3314      	adds	r3, #20
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	4413      	add	r3, r2
 800e62c:	697a      	ldr	r2, [r7, #20]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d006      	beq.n	800e640 <tcp_output_fill_options+0x64>
 800e632:	4b05      	ldr	r3, [pc, #20]	@ (800e648 <tcp_output_fill_options+0x6c>)
 800e634:	f240 7275 	movw	r2, #1909	@ 0x775
 800e638:	4906      	ldr	r1, [pc, #24]	@ (800e654 <tcp_output_fill_options+0x78>)
 800e63a:	4805      	ldr	r0, [pc, #20]	@ (800e650 <tcp_output_fill_options+0x74>)
 800e63c:	f005 fc30 	bl	8013ea0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e640:	bf00      	nop
 800e642:	3720      	adds	r7, #32
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	08016478 	.word	0x08016478
 800e64c:	08016ba8 	.word	0x08016ba8
 800e650:	080164cc 	.word	0x080164cc
 800e654:	08016aa0 	.word	0x08016aa0

0800e658 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08c      	sub	sp, #48	@ 0x30
 800e65c:	af04      	add	r7, sp, #16
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d106      	bne.n	800e67a <tcp_output_control_segment+0x22>
 800e66c:	4b24      	ldr	r3, [pc, #144]	@ (800e700 <tcp_output_control_segment+0xa8>)
 800e66e:	f240 7287 	movw	r2, #1927	@ 0x787
 800e672:	4924      	ldr	r1, [pc, #144]	@ (800e704 <tcp_output_control_segment+0xac>)
 800e674:	4824      	ldr	r0, [pc, #144]	@ (800e708 <tcp_output_control_segment+0xb0>)
 800e676:	f005 fc13 	bl	8013ea0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e67a:	683a      	ldr	r2, [r7, #0]
 800e67c:	6879      	ldr	r1, [r7, #4]
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7fe fad8 	bl	800cc34 <tcp_route>
 800e684:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e68c:	23fc      	movs	r3, #252	@ 0xfc
 800e68e:	77fb      	strb	r3, [r7, #31]
 800e690:	e02c      	b.n	800e6ec <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	891a      	ldrh	r2, [r3, #8]
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2106      	movs	r1, #6
 800e6a4:	68b8      	ldr	r0, [r7, #8]
 800e6a6:	f7f8 fa08 	bl	8006aba <ip_chksum_pseudo>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d006      	beq.n	800e6c6 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	7adb      	ldrb	r3, [r3, #11]
 800e6bc:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	7a9b      	ldrb	r3, [r3, #10]
 800e6c2:	777b      	strb	r3, [r7, #29]
 800e6c4:	e003      	b.n	800e6ce <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e6c6:	23ff      	movs	r3, #255	@ 0xff
 800e6c8:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e6ce:	7fba      	ldrb	r2, [r7, #30]
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	9302      	str	r3, [sp, #8]
 800e6d4:	2306      	movs	r3, #6
 800e6d6:	9301      	str	r3, [sp, #4]
 800e6d8:	7f7b      	ldrb	r3, [r7, #29]
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	6879      	ldr	r1, [r7, #4]
 800e6e2:	68b8      	ldr	r0, [r7, #8]
 800e6e4:	f004 fa38 	bl	8012b58 <ip4_output_if>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e6ec:	68b8      	ldr	r0, [r7, #8]
 800e6ee:	f7f9 fd51 	bl	8008194 <pbuf_free>
  return err;
 800e6f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3720      	adds	r7, #32
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	08016478 	.word	0x08016478
 800e704:	08016bd0 	.word	0x08016bd0
 800e708:	080164cc 	.word	0x080164cc

0800e70c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e70c:	b590      	push	{r4, r7, lr}
 800e70e:	b08b      	sub	sp, #44	@ 0x2c
 800e710:	af04      	add	r7, sp, #16
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <tcp_rst+0x22>
 800e720:	4b1f      	ldr	r3, [pc, #124]	@ (800e7a0 <tcp_rst+0x94>)
 800e722:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e726:	491f      	ldr	r1, [pc, #124]	@ (800e7a4 <tcp_rst+0x98>)
 800e728:	481f      	ldr	r0, [pc, #124]	@ (800e7a8 <tcp_rst+0x9c>)
 800e72a:	f005 fbb9 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e730:	2b00      	cmp	r3, #0
 800e732:	d106      	bne.n	800e742 <tcp_rst+0x36>
 800e734:	4b1a      	ldr	r3, [pc, #104]	@ (800e7a0 <tcp_rst+0x94>)
 800e736:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e73a:	491c      	ldr	r1, [pc, #112]	@ (800e7ac <tcp_rst+0xa0>)
 800e73c:	481a      	ldr	r0, [pc, #104]	@ (800e7a8 <tcp_rst+0x9c>)
 800e73e:	f005 fbaf 	bl	8013ea0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e746:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e74a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e74c:	7dfb      	ldrb	r3, [r7, #23]
 800e74e:	b29c      	uxth	r4, r3
 800e750:	68b8      	ldr	r0, [r7, #8]
 800e752:	f7f7 fda8 	bl	80062a6 <lwip_htonl>
 800e756:	4602      	mov	r2, r0
 800e758:	8abb      	ldrh	r3, [r7, #20]
 800e75a:	9303      	str	r3, [sp, #12]
 800e75c:	2314      	movs	r3, #20
 800e75e:	9302      	str	r3, [sp, #8]
 800e760:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	4613      	mov	r3, r2
 800e76a:	2200      	movs	r2, #0
 800e76c:	4621      	mov	r1, r4
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7ff fe84 	bl	800e47c <tcp_output_alloc_header_common>
 800e774:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00c      	beq.n	800e796 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
 800e77e:	2200      	movs	r2, #0
 800e780:	6939      	ldr	r1, [r7, #16]
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff ff2a 	bl	800e5dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	6939      	ldr	r1, [r7, #16]
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f7ff ff62 	bl	800e658 <tcp_output_control_segment>
 800e794:	e000      	b.n	800e798 <tcp_rst+0x8c>
    return;
 800e796:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e798:	371c      	adds	r7, #28
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd90      	pop	{r4, r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	08016478 	.word	0x08016478
 800e7a4:	08016bfc 	.word	0x08016bfc
 800e7a8:	080164cc 	.word	0x080164cc
 800e7ac:	08016c18 	.word	0x08016c18

0800e7b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d106      	bne.n	800e7d4 <tcp_send_empty_ack+0x24>
 800e7c6:	4b28      	ldr	r3, [pc, #160]	@ (800e868 <tcp_send_empty_ack+0xb8>)
 800e7c8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e7cc:	4927      	ldr	r1, [pc, #156]	@ (800e86c <tcp_send_empty_ack+0xbc>)
 800e7ce:	4828      	ldr	r0, [pc, #160]	@ (800e870 <tcp_send_empty_ack+0xc0>)
 800e7d0:	f005 fb66 	bl	8013ea0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e7d4:	7dfb      	ldrb	r3, [r7, #23]
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	f003 0304 	and.w	r3, r3, #4
 800e7de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e7e0:	7d7b      	ldrb	r3, [r7, #21]
 800e7e2:	b29c      	uxth	r4, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f7 fd5c 	bl	80062a6 <lwip_htonl>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff feb3 	bl	800e560 <tcp_output_alloc_header>
 800e7fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d109      	bne.n	800e816 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	8b5b      	ldrh	r3, [r3, #26]
 800e806:	f043 0303 	orr.w	r3, r3, #3
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e810:	f06f 0301 	mvn.w	r3, #1
 800e814:	e023      	b.n	800e85e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e816:	7dbb      	ldrb	r3, [r7, #22]
 800e818:	7dfa      	ldrb	r2, [r7, #23]
 800e81a:	6939      	ldr	r1, [r7, #16]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff fedd 	bl	800e5dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3304      	adds	r3, #4
 800e828:	6939      	ldr	r1, [r7, #16]
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff ff14 	bl	800e658 <tcp_output_control_segment>
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d007      	beq.n	800e84c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8b5b      	ldrh	r3, [r3, #26]
 800e840:	f043 0303 	orr.w	r3, r3, #3
 800e844:	b29a      	uxth	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	835a      	strh	r2, [r3, #26]
 800e84a:	e006      	b.n	800e85a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	8b5b      	ldrh	r3, [r3, #26]
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	b29a      	uxth	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	371c      	adds	r7, #28
 800e862:	46bd      	mov	sp, r7
 800e864:	bd90      	pop	{r4, r7, pc}
 800e866:	bf00      	nop
 800e868:	08016478 	.word	0x08016478
 800e86c:	08016c34 	.word	0x08016c34
 800e870:	080164cc 	.word	0x080164cc

0800e874 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e87c:	2300      	movs	r3, #0
 800e87e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d106      	bne.n	800e894 <tcp_keepalive+0x20>
 800e886:	4b18      	ldr	r3, [pc, #96]	@ (800e8e8 <tcp_keepalive+0x74>)
 800e888:	f640 0224 	movw	r2, #2084	@ 0x824
 800e88c:	4917      	ldr	r1, [pc, #92]	@ (800e8ec <tcp_keepalive+0x78>)
 800e88e:	4818      	ldr	r0, [pc, #96]	@ (800e8f0 <tcp_keepalive+0x7c>)
 800e890:	f005 fb06 	bl	8013ea0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	b29c      	uxth	r4, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e89c:	3b01      	subs	r3, #1
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f7 fd01 	bl	80062a6 <lwip_htonl>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fe58 	bl	800e560 <tcp_output_alloc_header>
 800e8b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d102      	bne.n	800e8be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	e010      	b.n	800e8e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8be:	7dfb      	ldrb	r3, [r7, #23]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	6939      	ldr	r1, [r7, #16]
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff fe89 	bl	800e5dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	6939      	ldr	r1, [r7, #16]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff fec0 	bl	800e658 <tcp_output_control_segment>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	371c      	adds	r7, #28
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd90      	pop	{r4, r7, pc}
 800e8e8:	08016478 	.word	0x08016478
 800e8ec:	08016c54 	.word	0x08016c54
 800e8f0:	080164cc 	.word	0x080164cc

0800e8f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e8f4:	b590      	push	{r4, r7, lr}
 800e8f6:	b08b      	sub	sp, #44	@ 0x2c
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d106      	bne.n	800e916 <tcp_zero_window_probe+0x22>
 800e908:	4b4c      	ldr	r3, [pc, #304]	@ (800ea3c <tcp_zero_window_probe+0x148>)
 800e90a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e90e:	494c      	ldr	r1, [pc, #304]	@ (800ea40 <tcp_zero_window_probe+0x14c>)
 800e910:	484c      	ldr	r0, [pc, #304]	@ (800ea44 <tcp_zero_window_probe+0x150>)
 800e912:	f005 fac5 	bl	8013ea0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e91a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d101      	bne.n	800e926 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	e086      	b.n	800ea34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e92c:	2bff      	cmp	r3, #255	@ 0xff
 800e92e:	d007      	beq.n	800e940 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e936:	3301      	adds	r3, #1
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	899b      	ldrh	r3, [r3, #12]
 800e946:	b29b      	uxth	r3, r3
 800e948:	4618      	mov	r0, r3
 800e94a:	f7f7 fc97 	bl	800627c <lwip_htons>
 800e94e:	4603      	mov	r3, r0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d005      	beq.n	800e966 <tcp_zero_window_probe+0x72>
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	891b      	ldrh	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <tcp_zero_window_probe+0x72>
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <tcp_zero_window_probe+0x74>
 800e966:	2300      	movs	r3, #0
 800e968:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e96a:	7ffb      	ldrb	r3, [r7, #31]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	bf0c      	ite	eq
 800e970:	2301      	moveq	r3, #1
 800e972:	2300      	movne	r3, #0
 800e974:	b2db      	uxtb	r3, r3
 800e976:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e97c:	b299      	uxth	r1, r3
 800e97e:	6a3b      	ldr	r3, [r7, #32]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	8bba      	ldrh	r2, [r7, #28]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff fdea 	bl	800e560 <tcp_output_alloc_header>
 800e98c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e994:	f04f 33ff 	mov.w	r3, #4294967295
 800e998:	e04c      	b.n	800ea34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e9a0:	7ffb      	ldrb	r3, [r7, #31]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d011      	beq.n	800e9ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	899b      	ldrh	r3, [r3, #12]
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	b21b      	sxth	r3, r3
 800e9ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e9b2:	b21c      	sxth	r4, r3
 800e9b4:	2011      	movs	r0, #17
 800e9b6:	f7f7 fc61 	bl	800627c <lwip_htons>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	b21b      	sxth	r3, r3
 800e9be:	4323      	orrs	r3, r4
 800e9c0:	b21b      	sxth	r3, r3
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	819a      	strh	r2, [r3, #12]
 800e9c8:	e010      	b.n	800e9ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	3314      	adds	r3, #20
 800e9d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	6858      	ldr	r0, [r3, #4]
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	891a      	ldrh	r2, [r3, #8]
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	891b      	ldrh	r3, [r3, #8]
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	6939      	ldr	r1, [r7, #16]
 800e9e8:	f7f9 fdce 	bl	8008588 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7f7 fc57 	bl	80062a6 <lwip_htonl>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	da02      	bge.n	800ea10 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ea10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea14:	2200      	movs	r2, #0
 800ea16:	69b9      	ldr	r1, [r7, #24]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7ff fddf 	bl	800e5dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3304      	adds	r3, #4
 800ea24:	69b9      	ldr	r1, [r7, #24]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff fe16 	bl	800e658 <tcp_output_control_segment>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ea30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	372c      	adds	r7, #44	@ 0x2c
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd90      	pop	{r4, r7, pc}
 800ea3c:	08016478 	.word	0x08016478
 800ea40:	08016c70 	.word	0x08016c70
 800ea44:	080164cc 	.word	0x080164cc

0800ea48 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ea50:	f7f9 ffe2 	bl	8008a18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea54:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <tcpip_tcp_timer+0x38>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d103      	bne.n	800ea64 <tcpip_tcp_timer+0x1c>
 800ea5c:	4b09      	ldr	r3, [pc, #36]	@ (800ea84 <tcpip_tcp_timer+0x3c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea64:	2200      	movs	r2, #0
 800ea66:	4908      	ldr	r1, [pc, #32]	@ (800ea88 <tcpip_tcp_timer+0x40>)
 800ea68:	20fa      	movs	r0, #250	@ 0xfa
 800ea6a:	f000 f8f3 	bl	800ec54 <sys_timeout>
 800ea6e:	e003      	b.n	800ea78 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ea70:	4b06      	ldr	r3, [pc, #24]	@ (800ea8c <tcpip_tcp_timer+0x44>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]
  }
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	2000433c 	.word	0x2000433c
 800ea84:	20004340 	.word	0x20004340
 800ea88:	0800ea49 	.word	0x0800ea49
 800ea8c:	20004388 	.word	0x20004388

0800ea90 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea94:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <tcp_timer_needed+0x30>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10f      	bne.n	800eabc <tcp_timer_needed+0x2c>
 800ea9c:	4b09      	ldr	r3, [pc, #36]	@ (800eac4 <tcp_timer_needed+0x34>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d103      	bne.n	800eaac <tcp_timer_needed+0x1c>
 800eaa4:	4b08      	ldr	r3, [pc, #32]	@ (800eac8 <tcp_timer_needed+0x38>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eaac:	4b04      	ldr	r3, [pc, #16]	@ (800eac0 <tcp_timer_needed+0x30>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eab2:	2200      	movs	r2, #0
 800eab4:	4905      	ldr	r1, [pc, #20]	@ (800eacc <tcp_timer_needed+0x3c>)
 800eab6:	20fa      	movs	r0, #250	@ 0xfa
 800eab8:	f000 f8cc 	bl	800ec54 <sys_timeout>
  }
}
 800eabc:	bf00      	nop
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	20004388 	.word	0x20004388
 800eac4:	2000433c 	.word	0x2000433c
 800eac8:	20004340 	.word	0x20004340
 800eacc:	0800ea49 	.word	0x0800ea49

0800ead0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eadc:	2006      	movs	r0, #6
 800eade:	f7f8 fc8b 	bl	80073f8 <memp_malloc>
 800eae2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d109      	bne.n	800eafe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d151      	bne.n	800eb94 <sys_timeout_abs+0xc4>
 800eaf0:	4b2a      	ldr	r3, [pc, #168]	@ (800eb9c <sys_timeout_abs+0xcc>)
 800eaf2:	22be      	movs	r2, #190	@ 0xbe
 800eaf4:	492a      	ldr	r1, [pc, #168]	@ (800eba0 <sys_timeout_abs+0xd0>)
 800eaf6:	482b      	ldr	r0, [pc, #172]	@ (800eba4 <sys_timeout_abs+0xd4>)
 800eaf8:	f005 f9d2 	bl	8013ea0 <iprintf>
    return;
 800eafc:	e04a      	b.n	800eb94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eb16:	4b24      	ldr	r3, [pc, #144]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d103      	bne.n	800eb26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800eb1e:	4a22      	ldr	r2, [pc, #136]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	6013      	str	r3, [r2, #0]
    return;
 800eb24:	e037      	b.n	800eb96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	0fdb      	lsrs	r3, r3, #31
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d007      	beq.n	800eb4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800eb3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800eb46:	4a18      	ldr	r2, [pc, #96]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6013      	str	r3, [r2, #0]
 800eb4c:	e023      	b.n	800eb96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800eb4e:	4b16      	ldr	r3, [pc, #88]	@ (800eba8 <sys_timeout_abs+0xd8>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	617b      	str	r3, [r7, #20]
 800eb54:	e01a      	b.n	800eb8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00b      	beq.n	800eb76 <sys_timeout_abs+0xa6>
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	0fdb      	lsrs	r3, r3, #31
 800eb6c:	f003 0301 	and.w	r3, r3, #1
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d007      	beq.n	800eb86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	601a      	str	r2, [r3, #0]
        break;
 800eb84:	e007      	b.n	800eb96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1e1      	bne.n	800eb56 <sys_timeout_abs+0x86>
 800eb92:	e000      	b.n	800eb96 <sys_timeout_abs+0xc6>
    return;
 800eb94:	bf00      	nop
      }
    }
  }
}
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	08016c94 	.word	0x08016c94
 800eba0:	08016cc8 	.word	0x08016cc8
 800eba4:	08016d08 	.word	0x08016d08
 800eba8:	20004380 	.word	0x20004380

0800ebac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b086      	sub	sp, #24
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	4798      	blx	r3

  now = sys_now();
 800ebbe:	f7f7 f921 	bl	8005e04 <sys_now>
 800ebc2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	4b0f      	ldr	r3, [pc, #60]	@ (800ec08 <lwip_cyclic_timer+0x5c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4413      	add	r3, r2
 800ebce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	0fdb      	lsrs	r3, r3, #31
 800ebd8:	f003 0301 	and.w	r3, r3, #1
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d009      	beq.n	800ebf6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	4413      	add	r3, r2
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	4907      	ldr	r1, [pc, #28]	@ (800ec0c <lwip_cyclic_timer+0x60>)
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff ff6e 	bl	800ead0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ebf4:	e004      	b.n	800ec00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	4904      	ldr	r1, [pc, #16]	@ (800ec0c <lwip_cyclic_timer+0x60>)
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7ff ff68 	bl	800ead0 <sys_timeout_abs>
}
 800ec00:	bf00      	nop
 800ec02:	3718      	adds	r7, #24
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20004384 	.word	0x20004384
 800ec0c:	0800ebad 	.word	0x0800ebad

0800ec10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ec16:	2301      	movs	r3, #1
 800ec18:	607b      	str	r3, [r7, #4]
 800ec1a:	e00e      	b.n	800ec3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ec1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ec4c <sys_timeouts_init+0x3c>)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	00db      	lsls	r3, r3, #3
 800ec28:	4a08      	ldr	r2, [pc, #32]	@ (800ec4c <sys_timeouts_init+0x3c>)
 800ec2a:	4413      	add	r3, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4908      	ldr	r1, [pc, #32]	@ (800ec50 <sys_timeouts_init+0x40>)
 800ec30:	f000 f810 	bl	800ec54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3301      	adds	r3, #1
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b05      	cmp	r3, #5
 800ec3e:	d9ed      	bls.n	800ec1c <sys_timeouts_init+0xc>
  }
}
 800ec40:	bf00      	nop
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08017c54 	.word	0x08017c54
 800ec50:	0800ebad 	.word	0x0800ebad

0800ec54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec66:	d306      	bcc.n	800ec76 <sys_timeout+0x22>
 800ec68:	4b0a      	ldr	r3, [pc, #40]	@ (800ec94 <sys_timeout+0x40>)
 800ec6a:	f240 1229 	movw	r2, #297	@ 0x129
 800ec6e:	490a      	ldr	r1, [pc, #40]	@ (800ec98 <sys_timeout+0x44>)
 800ec70:	480a      	ldr	r0, [pc, #40]	@ (800ec9c <sys_timeout+0x48>)
 800ec72:	f005 f915 	bl	8013ea0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ec76:	f7f7 f8c5 	bl	8005e04 <sys_now>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4413      	add	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	68b9      	ldr	r1, [r7, #8]
 800ec86:	6978      	ldr	r0, [r7, #20]
 800ec88:	f7ff ff22 	bl	800ead0 <sys_timeout_abs>
#endif
}
 800ec8c:	bf00      	nop
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	08016c94 	.word	0x08016c94
 800ec98:	08016d30 	.word	0x08016d30
 800ec9c:	08016d08 	.word	0x08016d08

0800eca0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eca6:	f7f7 f8ad 	bl	8005e04 <sys_now>
 800ecaa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ecac:	4b1a      	ldr	r3, [pc, #104]	@ (800ed18 <sys_check_timeouts+0x78>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <sys_check_timeouts+0x1a>
 800ecb6:	f7f8 ff33 	bl	8007b20 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ecba:	4b18      	ldr	r3, [pc, #96]	@ (800ed1c <sys_check_timeouts+0x7c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d022      	beq.n	800ed0c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	0fdb      	lsrs	r3, r3, #31
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d11a      	bne.n	800ed10 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a0f      	ldr	r2, [pc, #60]	@ (800ed1c <sys_check_timeouts+0x7c>)
 800ece0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	4a0b      	ldr	r2, [pc, #44]	@ (800ed20 <sys_check_timeouts+0x80>)
 800ecf4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ecf6:	68b9      	ldr	r1, [r7, #8]
 800ecf8:	2006      	movs	r0, #6
 800ecfa:	f7f8 fbc9 	bl	8007490 <memp_free>
    if (handler != NULL) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d0d3      	beq.n	800ecac <sys_check_timeouts+0xc>
      handler(arg);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6838      	ldr	r0, [r7, #0]
 800ed08:	4798      	blx	r3
  do {
 800ed0a:	e7cf      	b.n	800ecac <sys_check_timeouts+0xc>
      return;
 800ed0c:	bf00      	nop
 800ed0e:	e000      	b.n	800ed12 <sys_check_timeouts+0x72>
      return;
 800ed10:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	2000432d 	.word	0x2000432d
 800ed1c:	20004380 	.word	0x20004380
 800ed20:	20004384 	.word	0x20004384

0800ed24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed28:	f004 ffba 	bl	8013ca0 <rand>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	4b01      	ldr	r3, [pc, #4]	@ (800ed44 <udp_init+0x20>)
 800ed3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed40:	bf00      	nop
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20000010 	.word	0x20000010

0800ed48 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ed52:	4b17      	ldr	r3, [pc, #92]	@ (800edb0 <udp_new_port+0x68>)
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	b291      	uxth	r1, r2
 800ed5a:	4a15      	ldr	r2, [pc, #84]	@ (800edb0 <udp_new_port+0x68>)
 800ed5c:	8011      	strh	r1, [r2, #0]
 800ed5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d103      	bne.n	800ed6e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ed66:	4b12      	ldr	r3, [pc, #72]	@ (800edb0 <udp_new_port+0x68>)
 800ed68:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ed6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed6e:	4b11      	ldr	r3, [pc, #68]	@ (800edb4 <udp_new_port+0x6c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	e011      	b.n	800ed9a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	8a5a      	ldrh	r2, [r3, #18]
 800ed7a:	4b0d      	ldr	r3, [pc, #52]	@ (800edb0 <udp_new_port+0x68>)
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d108      	bne.n	800ed94 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ed82:	88fb      	ldrh	r3, [r7, #6]
 800ed84:	3301      	adds	r3, #1
 800ed86:	80fb      	strh	r3, [r7, #6]
 800ed88:	88fb      	ldrh	r3, [r7, #6]
 800ed8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed8e:	d3e0      	bcc.n	800ed52 <udp_new_port+0xa>
        return 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	e007      	b.n	800eda4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	603b      	str	r3, [r7, #0]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1ea      	bne.n	800ed76 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800eda0:	4b03      	ldr	r3, [pc, #12]	@ (800edb0 <udp_new_port+0x68>)
 800eda2:	881b      	ldrh	r3, [r3, #0]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr
 800edb0:	20000010 	.word	0x20000010
 800edb4:	2000438c 	.word	0x2000438c

0800edb8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	4613      	mov	r3, r2
 800edc4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d105      	bne.n	800edd8 <udp_input_local_match+0x20>
 800edcc:	4b27      	ldr	r3, [pc, #156]	@ (800ee6c <udp_input_local_match+0xb4>)
 800edce:	2287      	movs	r2, #135	@ 0x87
 800edd0:	4927      	ldr	r1, [pc, #156]	@ (800ee70 <udp_input_local_match+0xb8>)
 800edd2:	4828      	ldr	r0, [pc, #160]	@ (800ee74 <udp_input_local_match+0xbc>)
 800edd4:	f005 f864 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d105      	bne.n	800edea <udp_input_local_match+0x32>
 800edde:	4b23      	ldr	r3, [pc, #140]	@ (800ee6c <udp_input_local_match+0xb4>)
 800ede0:	2288      	movs	r2, #136	@ 0x88
 800ede2:	4925      	ldr	r1, [pc, #148]	@ (800ee78 <udp_input_local_match+0xc0>)
 800ede4:	4823      	ldr	r0, [pc, #140]	@ (800ee74 <udp_input_local_match+0xbc>)
 800ede6:	f005 f85b 	bl	8013ea0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	7a1b      	ldrb	r3, [r3, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	7a1a      	ldrb	r2, [r3, #8]
 800edf6:	4b21      	ldr	r3, [pc, #132]	@ (800ee7c <udp_input_local_match+0xc4>)
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800edfe:	3301      	adds	r3, #1
 800ee00:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d001      	beq.n	800ee0a <udp_input_local_match+0x52>
    return 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	e02b      	b.n	800ee62 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d018      	beq.n	800ee42 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d013      	beq.n	800ee3e <udp_input_local_match+0x86>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00f      	beq.n	800ee3e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee1e:	4b17      	ldr	r3, [pc, #92]	@ (800ee7c <udp_input_local_match+0xc4>)
 800ee20:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee26:	d00a      	beq.n	800ee3e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	4b13      	ldr	r3, [pc, #76]	@ (800ee7c <udp_input_local_match+0xc4>)
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	405a      	eors	r2, r3
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	3308      	adds	r3, #8
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d110      	bne.n	800ee60 <udp_input_local_match+0xa8>
          return 1;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e00f      	b.n	800ee62 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d009      	beq.n	800ee5c <udp_input_local_match+0xa4>
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <udp_input_local_match+0xa4>
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <udp_input_local_match+0xc4>)
 800ee56:	695b      	ldr	r3, [r3, #20]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d101      	bne.n	800ee60 <udp_input_local_match+0xa8>
        return 1;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	08016d7c 	.word	0x08016d7c
 800ee70:	08016dac 	.word	0x08016dac
 800ee74:	08016dd0 	.word	0x08016dd0
 800ee78:	08016df8 	.word	0x08016df8
 800ee7c:	20000d90 	.word	0x20000d90

0800ee80 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b08d      	sub	sp, #52	@ 0x34
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d105      	bne.n	800eea0 <udp_input+0x20>
 800ee94:	4b87      	ldr	r3, [pc, #540]	@ (800f0b4 <udp_input+0x234>)
 800ee96:	22cf      	movs	r2, #207	@ 0xcf
 800ee98:	4987      	ldr	r1, [pc, #540]	@ (800f0b8 <udp_input+0x238>)
 800ee9a:	4888      	ldr	r0, [pc, #544]	@ (800f0bc <udp_input+0x23c>)
 800ee9c:	f005 f800 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d105      	bne.n	800eeb2 <udp_input+0x32>
 800eea6:	4b83      	ldr	r3, [pc, #524]	@ (800f0b4 <udp_input+0x234>)
 800eea8:	22d0      	movs	r2, #208	@ 0xd0
 800eeaa:	4985      	ldr	r1, [pc, #532]	@ (800f0c0 <udp_input+0x240>)
 800eeac:	4883      	ldr	r0, [pc, #524]	@ (800f0bc <udp_input+0x23c>)
 800eeae:	f004 fff7 	bl	8013ea0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	895b      	ldrh	r3, [r3, #10]
 800eeb6:	2b07      	cmp	r3, #7
 800eeb8:	d803      	bhi.n	800eec2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7f9 f96a 	bl	8008194 <pbuf_free>
    goto end;
 800eec0:	e0f0      	b.n	800f0a4 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eec8:	4b7e      	ldr	r3, [pc, #504]	@ (800f0c4 <udp_input+0x244>)
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	4a7d      	ldr	r2, [pc, #500]	@ (800f0c4 <udp_input+0x244>)
 800eece:	6812      	ldr	r2, [r2, #0]
 800eed0:	4611      	mov	r1, r2
 800eed2:	4618      	mov	r0, r3
 800eed4:	f003 ff7e 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 800eed8:	4603      	mov	r3, r0
 800eeda:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f7 f9ca 	bl	800627c <lwip_htons>
 800eee8:	4603      	mov	r3, r0
 800eeea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	885b      	ldrh	r3, [r3, #2]
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f7 f9c2 	bl	800627c <lwip_htons>
 800eef8:	4603      	mov	r3, r0
 800eefa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ef00:	2300      	movs	r3, #0
 800ef02:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef08:	4b6f      	ldr	r3, [pc, #444]	@ (800f0c8 <udp_input+0x248>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef0e:	e054      	b.n	800efba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef12:	8a5b      	ldrh	r3, [r3, #18]
 800ef14:	89fa      	ldrh	r2, [r7, #14]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d14a      	bne.n	800efb0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef1a:	7cfb      	ldrb	r3, [r7, #19]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef22:	f7ff ff49 	bl	800edb8 <udp_input_local_match>
 800ef26:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d041      	beq.n	800efb0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	7c1b      	ldrb	r3, [r3, #16]
 800ef30:	f003 0304 	and.w	r3, r3, #4
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d11d      	bne.n	800ef74 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d102      	bne.n	800ef44 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef40:	61fb      	str	r3, [r7, #28]
 800ef42:	e017      	b.n	800ef74 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ef44:	7cfb      	ldrb	r3, [r7, #19]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d014      	beq.n	800ef74 <udp_input+0xf4>
 800ef4a:	4b5e      	ldr	r3, [pc, #376]	@ (800f0c4 <udp_input+0x244>)
 800ef4c:	695b      	ldr	r3, [r3, #20]
 800ef4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef52:	d10f      	bne.n	800ef74 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d008      	beq.n	800ef74 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ef62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d101      	bne.n	800ef74 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef72:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ef74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef76:	8a9b      	ldrh	r3, [r3, #20]
 800ef78:	8a3a      	ldrh	r2, [r7, #16]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d118      	bne.n	800efb0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef80:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d005      	beq.n	800ef92 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ef86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	4b4e      	ldr	r3, [pc, #312]	@ (800f0c4 <udp_input+0x244>)
 800ef8c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d10e      	bne.n	800efb0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d014      	beq.n	800efc2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ef98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9a:	68da      	ldr	r2, [r3, #12]
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800efa0:	4b49      	ldr	r3, [pc, #292]	@ (800f0c8 <udp_input+0x248>)
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800efa8:	4a47      	ldr	r2, [pc, #284]	@ (800f0c8 <udp_input+0x248>)
 800efaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800efae:	e008      	b.n	800efc2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800efb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1a7      	bne.n	800ef10 <udp_input+0x90>
 800efc0:	e000      	b.n	800efc4 <udp_input+0x144>
        break;
 800efc2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d101      	bne.n	800efce <udp_input+0x14e>
    pcb = uncon_pcb;
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800efce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <udp_input+0x15a>
    for_us = 1;
 800efd4:	2301      	movs	r3, #1
 800efd6:	76fb      	strb	r3, [r7, #27]
 800efd8:	e00a      	b.n	800eff0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	3304      	adds	r3, #4
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	4b38      	ldr	r3, [pc, #224]	@ (800f0c4 <udp_input+0x244>)
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	bf0c      	ite	eq
 800efe8:	2301      	moveq	r3, #1
 800efea:	2300      	movne	r3, #0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eff0:	7efb      	ldrb	r3, [r7, #27]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d052      	beq.n	800f09c <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	88db      	ldrh	r3, [r3, #6]
 800effa:	b29b      	uxth	r3, r3
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00b      	beq.n	800f018 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	891a      	ldrh	r2, [r3, #8]
 800f004:	4b31      	ldr	r3, [pc, #196]	@ (800f0cc <udp_input+0x24c>)
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	4b31      	ldr	r3, [pc, #196]	@ (800f0d0 <udp_input+0x250>)
 800f00a:	2111      	movs	r1, #17
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7f7 fd54 	bl	8006aba <ip_chksum_pseudo>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d146      	bne.n	800f0a6 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f018:	2108      	movs	r1, #8
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7f9 f834 	bl	8008088 <pbuf_remove_header>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f026:	4b23      	ldr	r3, [pc, #140]	@ (800f0b4 <udp_input+0x234>)
 800f028:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f02c:	4929      	ldr	r1, [pc, #164]	@ (800f0d4 <udp_input+0x254>)
 800f02e:	4823      	ldr	r0, [pc, #140]	@ (800f0bc <udp_input+0x23c>)
 800f030:	f004 ff36 	bl	8013ea0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7f9 f8ad 	bl	8008194 <pbuf_free>
      goto end;
 800f03a:	e033      	b.n	800f0a4 <udp_input+0x224>
    }

    if (pcb != NULL) {
 800f03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d012      	beq.n	800f068 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	699c      	ldr	r4, [r3, #24]
 800f04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f050:	69d8      	ldr	r0, [r3, #28]
 800f052:	8a3b      	ldrh	r3, [r7, #16]
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	4b1e      	ldr	r3, [pc, #120]	@ (800f0d0 <udp_input+0x250>)
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f05c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f05e:	e026      	b.n	800f0ae <udp_input+0x22e>
        pbuf_free(p);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7f9 f897 	bl	8008194 <pbuf_free>
        goto end;
 800f066:	e01d      	b.n	800f0a4 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f068:	7cfb      	ldrb	r3, [r7, #19]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d112      	bne.n	800f094 <udp_input+0x214>
 800f06e:	4b15      	ldr	r3, [pc, #84]	@ (800f0c4 <udp_input+0x244>)
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f076:	2be0      	cmp	r3, #224	@ 0xe0
 800f078:	d00c      	beq.n	800f094 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f07a:	4b12      	ldr	r3, [pc, #72]	@ (800f0c4 <udp_input+0x244>)
 800f07c:	899b      	ldrh	r3, [r3, #12]
 800f07e:	3308      	adds	r3, #8
 800f080:	b29b      	uxth	r3, r3
 800f082:	b21b      	sxth	r3, r3
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7f9 f871 	bl	800816e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f08c:	2103      	movs	r1, #3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f003 fae6 	bl	8012660 <icmp_dest_unreach>
      pbuf_free(p);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7f9 f87d 	bl	8008194 <pbuf_free>
  return;
 800f09a:	e008      	b.n	800f0ae <udp_input+0x22e>
    pbuf_free(p);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7f9 f879 	bl	8008194 <pbuf_free>
  return;
 800f0a2:	e004      	b.n	800f0ae <udp_input+0x22e>
 800f0a4:	e003      	b.n	800f0ae <udp_input+0x22e>
            goto chkerr;
 800f0a6:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7f9 f873 	bl	8008194 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f0ae:	372c      	adds	r7, #44	@ 0x2c
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd90      	pop	{r4, r7, pc}
 800f0b4:	08016d7c 	.word	0x08016d7c
 800f0b8:	08016e20 	.word	0x08016e20
 800f0bc:	08016dd0 	.word	0x08016dd0
 800f0c0:	08016e38 	.word	0x08016e38
 800f0c4:	20000d90 	.word	0x20000d90
 800f0c8:	2000438c 	.word	0x2000438c
 800f0cc:	20000da4 	.word	0x20000da4
 800f0d0:	20000da0 	.word	0x20000da0
 800f0d4:	08016e54 	.word	0x08016e54

0800f0d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b088      	sub	sp, #32
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d109      	bne.n	800f100 <udp_sendto+0x28>
 800f0ec:	4b23      	ldr	r3, [pc, #140]	@ (800f17c <udp_sendto+0xa4>)
 800f0ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f0f2:	4923      	ldr	r1, [pc, #140]	@ (800f180 <udp_sendto+0xa8>)
 800f0f4:	4823      	ldr	r0, [pc, #140]	@ (800f184 <udp_sendto+0xac>)
 800f0f6:	f004 fed3 	bl	8013ea0 <iprintf>
 800f0fa:	f06f 030f 	mvn.w	r3, #15
 800f0fe:	e038      	b.n	800f172 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d109      	bne.n	800f11a <udp_sendto+0x42>
 800f106:	4b1d      	ldr	r3, [pc, #116]	@ (800f17c <udp_sendto+0xa4>)
 800f108:	f240 2219 	movw	r2, #537	@ 0x219
 800f10c:	491e      	ldr	r1, [pc, #120]	@ (800f188 <udp_sendto+0xb0>)
 800f10e:	481d      	ldr	r0, [pc, #116]	@ (800f184 <udp_sendto+0xac>)
 800f110:	f004 fec6 	bl	8013ea0 <iprintf>
 800f114:	f06f 030f 	mvn.w	r3, #15
 800f118:	e02b      	b.n	800f172 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d109      	bne.n	800f134 <udp_sendto+0x5c>
 800f120:	4b16      	ldr	r3, [pc, #88]	@ (800f17c <udp_sendto+0xa4>)
 800f122:	f240 221a 	movw	r2, #538	@ 0x21a
 800f126:	4919      	ldr	r1, [pc, #100]	@ (800f18c <udp_sendto+0xb4>)
 800f128:	4816      	ldr	r0, [pc, #88]	@ (800f184 <udp_sendto+0xac>)
 800f12a:	f004 feb9 	bl	8013ea0 <iprintf>
 800f12e:	f06f 030f 	mvn.w	r3, #15
 800f132:	e01e      	b.n	800f172 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	7a1b      	ldrb	r3, [r3, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d006      	beq.n	800f14a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	7a1b      	ldrb	r3, [r3, #8]
 800f140:	4618      	mov	r0, r3
 800f142:	f7f8 fcc7 	bl	8007ad4 <netif_get_by_index>
 800f146:	6178      	str	r0, [r7, #20]
 800f148:	e003      	b.n	800f152 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f003 fb1c 	bl	8012788 <ip4_route>
 800f150:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d102      	bne.n	800f15e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f158:	f06f 0303 	mvn.w	r3, #3
 800f15c:	e009      	b.n	800f172 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f15e:	887a      	ldrh	r2, [r7, #2]
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	4613      	mov	r3, r2
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 f810 	bl	800f190 <udp_sendto_if>
 800f170:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f172:	4618      	mov	r0, r3
 800f174:	3718      	adds	r7, #24
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	08016d7c 	.word	0x08016d7c
 800f180:	08016ea0 	.word	0x08016ea0
 800f184:	08016dd0 	.word	0x08016dd0
 800f188:	08016eb8 	.word	0x08016eb8
 800f18c:	08016ed4 	.word	0x08016ed4

0800f190 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af02      	add	r7, sp, #8
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <udp_sendto_if+0x28>
 800f1a4:	4b2e      	ldr	r3, [pc, #184]	@ (800f260 <udp_sendto_if+0xd0>)
 800f1a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f1aa:	492e      	ldr	r1, [pc, #184]	@ (800f264 <udp_sendto_if+0xd4>)
 800f1ac:	482e      	ldr	r0, [pc, #184]	@ (800f268 <udp_sendto_if+0xd8>)
 800f1ae:	f004 fe77 	bl	8013ea0 <iprintf>
 800f1b2:	f06f 030f 	mvn.w	r3, #15
 800f1b6:	e04f      	b.n	800f258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d109      	bne.n	800f1d2 <udp_sendto_if+0x42>
 800f1be:	4b28      	ldr	r3, [pc, #160]	@ (800f260 <udp_sendto_if+0xd0>)
 800f1c0:	f240 2281 	movw	r2, #641	@ 0x281
 800f1c4:	4929      	ldr	r1, [pc, #164]	@ (800f26c <udp_sendto_if+0xdc>)
 800f1c6:	4828      	ldr	r0, [pc, #160]	@ (800f268 <udp_sendto_if+0xd8>)
 800f1c8:	f004 fe6a 	bl	8013ea0 <iprintf>
 800f1cc:	f06f 030f 	mvn.w	r3, #15
 800f1d0:	e042      	b.n	800f258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d109      	bne.n	800f1ec <udp_sendto_if+0x5c>
 800f1d8:	4b21      	ldr	r3, [pc, #132]	@ (800f260 <udp_sendto_if+0xd0>)
 800f1da:	f240 2282 	movw	r2, #642	@ 0x282
 800f1de:	4924      	ldr	r1, [pc, #144]	@ (800f270 <udp_sendto_if+0xe0>)
 800f1e0:	4821      	ldr	r0, [pc, #132]	@ (800f268 <udp_sendto_if+0xd8>)
 800f1e2:	f004 fe5d 	bl	8013ea0 <iprintf>
 800f1e6:	f06f 030f 	mvn.w	r3, #15
 800f1ea:	e035      	b.n	800f258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <udp_sendto_if+0x76>
 800f1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f260 <udp_sendto_if+0xd0>)
 800f1f4:	f240 2283 	movw	r2, #643	@ 0x283
 800f1f8:	491e      	ldr	r1, [pc, #120]	@ (800f274 <udp_sendto_if+0xe4>)
 800f1fa:	481b      	ldr	r0, [pc, #108]	@ (800f268 <udp_sendto_if+0xd8>)
 800f1fc:	f004 fe50 	bl	8013ea0 <iprintf>
 800f200:	f06f 030f 	mvn.w	r3, #15
 800f204:	e028      	b.n	800f258 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d009      	beq.n	800f220 <udp_sendto_if+0x90>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d005      	beq.n	800f220 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f21c:	2be0      	cmp	r3, #224	@ 0xe0
 800f21e:	d103      	bne.n	800f228 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	3304      	adds	r3, #4
 800f224:	617b      	str	r3, [r7, #20]
 800f226:	e00b      	b.n	800f240 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	3304      	adds	r3, #4
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d002      	beq.n	800f23c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f236:	f06f 0303 	mvn.w	r3, #3
 800f23a:	e00d      	b.n	800f258 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f240:	887a      	ldrh	r2, [r7, #2]
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	9301      	str	r3, [sp, #4]
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	4613      	mov	r3, r2
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	68b9      	ldr	r1, [r7, #8]
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f000 f811 	bl	800f278 <udp_sendto_if_src>
 800f256:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	08016d7c 	.word	0x08016d7c
 800f264:	08016ef0 	.word	0x08016ef0
 800f268:	08016dd0 	.word	0x08016dd0
 800f26c:	08016f0c 	.word	0x08016f0c
 800f270:	08016f28 	.word	0x08016f28
 800f274:	08016f48 	.word	0x08016f48

0800f278 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08c      	sub	sp, #48	@ 0x30
 800f27c:	af04      	add	r7, sp, #16
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d109      	bne.n	800f2a0 <udp_sendto_if_src+0x28>
 800f28c:	4b72      	ldr	r3, [pc, #456]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f28e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f292:	4972      	ldr	r1, [pc, #456]	@ (800f45c <udp_sendto_if_src+0x1e4>)
 800f294:	4872      	ldr	r0, [pc, #456]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f296:	f004 fe03 	bl	8013ea0 <iprintf>
 800f29a:	f06f 030f 	mvn.w	r3, #15
 800f29e:	e0d6      	b.n	800f44e <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d109      	bne.n	800f2ba <udp_sendto_if_src+0x42>
 800f2a6:	4b6c      	ldr	r3, [pc, #432]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f2a8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f2ac:	496d      	ldr	r1, [pc, #436]	@ (800f464 <udp_sendto_if_src+0x1ec>)
 800f2ae:	486c      	ldr	r0, [pc, #432]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f2b0:	f004 fdf6 	bl	8013ea0 <iprintf>
 800f2b4:	f06f 030f 	mvn.w	r3, #15
 800f2b8:	e0c9      	b.n	800f44e <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d109      	bne.n	800f2d4 <udp_sendto_if_src+0x5c>
 800f2c0:	4b65      	ldr	r3, [pc, #404]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f2c2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f2c6:	4968      	ldr	r1, [pc, #416]	@ (800f468 <udp_sendto_if_src+0x1f0>)
 800f2c8:	4865      	ldr	r0, [pc, #404]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f2ca:	f004 fde9 	bl	8013ea0 <iprintf>
 800f2ce:	f06f 030f 	mvn.w	r3, #15
 800f2d2:	e0bc      	b.n	800f44e <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d109      	bne.n	800f2ee <udp_sendto_if_src+0x76>
 800f2da:	4b5f      	ldr	r3, [pc, #380]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f2dc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f2e0:	4962      	ldr	r1, [pc, #392]	@ (800f46c <udp_sendto_if_src+0x1f4>)
 800f2e2:	485f      	ldr	r0, [pc, #380]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f2e4:	f004 fddc 	bl	8013ea0 <iprintf>
 800f2e8:	f06f 030f 	mvn.w	r3, #15
 800f2ec:	e0af      	b.n	800f44e <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d109      	bne.n	800f308 <udp_sendto_if_src+0x90>
 800f2f4:	4b58      	ldr	r3, [pc, #352]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f2f6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f2fa:	495d      	ldr	r1, [pc, #372]	@ (800f470 <udp_sendto_if_src+0x1f8>)
 800f2fc:	4858      	ldr	r0, [pc, #352]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f2fe:	f004 fdcf 	bl	8013ea0 <iprintf>
 800f302:	f06f 030f 	mvn.w	r3, #15
 800f306:	e0a2      	b.n	800f44e <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	8a5b      	ldrh	r3, [r3, #18]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10f      	bne.n	800f330 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f310:	68f9      	ldr	r1, [r7, #12]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	8a5b      	ldrh	r3, [r3, #18]
 800f316:	461a      	mov	r2, r3
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f000 f8ad 	bl	800f478 <udp_bind>
 800f31e:	4603      	mov	r3, r0
 800f320:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800f322:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d002      	beq.n	800f330 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f32a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f32e:	e08e      	b.n	800f44e <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	891b      	ldrh	r3, [r3, #8]
 800f334:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f338:	4293      	cmp	r3, r2
 800f33a:	d902      	bls.n	800f342 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f33c:	f04f 33ff 	mov.w	r3, #4294967295
 800f340:	e085      	b.n	800f44e <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f342:	2108      	movs	r1, #8
 800f344:	68b8      	ldr	r0, [r7, #8]
 800f346:	f7f8 fe8f 	bl	8008068 <pbuf_add_header>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d015      	beq.n	800f37c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f350:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f354:	2108      	movs	r1, #8
 800f356:	2022      	movs	r0, #34	@ 0x22
 800f358:	f7f8 fc38 	bl	8007bcc <pbuf_alloc>
 800f35c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
 800f368:	e071      	b.n	800f44e <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	891b      	ldrh	r3, [r3, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d006      	beq.n	800f380 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	69f8      	ldr	r0, [r7, #28]
 800f376:	f7f9 f825 	bl	80083c4 <pbuf_chain>
 800f37a:	e001      	b.n	800f380 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	895b      	ldrh	r3, [r3, #10]
 800f384:	2b07      	cmp	r3, #7
 800f386:	d806      	bhi.n	800f396 <udp_sendto_if_src+0x11e>
 800f388:	4b33      	ldr	r3, [pc, #204]	@ (800f458 <udp_sendto_if_src+0x1e0>)
 800f38a:	f240 320d 	movw	r2, #781	@ 0x30d
 800f38e:	4939      	ldr	r1, [pc, #228]	@ (800f474 <udp_sendto_if_src+0x1fc>)
 800f390:	4833      	ldr	r0, [pc, #204]	@ (800f460 <udp_sendto_if_src+0x1e8>)
 800f392:	f004 fd85 	bl	8013ea0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	8a5b      	ldrh	r3, [r3, #18]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7f6 ff6b 	bl	800627c <lwip_htons>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f3ae:	887b      	ldrh	r3, [r7, #2]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f6 ff63 	bl	800627c <lwip_htons>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	719a      	strb	r2, [r3, #6]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	891b      	ldrh	r3, [r3, #8]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7f6 ff55 	bl	800627c <lwip_htons>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	7c1b      	ldrb	r3, [r3, #16]
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d113      	bne.n	800f40e <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	891a      	ldrh	r2, [r3, #8]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f0:	2111      	movs	r1, #17
 800f3f2:	69f8      	ldr	r0, [r7, #28]
 800f3f4:	f7f7 fb61 	bl	8006aba <ip_chksum_pseudo>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800f3fc:	8b7b      	ldrh	r3, [r7, #26]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d102      	bne.n	800f408 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800f402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f406:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	8b7a      	ldrh	r2, [r7, #26]
 800f40c:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f40e:	2311      	movs	r3, #17
 800f410:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	7adb      	ldrb	r3, [r3, #11]
 800f416:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	7a9b      	ldrb	r3, [r3, #10]
 800f41c:	7cb9      	ldrb	r1, [r7, #18]
 800f41e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f420:	9202      	str	r2, [sp, #8]
 800f422:	7cfa      	ldrb	r2, [r7, #19]
 800f424:	9201      	str	r2, [sp, #4]
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	460b      	mov	r3, r1
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f42e:	69f8      	ldr	r0, [r7, #28]
 800f430:	f003 fbbc 	bl	8012bac <ip4_output_if_src>
 800f434:	4603      	mov	r3, r0
 800f436:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d004      	beq.n	800f44a <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800f440:	69f8      	ldr	r0, [r7, #28]
 800f442:	f7f8 fea7 	bl	8008194 <pbuf_free>
    q = NULL;
 800f446:	2300      	movs	r3, #0
 800f448:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f44a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3720      	adds	r7, #32
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	08016d7c 	.word	0x08016d7c
 800f45c:	08016f68 	.word	0x08016f68
 800f460:	08016dd0 	.word	0x08016dd0
 800f464:	08016f88 	.word	0x08016f88
 800f468:	08016fa8 	.word	0x08016fa8
 800f46c:	08016fcc 	.word	0x08016fcc
 800f470:	08016ff0 	.word	0x08016ff0
 800f474:	08017014 	.word	0x08017014

0800f478 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	4613      	mov	r3, r2
 800f484:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f48c:	4b39      	ldr	r3, [pc, #228]	@ (800f574 <udp_bind+0xfc>)
 800f48e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d109      	bne.n	800f4aa <udp_bind+0x32>
 800f496:	4b38      	ldr	r3, [pc, #224]	@ (800f578 <udp_bind+0x100>)
 800f498:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f49c:	4937      	ldr	r1, [pc, #220]	@ (800f57c <udp_bind+0x104>)
 800f49e:	4838      	ldr	r0, [pc, #224]	@ (800f580 <udp_bind+0x108>)
 800f4a0:	f004 fcfe 	bl	8013ea0 <iprintf>
 800f4a4:	f06f 030f 	mvn.w	r3, #15
 800f4a8:	e060      	b.n	800f56c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4ae:	4b35      	ldr	r3, [pc, #212]	@ (800f584 <udp_bind+0x10c>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e009      	b.n	800f4ca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d102      	bne.n	800f4c4 <udp_bind+0x4c>
      rebind = 1;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	74fb      	strb	r3, [r7, #19]
      break;
 800f4c2:	e005      	b.n	800f4d0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	617b      	str	r3, [r7, #20]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1f2      	bne.n	800f4b6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f4d0:	88fb      	ldrh	r3, [r7, #6]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d109      	bne.n	800f4ea <udp_bind+0x72>
    port = udp_new_port();
 800f4d6:	f7ff fc37 	bl	800ed48 <udp_new_port>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d12c      	bne.n	800f53e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f4e4:	f06f 0307 	mvn.w	r3, #7
 800f4e8:	e040      	b.n	800f56c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4ea:	4b26      	ldr	r3, [pc, #152]	@ (800f584 <udp_bind+0x10c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	617b      	str	r3, [r7, #20]
 800f4f0:	e022      	b.n	800f538 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d01b      	beq.n	800f532 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	8a5b      	ldrh	r3, [r3, #18]
 800f4fe:	88fa      	ldrh	r2, [r7, #6]
 800f500:	429a      	cmp	r2, r3
 800f502:	d116      	bne.n	800f532 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d00d      	beq.n	800f52c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00a      	beq.n	800f52c <udp_bind+0xb4>
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d006      	beq.n	800f52c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f51e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f520:	2b00      	cmp	r3, #0
 800f522:	d003      	beq.n	800f52c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f52c:	f06f 0307 	mvn.w	r3, #7
 800f530:	e01c      	b.n	800f56c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	617b      	str	r3, [r7, #20]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1d9      	bne.n	800f4f2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <udp_bind+0xd2>
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	e000      	b.n	800f54c <udp_bind+0xd4>
 800f54a:	2300      	movs	r3, #0
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	88fa      	ldrh	r2, [r7, #6]
 800f554:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f556:	7cfb      	ldrb	r3, [r7, #19]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d106      	bne.n	800f56a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f55c:	4b09      	ldr	r3, [pc, #36]	@ (800f584 <udp_bind+0x10c>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f564:	4a07      	ldr	r2, [pc, #28]	@ (800f584 <udp_bind+0x10c>)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08017c84 	.word	0x08017c84
 800f578:	08016d7c 	.word	0x08016d7c
 800f57c:	08017044 	.word	0x08017044
 800f580:	08016dd0 	.word	0x08016dd0
 800f584:	2000438c 	.word	0x2000438c

0800f588 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	4613      	mov	r3, r2
 800f594:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d109      	bne.n	800f5b0 <udp_connect+0x28>
 800f59c:	4b2c      	ldr	r3, [pc, #176]	@ (800f650 <udp_connect+0xc8>)
 800f59e:	f240 4235 	movw	r2, #1077	@ 0x435
 800f5a2:	492c      	ldr	r1, [pc, #176]	@ (800f654 <udp_connect+0xcc>)
 800f5a4:	482c      	ldr	r0, [pc, #176]	@ (800f658 <udp_connect+0xd0>)
 800f5a6:	f004 fc7b 	bl	8013ea0 <iprintf>
 800f5aa:	f06f 030f 	mvn.w	r3, #15
 800f5ae:	e04b      	b.n	800f648 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d109      	bne.n	800f5ca <udp_connect+0x42>
 800f5b6:	4b26      	ldr	r3, [pc, #152]	@ (800f650 <udp_connect+0xc8>)
 800f5b8:	f240 4236 	movw	r2, #1078	@ 0x436
 800f5bc:	4927      	ldr	r1, [pc, #156]	@ (800f65c <udp_connect+0xd4>)
 800f5be:	4826      	ldr	r0, [pc, #152]	@ (800f658 <udp_connect+0xd0>)
 800f5c0:	f004 fc6e 	bl	8013ea0 <iprintf>
 800f5c4:	f06f 030f 	mvn.w	r3, #15
 800f5c8:	e03e      	b.n	800f648 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	8a5b      	ldrh	r3, [r3, #18]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10f      	bne.n	800f5f2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f5d2:	68f9      	ldr	r1, [r7, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	8a5b      	ldrh	r3, [r3, #18]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7ff ff4c 	bl	800f478 <udp_bind>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f5e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <udp_connect+0x6a>
      return err;
 800f5ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5f0:	e02a      	b.n	800f648 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <udp_connect+0x76>
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	e000      	b.n	800f600 <udp_connect+0x78>
 800f5fe:	2300      	movs	r3, #0
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	88fa      	ldrh	r2, [r7, #6]
 800f608:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	7c1b      	ldrb	r3, [r3, #16]
 800f60e:	f043 0304 	orr.w	r3, r3, #4
 800f612:	b2da      	uxtb	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f618:	4b11      	ldr	r3, [pc, #68]	@ (800f660 <udp_connect+0xd8>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	617b      	str	r3, [r7, #20]
 800f61e:	e008      	b.n	800f632 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	429a      	cmp	r2, r3
 800f626:	d101      	bne.n	800f62c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	e00d      	b.n	800f648 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	617b      	str	r3, [r7, #20]
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d1f3      	bne.n	800f620 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f638:	4b09      	ldr	r3, [pc, #36]	@ (800f660 <udp_connect+0xd8>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f640:	4a07      	ldr	r2, [pc, #28]	@ (800f660 <udp_connect+0xd8>)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	08016d7c 	.word	0x08016d7c
 800f654:	0801705c 	.word	0x0801705c
 800f658:	08016dd0 	.word	0x08016dd0
 800f65c:	08017078 	.word	0x08017078
 800f660:	2000438c 	.word	0x2000438c

0800f664 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d107      	bne.n	800f686 <udp_recv+0x22>
 800f676:	4b08      	ldr	r3, [pc, #32]	@ (800f698 <udp_recv+0x34>)
 800f678:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f67c:	4907      	ldr	r1, [pc, #28]	@ (800f69c <udp_recv+0x38>)
 800f67e:	4808      	ldr	r0, [pc, #32]	@ (800f6a0 <udp_recv+0x3c>)
 800f680:	f004 fc0e 	bl	8013ea0 <iprintf>
 800f684:	e005      	b.n	800f692 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	61da      	str	r2, [r3, #28]
}
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	08016d7c 	.word	0x08016d7c
 800f69c:	080170b0 	.word	0x080170b0
 800f6a0:	08016dd0 	.word	0x08016dd0

0800f6a4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d107      	bne.n	800f6c2 <udp_remove+0x1e>
 800f6b2:	4b19      	ldr	r3, [pc, #100]	@ (800f718 <udp_remove+0x74>)
 800f6b4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f6b8:	4918      	ldr	r1, [pc, #96]	@ (800f71c <udp_remove+0x78>)
 800f6ba:	4819      	ldr	r0, [pc, #100]	@ (800f720 <udp_remove+0x7c>)
 800f6bc:	f004 fbf0 	bl	8013ea0 <iprintf>
 800f6c0:	e026      	b.n	800f710 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f6c2:	4b18      	ldr	r3, [pc, #96]	@ (800f724 <udp_remove+0x80>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d105      	bne.n	800f6d8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f6cc:	4b15      	ldr	r3, [pc, #84]	@ (800f724 <udp_remove+0x80>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	4a14      	ldr	r2, [pc, #80]	@ (800f724 <udp_remove+0x80>)
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	e017      	b.n	800f708 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f6d8:	4b12      	ldr	r3, [pc, #72]	@ (800f724 <udp_remove+0x80>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	60fb      	str	r3, [r7, #12]
 800f6de:	e010      	b.n	800f702 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d009      	beq.n	800f6fc <udp_remove+0x58>
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d104      	bne.n	800f6fc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	60da      	str	r2, [r3, #12]
        break;
 800f6fa:	e005      	b.n	800f708 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1eb      	bne.n	800f6e0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f708:	6879      	ldr	r1, [r7, #4]
 800f70a:	2000      	movs	r0, #0
 800f70c:	f7f7 fec0 	bl	8007490 <memp_free>
}
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	08016d7c 	.word	0x08016d7c
 800f71c:	080170c8 	.word	0x080170c8
 800f720:	08016dd0 	.word	0x08016dd0
 800f724:	2000438c 	.word	0x2000438c

0800f728 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f72e:	2000      	movs	r0, #0
 800f730:	f7f7 fe62 	bl	80073f8 <memp_malloc>
 800f734:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d007      	beq.n	800f74c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f73c:	2220      	movs	r2, #32
 800f73e:	2100      	movs	r1, #0
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f004 fc12 	bl	8013f6a <memset>
    pcb->ttl = UDP_TTL;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	22ff      	movs	r2, #255	@ 0xff
 800f74a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f74c:	687b      	ldr	r3, [r7, #4]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
	...

0800f758 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d01e      	beq.n	800f7a6 <udp_netif_ip_addr_changed+0x4e>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d01a      	beq.n	800f7a6 <udp_netif_ip_addr_changed+0x4e>
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d017      	beq.n	800f7a6 <udp_netif_ip_addr_changed+0x4e>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d013      	beq.n	800f7a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f77e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b4 <udp_netif_ip_addr_changed+0x5c>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	60fb      	str	r3, [r7, #12]
 800f784:	e00c      	b.n	800f7a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d103      	bne.n	800f79a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	60fb      	str	r3, [r7, #12]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d1ef      	bne.n	800f786 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f7a6:	bf00      	nop
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000438c 	.word	0x2000438c

0800f7b8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f7bc:	4b20      	ldr	r3, [pc, #128]	@ (800f840 <dhcp_inc_pcb_refcount+0x88>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d133      	bne.n	800f82c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f7c4:	4b1f      	ldr	r3, [pc, #124]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d005      	beq.n	800f7d8 <dhcp_inc_pcb_refcount+0x20>
 800f7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f848 <dhcp_inc_pcb_refcount+0x90>)
 800f7ce:	22e5      	movs	r2, #229	@ 0xe5
 800f7d0:	491e      	ldr	r1, [pc, #120]	@ (800f84c <dhcp_inc_pcb_refcount+0x94>)
 800f7d2:	481f      	ldr	r0, [pc, #124]	@ (800f850 <dhcp_inc_pcb_refcount+0x98>)
 800f7d4:	f004 fb64 	bl	8013ea0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f7d8:	f7ff ffa6 	bl	800f728 <udp_new>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	4a19      	ldr	r2, [pc, #100]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f7e0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f7e2:	4b18      	ldr	r3, [pc, #96]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d102      	bne.n	800f7f0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ee:	e024      	b.n	800f83a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f7f0:	4b14      	ldr	r3, [pc, #80]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	7a5a      	ldrb	r2, [r3, #9]
 800f7f6:	4b13      	ldr	r3, [pc, #76]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f042 0220 	orr.w	r2, r2, #32
 800f7fe:	b2d2      	uxtb	r2, r2
 800f800:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f802:	4b10      	ldr	r3, [pc, #64]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2244      	movs	r2, #68	@ 0x44
 800f808:	4912      	ldr	r1, [pc, #72]	@ (800f854 <dhcp_inc_pcb_refcount+0x9c>)
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff fe34 	bl	800f478 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f810:	4b0c      	ldr	r3, [pc, #48]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2243      	movs	r2, #67	@ 0x43
 800f816:	490f      	ldr	r1, [pc, #60]	@ (800f854 <dhcp_inc_pcb_refcount+0x9c>)
 800f818:	4618      	mov	r0, r3
 800f81a:	f7ff feb5 	bl	800f588 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f81e:	4b09      	ldr	r3, [pc, #36]	@ (800f844 <dhcp_inc_pcb_refcount+0x8c>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2200      	movs	r2, #0
 800f824:	490c      	ldr	r1, [pc, #48]	@ (800f858 <dhcp_inc_pcb_refcount+0xa0>)
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff ff1c 	bl	800f664 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f82c:	4b04      	ldr	r3, [pc, #16]	@ (800f840 <dhcp_inc_pcb_refcount+0x88>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	3301      	adds	r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	4b02      	ldr	r3, [pc, #8]	@ (800f840 <dhcp_inc_pcb_refcount+0x88>)
 800f836:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	200043c8 	.word	0x200043c8
 800f844:	200043c4 	.word	0x200043c4
 800f848:	080170e0 	.word	0x080170e0
 800f84c:	08017118 	.word	0x08017118
 800f850:	08017140 	.word	0x08017140
 800f854:	08017c84 	.word	0x08017c84
 800f858:	08011181 	.word	0x08011181

0800f85c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f860:	4b0e      	ldr	r3, [pc, #56]	@ (800f89c <dhcp_dec_pcb_refcount+0x40>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d105      	bne.n	800f874 <dhcp_dec_pcb_refcount+0x18>
 800f868:	4b0d      	ldr	r3, [pc, #52]	@ (800f8a0 <dhcp_dec_pcb_refcount+0x44>)
 800f86a:	22ff      	movs	r2, #255	@ 0xff
 800f86c:	490d      	ldr	r1, [pc, #52]	@ (800f8a4 <dhcp_dec_pcb_refcount+0x48>)
 800f86e:	480e      	ldr	r0, [pc, #56]	@ (800f8a8 <dhcp_dec_pcb_refcount+0x4c>)
 800f870:	f004 fb16 	bl	8013ea0 <iprintf>
  dhcp_pcb_refcount--;
 800f874:	4b09      	ldr	r3, [pc, #36]	@ (800f89c <dhcp_dec_pcb_refcount+0x40>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	3b01      	subs	r3, #1
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	4b07      	ldr	r3, [pc, #28]	@ (800f89c <dhcp_dec_pcb_refcount+0x40>)
 800f87e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f880:	4b06      	ldr	r3, [pc, #24]	@ (800f89c <dhcp_dec_pcb_refcount+0x40>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d107      	bne.n	800f898 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f888:	4b08      	ldr	r3, [pc, #32]	@ (800f8ac <dhcp_dec_pcb_refcount+0x50>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff ff09 	bl	800f6a4 <udp_remove>
    dhcp_pcb = NULL;
 800f892:	4b06      	ldr	r3, [pc, #24]	@ (800f8ac <dhcp_dec_pcb_refcount+0x50>)
 800f894:	2200      	movs	r2, #0
 800f896:	601a      	str	r2, [r3, #0]
  }
}
 800f898:	bf00      	nop
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	200043c8 	.word	0x200043c8
 800f8a0:	080170e0 	.word	0x080170e0
 800f8a4:	08017168 	.word	0x08017168
 800f8a8:	08017140 	.word	0x08017140
 800f8ac:	200043c4 	.word	0x200043c4

0800f8b0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f8be:	210c      	movs	r1, #12
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f001 f86f 	bl	80109a4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f8c6:	4b06      	ldr	r3, [pc, #24]	@ (800f8e0 <dhcp_handle_nak+0x30>)
 800f8c8:	4a05      	ldr	r2, [pc, #20]	@ (800f8e0 <dhcp_handle_nak+0x30>)
 800f8ca:	4905      	ldr	r1, [pc, #20]	@ (800f8e0 <dhcp_handle_nak+0x30>)
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7f7 ff81 	bl	80077d4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fc68 	bl	80101a8 <dhcp_discover>
}
 800f8d8:	bf00      	nop
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	08017c84 	.word	0x08017c84

0800f8e4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8f0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f8f2:	2108      	movs	r1, #8
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f001 f855 	bl	80109a4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	331c      	adds	r3, #28
 800f8fe:	2200      	movs	r2, #0
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f002 fb86 	bl	8012014 <etharp_query>
 800f908:	4603      	mov	r3, r0
 800f90a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	799b      	ldrb	r3, [r3, #6]
 800f910:	2bff      	cmp	r3, #255	@ 0xff
 800f912:	d005      	beq.n	800f920 <dhcp_check+0x3c>
    dhcp->tries++;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	799b      	ldrb	r3, [r3, #6]
 800f918:	3301      	adds	r3, #1
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f920:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800f924:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f926:	893b      	ldrh	r3, [r7, #8]
 800f928:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f92c:	4a06      	ldr	r2, [pc, #24]	@ (800f948 <dhcp_check+0x64>)
 800f92e:	fb82 1203 	smull	r1, r2, r2, r3
 800f932:	1152      	asrs	r2, r2, #5
 800f934:	17db      	asrs	r3, r3, #31
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	b29a      	uxth	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f93e:	bf00      	nop
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	10624dd3 	.word	0x10624dd3

0800f94c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f95c:	4b0c      	ldr	r3, [pc, #48]	@ (800f990 <dhcp_handle_offer+0x44>)
 800f95e:	789b      	ldrb	r3, [r3, #2]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d011      	beq.n	800f988 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2200      	movs	r2, #0
 800f968:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f96a:	4b0a      	ldr	r3, [pc, #40]	@ (800f994 <dhcp_handle_offer+0x48>)
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f6 fc99 	bl	80062a6 <lwip_htonl>
 800f974:	4602      	mov	r2, r0
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	691a      	ldr	r2, [r3, #16]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f808 	bl	800f998 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f988:	bf00      	nop
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	200043b8 	.word	0x200043b8
 800f994:	20004390 	.word	0x20004390

0800f998 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f998:	b5b0      	push	{r4, r5, r7, lr}
 800f99a:	b08a      	sub	sp, #40	@ 0x28
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d109      	bne.n	800f9ba <dhcp_select+0x22>
 800f9a6:	4b71      	ldr	r3, [pc, #452]	@ (800fb6c <dhcp_select+0x1d4>)
 800f9a8:	f240 1277 	movw	r2, #375	@ 0x177
 800f9ac:	4970      	ldr	r1, [pc, #448]	@ (800fb70 <dhcp_select+0x1d8>)
 800f9ae:	4871      	ldr	r0, [pc, #452]	@ (800fb74 <dhcp_select+0x1dc>)
 800f9b0:	f004 fa76 	bl	8013ea0 <iprintf>
 800f9b4:	f06f 030f 	mvn.w	r3, #15
 800f9b8:	e0d3      	b.n	800fb62 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9be:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <dhcp_select+0x42>
 800f9c6:	4b69      	ldr	r3, [pc, #420]	@ (800fb6c <dhcp_select+0x1d4>)
 800f9c8:	f240 1279 	movw	r2, #377	@ 0x179
 800f9cc:	496a      	ldr	r1, [pc, #424]	@ (800fb78 <dhcp_select+0x1e0>)
 800f9ce:	4869      	ldr	r0, [pc, #420]	@ (800fb74 <dhcp_select+0x1dc>)
 800f9d0:	f004 fa66 	bl	8013ea0 <iprintf>
 800f9d4:	f06f 0305 	mvn.w	r3, #5
 800f9d8:	e0c3      	b.n	800fb62 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f9da:	2101      	movs	r1, #1
 800f9dc:	69b8      	ldr	r0, [r7, #24]
 800f9de:	f000 ffe1 	bl	80109a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f9e2:	f107 030c 	add.w	r3, r7, #12
 800f9e6:	2203      	movs	r2, #3
 800f9e8:	69b9      	ldr	r1, [r7, #24]
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 fc96 	bl	801131c <dhcp_create_msg>
 800f9f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 8085 	beq.w	800fb04 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fa00:	89b8      	ldrh	r0, [r7, #12]
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa08:	2302      	movs	r3, #2
 800fa0a:	2239      	movs	r2, #57	@ 0x39
 800fa0c:	f000 ffe4 	bl	80109d8 <dhcp_option>
 800fa10:	4603      	mov	r3, r0
 800fa12:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa14:	89b8      	ldrh	r0, [r7, #12]
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa20:	461a      	mov	r2, r3
 800fa22:	f001 f833 	bl	8010a8c <dhcp_option_short>
 800fa26:	4603      	mov	r3, r0
 800fa28:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fa2a:	89b8      	ldrh	r0, [r7, #12]
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa32:	2304      	movs	r3, #4
 800fa34:	2232      	movs	r2, #50	@ 0x32
 800fa36:	f000 ffcf 	bl	80109d8 <dhcp_option>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fa3e:	89bc      	ldrh	r4, [r7, #12]
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f6 fc2b 	bl	80062a6 <lwip_htonl>
 800fa50:	4603      	mov	r3, r0
 800fa52:	461a      	mov	r2, r3
 800fa54:	4629      	mov	r1, r5
 800fa56:	4620      	mov	r0, r4
 800fa58:	f001 f84a 	bl	8010af0 <dhcp_option_long>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fa60:	89b8      	ldrh	r0, [r7, #12]
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa68:	2304      	movs	r3, #4
 800fa6a:	2236      	movs	r2, #54	@ 0x36
 800fa6c:	f000 ffb4 	bl	80109d8 <dhcp_option>
 800fa70:	4603      	mov	r3, r0
 800fa72:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fa74:	89bc      	ldrh	r4, [r7, #12]
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	699b      	ldr	r3, [r3, #24]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f6 fc10 	bl	80062a6 <lwip_htonl>
 800fa86:	4603      	mov	r3, r0
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f001 f82f 	bl	8010af0 <dhcp_option_long>
 800fa92:	4603      	mov	r3, r0
 800fa94:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa96:	89b8      	ldrh	r0, [r7, #12]
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa9e:	2304      	movs	r3, #4
 800faa0:	2237      	movs	r2, #55	@ 0x37
 800faa2:	f000 ff99 	bl	80109d8 <dhcp_option>
 800faa6:	4603      	mov	r3, r0
 800faa8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800faaa:	2300      	movs	r3, #0
 800faac:	77bb      	strb	r3, [r7, #30]
 800faae:	e00e      	b.n	800face <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fab0:	89b8      	ldrh	r0, [r7, #12]
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fab8:	7fbb      	ldrb	r3, [r7, #30]
 800faba:	4a30      	ldr	r2, [pc, #192]	@ (800fb7c <dhcp_select+0x1e4>)
 800fabc:	5cd3      	ldrb	r3, [r2, r3]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f000 ffbe 	bl	8010a40 <dhcp_option_byte>
 800fac4:	4603      	mov	r3, r0
 800fac6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fac8:	7fbb      	ldrb	r3, [r7, #30]
 800faca:	3301      	adds	r3, #1
 800facc:	77bb      	strb	r3, [r7, #30]
 800face:	7fbb      	ldrb	r3, [r7, #30]
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d9ed      	bls.n	800fab0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fad4:	89b8      	ldrh	r0, [r7, #12]
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	33f0      	adds	r3, #240	@ 0xf0
 800fada:	697a      	ldr	r2, [r7, #20]
 800fadc:	4619      	mov	r1, r3
 800fade:	f001 fcf3 	bl	80114c8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fae2:	4b27      	ldr	r3, [pc, #156]	@ (800fb80 <dhcp_select+0x1e8>)
 800fae4:	6818      	ldr	r0, [r3, #0]
 800fae6:	4b27      	ldr	r3, [pc, #156]	@ (800fb84 <dhcp_select+0x1ec>)
 800fae8:	9301      	str	r3, [sp, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	2343      	movs	r3, #67	@ 0x43
 800faf0:	4a25      	ldr	r2, [pc, #148]	@ (800fb88 <dhcp_select+0x1f0>)
 800faf2:	6979      	ldr	r1, [r7, #20]
 800faf4:	f7ff fbc0 	bl	800f278 <udp_sendto_if_src>
 800faf8:	4603      	mov	r3, r0
 800fafa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fafc:	6978      	ldr	r0, [r7, #20]
 800fafe:	f7f8 fb49 	bl	8008194 <pbuf_free>
 800fb02:	e001      	b.n	800fb08 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fb04:	23ff      	movs	r3, #255	@ 0xff
 800fb06:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	799b      	ldrb	r3, [r3, #6]
 800fb0c:	2bff      	cmp	r3, #255	@ 0xff
 800fb0e:	d005      	beq.n	800fb1c <dhcp_select+0x184>
    dhcp->tries++;
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	799b      	ldrb	r3, [r3, #6]
 800fb14:	3301      	adds	r3, #1
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	799b      	ldrb	r3, [r3, #6]
 800fb20:	2b05      	cmp	r3, #5
 800fb22:	d80d      	bhi.n	800fb40 <dhcp_select+0x1a8>
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	799b      	ldrb	r3, [r3, #6]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4093      	lsls	r3, r2
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	461a      	mov	r2, r3
 800fb32:	0152      	lsls	r2, r2, #5
 800fb34:	1ad2      	subs	r2, r2, r3
 800fb36:	0092      	lsls	r2, r2, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	e001      	b.n	800fb44 <dhcp_select+0x1ac>
 800fb40:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fb44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb46:	89fb      	ldrh	r3, [r7, #14]
 800fb48:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fb4c:	4a0f      	ldr	r2, [pc, #60]	@ (800fb8c <dhcp_select+0x1f4>)
 800fb4e:	fb82 1203 	smull	r1, r2, r2, r3
 800fb52:	1152      	asrs	r2, r2, #5
 800fb54:	17db      	asrs	r3, r3, #31
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3720      	adds	r7, #32
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bdb0      	pop	{r4, r5, r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	080170e0 	.word	0x080170e0
 800fb70:	0801718c 	.word	0x0801718c
 800fb74:	08017140 	.word	0x08017140
 800fb78:	080171a8 	.word	0x080171a8
 800fb7c:	20000014 	.word	0x20000014
 800fb80:	200043c4 	.word	0x200043c4
 800fb84:	08017c84 	.word	0x08017c84
 800fb88:	08017c88 	.word	0x08017c88
 800fb8c:	10624dd3 	.word	0x10624dd3

0800fb90 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fb96:	4b27      	ldr	r3, [pc, #156]	@ (800fc34 <dhcp_coarse_tmr+0xa4>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	607b      	str	r3, [r7, #4]
 800fb9c:	e042      	b.n	800fc24 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fba2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d039      	beq.n	800fc1e <dhcp_coarse_tmr+0x8e>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	795b      	ldrb	r3, [r3, #5]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d035      	beq.n	800fc1e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	8a9b      	ldrh	r3, [r3, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d012      	beq.n	800fbe0 <dhcp_coarse_tmr+0x50>
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	8a5b      	ldrh	r3, [r3, #18]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	825a      	strh	r2, [r3, #18]
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	8a5a      	ldrh	r2, [r3, #18]
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	8a9b      	ldrh	r3, [r3, #20]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d106      	bne.n	800fbe0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 fe4c 	bl	8010870 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 f989 	bl	800fef0 <dhcp_start>
 800fbde:	e01e      	b.n	800fc1e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	8a1b      	ldrh	r3, [r3, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00b      	beq.n	800fc00 <dhcp_coarse_tmr+0x70>
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	8a1b      	ldrh	r3, [r3, #16]
 800fbec:	1e5a      	subs	r2, r3, #1
 800fbee:	b291      	uxth	r1, r2
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	8211      	strh	r1, [r2, #16]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d103      	bne.n	800fc00 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f8c6 	bl	800fd8a <dhcp_t2_timeout>
 800fbfe:	e00e      	b.n	800fc1e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	89db      	ldrh	r3, [r3, #14]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00a      	beq.n	800fc1e <dhcp_coarse_tmr+0x8e>
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	89db      	ldrh	r3, [r3, #14]
 800fc0c:	1e5a      	subs	r2, r3, #1
 800fc0e:	b291      	uxth	r1, r2
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	81d1      	strh	r1, [r2, #14]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d102      	bne.n	800fc1e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f888 	bl	800fd2e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	607b      	str	r3, [r7, #4]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1b9      	bne.n	800fb9e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fc2a:	bf00      	nop
 800fc2c:	bf00      	nop
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	20004324 	.word	0x20004324

0800fc38 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fc3e:	4b16      	ldr	r3, [pc, #88]	@ (800fc98 <dhcp_fine_tmr+0x60>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	e020      	b.n	800fc88 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc4a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d017      	beq.n	800fc82 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	891b      	ldrh	r3, [r3, #8]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d906      	bls.n	800fc68 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	891b      	ldrh	r3, [r3, #8]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	811a      	strh	r2, [r3, #8]
 800fc66:	e00c      	b.n	800fc82 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	891b      	ldrh	r3, [r3, #8]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d108      	bne.n	800fc82 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	891b      	ldrh	r3, [r3, #8]
 800fc74:	3b01      	subs	r3, #1
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f80d 	bl	800fc9c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	607b      	str	r3, [r7, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1db      	bne.n	800fc46 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fc8e:	bf00      	nop
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	20004324 	.word	0x20004324

0800fc9c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fca8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	795b      	ldrb	r3, [r3, #5]
 800fcae:	2b0c      	cmp	r3, #12
 800fcb0:	d003      	beq.n	800fcba <dhcp_timeout+0x1e>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	795b      	ldrb	r3, [r3, #5]
 800fcb6:	2b06      	cmp	r3, #6
 800fcb8:	d103      	bne.n	800fcc2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fa74 	bl	80101a8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fcc0:	e031      	b.n	800fd26 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	795b      	ldrb	r3, [r3, #5]
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d10e      	bne.n	800fce8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	799b      	ldrb	r3, [r3, #6]
 800fcce:	2b05      	cmp	r3, #5
 800fcd0:	d803      	bhi.n	800fcda <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff fe60 	bl	800f998 <dhcp_select>
}
 800fcd8:	e025      	b.n	800fd26 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fdc8 	bl	8010870 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f905 	bl	800fef0 <dhcp_start>
}
 800fce6:	e01e      	b.n	800fd26 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	795b      	ldrb	r3, [r3, #5]
 800fcec:	2b08      	cmp	r3, #8
 800fcee:	d10b      	bne.n	800fd08 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	799b      	ldrb	r3, [r3, #6]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d803      	bhi.n	800fd00 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fdf3 	bl	800f8e4 <dhcp_check>
}
 800fcfe:	e012      	b.n	800fd26 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 faf3 	bl	80102ec <dhcp_bind>
}
 800fd06:	e00e      	b.n	800fd26 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	795b      	ldrb	r3, [r3, #5]
 800fd0c:	2b03      	cmp	r3, #3
 800fd0e:	d10a      	bne.n	800fd26 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	799b      	ldrb	r3, [r3, #6]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d803      	bhi.n	800fd20 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fcf5 	bl	8010708 <dhcp_reboot>
}
 800fd1e:	e002      	b.n	800fd26 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fa41 	bl	80101a8 <dhcp_discover>
}
 800fd26:	bf00      	nop
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	795b      	ldrb	r3, [r3, #5]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d007      	beq.n	800fd54 <dhcp_t1_timeout+0x26>
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	795b      	ldrb	r3, [r3, #5]
 800fd48:	2b0a      	cmp	r3, #10
 800fd4a:	d003      	beq.n	800fd54 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd50:	2b05      	cmp	r3, #5
 800fd52:	d116      	bne.n	800fd82 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fba3 	bl	80104a0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	899b      	ldrh	r3, [r3, #12]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	8a5b      	ldrh	r3, [r3, #18]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	dd0b      	ble.n	800fd82 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	899b      	ldrh	r3, [r3, #12]
 800fd6e:	461a      	mov	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	8a5b      	ldrh	r3, [r3, #18]
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	0fda      	lsrs	r2, r3, #31
 800fd78:	4413      	add	r3, r2
 800fd7a:	105b      	asrs	r3, r3, #1
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800fd82:	bf00      	nop
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd96:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	795b      	ldrb	r3, [r3, #5]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d00b      	beq.n	800fdb8 <dhcp_t2_timeout+0x2e>
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	795b      	ldrb	r3, [r3, #5]
 800fda4:	2b0a      	cmp	r3, #10
 800fda6:	d007      	beq.n	800fdb8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fdac:	2b05      	cmp	r3, #5
 800fdae:	d003      	beq.n	800fdb8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	795b      	ldrb	r3, [r3, #5]
 800fdb4:	2b04      	cmp	r3, #4
 800fdb6:	d116      	bne.n	800fde6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 fc0b 	bl	80105d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	8a9b      	ldrh	r3, [r3, #20]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	8a5b      	ldrh	r3, [r3, #18]
 800fdc8:	1ad3      	subs	r3, r2, r3
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	dd0b      	ble.n	800fde6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	8a9b      	ldrh	r3, [r3, #20]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	8a5b      	ldrh	r3, [r3, #18]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	0fda      	lsrs	r2, r3, #31
 800fddc:	4413      	add	r3, r2
 800fdde:	105b      	asrs	r3, r3, #1
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fde6:	bf00      	nop
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
	...

0800fdf0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b086      	sub	sp, #24
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfe:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2200      	movs	r2, #0
 800fe04:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800fe0c:	4b36      	ldr	r3, [pc, #216]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800fe0e:	78db      	ldrb	r3, [r3, #3]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d003      	beq.n	800fe1c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800fe14:	4b35      	ldr	r3, [pc, #212]	@ (800feec <dhcp_handle_ack+0xfc>)
 800fe16:	68da      	ldr	r2, [r3, #12]
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800fe1c:	4b32      	ldr	r3, [pc, #200]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800fe1e:	791b      	ldrb	r3, [r3, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d004      	beq.n	800fe2e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800fe24:	4b31      	ldr	r3, [pc, #196]	@ (800feec <dhcp_handle_ack+0xfc>)
 800fe26:	691a      	ldr	r2, [r3, #16]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fe2c:	e004      	b.n	800fe38 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe32:	085a      	lsrs	r2, r3, #1
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fe38:	4b2b      	ldr	r3, [pc, #172]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800fe3a:	795b      	ldrb	r3, [r3, #5]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fe40:	4b2a      	ldr	r3, [pc, #168]	@ (800feec <dhcp_handle_ack+0xfc>)
 800fe42:	695a      	ldr	r2, [r3, #20]
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe48:	e007      	b.n	800fe5a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe4e:	4613      	mov	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	1a9b      	subs	r3, r3, r2
 800fe54:	08da      	lsrs	r2, r3, #3
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	691a      	ldr	r2, [r3, #16]
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800fe62:	4b21      	ldr	r3, [pc, #132]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800fe64:	799b      	ldrb	r3, [r3, #6]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00b      	beq.n	800fe82 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800fe6a:	4b20      	ldr	r3, [pc, #128]	@ (800feec <dhcp_handle_ack+0xfc>)
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7f6 fa19 	bl	80062a6 <lwip_htonl>
 800fe74:	4602      	mov	r2, r0
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	71da      	strb	r2, [r3, #7]
 800fe80:	e002      	b.n	800fe88 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	2200      	movs	r2, #0
 800fe86:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800fe88:	4b17      	ldr	r3, [pc, #92]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800fe8a:	79db      	ldrb	r3, [r3, #7]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d007      	beq.n	800fea0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800fe90:	4b16      	ldr	r3, [pc, #88]	@ (800feec <dhcp_handle_ack+0xfc>)
 800fe92:	69db      	ldr	r3, [r3, #28]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7f6 fa06 	bl	80062a6 <lwip_htonl>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800fea0:	2300      	movs	r3, #0
 800fea2:	75fb      	strb	r3, [r7, #23]
 800fea4:	e013      	b.n	800fece <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	3308      	adds	r3, #8
 800feaa:	4a10      	ldr	r2, [pc, #64]	@ (800feec <dhcp_handle_ack+0xfc>)
 800feac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f6 f9f8 	bl	80062a6 <lwip_htonl>
 800feb6:	4603      	mov	r3, r0
 800feb8:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800feba:	f107 020c 	add.w	r2, r7, #12
 800febe:	7dfb      	ldrb	r3, [r7, #23]
 800fec0:	4611      	mov	r1, r2
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f6 fa10 	bl	80062e8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800fec8:	7dfb      	ldrb	r3, [r7, #23]
 800feca:	3301      	adds	r3, #1
 800fecc:	75fb      	strb	r3, [r7, #23]
 800fece:	7dfb      	ldrb	r3, [r7, #23]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d805      	bhi.n	800fee0 <dhcp_handle_ack+0xf0>
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
 800fed6:	3308      	adds	r3, #8
 800fed8:	4a03      	ldr	r2, [pc, #12]	@ (800fee8 <dhcp_handle_ack+0xf8>)
 800feda:	5cd3      	ldrb	r3, [r2, r3]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1e2      	bne.n	800fea6 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800fee0:	bf00      	nop
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	200043b8 	.word	0x200043b8
 800feec:	20004390 	.word	0x20004390

0800fef0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d109      	bne.n	800ff12 <dhcp_start+0x22>
 800fefe:	4b37      	ldr	r3, [pc, #220]	@ (800ffdc <dhcp_start+0xec>)
 800ff00:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800ff04:	4936      	ldr	r1, [pc, #216]	@ (800ffe0 <dhcp_start+0xf0>)
 800ff06:	4837      	ldr	r0, [pc, #220]	@ (800ffe4 <dhcp_start+0xf4>)
 800ff08:	f003 ffca 	bl	8013ea0 <iprintf>
 800ff0c:	f06f 030f 	mvn.w	r3, #15
 800ff10:	e060      	b.n	800ffd4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d109      	bne.n	800ff34 <dhcp_start+0x44>
 800ff20:	4b2e      	ldr	r3, [pc, #184]	@ (800ffdc <dhcp_start+0xec>)
 800ff22:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800ff26:	4930      	ldr	r1, [pc, #192]	@ (800ffe8 <dhcp_start+0xf8>)
 800ff28:	482e      	ldr	r0, [pc, #184]	@ (800ffe4 <dhcp_start+0xf4>)
 800ff2a:	f003 ffb9 	bl	8013ea0 <iprintf>
 800ff2e:	f06f 030f 	mvn.w	r3, #15
 800ff32:	e04f      	b.n	800ffd4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff3e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800ff42:	d202      	bcs.n	800ff4a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ff44:	f04f 33ff 	mov.w	r3, #4294967295
 800ff48:	e044      	b.n	800ffd4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d10d      	bne.n	800ff6c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ff50:	2034      	movs	r0, #52	@ 0x34
 800ff52:	f7f7 f8e3 	bl	800711c <mem_malloc>
 800ff56:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d102      	bne.n	800ff64 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ff5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff62:	e037      	b.n	800ffd4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	625a      	str	r2, [r3, #36]	@ 0x24
 800ff6a:	e005      	b.n	800ff78 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	791b      	ldrb	r3, [r3, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ff74:	f7ff fc72 	bl	800f85c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ff78:	2234      	movs	r2, #52	@ 0x34
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f003 fff4 	bl	8013f6a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ff82:	f7ff fc19 	bl	800f7b8 <dhcp_inc_pcb_refcount>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <dhcp_start+0xa2>
    return ERR_MEM;
 800ff8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff90:	e020      	b.n	800ffd4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2201      	movs	r2, #1
 800ff96:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ff9e:	f003 0304 	and.w	r3, r3, #4
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ffa6:	2102      	movs	r1, #2
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 fcfb 	bl	80109a4 <dhcp_set_state>
    return ERR_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e010      	b.n	800ffd4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f8f8 	bl	80101a8 <dhcp_discover>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ffbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d005      	beq.n	800ffd0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fc53 	bl	8010870 <dhcp_release_and_stop>
    return ERR_MEM;
 800ffca:	f04f 33ff 	mov.w	r3, #4294967295
 800ffce:	e001      	b.n	800ffd4 <dhcp_start+0xe4>
  }
  return result;
 800ffd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	080170e0 	.word	0x080170e0
 800ffe0:	080171c4 	.word	0x080171c4
 800ffe4:	08017140 	.word	0x08017140
 800ffe8:	08017208 	.word	0x08017208

0800ffec <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d025      	beq.n	801004c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	795b      	ldrb	r3, [r3, #5]
 8010004:	2b0a      	cmp	r3, #10
 8010006:	d008      	beq.n	801001a <dhcp_network_changed+0x2e>
 8010008:	2b0a      	cmp	r3, #10
 801000a:	dc0d      	bgt.n	8010028 <dhcp_network_changed+0x3c>
 801000c:	2b00      	cmp	r3, #0
 801000e:	d01f      	beq.n	8010050 <dhcp_network_changed+0x64>
 8010010:	2b00      	cmp	r3, #0
 8010012:	db09      	blt.n	8010028 <dhcp_network_changed+0x3c>
 8010014:	3b03      	subs	r3, #3
 8010016:	2b02      	cmp	r3, #2
 8010018:	d806      	bhi.n	8010028 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2200      	movs	r2, #0
 801001e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fb71 	bl	8010708 <dhcp_reboot>
      break;
 8010026:	e014      	b.n	8010052 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	795b      	ldrb	r3, [r3, #5]
 801002c:	2b0c      	cmp	r3, #12
 801002e:	d906      	bls.n	801003e <dhcp_network_changed+0x52>
 8010030:	4b09      	ldr	r3, [pc, #36]	@ (8010058 <dhcp_network_changed+0x6c>)
 8010032:	f240 326d 	movw	r2, #877	@ 0x36d
 8010036:	4909      	ldr	r1, [pc, #36]	@ (801005c <dhcp_network_changed+0x70>)
 8010038:	4809      	ldr	r0, [pc, #36]	@ (8010060 <dhcp_network_changed+0x74>)
 801003a:	f003 ff31 	bl	8013ea0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f8af 	bl	80101a8 <dhcp_discover>
      break;
 801004a:	e002      	b.n	8010052 <dhcp_network_changed+0x66>
    return;
 801004c:	bf00      	nop
 801004e:	e000      	b.n	8010052 <dhcp_network_changed+0x66>
      break;
 8010050:	bf00      	nop
  }
}
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	080170e0 	.word	0x080170e0
 801005c:	0801722c 	.word	0x0801722c
 8010060:	08017140 	.word	0x08017140

08010064 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d107      	bne.n	8010084 <dhcp_arp_reply+0x20>
 8010074:	4b0e      	ldr	r3, [pc, #56]	@ (80100b0 <dhcp_arp_reply+0x4c>)
 8010076:	f240 328b 	movw	r2, #907	@ 0x38b
 801007a:	490e      	ldr	r1, [pc, #56]	@ (80100b4 <dhcp_arp_reply+0x50>)
 801007c:	480e      	ldr	r0, [pc, #56]	@ (80100b8 <dhcp_arp_reply+0x54>)
 801007e:	f003 ff0f 	bl	8013ea0 <iprintf>
 8010082:	e012      	b.n	80100aa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010088:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00c      	beq.n	80100aa <dhcp_arp_reply+0x46>
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	795b      	ldrb	r3, [r3, #5]
 8010094:	2b08      	cmp	r3, #8
 8010096:	d108      	bne.n	80100aa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	69db      	ldr	r3, [r3, #28]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d102      	bne.n	80100aa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f809 	bl	80100bc <dhcp_decline>
    }
  }
}
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	080170e0 	.word	0x080170e0
 80100b4:	080171c4 	.word	0x080171c4
 80100b8:	08017140 	.word	0x08017140

080100bc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80100bc:	b5b0      	push	{r4, r5, r7, lr}
 80100be:	b08a      	sub	sp, #40	@ 0x28
 80100c0:	af02      	add	r7, sp, #8
 80100c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100c8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80100ca:	210c      	movs	r1, #12
 80100cc:	69b8      	ldr	r0, [r7, #24]
 80100ce:	f000 fc69 	bl	80109a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	2204      	movs	r2, #4
 80100d8:	69b9      	ldr	r1, [r7, #24]
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f001 f91e 	bl	801131c <dhcp_create_msg>
 80100e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d035      	beq.n	8010154 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80100ee:	89b8      	ldrh	r0, [r7, #12]
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80100f6:	2304      	movs	r3, #4
 80100f8:	2232      	movs	r2, #50	@ 0x32
 80100fa:	f000 fc6d 	bl	80109d8 <dhcp_option>
 80100fe:	4603      	mov	r3, r0
 8010100:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010102:	89bc      	ldrh	r4, [r7, #12]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	4618      	mov	r0, r3
 8010110:	f7f6 f8c9 	bl	80062a6 <lwip_htonl>
 8010114:	4603      	mov	r3, r0
 8010116:	461a      	mov	r2, r3
 8010118:	4629      	mov	r1, r5
 801011a:	4620      	mov	r0, r4
 801011c:	f000 fce8 	bl	8010af0 <dhcp_option_long>
 8010120:	4603      	mov	r3, r0
 8010122:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010124:	89b8      	ldrh	r0, [r7, #12]
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	33f0      	adds	r3, #240	@ 0xf0
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	4619      	mov	r1, r3
 801012e:	f001 f9cb 	bl	80114c8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010132:	4b19      	ldr	r3, [pc, #100]	@ (8010198 <dhcp_decline+0xdc>)
 8010134:	6818      	ldr	r0, [r3, #0]
 8010136:	4b19      	ldr	r3, [pc, #100]	@ (801019c <dhcp_decline+0xe0>)
 8010138:	9301      	str	r3, [sp, #4]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	2343      	movs	r3, #67	@ 0x43
 8010140:	4a17      	ldr	r2, [pc, #92]	@ (80101a0 <dhcp_decline+0xe4>)
 8010142:	6979      	ldr	r1, [r7, #20]
 8010144:	f7ff f898 	bl	800f278 <udp_sendto_if_src>
 8010148:	4603      	mov	r3, r0
 801014a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801014c:	6978      	ldr	r0, [r7, #20]
 801014e:	f7f8 f821 	bl	8008194 <pbuf_free>
 8010152:	e001      	b.n	8010158 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010154:	23ff      	movs	r3, #255	@ 0xff
 8010156:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	799b      	ldrb	r3, [r3, #6]
 801015c:	2bff      	cmp	r3, #255	@ 0xff
 801015e:	d005      	beq.n	801016c <dhcp_decline+0xb0>
    dhcp->tries++;
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	799b      	ldrb	r3, [r3, #6]
 8010164:	3301      	adds	r3, #1
 8010166:	b2da      	uxtb	r2, r3
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801016c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010170:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010172:	89fb      	ldrh	r3, [r7, #14]
 8010174:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010178:	4a0a      	ldr	r2, [pc, #40]	@ (80101a4 <dhcp_decline+0xe8>)
 801017a:	fb82 1203 	smull	r1, r2, r2, r3
 801017e:	1152      	asrs	r2, r2, #5
 8010180:	17db      	asrs	r3, r3, #31
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	b29a      	uxth	r2, r3
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801018a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3720      	adds	r7, #32
 8010192:	46bd      	mov	sp, r7
 8010194:	bdb0      	pop	{r4, r5, r7, pc}
 8010196:	bf00      	nop
 8010198:	200043c4 	.word	0x200043c4
 801019c:	08017c84 	.word	0x08017c84
 80101a0:	08017c88 	.word	0x08017c88
 80101a4:	10624dd3 	.word	0x10624dd3

080101a8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08a      	sub	sp, #40	@ 0x28
 80101ac:	af02      	add	r7, sp, #8
 80101ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80101b6:	2300      	movs	r3, #0
 80101b8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	2200      	movs	r2, #0
 80101be:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80101c0:	2106      	movs	r1, #6
 80101c2:	69b8      	ldr	r0, [r7, #24]
 80101c4:	f000 fbee 	bl	80109a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80101c8:	f107 0308 	add.w	r3, r7, #8
 80101cc:	2201      	movs	r2, #1
 80101ce:	69b9      	ldr	r1, [r7, #24]
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f001 f8a3 	bl	801131c <dhcp_create_msg>
 80101d6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d04b      	beq.n	8010276 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80101e4:	8938      	ldrh	r0, [r7, #8]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80101ec:	2302      	movs	r3, #2
 80101ee:	2239      	movs	r2, #57	@ 0x39
 80101f0:	f000 fbf2 	bl	80109d8 <dhcp_option>
 80101f4:	4603      	mov	r3, r0
 80101f6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80101f8:	8938      	ldrh	r0, [r7, #8]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010204:	461a      	mov	r2, r3
 8010206:	f000 fc41 	bl	8010a8c <dhcp_option_short>
 801020a:	4603      	mov	r3, r0
 801020c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801020e:	8938      	ldrh	r0, [r7, #8]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010216:	2304      	movs	r3, #4
 8010218:	2237      	movs	r2, #55	@ 0x37
 801021a:	f000 fbdd 	bl	80109d8 <dhcp_option>
 801021e:	4603      	mov	r3, r0
 8010220:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010222:	2300      	movs	r3, #0
 8010224:	77fb      	strb	r3, [r7, #31]
 8010226:	e00e      	b.n	8010246 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010228:	8938      	ldrh	r0, [r7, #8]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010230:	7ffb      	ldrb	r3, [r7, #31]
 8010232:	4a29      	ldr	r2, [pc, #164]	@ (80102d8 <dhcp_discover+0x130>)
 8010234:	5cd3      	ldrb	r3, [r2, r3]
 8010236:	461a      	mov	r2, r3
 8010238:	f000 fc02 	bl	8010a40 <dhcp_option_byte>
 801023c:	4603      	mov	r3, r0
 801023e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010240:	7ffb      	ldrb	r3, [r7, #31]
 8010242:	3301      	adds	r3, #1
 8010244:	77fb      	strb	r3, [r7, #31]
 8010246:	7ffb      	ldrb	r3, [r7, #31]
 8010248:	2b03      	cmp	r3, #3
 801024a:	d9ed      	bls.n	8010228 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801024c:	8938      	ldrh	r0, [r7, #8]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	33f0      	adds	r3, #240	@ 0xf0
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	4619      	mov	r1, r3
 8010256:	f001 f937 	bl	80114c8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801025a:	4b20      	ldr	r3, [pc, #128]	@ (80102dc <dhcp_discover+0x134>)
 801025c:	6818      	ldr	r0, [r3, #0]
 801025e:	4b20      	ldr	r3, [pc, #128]	@ (80102e0 <dhcp_discover+0x138>)
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	9300      	str	r3, [sp, #0]
 8010266:	2343      	movs	r3, #67	@ 0x43
 8010268:	4a1e      	ldr	r2, [pc, #120]	@ (80102e4 <dhcp_discover+0x13c>)
 801026a:	6939      	ldr	r1, [r7, #16]
 801026c:	f7ff f804 	bl	800f278 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010270:	6938      	ldr	r0, [r7, #16]
 8010272:	f7f7 ff8f 	bl	8008194 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	799b      	ldrb	r3, [r3, #6]
 801027a:	2bff      	cmp	r3, #255	@ 0xff
 801027c:	d005      	beq.n	801028a <dhcp_discover+0xe2>
    dhcp->tries++;
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	799b      	ldrb	r3, [r3, #6]
 8010282:	3301      	adds	r3, #1
 8010284:	b2da      	uxtb	r2, r3
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	799b      	ldrb	r3, [r3, #6]
 801028e:	2b05      	cmp	r3, #5
 8010290:	d80d      	bhi.n	80102ae <dhcp_discover+0x106>
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	799b      	ldrb	r3, [r3, #6]
 8010296:	461a      	mov	r2, r3
 8010298:	2301      	movs	r3, #1
 801029a:	4093      	lsls	r3, r2
 801029c:	b29b      	uxth	r3, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	0152      	lsls	r2, r2, #5
 80102a2:	1ad2      	subs	r2, r2, r3
 80102a4:	0092      	lsls	r2, r2, #2
 80102a6:	4413      	add	r3, r2
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	e001      	b.n	80102b2 <dhcp_discover+0x10a>
 80102ae:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80102b2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102b4:	897b      	ldrh	r3, [r7, #10]
 80102b6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80102ba:	4a0b      	ldr	r2, [pc, #44]	@ (80102e8 <dhcp_discover+0x140>)
 80102bc:	fb82 1203 	smull	r1, r2, r2, r3
 80102c0:	1152      	asrs	r2, r2, #5
 80102c2:	17db      	asrs	r3, r3, #31
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80102cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3720      	adds	r7, #32
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	20000014 	.word	0x20000014
 80102dc:	200043c4 	.word	0x200043c4
 80102e0:	08017c84 	.word	0x08017c84
 80102e4:	08017c88 	.word	0x08017c88
 80102e8:	10624dd3 	.word	0x10624dd3

080102ec <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d107      	bne.n	801030a <dhcp_bind+0x1e>
 80102fa:	4b64      	ldr	r3, [pc, #400]	@ (801048c <dhcp_bind+0x1a0>)
 80102fc:	f240 4215 	movw	r2, #1045	@ 0x415
 8010300:	4963      	ldr	r1, [pc, #396]	@ (8010490 <dhcp_bind+0x1a4>)
 8010302:	4864      	ldr	r0, [pc, #400]	@ (8010494 <dhcp_bind+0x1a8>)
 8010304:	f003 fdcc 	bl	8013ea0 <iprintf>
 8010308:	e0bc      	b.n	8010484 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801030e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d107      	bne.n	8010326 <dhcp_bind+0x3a>
 8010316:	4b5d      	ldr	r3, [pc, #372]	@ (801048c <dhcp_bind+0x1a0>)
 8010318:	f240 4217 	movw	r2, #1047	@ 0x417
 801031c:	495e      	ldr	r1, [pc, #376]	@ (8010498 <dhcp_bind+0x1ac>)
 801031e:	485d      	ldr	r0, [pc, #372]	@ (8010494 <dhcp_bind+0x1a8>)
 8010320:	f003 fdbe 	bl	8013ea0 <iprintf>
 8010324:	e0ae      	b.n	8010484 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	2200      	movs	r2, #0
 801032a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010334:	d019      	beq.n	801036a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801033a:	331e      	adds	r3, #30
 801033c:	4a57      	ldr	r2, [pc, #348]	@ (801049c <dhcp_bind+0x1b0>)
 801033e:	fba2 2303 	umull	r2, r3, r2, r3
 8010342:	095b      	lsrs	r3, r3, #5
 8010344:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801034c:	d302      	bcc.n	8010354 <dhcp_bind+0x68>
      timeout = 0xffff;
 801034e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010352:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	b29a      	uxth	r2, r3
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	8a9b      	ldrh	r3, [r3, #20]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d102      	bne.n	801036a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	2201      	movs	r2, #1
 8010368:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010372:	d01d      	beq.n	80103b0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010378:	331e      	adds	r3, #30
 801037a:	4a48      	ldr	r2, [pc, #288]	@ (801049c <dhcp_bind+0x1b0>)
 801037c:	fba2 2303 	umull	r2, r3, r2, r3
 8010380:	095b      	lsrs	r3, r3, #5
 8010382:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801038a:	d302      	bcc.n	8010392 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801038c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010390:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	b29a      	uxth	r2, r3
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	895b      	ldrh	r3, [r3, #10]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d102      	bne.n	80103a8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	2201      	movs	r2, #1
 80103a6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	895a      	ldrh	r2, [r3, #10]
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b8:	d01d      	beq.n	80103f6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103be:	331e      	adds	r3, #30
 80103c0:	4a36      	ldr	r2, [pc, #216]	@ (801049c <dhcp_bind+0x1b0>)
 80103c2:	fba2 2303 	umull	r2, r3, r2, r3
 80103c6:	095b      	lsrs	r3, r3, #5
 80103c8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103d0:	d302      	bcc.n	80103d8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80103d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80103d6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	b29a      	uxth	r2, r3
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	899b      	ldrh	r3, [r3, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d102      	bne.n	80103ee <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	2201      	movs	r2, #1
 80103ec:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	899a      	ldrh	r2, [r3, #12]
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	895a      	ldrh	r2, [r3, #10]
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	899b      	ldrh	r3, [r3, #12]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d306      	bcc.n	8010410 <dhcp_bind+0x124>
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	899b      	ldrh	r3, [r3, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d002      	beq.n	8010410 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	2200      	movs	r2, #0
 801040e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	79db      	ldrb	r3, [r3, #7]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d003      	beq.n	8010420 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	6a1b      	ldr	r3, [r3, #32]
 801041c:	613b      	str	r3, [r7, #16]
 801041e:	e014      	b.n	801044a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	331c      	adds	r3, #28
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010428:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801042c:	2b00      	cmp	r3, #0
 801042e:	db02      	blt.n	8010436 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010430:	23ff      	movs	r3, #255	@ 0xff
 8010432:	613b      	str	r3, [r7, #16]
 8010434:	e009      	b.n	801044a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	2bbf      	cmp	r3, #191	@ 0xbf
 801043a:	d903      	bls.n	8010444 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801043c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010440:	613b      	str	r3, [r7, #16]
 8010442:	e002      	b.n	801044a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010444:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010448:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801044e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d108      	bne.n	8010468 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	69da      	ldr	r2, [r3, #28]
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	4013      	ands	r3, r2
 801045e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010466:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010468:	210a      	movs	r1, #10
 801046a:	69b8      	ldr	r0, [r7, #24]
 801046c:	f000 fa9a 	bl	80109a4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	f103 011c 	add.w	r1, r3, #28
 8010476:	f107 030c 	add.w	r3, r7, #12
 801047a:	f107 0210 	add.w	r2, r7, #16
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7f7 f9a8 	bl	80077d4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010484:	3720      	adds	r7, #32
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	080170e0 	.word	0x080170e0
 8010490:	08017240 	.word	0x08017240
 8010494:	08017140 	.word	0x08017140
 8010498:	0801725c 	.word	0x0801725c
 801049c:	88888889 	.word	0x88888889

080104a0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b08a      	sub	sp, #40	@ 0x28
 80104a4:	af02      	add	r7, sp, #8
 80104a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ac:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80104ae:	2105      	movs	r1, #5
 80104b0:	69b8      	ldr	r0, [r7, #24]
 80104b2:	f000 fa77 	bl	80109a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80104b6:	f107 030c 	add.w	r3, r7, #12
 80104ba:	2203      	movs	r2, #3
 80104bc:	69b9      	ldr	r1, [r7, #24]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 ff2c 	bl	801131c <dhcp_create_msg>
 80104c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d04e      	beq.n	801056a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80104d2:	89b8      	ldrh	r0, [r7, #12]
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80104da:	2302      	movs	r3, #2
 80104dc:	2239      	movs	r2, #57	@ 0x39
 80104de:	f000 fa7b 	bl	80109d8 <dhcp_option>
 80104e2:	4603      	mov	r3, r0
 80104e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80104e6:	89b8      	ldrh	r0, [r7, #12]
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104f2:	461a      	mov	r2, r3
 80104f4:	f000 faca 	bl	8010a8c <dhcp_option_short>
 80104f8:	4603      	mov	r3, r0
 80104fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80104fc:	89b8      	ldrh	r0, [r7, #12]
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010504:	2304      	movs	r3, #4
 8010506:	2237      	movs	r2, #55	@ 0x37
 8010508:	f000 fa66 	bl	80109d8 <dhcp_option>
 801050c:	4603      	mov	r3, r0
 801050e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010510:	2300      	movs	r3, #0
 8010512:	77bb      	strb	r3, [r7, #30]
 8010514:	e00e      	b.n	8010534 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010516:	89b8      	ldrh	r0, [r7, #12]
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801051e:	7fbb      	ldrb	r3, [r7, #30]
 8010520:	4a29      	ldr	r2, [pc, #164]	@ (80105c8 <dhcp_renew+0x128>)
 8010522:	5cd3      	ldrb	r3, [r2, r3]
 8010524:	461a      	mov	r2, r3
 8010526:	f000 fa8b 	bl	8010a40 <dhcp_option_byte>
 801052a:	4603      	mov	r3, r0
 801052c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801052e:	7fbb      	ldrb	r3, [r7, #30]
 8010530:	3301      	adds	r3, #1
 8010532:	77bb      	strb	r3, [r7, #30]
 8010534:	7fbb      	ldrb	r3, [r7, #30]
 8010536:	2b03      	cmp	r3, #3
 8010538:	d9ed      	bls.n	8010516 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801053a:	89b8      	ldrh	r0, [r7, #12]
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	33f0      	adds	r3, #240	@ 0xf0
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	4619      	mov	r1, r3
 8010544:	f000 ffc0 	bl	80114c8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010548:	4b20      	ldr	r3, [pc, #128]	@ (80105cc <dhcp_renew+0x12c>)
 801054a:	6818      	ldr	r0, [r3, #0]
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	f103 0218 	add.w	r2, r3, #24
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	2343      	movs	r3, #67	@ 0x43
 8010558:	6979      	ldr	r1, [r7, #20]
 801055a:	f7fe fe19 	bl	800f190 <udp_sendto_if>
 801055e:	4603      	mov	r3, r0
 8010560:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010562:	6978      	ldr	r0, [r7, #20]
 8010564:	f7f7 fe16 	bl	8008194 <pbuf_free>
 8010568:	e001      	b.n	801056e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801056a:	23ff      	movs	r3, #255	@ 0xff
 801056c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	799b      	ldrb	r3, [r3, #6]
 8010572:	2bff      	cmp	r3, #255	@ 0xff
 8010574:	d005      	beq.n	8010582 <dhcp_renew+0xe2>
    dhcp->tries++;
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	799b      	ldrb	r3, [r3, #6]
 801057a:	3301      	adds	r3, #1
 801057c:	b2da      	uxtb	r2, r3
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	799b      	ldrb	r3, [r3, #6]
 8010586:	2b09      	cmp	r3, #9
 8010588:	d809      	bhi.n	801059e <dhcp_renew+0xfe>
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	799b      	ldrb	r3, [r3, #6]
 801058e:	461a      	mov	r2, r3
 8010590:	0152      	lsls	r2, r2, #5
 8010592:	1ad2      	subs	r2, r2, r3
 8010594:	0092      	lsls	r2, r2, #2
 8010596:	4413      	add	r3, r2
 8010598:	011b      	lsls	r3, r3, #4
 801059a:	b29b      	uxth	r3, r3
 801059c:	e001      	b.n	80105a2 <dhcp_renew+0x102>
 801059e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80105a2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80105a4:	89fb      	ldrh	r3, [r7, #14]
 80105a6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80105aa:	4a09      	ldr	r2, [pc, #36]	@ (80105d0 <dhcp_renew+0x130>)
 80105ac:	fb82 1203 	smull	r1, r2, r2, r3
 80105b0:	1152      	asrs	r2, r2, #5
 80105b2:	17db      	asrs	r3, r3, #31
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80105bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	20000014 	.word	0x20000014
 80105cc:	200043c4 	.word	0x200043c4
 80105d0:	10624dd3 	.word	0x10624dd3

080105d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b08a      	sub	sp, #40	@ 0x28
 80105d8:	af02      	add	r7, sp, #8
 80105da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80105e2:	2104      	movs	r1, #4
 80105e4:	69b8      	ldr	r0, [r7, #24]
 80105e6:	f000 f9dd 	bl	80109a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80105ea:	f107 030c 	add.w	r3, r7, #12
 80105ee:	2203      	movs	r2, #3
 80105f0:	69b9      	ldr	r1, [r7, #24]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 fe92 	bl	801131c <dhcp_create_msg>
 80105f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d04c      	beq.n	801069a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010606:	89b8      	ldrh	r0, [r7, #12]
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801060e:	2302      	movs	r3, #2
 8010610:	2239      	movs	r2, #57	@ 0x39
 8010612:	f000 f9e1 	bl	80109d8 <dhcp_option>
 8010616:	4603      	mov	r3, r0
 8010618:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801061a:	89b8      	ldrh	r0, [r7, #12]
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010626:	461a      	mov	r2, r3
 8010628:	f000 fa30 	bl	8010a8c <dhcp_option_short>
 801062c:	4603      	mov	r3, r0
 801062e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010630:	89b8      	ldrh	r0, [r7, #12]
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010638:	2304      	movs	r3, #4
 801063a:	2237      	movs	r2, #55	@ 0x37
 801063c:	f000 f9cc 	bl	80109d8 <dhcp_option>
 8010640:	4603      	mov	r3, r0
 8010642:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010644:	2300      	movs	r3, #0
 8010646:	77bb      	strb	r3, [r7, #30]
 8010648:	e00e      	b.n	8010668 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801064a:	89b8      	ldrh	r0, [r7, #12]
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010652:	7fbb      	ldrb	r3, [r7, #30]
 8010654:	4a28      	ldr	r2, [pc, #160]	@ (80106f8 <dhcp_rebind+0x124>)
 8010656:	5cd3      	ldrb	r3, [r2, r3]
 8010658:	461a      	mov	r2, r3
 801065a:	f000 f9f1 	bl	8010a40 <dhcp_option_byte>
 801065e:	4603      	mov	r3, r0
 8010660:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010662:	7fbb      	ldrb	r3, [r7, #30]
 8010664:	3301      	adds	r3, #1
 8010666:	77bb      	strb	r3, [r7, #30]
 8010668:	7fbb      	ldrb	r3, [r7, #30]
 801066a:	2b03      	cmp	r3, #3
 801066c:	d9ed      	bls.n	801064a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801066e:	89b8      	ldrh	r0, [r7, #12]
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	33f0      	adds	r3, #240	@ 0xf0
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	4619      	mov	r1, r3
 8010678:	f000 ff26 	bl	80114c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801067c:	4b1f      	ldr	r3, [pc, #124]	@ (80106fc <dhcp_rebind+0x128>)
 801067e:	6818      	ldr	r0, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	2343      	movs	r3, #67	@ 0x43
 8010686:	4a1e      	ldr	r2, [pc, #120]	@ (8010700 <dhcp_rebind+0x12c>)
 8010688:	6979      	ldr	r1, [r7, #20]
 801068a:	f7fe fd81 	bl	800f190 <udp_sendto_if>
 801068e:	4603      	mov	r3, r0
 8010690:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010692:	6978      	ldr	r0, [r7, #20]
 8010694:	f7f7 fd7e 	bl	8008194 <pbuf_free>
 8010698:	e001      	b.n	801069e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801069a:	23ff      	movs	r3, #255	@ 0xff
 801069c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	799b      	ldrb	r3, [r3, #6]
 80106a2:	2bff      	cmp	r3, #255	@ 0xff
 80106a4:	d005      	beq.n	80106b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	799b      	ldrb	r3, [r3, #6]
 80106aa:	3301      	adds	r3, #1
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	799b      	ldrb	r3, [r3, #6]
 80106b6:	2b09      	cmp	r3, #9
 80106b8:	d809      	bhi.n	80106ce <dhcp_rebind+0xfa>
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	799b      	ldrb	r3, [r3, #6]
 80106be:	461a      	mov	r2, r3
 80106c0:	0152      	lsls	r2, r2, #5
 80106c2:	1ad2      	subs	r2, r2, r3
 80106c4:	0092      	lsls	r2, r2, #2
 80106c6:	4413      	add	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	e001      	b.n	80106d2 <dhcp_rebind+0xfe>
 80106ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80106d2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80106d4:	89fb      	ldrh	r3, [r7, #14]
 80106d6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80106da:	4a0a      	ldr	r2, [pc, #40]	@ (8010704 <dhcp_rebind+0x130>)
 80106dc:	fb82 1203 	smull	r1, r2, r2, r3
 80106e0:	1152      	asrs	r2, r2, #5
 80106e2:	17db      	asrs	r3, r3, #31
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3720      	adds	r7, #32
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20000014 	.word	0x20000014
 80106fc:	200043c4 	.word	0x200043c4
 8010700:	08017c88 	.word	0x08017c88
 8010704:	10624dd3 	.word	0x10624dd3

08010708 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010708:	b5b0      	push	{r4, r5, r7, lr}
 801070a:	b08a      	sub	sp, #40	@ 0x28
 801070c:	af02      	add	r7, sp, #8
 801070e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010714:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010716:	2103      	movs	r1, #3
 8010718:	69b8      	ldr	r0, [r7, #24]
 801071a:	f000 f943 	bl	80109a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801071e:	f107 030c 	add.w	r3, r7, #12
 8010722:	2203      	movs	r2, #3
 8010724:	69b9      	ldr	r1, [r7, #24]
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 fdf8 	bl	801131c <dhcp_create_msg>
 801072c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d066      	beq.n	8010802 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801073a:	89b8      	ldrh	r0, [r7, #12]
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010742:	2302      	movs	r3, #2
 8010744:	2239      	movs	r2, #57	@ 0x39
 8010746:	f000 f947 	bl	80109d8 <dhcp_option>
 801074a:	4603      	mov	r3, r0
 801074c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801074e:	89b8      	ldrh	r0, [r7, #12]
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	33f0      	adds	r3, #240	@ 0xf0
 8010754:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010758:	4619      	mov	r1, r3
 801075a:	f000 f997 	bl	8010a8c <dhcp_option_short>
 801075e:	4603      	mov	r3, r0
 8010760:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010762:	89b8      	ldrh	r0, [r7, #12]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801076a:	2304      	movs	r3, #4
 801076c:	2232      	movs	r2, #50	@ 0x32
 801076e:	f000 f933 	bl	80109d8 <dhcp_option>
 8010772:	4603      	mov	r3, r0
 8010774:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010776:	89bc      	ldrh	r4, [r7, #12]
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	69db      	ldr	r3, [r3, #28]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f5 fd8f 	bl	80062a6 <lwip_htonl>
 8010788:	4603      	mov	r3, r0
 801078a:	461a      	mov	r2, r3
 801078c:	4629      	mov	r1, r5
 801078e:	4620      	mov	r0, r4
 8010790:	f000 f9ae 	bl	8010af0 <dhcp_option_long>
 8010794:	4603      	mov	r3, r0
 8010796:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010798:	89b8      	ldrh	r0, [r7, #12]
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80107a0:	2304      	movs	r3, #4
 80107a2:	2237      	movs	r2, #55	@ 0x37
 80107a4:	f000 f918 	bl	80109d8 <dhcp_option>
 80107a8:	4603      	mov	r3, r0
 80107aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ac:	2300      	movs	r3, #0
 80107ae:	77bb      	strb	r3, [r7, #30]
 80107b0:	e00e      	b.n	80107d0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107b2:	89b8      	ldrh	r0, [r7, #12]
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80107ba:	7fbb      	ldrb	r3, [r7, #30]
 80107bc:	4a28      	ldr	r2, [pc, #160]	@ (8010860 <dhcp_reboot+0x158>)
 80107be:	5cd3      	ldrb	r3, [r2, r3]
 80107c0:	461a      	mov	r2, r3
 80107c2:	f000 f93d 	bl	8010a40 <dhcp_option_byte>
 80107c6:	4603      	mov	r3, r0
 80107c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ca:	7fbb      	ldrb	r3, [r7, #30]
 80107cc:	3301      	adds	r3, #1
 80107ce:	77bb      	strb	r3, [r7, #30]
 80107d0:	7fbb      	ldrb	r3, [r7, #30]
 80107d2:	2b03      	cmp	r3, #3
 80107d4:	d9ed      	bls.n	80107b2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107d6:	89b8      	ldrh	r0, [r7, #12]
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	33f0      	adds	r3, #240	@ 0xf0
 80107dc:	697a      	ldr	r2, [r7, #20]
 80107de:	4619      	mov	r1, r3
 80107e0:	f000 fe72 	bl	80114c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107e4:	4b1f      	ldr	r3, [pc, #124]	@ (8010864 <dhcp_reboot+0x15c>)
 80107e6:	6818      	ldr	r0, [r3, #0]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	2343      	movs	r3, #67	@ 0x43
 80107ee:	4a1e      	ldr	r2, [pc, #120]	@ (8010868 <dhcp_reboot+0x160>)
 80107f0:	6979      	ldr	r1, [r7, #20]
 80107f2:	f7fe fccd 	bl	800f190 <udp_sendto_if>
 80107f6:	4603      	mov	r3, r0
 80107f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107fa:	6978      	ldr	r0, [r7, #20]
 80107fc:	f7f7 fcca 	bl	8008194 <pbuf_free>
 8010800:	e001      	b.n	8010806 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010802:	23ff      	movs	r3, #255	@ 0xff
 8010804:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	799b      	ldrb	r3, [r3, #6]
 801080a:	2bff      	cmp	r3, #255	@ 0xff
 801080c:	d005      	beq.n	801081a <dhcp_reboot+0x112>
    dhcp->tries++;
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	799b      	ldrb	r3, [r3, #6]
 8010812:	3301      	adds	r3, #1
 8010814:	b2da      	uxtb	r2, r3
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	799b      	ldrb	r3, [r3, #6]
 801081e:	2b09      	cmp	r3, #9
 8010820:	d809      	bhi.n	8010836 <dhcp_reboot+0x12e>
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	799b      	ldrb	r3, [r3, #6]
 8010826:	461a      	mov	r2, r3
 8010828:	0152      	lsls	r2, r2, #5
 801082a:	1ad2      	subs	r2, r2, r3
 801082c:	0092      	lsls	r2, r2, #2
 801082e:	4413      	add	r3, r2
 8010830:	00db      	lsls	r3, r3, #3
 8010832:	b29b      	uxth	r3, r3
 8010834:	e001      	b.n	801083a <dhcp_reboot+0x132>
 8010836:	f242 7310 	movw	r3, #10000	@ 0x2710
 801083a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801083c:	89fb      	ldrh	r3, [r7, #14]
 801083e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010842:	4a0a      	ldr	r2, [pc, #40]	@ (801086c <dhcp_reboot+0x164>)
 8010844:	fb82 1203 	smull	r1, r2, r2, r3
 8010848:	1152      	asrs	r2, r2, #5
 801084a:	17db      	asrs	r3, r3, #31
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	b29a      	uxth	r2, r3
 8010850:	69bb      	ldr	r3, [r7, #24]
 8010852:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010854:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3720      	adds	r7, #32
 801085c:	46bd      	mov	sp, r7
 801085e:	bdb0      	pop	{r4, r5, r7, pc}
 8010860:	20000014 	.word	0x20000014
 8010864:	200043c4 	.word	0x200043c4
 8010868:	08017c88 	.word	0x08017c88
 801086c:	10624dd3 	.word	0x10624dd3

08010870 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010870:	b5b0      	push	{r4, r5, r7, lr}
 8010872:	b08a      	sub	sp, #40	@ 0x28
 8010874:	af02      	add	r7, sp, #8
 8010876:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 8084 	beq.w	801098e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	795b      	ldrb	r3, [r3, #5]
 801088a:	2b00      	cmp	r3, #0
 801088c:	f000 8081 	beq.w	8010992 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	699b      	ldr	r3, [r3, #24]
 8010894:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	2200      	movs	r2, #0
 801089a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	2200      	movs	r2, #0
 80108a0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	2200      	movs	r2, #0
 80108a6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	2200      	movs	r2, #0
 80108ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	2200      	movs	r2, #0
 80108b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	2200      	movs	r2, #0
 80108c8:	829a      	strh	r2, [r3, #20]
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	8a9a      	ldrh	r2, [r3, #20]
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	825a      	strh	r2, [r3, #18]
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	8a5a      	ldrh	r2, [r3, #18]
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	821a      	strh	r2, [r3, #16]
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	8a1a      	ldrh	r2, [r3, #16]
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fe1e 	bl	8011524 <dhcp_supplied_address>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d03b      	beq.n	8010966 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80108ee:	f107 030e 	add.w	r3, r7, #14
 80108f2:	2207      	movs	r2, #7
 80108f4:	69f9      	ldr	r1, [r7, #28]
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fd10 	bl	801131c <dhcp_create_msg>
 80108fc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d030      	beq.n	8010966 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010904:	69bb      	ldr	r3, [r7, #24]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801090a:	89f8      	ldrh	r0, [r7, #14]
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010912:	2304      	movs	r3, #4
 8010914:	2236      	movs	r2, #54	@ 0x36
 8010916:	f000 f85f 	bl	80109d8 <dhcp_option>
 801091a:	4603      	mov	r3, r0
 801091c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801091e:	89fc      	ldrh	r4, [r7, #14]
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	4618      	mov	r0, r3
 801092a:	f7f5 fcbc 	bl	80062a6 <lwip_htonl>
 801092e:	4603      	mov	r3, r0
 8010930:	461a      	mov	r2, r3
 8010932:	4629      	mov	r1, r5
 8010934:	4620      	mov	r0, r4
 8010936:	f000 f8db 	bl	8010af0 <dhcp_option_long>
 801093a:	4603      	mov	r3, r0
 801093c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801093e:	89f8      	ldrh	r0, [r7, #14]
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	33f0      	adds	r3, #240	@ 0xf0
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	4619      	mov	r1, r3
 8010948:	f000 fdbe 	bl	80114c8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801094c:	4b13      	ldr	r3, [pc, #76]	@ (801099c <dhcp_release_and_stop+0x12c>)
 801094e:	6818      	ldr	r0, [r3, #0]
 8010950:	f107 0210 	add.w	r2, r7, #16
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	2343      	movs	r3, #67	@ 0x43
 801095a:	69b9      	ldr	r1, [r7, #24]
 801095c:	f7fe fc18 	bl	800f190 <udp_sendto_if>
      pbuf_free(p_out);
 8010960:	69b8      	ldr	r0, [r7, #24]
 8010962:	f7f7 fc17 	bl	8008194 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010966:	4b0e      	ldr	r3, [pc, #56]	@ (80109a0 <dhcp_release_and_stop+0x130>)
 8010968:	4a0d      	ldr	r2, [pc, #52]	@ (80109a0 <dhcp_release_and_stop+0x130>)
 801096a:	490d      	ldr	r1, [pc, #52]	@ (80109a0 <dhcp_release_and_stop+0x130>)
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7f6 ff31 	bl	80077d4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010972:	2100      	movs	r1, #0
 8010974:	69f8      	ldr	r0, [r7, #28]
 8010976:	f000 f815 	bl	80109a4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	791b      	ldrb	r3, [r3, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d008      	beq.n	8010994 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010982:	f7fe ff6b 	bl	800f85c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	2200      	movs	r2, #0
 801098a:	711a      	strb	r2, [r3, #4]
 801098c:	e002      	b.n	8010994 <dhcp_release_and_stop+0x124>
    return;
 801098e:	bf00      	nop
 8010990:	e000      	b.n	8010994 <dhcp_release_and_stop+0x124>
    return;
 8010992:	bf00      	nop
  }
}
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bdb0      	pop	{r4, r5, r7, pc}
 801099a:	bf00      	nop
 801099c:	200043c4 	.word	0x200043c4
 80109a0:	08017c84 	.word	0x08017c84

080109a4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	460b      	mov	r3, r1
 80109ae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	795b      	ldrb	r3, [r3, #5]
 80109b4:	78fa      	ldrb	r2, [r7, #3]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d008      	beq.n	80109cc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	78fa      	ldrb	r2, [r7, #3]
 80109be:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	811a      	strh	r2, [r3, #8]
  }
}
 80109cc:	bf00      	nop
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6039      	str	r1, [r7, #0]
 80109e0:	4611      	mov	r1, r2
 80109e2:	461a      	mov	r2, r3
 80109e4:	4603      	mov	r3, r0
 80109e6:	80fb      	strh	r3, [r7, #6]
 80109e8:	460b      	mov	r3, r1
 80109ea:	717b      	strb	r3, [r7, #5]
 80109ec:	4613      	mov	r3, r2
 80109ee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80109f0:	88fa      	ldrh	r2, [r7, #6]
 80109f2:	793b      	ldrb	r3, [r7, #4]
 80109f4:	4413      	add	r3, r2
 80109f6:	3302      	adds	r3, #2
 80109f8:	2b44      	cmp	r3, #68	@ 0x44
 80109fa:	d906      	bls.n	8010a0a <dhcp_option+0x32>
 80109fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a34 <dhcp_option+0x5c>)
 80109fe:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010a02:	490d      	ldr	r1, [pc, #52]	@ (8010a38 <dhcp_option+0x60>)
 8010a04:	480d      	ldr	r0, [pc, #52]	@ (8010a3c <dhcp_option+0x64>)
 8010a06:	f003 fa4b 	bl	8013ea0 <iprintf>
  options[options_out_len++] = option_type;
 8010a0a:	88fb      	ldrh	r3, [r7, #6]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	80fa      	strh	r2, [r7, #6]
 8010a10:	461a      	mov	r2, r3
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	4413      	add	r3, r2
 8010a16:	797a      	ldrb	r2, [r7, #5]
 8010a18:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010a1a:	88fb      	ldrh	r3, [r7, #6]
 8010a1c:	1c5a      	adds	r2, r3, #1
 8010a1e:	80fa      	strh	r2, [r7, #6]
 8010a20:	461a      	mov	r2, r3
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	4413      	add	r3, r2
 8010a26:	793a      	ldrb	r2, [r7, #4]
 8010a28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a2a:	88fb      	ldrh	r3, [r7, #6]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	080170e0 	.word	0x080170e0
 8010a38:	08017274 	.word	0x08017274
 8010a3c:	08017140 	.word	0x08017140

08010a40 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	4603      	mov	r3, r0
 8010a48:	6039      	str	r1, [r7, #0]
 8010a4a:	80fb      	strh	r3, [r7, #6]
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010a50:	88fb      	ldrh	r3, [r7, #6]
 8010a52:	2b43      	cmp	r3, #67	@ 0x43
 8010a54:	d906      	bls.n	8010a64 <dhcp_option_byte+0x24>
 8010a56:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <dhcp_option_byte+0x40>)
 8010a58:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010a5c:	4909      	ldr	r1, [pc, #36]	@ (8010a84 <dhcp_option_byte+0x44>)
 8010a5e:	480a      	ldr	r0, [pc, #40]	@ (8010a88 <dhcp_option_byte+0x48>)
 8010a60:	f003 fa1e 	bl	8013ea0 <iprintf>
  options[options_out_len++] = value;
 8010a64:	88fb      	ldrh	r3, [r7, #6]
 8010a66:	1c5a      	adds	r2, r3, #1
 8010a68:	80fa      	strh	r2, [r7, #6]
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	4413      	add	r3, r2
 8010a70:	797a      	ldrb	r2, [r7, #5]
 8010a72:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a74:	88fb      	ldrh	r3, [r7, #6]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	080170e0 	.word	0x080170e0
 8010a84:	080172b8 	.word	0x080172b8
 8010a88:	08017140 	.word	0x08017140

08010a8c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	4603      	mov	r3, r0
 8010a94:	6039      	str	r1, [r7, #0]
 8010a96:	80fb      	strh	r3, [r7, #6]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010a9c:	88fb      	ldrh	r3, [r7, #6]
 8010a9e:	3302      	adds	r3, #2
 8010aa0:	2b44      	cmp	r3, #68	@ 0x44
 8010aa2:	d906      	bls.n	8010ab2 <dhcp_option_short+0x26>
 8010aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae4 <dhcp_option_short+0x58>)
 8010aa6:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010aaa:	490f      	ldr	r1, [pc, #60]	@ (8010ae8 <dhcp_option_short+0x5c>)
 8010aac:	480f      	ldr	r0, [pc, #60]	@ (8010aec <dhcp_option_short+0x60>)
 8010aae:	f003 f9f7 	bl	8013ea0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010ab2:	88bb      	ldrh	r3, [r7, #4]
 8010ab4:	0a1b      	lsrs	r3, r3, #8
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	88fb      	ldrh	r3, [r7, #6]
 8010aba:	1c59      	adds	r1, r3, #1
 8010abc:	80f9      	strh	r1, [r7, #6]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	440b      	add	r3, r1
 8010ac4:	b2d2      	uxtb	r2, r2
 8010ac6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010ac8:	88fb      	ldrh	r3, [r7, #6]
 8010aca:	1c5a      	adds	r2, r3, #1
 8010acc:	80fa      	strh	r2, [r7, #6]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	4413      	add	r3, r2
 8010ad4:	88ba      	ldrh	r2, [r7, #4]
 8010ad6:	b2d2      	uxtb	r2, r2
 8010ad8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010ada:	88fb      	ldrh	r3, [r7, #6]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	080170e0 	.word	0x080170e0
 8010ae8:	080172f0 	.word	0x080172f0
 8010aec:	08017140 	.word	0x08017140

08010af0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010afe:	89fb      	ldrh	r3, [r7, #14]
 8010b00:	3304      	adds	r3, #4
 8010b02:	2b44      	cmp	r3, #68	@ 0x44
 8010b04:	d906      	bls.n	8010b14 <dhcp_option_long+0x24>
 8010b06:	4b19      	ldr	r3, [pc, #100]	@ (8010b6c <dhcp_option_long+0x7c>)
 8010b08:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010b0c:	4918      	ldr	r1, [pc, #96]	@ (8010b70 <dhcp_option_long+0x80>)
 8010b0e:	4819      	ldr	r0, [pc, #100]	@ (8010b74 <dhcp_option_long+0x84>)
 8010b10:	f003 f9c6 	bl	8013ea0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	0e1a      	lsrs	r2, r3, #24
 8010b18:	89fb      	ldrh	r3, [r7, #14]
 8010b1a:	1c59      	adds	r1, r3, #1
 8010b1c:	81f9      	strh	r1, [r7, #14]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	440b      	add	r3, r1
 8010b24:	b2d2      	uxtb	r2, r2
 8010b26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	0c1a      	lsrs	r2, r3, #16
 8010b2c:	89fb      	ldrh	r3, [r7, #14]
 8010b2e:	1c59      	adds	r1, r3, #1
 8010b30:	81f9      	strh	r1, [r7, #14]
 8010b32:	4619      	mov	r1, r3
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	440b      	add	r3, r1
 8010b38:	b2d2      	uxtb	r2, r2
 8010b3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	0a1a      	lsrs	r2, r3, #8
 8010b40:	89fb      	ldrh	r3, [r7, #14]
 8010b42:	1c59      	adds	r1, r3, #1
 8010b44:	81f9      	strh	r1, [r7, #14]
 8010b46:	4619      	mov	r1, r3
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	440b      	add	r3, r1
 8010b4c:	b2d2      	uxtb	r2, r2
 8010b4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010b50:	89fb      	ldrh	r3, [r7, #14]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	81fa      	strh	r2, [r7, #14]
 8010b56:	461a      	mov	r2, r3
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	b2d2      	uxtb	r2, r2
 8010b60:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b62:	89fb      	ldrh	r3, [r7, #14]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	080170e0 	.word	0x080170e0
 8010b70:	0801732c 	.word	0x0801732c
 8010b74:	08017140 	.word	0x08017140

08010b78 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b090      	sub	sp, #64	@ 0x40
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	48ba      	ldr	r0, [pc, #744]	@ (8010e78 <dhcp_parse_reply+0x300>)
 8010b90:	f003 f9eb 	bl	8013f6a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	895b      	ldrh	r3, [r3, #10]
 8010b98:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b9a:	d802      	bhi.n	8010ba2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010b9c:	f06f 0301 	mvn.w	r3, #1
 8010ba0:	e2ea      	b.n	8011178 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010ba8:	23f0      	movs	r3, #240	@ 0xf0
 8010baa:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	891b      	ldrh	r3, [r3, #8]
 8010bb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010bb6:	e00c      	b.n	8010bd2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bba:	895b      	ldrh	r3, [r3, #10]
 8010bbc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc4:	895b      	ldrh	r3, [r3, #10]
 8010bc6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d004      	beq.n	8010be2 <dhcp_parse_reply+0x6a>
 8010bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bda:	895b      	ldrh	r3, [r3, #10]
 8010bdc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d2ea      	bcs.n	8010bb8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010be8:	f06f 0301 	mvn.w	r3, #1
 8010bec:	e2c4      	b.n	8011178 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8010bee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010bf0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010bf2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010bf4:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010bfc:	e267      	b.n	80110ce <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8010bfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c02:	4413      	add	r3, r2
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c12:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010c14:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c16:	3302      	adds	r3, #2
 8010c18:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010c1a:	8bfa      	ldrh	r2, [r7, #30]
 8010c1c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d202      	bcs.n	8010c28 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010c22:	f06f 0301 	mvn.w	r3, #1
 8010c26:	e2a7      	b.n	8011178 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010c28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c2e:	8952      	ldrh	r2, [r2, #10]
 8010c30:	4293      	cmp	r3, r2
 8010c32:	da07      	bge.n	8010c44 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010c34:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c36:	3301      	adds	r3, #1
 8010c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c3a:	4413      	add	r3, r2
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c42:	e00b      	b.n	8010c5c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d004      	beq.n	8010c56 <dhcp_parse_reply+0xde>
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	e000      	b.n	8010c58 <dhcp_parse_reply+0xe0>
 8010c56:	2300      	movs	r3, #0
 8010c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010c64:	7dfb      	ldrb	r3, [r7, #23]
 8010c66:	2b3b      	cmp	r3, #59	@ 0x3b
 8010c68:	f200 815a 	bhi.w	8010f20 <dhcp_parse_reply+0x3a8>
 8010c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8010c74 <dhcp_parse_reply+0xfc>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010d65 	.word	0x08010d65
 8010c78:	08010d75 	.word	0x08010d75
 8010c7c:	08010f21 	.word	0x08010f21
 8010c80:	08010d97 	.word	0x08010d97
 8010c84:	08010f21 	.word	0x08010f21
 8010c88:	08010f21 	.word	0x08010f21
 8010c8c:	08010dc3 	.word	0x08010dc3
 8010c90:	08010f21 	.word	0x08010f21
 8010c94:	08010f21 	.word	0x08010f21
 8010c98:	08010f21 	.word	0x08010f21
 8010c9c:	08010f21 	.word	0x08010f21
 8010ca0:	08010f21 	.word	0x08010f21
 8010ca4:	08010f21 	.word	0x08010f21
 8010ca8:	08010f21 	.word	0x08010f21
 8010cac:	08010f21 	.word	0x08010f21
 8010cb0:	08010f21 	.word	0x08010f21
 8010cb4:	08010f21 	.word	0x08010f21
 8010cb8:	08010f21 	.word	0x08010f21
 8010cbc:	08010f21 	.word	0x08010f21
 8010cc0:	08010f21 	.word	0x08010f21
 8010cc4:	08010f21 	.word	0x08010f21
 8010cc8:	08010f21 	.word	0x08010f21
 8010ccc:	08010f21 	.word	0x08010f21
 8010cd0:	08010f21 	.word	0x08010f21
 8010cd4:	08010f21 	.word	0x08010f21
 8010cd8:	08010f21 	.word	0x08010f21
 8010cdc:	08010f21 	.word	0x08010f21
 8010ce0:	08010f21 	.word	0x08010f21
 8010ce4:	08010f21 	.word	0x08010f21
 8010ce8:	08010f21 	.word	0x08010f21
 8010cec:	08010f21 	.word	0x08010f21
 8010cf0:	08010f21 	.word	0x08010f21
 8010cf4:	08010f21 	.word	0x08010f21
 8010cf8:	08010f21 	.word	0x08010f21
 8010cfc:	08010f21 	.word	0x08010f21
 8010d00:	08010f21 	.word	0x08010f21
 8010d04:	08010f21 	.word	0x08010f21
 8010d08:	08010f21 	.word	0x08010f21
 8010d0c:	08010f21 	.word	0x08010f21
 8010d10:	08010f21 	.word	0x08010f21
 8010d14:	08010f21 	.word	0x08010f21
 8010d18:	08010f21 	.word	0x08010f21
 8010d1c:	08010f21 	.word	0x08010f21
 8010d20:	08010f21 	.word	0x08010f21
 8010d24:	08010f21 	.word	0x08010f21
 8010d28:	08010f21 	.word	0x08010f21
 8010d2c:	08010f21 	.word	0x08010f21
 8010d30:	08010f21 	.word	0x08010f21
 8010d34:	08010f21 	.word	0x08010f21
 8010d38:	08010f21 	.word	0x08010f21
 8010d3c:	08010f21 	.word	0x08010f21
 8010d40:	08010e19 	.word	0x08010e19
 8010d44:	08010e3b 	.word	0x08010e3b
 8010d48:	08010e99 	.word	0x08010e99
 8010d4c:	08010ebb 	.word	0x08010ebb
 8010d50:	08010f21 	.word	0x08010f21
 8010d54:	08010f21 	.word	0x08010f21
 8010d58:	08010f21 	.word	0x08010f21
 8010d5c:	08010edd 	.word	0x08010edd
 8010d60:	08010eff 	.word	0x08010eff
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010d72:	e0d9      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d78:	2b04      	cmp	r3, #4
 8010d7a:	d009      	beq.n	8010d90 <dhcp_parse_reply+0x218>
 8010d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010d7e:	f240 622e 	movw	r2, #1582	@ 0x62e
 8010d82:	493f      	ldr	r1, [pc, #252]	@ (8010e80 <dhcp_parse_reply+0x308>)
 8010d84:	483f      	ldr	r0, [pc, #252]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010d86:	f003 f88b 	bl	8013ea0 <iprintf>
 8010d8a:	f06f 0305 	mvn.w	r3, #5
 8010d8e:	e1f3      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010d90:	2306      	movs	r3, #6
 8010d92:	623b      	str	r3, [r7, #32]
        break;
 8010d94:	e0c8      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010d96:	2304      	movs	r3, #4
 8010d98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010d9c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d209      	bcs.n	8010dbc <dhcp_parse_reply+0x244>
 8010da8:	4b34      	ldr	r3, [pc, #208]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010daa:	f240 6233 	movw	r2, #1587	@ 0x633
 8010dae:	4936      	ldr	r1, [pc, #216]	@ (8010e88 <dhcp_parse_reply+0x310>)
 8010db0:	4834      	ldr	r0, [pc, #208]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010db2:	f003 f875 	bl	8013ea0 <iprintf>
 8010db6:	f06f 0305 	mvn.w	r3, #5
 8010dba:	e1dd      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010dbc:	2307      	movs	r3, #7
 8010dbe:	623b      	str	r3, [r7, #32]
        break;
 8010dc0:	e0b2      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8010dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010dc6:	f003 0303 	and.w	r3, r3, #3
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d009      	beq.n	8010de4 <dhcp_parse_reply+0x26c>
 8010dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010dd2:	f240 6239 	movw	r2, #1593	@ 0x639
 8010dd6:	492d      	ldr	r1, [pc, #180]	@ (8010e8c <dhcp_parse_reply+0x314>)
 8010dd8:	482a      	ldr	r0, [pc, #168]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010dda:	f003 f861 	bl	8013ea0 <iprintf>
 8010dde:	f06f 0305 	mvn.w	r3, #5
 8010de2:	e1c9      	b.n	8011178 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8010de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010de8:	2b08      	cmp	r3, #8
 8010dea:	bf28      	it	cs
 8010dec:	2308      	movcs	r3, #8
 8010dee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010df2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010df6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d209      	bcs.n	8010e12 <dhcp_parse_reply+0x29a>
 8010dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010e00:	f240 623c 	movw	r2, #1596	@ 0x63c
 8010e04:	4920      	ldr	r1, [pc, #128]	@ (8010e88 <dhcp_parse_reply+0x310>)
 8010e06:	481f      	ldr	r0, [pc, #124]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010e08:	f003 f84a 	bl	8013ea0 <iprintf>
 8010e0c:	f06f 0305 	mvn.w	r3, #5
 8010e10:	e1b2      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8010e12:	2308      	movs	r3, #8
 8010e14:	623b      	str	r3, [r7, #32]
        break;
 8010e16:	e087      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e1c:	2b04      	cmp	r3, #4
 8010e1e:	d009      	beq.n	8010e34 <dhcp_parse_reply+0x2bc>
 8010e20:	4b16      	ldr	r3, [pc, #88]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010e22:	f240 6241 	movw	r2, #1601	@ 0x641
 8010e26:	4916      	ldr	r1, [pc, #88]	@ (8010e80 <dhcp_parse_reply+0x308>)
 8010e28:	4816      	ldr	r0, [pc, #88]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010e2a:	f003 f839 	bl	8013ea0 <iprintf>
 8010e2e:	f06f 0305 	mvn.w	r3, #5
 8010e32:	e1a1      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010e34:	2303      	movs	r3, #3
 8010e36:	623b      	str	r3, [r7, #32]
        break;
 8010e38:	e076      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d009      	beq.n	8010e56 <dhcp_parse_reply+0x2de>
 8010e42:	4b0e      	ldr	r3, [pc, #56]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010e44:	f240 624f 	movw	r2, #1615	@ 0x64f
 8010e48:	4911      	ldr	r1, [pc, #68]	@ (8010e90 <dhcp_parse_reply+0x318>)
 8010e4a:	480e      	ldr	r0, [pc, #56]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010e4c:	f003 f828 	bl	8013ea0 <iprintf>
 8010e50:	f06f 0305 	mvn.w	r3, #5
 8010e54:	e190      	b.n	8011178 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010e56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e58:	2bf0      	cmp	r3, #240	@ 0xf0
 8010e5a:	d009      	beq.n	8010e70 <dhcp_parse_reply+0x2f8>
 8010e5c:	4b07      	ldr	r3, [pc, #28]	@ (8010e7c <dhcp_parse_reply+0x304>)
 8010e5e:	f240 6251 	movw	r2, #1617	@ 0x651
 8010e62:	490c      	ldr	r1, [pc, #48]	@ (8010e94 <dhcp_parse_reply+0x31c>)
 8010e64:	4807      	ldr	r0, [pc, #28]	@ (8010e84 <dhcp_parse_reply+0x30c>)
 8010e66:	f003 f81b 	bl	8013ea0 <iprintf>
 8010e6a:	f06f 0305 	mvn.w	r3, #5
 8010e6e:	e183      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010e70:	2300      	movs	r3, #0
 8010e72:	623b      	str	r3, [r7, #32]
        break;
 8010e74:	e058      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
 8010e76:	bf00      	nop
 8010e78:	200043b8 	.word	0x200043b8
 8010e7c:	080170e0 	.word	0x080170e0
 8010e80:	08017368 	.word	0x08017368
 8010e84:	08017140 	.word	0x08017140
 8010e88:	08017374 	.word	0x08017374
 8010e8c:	08017388 	.word	0x08017388
 8010e90:	08017398 	.word	0x08017398
 8010e94:	080173a4 	.word	0x080173a4
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d009      	beq.n	8010eb4 <dhcp_parse_reply+0x33c>
 8010ea0:	4b9d      	ldr	r3, [pc, #628]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010ea2:	f240 6255 	movw	r2, #1621	@ 0x655
 8010ea6:	499d      	ldr	r1, [pc, #628]	@ (801111c <dhcp_parse_reply+0x5a4>)
 8010ea8:	489d      	ldr	r0, [pc, #628]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010eaa:	f002 fff9 	bl	8013ea0 <iprintf>
 8010eae:	f06f 0305 	mvn.w	r3, #5
 8010eb2:	e161      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	623b      	str	r3, [r7, #32]
        break;
 8010eb8:	e036      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ebe:	2b04      	cmp	r3, #4
 8010ec0:	d009      	beq.n	8010ed6 <dhcp_parse_reply+0x35e>
 8010ec2:	4b95      	ldr	r3, [pc, #596]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010ec4:	f240 6259 	movw	r2, #1625	@ 0x659
 8010ec8:	4996      	ldr	r1, [pc, #600]	@ (8011124 <dhcp_parse_reply+0x5ac>)
 8010eca:	4895      	ldr	r0, [pc, #596]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010ecc:	f002 ffe8 	bl	8013ea0 <iprintf>
 8010ed0:	f06f 0305 	mvn.w	r3, #5
 8010ed4:	e150      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	623b      	str	r3, [r7, #32]
        break;
 8010eda:	e025      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d009      	beq.n	8010ef8 <dhcp_parse_reply+0x380>
 8010ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010ee6:	f240 625d 	movw	r2, #1629	@ 0x65d
 8010eea:	498e      	ldr	r1, [pc, #568]	@ (8011124 <dhcp_parse_reply+0x5ac>)
 8010eec:	488c      	ldr	r0, [pc, #560]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010eee:	f002 ffd7 	bl	8013ea0 <iprintf>
 8010ef2:	f06f 0305 	mvn.w	r3, #5
 8010ef6:	e13f      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010ef8:	2304      	movs	r3, #4
 8010efa:	623b      	str	r3, [r7, #32]
        break;
 8010efc:	e014      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d009      	beq.n	8010f1a <dhcp_parse_reply+0x3a2>
 8010f06:	4b84      	ldr	r3, [pc, #528]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010f08:	f240 6261 	movw	r2, #1633	@ 0x661
 8010f0c:	4985      	ldr	r1, [pc, #532]	@ (8011124 <dhcp_parse_reply+0x5ac>)
 8010f0e:	4884      	ldr	r0, [pc, #528]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010f10:	f002 ffc6 	bl	8013ea0 <iprintf>
 8010f14:	f06f 0305 	mvn.w	r3, #5
 8010f18:	e12e      	b.n	8011178 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010f1a:	2305      	movs	r3, #5
 8010f1c:	623b      	str	r3, [r7, #32]
        break;
 8010f1e:	e003      	b.n	8010f28 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010f26:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d103      	bne.n	8010f36 <dhcp_parse_reply+0x3be>
      offset++;
 8010f2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f30:	3301      	adds	r3, #1
 8010f32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8010f34:	e0a1      	b.n	801107a <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010f36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f3c:	4413      	add	r3, r2
 8010f3e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8010f42:	4293      	cmp	r3, r2
 8010f44:	dd02      	ble.n	8010f4c <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8010f46:	f06f 0301 	mvn.w	r3, #1
 8010f4a:	e115      	b.n	8011178 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8010f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f54:	4413      	add	r3, r2
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	3302      	adds	r3, #2
 8010f5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8010f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f000 808a 	beq.w	801107a <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8010f66:	2300      	movs	r3, #0
 8010f68:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010f6a:	6a3b      	ldr	r3, [r7, #32]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	db02      	blt.n	8010f76 <dhcp_parse_reply+0x3fe>
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	2b09      	cmp	r3, #9
 8010f74:	dd06      	ble.n	8010f84 <dhcp_parse_reply+0x40c>
 8010f76:	4b68      	ldr	r3, [pc, #416]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010f78:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8010f7c:	496a      	ldr	r1, [pc, #424]	@ (8011128 <dhcp_parse_reply+0x5b0>)
 8010f7e:	4868      	ldr	r0, [pc, #416]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010f80:	f002 ff8e 	bl	8013ea0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010f84:	4a69      	ldr	r2, [pc, #420]	@ (801112c <dhcp_parse_reply+0x5b4>)
 8010f86:	6a3b      	ldr	r3, [r7, #32]
 8010f88:	4413      	add	r3, r2
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d174      	bne.n	801107a <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8010f90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f94:	2b04      	cmp	r3, #4
 8010f96:	bf28      	it	cs
 8010f98:	2304      	movcs	r3, #4
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010f9e:	8bfb      	ldrh	r3, [r7, #30]
 8010fa0:	8aba      	ldrh	r2, [r7, #20]
 8010fa2:	f107 0108 	add.w	r1, r7, #8
 8010fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010fa8:	f7f7 faee 	bl	8008588 <pbuf_copy_partial>
 8010fac:	4603      	mov	r3, r0
 8010fae:	461a      	mov	r2, r3
 8010fb0:	8abb      	ldrh	r3, [r7, #20]
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d002      	beq.n	8010fbc <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8010fb6:	f06f 0301 	mvn.w	r3, #1
 8010fba:	e0dd      	b.n	8011178 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8010fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fc0:	2b04      	cmp	r3, #4
 8010fc2:	d933      	bls.n	801102c <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fc8:	f003 0303 	and.w	r3, r3, #3
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d009      	beq.n	8010fe6 <dhcp_parse_reply+0x46e>
 8010fd2:	4b51      	ldr	r3, [pc, #324]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 8010fd4:	f240 6281 	movw	r2, #1665	@ 0x681
 8010fd8:	4955      	ldr	r1, [pc, #340]	@ (8011130 <dhcp_parse_reply+0x5b8>)
 8010fda:	4851      	ldr	r0, [pc, #324]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8010fdc:	f002 ff60 	bl	8013ea0 <iprintf>
 8010fe0:	f06f 0305 	mvn.w	r3, #5
 8010fe4:	e0c8      	b.n	8011178 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8010fe6:	4a51      	ldr	r2, [pc, #324]	@ (801112c <dhcp_parse_reply+0x5b4>)
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	4413      	add	r3, r2
 8010fec:	2201      	movs	r2, #1
 8010fee:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7f5 f957 	bl	80062a6 <lwip_htonl>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	494e      	ldr	r1, [pc, #312]	@ (8011134 <dhcp_parse_reply+0x5bc>)
 8010ffc:	6a3b      	ldr	r3, [r7, #32]
 8010ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011002:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011006:	3b04      	subs	r3, #4
 8011008:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801100c:	8bfb      	ldrh	r3, [r7, #30]
 801100e:	3304      	adds	r3, #4
 8011010:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011012:	8a7a      	ldrh	r2, [r7, #18]
 8011014:	8bfb      	ldrh	r3, [r7, #30]
 8011016:	429a      	cmp	r2, r3
 8011018:	d202      	bcs.n	8011020 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801101a:	f06f 0301 	mvn.w	r3, #1
 801101e:	e0ab      	b.n	8011178 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 8011020:	8a7b      	ldrh	r3, [r7, #18]
 8011022:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	3301      	adds	r3, #1
 8011028:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801102a:	e79e      	b.n	8010f6a <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801102c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011030:	2b04      	cmp	r3, #4
 8011032:	d106      	bne.n	8011042 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	4618      	mov	r0, r3
 8011038:	f7f5 f935 	bl	80062a6 <lwip_htonl>
 801103c:	4603      	mov	r3, r0
 801103e:	60bb      	str	r3, [r7, #8]
 8011040:	e011      	b.n	8011066 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011042:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011046:	2b01      	cmp	r3, #1
 8011048:	d009      	beq.n	801105e <dhcp_parse_reply+0x4e6>
 801104a:	4b33      	ldr	r3, [pc, #204]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 801104c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8011050:	4939      	ldr	r1, [pc, #228]	@ (8011138 <dhcp_parse_reply+0x5c0>)
 8011052:	4833      	ldr	r0, [pc, #204]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 8011054:	f002 ff24 	bl	8013ea0 <iprintf>
 8011058:	f06f 0305 	mvn.w	r3, #5
 801105c:	e08c      	b.n	8011178 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801105e:	f107 0308 	add.w	r3, r7, #8
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011066:	4a31      	ldr	r2, [pc, #196]	@ (801112c <dhcp_parse_reply+0x5b4>)
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	4413      	add	r3, r2
 801106c:	2201      	movs	r2, #1
 801106e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	4930      	ldr	r1, [pc, #192]	@ (8011134 <dhcp_parse_reply+0x5bc>)
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107c:	895b      	ldrh	r3, [r3, #10]
 801107e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011080:	429a      	cmp	r2, r3
 8011082:	d324      	bcc.n	80110ce <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8011084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011086:	895b      	ldrh	r3, [r3, #10]
 8011088:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801108e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011090:	895b      	ldrh	r3, [r3, #10]
 8011092:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8011098:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801109a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801109c:	429a      	cmp	r2, r3
 801109e:	d213      	bcs.n	80110c8 <dhcp_parse_reply+0x550>
        q = q->next;
 80110a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80110a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d109      	bne.n	80110c0 <dhcp_parse_reply+0x548>
 80110ac:	4b1a      	ldr	r3, [pc, #104]	@ (8011118 <dhcp_parse_reply+0x5a0>)
 80110ae:	f240 629d 	movw	r2, #1693	@ 0x69d
 80110b2:	4922      	ldr	r1, [pc, #136]	@ (801113c <dhcp_parse_reply+0x5c4>)
 80110b4:	481a      	ldr	r0, [pc, #104]	@ (8011120 <dhcp_parse_reply+0x5a8>)
 80110b6:	f002 fef3 	bl	8013ea0 <iprintf>
 80110ba:	f06f 0305 	mvn.w	r3, #5
 80110be:	e05b      	b.n	8011178 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 80110c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80110c6:	e002      	b.n	80110ce <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80110c8:	f06f 0301 	mvn.w	r3, #1
 80110cc:	e054      	b.n	8011178 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80110ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00a      	beq.n	80110ea <dhcp_parse_reply+0x572>
 80110d4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80110d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80110d8:	429a      	cmp	r2, r3
 80110da:	d206      	bcs.n	80110ea <dhcp_parse_reply+0x572>
 80110dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80110de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80110e0:	4413      	add	r3, r2
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	2bff      	cmp	r3, #255	@ 0xff
 80110e6:	f47f ad8a 	bne.w	8010bfe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80110ea:	4b10      	ldr	r3, [pc, #64]	@ (801112c <dhcp_parse_reply+0x5b4>)
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d02d      	beq.n	801114e <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80110f2:	4b10      	ldr	r3, [pc, #64]	@ (8011134 <dhcp_parse_reply+0x5bc>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80110f8:	4b0c      	ldr	r3, [pc, #48]	@ (801112c <dhcp_parse_reply+0x5b4>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d102      	bne.n	801110a <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8011104:	2301      	movs	r3, #1
 8011106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011108:	e021      	b.n	801114e <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2b02      	cmp	r3, #2
 801110e:	d117      	bne.n	8011140 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8011110:	2301      	movs	r3, #1
 8011112:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011114:	e01b      	b.n	801114e <dhcp_parse_reply+0x5d6>
 8011116:	bf00      	nop
 8011118:	080170e0 	.word	0x080170e0
 801111c:	08017398 	.word	0x08017398
 8011120:	08017140 	.word	0x08017140
 8011124:	08017368 	.word	0x08017368
 8011128:	080173bc 	.word	0x080173bc
 801112c:	200043b8 	.word	0x200043b8
 8011130:	080173d0 	.word	0x080173d0
 8011134:	20004390 	.word	0x20004390
 8011138:	080173e8 	.word	0x080173e8
 801113c:	080173fc 	.word	0x080173fc
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2b03      	cmp	r3, #3
 8011144:	d103      	bne.n	801114e <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8011146:	2301      	movs	r3, #1
 8011148:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801114a:	2301      	movs	r3, #1
 801114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8011158:	236c      	movs	r3, #108	@ 0x6c
 801115a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801115c:	23ec      	movs	r3, #236	@ 0xec
 801115e:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011160:	e527      	b.n	8010bb2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011164:	2b00      	cmp	r3, #0
 8011166:	d006      	beq.n	8011176 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8011168:	2300      	movs	r3, #0
 801116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801116c:	232c      	movs	r3, #44	@ 0x2c
 801116e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011170:	236c      	movs	r3, #108	@ 0x6c
 8011172:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8011174:	e51d      	b.n	8010bb2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011176:	2300      	movs	r3, #0
}
 8011178:	4618      	mov	r0, r3
 801117a:	3740      	adds	r7, #64	@ 0x40
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08a      	sub	sp, #40	@ 0x28
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801118e:	4b60      	ldr	r3, [pc, #384]	@ (8011310 <dhcp_recv+0x190>)
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011198:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 809d 	beq.w	80112e2 <dhcp_recv+0x162>
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	791b      	ldrb	r3, [r3, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 8098 	beq.w	80112e2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	895b      	ldrh	r3, [r3, #10]
 80111b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80111b8:	f240 8095 	bls.w	80112e6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	f040 8092 	bne.w	80112ea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80111c6:	2300      	movs	r3, #0
 80111c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80111cc:	e012      	b.n	80111f4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80111ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111d2:	6a3a      	ldr	r2, [r7, #32]
 80111d4:	4413      	add	r3, r2
 80111d6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80111da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111de:	69b9      	ldr	r1, [r7, #24]
 80111e0:	440b      	add	r3, r1
 80111e2:	7f1b      	ldrb	r3, [r3, #28]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	f040 8082 	bne.w	80112ee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80111ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111ee:	3301      	adds	r3, #1
 80111f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80111fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80111fe:	429a      	cmp	r2, r3
 8011200:	d203      	bcs.n	801120a <dhcp_recv+0x8a>
 8011202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011206:	2b05      	cmp	r3, #5
 8011208:	d9e1      	bls.n	80111ce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f7f5 f849 	bl	80062a6 <lwip_htonl>
 8011214:	4602      	mov	r2, r0
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	429a      	cmp	r2, r3
 801121c:	d169      	bne.n	80112f2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801121e:	69f9      	ldr	r1, [r7, #28]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff fca9 	bl	8010b78 <dhcp_parse_reply>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d164      	bne.n	80112f6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801122c:	4b39      	ldr	r3, [pc, #228]	@ (8011314 <dhcp_recv+0x194>)
 801122e:	785b      	ldrb	r3, [r3, #1]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d062      	beq.n	80112fa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801123a:	4b37      	ldr	r3, [pc, #220]	@ (8011318 <dhcp_recv+0x198>)
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011240:	7cfb      	ldrb	r3, [r7, #19]
 8011242:	2b05      	cmp	r3, #5
 8011244:	d12a      	bne.n	801129c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	795b      	ldrb	r3, [r3, #5]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d112      	bne.n	8011274 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801124e:	6979      	ldr	r1, [r7, #20]
 8011250:	6a38      	ldr	r0, [r7, #32]
 8011252:	f7fe fdcd 	bl	800fdf0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801125c:	f003 0308 	and.w	r3, r3, #8
 8011260:	2b00      	cmp	r3, #0
 8011262:	d003      	beq.n	801126c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011264:	6a38      	ldr	r0, [r7, #32]
 8011266:	f7fe fb3d 	bl	800f8e4 <dhcp_check>
 801126a:	e049      	b.n	8011300 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801126c:	6a38      	ldr	r0, [r7, #32]
 801126e:	f7ff f83d 	bl	80102ec <dhcp_bind>
 8011272:	e045      	b.n	8011300 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	795b      	ldrb	r3, [r3, #5]
 8011278:	2b03      	cmp	r3, #3
 801127a:	d007      	beq.n	801128c <dhcp_recv+0x10c>
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	795b      	ldrb	r3, [r3, #5]
 8011280:	2b04      	cmp	r3, #4
 8011282:	d003      	beq.n	801128c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011288:	2b05      	cmp	r3, #5
 801128a:	d139      	bne.n	8011300 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801128c:	6979      	ldr	r1, [r7, #20]
 801128e:	6a38      	ldr	r0, [r7, #32]
 8011290:	f7fe fdae 	bl	800fdf0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011294:	6a38      	ldr	r0, [r7, #32]
 8011296:	f7ff f829 	bl	80102ec <dhcp_bind>
 801129a:	e031      	b.n	8011300 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801129c:	7cfb      	ldrb	r3, [r7, #19]
 801129e:	2b06      	cmp	r3, #6
 80112a0:	d113      	bne.n	80112ca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80112a6:	2b03      	cmp	r3, #3
 80112a8:	d00b      	beq.n	80112c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	795b      	ldrb	r3, [r3, #5]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d007      	beq.n	80112c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112b6:	2b04      	cmp	r3, #4
 80112b8:	d003      	beq.n	80112c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	795b      	ldrb	r3, [r3, #5]
 80112be:	2b05      	cmp	r3, #5
 80112c0:	d103      	bne.n	80112ca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80112c2:	6a38      	ldr	r0, [r7, #32]
 80112c4:	f7fe faf4 	bl	800f8b0 <dhcp_handle_nak>
 80112c8:	e01a      	b.n	8011300 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80112ca:	7cfb      	ldrb	r3, [r7, #19]
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d116      	bne.n	80112fe <dhcp_recv+0x17e>
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	795b      	ldrb	r3, [r3, #5]
 80112d4:	2b06      	cmp	r3, #6
 80112d6:	d112      	bne.n	80112fe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80112d8:	6979      	ldr	r1, [r7, #20]
 80112da:	6a38      	ldr	r0, [r7, #32]
 80112dc:	f7fe fb36 	bl	800f94c <dhcp_handle_offer>
 80112e0:	e00e      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112e2:	bf00      	nop
 80112e4:	e00c      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112e6:	bf00      	nop
 80112e8:	e00a      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112ea:	bf00      	nop
 80112ec:	e008      	b.n	8011300 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80112ee:	bf00      	nop
 80112f0:	e006      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112f2:	bf00      	nop
 80112f4:	e004      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112f6:	bf00      	nop
 80112f8:	e002      	b.n	8011300 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112fa:	bf00      	nop
 80112fc:	e000      	b.n	8011300 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80112fe:	bf00      	nop
  pbuf_free(p);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7f6 ff47 	bl	8008194 <pbuf_free>
}
 8011306:	bf00      	nop
 8011308:	3728      	adds	r7, #40	@ 0x28
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20000d90 	.word	0x20000d90
 8011314:	200043b8 	.word	0x200043b8
 8011318:	20004390 	.word	0x20004390

0801131c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	603b      	str	r3, [r7, #0]
 8011328:	4613      	mov	r3, r2
 801132a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d108      	bne.n	8011344 <dhcp_create_msg+0x28>
 8011332:	4b5f      	ldr	r3, [pc, #380]	@ (80114b0 <dhcp_create_msg+0x194>)
 8011334:	f240 7269 	movw	r2, #1897	@ 0x769
 8011338:	495e      	ldr	r1, [pc, #376]	@ (80114b4 <dhcp_create_msg+0x198>)
 801133a:	485f      	ldr	r0, [pc, #380]	@ (80114b8 <dhcp_create_msg+0x19c>)
 801133c:	f002 fdb0 	bl	8013ea0 <iprintf>
 8011340:	2300      	movs	r3, #0
 8011342:	e0b1      	b.n	80114a8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d108      	bne.n	801135c <dhcp_create_msg+0x40>
 801134a:	4b59      	ldr	r3, [pc, #356]	@ (80114b0 <dhcp_create_msg+0x194>)
 801134c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8011350:	495a      	ldr	r1, [pc, #360]	@ (80114bc <dhcp_create_msg+0x1a0>)
 8011352:	4859      	ldr	r0, [pc, #356]	@ (80114b8 <dhcp_create_msg+0x19c>)
 8011354:	f002 fda4 	bl	8013ea0 <iprintf>
 8011358:	2300      	movs	r3, #0
 801135a:	e0a5      	b.n	80114a8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801135c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011360:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8011364:	2036      	movs	r0, #54	@ 0x36
 8011366:	f7f6 fc31 	bl	8007bcc <pbuf_alloc>
 801136a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d101      	bne.n	8011376 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011372:	2300      	movs	r3, #0
 8011374:	e098      	b.n	80114a8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	895b      	ldrh	r3, [r3, #10]
 801137a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801137e:	d206      	bcs.n	801138e <dhcp_create_msg+0x72>
 8011380:	4b4b      	ldr	r3, [pc, #300]	@ (80114b0 <dhcp_create_msg+0x194>)
 8011382:	f240 7271 	movw	r2, #1905	@ 0x771
 8011386:	494e      	ldr	r1, [pc, #312]	@ (80114c0 <dhcp_create_msg+0x1a4>)
 8011388:	484b      	ldr	r0, [pc, #300]	@ (80114b8 <dhcp_create_msg+0x19c>)
 801138a:	f002 fd89 	bl	8013ea0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801138e:	79fb      	ldrb	r3, [r7, #7]
 8011390:	2b03      	cmp	r3, #3
 8011392:	d103      	bne.n	801139c <dhcp_create_msg+0x80>
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	795b      	ldrb	r3, [r3, #5]
 8011398:	2b03      	cmp	r3, #3
 801139a:	d10d      	bne.n	80113b8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	799b      	ldrb	r3, [r3, #6]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d105      	bne.n	80113b0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80113a4:	f002 fc7c 	bl	8013ca0 <rand>
 80113a8:	4603      	mov	r3, r0
 80113aa:	461a      	mov	r2, r3
 80113ac:	4b45      	ldr	r3, [pc, #276]	@ (80114c4 <dhcp_create_msg+0x1a8>)
 80113ae:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80113b0:	4b44      	ldr	r3, [pc, #272]	@ (80114c4 <dhcp_create_msg+0x1a8>)
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80113be:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80113c2:	2100      	movs	r1, #0
 80113c4:	6978      	ldr	r0, [r7, #20]
 80113c6:	f002 fdd0 	bl	8013f6a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2201      	movs	r2, #1
 80113ce:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	2201      	movs	r2, #1
 80113d4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7f4 ff5e 	bl	80062a6 <lwip_htonl>
 80113ea:	4602      	mov	r2, r0
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80113f0:	79fb      	ldrb	r3, [r7, #7]
 80113f2:	2b08      	cmp	r3, #8
 80113f4:	d010      	beq.n	8011418 <dhcp_create_msg+0xfc>
 80113f6:	79fb      	ldrb	r3, [r7, #7]
 80113f8:	2b04      	cmp	r3, #4
 80113fa:	d00d      	beq.n	8011418 <dhcp_create_msg+0xfc>
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	2b07      	cmp	r3, #7
 8011400:	d00a      	beq.n	8011418 <dhcp_create_msg+0xfc>
 8011402:	79fb      	ldrb	r3, [r7, #7]
 8011404:	2b03      	cmp	r3, #3
 8011406:	d10c      	bne.n	8011422 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801140c:	2b05      	cmp	r3, #5
 801140e:	d003      	beq.n	8011418 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	795b      	ldrb	r3, [r3, #5]
 8011414:	2b04      	cmp	r3, #4
 8011416:	d104      	bne.n	8011422 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	3304      	adds	r3, #4
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011422:	2300      	movs	r3, #0
 8011424:	83fb      	strh	r3, [r7, #30]
 8011426:	e00c      	b.n	8011442 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011428:	8bfa      	ldrh	r2, [r7, #30]
 801142a:	8bfb      	ldrh	r3, [r7, #30]
 801142c:	68f9      	ldr	r1, [r7, #12]
 801142e:	440a      	add	r2, r1
 8011430:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	4413      	add	r3, r2
 8011438:	460a      	mov	r2, r1
 801143a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801143c:	8bfb      	ldrh	r3, [r7, #30]
 801143e:	3301      	adds	r3, #1
 8011440:	83fb      	strh	r3, [r7, #30]
 8011442:	8bfb      	ldrh	r3, [r7, #30]
 8011444:	2b05      	cmp	r3, #5
 8011446:	d9ef      	bls.n	8011428 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	2200      	movs	r2, #0
 801144c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011450:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8011454:	2200      	movs	r2, #0
 8011456:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801145a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801145e:	2200      	movs	r2, #0
 8011460:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8011464:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8011468:	2200      	movs	r2, #0
 801146a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801146e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011478:	2301      	movs	r3, #1
 801147a:	2235      	movs	r2, #53	@ 0x35
 801147c:	2000      	movs	r0, #0
 801147e:	f7ff faab 	bl	80109d8 <dhcp_option>
 8011482:	4603      	mov	r3, r0
 8011484:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801148c:	79fa      	ldrb	r2, [r7, #7]
 801148e:	8a7b      	ldrh	r3, [r7, #18]
 8011490:	4618      	mov	r0, r3
 8011492:	f7ff fad5 	bl	8010a40 <dhcp_option_byte>
 8011496:	4603      	mov	r3, r0
 8011498:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d002      	beq.n	80114a6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	8a7a      	ldrh	r2, [r7, #18]
 80114a4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80114a6:	69bb      	ldr	r3, [r7, #24]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3720      	adds	r7, #32
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	080170e0 	.word	0x080170e0
 80114b4:	08017410 	.word	0x08017410
 80114b8:	08017140 	.word	0x08017140
 80114bc:	08017430 	.word	0x08017430
 80114c0:	08017450 	.word	0x08017450
 80114c4:	200043cc 	.word	0x200043cc

080114c8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	4603      	mov	r3, r0
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80114d6:	89fb      	ldrh	r3, [r7, #14]
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	81fa      	strh	r2, [r7, #14]
 80114dc:	461a      	mov	r2, r3
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	4413      	add	r3, r2
 80114e2:	22ff      	movs	r2, #255	@ 0xff
 80114e4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80114e6:	e007      	b.n	80114f8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80114e8:	89fb      	ldrh	r3, [r7, #14]
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	81fa      	strh	r2, [r7, #14]
 80114ee:	461a      	mov	r2, r3
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	4413      	add	r3, r2
 80114f4:	2200      	movs	r2, #0
 80114f6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80114f8:	89fb      	ldrh	r3, [r7, #14]
 80114fa:	2b43      	cmp	r3, #67	@ 0x43
 80114fc:	d904      	bls.n	8011508 <dhcp_option_trailer+0x40>
 80114fe:	89fb      	ldrh	r3, [r7, #14]
 8011500:	f003 0303 	and.w	r3, r3, #3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <dhcp_option_trailer+0x46>
 8011508:	89fb      	ldrh	r3, [r7, #14]
 801150a:	2b43      	cmp	r3, #67	@ 0x43
 801150c:	d9ec      	bls.n	80114e8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801150e:	89fb      	ldrh	r3, [r7, #14]
 8011510:	33f0      	adds	r3, #240	@ 0xf0
 8011512:	b29b      	uxth	r3, r3
 8011514:	4619      	mov	r1, r3
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7f6 fcb6 	bl	8007e88 <pbuf_realloc>
}
 801151c:	bf00      	nop
 801151e:	3710      	adds	r7, #16
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011524:	b480      	push	{r7}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d017      	beq.n	8011562 <dhcp_supplied_address+0x3e>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011536:	2b00      	cmp	r3, #0
 8011538:	d013      	beq.n	8011562 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801153e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	795b      	ldrb	r3, [r3, #5]
 8011544:	2b0a      	cmp	r3, #10
 8011546:	d007      	beq.n	8011558 <dhcp_supplied_address+0x34>
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	795b      	ldrb	r3, [r3, #5]
 801154c:	2b05      	cmp	r3, #5
 801154e:	d003      	beq.n	8011558 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011554:	2b04      	cmp	r3, #4
 8011556:	d101      	bne.n	801155c <dhcp_supplied_address+0x38>
 8011558:	2301      	movs	r3, #1
 801155a:	e000      	b.n	801155e <dhcp_supplied_address+0x3a>
 801155c:	2300      	movs	r3, #0
 801155e:	b2db      	uxtb	r3, r3
 8011560:	e000      	b.n	8011564 <dhcp_supplied_address+0x40>
  }
  return 0;
 8011562:	2300      	movs	r3, #0
}
 8011564:	4618      	mov	r0, r3
 8011566:	3714      	adds	r7, #20
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011578:	4915      	ldr	r1, [pc, #84]	@ (80115d0 <etharp_free_entry+0x60>)
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d013      	beq.n	80115b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801158c:	4910      	ldr	r1, [pc, #64]	@ (80115d0 <etharp_free_entry+0x60>)
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	4613      	mov	r3, r2
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	4413      	add	r3, r2
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	440b      	add	r3, r1
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4618      	mov	r0, r3
 801159e:	f7f6 fdf9 	bl	8008194 <pbuf_free>
    arp_table[i].q = NULL;
 80115a2:	490b      	ldr	r1, [pc, #44]	@ (80115d0 <etharp_free_entry+0x60>)
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	4613      	mov	r3, r2
 80115a8:	005b      	lsls	r3, r3, #1
 80115aa:	4413      	add	r3, r2
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	440b      	add	r3, r1
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80115b4:	4906      	ldr	r1, [pc, #24]	@ (80115d0 <etharp_free_entry+0x60>)
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	4613      	mov	r3, r2
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	4413      	add	r3, r2
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	440b      	add	r3, r1
 80115c2:	3314      	adds	r3, #20
 80115c4:	2200      	movs	r2, #0
 80115c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80115c8:	bf00      	nop
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	200043d0 	.word	0x200043d0

080115d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80115da:	2300      	movs	r3, #0
 80115dc:	607b      	str	r3, [r7, #4]
 80115de:	e096      	b.n	801170e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80115e0:	494f      	ldr	r1, [pc, #316]	@ (8011720 <etharp_tmr+0x14c>)
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	4613      	mov	r3, r2
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	4413      	add	r3, r2
 80115ea:	00db      	lsls	r3, r3, #3
 80115ec:	440b      	add	r3, r1
 80115ee:	3314      	adds	r3, #20
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80115f4:	78fb      	ldrb	r3, [r7, #3]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8086 	beq.w	8011708 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80115fc:	4948      	ldr	r1, [pc, #288]	@ (8011720 <etharp_tmr+0x14c>)
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	4613      	mov	r3, r2
 8011602:	005b      	lsls	r3, r3, #1
 8011604:	4413      	add	r3, r2
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	440b      	add	r3, r1
 801160a:	3312      	adds	r3, #18
 801160c:	881b      	ldrh	r3, [r3, #0]
 801160e:	3301      	adds	r3, #1
 8011610:	b298      	uxth	r0, r3
 8011612:	4943      	ldr	r1, [pc, #268]	@ (8011720 <etharp_tmr+0x14c>)
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	4613      	mov	r3, r2
 8011618:	005b      	lsls	r3, r3, #1
 801161a:	4413      	add	r3, r2
 801161c:	00db      	lsls	r3, r3, #3
 801161e:	440b      	add	r3, r1
 8011620:	3312      	adds	r3, #18
 8011622:	4602      	mov	r2, r0
 8011624:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011626:	493e      	ldr	r1, [pc, #248]	@ (8011720 <etharp_tmr+0x14c>)
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	4613      	mov	r3, r2
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	4413      	add	r3, r2
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	440b      	add	r3, r1
 8011634:	3312      	adds	r3, #18
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801163c:	d215      	bcs.n	801166a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801163e:	4938      	ldr	r1, [pc, #224]	@ (8011720 <etharp_tmr+0x14c>)
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	4613      	mov	r3, r2
 8011644:	005b      	lsls	r3, r3, #1
 8011646:	4413      	add	r3, r2
 8011648:	00db      	lsls	r3, r3, #3
 801164a:	440b      	add	r3, r1
 801164c:	3314      	adds	r3, #20
 801164e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011650:	2b01      	cmp	r3, #1
 8011652:	d10e      	bne.n	8011672 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011654:	4932      	ldr	r1, [pc, #200]	@ (8011720 <etharp_tmr+0x14c>)
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	4613      	mov	r3, r2
 801165a:	005b      	lsls	r3, r3, #1
 801165c:	4413      	add	r3, r2
 801165e:	00db      	lsls	r3, r3, #3
 8011660:	440b      	add	r3, r1
 8011662:	3312      	adds	r3, #18
 8011664:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011666:	2b04      	cmp	r3, #4
 8011668:	d903      	bls.n	8011672 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7ff ff80 	bl	8011570 <etharp_free_entry>
 8011670:	e04a      	b.n	8011708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011672:	492b      	ldr	r1, [pc, #172]	@ (8011720 <etharp_tmr+0x14c>)
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	4613      	mov	r3, r2
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	4413      	add	r3, r2
 801167c:	00db      	lsls	r3, r3, #3
 801167e:	440b      	add	r3, r1
 8011680:	3314      	adds	r3, #20
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	2b03      	cmp	r3, #3
 8011686:	d10a      	bne.n	801169e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011688:	4925      	ldr	r1, [pc, #148]	@ (8011720 <etharp_tmr+0x14c>)
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	4613      	mov	r3, r2
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	4413      	add	r3, r2
 8011692:	00db      	lsls	r3, r3, #3
 8011694:	440b      	add	r3, r1
 8011696:	3314      	adds	r3, #20
 8011698:	2204      	movs	r2, #4
 801169a:	701a      	strb	r2, [r3, #0]
 801169c:	e034      	b.n	8011708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801169e:	4920      	ldr	r1, [pc, #128]	@ (8011720 <etharp_tmr+0x14c>)
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	4613      	mov	r3, r2
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	4413      	add	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	440b      	add	r3, r1
 80116ac:	3314      	adds	r3, #20
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	2b04      	cmp	r3, #4
 80116b2:	d10a      	bne.n	80116ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80116b4:	491a      	ldr	r1, [pc, #104]	@ (8011720 <etharp_tmr+0x14c>)
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	4613      	mov	r3, r2
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	4413      	add	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	440b      	add	r3, r1
 80116c2:	3314      	adds	r3, #20
 80116c4:	2202      	movs	r2, #2
 80116c6:	701a      	strb	r2, [r3, #0]
 80116c8:	e01e      	b.n	8011708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116ca:	4915      	ldr	r1, [pc, #84]	@ (8011720 <etharp_tmr+0x14c>)
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	4613      	mov	r3, r2
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4413      	add	r3, r2
 80116d4:	00db      	lsls	r3, r3, #3
 80116d6:	440b      	add	r3, r1
 80116d8:	3314      	adds	r3, #20
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d113      	bne.n	8011708 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80116e0:	490f      	ldr	r1, [pc, #60]	@ (8011720 <etharp_tmr+0x14c>)
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	440b      	add	r3, r1
 80116ee:	3308      	adds	r3, #8
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4613      	mov	r3, r2
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	4413      	add	r3, r2
 80116fa:	00db      	lsls	r3, r3, #3
 80116fc:	4a08      	ldr	r2, [pc, #32]	@ (8011720 <etharp_tmr+0x14c>)
 80116fe:	4413      	add	r3, r2
 8011700:	3304      	adds	r3, #4
 8011702:	4619      	mov	r1, r3
 8011704:	f000 fe72 	bl	80123ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	3301      	adds	r3, #1
 801170c:	607b      	str	r3, [r7, #4]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b09      	cmp	r3, #9
 8011712:	f77f af65 	ble.w	80115e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8011716:	bf00      	nop
 8011718:	bf00      	nop
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	200043d0 	.word	0x200043d0

08011724 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b08a      	sub	sp, #40	@ 0x28
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	460b      	mov	r3, r1
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011732:	230a      	movs	r3, #10
 8011734:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011736:	230a      	movs	r3, #10
 8011738:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801173a:	230a      	movs	r3, #10
 801173c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011742:	230a      	movs	r3, #10
 8011744:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	83bb      	strh	r3, [r7, #28]
 801174a:	2300      	movs	r3, #0
 801174c:	837b      	strh	r3, [r7, #26]
 801174e:	2300      	movs	r3, #0
 8011750:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011752:	2300      	movs	r3, #0
 8011754:	843b      	strh	r3, [r7, #32]
 8011756:	e0ae      	b.n	80118b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011758:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801175c:	49a6      	ldr	r1, [pc, #664]	@ (80119f8 <etharp_find_entry+0x2d4>)
 801175e:	4613      	mov	r3, r2
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	4413      	add	r3, r2
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	440b      	add	r3, r1
 8011768:	3314      	adds	r3, #20
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801176e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011772:	2b0a      	cmp	r3, #10
 8011774:	d105      	bne.n	8011782 <etharp_find_entry+0x5e>
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d102      	bne.n	8011782 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801177c:	8c3b      	ldrh	r3, [r7, #32]
 801177e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011780:	e095      	b.n	80118ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011782:	7dfb      	ldrb	r3, [r7, #23]
 8011784:	2b00      	cmp	r3, #0
 8011786:	f000 8092 	beq.w	80118ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801178a:	7dfb      	ldrb	r3, [r7, #23]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d009      	beq.n	80117a4 <etharp_find_entry+0x80>
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d806      	bhi.n	80117a4 <etharp_find_entry+0x80>
 8011796:	4b99      	ldr	r3, [pc, #612]	@ (80119fc <etharp_find_entry+0x2d8>)
 8011798:	f240 1223 	movw	r2, #291	@ 0x123
 801179c:	4998      	ldr	r1, [pc, #608]	@ (8011a00 <etharp_find_entry+0x2dc>)
 801179e:	4899      	ldr	r0, [pc, #612]	@ (8011a04 <etharp_find_entry+0x2e0>)
 80117a0:	f002 fb7e 	bl	8013ea0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d020      	beq.n	80117ec <etharp_find_entry+0xc8>
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6819      	ldr	r1, [r3, #0]
 80117ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117b2:	4891      	ldr	r0, [pc, #580]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80117b4:	4613      	mov	r3, r2
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	4413      	add	r3, r2
 80117ba:	00db      	lsls	r3, r3, #3
 80117bc:	4403      	add	r3, r0
 80117be:	3304      	adds	r3, #4
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	4299      	cmp	r1, r3
 80117c4:	d112      	bne.n	80117ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00c      	beq.n	80117e6 <etharp_find_entry+0xc2>
 80117cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117d0:	4989      	ldr	r1, [pc, #548]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80117d2:	4613      	mov	r3, r2
 80117d4:	005b      	lsls	r3, r3, #1
 80117d6:	4413      	add	r3, r2
 80117d8:	00db      	lsls	r3, r3, #3
 80117da:	440b      	add	r3, r1
 80117dc:	3308      	adds	r3, #8
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d102      	bne.n	80117ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80117e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80117ea:	e100      	b.n	80119ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80117ec:	7dfb      	ldrb	r3, [r7, #23]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d140      	bne.n	8011874 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80117f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117f6:	4980      	ldr	r1, [pc, #512]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80117f8:	4613      	mov	r3, r2
 80117fa:	005b      	lsls	r3, r3, #1
 80117fc:	4413      	add	r3, r2
 80117fe:	00db      	lsls	r3, r3, #3
 8011800:	440b      	add	r3, r1
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d01a      	beq.n	801183e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801180c:	497a      	ldr	r1, [pc, #488]	@ (80119f8 <etharp_find_entry+0x2d4>)
 801180e:	4613      	mov	r3, r2
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	00db      	lsls	r3, r3, #3
 8011816:	440b      	add	r3, r1
 8011818:	3312      	adds	r3, #18
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	8bba      	ldrh	r2, [r7, #28]
 801181e:	429a      	cmp	r2, r3
 8011820:	d845      	bhi.n	80118ae <etharp_find_entry+0x18a>
            old_queue = i;
 8011822:	8c3b      	ldrh	r3, [r7, #32]
 8011824:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801182a:	4973      	ldr	r1, [pc, #460]	@ (80119f8 <etharp_find_entry+0x2d4>)
 801182c:	4613      	mov	r3, r2
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	4413      	add	r3, r2
 8011832:	00db      	lsls	r3, r3, #3
 8011834:	440b      	add	r3, r1
 8011836:	3312      	adds	r3, #18
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	83bb      	strh	r3, [r7, #28]
 801183c:	e037      	b.n	80118ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801183e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011842:	496d      	ldr	r1, [pc, #436]	@ (80119f8 <etharp_find_entry+0x2d4>)
 8011844:	4613      	mov	r3, r2
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	4413      	add	r3, r2
 801184a:	00db      	lsls	r3, r3, #3
 801184c:	440b      	add	r3, r1
 801184e:	3312      	adds	r3, #18
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	8b7a      	ldrh	r2, [r7, #26]
 8011854:	429a      	cmp	r2, r3
 8011856:	d82a      	bhi.n	80118ae <etharp_find_entry+0x18a>
            old_pending = i;
 8011858:	8c3b      	ldrh	r3, [r7, #32]
 801185a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801185c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011860:	4965      	ldr	r1, [pc, #404]	@ (80119f8 <etharp_find_entry+0x2d4>)
 8011862:	4613      	mov	r3, r2
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	4413      	add	r3, r2
 8011868:	00db      	lsls	r3, r3, #3
 801186a:	440b      	add	r3, r1
 801186c:	3312      	adds	r3, #18
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	837b      	strh	r3, [r7, #26]
 8011872:	e01c      	b.n	80118ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011874:	7dfb      	ldrb	r3, [r7, #23]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d919      	bls.n	80118ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801187a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801187e:	495e      	ldr	r1, [pc, #376]	@ (80119f8 <etharp_find_entry+0x2d4>)
 8011880:	4613      	mov	r3, r2
 8011882:	005b      	lsls	r3, r3, #1
 8011884:	4413      	add	r3, r2
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	440b      	add	r3, r1
 801188a:	3312      	adds	r3, #18
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	8b3a      	ldrh	r2, [r7, #24]
 8011890:	429a      	cmp	r2, r3
 8011892:	d80c      	bhi.n	80118ae <etharp_find_entry+0x18a>
            old_stable = i;
 8011894:	8c3b      	ldrh	r3, [r7, #32]
 8011896:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8011898:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801189c:	4956      	ldr	r1, [pc, #344]	@ (80119f8 <etharp_find_entry+0x2d4>)
 801189e:	4613      	mov	r3, r2
 80118a0:	005b      	lsls	r3, r3, #1
 80118a2:	4413      	add	r3, r2
 80118a4:	00db      	lsls	r3, r3, #3
 80118a6:	440b      	add	r3, r1
 80118a8:	3312      	adds	r3, #18
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118ae:	8c3b      	ldrh	r3, [r7, #32]
 80118b0:	3301      	adds	r3, #1
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	843b      	strh	r3, [r7, #32]
 80118b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118ba:	2b09      	cmp	r3, #9
 80118bc:	f77f af4c 	ble.w	8011758 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80118c0:	7afb      	ldrb	r3, [r7, #11]
 80118c2:	f003 0302 	and.w	r3, r3, #2
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d108      	bne.n	80118dc <etharp_find_entry+0x1b8>
 80118ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80118ce:	2b0a      	cmp	r3, #10
 80118d0:	d107      	bne.n	80118e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80118d2:	7afb      	ldrb	r3, [r7, #11]
 80118d4:	f003 0301 	and.w	r3, r3, #1
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d102      	bne.n	80118e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80118dc:	f04f 33ff 	mov.w	r3, #4294967295
 80118e0:	e085      	b.n	80119ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80118e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80118e6:	2b09      	cmp	r3, #9
 80118e8:	dc02      	bgt.n	80118f0 <etharp_find_entry+0x1cc>
    i = empty;
 80118ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80118ec:	843b      	strh	r3, [r7, #32]
 80118ee:	e039      	b.n	8011964 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80118f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80118f4:	2b09      	cmp	r3, #9
 80118f6:	dc14      	bgt.n	8011922 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80118f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80118fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80118fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011900:	493d      	ldr	r1, [pc, #244]	@ (80119f8 <etharp_find_entry+0x2d4>)
 8011902:	4613      	mov	r3, r2
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	4413      	add	r3, r2
 8011908:	00db      	lsls	r3, r3, #3
 801190a:	440b      	add	r3, r1
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d018      	beq.n	8011944 <etharp_find_entry+0x220>
 8011912:	4b3a      	ldr	r3, [pc, #232]	@ (80119fc <etharp_find_entry+0x2d8>)
 8011914:	f240 126d 	movw	r2, #365	@ 0x16d
 8011918:	493b      	ldr	r1, [pc, #236]	@ (8011a08 <etharp_find_entry+0x2e4>)
 801191a:	483a      	ldr	r0, [pc, #232]	@ (8011a04 <etharp_find_entry+0x2e0>)
 801191c:	f002 fac0 	bl	8013ea0 <iprintf>
 8011920:	e010      	b.n	8011944 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011922:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011926:	2b09      	cmp	r3, #9
 8011928:	dc02      	bgt.n	8011930 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801192a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801192c:	843b      	strh	r3, [r7, #32]
 801192e:	e009      	b.n	8011944 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011930:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011934:	2b09      	cmp	r3, #9
 8011936:	dc02      	bgt.n	801193e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011938:	8bfb      	ldrh	r3, [r7, #30]
 801193a:	843b      	strh	r3, [r7, #32]
 801193c:	e002      	b.n	8011944 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801193e:	f04f 33ff 	mov.w	r3, #4294967295
 8011942:	e054      	b.n	80119ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011944:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011948:	2b09      	cmp	r3, #9
 801194a:	dd06      	ble.n	801195a <etharp_find_entry+0x236>
 801194c:	4b2b      	ldr	r3, [pc, #172]	@ (80119fc <etharp_find_entry+0x2d8>)
 801194e:	f240 127f 	movw	r2, #383	@ 0x17f
 8011952:	492e      	ldr	r1, [pc, #184]	@ (8011a0c <etharp_find_entry+0x2e8>)
 8011954:	482b      	ldr	r0, [pc, #172]	@ (8011a04 <etharp_find_entry+0x2e0>)
 8011956:	f002 faa3 	bl	8013ea0 <iprintf>
    etharp_free_entry(i);
 801195a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801195e:	4618      	mov	r0, r3
 8011960:	f7ff fe06 	bl	8011570 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011964:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011968:	2b09      	cmp	r3, #9
 801196a:	dd06      	ble.n	801197a <etharp_find_entry+0x256>
 801196c:	4b23      	ldr	r3, [pc, #140]	@ (80119fc <etharp_find_entry+0x2d8>)
 801196e:	f240 1283 	movw	r2, #387	@ 0x183
 8011972:	4926      	ldr	r1, [pc, #152]	@ (8011a0c <etharp_find_entry+0x2e8>)
 8011974:	4823      	ldr	r0, [pc, #140]	@ (8011a04 <etharp_find_entry+0x2e0>)
 8011976:	f002 fa93 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801197a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801197e:	491e      	ldr	r1, [pc, #120]	@ (80119f8 <etharp_find_entry+0x2d4>)
 8011980:	4613      	mov	r3, r2
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	4413      	add	r3, r2
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	440b      	add	r3, r1
 801198a:	3314      	adds	r3, #20
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d006      	beq.n	80119a0 <etharp_find_entry+0x27c>
 8011992:	4b1a      	ldr	r3, [pc, #104]	@ (80119fc <etharp_find_entry+0x2d8>)
 8011994:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011998:	491d      	ldr	r1, [pc, #116]	@ (8011a10 <etharp_find_entry+0x2ec>)
 801199a:	481a      	ldr	r0, [pc, #104]	@ (8011a04 <etharp_find_entry+0x2e0>)
 801199c:	f002 fa80 	bl	8013ea0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00b      	beq.n	80119be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80119a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6819      	ldr	r1, [r3, #0]
 80119ae:	4812      	ldr	r0, [pc, #72]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80119b0:	4613      	mov	r3, r2
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	4413      	add	r3, r2
 80119b6:	00db      	lsls	r3, r3, #3
 80119b8:	4403      	add	r3, r0
 80119ba:	3304      	adds	r3, #4
 80119bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80119be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119c2:	490d      	ldr	r1, [pc, #52]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80119c4:	4613      	mov	r3, r2
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	4413      	add	r3, r2
 80119ca:	00db      	lsls	r3, r3, #3
 80119cc:	440b      	add	r3, r1
 80119ce:	3312      	adds	r3, #18
 80119d0:	2200      	movs	r2, #0
 80119d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80119d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d8:	4907      	ldr	r1, [pc, #28]	@ (80119f8 <etharp_find_entry+0x2d4>)
 80119da:	4613      	mov	r3, r2
 80119dc:	005b      	lsls	r3, r3, #1
 80119de:	4413      	add	r3, r2
 80119e0:	00db      	lsls	r3, r3, #3
 80119e2:	440b      	add	r3, r1
 80119e4:	3308      	adds	r3, #8
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80119ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3728      	adds	r7, #40	@ 0x28
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	200043d0 	.word	0x200043d0
 80119fc:	08017490 	.word	0x08017490
 8011a00:	080174c8 	.word	0x080174c8
 8011a04:	08017508 	.word	0x08017508
 8011a08:	08017530 	.word	0x08017530
 8011a0c:	08017548 	.word	0x08017548
 8011a10:	0801755c 	.word	0x0801755c

08011a14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b088      	sub	sp, #32
 8011a18:	af02      	add	r7, sp, #8
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011a28:	2b06      	cmp	r3, #6
 8011a2a:	d006      	beq.n	8011a3a <etharp_update_arp_entry+0x26>
 8011a2c:	4b48      	ldr	r3, [pc, #288]	@ (8011b50 <etharp_update_arp_entry+0x13c>)
 8011a2e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011a32:	4948      	ldr	r1, [pc, #288]	@ (8011b54 <etharp_update_arp_entry+0x140>)
 8011a34:	4848      	ldr	r0, [pc, #288]	@ (8011b58 <etharp_update_arp_entry+0x144>)
 8011a36:	f002 fa33 	bl	8013ea0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d012      	beq.n	8011a66 <etharp_update_arp_entry+0x52>
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00e      	beq.n	8011a66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68f9      	ldr	r1, [r7, #12]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f001 f9c0 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 8011a54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d105      	bne.n	8011a66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a62:	2be0      	cmp	r3, #224	@ 0xe0
 8011a64:	d102      	bne.n	8011a6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011a66:	f06f 030f 	mvn.w	r3, #15
 8011a6a:	e06c      	b.n	8011b46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011a6c:	78fb      	ldrb	r3, [r7, #3]
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	4619      	mov	r1, r3
 8011a72:	68b8      	ldr	r0, [r7, #8]
 8011a74:	f7ff fe56 	bl	8011724 <etharp_find_entry>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011a7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	da02      	bge.n	8011a8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011a84:	8afb      	ldrh	r3, [r7, #22]
 8011a86:	b25b      	sxtb	r3, r3
 8011a88:	e05d      	b.n	8011b46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011a8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a8e:	4933      	ldr	r1, [pc, #204]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011a90:	4613      	mov	r3, r2
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	4413      	add	r3, r2
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	440b      	add	r3, r1
 8011a9a:	3314      	adds	r3, #20
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011aa0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011aa4:	492d      	ldr	r1, [pc, #180]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3308      	adds	r3, #8
 8011ab2:	68fa      	ldr	r2, [r7, #12]
 8011ab4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011ab6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011aba:	4613      	mov	r3, r2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	4413      	add	r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	4a25      	ldr	r2, [pc, #148]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011ac6:	4413      	add	r3, r2
 8011ac8:	3304      	adds	r3, #4
 8011aca:	2206      	movs	r2, #6
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f002 fac1 	bl	8014056 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011ad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ad8:	4920      	ldr	r1, [pc, #128]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011ada:	4613      	mov	r3, r2
 8011adc:	005b      	lsls	r3, r3, #1
 8011ade:	4413      	add	r3, r2
 8011ae0:	00db      	lsls	r3, r3, #3
 8011ae2:	440b      	add	r3, r1
 8011ae4:	3312      	adds	r3, #18
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011aea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011aee:	491b      	ldr	r1, [pc, #108]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011af0:	4613      	mov	r3, r2
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	4413      	add	r3, r2
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	440b      	add	r3, r1
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d021      	beq.n	8011b44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011b00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b04:	4915      	ldr	r1, [pc, #84]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011b06:	4613      	mov	r3, r2
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	00db      	lsls	r3, r3, #3
 8011b0e:	440b      	add	r3, r1
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011b14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b18:	4910      	ldr	r1, [pc, #64]	@ (8011b5c <etharp_update_arp_entry+0x148>)
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	005b      	lsls	r3, r3, #1
 8011b1e:	4413      	add	r3, r2
 8011b20:	00db      	lsls	r3, r3, #3
 8011b22:	440b      	add	r3, r1
 8011b24:	2200      	movs	r2, #0
 8011b26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011b2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6939      	ldr	r1, [r7, #16]
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f002 f869 	bl	8013c10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011b3e:	6938      	ldr	r0, [r7, #16]
 8011b40:	f7f6 fb28 	bl	8008194 <pbuf_free>
  }
  return ERR_OK;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3718      	adds	r7, #24
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	08017490 	.word	0x08017490
 8011b54:	08017588 	.word	0x08017588
 8011b58:	08017508 	.word	0x08017508
 8011b5c:	200043d0 	.word	0x200043d0

08011b60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b68:	2300      	movs	r3, #0
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	e01e      	b.n	8011bac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011b6e:	4913      	ldr	r1, [pc, #76]	@ (8011bbc <etharp_cleanup_netif+0x5c>)
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	4613      	mov	r3, r2
 8011b74:	005b      	lsls	r3, r3, #1
 8011b76:	4413      	add	r3, r2
 8011b78:	00db      	lsls	r3, r3, #3
 8011b7a:	440b      	add	r3, r1
 8011b7c:	3314      	adds	r3, #20
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011b82:	7afb      	ldrb	r3, [r7, #11]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00e      	beq.n	8011ba6 <etharp_cleanup_netif+0x46>
 8011b88:	490c      	ldr	r1, [pc, #48]	@ (8011bbc <etharp_cleanup_netif+0x5c>)
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	4413      	add	r3, r2
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	440b      	add	r3, r1
 8011b96:	3308      	adds	r3, #8
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d102      	bne.n	8011ba6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f7ff fce5 	bl	8011570 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	60fb      	str	r3, [r7, #12]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2b09      	cmp	r3, #9
 8011bb0:	dddd      	ble.n	8011b6e <etharp_cleanup_netif+0xe>
    }
  }
}
 8011bb2:	bf00      	nop
 8011bb4:	bf00      	nop
 8011bb6:	3710      	adds	r7, #16
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	200043d0 	.word	0x200043d0

08011bc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011bc0:	b5b0      	push	{r4, r5, r7, lr}
 8011bc2:	b08a      	sub	sp, #40	@ 0x28
 8011bc4:	af04      	add	r7, sp, #16
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d107      	bne.n	8011be0 <etharp_input+0x20>
 8011bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8011cd0 <etharp_input+0x110>)
 8011bd2:	f240 228a 	movw	r2, #650	@ 0x28a
 8011bd6:	493f      	ldr	r1, [pc, #252]	@ (8011cd4 <etharp_input+0x114>)
 8011bd8:	483f      	ldr	r0, [pc, #252]	@ (8011cd8 <etharp_input+0x118>)
 8011bda:	f002 f961 	bl	8013ea0 <iprintf>
 8011bde:	e074      	b.n	8011cca <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	881b      	ldrh	r3, [r3, #0]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bf0:	d10c      	bne.n	8011c0c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011bf6:	2b06      	cmp	r3, #6
 8011bf8:	d108      	bne.n	8011c0c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011bfe:	2b04      	cmp	r3, #4
 8011c00:	d104      	bne.n	8011c0c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	885b      	ldrh	r3, [r3, #2]
 8011c06:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011c08:	2b08      	cmp	r3, #8
 8011c0a:	d003      	beq.n	8011c14 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7f6 fac1 	bl	8008194 <pbuf_free>
    return;
 8011c12:	e05a      	b.n	8011cca <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	330e      	adds	r3, #14
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	3318      	adds	r3, #24
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	3304      	adds	r3, #4
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d102      	bne.n	8011c34 <etharp_input+0x74>
    for_us = 0;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	75fb      	strb	r3, [r7, #23]
 8011c32:	e009      	b.n	8011c48 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011c34:	68ba      	ldr	r2, [r7, #8]
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	3304      	adds	r3, #4
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	bf0c      	ite	eq
 8011c40:	2301      	moveq	r3, #1
 8011c42:	2300      	movne	r3, #0
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	f103 0208 	add.w	r2, r3, #8
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d001      	beq.n	8011c58 <etharp_input+0x98>
 8011c54:	2301      	movs	r3, #1
 8011c56:	e000      	b.n	8011c5a <etharp_input+0x9a>
 8011c58:	2302      	movs	r3, #2
 8011c5a:	f107 010c 	add.w	r1, r7, #12
 8011c5e:	6838      	ldr	r0, [r7, #0]
 8011c60:	f7ff fed8 	bl	8011a14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	88db      	ldrh	r3, [r3, #6]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c6e:	d003      	beq.n	8011c78 <etharp_input+0xb8>
 8011c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c74:	d01e      	beq.n	8011cb4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011c76:	e025      	b.n	8011cc4 <etharp_input+0x104>
      if (for_us) {
 8011c78:	7dfb      	ldrb	r3, [r7, #23]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d021      	beq.n	8011cc2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011c94:	693a      	ldr	r2, [r7, #16]
 8011c96:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011c98:	2102      	movs	r1, #2
 8011c9a:	9103      	str	r1, [sp, #12]
 8011c9c:	f107 010c 	add.w	r1, r7, #12
 8011ca0:	9102      	str	r1, [sp, #8]
 8011ca2:	9201      	str	r2, [sp, #4]
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	462b      	mov	r3, r5
 8011ca8:	4622      	mov	r2, r4
 8011caa:	4601      	mov	r1, r0
 8011cac:	6838      	ldr	r0, [r7, #0]
 8011cae:	f000 faef 	bl	8012290 <etharp_raw>
      break;
 8011cb2:	e006      	b.n	8011cc2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011cb4:	f107 030c 	add.w	r3, r7, #12
 8011cb8:	4619      	mov	r1, r3
 8011cba:	6838      	ldr	r0, [r7, #0]
 8011cbc:	f7fe f9d2 	bl	8010064 <dhcp_arp_reply>
      break;
 8011cc0:	e000      	b.n	8011cc4 <etharp_input+0x104>
      break;
 8011cc2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f7f6 fa65 	bl	8008194 <pbuf_free>
}
 8011cca:	3718      	adds	r7, #24
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bdb0      	pop	{r4, r5, r7, pc}
 8011cd0:	08017490 	.word	0x08017490
 8011cd4:	080175e0 	.word	0x080175e0
 8011cd8:	08017508 	.word	0x08017508

08011cdc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af02      	add	r7, sp, #8
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011cea:	79fa      	ldrb	r2, [r7, #7]
 8011cec:	4944      	ldr	r1, [pc, #272]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011cee:	4613      	mov	r3, r2
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4413      	add	r3, r2
 8011cf4:	00db      	lsls	r3, r3, #3
 8011cf6:	440b      	add	r3, r1
 8011cf8:	3314      	adds	r3, #20
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d806      	bhi.n	8011d0e <etharp_output_to_arp_index+0x32>
 8011d00:	4b40      	ldr	r3, [pc, #256]	@ (8011e04 <etharp_output_to_arp_index+0x128>)
 8011d02:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011d06:	4940      	ldr	r1, [pc, #256]	@ (8011e08 <etharp_output_to_arp_index+0x12c>)
 8011d08:	4840      	ldr	r0, [pc, #256]	@ (8011e0c <etharp_output_to_arp_index+0x130>)
 8011d0a:	f002 f8c9 	bl	8013ea0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011d0e:	79fa      	ldrb	r2, [r7, #7]
 8011d10:	493b      	ldr	r1, [pc, #236]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d12:	4613      	mov	r3, r2
 8011d14:	005b      	lsls	r3, r3, #1
 8011d16:	4413      	add	r3, r2
 8011d18:	00db      	lsls	r3, r3, #3
 8011d1a:	440b      	add	r3, r1
 8011d1c:	3314      	adds	r3, #20
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b02      	cmp	r3, #2
 8011d22:	d153      	bne.n	8011dcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011d24:	79fa      	ldrb	r2, [r7, #7]
 8011d26:	4936      	ldr	r1, [pc, #216]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d28:	4613      	mov	r3, r2
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	4413      	add	r3, r2
 8011d2e:	00db      	lsls	r3, r3, #3
 8011d30:	440b      	add	r3, r1
 8011d32:	3312      	adds	r3, #18
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011d3a:	d919      	bls.n	8011d70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011d3c:	79fa      	ldrb	r2, [r7, #7]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	4a2e      	ldr	r2, [pc, #184]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d48:	4413      	add	r3, r2
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	68f8      	ldr	r0, [r7, #12]
 8011d50:	f000 fb4c 	bl	80123ec <etharp_request>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d138      	bne.n	8011dcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d5a:	79fa      	ldrb	r2, [r7, #7]
 8011d5c:	4928      	ldr	r1, [pc, #160]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d5e:	4613      	mov	r3, r2
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	4413      	add	r3, r2
 8011d64:	00db      	lsls	r3, r3, #3
 8011d66:	440b      	add	r3, r1
 8011d68:	3314      	adds	r3, #20
 8011d6a:	2203      	movs	r2, #3
 8011d6c:	701a      	strb	r2, [r3, #0]
 8011d6e:	e02d      	b.n	8011dcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011d70:	79fa      	ldrb	r2, [r7, #7]
 8011d72:	4923      	ldr	r1, [pc, #140]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	440b      	add	r3, r1
 8011d7e:	3312      	adds	r3, #18
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011d86:	d321      	bcc.n	8011dcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011d88:	79fa      	ldrb	r2, [r7, #7]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	4a1b      	ldr	r2, [pc, #108]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011d94:	4413      	add	r3, r2
 8011d96:	1d19      	adds	r1, r3, #4
 8011d98:	79fa      	ldrb	r2, [r7, #7]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	005b      	lsls	r3, r3, #1
 8011d9e:	4413      	add	r3, r2
 8011da0:	00db      	lsls	r3, r3, #3
 8011da2:	3308      	adds	r3, #8
 8011da4:	4a16      	ldr	r2, [pc, #88]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011da6:	4413      	add	r3, r2
 8011da8:	3304      	adds	r3, #4
 8011daa:	461a      	mov	r2, r3
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f000 fafb 	bl	80123a8 <etharp_request_dst>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d109      	bne.n	8011dcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011db8:	79fa      	ldrb	r2, [r7, #7]
 8011dba:	4911      	ldr	r1, [pc, #68]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011dbc:	4613      	mov	r3, r2
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	4413      	add	r3, r2
 8011dc2:	00db      	lsls	r3, r3, #3
 8011dc4:	440b      	add	r3, r1
 8011dc6:	3314      	adds	r3, #20
 8011dc8:	2203      	movs	r2, #3
 8011dca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8011dd2:	79fa      	ldrb	r2, [r7, #7]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	3308      	adds	r3, #8
 8011dde:	4a08      	ldr	r2, [pc, #32]	@ (8011e00 <etharp_output_to_arp_index+0x124>)
 8011de0:	4413      	add	r3, r2
 8011de2:	3304      	adds	r3, #4
 8011de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011de8:	9200      	str	r2, [sp, #0]
 8011dea:	460a      	mov	r2, r1
 8011dec:	68b9      	ldr	r1, [r7, #8]
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f001 ff0e 	bl	8013c10 <ethernet_output>
 8011df4:	4603      	mov	r3, r0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	200043d0 	.word	0x200043d0
 8011e04:	08017490 	.word	0x08017490
 8011e08:	08017600 	.word	0x08017600
 8011e0c:	08017508 	.word	0x08017508

08011e10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b08a      	sub	sp, #40	@ 0x28
 8011e14:	af02      	add	r7, sp, #8
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d106      	bne.n	8011e34 <etharp_output+0x24>
 8011e26:	4b73      	ldr	r3, [pc, #460]	@ (8011ff4 <etharp_output+0x1e4>)
 8011e28:	f240 321e 	movw	r2, #798	@ 0x31e
 8011e2c:	4972      	ldr	r1, [pc, #456]	@ (8011ff8 <etharp_output+0x1e8>)
 8011e2e:	4873      	ldr	r0, [pc, #460]	@ (8011ffc <etharp_output+0x1ec>)
 8011e30:	f002 f836 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d106      	bne.n	8011e48 <etharp_output+0x38>
 8011e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8011ff4 <etharp_output+0x1e4>)
 8011e3c:	f240 321f 	movw	r2, #799	@ 0x31f
 8011e40:	496f      	ldr	r1, [pc, #444]	@ (8012000 <etharp_output+0x1f0>)
 8011e42:	486e      	ldr	r0, [pc, #440]	@ (8011ffc <etharp_output+0x1ec>)
 8011e44:	f002 f82c 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d106      	bne.n	8011e5c <etharp_output+0x4c>
 8011e4e:	4b69      	ldr	r3, [pc, #420]	@ (8011ff4 <etharp_output+0x1e4>)
 8011e50:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011e54:	496b      	ldr	r1, [pc, #428]	@ (8012004 <etharp_output+0x1f4>)
 8011e56:	4869      	ldr	r0, [pc, #420]	@ (8011ffc <etharp_output+0x1ec>)
 8011e58:	f002 f822 	bl	8013ea0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	68f9      	ldr	r1, [r7, #12]
 8011e62:	4618      	mov	r0, r3
 8011e64:	f000 ffb6 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d002      	beq.n	8011e74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011e6e:	4b66      	ldr	r3, [pc, #408]	@ (8012008 <etharp_output+0x1f8>)
 8011e70:	61fb      	str	r3, [r7, #28]
 8011e72:	e0af      	b.n	8011fd4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e7c:	2be0      	cmp	r3, #224	@ 0xe0
 8011e7e:	d118      	bne.n	8011eb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011e80:	2301      	movs	r3, #1
 8011e82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011e84:	2300      	movs	r3, #0
 8011e86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011e88:	235e      	movs	r3, #94	@ 0x5e
 8011e8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	3302      	adds	r3, #2
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	3303      	adds	r3, #3
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011eaa:	f107 0310 	add.w	r3, r7, #16
 8011eae:	61fb      	str	r3, [r7, #28]
 8011eb0:	e090      	b.n	8011fd4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	405a      	eors	r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3308      	adds	r3, #8
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d012      	beq.n	8011ef0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ed0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d00b      	beq.n	8011ef0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	330c      	adds	r3, #12
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d003      	beq.n	8011eea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	330c      	adds	r3, #12
 8011ee6:	61bb      	str	r3, [r7, #24]
 8011ee8:	e002      	b.n	8011ef0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011eea:	f06f 0303 	mvn.w	r3, #3
 8011eee:	e07d      	b.n	8011fec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011ef0:	4b46      	ldr	r3, [pc, #280]	@ (801200c <etharp_output+0x1fc>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	4a46      	ldr	r2, [pc, #280]	@ (8012010 <etharp_output+0x200>)
 8011ef8:	460b      	mov	r3, r1
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	440b      	add	r3, r1
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	4413      	add	r3, r2
 8011f02:	3314      	adds	r3, #20
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d925      	bls.n	8011f56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f0a:	4b40      	ldr	r3, [pc, #256]	@ (801200c <etharp_output+0x1fc>)
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	4a3f      	ldr	r2, [pc, #252]	@ (8012010 <etharp_output+0x200>)
 8011f12:	460b      	mov	r3, r1
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	440b      	add	r3, r1
 8011f18:	00db      	lsls	r3, r3, #3
 8011f1a:	4413      	add	r3, r2
 8011f1c:	3308      	adds	r3, #8
 8011f1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f20:	68fa      	ldr	r2, [r7, #12]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d117      	bne.n	8011f56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	4b38      	ldr	r3, [pc, #224]	@ (801200c <etharp_output+0x1fc>)
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	4937      	ldr	r1, [pc, #220]	@ (8012010 <etharp_output+0x200>)
 8011f32:	4603      	mov	r3, r0
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	4403      	add	r3, r0
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	440b      	add	r3, r1
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d108      	bne.n	8011f56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011f44:	4b31      	ldr	r3, [pc, #196]	@ (801200c <etharp_output+0x1fc>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	461a      	mov	r2, r3
 8011f4a:	68b9      	ldr	r1, [r7, #8]
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7ff fec5 	bl	8011cdc <etharp_output_to_arp_index>
 8011f52:	4603      	mov	r3, r0
 8011f54:	e04a      	b.n	8011fec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f56:	2300      	movs	r3, #0
 8011f58:	75fb      	strb	r3, [r7, #23]
 8011f5a:	e031      	b.n	8011fc0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f5c:	7dfa      	ldrb	r2, [r7, #23]
 8011f5e:	492c      	ldr	r1, [pc, #176]	@ (8012010 <etharp_output+0x200>)
 8011f60:	4613      	mov	r3, r2
 8011f62:	005b      	lsls	r3, r3, #1
 8011f64:	4413      	add	r3, r2
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	440b      	add	r3, r1
 8011f6a:	3314      	adds	r3, #20
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d923      	bls.n	8011fba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011f72:	7dfa      	ldrb	r2, [r7, #23]
 8011f74:	4926      	ldr	r1, [pc, #152]	@ (8012010 <etharp_output+0x200>)
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	440b      	add	r3, r1
 8011f80:	3308      	adds	r3, #8
 8011f82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f84:	68fa      	ldr	r2, [r7, #12]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d117      	bne.n	8011fba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	6819      	ldr	r1, [r3, #0]
 8011f8e:	7dfa      	ldrb	r2, [r7, #23]
 8011f90:	481f      	ldr	r0, [pc, #124]	@ (8012010 <etharp_output+0x200>)
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	4403      	add	r3, r0
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011fa0:	4299      	cmp	r1, r3
 8011fa2:	d10a      	bne.n	8011fba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011fa4:	4a19      	ldr	r2, [pc, #100]	@ (801200c <etharp_output+0x1fc>)
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011faa:	7dfb      	ldrb	r3, [r7, #23]
 8011fac:	461a      	mov	r2, r3
 8011fae:	68b9      	ldr	r1, [r7, #8]
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f7ff fe93 	bl	8011cdc <etharp_output_to_arp_index>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	e018      	b.n	8011fec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011fba:	7dfb      	ldrb	r3, [r7, #23]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	75fb      	strb	r3, [r7, #23]
 8011fc0:	7dfb      	ldrb	r3, [r7, #23]
 8011fc2:	2b09      	cmp	r3, #9
 8011fc4:	d9ca      	bls.n	8011f5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	69b9      	ldr	r1, [r7, #24]
 8011fca:	68f8      	ldr	r0, [r7, #12]
 8011fcc:	f000 f822 	bl	8012014 <etharp_query>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	e00b      	b.n	8011fec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	69fb      	ldr	r3, [r7, #28]
 8011fe2:	68b9      	ldr	r1, [r7, #8]
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f001 fe13 	bl	8013c10 <ethernet_output>
 8011fea:	4603      	mov	r3, r0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3720      	adds	r7, #32
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	08017490 	.word	0x08017490
 8011ff8:	080175e0 	.word	0x080175e0
 8011ffc:	08017508 	.word	0x08017508
 8012000:	08017630 	.word	0x08017630
 8012004:	080175d0 	.word	0x080175d0
 8012008:	08017c8c 	.word	0x08017c8c
 801200c:	200044c0 	.word	0x200044c0
 8012010:	200043d0 	.word	0x200043d0

08012014 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08c      	sub	sp, #48	@ 0x30
 8012018:	af02      	add	r7, sp, #8
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	332a      	adds	r3, #42	@ 0x2a
 8012024:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012026:	23ff      	movs	r3, #255	@ 0xff
 8012028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801202c:	2300      	movs	r3, #0
 801202e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68f9      	ldr	r1, [r7, #12]
 8012036:	4618      	mov	r0, r3
 8012038:	f000 fecc 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 801203c:	4603      	mov	r3, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10c      	bne.n	801205c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801204a:	2be0      	cmp	r3, #224	@ 0xe0
 801204c:	d006      	beq.n	801205c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d102      	bne.n	8012062 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801205c:	f06f 030f 	mvn.w	r3, #15
 8012060:	e101      	b.n	8012266 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012062:	68fa      	ldr	r2, [r7, #12]
 8012064:	2101      	movs	r1, #1
 8012066:	68b8      	ldr	r0, [r7, #8]
 8012068:	f7ff fb5c 	bl	8011724 <etharp_find_entry>
 801206c:	4603      	mov	r3, r0
 801206e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012070:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012074:	2b00      	cmp	r3, #0
 8012076:	da02      	bge.n	801207e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012078:	8a7b      	ldrh	r3, [r7, #18]
 801207a:	b25b      	sxtb	r3, r3
 801207c:	e0f3      	b.n	8012266 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801207e:	8a7b      	ldrh	r3, [r7, #18]
 8012080:	2b7e      	cmp	r3, #126	@ 0x7e
 8012082:	d906      	bls.n	8012092 <etharp_query+0x7e>
 8012084:	4b7a      	ldr	r3, [pc, #488]	@ (8012270 <etharp_query+0x25c>)
 8012086:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801208a:	497a      	ldr	r1, [pc, #488]	@ (8012274 <etharp_query+0x260>)
 801208c:	487a      	ldr	r0, [pc, #488]	@ (8012278 <etharp_query+0x264>)
 801208e:	f001 ff07 	bl	8013ea0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012092:	8a7b      	ldrh	r3, [r7, #18]
 8012094:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012096:	7c7a      	ldrb	r2, [r7, #17]
 8012098:	4978      	ldr	r1, [pc, #480]	@ (801227c <etharp_query+0x268>)
 801209a:	4613      	mov	r3, r2
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	4413      	add	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	440b      	add	r3, r1
 80120a4:	3314      	adds	r3, #20
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d115      	bne.n	80120d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80120ac:	2301      	movs	r3, #1
 80120ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80120b0:	7c7a      	ldrb	r2, [r7, #17]
 80120b2:	4972      	ldr	r1, [pc, #456]	@ (801227c <etharp_query+0x268>)
 80120b4:	4613      	mov	r3, r2
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	4413      	add	r3, r2
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	440b      	add	r3, r1
 80120be:	3314      	adds	r3, #20
 80120c0:	2201      	movs	r2, #1
 80120c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80120c4:	7c7a      	ldrb	r2, [r7, #17]
 80120c6:	496d      	ldr	r1, [pc, #436]	@ (801227c <etharp_query+0x268>)
 80120c8:	4613      	mov	r3, r2
 80120ca:	005b      	lsls	r3, r3, #1
 80120cc:	4413      	add	r3, r2
 80120ce:	00db      	lsls	r3, r3, #3
 80120d0:	440b      	add	r3, r1
 80120d2:	3308      	adds	r3, #8
 80120d4:	68fa      	ldr	r2, [r7, #12]
 80120d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80120d8:	7c7a      	ldrb	r2, [r7, #17]
 80120da:	4968      	ldr	r1, [pc, #416]	@ (801227c <etharp_query+0x268>)
 80120dc:	4613      	mov	r3, r2
 80120de:	005b      	lsls	r3, r3, #1
 80120e0:	4413      	add	r3, r2
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	440b      	add	r3, r1
 80120e6:	3314      	adds	r3, #20
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d011      	beq.n	8012112 <etharp_query+0xfe>
 80120ee:	7c7a      	ldrb	r2, [r7, #17]
 80120f0:	4962      	ldr	r1, [pc, #392]	@ (801227c <etharp_query+0x268>)
 80120f2:	4613      	mov	r3, r2
 80120f4:	005b      	lsls	r3, r3, #1
 80120f6:	4413      	add	r3, r2
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	440b      	add	r3, r1
 80120fc:	3314      	adds	r3, #20
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d806      	bhi.n	8012112 <etharp_query+0xfe>
 8012104:	4b5a      	ldr	r3, [pc, #360]	@ (8012270 <etharp_query+0x25c>)
 8012106:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801210a:	495d      	ldr	r1, [pc, #372]	@ (8012280 <etharp_query+0x26c>)
 801210c:	485a      	ldr	r0, [pc, #360]	@ (8012278 <etharp_query+0x264>)
 801210e:	f001 fec7 	bl	8013ea0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012112:	6a3b      	ldr	r3, [r7, #32]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d102      	bne.n	801211e <etharp_query+0x10a>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10c      	bne.n	8012138 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801211e:	68b9      	ldr	r1, [r7, #8]
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f000 f963 	bl	80123ec <etharp_request>
 8012126:	4603      	mov	r3, r0
 8012128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d102      	bne.n	8012138 <etharp_query+0x124>
      return result;
 8012132:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012136:	e096      	b.n	8012266 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <etharp_query+0x138>
 801213e:	4b4c      	ldr	r3, [pc, #304]	@ (8012270 <etharp_query+0x25c>)
 8012140:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012144:	494f      	ldr	r1, [pc, #316]	@ (8012284 <etharp_query+0x270>)
 8012146:	484c      	ldr	r0, [pc, #304]	@ (8012278 <etharp_query+0x264>)
 8012148:	f001 feaa 	bl	8013ea0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801214c:	7c7a      	ldrb	r2, [r7, #17]
 801214e:	494b      	ldr	r1, [pc, #300]	@ (801227c <etharp_query+0x268>)
 8012150:	4613      	mov	r3, r2
 8012152:	005b      	lsls	r3, r3, #1
 8012154:	4413      	add	r3, r2
 8012156:	00db      	lsls	r3, r3, #3
 8012158:	440b      	add	r3, r1
 801215a:	3314      	adds	r3, #20
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	2b01      	cmp	r3, #1
 8012160:	d917      	bls.n	8012192 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012162:	4a49      	ldr	r2, [pc, #292]	@ (8012288 <etharp_query+0x274>)
 8012164:	7c7b      	ldrb	r3, [r7, #17]
 8012166:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012168:	7c7a      	ldrb	r2, [r7, #17]
 801216a:	4613      	mov	r3, r2
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	4413      	add	r3, r2
 8012170:	00db      	lsls	r3, r3, #3
 8012172:	3308      	adds	r3, #8
 8012174:	4a41      	ldr	r2, [pc, #260]	@ (801227c <etharp_query+0x268>)
 8012176:	4413      	add	r3, r2
 8012178:	3304      	adds	r3, #4
 801217a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801217e:	9200      	str	r2, [sp, #0]
 8012180:	697a      	ldr	r2, [r7, #20]
 8012182:	6879      	ldr	r1, [r7, #4]
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f001 fd43 	bl	8013c10 <ethernet_output>
 801218a:	4603      	mov	r3, r0
 801218c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012190:	e067      	b.n	8012262 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012192:	7c7a      	ldrb	r2, [r7, #17]
 8012194:	4939      	ldr	r1, [pc, #228]	@ (801227c <etharp_query+0x268>)
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	440b      	add	r3, r1
 80121a0:	3314      	adds	r3, #20
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d15c      	bne.n	8012262 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80121b0:	e01c      	b.n	80121ec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	895a      	ldrh	r2, [r3, #10]
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	891b      	ldrh	r3, [r3, #8]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d10a      	bne.n	80121d4 <etharp_query+0x1c0>
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d006      	beq.n	80121d4 <etharp_query+0x1c0>
 80121c6:	4b2a      	ldr	r3, [pc, #168]	@ (8012270 <etharp_query+0x25c>)
 80121c8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80121cc:	492f      	ldr	r1, [pc, #188]	@ (801228c <etharp_query+0x278>)
 80121ce:	482a      	ldr	r0, [pc, #168]	@ (8012278 <etharp_query+0x264>)
 80121d0:	f001 fe66 	bl	8013ea0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	7b1b      	ldrb	r3, [r3, #12]
 80121d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d002      	beq.n	80121e6 <etharp_query+0x1d2>
        copy_needed = 1;
 80121e0:	2301      	movs	r3, #1
 80121e2:	61bb      	str	r3, [r7, #24]
        break;
 80121e4:	e005      	b.n	80121f2 <etharp_query+0x1de>
      }
      p = p->next;
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80121ec:	69fb      	ldr	r3, [r7, #28]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1df      	bne.n	80121b2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80121fe:	200e      	movs	r0, #14
 8012200:	f7f6 fb6c 	bl	80088dc <pbuf_clone>
 8012204:	61f8      	str	r0, [r7, #28]
 8012206:	e004      	b.n	8012212 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801220c:	69f8      	ldr	r0, [r7, #28]
 801220e:	f7f6 f861 	bl	80082d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d021      	beq.n	801225c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012218:	7c7a      	ldrb	r2, [r7, #17]
 801221a:	4918      	ldr	r1, [pc, #96]	@ (801227c <etharp_query+0x268>)
 801221c:	4613      	mov	r3, r2
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	4413      	add	r3, r2
 8012222:	00db      	lsls	r3, r3, #3
 8012224:	440b      	add	r3, r1
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00a      	beq.n	8012242 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801222c:	7c7a      	ldrb	r2, [r7, #17]
 801222e:	4913      	ldr	r1, [pc, #76]	@ (801227c <etharp_query+0x268>)
 8012230:	4613      	mov	r3, r2
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	4413      	add	r3, r2
 8012236:	00db      	lsls	r3, r3, #3
 8012238:	440b      	add	r3, r1
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4618      	mov	r0, r3
 801223e:	f7f5 ffa9 	bl	8008194 <pbuf_free>
      }
      arp_table[i].q = p;
 8012242:	7c7a      	ldrb	r2, [r7, #17]
 8012244:	490d      	ldr	r1, [pc, #52]	@ (801227c <etharp_query+0x268>)
 8012246:	4613      	mov	r3, r2
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	4413      	add	r3, r2
 801224c:	00db      	lsls	r3, r3, #3
 801224e:	440b      	add	r3, r1
 8012250:	69fa      	ldr	r2, [r7, #28]
 8012252:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012254:	2300      	movs	r3, #0
 8012256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801225a:	e002      	b.n	8012262 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801225c:	23ff      	movs	r3, #255	@ 0xff
 801225e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012262:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012266:	4618      	mov	r0, r3
 8012268:	3728      	adds	r7, #40	@ 0x28
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	08017490 	.word	0x08017490
 8012274:	0801763c 	.word	0x0801763c
 8012278:	08017508 	.word	0x08017508
 801227c:	200043d0 	.word	0x200043d0
 8012280:	0801764c 	.word	0x0801764c
 8012284:	08017630 	.word	0x08017630
 8012288:	200044c0 	.word	0x200044c0
 801228c:	08017674 	.word	0x08017674

08012290 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08a      	sub	sp, #40	@ 0x28
 8012294:	af02      	add	r7, sp, #8
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
 801229c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801229e:	2300      	movs	r3, #0
 80122a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d106      	bne.n	80122b6 <etharp_raw+0x26>
 80122a8:	4b3a      	ldr	r3, [pc, #232]	@ (8012394 <etharp_raw+0x104>)
 80122aa:	f240 4257 	movw	r2, #1111	@ 0x457
 80122ae:	493a      	ldr	r1, [pc, #232]	@ (8012398 <etharp_raw+0x108>)
 80122b0:	483a      	ldr	r0, [pc, #232]	@ (801239c <etharp_raw+0x10c>)
 80122b2:	f001 fdf5 	bl	8013ea0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80122b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80122ba:	211c      	movs	r1, #28
 80122bc:	200e      	movs	r0, #14
 80122be:	f7f5 fc85 	bl	8007bcc <pbuf_alloc>
 80122c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d102      	bne.n	80122d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80122ca:	f04f 33ff 	mov.w	r3, #4294967295
 80122ce:	e05d      	b.n	801238c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	895b      	ldrh	r3, [r3, #10]
 80122d4:	2b1b      	cmp	r3, #27
 80122d6:	d806      	bhi.n	80122e6 <etharp_raw+0x56>
 80122d8:	4b2e      	ldr	r3, [pc, #184]	@ (8012394 <etharp_raw+0x104>)
 80122da:	f240 4262 	movw	r2, #1122	@ 0x462
 80122de:	4930      	ldr	r1, [pc, #192]	@ (80123a0 <etharp_raw+0x110>)
 80122e0:	482e      	ldr	r0, [pc, #184]	@ (801239c <etharp_raw+0x10c>)
 80122e2:	f001 fddd 	bl	8013ea0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80122ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7f3 ffc4 	bl	800627c <lwip_htons>
 80122f4:	4603      	mov	r3, r0
 80122f6:	461a      	mov	r2, r3
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012302:	2b06      	cmp	r3, #6
 8012304:	d006      	beq.n	8012314 <etharp_raw+0x84>
 8012306:	4b23      	ldr	r3, [pc, #140]	@ (8012394 <etharp_raw+0x104>)
 8012308:	f240 4269 	movw	r2, #1129	@ 0x469
 801230c:	4925      	ldr	r1, [pc, #148]	@ (80123a4 <etharp_raw+0x114>)
 801230e:	4823      	ldr	r0, [pc, #140]	@ (801239c <etharp_raw+0x10c>)
 8012310:	f001 fdc6 	bl	8013ea0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	3308      	adds	r3, #8
 8012318:	2206      	movs	r2, #6
 801231a:	6839      	ldr	r1, [r7, #0]
 801231c:	4618      	mov	r0, r3
 801231e:	f001 fe9a 	bl	8014056 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	3312      	adds	r3, #18
 8012326:	2206      	movs	r2, #6
 8012328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801232a:	4618      	mov	r0, r3
 801232c:	f001 fe93 	bl	8014056 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	330e      	adds	r3, #14
 8012334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012336:	6812      	ldr	r2, [r2, #0]
 8012338:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	3318      	adds	r3, #24
 801233e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012340:	6812      	ldr	r2, [r2, #0]
 8012342:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	2200      	movs	r2, #0
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	2200      	movs	r2, #0
 801234c:	f042 0201 	orr.w	r2, r2, #1
 8012350:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	2200      	movs	r2, #0
 8012356:	f042 0208 	orr.w	r2, r2, #8
 801235a:	709a      	strb	r2, [r3, #2]
 801235c:	2200      	movs	r2, #0
 801235e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2206      	movs	r2, #6
 8012364:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	2204      	movs	r2, #4
 801236a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801236c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	69b9      	ldr	r1, [r7, #24]
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f001 fc49 	bl	8013c10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801237e:	69b8      	ldr	r0, [r7, #24]
 8012380:	f7f5 ff08 	bl	8008194 <pbuf_free>
  p = NULL;
 8012384:	2300      	movs	r3, #0
 8012386:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012388:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3720      	adds	r7, #32
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	08017490 	.word	0x08017490
 8012398:	080175e0 	.word	0x080175e0
 801239c:	08017508 	.word	0x08017508
 80123a0:	08017690 	.word	0x08017690
 80123a4:	080176c4 	.word	0x080176c4

080123a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af04      	add	r7, sp, #16
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80123c4:	2201      	movs	r2, #1
 80123c6:	9203      	str	r2, [sp, #12]
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	9202      	str	r2, [sp, #8]
 80123cc:	4a06      	ldr	r2, [pc, #24]	@ (80123e8 <etharp_request_dst+0x40>)
 80123ce:	9201      	str	r2, [sp, #4]
 80123d0:	9300      	str	r3, [sp, #0]
 80123d2:	4603      	mov	r3, r0
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f7ff ff5a 	bl	8012290 <etharp_raw>
 80123dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08017c94 	.word	0x08017c94

080123ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80123f6:	4a05      	ldr	r2, [pc, #20]	@ (801240c <etharp_request+0x20>)
 80123f8:	6839      	ldr	r1, [r7, #0]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ff ffd4 	bl	80123a8 <etharp_request_dst>
 8012400:	4603      	mov	r3, r0
}
 8012402:	4618      	mov	r0, r3
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	08017c8c 	.word	0x08017c8c

08012410 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08e      	sub	sp, #56	@ 0x38
 8012414:	af04      	add	r7, sp, #16
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801241a:	4b8b      	ldr	r3, [pc, #556]	@ (8012648 <icmp_input+0x238>)
 801241c:	689b      	ldr	r3, [r3, #8]
 801241e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	f003 030f 	and.w	r3, r3, #15
 8012428:	b2db      	uxtb	r3, r3
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	b2db      	uxtb	r3, r3
 801242e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012430:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012432:	2b13      	cmp	r3, #19
 8012434:	f240 80f1 	bls.w	801261a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	895b      	ldrh	r3, [r3, #10]
 801243c:	2b03      	cmp	r3, #3
 801243e:	f240 80ee 	bls.w	801261e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801244c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012450:	2b00      	cmp	r3, #0
 8012452:	f000 80db 	beq.w	801260c <icmp_input+0x1fc>
 8012456:	2b08      	cmp	r3, #8
 8012458:	f040 80db 	bne.w	8012612 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801245c:	4b7b      	ldr	r3, [pc, #492]	@ (801264c <icmp_input+0x23c>)
 801245e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012460:	4b79      	ldr	r3, [pc, #484]	@ (8012648 <icmp_input+0x238>)
 8012462:	695b      	ldr	r3, [r3, #20]
 8012464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012468:	2be0      	cmp	r3, #224	@ 0xe0
 801246a:	f000 80df 	beq.w	801262c <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801246e:	4b76      	ldr	r3, [pc, #472]	@ (8012648 <icmp_input+0x238>)
 8012470:	695b      	ldr	r3, [r3, #20]
 8012472:	4a75      	ldr	r2, [pc, #468]	@ (8012648 <icmp_input+0x238>)
 8012474:	6812      	ldr	r2, [r2, #0]
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f000 fcab 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	f040 80d5 	bne.w	8012630 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	891b      	ldrh	r3, [r3, #8]
 801248a:	2b07      	cmp	r3, #7
 801248c:	f240 80c9 	bls.w	8012622 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7f4 fb3a 	bl	8006b0a <inet_chksum_pbuf>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d003      	beq.n	80124a4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7f5 fe79 	bl	8008194 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80124a2:	e0ce      	b.n	8012642 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80124a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124a6:	330e      	adds	r3, #14
 80124a8:	4619      	mov	r1, r3
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7f5 fddc 	bl	8008068 <pbuf_add_header>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d04b      	beq.n	801254e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	891a      	ldrh	r2, [r3, #8]
 80124ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124bc:	4413      	add	r3, r2
 80124be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	891b      	ldrh	r3, [r3, #8]
 80124c4:	8b7a      	ldrh	r2, [r7, #26]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	f0c0 80b4 	bcc.w	8012634 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80124cc:	8b7b      	ldrh	r3, [r7, #26]
 80124ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124d2:	4619      	mov	r1, r3
 80124d4:	200e      	movs	r0, #14
 80124d6:	f7f5 fb79 	bl	8007bcc <pbuf_alloc>
 80124da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f000 80aa 	beq.w	8012638 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	895b      	ldrh	r3, [r3, #10]
 80124e8:	461a      	mov	r2, r3
 80124ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124ec:	3308      	adds	r3, #8
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d203      	bcs.n	80124fa <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80124f2:	6978      	ldr	r0, [r7, #20]
 80124f4:	f7f5 fe4e 	bl	8008194 <pbuf_free>
          goto icmperr;
 80124f8:	e09f      	b.n	801263a <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012502:	4618      	mov	r0, r3
 8012504:	f001 fda7 	bl	8014056 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012508:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801250a:	4619      	mov	r1, r3
 801250c:	6978      	ldr	r0, [r7, #20]
 801250e:	f7f5 fdbb 	bl	8008088 <pbuf_remove_header>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d009      	beq.n	801252c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012518:	4b4d      	ldr	r3, [pc, #308]	@ (8012650 <icmp_input+0x240>)
 801251a:	22b6      	movs	r2, #182	@ 0xb6
 801251c:	494d      	ldr	r1, [pc, #308]	@ (8012654 <icmp_input+0x244>)
 801251e:	484e      	ldr	r0, [pc, #312]	@ (8012658 <icmp_input+0x248>)
 8012520:	f001 fcbe 	bl	8013ea0 <iprintf>
          pbuf_free(r);
 8012524:	6978      	ldr	r0, [r7, #20]
 8012526:	f7f5 fe35 	bl	8008194 <pbuf_free>
          goto icmperr;
 801252a:	e086      	b.n	801263a <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	6978      	ldr	r0, [r7, #20]
 8012530:	f7f5 ff58 	bl	80083e4 <pbuf_copy>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d003      	beq.n	8012542 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801253a:	6978      	ldr	r0, [r7, #20]
 801253c:	f7f5 fe2a 	bl	8008194 <pbuf_free>
          goto icmperr;
 8012540:	e07b      	b.n	801263a <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7f5 fe26 	bl	8008194 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	607b      	str	r3, [r7, #4]
 801254c:	e00f      	b.n	801256e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801254e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012550:	330e      	adds	r3, #14
 8012552:	4619      	mov	r1, r3
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7f5 fd97 	bl	8008088 <pbuf_remove_header>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d006      	beq.n	801256e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012560:	4b3b      	ldr	r3, [pc, #236]	@ (8012650 <icmp_input+0x240>)
 8012562:	22c7      	movs	r2, #199	@ 0xc7
 8012564:	493d      	ldr	r1, [pc, #244]	@ (801265c <icmp_input+0x24c>)
 8012566:	483c      	ldr	r0, [pc, #240]	@ (8012658 <icmp_input+0x248>)
 8012568:	f001 fc9a 	bl	8013ea0 <iprintf>
          goto icmperr;
 801256c:	e065      	b.n	801263a <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012576:	4619      	mov	r1, r3
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7f5 fd75 	bl	8008068 <pbuf_add_header>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d145      	bne.n	8012610 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012592:	4b2d      	ldr	r3, [pc, #180]	@ (8012648 <icmp_input+0x238>)
 8012594:	691a      	ldr	r2, [r3, #16]
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	2200      	movs	r2, #0
 801259e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	885b      	ldrh	r3, [r3, #2]
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d907      	bls.n	80125be <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	885b      	ldrh	r3, [r3, #2]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	3309      	adds	r3, #9
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	805a      	strh	r2, [r3, #2]
 80125bc:	e006      	b.n	80125cc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	885b      	ldrh	r3, [r3, #2]
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	3308      	adds	r3, #8
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	22ff      	movs	r2, #255	@ 0xff
 80125d0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2200      	movs	r2, #0
 80125d6:	729a      	strb	r2, [r3, #10]
 80125d8:	2200      	movs	r2, #0
 80125da:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80125dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125de:	4619      	mov	r1, r3
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f7f4 fa80 	bl	8006ae6 <inet_chksum>
 80125e6:	4603      	mov	r3, r0
 80125e8:	461a      	mov	r2, r3
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	9302      	str	r3, [sp, #8]
 80125f2:	2301      	movs	r3, #1
 80125f4:	9301      	str	r3, [sp, #4]
 80125f6:	2300      	movs	r3, #0
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	23ff      	movs	r3, #255	@ 0xff
 80125fc:	2200      	movs	r2, #0
 80125fe:	69f9      	ldr	r1, [r7, #28]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 faa9 	bl	8012b58 <ip4_output_if>
 8012606:	4603      	mov	r3, r0
 8012608:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801260a:	e001      	b.n	8012610 <icmp_input+0x200>
      break;
 801260c:	bf00      	nop
 801260e:	e000      	b.n	8012612 <icmp_input+0x202>
      break;
 8012610:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f7f5 fdbe 	bl	8008194 <pbuf_free>
  return;
 8012618:	e013      	b.n	8012642 <icmp_input+0x232>
    goto lenerr;
 801261a:	bf00      	nop
 801261c:	e002      	b.n	8012624 <icmp_input+0x214>
    goto lenerr;
 801261e:	bf00      	nop
 8012620:	e000      	b.n	8012624 <icmp_input+0x214>
        goto lenerr;
 8012622:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7f5 fdb5 	bl	8008194 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801262a:	e00a      	b.n	8012642 <icmp_input+0x232>
        goto icmperr;
 801262c:	bf00      	nop
 801262e:	e004      	b.n	801263a <icmp_input+0x22a>
        goto icmperr;
 8012630:	bf00      	nop
 8012632:	e002      	b.n	801263a <icmp_input+0x22a>
          goto icmperr;
 8012634:	bf00      	nop
 8012636:	e000      	b.n	801263a <icmp_input+0x22a>
          goto icmperr;
 8012638:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7f5 fdaa 	bl	8008194 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012640:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012642:	3728      	adds	r7, #40	@ 0x28
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	20000d90 	.word	0x20000d90
 801264c:	20000da4 	.word	0x20000da4
 8012650:	08017708 	.word	0x08017708
 8012654:	08017740 	.word	0x08017740
 8012658:	08017778 	.word	0x08017778
 801265c:	080177a0 	.word	0x080177a0

08012660 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	460b      	mov	r3, r1
 801266a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801266c:	78fb      	ldrb	r3, [r7, #3]
 801266e:	461a      	mov	r2, r3
 8012670:	2103      	movs	r1, #3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 f814 	bl	80126a0 <icmp_send_response>
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801268c:	78fb      	ldrb	r3, [r7, #3]
 801268e:	461a      	mov	r2, r3
 8012690:	210b      	movs	r1, #11
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 f804 	bl	80126a0 <icmp_send_response>
}
 8012698:	bf00      	nop
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b08c      	sub	sp, #48	@ 0x30
 80126a4:	af04      	add	r7, sp, #16
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	460b      	mov	r3, r1
 80126aa:	70fb      	strb	r3, [r7, #3]
 80126ac:	4613      	mov	r3, r2
 80126ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80126b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80126b4:	2124      	movs	r1, #36	@ 0x24
 80126b6:	2022      	movs	r0, #34	@ 0x22
 80126b8:	f7f5 fa88 	bl	8007bcc <pbuf_alloc>
 80126bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d056      	beq.n	8012772 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	895b      	ldrh	r3, [r3, #10]
 80126c8:	2b23      	cmp	r3, #35	@ 0x23
 80126ca:	d806      	bhi.n	80126da <icmp_send_response+0x3a>
 80126cc:	4b2b      	ldr	r3, [pc, #172]	@ (801277c <icmp_send_response+0xdc>)
 80126ce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80126d2:	492b      	ldr	r1, [pc, #172]	@ (8012780 <icmp_send_response+0xe0>)
 80126d4:	482b      	ldr	r0, [pc, #172]	@ (8012784 <icmp_send_response+0xe4>)
 80126d6:	f001 fbe3 	bl	8013ea0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	78fa      	ldrb	r2, [r7, #3]
 80126ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	78ba      	ldrb	r2, [r7, #2]
 80126f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	2200      	movs	r2, #0
 80126f6:	711a      	strb	r2, [r3, #4]
 80126f8:	2200      	movs	r2, #0
 80126fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	2200      	movs	r2, #0
 8012700:	719a      	strb	r2, [r3, #6]
 8012702:	2200      	movs	r2, #0
 8012704:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	f103 0008 	add.w	r0, r3, #8
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	221c      	movs	r2, #28
 8012714:	4619      	mov	r1, r3
 8012716:	f001 fc9e 	bl	8014056 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012720:	f107 030c 	add.w	r3, r7, #12
 8012724:	4618      	mov	r0, r3
 8012726:	f000 f82f 	bl	8012788 <ip4_route>
 801272a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01b      	beq.n	801276a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	2200      	movs	r2, #0
 8012736:	709a      	strb	r2, [r3, #2]
 8012738:	2200      	movs	r2, #0
 801273a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	895b      	ldrh	r3, [r3, #10]
 8012740:	4619      	mov	r1, r3
 8012742:	6978      	ldr	r0, [r7, #20]
 8012744:	f7f4 f9cf 	bl	8006ae6 <inet_chksum>
 8012748:	4603      	mov	r3, r0
 801274a:	461a      	mov	r2, r3
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012750:	f107 020c 	add.w	r2, r7, #12
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	9302      	str	r3, [sp, #8]
 8012758:	2301      	movs	r3, #1
 801275a:	9301      	str	r3, [sp, #4]
 801275c:	2300      	movs	r3, #0
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	23ff      	movs	r3, #255	@ 0xff
 8012762:	2100      	movs	r1, #0
 8012764:	69f8      	ldr	r0, [r7, #28]
 8012766:	f000 f9f7 	bl	8012b58 <ip4_output_if>
  }
  pbuf_free(q);
 801276a:	69f8      	ldr	r0, [r7, #28]
 801276c:	f7f5 fd12 	bl	8008194 <pbuf_free>
 8012770:	e000      	b.n	8012774 <icmp_send_response+0xd4>
    return;
 8012772:	bf00      	nop
}
 8012774:	3720      	adds	r7, #32
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	08017708 	.word	0x08017708
 8012780:	080177d4 	.word	0x080177d4
 8012784:	08017778 	.word	0x08017778

08012788 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012788:	b480      	push	{r7}
 801278a:	b085      	sub	sp, #20
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012790:	4b33      	ldr	r3, [pc, #204]	@ (8012860 <ip4_route+0xd8>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60fb      	str	r3, [r7, #12]
 8012796:	e036      	b.n	8012806 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d02b      	beq.n	8012800 <ip4_route+0x78>
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80127ae:	089b      	lsrs	r3, r3, #2
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d022      	beq.n	8012800 <ip4_route+0x78>
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	3304      	adds	r3, #4
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d01d      	beq.n	8012800 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	3304      	adds	r3, #4
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	405a      	eors	r2, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3308      	adds	r3, #8
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4013      	ands	r3, r2
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d101      	bne.n	80127e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	e038      	b.n	8012852 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80127e6:	f003 0302 	and.w	r3, r3, #2
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d108      	bne.n	8012800 <ip4_route+0x78>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	330c      	adds	r3, #12
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d101      	bne.n	8012800 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	e028      	b.n	8012852 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	60fb      	str	r3, [r7, #12]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d1c5      	bne.n	8012798 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801280c:	4b15      	ldr	r3, [pc, #84]	@ (8012864 <ip4_route+0xdc>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d01a      	beq.n	801284a <ip4_route+0xc2>
 8012814:	4b13      	ldr	r3, [pc, #76]	@ (8012864 <ip4_route+0xdc>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	2b00      	cmp	r3, #0
 8012822:	d012      	beq.n	801284a <ip4_route+0xc2>
 8012824:	4b0f      	ldr	r3, [pc, #60]	@ (8012864 <ip4_route+0xdc>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801282c:	f003 0304 	and.w	r3, r3, #4
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00a      	beq.n	801284a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012834:	4b0b      	ldr	r3, [pc, #44]	@ (8012864 <ip4_route+0xdc>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	3304      	adds	r3, #4
 801283a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801283c:	2b00      	cmp	r3, #0
 801283e:	d004      	beq.n	801284a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	b2db      	uxtb	r3, r3
 8012846:	2b7f      	cmp	r3, #127	@ 0x7f
 8012848:	d101      	bne.n	801284e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801284a:	2300      	movs	r3, #0
 801284c:	e001      	b.n	8012852 <ip4_route+0xca>
  }

  return netif_default;
 801284e:	4b05      	ldr	r3, [pc, #20]	@ (8012864 <ip4_route+0xdc>)
 8012850:	681b      	ldr	r3, [r3, #0]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3714      	adds	r7, #20
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop
 8012860:	20004324 	.word	0x20004324
 8012864:	20004328 	.word	0x20004328

08012868 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012876:	f003 0301 	and.w	r3, r3, #1
 801287a:	b2db      	uxtb	r3, r3
 801287c:	2b00      	cmp	r3, #0
 801287e:	d016      	beq.n	80128ae <ip4_input_accept+0x46>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3304      	adds	r3, #4
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d011      	beq.n	80128ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801288a:	4b0b      	ldr	r3, [pc, #44]	@ (80128b8 <ip4_input_accept+0x50>)
 801288c:	695a      	ldr	r2, [r3, #20]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	3304      	adds	r3, #4
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	429a      	cmp	r2, r3
 8012896:	d008      	beq.n	80128aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012898:	4b07      	ldr	r3, [pc, #28]	@ (80128b8 <ip4_input_accept+0x50>)
 801289a:	695b      	ldr	r3, [r3, #20]
 801289c:	6879      	ldr	r1, [r7, #4]
 801289e:	4618      	mov	r0, r3
 80128a0:	f000 fa98 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 80128a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80128aa:	2301      	movs	r3, #1
 80128ac:	e000      	b.n	80128b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80128ae:	2300      	movs	r3, #0
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	20000d90 	.word	0x20000d90

080128bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b088      	sub	sp, #32
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80128c6:	2301      	movs	r3, #1
 80128c8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	091b      	lsrs	r3, r3, #4
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	2b04      	cmp	r3, #4
 80128da:	d004      	beq.n	80128e6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f7f5 fc59 	bl	8008194 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80128e2:	2300      	movs	r3, #0
 80128e4:	e130      	b.n	8012b48 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	f003 030f 	and.w	r3, r3, #15
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	009b      	lsls	r3, r3, #2
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	885b      	ldrh	r3, [r3, #2]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f3 fcbd 	bl	800627c <lwip_htons>
 8012902:	4603      	mov	r3, r0
 8012904:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	891b      	ldrh	r3, [r3, #8]
 801290a:	8a3a      	ldrh	r2, [r7, #16]
 801290c:	429a      	cmp	r2, r3
 801290e:	d204      	bcs.n	801291a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012910:	8a3b      	ldrh	r3, [r7, #16]
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7f5 fab7 	bl	8007e88 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	895b      	ldrh	r3, [r3, #10]
 801291e:	8a7a      	ldrh	r2, [r7, #18]
 8012920:	429a      	cmp	r2, r3
 8012922:	d807      	bhi.n	8012934 <ip4_input+0x78>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	891b      	ldrh	r3, [r3, #8]
 8012928:	8a3a      	ldrh	r2, [r7, #16]
 801292a:	429a      	cmp	r2, r3
 801292c:	d802      	bhi.n	8012934 <ip4_input+0x78>
 801292e:	8a7b      	ldrh	r3, [r7, #18]
 8012930:	2b13      	cmp	r3, #19
 8012932:	d804      	bhi.n	801293e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7f5 fc2d 	bl	8008194 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801293a:	2300      	movs	r3, #0
 801293c:	e104      	b.n	8012b48 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 801293e:	8a7b      	ldrh	r3, [r7, #18]
 8012940:	4619      	mov	r1, r3
 8012942:	69f8      	ldr	r0, [r7, #28]
 8012944:	f7f4 f8cf 	bl	8006ae6 <inet_chksum>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d004      	beq.n	8012958 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f7f5 fc20 	bl	8008194 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8012954:	2300      	movs	r3, #0
 8012956:	e0f7      	b.n	8012b48 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	4a7c      	ldr	r2, [pc, #496]	@ (8012b50 <ip4_input+0x294>)
 801295e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	4a7a      	ldr	r2, [pc, #488]	@ (8012b50 <ip4_input+0x294>)
 8012966:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012968:	4b79      	ldr	r3, [pc, #484]	@ (8012b50 <ip4_input+0x294>)
 801296a:	695b      	ldr	r3, [r3, #20]
 801296c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012970:	2be0      	cmp	r3, #224	@ 0xe0
 8012972:	d112      	bne.n	801299a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801297a:	f003 0301 	and.w	r3, r3, #1
 801297e:	b2db      	uxtb	r3, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	d007      	beq.n	8012994 <ip4_input+0xd8>
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	3304      	adds	r3, #4
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d002      	beq.n	8012994 <ip4_input+0xd8>
      netif = inp;
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	61bb      	str	r3, [r7, #24]
 8012992:	e02a      	b.n	80129ea <ip4_input+0x12e>
    } else {
      netif = NULL;
 8012994:	2300      	movs	r3, #0
 8012996:	61bb      	str	r3, [r7, #24]
 8012998:	e027      	b.n	80129ea <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801299a:	6838      	ldr	r0, [r7, #0]
 801299c:	f7ff ff64 	bl	8012868 <ip4_input_accept>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <ip4_input+0xf0>
      netif = inp;
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	61bb      	str	r3, [r7, #24]
 80129aa:	e01e      	b.n	80129ea <ip4_input+0x12e>
    } else {
      netif = NULL;
 80129ac:	2300      	movs	r3, #0
 80129ae:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80129b0:	4b67      	ldr	r3, [pc, #412]	@ (8012b50 <ip4_input+0x294>)
 80129b2:	695b      	ldr	r3, [r3, #20]
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80129b8:	d017      	beq.n	80129ea <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80129ba:	4b66      	ldr	r3, [pc, #408]	@ (8012b54 <ip4_input+0x298>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	61bb      	str	r3, [r7, #24]
 80129c0:	e00e      	b.n	80129e0 <ip4_input+0x124>
          if (netif == inp) {
 80129c2:	69ba      	ldr	r2, [r7, #24]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d006      	beq.n	80129d8 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80129ca:	69b8      	ldr	r0, [r7, #24]
 80129cc:	f7ff ff4c 	bl	8012868 <ip4_input_accept>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d108      	bne.n	80129e8 <ip4_input+0x12c>
 80129d6:	e000      	b.n	80129da <ip4_input+0x11e>
            continue;
 80129d8:	bf00      	nop
        NETIF_FOREACH(netif) {
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	61bb      	str	r3, [r7, #24]
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1ed      	bne.n	80129c2 <ip4_input+0x106>
 80129e6:	e000      	b.n	80129ea <ip4_input+0x12e>
            break;
 80129e8:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d111      	bne.n	8012a14 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	7a5b      	ldrb	r3, [r3, #9]
 80129f4:	2b11      	cmp	r3, #17
 80129f6:	d10d      	bne.n	8012a14 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80129f8:	8a7b      	ldrh	r3, [r7, #18]
 80129fa:	69fa      	ldr	r2, [r7, #28]
 80129fc:	4413      	add	r3, r2
 80129fe:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	885b      	ldrh	r3, [r3, #2]
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012a0a:	d103      	bne.n	8012a14 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012a10:	2300      	movs	r3, #0
 8012a12:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d017      	beq.n	8012a4a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8012b50 <ip4_input+0x294>)
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d013      	beq.n	8012a4a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a22:	4b4b      	ldr	r3, [pc, #300]	@ (8012b50 <ip4_input+0x294>)
 8012a24:	691b      	ldr	r3, [r3, #16]
 8012a26:	6839      	ldr	r1, [r7, #0]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f000 f9d3 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d105      	bne.n	8012a40 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012a34:	4b46      	ldr	r3, [pc, #280]	@ (8012b50 <ip4_input+0x294>)
 8012a36:	691b      	ldr	r3, [r3, #16]
 8012a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a3c:	2be0      	cmp	r3, #224	@ 0xe0
 8012a3e:	d104      	bne.n	8012a4a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7f5 fba7 	bl	8008194 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e07e      	b.n	8012b48 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d104      	bne.n	8012a5a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7f5 fb9f 	bl	8008194 <pbuf_free>
    return ERR_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e076      	b.n	8012b48 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	88db      	ldrh	r3, [r3, #6]
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	461a      	mov	r2, r3
 8012a62:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012a66:	4013      	ands	r3, r2
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00b      	beq.n	8012a84 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f000 fcf7 	bl	8013460 <ip4_reass>
 8012a72:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d101      	bne.n	8012a7e <ip4_input+0x1c2>
      return ERR_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e064      	b.n	8012b48 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012a84:	4a32      	ldr	r2, [pc, #200]	@ (8012b50 <ip4_input+0x294>)
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012a8a:	4a31      	ldr	r2, [pc, #196]	@ (8012b50 <ip4_input+0x294>)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012a90:	4a2f      	ldr	r2, [pc, #188]	@ (8012b50 <ip4_input+0x294>)
 8012a92:	69fb      	ldr	r3, [r7, #28]
 8012a94:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	f003 030f 	and.w	r3, r3, #15
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8012b50 <ip4_input+0x294>)
 8012aa8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012aaa:	8a7b      	ldrh	r3, [r7, #18]
 8012aac:	4619      	mov	r1, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7f5 faea 	bl	8008088 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	7a5b      	ldrb	r3, [r3, #9]
 8012ab8:	2b11      	cmp	r3, #17
 8012aba:	d006      	beq.n	8012aca <ip4_input+0x20e>
 8012abc:	2b11      	cmp	r3, #17
 8012abe:	dc13      	bgt.n	8012ae8 <ip4_input+0x22c>
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d00c      	beq.n	8012ade <ip4_input+0x222>
 8012ac4:	2b06      	cmp	r3, #6
 8012ac6:	d005      	beq.n	8012ad4 <ip4_input+0x218>
 8012ac8:	e00e      	b.n	8012ae8 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012aca:	6839      	ldr	r1, [r7, #0]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7fc f9d7 	bl	800ee80 <udp_input>
        break;
 8012ad2:	e026      	b.n	8012b22 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012ad4:	6839      	ldr	r1, [r7, #0]
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7f7 fd90 	bl	800a5fc <tcp_input>
        break;
 8012adc:	e021      	b.n	8012b22 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012ade:	6839      	ldr	r1, [r7, #0]
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7ff fc95 	bl	8012410 <icmp_input>
        break;
 8012ae6:	e01c      	b.n	8012b22 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012ae8:	4b19      	ldr	r3, [pc, #100]	@ (8012b50 <ip4_input+0x294>)
 8012aea:	695b      	ldr	r3, [r3, #20]
 8012aec:	69b9      	ldr	r1, [r7, #24]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f000 f970 	bl	8012dd4 <ip4_addr_isbroadcast_u32>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10f      	bne.n	8012b1a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012afa:	4b15      	ldr	r3, [pc, #84]	@ (8012b50 <ip4_input+0x294>)
 8012afc:	695b      	ldr	r3, [r3, #20]
 8012afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b02:	2be0      	cmp	r3, #224	@ 0xe0
 8012b04:	d009      	beq.n	8012b1a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012b06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7f5 fb2e 	bl	800816e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012b12:	2102      	movs	r1, #2
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff fda3 	bl	8012660 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7f5 fb3a 	bl	8008194 <pbuf_free>
        break;
 8012b20:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012b22:	4b0b      	ldr	r3, [pc, #44]	@ (8012b50 <ip4_input+0x294>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012b28:	4b09      	ldr	r3, [pc, #36]	@ (8012b50 <ip4_input+0x294>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012b2e:	4b08      	ldr	r3, [pc, #32]	@ (8012b50 <ip4_input+0x294>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012b34:	4b06      	ldr	r3, [pc, #24]	@ (8012b50 <ip4_input+0x294>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012b3a:	4b05      	ldr	r3, [pc, #20]	@ (8012b50 <ip4_input+0x294>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012b40:	4b03      	ldr	r3, [pc, #12]	@ (8012b50 <ip4_input+0x294>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012b46:	2300      	movs	r3, #0
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20000d90 	.word	0x20000d90
 8012b54:	20004324 	.word	0x20004324

08012b58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b08a      	sub	sp, #40	@ 0x28
 8012b5c:	af04      	add	r7, sp, #16
 8012b5e:	60f8      	str	r0, [r7, #12]
 8012b60:	60b9      	str	r1, [r7, #8]
 8012b62:	607a      	str	r2, [r7, #4]
 8012b64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d009      	beq.n	8012b84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d003      	beq.n	8012b7e <ip4_output_if+0x26>
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d102      	bne.n	8012b84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b80:	3304      	adds	r3, #4
 8012b82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012b84:	78fa      	ldrb	r2, [r7, #3]
 8012b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b88:	9302      	str	r3, [sp, #8]
 8012b8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012b8e:	9301      	str	r3, [sp, #4]
 8012b90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b94:	9300      	str	r3, [sp, #0]
 8012b96:	4613      	mov	r3, r2
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	6979      	ldr	r1, [r7, #20]
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f000 f805 	bl	8012bac <ip4_output_if_src>
 8012ba2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3718      	adds	r7, #24
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b088      	sub	sp, #32
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	607a      	str	r2, [r7, #4]
 8012bb8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	7b9b      	ldrb	r3, [r3, #14]
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d006      	beq.n	8012bd4 <ip4_output_if_src+0x28>
 8012bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8012dbc <ip4_output_if_src+0x210>)
 8012bc8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012bcc:	497c      	ldr	r1, [pc, #496]	@ (8012dc0 <ip4_output_if_src+0x214>)
 8012bce:	487d      	ldr	r0, [pc, #500]	@ (8012dc4 <ip4_output_if_src+0x218>)
 8012bd0:	f001 f966 	bl	8013ea0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f000 80c4 	beq.w	8012d64 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8012bdc:	2314      	movs	r3, #20
 8012bde:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012be0:	2114      	movs	r1, #20
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f7f5 fa40 	bl	8008068 <pbuf_add_header>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d002      	beq.n	8012bf4 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012bee:	f06f 0301 	mvn.w	r3, #1
 8012bf2:	e0df      	b.n	8012db4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	895b      	ldrh	r3, [r3, #10]
 8012bfe:	2b13      	cmp	r3, #19
 8012c00:	d806      	bhi.n	8012c10 <ip4_output_if_src+0x64>
 8012c02:	4b6e      	ldr	r3, [pc, #440]	@ (8012dbc <ip4_output_if_src+0x210>)
 8012c04:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012c08:	496f      	ldr	r1, [pc, #444]	@ (8012dc8 <ip4_output_if_src+0x21c>)
 8012c0a:	486e      	ldr	r0, [pc, #440]	@ (8012dc4 <ip4_output_if_src+0x218>)
 8012c0c:	f001 f948 	bl	8013ea0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	78fa      	ldrb	r2, [r7, #3]
 8012c14:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012c1c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8012c1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012c22:	78fb      	ldrb	r3, [r7, #3]
 8012c24:	021b      	lsls	r3, r3, #8
 8012c26:	4313      	orrs	r3, r2
 8012c28:	021b      	lsls	r3, r3, #8
 8012c2a:	b21a      	sxth	r2, r3
 8012c2c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8012c30:	78fb      	ldrb	r3, [r7, #3]
 8012c32:	021b      	lsls	r3, r3, #8
 8012c34:	430b      	orrs	r3, r1
 8012c36:	121b      	asrs	r3, r3, #8
 8012c38:	b21b      	sxth	r3, r3
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	b21b      	sxth	r3, r3
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	b21b      	sxth	r3, r3
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	461a      	mov	r2, r3
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	4413      	add	r3, r2
 8012c4a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	691b      	ldr	r3, [r3, #16]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	69fa      	ldr	r2, [r7, #28]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	0c1b      	lsrs	r3, r3, #16
 8012c66:	69fa      	ldr	r2, [r7, #28]
 8012c68:	4413      	add	r3, r2
 8012c6a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012c6c:	8afb      	ldrh	r3, [r7, #22]
 8012c6e:	089b      	lsrs	r3, r3, #2
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c78:	b2da      	uxtb	r2, r3
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012c84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8012c86:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012c8a:	69bb      	ldr	r3, [r7, #24]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	021b      	lsls	r3, r3, #8
 8012c90:	4313      	orrs	r3, r2
 8012c92:	021b      	lsls	r3, r3, #8
 8012c94:	b21a      	sxth	r2, r3
 8012c96:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8012c9a:	69bb      	ldr	r3, [r7, #24]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	021b      	lsls	r3, r3, #8
 8012ca0:	430b      	orrs	r3, r1
 8012ca2:	121b      	asrs	r3, r3, #8
 8012ca4:	b21b      	sxth	r3, r3
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	b21b      	sxth	r3, r3
 8012caa:	4313      	orrs	r3, r2
 8012cac:	b21b      	sxth	r3, r3
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	891b      	ldrh	r3, [r3, #8]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7f3 fadd 	bl	800627c <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	885b      	ldrh	r3, [r3, #2]
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	719a      	strb	r2, [r3, #6]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8012dcc <ip4_output_if_src+0x220>)
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7f3 fac8 	bl	800627c <lwip_htons>
 8012cec:	4603      	mov	r3, r0
 8012cee:	461a      	mov	r2, r3
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	889b      	ldrh	r3, [r3, #4]
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	4413      	add	r3, r2
 8012d00:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012d02:	4b32      	ldr	r3, [pc, #200]	@ (8012dcc <ip4_output_if_src+0x220>)
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	3301      	adds	r3, #1
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	4b30      	ldr	r3, [pc, #192]	@ (8012dcc <ip4_output_if_src+0x220>)
 8012d0c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d104      	bne.n	8012d1e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012d14:	4b2e      	ldr	r3, [pc, #184]	@ (8012dd0 <ip4_output_if_src+0x224>)
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	60da      	str	r2, [r3, #12]
 8012d1c:	e003      	b.n	8012d26 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	69fa      	ldr	r2, [r7, #28]
 8012d2e:	4413      	add	r3, r2
 8012d30:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	0c1b      	lsrs	r3, r3, #16
 8012d38:	69fa      	ldr	r2, [r7, #28]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	0c1a      	lsrs	r2, r3, #16
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	4413      	add	r3, r2
 8012d48:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	0c1b      	lsrs	r3, r3, #16
 8012d4e:	69fa      	ldr	r2, [r7, #28]
 8012d50:	4413      	add	r3, r2
 8012d52:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	43db      	mvns	r3, r3
 8012d58:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8012d5a:	69fb      	ldr	r3, [r7, #28]
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	815a      	strh	r2, [r3, #10]
 8012d62:	e00f      	b.n	8012d84 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	895b      	ldrh	r3, [r3, #10]
 8012d68:	2b13      	cmp	r3, #19
 8012d6a:	d802      	bhi.n	8012d72 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012d6c:	f06f 0301 	mvn.w	r3, #1
 8012d70:	e020      	b.n	8012db4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	691b      	ldr	r3, [r3, #16]
 8012d7c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8012d7e:	f107 0310 	add.w	r3, r7, #16
 8012d82:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00c      	beq.n	8012da6 <ip4_output_if_src+0x1fa>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	891a      	ldrh	r2, [r3, #8]
 8012d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d906      	bls.n	8012da6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 fd5b 	bl	8013858 <ip4_frag>
 8012da2:	4603      	mov	r3, r0
 8012da4:	e006      	b.n	8012db4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da8:	695b      	ldr	r3, [r3, #20]
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	68f9      	ldr	r1, [r7, #12]
 8012dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012db0:	4798      	blx	r3
 8012db2:	4603      	mov	r3, r0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3720      	adds	r7, #32
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	08017800 	.word	0x08017800
 8012dc0:	08017834 	.word	0x08017834
 8012dc4:	08017840 	.word	0x08017840
 8012dc8:	08017868 	.word	0x08017868
 8012dcc:	200044c2 	.word	0x200044c2
 8012dd0:	08017c84 	.word	0x08017c84

08012dd4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012de8:	d002      	beq.n	8012df0 <ip4_addr_isbroadcast_u32+0x1c>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d101      	bne.n	8012df4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e02a      	b.n	8012e4a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012dfa:	f003 0302 	and.w	r3, r3, #2
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d101      	bne.n	8012e06 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	e021      	b.n	8012e4a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	3304      	adds	r3, #4
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d101      	bne.n	8012e16 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012e12:	2300      	movs	r3, #0
 8012e14:	e019      	b.n	8012e4a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012e16:	68fa      	ldr	r2, [r7, #12]
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	405a      	eors	r2, r3
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	3308      	adds	r3, #8
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4013      	ands	r3, r2
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10d      	bne.n	8012e48 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	3308      	adds	r3, #8
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	43da      	mvns	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d101      	bne.n	8012e48 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012e44:	2301      	movs	r3, #1
 8012e46:	e000      	b.n	8012e4a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012e48:	2300      	movs	r3, #0
  }
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3714      	adds	r7, #20
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr
	...

08012e58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012e62:	4b12      	ldr	r3, [pc, #72]	@ (8012eac <ip_reass_tmr+0x54>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012e68:	e018      	b.n	8012e9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	7fdb      	ldrb	r3, [r3, #31]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00b      	beq.n	8012e8a <ip_reass_tmr+0x32>
      r->timer--;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	7fdb      	ldrb	r3, [r3, #31]
 8012e76:	3b01      	subs	r3, #1
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	60fb      	str	r3, [r7, #12]
 8012e88:	e008      	b.n	8012e9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012e94:	68b9      	ldr	r1, [r7, #8]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f000 f80a 	bl	8012eb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d1e3      	bne.n	8012e6a <ip_reass_tmr+0x12>
    }
  }
}
 8012ea2:	bf00      	nop
 8012ea4:	bf00      	nop
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	200044c4 	.word	0x200044c4

08012eb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b088      	sub	sp, #32
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012ebe:	683a      	ldr	r2, [r7, #0]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d105      	bne.n	8012ed2 <ip_reass_free_complete_datagram+0x22>
 8012ec6:	4b45      	ldr	r3, [pc, #276]	@ (8012fdc <ip_reass_free_complete_datagram+0x12c>)
 8012ec8:	22ab      	movs	r2, #171	@ 0xab
 8012eca:	4945      	ldr	r1, [pc, #276]	@ (8012fe0 <ip_reass_free_complete_datagram+0x130>)
 8012ecc:	4845      	ldr	r0, [pc, #276]	@ (8012fe4 <ip_reass_free_complete_datagram+0x134>)
 8012ece:	f000 ffe7 	bl	8013ea0 <iprintf>
  if (prev != NULL) {
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00a      	beq.n	8012eee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d005      	beq.n	8012eee <ip_reass_free_complete_datagram+0x3e>
 8012ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8012fdc <ip_reass_free_complete_datagram+0x12c>)
 8012ee4:	22ad      	movs	r2, #173	@ 0xad
 8012ee6:	4940      	ldr	r1, [pc, #256]	@ (8012fe8 <ip_reass_free_complete_datagram+0x138>)
 8012ee8:	483e      	ldr	r0, [pc, #248]	@ (8012fe4 <ip_reass_free_complete_datagram+0x134>)
 8012eea:	f000 ffd9 	bl	8013ea0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	889b      	ldrh	r3, [r3, #4]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d12a      	bne.n	8012f56 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	6858      	ldr	r0, [r3, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	3308      	adds	r3, #8
 8012f16:	2214      	movs	r2, #20
 8012f18:	4619      	mov	r1, r3
 8012f1a:	f001 f89c 	bl	8014056 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012f1e:	2101      	movs	r1, #1
 8012f20:	69b8      	ldr	r0, [r7, #24]
 8012f22:	f7ff fbad 	bl	8012680 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012f26:	69b8      	ldr	r0, [r7, #24]
 8012f28:	f7f5 f9bc 	bl	80082a4 <pbuf_clen>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f30:	8bfa      	ldrh	r2, [r7, #30]
 8012f32:	8a7b      	ldrh	r3, [r7, #18]
 8012f34:	4413      	add	r3, r2
 8012f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f3a:	db05      	blt.n	8012f48 <ip_reass_free_complete_datagram+0x98>
 8012f3c:	4b27      	ldr	r3, [pc, #156]	@ (8012fdc <ip_reass_free_complete_datagram+0x12c>)
 8012f3e:	22bc      	movs	r2, #188	@ 0xbc
 8012f40:	492a      	ldr	r1, [pc, #168]	@ (8012fec <ip_reass_free_complete_datagram+0x13c>)
 8012f42:	4828      	ldr	r0, [pc, #160]	@ (8012fe4 <ip_reass_free_complete_datagram+0x134>)
 8012f44:	f000 ffac 	bl	8013ea0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f48:	8bfa      	ldrh	r2, [r7, #30]
 8012f4a:	8a7b      	ldrh	r3, [r7, #18]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012f50:	69b8      	ldr	r0, [r7, #24]
 8012f52:	f7f5 f91f 	bl	8008194 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012f5c:	e01f      	b.n	8012f9e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f7f5 f998 	bl	80082a4 <pbuf_clen>
 8012f74:	4603      	mov	r3, r0
 8012f76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f78:	8bfa      	ldrh	r2, [r7, #30]
 8012f7a:	8a7b      	ldrh	r3, [r7, #18]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f82:	db05      	blt.n	8012f90 <ip_reass_free_complete_datagram+0xe0>
 8012f84:	4b15      	ldr	r3, [pc, #84]	@ (8012fdc <ip_reass_free_complete_datagram+0x12c>)
 8012f86:	22cc      	movs	r2, #204	@ 0xcc
 8012f88:	4918      	ldr	r1, [pc, #96]	@ (8012fec <ip_reass_free_complete_datagram+0x13c>)
 8012f8a:	4816      	ldr	r0, [pc, #88]	@ (8012fe4 <ip_reass_free_complete_datagram+0x134>)
 8012f8c:	f000 ff88 	bl	8013ea0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f90:	8bfa      	ldrh	r2, [r7, #30]
 8012f92:	8a7b      	ldrh	r3, [r7, #18]
 8012f94:	4413      	add	r3, r2
 8012f96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f7f5 f8fb 	bl	8008194 <pbuf_free>
  while (p != NULL) {
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1dc      	bne.n	8012f5e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012fa4:	6839      	ldr	r1, [r7, #0]
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 f8c2 	bl	8013130 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012fac:	4b10      	ldr	r3, [pc, #64]	@ (8012ff0 <ip_reass_free_complete_datagram+0x140>)
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	8bfa      	ldrh	r2, [r7, #30]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d905      	bls.n	8012fc2 <ip_reass_free_complete_datagram+0x112>
 8012fb6:	4b09      	ldr	r3, [pc, #36]	@ (8012fdc <ip_reass_free_complete_datagram+0x12c>)
 8012fb8:	22d2      	movs	r2, #210	@ 0xd2
 8012fba:	490e      	ldr	r1, [pc, #56]	@ (8012ff4 <ip_reass_free_complete_datagram+0x144>)
 8012fbc:	4809      	ldr	r0, [pc, #36]	@ (8012fe4 <ip_reass_free_complete_datagram+0x134>)
 8012fbe:	f000 ff6f 	bl	8013ea0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8012ff0 <ip_reass_free_complete_datagram+0x140>)
 8012fc4:	881a      	ldrh	r2, [r3, #0]
 8012fc6:	8bfb      	ldrh	r3, [r7, #30]
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	4b08      	ldr	r3, [pc, #32]	@ (8012ff0 <ip_reass_free_complete_datagram+0x140>)
 8012fce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012fd0:	8bfb      	ldrh	r3, [r7, #30]
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3720      	adds	r7, #32
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	08017898 	.word	0x08017898
 8012fe0:	080178d4 	.word	0x080178d4
 8012fe4:	080178e0 	.word	0x080178e0
 8012fe8:	08017908 	.word	0x08017908
 8012fec:	0801791c 	.word	0x0801791c
 8012ff0:	200044c8 	.word	0x200044c8
 8012ff4:	0801793c 	.word	0x0801793c

08012ff8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b08a      	sub	sp, #40	@ 0x28
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013002:	2300      	movs	r3, #0
 8013004:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013006:	2300      	movs	r3, #0
 8013008:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801300a:	2300      	movs	r3, #0
 801300c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801300e:	2300      	movs	r3, #0
 8013010:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013012:	2300      	movs	r3, #0
 8013014:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013016:	4b28      	ldr	r3, [pc, #160]	@ (80130b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801301c:	e030      	b.n	8013080 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013020:	695a      	ldr	r2, [r3, #20]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	68db      	ldr	r3, [r3, #12]
 8013026:	429a      	cmp	r2, r3
 8013028:	d10c      	bne.n	8013044 <ip_reass_remove_oldest_datagram+0x4c>
 801302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801302c:	699a      	ldr	r2, [r3, #24]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	691b      	ldr	r3, [r3, #16]
 8013032:	429a      	cmp	r2, r3
 8013034:	d106      	bne.n	8013044 <ip_reass_remove_oldest_datagram+0x4c>
 8013036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013038:	899a      	ldrh	r2, [r3, #12]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	889b      	ldrh	r3, [r3, #4]
 801303e:	b29b      	uxth	r3, r3
 8013040:	429a      	cmp	r2, r3
 8013042:	d014      	beq.n	801306e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	3301      	adds	r3, #1
 8013048:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d104      	bne.n	801305a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013052:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	61bb      	str	r3, [r7, #24]
 8013058:	e009      	b.n	801306e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801305c:	7fda      	ldrb	r2, [r3, #31]
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	7fdb      	ldrb	r3, [r3, #31]
 8013062:	429a      	cmp	r2, r3
 8013064:	d803      	bhi.n	801306e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013068:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013078:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1cb      	bne.n	801301e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013086:	6a3b      	ldr	r3, [r7, #32]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d008      	beq.n	801309e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801308c:	69b9      	ldr	r1, [r7, #24]
 801308e:	6a38      	ldr	r0, [r7, #32]
 8013090:	f7ff ff0e 	bl	8012eb0 <ip_reass_free_complete_datagram>
 8013094:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013096:	697a      	ldr	r2, [r7, #20]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	4413      	add	r3, r2
 801309c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801309e:	697a      	ldr	r2, [r7, #20]
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	da02      	bge.n	80130ac <ip_reass_remove_oldest_datagram+0xb4>
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	dcac      	bgt.n	8013006 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80130ac:	697b      	ldr	r3, [r7, #20]
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3728      	adds	r7, #40	@ 0x28
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	200044c4 	.word	0x200044c4

080130bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80130c6:	2004      	movs	r0, #4
 80130c8:	f7f4 f996 	bl	80073f8 <memp_malloc>
 80130cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d110      	bne.n	80130f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80130d4:	6839      	ldr	r1, [r7, #0]
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f7ff ff8e 	bl	8012ff8 <ip_reass_remove_oldest_datagram>
 80130dc:	4602      	mov	r2, r0
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	4293      	cmp	r3, r2
 80130e2:	dc03      	bgt.n	80130ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80130e4:	2004      	movs	r0, #4
 80130e6:	f7f4 f987 	bl	80073f8 <memp_malloc>
 80130ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d101      	bne.n	80130f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	e016      	b.n	8013124 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80130f6:	2220      	movs	r2, #32
 80130f8:	2100      	movs	r1, #0
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f000 ff35 	bl	8013f6a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	220f      	movs	r2, #15
 8013104:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013106:	4b09      	ldr	r3, [pc, #36]	@ (801312c <ip_reass_enqueue_new_datagram+0x70>)
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801310e:	4a07      	ldr	r2, [pc, #28]	@ (801312c <ip_reass_enqueue_new_datagram+0x70>)
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	3308      	adds	r3, #8
 8013118:	2214      	movs	r2, #20
 801311a:	6879      	ldr	r1, [r7, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	f000 ff9a 	bl	8014056 <memcpy>
  return ipr;
 8013122:	68fb      	ldr	r3, [r7, #12]
}
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	200044c4 	.word	0x200044c4

08013130 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801313a:	4b10      	ldr	r3, [pc, #64]	@ (801317c <ip_reass_dequeue_datagram+0x4c>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	429a      	cmp	r2, r3
 8013142:	d104      	bne.n	801314e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4a0c      	ldr	r2, [pc, #48]	@ (801317c <ip_reass_dequeue_datagram+0x4c>)
 801314a:	6013      	str	r3, [r2, #0]
 801314c:	e00d      	b.n	801316a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d106      	bne.n	8013162 <ip_reass_dequeue_datagram+0x32>
 8013154:	4b0a      	ldr	r3, [pc, #40]	@ (8013180 <ip_reass_dequeue_datagram+0x50>)
 8013156:	f240 1245 	movw	r2, #325	@ 0x145
 801315a:	490a      	ldr	r1, [pc, #40]	@ (8013184 <ip_reass_dequeue_datagram+0x54>)
 801315c:	480a      	ldr	r0, [pc, #40]	@ (8013188 <ip_reass_dequeue_datagram+0x58>)
 801315e:	f000 fe9f 	bl	8013ea0 <iprintf>
    prev->next = ipr->next;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801316a:	6879      	ldr	r1, [r7, #4]
 801316c:	2004      	movs	r0, #4
 801316e:	f7f4 f98f 	bl	8007490 <memp_free>
}
 8013172:	bf00      	nop
 8013174:	3708      	adds	r7, #8
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	200044c4 	.word	0x200044c4
 8013180:	08017898 	.word	0x08017898
 8013184:	08017960 	.word	0x08017960
 8013188:	080178e0 	.word	0x080178e0

0801318c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b08c      	sub	sp, #48	@ 0x30
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013198:	2300      	movs	r3, #0
 801319a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801319c:	2301      	movs	r3, #1
 801319e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	885b      	ldrh	r3, [r3, #2]
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7f3 f865 	bl	800627c <lwip_htons>
 80131b2:	4603      	mov	r3, r0
 80131b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	f003 030f 	and.w	r3, r3, #15
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80131c4:	7e7b      	ldrb	r3, [r7, #25]
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	8b7a      	ldrh	r2, [r7, #26]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d202      	bcs.n	80131d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131ce:	f04f 33ff 	mov.w	r3, #4294967295
 80131d2:	e135      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80131d4:	7e7b      	ldrb	r3, [r7, #25]
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	8b7a      	ldrh	r2, [r7, #26]
 80131da:	1ad3      	subs	r3, r2, r3
 80131dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	88db      	ldrh	r3, [r3, #6]
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7f3 f849 	bl	800627c <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80131fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fe:	2200      	movs	r2, #0
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	2200      	movs	r2, #0
 8013204:	705a      	strb	r2, [r3, #1]
 8013206:	2200      	movs	r2, #0
 8013208:	709a      	strb	r2, [r3, #2]
 801320a:	2200      	movs	r2, #0
 801320c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801320e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013210:	8afa      	ldrh	r2, [r7, #22]
 8013212:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013214:	8afa      	ldrh	r2, [r7, #22]
 8013216:	8b7b      	ldrh	r3, [r7, #26]
 8013218:	4413      	add	r3, r2
 801321a:	b29a      	uxth	r2, r3
 801321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013222:	88db      	ldrh	r3, [r3, #6]
 8013224:	b29b      	uxth	r3, r3
 8013226:	8afa      	ldrh	r2, [r7, #22]
 8013228:	429a      	cmp	r2, r3
 801322a:	d902      	bls.n	8013232 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801322c:	f04f 33ff 	mov.w	r3, #4294967295
 8013230:	e106      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	627b      	str	r3, [r7, #36]	@ 0x24
 8013238:	e068      	b.n	801330c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013242:	889b      	ldrh	r3, [r3, #4]
 8013244:	b29a      	uxth	r2, r3
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	889b      	ldrh	r3, [r3, #4]
 801324a:	b29b      	uxth	r3, r3
 801324c:	429a      	cmp	r2, r3
 801324e:	d235      	bcs.n	80132bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013254:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013258:	2b00      	cmp	r3, #0
 801325a:	d020      	beq.n	801329e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801325e:	889b      	ldrh	r3, [r3, #4]
 8013260:	b29a      	uxth	r2, r3
 8013262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013264:	88db      	ldrh	r3, [r3, #6]
 8013266:	b29b      	uxth	r3, r3
 8013268:	429a      	cmp	r2, r3
 801326a:	d307      	bcc.n	801327c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801326e:	88db      	ldrh	r3, [r3, #6]
 8013270:	b29a      	uxth	r2, r3
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	889b      	ldrh	r3, [r3, #4]
 8013276:	b29b      	uxth	r3, r3
 8013278:	429a      	cmp	r2, r3
 801327a:	d902      	bls.n	8013282 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801327c:	f04f 33ff 	mov.w	r3, #4294967295
 8013280:	e0de      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013284:	68ba      	ldr	r2, [r7, #8]
 8013286:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801328a:	88db      	ldrh	r3, [r3, #6]
 801328c:	b29a      	uxth	r2, r3
 801328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013290:	889b      	ldrh	r3, [r3, #4]
 8013292:	b29b      	uxth	r3, r3
 8013294:	429a      	cmp	r2, r3
 8013296:	d03d      	beq.n	8013314 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013298:	2300      	movs	r3, #0
 801329a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801329c:	e03a      	b.n	8013314 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132a0:	88db      	ldrh	r3, [r3, #6]
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	889b      	ldrh	r3, [r3, #4]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d902      	bls.n	80132b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132ae:	f04f 33ff 	mov.w	r3, #4294967295
 80132b2:	e0c5      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	605a      	str	r2, [r3, #4]
      break;
 80132ba:	e02b      	b.n	8013314 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80132bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132be:	889b      	ldrh	r3, [r3, #4]
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	889b      	ldrh	r3, [r3, #4]
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d102      	bne.n	80132d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132cc:	f04f 33ff 	mov.w	r3, #4294967295
 80132d0:	e0b6      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80132d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d4:	889b      	ldrh	r3, [r3, #4]
 80132d6:	b29a      	uxth	r2, r3
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	88db      	ldrh	r3, [r3, #6]
 80132dc:	b29b      	uxth	r3, r3
 80132de:	429a      	cmp	r2, r3
 80132e0:	d202      	bcs.n	80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132e2:	f04f 33ff 	mov.w	r3, #4294967295
 80132e6:	e0ab      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80132e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d009      	beq.n	8013302 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80132ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132f0:	88db      	ldrh	r3, [r3, #6]
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	889b      	ldrh	r3, [r3, #4]
 80132f8:	b29b      	uxth	r3, r3
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d001      	beq.n	8013302 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80132fe:	2300      	movs	r3, #0
 8013300:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801330e:	2b00      	cmp	r3, #0
 8013310:	d193      	bne.n	801323a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013312:	e000      	b.n	8013316 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013314:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013318:	2b00      	cmp	r3, #0
 801331a:	d12d      	bne.n	8013378 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801331e:	2b00      	cmp	r3, #0
 8013320:	d01c      	beq.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013324:	88db      	ldrh	r3, [r3, #6]
 8013326:	b29a      	uxth	r2, r3
 8013328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801332a:	889b      	ldrh	r3, [r3, #4]
 801332c:	b29b      	uxth	r3, r3
 801332e:	429a      	cmp	r2, r3
 8013330:	d906      	bls.n	8013340 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013332:	4b45      	ldr	r3, [pc, #276]	@ (8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013334:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013338:	4944      	ldr	r1, [pc, #272]	@ (801344c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801333a:	4845      	ldr	r0, [pc, #276]	@ (8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801333c:	f000 fdb0 	bl	8013ea0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013342:	68ba      	ldr	r2, [r7, #8]
 8013344:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013348:	88db      	ldrh	r3, [r3, #6]
 801334a:	b29a      	uxth	r2, r3
 801334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801334e:	889b      	ldrh	r3, [r3, #4]
 8013350:	b29b      	uxth	r3, r3
 8013352:	429a      	cmp	r2, r3
 8013354:	d010      	beq.n	8013378 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013356:	2300      	movs	r3, #0
 8013358:	623b      	str	r3, [r7, #32]
 801335a:	e00d      	b.n	8013378 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d006      	beq.n	8013372 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013364:	4b38      	ldr	r3, [pc, #224]	@ (8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013366:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801336a:	493a      	ldr	r1, [pc, #232]	@ (8013454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801336c:	4838      	ldr	r0, [pc, #224]	@ (8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801336e:	f000 fd97 	bl	8013ea0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	68ba      	ldr	r2, [r7, #8]
 8013376:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d105      	bne.n	801338a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	7f9b      	ldrb	r3, [r3, #30]
 8013382:	f003 0301 	and.w	r3, r3, #1
 8013386:	2b00      	cmp	r3, #0
 8013388:	d059      	beq.n	801343e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801338a:	6a3b      	ldr	r3, [r7, #32]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d04f      	beq.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d006      	beq.n	80133a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	889b      	ldrh	r3, [r3, #4]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d002      	beq.n	80133ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	623b      	str	r3, [r7, #32]
 80133aa:	e041      	b.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80133ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80133b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80133b6:	e012      	b.n	80133de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80133b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80133be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c0:	88db      	ldrh	r3, [r3, #6]
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c6:	889b      	ldrh	r3, [r3, #4]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d002      	beq.n	80133d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80133ce:	2300      	movs	r3, #0
 80133d0:	623b      	str	r3, [r7, #32]
            break;
 80133d2:	e007      	b.n	80133e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80133d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80133d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80133de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e9      	bne.n	80133b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80133e4:	6a3b      	ldr	r3, [r7, #32]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d022      	beq.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	685b      	ldr	r3, [r3, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d106      	bne.n	8013400 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80133f2:	4b15      	ldr	r3, [pc, #84]	@ (8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80133f8:	4917      	ldr	r1, [pc, #92]	@ (8013458 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80133fa:	4815      	ldr	r0, [pc, #84]	@ (8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133fc:	f000 fd50 	bl	8013ea0 <iprintf>
          LWIP_ASSERT("sanity check",
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013408:	429a      	cmp	r2, r3
 801340a:	d106      	bne.n	801341a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801340c:	4b0e      	ldr	r3, [pc, #56]	@ (8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801340e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013412:	4911      	ldr	r1, [pc, #68]	@ (8013458 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013414:	480e      	ldr	r0, [pc, #56]	@ (8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013416:	f000 fd43 	bl	8013ea0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d006      	beq.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013422:	4b09      	ldr	r3, [pc, #36]	@ (8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013424:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013428:	490c      	ldr	r1, [pc, #48]	@ (801345c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801342a:	4809      	ldr	r0, [pc, #36]	@ (8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801342c:	f000 fd38 	bl	8013ea0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013430:	6a3b      	ldr	r3, [r7, #32]
 8013432:	2b00      	cmp	r3, #0
 8013434:	bf14      	ite	ne
 8013436:	2301      	movne	r3, #1
 8013438:	2300      	moveq	r3, #0
 801343a:	b2db      	uxtb	r3, r3
 801343c:	e000      	b.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801343e:	2300      	movs	r3, #0
}
 8013440:	4618      	mov	r0, r3
 8013442:	3730      	adds	r7, #48	@ 0x30
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}
 8013448:	08017898 	.word	0x08017898
 801344c:	0801797c 	.word	0x0801797c
 8013450:	080178e0 	.word	0x080178e0
 8013454:	0801799c 	.word	0x0801799c
 8013458:	080179d4 	.word	0x080179d4
 801345c:	080179e4 	.word	0x080179e4

08013460 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b08e      	sub	sp, #56	@ 0x38
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	f003 030f 	and.w	r3, r3, #15
 8013476:	b2db      	uxtb	r3, r3
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	b2db      	uxtb	r3, r3
 801347c:	2b14      	cmp	r3, #20
 801347e:	f040 8179 	bne.w	8013774 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013484:	88db      	ldrh	r3, [r3, #6]
 8013486:	b29b      	uxth	r3, r3
 8013488:	4618      	mov	r0, r3
 801348a:	f7f2 fef7 	bl	800627c <lwip_htons>
 801348e:	4603      	mov	r3, r0
 8013490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013494:	b29b      	uxth	r3, r3
 8013496:	00db      	lsls	r3, r3, #3
 8013498:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349c:	885b      	ldrh	r3, [r3, #2]
 801349e:	b29b      	uxth	r3, r3
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7f2 feeb 	bl	800627c <lwip_htons>
 80134a6:	4603      	mov	r3, r0
 80134a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80134aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	f003 030f 	and.w	r3, r3, #15
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80134ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80134be:	b29b      	uxth	r3, r3
 80134c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134c2:	429a      	cmp	r2, r3
 80134c4:	f0c0 8158 	bcc.w	8013778 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80134c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7f4 fee5 	bl	80082a4 <pbuf_clen>
 80134da:	4603      	mov	r3, r0
 80134dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80134de:	4b90      	ldr	r3, [pc, #576]	@ (8013720 <ip4_reass+0x2c0>)
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	461a      	mov	r2, r3
 80134e4:	8c3b      	ldrh	r3, [r7, #32]
 80134e6:	4413      	add	r3, r2
 80134e8:	2b0a      	cmp	r3, #10
 80134ea:	dd10      	ble.n	801350e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80134ec:	8c3b      	ldrh	r3, [r7, #32]
 80134ee:	4619      	mov	r1, r3
 80134f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134f2:	f7ff fd81 	bl	8012ff8 <ip_reass_remove_oldest_datagram>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 813f 	beq.w	801377c <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80134fe:	4b88      	ldr	r3, [pc, #544]	@ (8013720 <ip4_reass+0x2c0>)
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	461a      	mov	r2, r3
 8013504:	8c3b      	ldrh	r3, [r7, #32]
 8013506:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013508:	2b0a      	cmp	r3, #10
 801350a:	f300 8137 	bgt.w	801377c <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801350e:	4b85      	ldr	r3, [pc, #532]	@ (8013724 <ip4_reass+0x2c4>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	633b      	str	r3, [r7, #48]	@ 0x30
 8013514:	e015      	b.n	8013542 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013518:	695a      	ldr	r2, [r3, #20]
 801351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	429a      	cmp	r2, r3
 8013520:	d10c      	bne.n	801353c <ip4_reass+0xdc>
 8013522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013524:	699a      	ldr	r2, [r3, #24]
 8013526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013528:	691b      	ldr	r3, [r3, #16]
 801352a:	429a      	cmp	r2, r3
 801352c:	d106      	bne.n	801353c <ip4_reass+0xdc>
 801352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013530:	899a      	ldrh	r2, [r3, #12]
 8013532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013534:	889b      	ldrh	r3, [r3, #4]
 8013536:	b29b      	uxth	r3, r3
 8013538:	429a      	cmp	r2, r3
 801353a:	d006      	beq.n	801354a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	633b      	str	r3, [r7, #48]	@ 0x30
 8013542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1e6      	bne.n	8013516 <ip4_reass+0xb6>
 8013548:	e000      	b.n	801354c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801354a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354e:	2b00      	cmp	r3, #0
 8013550:	d109      	bne.n	8013566 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013552:	8c3b      	ldrh	r3, [r7, #32]
 8013554:	4619      	mov	r1, r3
 8013556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013558:	f7ff fdb0 	bl	80130bc <ip_reass_enqueue_new_datagram>
 801355c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013560:	2b00      	cmp	r3, #0
 8013562:	d11c      	bne.n	801359e <ip4_reass+0x13e>
      goto nullreturn;
 8013564:	e10d      	b.n	8013782 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013568:	88db      	ldrh	r3, [r3, #6]
 801356a:	b29b      	uxth	r3, r3
 801356c:	4618      	mov	r0, r3
 801356e:	f7f2 fe85 	bl	800627c <lwip_htons>
 8013572:	4603      	mov	r3, r0
 8013574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013578:	2b00      	cmp	r3, #0
 801357a:	d110      	bne.n	801359e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357e:	89db      	ldrh	r3, [r3, #14]
 8013580:	4618      	mov	r0, r3
 8013582:	f7f2 fe7b 	bl	800627c <lwip_htons>
 8013586:	4603      	mov	r3, r0
 8013588:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801358c:	2b00      	cmp	r3, #0
 801358e:	d006      	beq.n	801359e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013592:	3308      	adds	r3, #8
 8013594:	2214      	movs	r2, #20
 8013596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013598:	4618      	mov	r0, r3
 801359a:	f000 fd5c 	bl	8014056 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a0:	88db      	ldrh	r3, [r3, #6]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	f003 0320 	and.w	r3, r3, #32
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	bf0c      	ite	eq
 80135ac:	2301      	moveq	r3, #1
 80135ae:	2300      	movne	r3, #0
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d00e      	beq.n	80135d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80135ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80135bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135be:	4413      	add	r3, r2
 80135c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80135c2:	8b7a      	ldrh	r2, [r7, #26]
 80135c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80135c6:	429a      	cmp	r2, r3
 80135c8:	f0c0 80a8 	bcc.w	801371c <ip4_reass+0x2bc>
 80135cc:	8b7b      	ldrh	r3, [r7, #26]
 80135ce:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80135d2:	4293      	cmp	r3, r2
 80135d4:	f200 80a2 	bhi.w	801371c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80135d8:	69fa      	ldr	r2, [r7, #28]
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135de:	f7ff fdd5 	bl	801318c <ip_reass_chain_frag_into_datagram_and_validate>
 80135e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ea:	f000 80a3 	beq.w	8013734 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80135ee:	4b4c      	ldr	r3, [pc, #304]	@ (8013720 <ip4_reass+0x2c0>)
 80135f0:	881a      	ldrh	r2, [r3, #0]
 80135f2:	8c3b      	ldrh	r3, [r7, #32]
 80135f4:	4413      	add	r3, r2
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	4b49      	ldr	r3, [pc, #292]	@ (8013720 <ip4_reass+0x2c0>)
 80135fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00d      	beq.n	801361e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013602:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013606:	4413      	add	r3, r2
 8013608:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360c:	8a7a      	ldrh	r2, [r7, #18]
 801360e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013612:	7f9b      	ldrb	r3, [r3, #30]
 8013614:	f043 0301 	orr.w	r3, r3, #1
 8013618:	b2da      	uxtb	r2, r3
 801361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801361c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d179      	bne.n	8013718 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013626:	8b9b      	ldrh	r3, [r3, #28]
 8013628:	3314      	adds	r3, #20
 801362a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013640:	3308      	adds	r3, #8
 8013642:	2214      	movs	r2, #20
 8013644:	4619      	mov	r1, r3
 8013646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013648:	f000 fd05 	bl	8014056 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801364c:	8a3b      	ldrh	r3, [r7, #16]
 801364e:	4618      	mov	r0, r3
 8013650:	f7f2 fe14 	bl	800627c <lwip_htons>
 8013654:	4603      	mov	r3, r0
 8013656:	461a      	mov	r2, r3
 8013658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365e:	2200      	movs	r2, #0
 8013660:	719a      	strb	r2, [r3, #6]
 8013662:	2200      	movs	r2, #0
 8013664:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013668:	2200      	movs	r2, #0
 801366a:	729a      	strb	r2, [r3, #10]
 801366c:	2200      	movs	r2, #0
 801366e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8013670:	2114      	movs	r1, #20
 8013672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013674:	f7f3 fa37 	bl	8006ae6 <inet_chksum>
 8013678:	4603      	mov	r3, r0
 801367a:	461a      	mov	r2, r3
 801367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013686:	e00d      	b.n	80136a4 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8013688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801368e:	2114      	movs	r1, #20
 8013690:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013692:	f7f4 fcf9 	bl	8008088 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013696:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7f4 fe3d 	bl	8008318 <pbuf_cat>
      r = iprh->next_pbuf;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80136a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d1ee      	bne.n	8013688 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80136aa:	4b1e      	ldr	r3, [pc, #120]	@ (8013724 <ip4_reass+0x2c4>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d102      	bne.n	80136ba <ip4_reass+0x25a>
      ipr_prev = NULL;
 80136b4:	2300      	movs	r3, #0
 80136b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136b8:	e010      	b.n	80136dc <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80136ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013724 <ip4_reass+0x2c4>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136c0:	e007      	b.n	80136d2 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 80136c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d006      	beq.n	80136da <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80136cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1f4      	bne.n	80136c2 <ip4_reass+0x262>
 80136d8:	e000      	b.n	80136dc <ip4_reass+0x27c>
          break;
 80136da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80136dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80136de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136e0:	f7ff fd26 	bl	8013130 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7f4 fddd 	bl	80082a4 <pbuf_clen>
 80136ea:	4603      	mov	r3, r0
 80136ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80136ee:	4b0c      	ldr	r3, [pc, #48]	@ (8013720 <ip4_reass+0x2c0>)
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	8c3a      	ldrh	r2, [r7, #32]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d906      	bls.n	8013706 <ip4_reass+0x2a6>
 80136f8:	4b0b      	ldr	r3, [pc, #44]	@ (8013728 <ip4_reass+0x2c8>)
 80136fa:	f240 229b 	movw	r2, #667	@ 0x29b
 80136fe:	490b      	ldr	r1, [pc, #44]	@ (801372c <ip4_reass+0x2cc>)
 8013700:	480b      	ldr	r0, [pc, #44]	@ (8013730 <ip4_reass+0x2d0>)
 8013702:	f000 fbcd 	bl	8013ea0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013706:	4b06      	ldr	r3, [pc, #24]	@ (8013720 <ip4_reass+0x2c0>)
 8013708:	881a      	ldrh	r2, [r3, #0]
 801370a:	8c3b      	ldrh	r3, [r7, #32]
 801370c:	1ad3      	subs	r3, r2, r3
 801370e:	b29a      	uxth	r2, r3
 8013710:	4b03      	ldr	r3, [pc, #12]	@ (8013720 <ip4_reass+0x2c0>)
 8013712:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	e038      	b.n	801378a <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013718:	2300      	movs	r3, #0
 801371a:	e036      	b.n	801378a <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801371c:	bf00      	nop
 801371e:	e00a      	b.n	8013736 <ip4_reass+0x2d6>
 8013720:	200044c8 	.word	0x200044c8
 8013724:	200044c4 	.word	0x200044c4
 8013728:	08017898 	.word	0x08017898
 801372c:	08017a08 	.word	0x08017a08
 8013730:	080178e0 	.word	0x080178e0
    goto nullreturn_ipr;
 8013734:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013738:	2b00      	cmp	r3, #0
 801373a:	d106      	bne.n	801374a <ip4_reass+0x2ea>
 801373c:	4b15      	ldr	r3, [pc, #84]	@ (8013794 <ip4_reass+0x334>)
 801373e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013742:	4915      	ldr	r1, [pc, #84]	@ (8013798 <ip4_reass+0x338>)
 8013744:	4815      	ldr	r0, [pc, #84]	@ (801379c <ip4_reass+0x33c>)
 8013746:	f000 fbab 	bl	8013ea0 <iprintf>
  if (ipr->p == NULL) {
 801374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d116      	bne.n	8013780 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013752:	4b13      	ldr	r3, [pc, #76]	@ (80137a0 <ip4_reass+0x340>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013758:	429a      	cmp	r2, r3
 801375a:	d006      	beq.n	801376a <ip4_reass+0x30a>
 801375c:	4b0d      	ldr	r3, [pc, #52]	@ (8013794 <ip4_reass+0x334>)
 801375e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013762:	4910      	ldr	r1, [pc, #64]	@ (80137a4 <ip4_reass+0x344>)
 8013764:	480d      	ldr	r0, [pc, #52]	@ (801379c <ip4_reass+0x33c>)
 8013766:	f000 fb9b 	bl	8013ea0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801376a:	2100      	movs	r1, #0
 801376c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801376e:	f7ff fcdf 	bl	8013130 <ip_reass_dequeue_datagram>
 8013772:	e006      	b.n	8013782 <ip4_reass+0x322>
    goto nullreturn;
 8013774:	bf00      	nop
 8013776:	e004      	b.n	8013782 <ip4_reass+0x322>
    goto nullreturn;
 8013778:	bf00      	nop
 801377a:	e002      	b.n	8013782 <ip4_reass+0x322>
      goto nullreturn;
 801377c:	bf00      	nop
 801377e:	e000      	b.n	8013782 <ip4_reass+0x322>
  }

nullreturn:
 8013780:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7f4 fd06 	bl	8008194 <pbuf_free>
  return NULL;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3738      	adds	r7, #56	@ 0x38
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	08017898 	.word	0x08017898
 8013798:	08017a24 	.word	0x08017a24
 801379c:	080178e0 	.word	0x080178e0
 80137a0:	200044c4 	.word	0x200044c4
 80137a4:	08017a30 	.word	0x08017a30

080137a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80137ac:	2005      	movs	r0, #5
 80137ae:	f7f3 fe23 	bl	80073f8 <memp_malloc>
 80137b2:	4603      	mov	r3, r0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d106      	bne.n	80137d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80137c6:	4b07      	ldr	r3, [pc, #28]	@ (80137e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80137c8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80137cc:	4906      	ldr	r1, [pc, #24]	@ (80137e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80137ce:	4807      	ldr	r0, [pc, #28]	@ (80137ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80137d0:	f000 fb66 	bl	8013ea0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	2005      	movs	r0, #5
 80137d8:	f7f3 fe5a 	bl	8007490 <memp_free>
}
 80137dc:	bf00      	nop
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	08017898 	.word	0x08017898
 80137e8:	08017a50 	.word	0x08017a50
 80137ec:	080178e0 	.word	0x080178e0

080137f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d106      	bne.n	8013810 <ipfrag_free_pbuf_custom+0x20>
 8013802:	4b11      	ldr	r3, [pc, #68]	@ (8013848 <ipfrag_free_pbuf_custom+0x58>)
 8013804:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013808:	4910      	ldr	r1, [pc, #64]	@ (801384c <ipfrag_free_pbuf_custom+0x5c>)
 801380a:	4811      	ldr	r0, [pc, #68]	@ (8013850 <ipfrag_free_pbuf_custom+0x60>)
 801380c:	f000 fb48 	bl	8013ea0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013810:	68fa      	ldr	r2, [r7, #12]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	429a      	cmp	r2, r3
 8013816:	d006      	beq.n	8013826 <ipfrag_free_pbuf_custom+0x36>
 8013818:	4b0b      	ldr	r3, [pc, #44]	@ (8013848 <ipfrag_free_pbuf_custom+0x58>)
 801381a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801381e:	490d      	ldr	r1, [pc, #52]	@ (8013854 <ipfrag_free_pbuf_custom+0x64>)
 8013820:	480b      	ldr	r0, [pc, #44]	@ (8013850 <ipfrag_free_pbuf_custom+0x60>)
 8013822:	f000 fb3d 	bl	8013ea0 <iprintf>
  if (pcr->original != NULL) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	695b      	ldr	r3, [r3, #20]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d004      	beq.n	8013838 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	695b      	ldr	r3, [r3, #20]
 8013832:	4618      	mov	r0, r3
 8013834:	f7f4 fcae 	bl	8008194 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f7ff ffbd 	bl	80137b8 <ip_frag_free_pbuf_custom_ref>
}
 801383e:	bf00      	nop
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08017898 	.word	0x08017898
 801384c:	08017a5c 	.word	0x08017a5c
 8013850:	080178e0 	.word	0x080178e0
 8013854:	08017a68 	.word	0x08017a68

08013858 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b094      	sub	sp, #80	@ 0x50
 801385c:	af02      	add	r7, sp, #8
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013864:	2300      	movs	r3, #0
 8013866:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801386e:	3b14      	subs	r3, #20
 8013870:	2b00      	cmp	r3, #0
 8013872:	da00      	bge.n	8013876 <ip4_frag+0x1e>
 8013874:	3307      	adds	r3, #7
 8013876:	10db      	asrs	r3, r3, #3
 8013878:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801387a:	2314      	movs	r3, #20
 801387c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013886:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	f003 030f 	and.w	r3, r3, #15
 8013890:	b2db      	uxtb	r3, r3
 8013892:	009b      	lsls	r3, r3, #2
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b14      	cmp	r3, #20
 8013898:	d002      	beq.n	80138a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801389a:	f06f 0305 	mvn.w	r3, #5
 801389e:	e118      	b.n	8013ad2 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	895b      	ldrh	r3, [r3, #10]
 80138a4:	2b13      	cmp	r3, #19
 80138a6:	d809      	bhi.n	80138bc <ip4_frag+0x64>
 80138a8:	4b8c      	ldr	r3, [pc, #560]	@ (8013adc <ip4_frag+0x284>)
 80138aa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80138ae:	498c      	ldr	r1, [pc, #560]	@ (8013ae0 <ip4_frag+0x288>)
 80138b0:	488c      	ldr	r0, [pc, #560]	@ (8013ae4 <ip4_frag+0x28c>)
 80138b2:	f000 faf5 	bl	8013ea0 <iprintf>
 80138b6:	f06f 0305 	mvn.w	r3, #5
 80138ba:	e10a      	b.n	8013ad2 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80138bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138be:	88db      	ldrh	r3, [r3, #6]
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f2 fcda 	bl	800627c <lwip_htons>
 80138c8:	4603      	mov	r3, r0
 80138ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80138cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80138ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80138d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80138d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80138dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	891b      	ldrh	r3, [r3, #8]
 80138e2:	3b14      	subs	r3, #20
 80138e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80138e8:	e0e9      	b.n	8013abe <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80138ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80138ec:	00db      	lsls	r3, r3, #3
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80138f4:	4293      	cmp	r3, r2
 80138f6:	bf28      	it	cs
 80138f8:	4613      	movcs	r3, r2
 80138fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80138fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013900:	2114      	movs	r1, #20
 8013902:	200e      	movs	r0, #14
 8013904:	f7f4 f962 	bl	8007bcc <pbuf_alloc>
 8013908:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	f000 80dd 	beq.w	8013acc <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013914:	895b      	ldrh	r3, [r3, #10]
 8013916:	2b13      	cmp	r3, #19
 8013918:	d806      	bhi.n	8013928 <ip4_frag+0xd0>
 801391a:	4b70      	ldr	r3, [pc, #448]	@ (8013adc <ip4_frag+0x284>)
 801391c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013920:	4971      	ldr	r1, [pc, #452]	@ (8013ae8 <ip4_frag+0x290>)
 8013922:	4870      	ldr	r0, [pc, #448]	@ (8013ae4 <ip4_frag+0x28c>)
 8013924:	f000 fabc 	bl	8013ea0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	2214      	movs	r2, #20
 801392e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fb90 	bl	8014056 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801393c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801393e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013942:	e064      	b.n	8013a0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	895a      	ldrh	r2, [r3, #10]
 8013948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	895b      	ldrh	r3, [r3, #10]
 8013952:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013954:	429a      	cmp	r2, r3
 8013956:	d906      	bls.n	8013966 <ip4_frag+0x10e>
 8013958:	4b60      	ldr	r3, [pc, #384]	@ (8013adc <ip4_frag+0x284>)
 801395a:	f240 322d 	movw	r2, #813	@ 0x32d
 801395e:	4963      	ldr	r1, [pc, #396]	@ (8013aec <ip4_frag+0x294>)
 8013960:	4860      	ldr	r0, [pc, #384]	@ (8013ae4 <ip4_frag+0x28c>)
 8013962:	f000 fa9d 	bl	8013ea0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013966:	8bfa      	ldrh	r2, [r7, #30]
 8013968:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801396c:	4293      	cmp	r3, r2
 801396e:	bf28      	it	cs
 8013970:	4613      	movcs	r3, r2
 8013972:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013976:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801397a:	2b00      	cmp	r3, #0
 801397c:	d105      	bne.n	801398a <ip4_frag+0x132>
        poff = 0;
 801397e:	2300      	movs	r3, #0
 8013980:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	60fb      	str	r3, [r7, #12]
        continue;
 8013988:	e041      	b.n	8013a0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801398a:	f7ff ff0d 	bl	80137a8 <ip_frag_alloc_pbuf_custom_ref>
 801398e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d103      	bne.n	801399e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013996:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013998:	f7f4 fbfc 	bl	8008194 <pbuf_free>
        goto memerr;
 801399c:	e097      	b.n	8013ace <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801399e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80139a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80139a6:	4413      	add	r3, r2
 80139a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80139ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80139b0:	9201      	str	r2, [sp, #4]
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	4603      	mov	r3, r0
 80139b6:	2241      	movs	r2, #65	@ 0x41
 80139b8:	2000      	movs	r0, #0
 80139ba:	f7f4 fa31 	bl	8007e20 <pbuf_alloced_custom>
 80139be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d106      	bne.n	80139d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80139c6:	69b8      	ldr	r0, [r7, #24]
 80139c8:	f7ff fef6 	bl	80137b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80139cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80139ce:	f7f4 fbe1 	bl	8008194 <pbuf_free>
        goto memerr;
 80139d2:	e07c      	b.n	8013ace <ip4_frag+0x276>
      }
      pbuf_ref(p);
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f7f4 fc7d 	bl	80082d4 <pbuf_ref>
      pcr->original = p;
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	4a43      	ldr	r2, [pc, #268]	@ (8013af0 <ip4_frag+0x298>)
 80139e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80139e6:	6979      	ldr	r1, [r7, #20]
 80139e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80139ea:	f7f4 fc95 	bl	8008318 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80139ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80139f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80139f6:	1ad3      	subs	r3, r2, r3
 80139f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80139fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d004      	beq.n	8013a0e <ip4_frag+0x1b6>
        poff = 0;
 8013a04:	2300      	movs	r3, #0
 8013a06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013a0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d196      	bne.n	8013944 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013a16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013a18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013a1c:	4413      	add	r3, r2
 8013a1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a24:	f1a3 0213 	sub.w	r2, r3, #19
 8013a28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	bfcc      	ite	gt
 8013a30:	2301      	movgt	r3, #1
 8013a32:	2300      	movle	r3, #0
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013a38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d002      	beq.n	8013a4e <ip4_frag+0x1f6>
 8013a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d003      	beq.n	8013a56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013a54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f2 fc0f 	bl	800627c <lwip_htons>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	461a      	mov	r2, r3
 8013a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013a66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013a68:	3314      	adds	r3, #20
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f2 fc05 	bl	800627c <lwip_htons>
 8013a72:	4603      	mov	r3, r0
 8013a74:	461a      	mov	r2, r3
 8013a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	729a      	strb	r2, [r3, #10]
 8013a80:	2200      	movs	r2, #0
 8013a82:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013a84:	2114      	movs	r1, #20
 8013a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a88:	f7f3 f82d 	bl	8006ae6 <inet_chksum>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	461a      	mov	r2, r3
 8013a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a92:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	695b      	ldr	r3, [r3, #20]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013a9c:	68b8      	ldr	r0, [r7, #8]
 8013a9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013aa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013aa2:	f7f4 fb77 	bl	8008194 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013aaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013aac:	1ad3      	subs	r3, r2, r3
 8013aae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013ab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013ab6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013ab8:	4413      	add	r3, r2
 8013aba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013abe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f47f af11 	bne.w	80138ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	e002      	b.n	8013ad2 <ip4_frag+0x27a>
      goto memerr;
 8013acc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3748      	adds	r7, #72	@ 0x48
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	08017898 	.word	0x08017898
 8013ae0:	08017a74 	.word	0x08017a74
 8013ae4:	080178e0 	.word	0x080178e0
 8013ae8:	08017a90 	.word	0x08017a90
 8013aec:	08017ab0 	.word	0x08017ab0
 8013af0:	080137f1 	.word	0x080137f1

08013af4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013afe:	230e      	movs	r3, #14
 8013b00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	895b      	ldrh	r3, [r3, #10]
 8013b06:	2b0e      	cmp	r3, #14
 8013b08:	d96e      	bls.n	8013be8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	7bdb      	ldrb	r3, [r3, #15]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d106      	bne.n	8013b20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013b18:	3301      	adds	r3, #1
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	7b1a      	ldrb	r2, [r3, #12]
 8013b2a:	7b5b      	ldrb	r3, [r3, #13]
 8013b2c:	021b      	lsls	r3, r3, #8
 8013b2e:	4313      	orrs	r3, r2
 8013b30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	f003 0301 	and.w	r3, r3, #1
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d023      	beq.n	8013b86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d10f      	bne.n	8013b66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	785b      	ldrb	r3, [r3, #1]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d11b      	bne.n	8013b86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b52:	2b5e      	cmp	r3, #94	@ 0x5e
 8013b54:	d117      	bne.n	8013b86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	7b5b      	ldrb	r3, [r3, #13]
 8013b5a:	f043 0310 	orr.w	r3, r3, #16
 8013b5e:	b2da      	uxtb	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	735a      	strb	r2, [r3, #13]
 8013b64:	e00f      	b.n	8013b86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	2206      	movs	r2, #6
 8013b6a:	4928      	ldr	r1, [pc, #160]	@ (8013c0c <ethernet_input+0x118>)
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 f9ec 	bl	8013f4a <memcmp>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d106      	bne.n	8013b86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	7b5b      	ldrb	r3, [r3, #13]
 8013b7c:	f043 0308 	orr.w	r3, r3, #8
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013b86:	89fb      	ldrh	r3, [r7, #14]
 8013b88:	2b08      	cmp	r3, #8
 8013b8a:	d003      	beq.n	8013b94 <ethernet_input+0xa0>
 8013b8c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013b90:	d014      	beq.n	8013bbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013b92:	e032      	b.n	8013bfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013b9a:	f003 0308 	and.w	r3, r3, #8
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d024      	beq.n	8013bec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ba2:	8afb      	ldrh	r3, [r7, #22]
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7f4 fa6e 	bl	8008088 <pbuf_remove_header>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d11e      	bne.n	8013bf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013bb2:	6839      	ldr	r1, [r7, #0]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7fe fe81 	bl	80128bc <ip4_input>
      break;
 8013bba:	e013      	b.n	8013be4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013bc2:	f003 0308 	and.w	r3, r3, #8
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d014      	beq.n	8013bf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013bca:	8afb      	ldrh	r3, [r7, #22]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7f4 fa5a 	bl	8008088 <pbuf_remove_header>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10e      	bne.n	8013bf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013bda:	6839      	ldr	r1, [r7, #0]
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7fd ffef 	bl	8011bc0 <etharp_input>
      break;
 8013be2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013be4:	2300      	movs	r3, #0
 8013be6:	e00c      	b.n	8013c02 <ethernet_input+0x10e>
    goto free_and_return;
 8013be8:	bf00      	nop
 8013bea:	e006      	b.n	8013bfa <ethernet_input+0x106>
        goto free_and_return;
 8013bec:	bf00      	nop
 8013bee:	e004      	b.n	8013bfa <ethernet_input+0x106>
        goto free_and_return;
 8013bf0:	bf00      	nop
 8013bf2:	e002      	b.n	8013bfa <ethernet_input+0x106>
        goto free_and_return;
 8013bf4:	bf00      	nop
 8013bf6:	e000      	b.n	8013bfa <ethernet_input+0x106>
        goto free_and_return;
 8013bf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f7f4 faca 	bl	8008194 <pbuf_free>
  return ERR_OK;
 8013c00:	2300      	movs	r3, #0
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3718      	adds	r7, #24
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	08017c8c 	.word	0x08017c8c

08013c10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
 8013c1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013c1e:	8c3b      	ldrh	r3, [r7, #32]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7f2 fb2b 	bl	800627c <lwip_htons>
 8013c26:	4603      	mov	r3, r0
 8013c28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013c2a:	210e      	movs	r1, #14
 8013c2c:	68b8      	ldr	r0, [r7, #8]
 8013c2e:	f7f4 fa1b 	bl	8008068 <pbuf_add_header>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d125      	bne.n	8013c84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	8afa      	ldrh	r2, [r7, #22]
 8013c42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	2206      	movs	r2, #6
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fa03 	bl	8014056 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	3306      	adds	r3, #6
 8013c54:	2206      	movs	r2, #6
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f000 f9fc 	bl	8014056 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c64:	2b06      	cmp	r3, #6
 8013c66:	d006      	beq.n	8013c76 <ethernet_output+0x66>
 8013c68:	4b0a      	ldr	r3, [pc, #40]	@ (8013c94 <ethernet_output+0x84>)
 8013c6a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013c6e:	490a      	ldr	r1, [pc, #40]	@ (8013c98 <ethernet_output+0x88>)
 8013c70:	480a      	ldr	r0, [pc, #40]	@ (8013c9c <ethernet_output+0x8c>)
 8013c72:	f000 f915 	bl	8013ea0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	699b      	ldr	r3, [r3, #24]
 8013c7a:	68b9      	ldr	r1, [r7, #8]
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	4798      	blx	r3
 8013c80:	4603      	mov	r3, r0
 8013c82:	e002      	b.n	8013c8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013c84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013c86:	f06f 0301 	mvn.w	r3, #1
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	08017ac0 	.word	0x08017ac0
 8013c98:	08017af8 	.word	0x08017af8
 8013c9c:	08017b2c 	.word	0x08017b2c

08013ca0 <rand>:
 8013ca0:	4b16      	ldr	r3, [pc, #88]	@ (8013cfc <rand+0x5c>)
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	681c      	ldr	r4, [r3, #0]
 8013ca6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ca8:	b9b3      	cbnz	r3, 8013cd8 <rand+0x38>
 8013caa:	2018      	movs	r0, #24
 8013cac:	f000 fa4a 	bl	8014144 <malloc>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	6320      	str	r0, [r4, #48]	@ 0x30
 8013cb4:	b920      	cbnz	r0, 8013cc0 <rand+0x20>
 8013cb6:	4b12      	ldr	r3, [pc, #72]	@ (8013d00 <rand+0x60>)
 8013cb8:	4812      	ldr	r0, [pc, #72]	@ (8013d04 <rand+0x64>)
 8013cba:	2152      	movs	r1, #82	@ 0x52
 8013cbc:	f000 f9da 	bl	8014074 <__assert_func>
 8013cc0:	4911      	ldr	r1, [pc, #68]	@ (8013d08 <rand+0x68>)
 8013cc2:	4b12      	ldr	r3, [pc, #72]	@ (8013d0c <rand+0x6c>)
 8013cc4:	e9c0 1300 	strd	r1, r3, [r0]
 8013cc8:	4b11      	ldr	r3, [pc, #68]	@ (8013d10 <rand+0x70>)
 8013cca:	6083      	str	r3, [r0, #8]
 8013ccc:	230b      	movs	r3, #11
 8013cce:	8183      	strh	r3, [r0, #12]
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013cd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013cda:	480e      	ldr	r0, [pc, #56]	@ (8013d14 <rand+0x74>)
 8013cdc:	690b      	ldr	r3, [r1, #16]
 8013cde:	694c      	ldr	r4, [r1, #20]
 8013ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8013d18 <rand+0x78>)
 8013ce2:	4358      	muls	r0, r3
 8013ce4:	fb02 0004 	mla	r0, r2, r4, r0
 8013ce8:	fba3 3202 	umull	r3, r2, r3, r2
 8013cec:	3301      	adds	r3, #1
 8013cee:	eb40 0002 	adc.w	r0, r0, r2
 8013cf2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013cf6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013cfa:	bd10      	pop	{r4, pc}
 8013cfc:	20000024 	.word	0x20000024
 8013d00:	08017c9a 	.word	0x08017c9a
 8013d04:	08017cb1 	.word	0x08017cb1
 8013d08:	abcd330e 	.word	0xabcd330e
 8013d0c:	e66d1234 	.word	0xe66d1234
 8013d10:	0005deec 	.word	0x0005deec
 8013d14:	5851f42d 	.word	0x5851f42d
 8013d18:	4c957f2d 	.word	0x4c957f2d

08013d1c <std>:
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	4604      	mov	r4, r0
 8013d22:	e9c0 3300 	strd	r3, r3, [r0]
 8013d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d2a:	6083      	str	r3, [r0, #8]
 8013d2c:	8181      	strh	r1, [r0, #12]
 8013d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013d30:	81c2      	strh	r2, [r0, #14]
 8013d32:	6183      	str	r3, [r0, #24]
 8013d34:	4619      	mov	r1, r3
 8013d36:	2208      	movs	r2, #8
 8013d38:	305c      	adds	r0, #92	@ 0x5c
 8013d3a:	f000 f916 	bl	8013f6a <memset>
 8013d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d74 <std+0x58>)
 8013d40:	6263      	str	r3, [r4, #36]	@ 0x24
 8013d42:	4b0d      	ldr	r3, [pc, #52]	@ (8013d78 <std+0x5c>)
 8013d44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013d46:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <std+0x60>)
 8013d48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013d80 <std+0x64>)
 8013d4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d84 <std+0x68>)
 8013d50:	6224      	str	r4, [r4, #32]
 8013d52:	429c      	cmp	r4, r3
 8013d54:	d006      	beq.n	8013d64 <std+0x48>
 8013d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013d5a:	4294      	cmp	r4, r2
 8013d5c:	d002      	beq.n	8013d64 <std+0x48>
 8013d5e:	33d0      	adds	r3, #208	@ 0xd0
 8013d60:	429c      	cmp	r4, r3
 8013d62:	d105      	bne.n	8013d70 <std+0x54>
 8013d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d6c:	f000 b970 	b.w	8014050 <__retarget_lock_init_recursive>
 8013d70:	bd10      	pop	{r4, pc}
 8013d72:	bf00      	nop
 8013d74:	08013ec5 	.word	0x08013ec5
 8013d78:	08013ee7 	.word	0x08013ee7
 8013d7c:	08013f1f 	.word	0x08013f1f
 8013d80:	08013f43 	.word	0x08013f43
 8013d84:	200044cc 	.word	0x200044cc

08013d88 <stdio_exit_handler>:
 8013d88:	4a02      	ldr	r2, [pc, #8]	@ (8013d94 <stdio_exit_handler+0xc>)
 8013d8a:	4903      	ldr	r1, [pc, #12]	@ (8013d98 <stdio_exit_handler+0x10>)
 8013d8c:	4803      	ldr	r0, [pc, #12]	@ (8013d9c <stdio_exit_handler+0x14>)
 8013d8e:	f000 b869 	b.w	8013e64 <_fwalk_sglue>
 8013d92:	bf00      	nop
 8013d94:	20000018 	.word	0x20000018
 8013d98:	08014959 	.word	0x08014959
 8013d9c:	20000028 	.word	0x20000028

08013da0 <cleanup_stdio>:
 8013da0:	6841      	ldr	r1, [r0, #4]
 8013da2:	4b0c      	ldr	r3, [pc, #48]	@ (8013dd4 <cleanup_stdio+0x34>)
 8013da4:	4299      	cmp	r1, r3
 8013da6:	b510      	push	{r4, lr}
 8013da8:	4604      	mov	r4, r0
 8013daa:	d001      	beq.n	8013db0 <cleanup_stdio+0x10>
 8013dac:	f000 fdd4 	bl	8014958 <_fflush_r>
 8013db0:	68a1      	ldr	r1, [r4, #8]
 8013db2:	4b09      	ldr	r3, [pc, #36]	@ (8013dd8 <cleanup_stdio+0x38>)
 8013db4:	4299      	cmp	r1, r3
 8013db6:	d002      	beq.n	8013dbe <cleanup_stdio+0x1e>
 8013db8:	4620      	mov	r0, r4
 8013dba:	f000 fdcd 	bl	8014958 <_fflush_r>
 8013dbe:	68e1      	ldr	r1, [r4, #12]
 8013dc0:	4b06      	ldr	r3, [pc, #24]	@ (8013ddc <cleanup_stdio+0x3c>)
 8013dc2:	4299      	cmp	r1, r3
 8013dc4:	d004      	beq.n	8013dd0 <cleanup_stdio+0x30>
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dcc:	f000 bdc4 	b.w	8014958 <_fflush_r>
 8013dd0:	bd10      	pop	{r4, pc}
 8013dd2:	bf00      	nop
 8013dd4:	200044cc 	.word	0x200044cc
 8013dd8:	20004534 	.word	0x20004534
 8013ddc:	2000459c 	.word	0x2000459c

08013de0 <global_stdio_init.part.0>:
 8013de0:	b510      	push	{r4, lr}
 8013de2:	4b0b      	ldr	r3, [pc, #44]	@ (8013e10 <global_stdio_init.part.0+0x30>)
 8013de4:	4c0b      	ldr	r4, [pc, #44]	@ (8013e14 <global_stdio_init.part.0+0x34>)
 8013de6:	4a0c      	ldr	r2, [pc, #48]	@ (8013e18 <global_stdio_init.part.0+0x38>)
 8013de8:	601a      	str	r2, [r3, #0]
 8013dea:	4620      	mov	r0, r4
 8013dec:	2200      	movs	r2, #0
 8013dee:	2104      	movs	r1, #4
 8013df0:	f7ff ff94 	bl	8013d1c <std>
 8013df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013df8:	2201      	movs	r2, #1
 8013dfa:	2109      	movs	r1, #9
 8013dfc:	f7ff ff8e 	bl	8013d1c <std>
 8013e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013e04:	2202      	movs	r2, #2
 8013e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e0a:	2112      	movs	r1, #18
 8013e0c:	f7ff bf86 	b.w	8013d1c <std>
 8013e10:	20004604 	.word	0x20004604
 8013e14:	200044cc 	.word	0x200044cc
 8013e18:	08013d89 	.word	0x08013d89

08013e1c <__sfp_lock_acquire>:
 8013e1c:	4801      	ldr	r0, [pc, #4]	@ (8013e24 <__sfp_lock_acquire+0x8>)
 8013e1e:	f000 b918 	b.w	8014052 <__retarget_lock_acquire_recursive>
 8013e22:	bf00      	nop
 8013e24:	2000460d 	.word	0x2000460d

08013e28 <__sfp_lock_release>:
 8013e28:	4801      	ldr	r0, [pc, #4]	@ (8013e30 <__sfp_lock_release+0x8>)
 8013e2a:	f000 b913 	b.w	8014054 <__retarget_lock_release_recursive>
 8013e2e:	bf00      	nop
 8013e30:	2000460d 	.word	0x2000460d

08013e34 <__sinit>:
 8013e34:	b510      	push	{r4, lr}
 8013e36:	4604      	mov	r4, r0
 8013e38:	f7ff fff0 	bl	8013e1c <__sfp_lock_acquire>
 8013e3c:	6a23      	ldr	r3, [r4, #32]
 8013e3e:	b11b      	cbz	r3, 8013e48 <__sinit+0x14>
 8013e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e44:	f7ff bff0 	b.w	8013e28 <__sfp_lock_release>
 8013e48:	4b04      	ldr	r3, [pc, #16]	@ (8013e5c <__sinit+0x28>)
 8013e4a:	6223      	str	r3, [r4, #32]
 8013e4c:	4b04      	ldr	r3, [pc, #16]	@ (8013e60 <__sinit+0x2c>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d1f5      	bne.n	8013e40 <__sinit+0xc>
 8013e54:	f7ff ffc4 	bl	8013de0 <global_stdio_init.part.0>
 8013e58:	e7f2      	b.n	8013e40 <__sinit+0xc>
 8013e5a:	bf00      	nop
 8013e5c:	08013da1 	.word	0x08013da1
 8013e60:	20004604 	.word	0x20004604

08013e64 <_fwalk_sglue>:
 8013e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e68:	4607      	mov	r7, r0
 8013e6a:	4688      	mov	r8, r1
 8013e6c:	4614      	mov	r4, r2
 8013e6e:	2600      	movs	r6, #0
 8013e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e74:	f1b9 0901 	subs.w	r9, r9, #1
 8013e78:	d505      	bpl.n	8013e86 <_fwalk_sglue+0x22>
 8013e7a:	6824      	ldr	r4, [r4, #0]
 8013e7c:	2c00      	cmp	r4, #0
 8013e7e:	d1f7      	bne.n	8013e70 <_fwalk_sglue+0xc>
 8013e80:	4630      	mov	r0, r6
 8013e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e86:	89ab      	ldrh	r3, [r5, #12]
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	d907      	bls.n	8013e9c <_fwalk_sglue+0x38>
 8013e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e90:	3301      	adds	r3, #1
 8013e92:	d003      	beq.n	8013e9c <_fwalk_sglue+0x38>
 8013e94:	4629      	mov	r1, r5
 8013e96:	4638      	mov	r0, r7
 8013e98:	47c0      	blx	r8
 8013e9a:	4306      	orrs	r6, r0
 8013e9c:	3568      	adds	r5, #104	@ 0x68
 8013e9e:	e7e9      	b.n	8013e74 <_fwalk_sglue+0x10>

08013ea0 <iprintf>:
 8013ea0:	b40f      	push	{r0, r1, r2, r3}
 8013ea2:	b507      	push	{r0, r1, r2, lr}
 8013ea4:	4906      	ldr	r1, [pc, #24]	@ (8013ec0 <iprintf+0x20>)
 8013ea6:	ab04      	add	r3, sp, #16
 8013ea8:	6808      	ldr	r0, [r1, #0]
 8013eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eae:	6881      	ldr	r1, [r0, #8]
 8013eb0:	9301      	str	r3, [sp, #4]
 8013eb2:	f000 fa27 	bl	8014304 <_vfiprintf_r>
 8013eb6:	b003      	add	sp, #12
 8013eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ebc:	b004      	add	sp, #16
 8013ebe:	4770      	bx	lr
 8013ec0:	20000024 	.word	0x20000024

08013ec4 <__sread>:
 8013ec4:	b510      	push	{r4, lr}
 8013ec6:	460c      	mov	r4, r1
 8013ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ecc:	f000 f878 	bl	8013fc0 <_read_r>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	bfab      	itete	ge
 8013ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ed8:	181b      	addge	r3, r3, r0
 8013eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013ede:	bfac      	ite	ge
 8013ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013ee2:	81a3      	strhlt	r3, [r4, #12]
 8013ee4:	bd10      	pop	{r4, pc}

08013ee6 <__swrite>:
 8013ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eea:	461f      	mov	r7, r3
 8013eec:	898b      	ldrh	r3, [r1, #12]
 8013eee:	05db      	lsls	r3, r3, #23
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	460c      	mov	r4, r1
 8013ef4:	4616      	mov	r6, r2
 8013ef6:	d505      	bpl.n	8013f04 <__swrite+0x1e>
 8013ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efc:	2302      	movs	r3, #2
 8013efe:	2200      	movs	r2, #0
 8013f00:	f000 f84c 	bl	8013f9c <_lseek_r>
 8013f04:	89a3      	ldrh	r3, [r4, #12]
 8013f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f0e:	81a3      	strh	r3, [r4, #12]
 8013f10:	4632      	mov	r2, r6
 8013f12:	463b      	mov	r3, r7
 8013f14:	4628      	mov	r0, r5
 8013f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1a:	f000 b863 	b.w	8013fe4 <_write_r>

08013f1e <__sseek>:
 8013f1e:	b510      	push	{r4, lr}
 8013f20:	460c      	mov	r4, r1
 8013f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f26:	f000 f839 	bl	8013f9c <_lseek_r>
 8013f2a:	1c43      	adds	r3, r0, #1
 8013f2c:	89a3      	ldrh	r3, [r4, #12]
 8013f2e:	bf15      	itete	ne
 8013f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f3a:	81a3      	strheq	r3, [r4, #12]
 8013f3c:	bf18      	it	ne
 8013f3e:	81a3      	strhne	r3, [r4, #12]
 8013f40:	bd10      	pop	{r4, pc}

08013f42 <__sclose>:
 8013f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f46:	f000 b819 	b.w	8013f7c <_close_r>

08013f4a <memcmp>:
 8013f4a:	b510      	push	{r4, lr}
 8013f4c:	3901      	subs	r1, #1
 8013f4e:	4402      	add	r2, r0
 8013f50:	4290      	cmp	r0, r2
 8013f52:	d101      	bne.n	8013f58 <memcmp+0xe>
 8013f54:	2000      	movs	r0, #0
 8013f56:	e005      	b.n	8013f64 <memcmp+0x1a>
 8013f58:	7803      	ldrb	r3, [r0, #0]
 8013f5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f5e:	42a3      	cmp	r3, r4
 8013f60:	d001      	beq.n	8013f66 <memcmp+0x1c>
 8013f62:	1b18      	subs	r0, r3, r4
 8013f64:	bd10      	pop	{r4, pc}
 8013f66:	3001      	adds	r0, #1
 8013f68:	e7f2      	b.n	8013f50 <memcmp+0x6>

08013f6a <memset>:
 8013f6a:	4402      	add	r2, r0
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d100      	bne.n	8013f74 <memset+0xa>
 8013f72:	4770      	bx	lr
 8013f74:	f803 1b01 	strb.w	r1, [r3], #1
 8013f78:	e7f9      	b.n	8013f6e <memset+0x4>
	...

08013f7c <_close_r>:
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4d06      	ldr	r5, [pc, #24]	@ (8013f98 <_close_r+0x1c>)
 8013f80:	2300      	movs	r3, #0
 8013f82:	4604      	mov	r4, r0
 8013f84:	4608      	mov	r0, r1
 8013f86:	602b      	str	r3, [r5, #0]
 8013f88:	f7ed fb88 	bl	800169c <_close>
 8013f8c:	1c43      	adds	r3, r0, #1
 8013f8e:	d102      	bne.n	8013f96 <_close_r+0x1a>
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	b103      	cbz	r3, 8013f96 <_close_r+0x1a>
 8013f94:	6023      	str	r3, [r4, #0]
 8013f96:	bd38      	pop	{r3, r4, r5, pc}
 8013f98:	20004608 	.word	0x20004608

08013f9c <_lseek_r>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	4d07      	ldr	r5, [pc, #28]	@ (8013fbc <_lseek_r+0x20>)
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	4608      	mov	r0, r1
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	602a      	str	r2, [r5, #0]
 8013faa:	461a      	mov	r2, r3
 8013fac:	f7ed fb9d 	bl	80016ea <_lseek>
 8013fb0:	1c43      	adds	r3, r0, #1
 8013fb2:	d102      	bne.n	8013fba <_lseek_r+0x1e>
 8013fb4:	682b      	ldr	r3, [r5, #0]
 8013fb6:	b103      	cbz	r3, 8013fba <_lseek_r+0x1e>
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	bd38      	pop	{r3, r4, r5, pc}
 8013fbc:	20004608 	.word	0x20004608

08013fc0 <_read_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4d07      	ldr	r5, [pc, #28]	@ (8013fe0 <_read_r+0x20>)
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	4608      	mov	r0, r1
 8013fc8:	4611      	mov	r1, r2
 8013fca:	2200      	movs	r2, #0
 8013fcc:	602a      	str	r2, [r5, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f7ed fb2b 	bl	800162a <_read>
 8013fd4:	1c43      	adds	r3, r0, #1
 8013fd6:	d102      	bne.n	8013fde <_read_r+0x1e>
 8013fd8:	682b      	ldr	r3, [r5, #0]
 8013fda:	b103      	cbz	r3, 8013fde <_read_r+0x1e>
 8013fdc:	6023      	str	r3, [r4, #0]
 8013fde:	bd38      	pop	{r3, r4, r5, pc}
 8013fe0:	20004608 	.word	0x20004608

08013fe4 <_write_r>:
 8013fe4:	b538      	push	{r3, r4, r5, lr}
 8013fe6:	4d07      	ldr	r5, [pc, #28]	@ (8014004 <_write_r+0x20>)
 8013fe8:	4604      	mov	r4, r0
 8013fea:	4608      	mov	r0, r1
 8013fec:	4611      	mov	r1, r2
 8013fee:	2200      	movs	r2, #0
 8013ff0:	602a      	str	r2, [r5, #0]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	f7ed fb36 	bl	8001664 <_write>
 8013ff8:	1c43      	adds	r3, r0, #1
 8013ffa:	d102      	bne.n	8014002 <_write_r+0x1e>
 8013ffc:	682b      	ldr	r3, [r5, #0]
 8013ffe:	b103      	cbz	r3, 8014002 <_write_r+0x1e>
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	bd38      	pop	{r3, r4, r5, pc}
 8014004:	20004608 	.word	0x20004608

08014008 <__libc_init_array>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	4d0d      	ldr	r5, [pc, #52]	@ (8014040 <__libc_init_array+0x38>)
 801400c:	4c0d      	ldr	r4, [pc, #52]	@ (8014044 <__libc_init_array+0x3c>)
 801400e:	1b64      	subs	r4, r4, r5
 8014010:	10a4      	asrs	r4, r4, #2
 8014012:	2600      	movs	r6, #0
 8014014:	42a6      	cmp	r6, r4
 8014016:	d109      	bne.n	801402c <__libc_init_array+0x24>
 8014018:	4d0b      	ldr	r5, [pc, #44]	@ (8014048 <__libc_init_array+0x40>)
 801401a:	4c0c      	ldr	r4, [pc, #48]	@ (801404c <__libc_init_array+0x44>)
 801401c:	f000 fe4a 	bl	8014cb4 <_init>
 8014020:	1b64      	subs	r4, r4, r5
 8014022:	10a4      	asrs	r4, r4, #2
 8014024:	2600      	movs	r6, #0
 8014026:	42a6      	cmp	r6, r4
 8014028:	d105      	bne.n	8014036 <__libc_init_array+0x2e>
 801402a:	bd70      	pop	{r4, r5, r6, pc}
 801402c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014030:	4798      	blx	r3
 8014032:	3601      	adds	r6, #1
 8014034:	e7ee      	b.n	8014014 <__libc_init_array+0xc>
 8014036:	f855 3b04 	ldr.w	r3, [r5], #4
 801403a:	4798      	blx	r3
 801403c:	3601      	adds	r6, #1
 801403e:	e7f2      	b.n	8014026 <__libc_init_array+0x1e>
 8014040:	08017d80 	.word	0x08017d80
 8014044:	08017d80 	.word	0x08017d80
 8014048:	08017d80 	.word	0x08017d80
 801404c:	08017d84 	.word	0x08017d84

08014050 <__retarget_lock_init_recursive>:
 8014050:	4770      	bx	lr

08014052 <__retarget_lock_acquire_recursive>:
 8014052:	4770      	bx	lr

08014054 <__retarget_lock_release_recursive>:
 8014054:	4770      	bx	lr

08014056 <memcpy>:
 8014056:	440a      	add	r2, r1
 8014058:	4291      	cmp	r1, r2
 801405a:	f100 33ff 	add.w	r3, r0, #4294967295
 801405e:	d100      	bne.n	8014062 <memcpy+0xc>
 8014060:	4770      	bx	lr
 8014062:	b510      	push	{r4, lr}
 8014064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014068:	f803 4f01 	strb.w	r4, [r3, #1]!
 801406c:	4291      	cmp	r1, r2
 801406e:	d1f9      	bne.n	8014064 <memcpy+0xe>
 8014070:	bd10      	pop	{r4, pc}
	...

08014074 <__assert_func>:
 8014074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014076:	4614      	mov	r4, r2
 8014078:	461a      	mov	r2, r3
 801407a:	4b09      	ldr	r3, [pc, #36]	@ (80140a0 <__assert_func+0x2c>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4605      	mov	r5, r0
 8014080:	68d8      	ldr	r0, [r3, #12]
 8014082:	b954      	cbnz	r4, 801409a <__assert_func+0x26>
 8014084:	4b07      	ldr	r3, [pc, #28]	@ (80140a4 <__assert_func+0x30>)
 8014086:	461c      	mov	r4, r3
 8014088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801408c:	9100      	str	r1, [sp, #0]
 801408e:	462b      	mov	r3, r5
 8014090:	4905      	ldr	r1, [pc, #20]	@ (80140a8 <__assert_func+0x34>)
 8014092:	f000 fc89 	bl	80149a8 <fiprintf>
 8014096:	f000 fd3d 	bl	8014b14 <abort>
 801409a:	4b04      	ldr	r3, [pc, #16]	@ (80140ac <__assert_func+0x38>)
 801409c:	e7f4      	b.n	8014088 <__assert_func+0x14>
 801409e:	bf00      	nop
 80140a0:	20000024 	.word	0x20000024
 80140a4:	08017d44 	.word	0x08017d44
 80140a8:	08017d16 	.word	0x08017d16
 80140ac:	08017d09 	.word	0x08017d09

080140b0 <_free_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	4605      	mov	r5, r0
 80140b4:	2900      	cmp	r1, #0
 80140b6:	d041      	beq.n	801413c <_free_r+0x8c>
 80140b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140bc:	1f0c      	subs	r4, r1, #4
 80140be:	2b00      	cmp	r3, #0
 80140c0:	bfb8      	it	lt
 80140c2:	18e4      	addlt	r4, r4, r3
 80140c4:	f000 f8e8 	bl	8014298 <__malloc_lock>
 80140c8:	4a1d      	ldr	r2, [pc, #116]	@ (8014140 <_free_r+0x90>)
 80140ca:	6813      	ldr	r3, [r2, #0]
 80140cc:	b933      	cbnz	r3, 80140dc <_free_r+0x2c>
 80140ce:	6063      	str	r3, [r4, #4]
 80140d0:	6014      	str	r4, [r2, #0]
 80140d2:	4628      	mov	r0, r5
 80140d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140d8:	f000 b8e4 	b.w	80142a4 <__malloc_unlock>
 80140dc:	42a3      	cmp	r3, r4
 80140de:	d908      	bls.n	80140f2 <_free_r+0x42>
 80140e0:	6820      	ldr	r0, [r4, #0]
 80140e2:	1821      	adds	r1, r4, r0
 80140e4:	428b      	cmp	r3, r1
 80140e6:	bf01      	itttt	eq
 80140e8:	6819      	ldreq	r1, [r3, #0]
 80140ea:	685b      	ldreq	r3, [r3, #4]
 80140ec:	1809      	addeq	r1, r1, r0
 80140ee:	6021      	streq	r1, [r4, #0]
 80140f0:	e7ed      	b.n	80140ce <_free_r+0x1e>
 80140f2:	461a      	mov	r2, r3
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	b10b      	cbz	r3, 80140fc <_free_r+0x4c>
 80140f8:	42a3      	cmp	r3, r4
 80140fa:	d9fa      	bls.n	80140f2 <_free_r+0x42>
 80140fc:	6811      	ldr	r1, [r2, #0]
 80140fe:	1850      	adds	r0, r2, r1
 8014100:	42a0      	cmp	r0, r4
 8014102:	d10b      	bne.n	801411c <_free_r+0x6c>
 8014104:	6820      	ldr	r0, [r4, #0]
 8014106:	4401      	add	r1, r0
 8014108:	1850      	adds	r0, r2, r1
 801410a:	4283      	cmp	r3, r0
 801410c:	6011      	str	r1, [r2, #0]
 801410e:	d1e0      	bne.n	80140d2 <_free_r+0x22>
 8014110:	6818      	ldr	r0, [r3, #0]
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	6053      	str	r3, [r2, #4]
 8014116:	4408      	add	r0, r1
 8014118:	6010      	str	r0, [r2, #0]
 801411a:	e7da      	b.n	80140d2 <_free_r+0x22>
 801411c:	d902      	bls.n	8014124 <_free_r+0x74>
 801411e:	230c      	movs	r3, #12
 8014120:	602b      	str	r3, [r5, #0]
 8014122:	e7d6      	b.n	80140d2 <_free_r+0x22>
 8014124:	6820      	ldr	r0, [r4, #0]
 8014126:	1821      	adds	r1, r4, r0
 8014128:	428b      	cmp	r3, r1
 801412a:	bf04      	itt	eq
 801412c:	6819      	ldreq	r1, [r3, #0]
 801412e:	685b      	ldreq	r3, [r3, #4]
 8014130:	6063      	str	r3, [r4, #4]
 8014132:	bf04      	itt	eq
 8014134:	1809      	addeq	r1, r1, r0
 8014136:	6021      	streq	r1, [r4, #0]
 8014138:	6054      	str	r4, [r2, #4]
 801413a:	e7ca      	b.n	80140d2 <_free_r+0x22>
 801413c:	bd38      	pop	{r3, r4, r5, pc}
 801413e:	bf00      	nop
 8014140:	20004614 	.word	0x20004614

08014144 <malloc>:
 8014144:	4b02      	ldr	r3, [pc, #8]	@ (8014150 <malloc+0xc>)
 8014146:	4601      	mov	r1, r0
 8014148:	6818      	ldr	r0, [r3, #0]
 801414a:	f000 b825 	b.w	8014198 <_malloc_r>
 801414e:	bf00      	nop
 8014150:	20000024 	.word	0x20000024

08014154 <sbrk_aligned>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4e0f      	ldr	r6, [pc, #60]	@ (8014194 <sbrk_aligned+0x40>)
 8014158:	460c      	mov	r4, r1
 801415a:	6831      	ldr	r1, [r6, #0]
 801415c:	4605      	mov	r5, r0
 801415e:	b911      	cbnz	r1, 8014166 <sbrk_aligned+0x12>
 8014160:	f000 fcc8 	bl	8014af4 <_sbrk_r>
 8014164:	6030      	str	r0, [r6, #0]
 8014166:	4621      	mov	r1, r4
 8014168:	4628      	mov	r0, r5
 801416a:	f000 fcc3 	bl	8014af4 <_sbrk_r>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	d103      	bne.n	801417a <sbrk_aligned+0x26>
 8014172:	f04f 34ff 	mov.w	r4, #4294967295
 8014176:	4620      	mov	r0, r4
 8014178:	bd70      	pop	{r4, r5, r6, pc}
 801417a:	1cc4      	adds	r4, r0, #3
 801417c:	f024 0403 	bic.w	r4, r4, #3
 8014180:	42a0      	cmp	r0, r4
 8014182:	d0f8      	beq.n	8014176 <sbrk_aligned+0x22>
 8014184:	1a21      	subs	r1, r4, r0
 8014186:	4628      	mov	r0, r5
 8014188:	f000 fcb4 	bl	8014af4 <_sbrk_r>
 801418c:	3001      	adds	r0, #1
 801418e:	d1f2      	bne.n	8014176 <sbrk_aligned+0x22>
 8014190:	e7ef      	b.n	8014172 <sbrk_aligned+0x1e>
 8014192:	bf00      	nop
 8014194:	20004610 	.word	0x20004610

08014198 <_malloc_r>:
 8014198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801419c:	1ccd      	adds	r5, r1, #3
 801419e:	f025 0503 	bic.w	r5, r5, #3
 80141a2:	3508      	adds	r5, #8
 80141a4:	2d0c      	cmp	r5, #12
 80141a6:	bf38      	it	cc
 80141a8:	250c      	movcc	r5, #12
 80141aa:	2d00      	cmp	r5, #0
 80141ac:	4606      	mov	r6, r0
 80141ae:	db01      	blt.n	80141b4 <_malloc_r+0x1c>
 80141b0:	42a9      	cmp	r1, r5
 80141b2:	d904      	bls.n	80141be <_malloc_r+0x26>
 80141b4:	230c      	movs	r3, #12
 80141b6:	6033      	str	r3, [r6, #0]
 80141b8:	2000      	movs	r0, #0
 80141ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014294 <_malloc_r+0xfc>
 80141c2:	f000 f869 	bl	8014298 <__malloc_lock>
 80141c6:	f8d8 3000 	ldr.w	r3, [r8]
 80141ca:	461c      	mov	r4, r3
 80141cc:	bb44      	cbnz	r4, 8014220 <_malloc_r+0x88>
 80141ce:	4629      	mov	r1, r5
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7ff ffbf 	bl	8014154 <sbrk_aligned>
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	4604      	mov	r4, r0
 80141da:	d158      	bne.n	801428e <_malloc_r+0xf6>
 80141dc:	f8d8 4000 	ldr.w	r4, [r8]
 80141e0:	4627      	mov	r7, r4
 80141e2:	2f00      	cmp	r7, #0
 80141e4:	d143      	bne.n	801426e <_malloc_r+0xd6>
 80141e6:	2c00      	cmp	r4, #0
 80141e8:	d04b      	beq.n	8014282 <_malloc_r+0xea>
 80141ea:	6823      	ldr	r3, [r4, #0]
 80141ec:	4639      	mov	r1, r7
 80141ee:	4630      	mov	r0, r6
 80141f0:	eb04 0903 	add.w	r9, r4, r3
 80141f4:	f000 fc7e 	bl	8014af4 <_sbrk_r>
 80141f8:	4581      	cmp	r9, r0
 80141fa:	d142      	bne.n	8014282 <_malloc_r+0xea>
 80141fc:	6821      	ldr	r1, [r4, #0]
 80141fe:	1a6d      	subs	r5, r5, r1
 8014200:	4629      	mov	r1, r5
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff ffa6 	bl	8014154 <sbrk_aligned>
 8014208:	3001      	adds	r0, #1
 801420a:	d03a      	beq.n	8014282 <_malloc_r+0xea>
 801420c:	6823      	ldr	r3, [r4, #0]
 801420e:	442b      	add	r3, r5
 8014210:	6023      	str	r3, [r4, #0]
 8014212:	f8d8 3000 	ldr.w	r3, [r8]
 8014216:	685a      	ldr	r2, [r3, #4]
 8014218:	bb62      	cbnz	r2, 8014274 <_malloc_r+0xdc>
 801421a:	f8c8 7000 	str.w	r7, [r8]
 801421e:	e00f      	b.n	8014240 <_malloc_r+0xa8>
 8014220:	6822      	ldr	r2, [r4, #0]
 8014222:	1b52      	subs	r2, r2, r5
 8014224:	d420      	bmi.n	8014268 <_malloc_r+0xd0>
 8014226:	2a0b      	cmp	r2, #11
 8014228:	d917      	bls.n	801425a <_malloc_r+0xc2>
 801422a:	1961      	adds	r1, r4, r5
 801422c:	42a3      	cmp	r3, r4
 801422e:	6025      	str	r5, [r4, #0]
 8014230:	bf18      	it	ne
 8014232:	6059      	strne	r1, [r3, #4]
 8014234:	6863      	ldr	r3, [r4, #4]
 8014236:	bf08      	it	eq
 8014238:	f8c8 1000 	streq.w	r1, [r8]
 801423c:	5162      	str	r2, [r4, r5]
 801423e:	604b      	str	r3, [r1, #4]
 8014240:	4630      	mov	r0, r6
 8014242:	f000 f82f 	bl	80142a4 <__malloc_unlock>
 8014246:	f104 000b 	add.w	r0, r4, #11
 801424a:	1d23      	adds	r3, r4, #4
 801424c:	f020 0007 	bic.w	r0, r0, #7
 8014250:	1ac2      	subs	r2, r0, r3
 8014252:	bf1c      	itt	ne
 8014254:	1a1b      	subne	r3, r3, r0
 8014256:	50a3      	strne	r3, [r4, r2]
 8014258:	e7af      	b.n	80141ba <_malloc_r+0x22>
 801425a:	6862      	ldr	r2, [r4, #4]
 801425c:	42a3      	cmp	r3, r4
 801425e:	bf0c      	ite	eq
 8014260:	f8c8 2000 	streq.w	r2, [r8]
 8014264:	605a      	strne	r2, [r3, #4]
 8014266:	e7eb      	b.n	8014240 <_malloc_r+0xa8>
 8014268:	4623      	mov	r3, r4
 801426a:	6864      	ldr	r4, [r4, #4]
 801426c:	e7ae      	b.n	80141cc <_malloc_r+0x34>
 801426e:	463c      	mov	r4, r7
 8014270:	687f      	ldr	r7, [r7, #4]
 8014272:	e7b6      	b.n	80141e2 <_malloc_r+0x4a>
 8014274:	461a      	mov	r2, r3
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	42a3      	cmp	r3, r4
 801427a:	d1fb      	bne.n	8014274 <_malloc_r+0xdc>
 801427c:	2300      	movs	r3, #0
 801427e:	6053      	str	r3, [r2, #4]
 8014280:	e7de      	b.n	8014240 <_malloc_r+0xa8>
 8014282:	230c      	movs	r3, #12
 8014284:	6033      	str	r3, [r6, #0]
 8014286:	4630      	mov	r0, r6
 8014288:	f000 f80c 	bl	80142a4 <__malloc_unlock>
 801428c:	e794      	b.n	80141b8 <_malloc_r+0x20>
 801428e:	6005      	str	r5, [r0, #0]
 8014290:	e7d6      	b.n	8014240 <_malloc_r+0xa8>
 8014292:	bf00      	nop
 8014294:	20004614 	.word	0x20004614

08014298 <__malloc_lock>:
 8014298:	4801      	ldr	r0, [pc, #4]	@ (80142a0 <__malloc_lock+0x8>)
 801429a:	f7ff beda 	b.w	8014052 <__retarget_lock_acquire_recursive>
 801429e:	bf00      	nop
 80142a0:	2000460c 	.word	0x2000460c

080142a4 <__malloc_unlock>:
 80142a4:	4801      	ldr	r0, [pc, #4]	@ (80142ac <__malloc_unlock+0x8>)
 80142a6:	f7ff bed5 	b.w	8014054 <__retarget_lock_release_recursive>
 80142aa:	bf00      	nop
 80142ac:	2000460c 	.word	0x2000460c

080142b0 <__sfputc_r>:
 80142b0:	6893      	ldr	r3, [r2, #8]
 80142b2:	3b01      	subs	r3, #1
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	b410      	push	{r4}
 80142b8:	6093      	str	r3, [r2, #8]
 80142ba:	da08      	bge.n	80142ce <__sfputc_r+0x1e>
 80142bc:	6994      	ldr	r4, [r2, #24]
 80142be:	42a3      	cmp	r3, r4
 80142c0:	db01      	blt.n	80142c6 <__sfputc_r+0x16>
 80142c2:	290a      	cmp	r1, #10
 80142c4:	d103      	bne.n	80142ce <__sfputc_r+0x1e>
 80142c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ca:	f000 bb7f 	b.w	80149cc <__swbuf_r>
 80142ce:	6813      	ldr	r3, [r2, #0]
 80142d0:	1c58      	adds	r0, r3, #1
 80142d2:	6010      	str	r0, [r2, #0]
 80142d4:	7019      	strb	r1, [r3, #0]
 80142d6:	4608      	mov	r0, r1
 80142d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142dc:	4770      	bx	lr

080142de <__sfputs_r>:
 80142de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142e0:	4606      	mov	r6, r0
 80142e2:	460f      	mov	r7, r1
 80142e4:	4614      	mov	r4, r2
 80142e6:	18d5      	adds	r5, r2, r3
 80142e8:	42ac      	cmp	r4, r5
 80142ea:	d101      	bne.n	80142f0 <__sfputs_r+0x12>
 80142ec:	2000      	movs	r0, #0
 80142ee:	e007      	b.n	8014300 <__sfputs_r+0x22>
 80142f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142f4:	463a      	mov	r2, r7
 80142f6:	4630      	mov	r0, r6
 80142f8:	f7ff ffda 	bl	80142b0 <__sfputc_r>
 80142fc:	1c43      	adds	r3, r0, #1
 80142fe:	d1f3      	bne.n	80142e8 <__sfputs_r+0xa>
 8014300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014304 <_vfiprintf_r>:
 8014304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014308:	460d      	mov	r5, r1
 801430a:	b09d      	sub	sp, #116	@ 0x74
 801430c:	4614      	mov	r4, r2
 801430e:	4698      	mov	r8, r3
 8014310:	4606      	mov	r6, r0
 8014312:	b118      	cbz	r0, 801431c <_vfiprintf_r+0x18>
 8014314:	6a03      	ldr	r3, [r0, #32]
 8014316:	b90b      	cbnz	r3, 801431c <_vfiprintf_r+0x18>
 8014318:	f7ff fd8c 	bl	8013e34 <__sinit>
 801431c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801431e:	07d9      	lsls	r1, r3, #31
 8014320:	d405      	bmi.n	801432e <_vfiprintf_r+0x2a>
 8014322:	89ab      	ldrh	r3, [r5, #12]
 8014324:	059a      	lsls	r2, r3, #22
 8014326:	d402      	bmi.n	801432e <_vfiprintf_r+0x2a>
 8014328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801432a:	f7ff fe92 	bl	8014052 <__retarget_lock_acquire_recursive>
 801432e:	89ab      	ldrh	r3, [r5, #12]
 8014330:	071b      	lsls	r3, r3, #28
 8014332:	d501      	bpl.n	8014338 <_vfiprintf_r+0x34>
 8014334:	692b      	ldr	r3, [r5, #16]
 8014336:	b99b      	cbnz	r3, 8014360 <_vfiprintf_r+0x5c>
 8014338:	4629      	mov	r1, r5
 801433a:	4630      	mov	r0, r6
 801433c:	f000 fb84 	bl	8014a48 <__swsetup_r>
 8014340:	b170      	cbz	r0, 8014360 <_vfiprintf_r+0x5c>
 8014342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014344:	07dc      	lsls	r4, r3, #31
 8014346:	d504      	bpl.n	8014352 <_vfiprintf_r+0x4e>
 8014348:	f04f 30ff 	mov.w	r0, #4294967295
 801434c:	b01d      	add	sp, #116	@ 0x74
 801434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014352:	89ab      	ldrh	r3, [r5, #12]
 8014354:	0598      	lsls	r0, r3, #22
 8014356:	d4f7      	bmi.n	8014348 <_vfiprintf_r+0x44>
 8014358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801435a:	f7ff fe7b 	bl	8014054 <__retarget_lock_release_recursive>
 801435e:	e7f3      	b.n	8014348 <_vfiprintf_r+0x44>
 8014360:	2300      	movs	r3, #0
 8014362:	9309      	str	r3, [sp, #36]	@ 0x24
 8014364:	2320      	movs	r3, #32
 8014366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801436a:	f8cd 800c 	str.w	r8, [sp, #12]
 801436e:	2330      	movs	r3, #48	@ 0x30
 8014370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014520 <_vfiprintf_r+0x21c>
 8014374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014378:	f04f 0901 	mov.w	r9, #1
 801437c:	4623      	mov	r3, r4
 801437e:	469a      	mov	sl, r3
 8014380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014384:	b10a      	cbz	r2, 801438a <_vfiprintf_r+0x86>
 8014386:	2a25      	cmp	r2, #37	@ 0x25
 8014388:	d1f9      	bne.n	801437e <_vfiprintf_r+0x7a>
 801438a:	ebba 0b04 	subs.w	fp, sl, r4
 801438e:	d00b      	beq.n	80143a8 <_vfiprintf_r+0xa4>
 8014390:	465b      	mov	r3, fp
 8014392:	4622      	mov	r2, r4
 8014394:	4629      	mov	r1, r5
 8014396:	4630      	mov	r0, r6
 8014398:	f7ff ffa1 	bl	80142de <__sfputs_r>
 801439c:	3001      	adds	r0, #1
 801439e:	f000 80a7 	beq.w	80144f0 <_vfiprintf_r+0x1ec>
 80143a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143a4:	445a      	add	r2, fp
 80143a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80143a8:	f89a 3000 	ldrb.w	r3, [sl]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	f000 809f 	beq.w	80144f0 <_vfiprintf_r+0x1ec>
 80143b2:	2300      	movs	r3, #0
 80143b4:	f04f 32ff 	mov.w	r2, #4294967295
 80143b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143bc:	f10a 0a01 	add.w	sl, sl, #1
 80143c0:	9304      	str	r3, [sp, #16]
 80143c2:	9307      	str	r3, [sp, #28]
 80143c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80143ca:	4654      	mov	r4, sl
 80143cc:	2205      	movs	r2, #5
 80143ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d2:	4853      	ldr	r0, [pc, #332]	@ (8014520 <_vfiprintf_r+0x21c>)
 80143d4:	f7eb ff04 	bl	80001e0 <memchr>
 80143d8:	9a04      	ldr	r2, [sp, #16]
 80143da:	b9d8      	cbnz	r0, 8014414 <_vfiprintf_r+0x110>
 80143dc:	06d1      	lsls	r1, r2, #27
 80143de:	bf44      	itt	mi
 80143e0:	2320      	movmi	r3, #32
 80143e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143e6:	0713      	lsls	r3, r2, #28
 80143e8:	bf44      	itt	mi
 80143ea:	232b      	movmi	r3, #43	@ 0x2b
 80143ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143f0:	f89a 3000 	ldrb.w	r3, [sl]
 80143f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80143f6:	d015      	beq.n	8014424 <_vfiprintf_r+0x120>
 80143f8:	9a07      	ldr	r2, [sp, #28]
 80143fa:	4654      	mov	r4, sl
 80143fc:	2000      	movs	r0, #0
 80143fe:	f04f 0c0a 	mov.w	ip, #10
 8014402:	4621      	mov	r1, r4
 8014404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014408:	3b30      	subs	r3, #48	@ 0x30
 801440a:	2b09      	cmp	r3, #9
 801440c:	d94b      	bls.n	80144a6 <_vfiprintf_r+0x1a2>
 801440e:	b1b0      	cbz	r0, 801443e <_vfiprintf_r+0x13a>
 8014410:	9207      	str	r2, [sp, #28]
 8014412:	e014      	b.n	801443e <_vfiprintf_r+0x13a>
 8014414:	eba0 0308 	sub.w	r3, r0, r8
 8014418:	fa09 f303 	lsl.w	r3, r9, r3
 801441c:	4313      	orrs	r3, r2
 801441e:	9304      	str	r3, [sp, #16]
 8014420:	46a2      	mov	sl, r4
 8014422:	e7d2      	b.n	80143ca <_vfiprintf_r+0xc6>
 8014424:	9b03      	ldr	r3, [sp, #12]
 8014426:	1d19      	adds	r1, r3, #4
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	9103      	str	r1, [sp, #12]
 801442c:	2b00      	cmp	r3, #0
 801442e:	bfbb      	ittet	lt
 8014430:	425b      	neglt	r3, r3
 8014432:	f042 0202 	orrlt.w	r2, r2, #2
 8014436:	9307      	strge	r3, [sp, #28]
 8014438:	9307      	strlt	r3, [sp, #28]
 801443a:	bfb8      	it	lt
 801443c:	9204      	strlt	r2, [sp, #16]
 801443e:	7823      	ldrb	r3, [r4, #0]
 8014440:	2b2e      	cmp	r3, #46	@ 0x2e
 8014442:	d10a      	bne.n	801445a <_vfiprintf_r+0x156>
 8014444:	7863      	ldrb	r3, [r4, #1]
 8014446:	2b2a      	cmp	r3, #42	@ 0x2a
 8014448:	d132      	bne.n	80144b0 <_vfiprintf_r+0x1ac>
 801444a:	9b03      	ldr	r3, [sp, #12]
 801444c:	1d1a      	adds	r2, r3, #4
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	9203      	str	r2, [sp, #12]
 8014452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014456:	3402      	adds	r4, #2
 8014458:	9305      	str	r3, [sp, #20]
 801445a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014530 <_vfiprintf_r+0x22c>
 801445e:	7821      	ldrb	r1, [r4, #0]
 8014460:	2203      	movs	r2, #3
 8014462:	4650      	mov	r0, sl
 8014464:	f7eb febc 	bl	80001e0 <memchr>
 8014468:	b138      	cbz	r0, 801447a <_vfiprintf_r+0x176>
 801446a:	9b04      	ldr	r3, [sp, #16]
 801446c:	eba0 000a 	sub.w	r0, r0, sl
 8014470:	2240      	movs	r2, #64	@ 0x40
 8014472:	4082      	lsls	r2, r0
 8014474:	4313      	orrs	r3, r2
 8014476:	3401      	adds	r4, #1
 8014478:	9304      	str	r3, [sp, #16]
 801447a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801447e:	4829      	ldr	r0, [pc, #164]	@ (8014524 <_vfiprintf_r+0x220>)
 8014480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014484:	2206      	movs	r2, #6
 8014486:	f7eb feab 	bl	80001e0 <memchr>
 801448a:	2800      	cmp	r0, #0
 801448c:	d03f      	beq.n	801450e <_vfiprintf_r+0x20a>
 801448e:	4b26      	ldr	r3, [pc, #152]	@ (8014528 <_vfiprintf_r+0x224>)
 8014490:	bb1b      	cbnz	r3, 80144da <_vfiprintf_r+0x1d6>
 8014492:	9b03      	ldr	r3, [sp, #12]
 8014494:	3307      	adds	r3, #7
 8014496:	f023 0307 	bic.w	r3, r3, #7
 801449a:	3308      	adds	r3, #8
 801449c:	9303      	str	r3, [sp, #12]
 801449e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144a0:	443b      	add	r3, r7
 80144a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80144a4:	e76a      	b.n	801437c <_vfiprintf_r+0x78>
 80144a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80144aa:	460c      	mov	r4, r1
 80144ac:	2001      	movs	r0, #1
 80144ae:	e7a8      	b.n	8014402 <_vfiprintf_r+0xfe>
 80144b0:	2300      	movs	r3, #0
 80144b2:	3401      	adds	r4, #1
 80144b4:	9305      	str	r3, [sp, #20]
 80144b6:	4619      	mov	r1, r3
 80144b8:	f04f 0c0a 	mov.w	ip, #10
 80144bc:	4620      	mov	r0, r4
 80144be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144c2:	3a30      	subs	r2, #48	@ 0x30
 80144c4:	2a09      	cmp	r2, #9
 80144c6:	d903      	bls.n	80144d0 <_vfiprintf_r+0x1cc>
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d0c6      	beq.n	801445a <_vfiprintf_r+0x156>
 80144cc:	9105      	str	r1, [sp, #20]
 80144ce:	e7c4      	b.n	801445a <_vfiprintf_r+0x156>
 80144d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80144d4:	4604      	mov	r4, r0
 80144d6:	2301      	movs	r3, #1
 80144d8:	e7f0      	b.n	80144bc <_vfiprintf_r+0x1b8>
 80144da:	ab03      	add	r3, sp, #12
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	462a      	mov	r2, r5
 80144e0:	4b12      	ldr	r3, [pc, #72]	@ (801452c <_vfiprintf_r+0x228>)
 80144e2:	a904      	add	r1, sp, #16
 80144e4:	4630      	mov	r0, r6
 80144e6:	f3af 8000 	nop.w
 80144ea:	4607      	mov	r7, r0
 80144ec:	1c78      	adds	r0, r7, #1
 80144ee:	d1d6      	bne.n	801449e <_vfiprintf_r+0x19a>
 80144f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144f2:	07d9      	lsls	r1, r3, #31
 80144f4:	d405      	bmi.n	8014502 <_vfiprintf_r+0x1fe>
 80144f6:	89ab      	ldrh	r3, [r5, #12]
 80144f8:	059a      	lsls	r2, r3, #22
 80144fa:	d402      	bmi.n	8014502 <_vfiprintf_r+0x1fe>
 80144fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144fe:	f7ff fda9 	bl	8014054 <__retarget_lock_release_recursive>
 8014502:	89ab      	ldrh	r3, [r5, #12]
 8014504:	065b      	lsls	r3, r3, #25
 8014506:	f53f af1f 	bmi.w	8014348 <_vfiprintf_r+0x44>
 801450a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801450c:	e71e      	b.n	801434c <_vfiprintf_r+0x48>
 801450e:	ab03      	add	r3, sp, #12
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	462a      	mov	r2, r5
 8014514:	4b05      	ldr	r3, [pc, #20]	@ (801452c <_vfiprintf_r+0x228>)
 8014516:	a904      	add	r1, sp, #16
 8014518:	4630      	mov	r0, r6
 801451a:	f000 f879 	bl	8014610 <_printf_i>
 801451e:	e7e4      	b.n	80144ea <_vfiprintf_r+0x1e6>
 8014520:	08017d45 	.word	0x08017d45
 8014524:	08017d4f 	.word	0x08017d4f
 8014528:	00000000 	.word	0x00000000
 801452c:	080142df 	.word	0x080142df
 8014530:	08017d4b 	.word	0x08017d4b

08014534 <_printf_common>:
 8014534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014538:	4616      	mov	r6, r2
 801453a:	4698      	mov	r8, r3
 801453c:	688a      	ldr	r2, [r1, #8]
 801453e:	690b      	ldr	r3, [r1, #16]
 8014540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014544:	4293      	cmp	r3, r2
 8014546:	bfb8      	it	lt
 8014548:	4613      	movlt	r3, r2
 801454a:	6033      	str	r3, [r6, #0]
 801454c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014550:	4607      	mov	r7, r0
 8014552:	460c      	mov	r4, r1
 8014554:	b10a      	cbz	r2, 801455a <_printf_common+0x26>
 8014556:	3301      	adds	r3, #1
 8014558:	6033      	str	r3, [r6, #0]
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	0699      	lsls	r1, r3, #26
 801455e:	bf42      	ittt	mi
 8014560:	6833      	ldrmi	r3, [r6, #0]
 8014562:	3302      	addmi	r3, #2
 8014564:	6033      	strmi	r3, [r6, #0]
 8014566:	6825      	ldr	r5, [r4, #0]
 8014568:	f015 0506 	ands.w	r5, r5, #6
 801456c:	d106      	bne.n	801457c <_printf_common+0x48>
 801456e:	f104 0a19 	add.w	sl, r4, #25
 8014572:	68e3      	ldr	r3, [r4, #12]
 8014574:	6832      	ldr	r2, [r6, #0]
 8014576:	1a9b      	subs	r3, r3, r2
 8014578:	42ab      	cmp	r3, r5
 801457a:	dc26      	bgt.n	80145ca <_printf_common+0x96>
 801457c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014580:	6822      	ldr	r2, [r4, #0]
 8014582:	3b00      	subs	r3, #0
 8014584:	bf18      	it	ne
 8014586:	2301      	movne	r3, #1
 8014588:	0692      	lsls	r2, r2, #26
 801458a:	d42b      	bmi.n	80145e4 <_printf_common+0xb0>
 801458c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014590:	4641      	mov	r1, r8
 8014592:	4638      	mov	r0, r7
 8014594:	47c8      	blx	r9
 8014596:	3001      	adds	r0, #1
 8014598:	d01e      	beq.n	80145d8 <_printf_common+0xa4>
 801459a:	6823      	ldr	r3, [r4, #0]
 801459c:	6922      	ldr	r2, [r4, #16]
 801459e:	f003 0306 	and.w	r3, r3, #6
 80145a2:	2b04      	cmp	r3, #4
 80145a4:	bf02      	ittt	eq
 80145a6:	68e5      	ldreq	r5, [r4, #12]
 80145a8:	6833      	ldreq	r3, [r6, #0]
 80145aa:	1aed      	subeq	r5, r5, r3
 80145ac:	68a3      	ldr	r3, [r4, #8]
 80145ae:	bf0c      	ite	eq
 80145b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145b4:	2500      	movne	r5, #0
 80145b6:	4293      	cmp	r3, r2
 80145b8:	bfc4      	itt	gt
 80145ba:	1a9b      	subgt	r3, r3, r2
 80145bc:	18ed      	addgt	r5, r5, r3
 80145be:	2600      	movs	r6, #0
 80145c0:	341a      	adds	r4, #26
 80145c2:	42b5      	cmp	r5, r6
 80145c4:	d11a      	bne.n	80145fc <_printf_common+0xc8>
 80145c6:	2000      	movs	r0, #0
 80145c8:	e008      	b.n	80145dc <_printf_common+0xa8>
 80145ca:	2301      	movs	r3, #1
 80145cc:	4652      	mov	r2, sl
 80145ce:	4641      	mov	r1, r8
 80145d0:	4638      	mov	r0, r7
 80145d2:	47c8      	blx	r9
 80145d4:	3001      	adds	r0, #1
 80145d6:	d103      	bne.n	80145e0 <_printf_common+0xac>
 80145d8:	f04f 30ff 	mov.w	r0, #4294967295
 80145dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e0:	3501      	adds	r5, #1
 80145e2:	e7c6      	b.n	8014572 <_printf_common+0x3e>
 80145e4:	18e1      	adds	r1, r4, r3
 80145e6:	1c5a      	adds	r2, r3, #1
 80145e8:	2030      	movs	r0, #48	@ 0x30
 80145ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80145ee:	4422      	add	r2, r4
 80145f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80145f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80145f8:	3302      	adds	r3, #2
 80145fa:	e7c7      	b.n	801458c <_printf_common+0x58>
 80145fc:	2301      	movs	r3, #1
 80145fe:	4622      	mov	r2, r4
 8014600:	4641      	mov	r1, r8
 8014602:	4638      	mov	r0, r7
 8014604:	47c8      	blx	r9
 8014606:	3001      	adds	r0, #1
 8014608:	d0e6      	beq.n	80145d8 <_printf_common+0xa4>
 801460a:	3601      	adds	r6, #1
 801460c:	e7d9      	b.n	80145c2 <_printf_common+0x8e>
	...

08014610 <_printf_i>:
 8014610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014614:	7e0f      	ldrb	r7, [r1, #24]
 8014616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014618:	2f78      	cmp	r7, #120	@ 0x78
 801461a:	4691      	mov	r9, r2
 801461c:	4680      	mov	r8, r0
 801461e:	460c      	mov	r4, r1
 8014620:	469a      	mov	sl, r3
 8014622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014626:	d807      	bhi.n	8014638 <_printf_i+0x28>
 8014628:	2f62      	cmp	r7, #98	@ 0x62
 801462a:	d80a      	bhi.n	8014642 <_printf_i+0x32>
 801462c:	2f00      	cmp	r7, #0
 801462e:	f000 80d2 	beq.w	80147d6 <_printf_i+0x1c6>
 8014632:	2f58      	cmp	r7, #88	@ 0x58
 8014634:	f000 80b9 	beq.w	80147aa <_printf_i+0x19a>
 8014638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801463c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014640:	e03a      	b.n	80146b8 <_printf_i+0xa8>
 8014642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014646:	2b15      	cmp	r3, #21
 8014648:	d8f6      	bhi.n	8014638 <_printf_i+0x28>
 801464a:	a101      	add	r1, pc, #4	@ (adr r1, 8014650 <_printf_i+0x40>)
 801464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014650:	080146a9 	.word	0x080146a9
 8014654:	080146bd 	.word	0x080146bd
 8014658:	08014639 	.word	0x08014639
 801465c:	08014639 	.word	0x08014639
 8014660:	08014639 	.word	0x08014639
 8014664:	08014639 	.word	0x08014639
 8014668:	080146bd 	.word	0x080146bd
 801466c:	08014639 	.word	0x08014639
 8014670:	08014639 	.word	0x08014639
 8014674:	08014639 	.word	0x08014639
 8014678:	08014639 	.word	0x08014639
 801467c:	080147bd 	.word	0x080147bd
 8014680:	080146e7 	.word	0x080146e7
 8014684:	08014777 	.word	0x08014777
 8014688:	08014639 	.word	0x08014639
 801468c:	08014639 	.word	0x08014639
 8014690:	080147df 	.word	0x080147df
 8014694:	08014639 	.word	0x08014639
 8014698:	080146e7 	.word	0x080146e7
 801469c:	08014639 	.word	0x08014639
 80146a0:	08014639 	.word	0x08014639
 80146a4:	0801477f 	.word	0x0801477f
 80146a8:	6833      	ldr	r3, [r6, #0]
 80146aa:	1d1a      	adds	r2, r3, #4
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	6032      	str	r2, [r6, #0]
 80146b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80146b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80146b8:	2301      	movs	r3, #1
 80146ba:	e09d      	b.n	80147f8 <_printf_i+0x1e8>
 80146bc:	6833      	ldr	r3, [r6, #0]
 80146be:	6820      	ldr	r0, [r4, #0]
 80146c0:	1d19      	adds	r1, r3, #4
 80146c2:	6031      	str	r1, [r6, #0]
 80146c4:	0606      	lsls	r6, r0, #24
 80146c6:	d501      	bpl.n	80146cc <_printf_i+0xbc>
 80146c8:	681d      	ldr	r5, [r3, #0]
 80146ca:	e003      	b.n	80146d4 <_printf_i+0xc4>
 80146cc:	0645      	lsls	r5, r0, #25
 80146ce:	d5fb      	bpl.n	80146c8 <_printf_i+0xb8>
 80146d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80146d4:	2d00      	cmp	r5, #0
 80146d6:	da03      	bge.n	80146e0 <_printf_i+0xd0>
 80146d8:	232d      	movs	r3, #45	@ 0x2d
 80146da:	426d      	negs	r5, r5
 80146dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146e0:	4859      	ldr	r0, [pc, #356]	@ (8014848 <_printf_i+0x238>)
 80146e2:	230a      	movs	r3, #10
 80146e4:	e011      	b.n	801470a <_printf_i+0xfa>
 80146e6:	6821      	ldr	r1, [r4, #0]
 80146e8:	6833      	ldr	r3, [r6, #0]
 80146ea:	0608      	lsls	r0, r1, #24
 80146ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80146f0:	d402      	bmi.n	80146f8 <_printf_i+0xe8>
 80146f2:	0649      	lsls	r1, r1, #25
 80146f4:	bf48      	it	mi
 80146f6:	b2ad      	uxthmi	r5, r5
 80146f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80146fa:	4853      	ldr	r0, [pc, #332]	@ (8014848 <_printf_i+0x238>)
 80146fc:	6033      	str	r3, [r6, #0]
 80146fe:	bf14      	ite	ne
 8014700:	230a      	movne	r3, #10
 8014702:	2308      	moveq	r3, #8
 8014704:	2100      	movs	r1, #0
 8014706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801470a:	6866      	ldr	r6, [r4, #4]
 801470c:	60a6      	str	r6, [r4, #8]
 801470e:	2e00      	cmp	r6, #0
 8014710:	bfa2      	ittt	ge
 8014712:	6821      	ldrge	r1, [r4, #0]
 8014714:	f021 0104 	bicge.w	r1, r1, #4
 8014718:	6021      	strge	r1, [r4, #0]
 801471a:	b90d      	cbnz	r5, 8014720 <_printf_i+0x110>
 801471c:	2e00      	cmp	r6, #0
 801471e:	d04b      	beq.n	80147b8 <_printf_i+0x1a8>
 8014720:	4616      	mov	r6, r2
 8014722:	fbb5 f1f3 	udiv	r1, r5, r3
 8014726:	fb03 5711 	mls	r7, r3, r1, r5
 801472a:	5dc7      	ldrb	r7, [r0, r7]
 801472c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014730:	462f      	mov	r7, r5
 8014732:	42bb      	cmp	r3, r7
 8014734:	460d      	mov	r5, r1
 8014736:	d9f4      	bls.n	8014722 <_printf_i+0x112>
 8014738:	2b08      	cmp	r3, #8
 801473a:	d10b      	bne.n	8014754 <_printf_i+0x144>
 801473c:	6823      	ldr	r3, [r4, #0]
 801473e:	07df      	lsls	r7, r3, #31
 8014740:	d508      	bpl.n	8014754 <_printf_i+0x144>
 8014742:	6923      	ldr	r3, [r4, #16]
 8014744:	6861      	ldr	r1, [r4, #4]
 8014746:	4299      	cmp	r1, r3
 8014748:	bfde      	ittt	le
 801474a:	2330      	movle	r3, #48	@ 0x30
 801474c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014754:	1b92      	subs	r2, r2, r6
 8014756:	6122      	str	r2, [r4, #16]
 8014758:	f8cd a000 	str.w	sl, [sp]
 801475c:	464b      	mov	r3, r9
 801475e:	aa03      	add	r2, sp, #12
 8014760:	4621      	mov	r1, r4
 8014762:	4640      	mov	r0, r8
 8014764:	f7ff fee6 	bl	8014534 <_printf_common>
 8014768:	3001      	adds	r0, #1
 801476a:	d14a      	bne.n	8014802 <_printf_i+0x1f2>
 801476c:	f04f 30ff 	mov.w	r0, #4294967295
 8014770:	b004      	add	sp, #16
 8014772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	f043 0320 	orr.w	r3, r3, #32
 801477c:	6023      	str	r3, [r4, #0]
 801477e:	4833      	ldr	r0, [pc, #204]	@ (801484c <_printf_i+0x23c>)
 8014780:	2778      	movs	r7, #120	@ 0x78
 8014782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	6831      	ldr	r1, [r6, #0]
 801478a:	061f      	lsls	r7, r3, #24
 801478c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014790:	d402      	bmi.n	8014798 <_printf_i+0x188>
 8014792:	065f      	lsls	r7, r3, #25
 8014794:	bf48      	it	mi
 8014796:	b2ad      	uxthmi	r5, r5
 8014798:	6031      	str	r1, [r6, #0]
 801479a:	07d9      	lsls	r1, r3, #31
 801479c:	bf44      	itt	mi
 801479e:	f043 0320 	orrmi.w	r3, r3, #32
 80147a2:	6023      	strmi	r3, [r4, #0]
 80147a4:	b11d      	cbz	r5, 80147ae <_printf_i+0x19e>
 80147a6:	2310      	movs	r3, #16
 80147a8:	e7ac      	b.n	8014704 <_printf_i+0xf4>
 80147aa:	4827      	ldr	r0, [pc, #156]	@ (8014848 <_printf_i+0x238>)
 80147ac:	e7e9      	b.n	8014782 <_printf_i+0x172>
 80147ae:	6823      	ldr	r3, [r4, #0]
 80147b0:	f023 0320 	bic.w	r3, r3, #32
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	e7f6      	b.n	80147a6 <_printf_i+0x196>
 80147b8:	4616      	mov	r6, r2
 80147ba:	e7bd      	b.n	8014738 <_printf_i+0x128>
 80147bc:	6833      	ldr	r3, [r6, #0]
 80147be:	6825      	ldr	r5, [r4, #0]
 80147c0:	6961      	ldr	r1, [r4, #20]
 80147c2:	1d18      	adds	r0, r3, #4
 80147c4:	6030      	str	r0, [r6, #0]
 80147c6:	062e      	lsls	r6, r5, #24
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	d501      	bpl.n	80147d0 <_printf_i+0x1c0>
 80147cc:	6019      	str	r1, [r3, #0]
 80147ce:	e002      	b.n	80147d6 <_printf_i+0x1c6>
 80147d0:	0668      	lsls	r0, r5, #25
 80147d2:	d5fb      	bpl.n	80147cc <_printf_i+0x1bc>
 80147d4:	8019      	strh	r1, [r3, #0]
 80147d6:	2300      	movs	r3, #0
 80147d8:	6123      	str	r3, [r4, #16]
 80147da:	4616      	mov	r6, r2
 80147dc:	e7bc      	b.n	8014758 <_printf_i+0x148>
 80147de:	6833      	ldr	r3, [r6, #0]
 80147e0:	1d1a      	adds	r2, r3, #4
 80147e2:	6032      	str	r2, [r6, #0]
 80147e4:	681e      	ldr	r6, [r3, #0]
 80147e6:	6862      	ldr	r2, [r4, #4]
 80147e8:	2100      	movs	r1, #0
 80147ea:	4630      	mov	r0, r6
 80147ec:	f7eb fcf8 	bl	80001e0 <memchr>
 80147f0:	b108      	cbz	r0, 80147f6 <_printf_i+0x1e6>
 80147f2:	1b80      	subs	r0, r0, r6
 80147f4:	6060      	str	r0, [r4, #4]
 80147f6:	6863      	ldr	r3, [r4, #4]
 80147f8:	6123      	str	r3, [r4, #16]
 80147fa:	2300      	movs	r3, #0
 80147fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014800:	e7aa      	b.n	8014758 <_printf_i+0x148>
 8014802:	6923      	ldr	r3, [r4, #16]
 8014804:	4632      	mov	r2, r6
 8014806:	4649      	mov	r1, r9
 8014808:	4640      	mov	r0, r8
 801480a:	47d0      	blx	sl
 801480c:	3001      	adds	r0, #1
 801480e:	d0ad      	beq.n	801476c <_printf_i+0x15c>
 8014810:	6823      	ldr	r3, [r4, #0]
 8014812:	079b      	lsls	r3, r3, #30
 8014814:	d413      	bmi.n	801483e <_printf_i+0x22e>
 8014816:	68e0      	ldr	r0, [r4, #12]
 8014818:	9b03      	ldr	r3, [sp, #12]
 801481a:	4298      	cmp	r0, r3
 801481c:	bfb8      	it	lt
 801481e:	4618      	movlt	r0, r3
 8014820:	e7a6      	b.n	8014770 <_printf_i+0x160>
 8014822:	2301      	movs	r3, #1
 8014824:	4632      	mov	r2, r6
 8014826:	4649      	mov	r1, r9
 8014828:	4640      	mov	r0, r8
 801482a:	47d0      	blx	sl
 801482c:	3001      	adds	r0, #1
 801482e:	d09d      	beq.n	801476c <_printf_i+0x15c>
 8014830:	3501      	adds	r5, #1
 8014832:	68e3      	ldr	r3, [r4, #12]
 8014834:	9903      	ldr	r1, [sp, #12]
 8014836:	1a5b      	subs	r3, r3, r1
 8014838:	42ab      	cmp	r3, r5
 801483a:	dcf2      	bgt.n	8014822 <_printf_i+0x212>
 801483c:	e7eb      	b.n	8014816 <_printf_i+0x206>
 801483e:	2500      	movs	r5, #0
 8014840:	f104 0619 	add.w	r6, r4, #25
 8014844:	e7f5      	b.n	8014832 <_printf_i+0x222>
 8014846:	bf00      	nop
 8014848:	08017d56 	.word	0x08017d56
 801484c:	08017d67 	.word	0x08017d67

08014850 <__sflush_r>:
 8014850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014858:	0716      	lsls	r6, r2, #28
 801485a:	4605      	mov	r5, r0
 801485c:	460c      	mov	r4, r1
 801485e:	d454      	bmi.n	801490a <__sflush_r+0xba>
 8014860:	684b      	ldr	r3, [r1, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	dc02      	bgt.n	801486c <__sflush_r+0x1c>
 8014866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014868:	2b00      	cmp	r3, #0
 801486a:	dd48      	ble.n	80148fe <__sflush_r+0xae>
 801486c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801486e:	2e00      	cmp	r6, #0
 8014870:	d045      	beq.n	80148fe <__sflush_r+0xae>
 8014872:	2300      	movs	r3, #0
 8014874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014878:	682f      	ldr	r7, [r5, #0]
 801487a:	6a21      	ldr	r1, [r4, #32]
 801487c:	602b      	str	r3, [r5, #0]
 801487e:	d030      	beq.n	80148e2 <__sflush_r+0x92>
 8014880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014882:	89a3      	ldrh	r3, [r4, #12]
 8014884:	0759      	lsls	r1, r3, #29
 8014886:	d505      	bpl.n	8014894 <__sflush_r+0x44>
 8014888:	6863      	ldr	r3, [r4, #4]
 801488a:	1ad2      	subs	r2, r2, r3
 801488c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801488e:	b10b      	cbz	r3, 8014894 <__sflush_r+0x44>
 8014890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014892:	1ad2      	subs	r2, r2, r3
 8014894:	2300      	movs	r3, #0
 8014896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014898:	6a21      	ldr	r1, [r4, #32]
 801489a:	4628      	mov	r0, r5
 801489c:	47b0      	blx	r6
 801489e:	1c43      	adds	r3, r0, #1
 80148a0:	89a3      	ldrh	r3, [r4, #12]
 80148a2:	d106      	bne.n	80148b2 <__sflush_r+0x62>
 80148a4:	6829      	ldr	r1, [r5, #0]
 80148a6:	291d      	cmp	r1, #29
 80148a8:	d82b      	bhi.n	8014902 <__sflush_r+0xb2>
 80148aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014954 <__sflush_r+0x104>)
 80148ac:	410a      	asrs	r2, r1
 80148ae:	07d6      	lsls	r6, r2, #31
 80148b0:	d427      	bmi.n	8014902 <__sflush_r+0xb2>
 80148b2:	2200      	movs	r2, #0
 80148b4:	6062      	str	r2, [r4, #4]
 80148b6:	04d9      	lsls	r1, r3, #19
 80148b8:	6922      	ldr	r2, [r4, #16]
 80148ba:	6022      	str	r2, [r4, #0]
 80148bc:	d504      	bpl.n	80148c8 <__sflush_r+0x78>
 80148be:	1c42      	adds	r2, r0, #1
 80148c0:	d101      	bne.n	80148c6 <__sflush_r+0x76>
 80148c2:	682b      	ldr	r3, [r5, #0]
 80148c4:	b903      	cbnz	r3, 80148c8 <__sflush_r+0x78>
 80148c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80148c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148ca:	602f      	str	r7, [r5, #0]
 80148cc:	b1b9      	cbz	r1, 80148fe <__sflush_r+0xae>
 80148ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148d2:	4299      	cmp	r1, r3
 80148d4:	d002      	beq.n	80148dc <__sflush_r+0x8c>
 80148d6:	4628      	mov	r0, r5
 80148d8:	f7ff fbea 	bl	80140b0 <_free_r>
 80148dc:	2300      	movs	r3, #0
 80148de:	6363      	str	r3, [r4, #52]	@ 0x34
 80148e0:	e00d      	b.n	80148fe <__sflush_r+0xae>
 80148e2:	2301      	movs	r3, #1
 80148e4:	4628      	mov	r0, r5
 80148e6:	47b0      	blx	r6
 80148e8:	4602      	mov	r2, r0
 80148ea:	1c50      	adds	r0, r2, #1
 80148ec:	d1c9      	bne.n	8014882 <__sflush_r+0x32>
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d0c6      	beq.n	8014882 <__sflush_r+0x32>
 80148f4:	2b1d      	cmp	r3, #29
 80148f6:	d001      	beq.n	80148fc <__sflush_r+0xac>
 80148f8:	2b16      	cmp	r3, #22
 80148fa:	d11e      	bne.n	801493a <__sflush_r+0xea>
 80148fc:	602f      	str	r7, [r5, #0]
 80148fe:	2000      	movs	r0, #0
 8014900:	e022      	b.n	8014948 <__sflush_r+0xf8>
 8014902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014906:	b21b      	sxth	r3, r3
 8014908:	e01b      	b.n	8014942 <__sflush_r+0xf2>
 801490a:	690f      	ldr	r7, [r1, #16]
 801490c:	2f00      	cmp	r7, #0
 801490e:	d0f6      	beq.n	80148fe <__sflush_r+0xae>
 8014910:	0793      	lsls	r3, r2, #30
 8014912:	680e      	ldr	r6, [r1, #0]
 8014914:	bf08      	it	eq
 8014916:	694b      	ldreq	r3, [r1, #20]
 8014918:	600f      	str	r7, [r1, #0]
 801491a:	bf18      	it	ne
 801491c:	2300      	movne	r3, #0
 801491e:	eba6 0807 	sub.w	r8, r6, r7
 8014922:	608b      	str	r3, [r1, #8]
 8014924:	f1b8 0f00 	cmp.w	r8, #0
 8014928:	dde9      	ble.n	80148fe <__sflush_r+0xae>
 801492a:	6a21      	ldr	r1, [r4, #32]
 801492c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801492e:	4643      	mov	r3, r8
 8014930:	463a      	mov	r2, r7
 8014932:	4628      	mov	r0, r5
 8014934:	47b0      	blx	r6
 8014936:	2800      	cmp	r0, #0
 8014938:	dc08      	bgt.n	801494c <__sflush_r+0xfc>
 801493a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801493e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014942:	81a3      	strh	r3, [r4, #12]
 8014944:	f04f 30ff 	mov.w	r0, #4294967295
 8014948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801494c:	4407      	add	r7, r0
 801494e:	eba8 0800 	sub.w	r8, r8, r0
 8014952:	e7e7      	b.n	8014924 <__sflush_r+0xd4>
 8014954:	dfbffffe 	.word	0xdfbffffe

08014958 <_fflush_r>:
 8014958:	b538      	push	{r3, r4, r5, lr}
 801495a:	690b      	ldr	r3, [r1, #16]
 801495c:	4605      	mov	r5, r0
 801495e:	460c      	mov	r4, r1
 8014960:	b913      	cbnz	r3, 8014968 <_fflush_r+0x10>
 8014962:	2500      	movs	r5, #0
 8014964:	4628      	mov	r0, r5
 8014966:	bd38      	pop	{r3, r4, r5, pc}
 8014968:	b118      	cbz	r0, 8014972 <_fflush_r+0x1a>
 801496a:	6a03      	ldr	r3, [r0, #32]
 801496c:	b90b      	cbnz	r3, 8014972 <_fflush_r+0x1a>
 801496e:	f7ff fa61 	bl	8013e34 <__sinit>
 8014972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d0f3      	beq.n	8014962 <_fflush_r+0xa>
 801497a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801497c:	07d0      	lsls	r0, r2, #31
 801497e:	d404      	bmi.n	801498a <_fflush_r+0x32>
 8014980:	0599      	lsls	r1, r3, #22
 8014982:	d402      	bmi.n	801498a <_fflush_r+0x32>
 8014984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014986:	f7ff fb64 	bl	8014052 <__retarget_lock_acquire_recursive>
 801498a:	4628      	mov	r0, r5
 801498c:	4621      	mov	r1, r4
 801498e:	f7ff ff5f 	bl	8014850 <__sflush_r>
 8014992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014994:	07da      	lsls	r2, r3, #31
 8014996:	4605      	mov	r5, r0
 8014998:	d4e4      	bmi.n	8014964 <_fflush_r+0xc>
 801499a:	89a3      	ldrh	r3, [r4, #12]
 801499c:	059b      	lsls	r3, r3, #22
 801499e:	d4e1      	bmi.n	8014964 <_fflush_r+0xc>
 80149a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149a2:	f7ff fb57 	bl	8014054 <__retarget_lock_release_recursive>
 80149a6:	e7dd      	b.n	8014964 <_fflush_r+0xc>

080149a8 <fiprintf>:
 80149a8:	b40e      	push	{r1, r2, r3}
 80149aa:	b503      	push	{r0, r1, lr}
 80149ac:	4601      	mov	r1, r0
 80149ae:	ab03      	add	r3, sp, #12
 80149b0:	4805      	ldr	r0, [pc, #20]	@ (80149c8 <fiprintf+0x20>)
 80149b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149b6:	6800      	ldr	r0, [r0, #0]
 80149b8:	9301      	str	r3, [sp, #4]
 80149ba:	f7ff fca3 	bl	8014304 <_vfiprintf_r>
 80149be:	b002      	add	sp, #8
 80149c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149c4:	b003      	add	sp, #12
 80149c6:	4770      	bx	lr
 80149c8:	20000024 	.word	0x20000024

080149cc <__swbuf_r>:
 80149cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ce:	460e      	mov	r6, r1
 80149d0:	4614      	mov	r4, r2
 80149d2:	4605      	mov	r5, r0
 80149d4:	b118      	cbz	r0, 80149de <__swbuf_r+0x12>
 80149d6:	6a03      	ldr	r3, [r0, #32]
 80149d8:	b90b      	cbnz	r3, 80149de <__swbuf_r+0x12>
 80149da:	f7ff fa2b 	bl	8013e34 <__sinit>
 80149de:	69a3      	ldr	r3, [r4, #24]
 80149e0:	60a3      	str	r3, [r4, #8]
 80149e2:	89a3      	ldrh	r3, [r4, #12]
 80149e4:	071a      	lsls	r2, r3, #28
 80149e6:	d501      	bpl.n	80149ec <__swbuf_r+0x20>
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	b943      	cbnz	r3, 80149fe <__swbuf_r+0x32>
 80149ec:	4621      	mov	r1, r4
 80149ee:	4628      	mov	r0, r5
 80149f0:	f000 f82a 	bl	8014a48 <__swsetup_r>
 80149f4:	b118      	cbz	r0, 80149fe <__swbuf_r+0x32>
 80149f6:	f04f 37ff 	mov.w	r7, #4294967295
 80149fa:	4638      	mov	r0, r7
 80149fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	6922      	ldr	r2, [r4, #16]
 8014a02:	1a98      	subs	r0, r3, r2
 8014a04:	6963      	ldr	r3, [r4, #20]
 8014a06:	b2f6      	uxtb	r6, r6
 8014a08:	4283      	cmp	r3, r0
 8014a0a:	4637      	mov	r7, r6
 8014a0c:	dc05      	bgt.n	8014a1a <__swbuf_r+0x4e>
 8014a0e:	4621      	mov	r1, r4
 8014a10:	4628      	mov	r0, r5
 8014a12:	f7ff ffa1 	bl	8014958 <_fflush_r>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	d1ed      	bne.n	80149f6 <__swbuf_r+0x2a>
 8014a1a:	68a3      	ldr	r3, [r4, #8]
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	60a3      	str	r3, [r4, #8]
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	6022      	str	r2, [r4, #0]
 8014a26:	701e      	strb	r6, [r3, #0]
 8014a28:	6962      	ldr	r2, [r4, #20]
 8014a2a:	1c43      	adds	r3, r0, #1
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d004      	beq.n	8014a3a <__swbuf_r+0x6e>
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	07db      	lsls	r3, r3, #31
 8014a34:	d5e1      	bpl.n	80149fa <__swbuf_r+0x2e>
 8014a36:	2e0a      	cmp	r6, #10
 8014a38:	d1df      	bne.n	80149fa <__swbuf_r+0x2e>
 8014a3a:	4621      	mov	r1, r4
 8014a3c:	4628      	mov	r0, r5
 8014a3e:	f7ff ff8b 	bl	8014958 <_fflush_r>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	d0d9      	beq.n	80149fa <__swbuf_r+0x2e>
 8014a46:	e7d6      	b.n	80149f6 <__swbuf_r+0x2a>

08014a48 <__swsetup_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4b29      	ldr	r3, [pc, #164]	@ (8014af0 <__swsetup_r+0xa8>)
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	6818      	ldr	r0, [r3, #0]
 8014a50:	460c      	mov	r4, r1
 8014a52:	b118      	cbz	r0, 8014a5c <__swsetup_r+0x14>
 8014a54:	6a03      	ldr	r3, [r0, #32]
 8014a56:	b90b      	cbnz	r3, 8014a5c <__swsetup_r+0x14>
 8014a58:	f7ff f9ec 	bl	8013e34 <__sinit>
 8014a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a60:	0719      	lsls	r1, r3, #28
 8014a62:	d422      	bmi.n	8014aaa <__swsetup_r+0x62>
 8014a64:	06da      	lsls	r2, r3, #27
 8014a66:	d407      	bmi.n	8014a78 <__swsetup_r+0x30>
 8014a68:	2209      	movs	r2, #9
 8014a6a:	602a      	str	r2, [r5, #0]
 8014a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a70:	81a3      	strh	r3, [r4, #12]
 8014a72:	f04f 30ff 	mov.w	r0, #4294967295
 8014a76:	e033      	b.n	8014ae0 <__swsetup_r+0x98>
 8014a78:	0758      	lsls	r0, r3, #29
 8014a7a:	d512      	bpl.n	8014aa2 <__swsetup_r+0x5a>
 8014a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a7e:	b141      	cbz	r1, 8014a92 <__swsetup_r+0x4a>
 8014a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a84:	4299      	cmp	r1, r3
 8014a86:	d002      	beq.n	8014a8e <__swsetup_r+0x46>
 8014a88:	4628      	mov	r0, r5
 8014a8a:	f7ff fb11 	bl	80140b0 <_free_r>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a92:	89a3      	ldrh	r3, [r4, #12]
 8014a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014a98:	81a3      	strh	r3, [r4, #12]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	6063      	str	r3, [r4, #4]
 8014a9e:	6923      	ldr	r3, [r4, #16]
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	f043 0308 	orr.w	r3, r3, #8
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	6923      	ldr	r3, [r4, #16]
 8014aac:	b94b      	cbnz	r3, 8014ac2 <__swsetup_r+0x7a>
 8014aae:	89a3      	ldrh	r3, [r4, #12]
 8014ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ab8:	d003      	beq.n	8014ac2 <__swsetup_r+0x7a>
 8014aba:	4621      	mov	r1, r4
 8014abc:	4628      	mov	r0, r5
 8014abe:	f000 f856 	bl	8014b6e <__smakebuf_r>
 8014ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ac6:	f013 0201 	ands.w	r2, r3, #1
 8014aca:	d00a      	beq.n	8014ae2 <__swsetup_r+0x9a>
 8014acc:	2200      	movs	r2, #0
 8014ace:	60a2      	str	r2, [r4, #8]
 8014ad0:	6962      	ldr	r2, [r4, #20]
 8014ad2:	4252      	negs	r2, r2
 8014ad4:	61a2      	str	r2, [r4, #24]
 8014ad6:	6922      	ldr	r2, [r4, #16]
 8014ad8:	b942      	cbnz	r2, 8014aec <__swsetup_r+0xa4>
 8014ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014ade:	d1c5      	bne.n	8014a6c <__swsetup_r+0x24>
 8014ae0:	bd38      	pop	{r3, r4, r5, pc}
 8014ae2:	0799      	lsls	r1, r3, #30
 8014ae4:	bf58      	it	pl
 8014ae6:	6962      	ldrpl	r2, [r4, #20]
 8014ae8:	60a2      	str	r2, [r4, #8]
 8014aea:	e7f4      	b.n	8014ad6 <__swsetup_r+0x8e>
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7f7      	b.n	8014ae0 <__swsetup_r+0x98>
 8014af0:	20000024 	.word	0x20000024

08014af4 <_sbrk_r>:
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	4d06      	ldr	r5, [pc, #24]	@ (8014b10 <_sbrk_r+0x1c>)
 8014af8:	2300      	movs	r3, #0
 8014afa:	4604      	mov	r4, r0
 8014afc:	4608      	mov	r0, r1
 8014afe:	602b      	str	r3, [r5, #0]
 8014b00:	f7ec fe00 	bl	8001704 <_sbrk>
 8014b04:	1c43      	adds	r3, r0, #1
 8014b06:	d102      	bne.n	8014b0e <_sbrk_r+0x1a>
 8014b08:	682b      	ldr	r3, [r5, #0]
 8014b0a:	b103      	cbz	r3, 8014b0e <_sbrk_r+0x1a>
 8014b0c:	6023      	str	r3, [r4, #0]
 8014b0e:	bd38      	pop	{r3, r4, r5, pc}
 8014b10:	20004608 	.word	0x20004608

08014b14 <abort>:
 8014b14:	b508      	push	{r3, lr}
 8014b16:	2006      	movs	r0, #6
 8014b18:	f000 f88e 	bl	8014c38 <raise>
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	f7ec fd79 	bl	8001614 <_exit>

08014b22 <__swhatbuf_r>:
 8014b22:	b570      	push	{r4, r5, r6, lr}
 8014b24:	460c      	mov	r4, r1
 8014b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b2a:	2900      	cmp	r1, #0
 8014b2c:	b096      	sub	sp, #88	@ 0x58
 8014b2e:	4615      	mov	r5, r2
 8014b30:	461e      	mov	r6, r3
 8014b32:	da0d      	bge.n	8014b50 <__swhatbuf_r+0x2e>
 8014b34:	89a3      	ldrh	r3, [r4, #12]
 8014b36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014b3a:	f04f 0100 	mov.w	r1, #0
 8014b3e:	bf14      	ite	ne
 8014b40:	2340      	movne	r3, #64	@ 0x40
 8014b42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014b46:	2000      	movs	r0, #0
 8014b48:	6031      	str	r1, [r6, #0]
 8014b4a:	602b      	str	r3, [r5, #0]
 8014b4c:	b016      	add	sp, #88	@ 0x58
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	466a      	mov	r2, sp
 8014b52:	f000 f879 	bl	8014c48 <_fstat_r>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	dbec      	blt.n	8014b34 <__swhatbuf_r+0x12>
 8014b5a:	9901      	ldr	r1, [sp, #4]
 8014b5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014b60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014b64:	4259      	negs	r1, r3
 8014b66:	4159      	adcs	r1, r3
 8014b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014b6c:	e7eb      	b.n	8014b46 <__swhatbuf_r+0x24>

08014b6e <__smakebuf_r>:
 8014b6e:	898b      	ldrh	r3, [r1, #12]
 8014b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b72:	079d      	lsls	r5, r3, #30
 8014b74:	4606      	mov	r6, r0
 8014b76:	460c      	mov	r4, r1
 8014b78:	d507      	bpl.n	8014b8a <__smakebuf_r+0x1c>
 8014b7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014b7e:	6023      	str	r3, [r4, #0]
 8014b80:	6123      	str	r3, [r4, #16]
 8014b82:	2301      	movs	r3, #1
 8014b84:	6163      	str	r3, [r4, #20]
 8014b86:	b003      	add	sp, #12
 8014b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b8a:	ab01      	add	r3, sp, #4
 8014b8c:	466a      	mov	r2, sp
 8014b8e:	f7ff ffc8 	bl	8014b22 <__swhatbuf_r>
 8014b92:	9f00      	ldr	r7, [sp, #0]
 8014b94:	4605      	mov	r5, r0
 8014b96:	4639      	mov	r1, r7
 8014b98:	4630      	mov	r0, r6
 8014b9a:	f7ff fafd 	bl	8014198 <_malloc_r>
 8014b9e:	b948      	cbnz	r0, 8014bb4 <__smakebuf_r+0x46>
 8014ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ba4:	059a      	lsls	r2, r3, #22
 8014ba6:	d4ee      	bmi.n	8014b86 <__smakebuf_r+0x18>
 8014ba8:	f023 0303 	bic.w	r3, r3, #3
 8014bac:	f043 0302 	orr.w	r3, r3, #2
 8014bb0:	81a3      	strh	r3, [r4, #12]
 8014bb2:	e7e2      	b.n	8014b7a <__smakebuf_r+0xc>
 8014bb4:	89a3      	ldrh	r3, [r4, #12]
 8014bb6:	6020      	str	r0, [r4, #0]
 8014bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014bbc:	81a3      	strh	r3, [r4, #12]
 8014bbe:	9b01      	ldr	r3, [sp, #4]
 8014bc0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014bc4:	b15b      	cbz	r3, 8014bde <__smakebuf_r+0x70>
 8014bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f000 f84e 	bl	8014c6c <_isatty_r>
 8014bd0:	b128      	cbz	r0, 8014bde <__smakebuf_r+0x70>
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	f023 0303 	bic.w	r3, r3, #3
 8014bd8:	f043 0301 	orr.w	r3, r3, #1
 8014bdc:	81a3      	strh	r3, [r4, #12]
 8014bde:	89a3      	ldrh	r3, [r4, #12]
 8014be0:	431d      	orrs	r5, r3
 8014be2:	81a5      	strh	r5, [r4, #12]
 8014be4:	e7cf      	b.n	8014b86 <__smakebuf_r+0x18>

08014be6 <_raise_r>:
 8014be6:	291f      	cmp	r1, #31
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4605      	mov	r5, r0
 8014bec:	460c      	mov	r4, r1
 8014bee:	d904      	bls.n	8014bfa <_raise_r+0x14>
 8014bf0:	2316      	movs	r3, #22
 8014bf2:	6003      	str	r3, [r0, #0]
 8014bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf8:	bd38      	pop	{r3, r4, r5, pc}
 8014bfa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014bfc:	b112      	cbz	r2, 8014c04 <_raise_r+0x1e>
 8014bfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c02:	b94b      	cbnz	r3, 8014c18 <_raise_r+0x32>
 8014c04:	4628      	mov	r0, r5
 8014c06:	f000 f853 	bl	8014cb0 <_getpid_r>
 8014c0a:	4622      	mov	r2, r4
 8014c0c:	4601      	mov	r1, r0
 8014c0e:	4628      	mov	r0, r5
 8014c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c14:	f000 b83a 	b.w	8014c8c <_kill_r>
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d00a      	beq.n	8014c32 <_raise_r+0x4c>
 8014c1c:	1c59      	adds	r1, r3, #1
 8014c1e:	d103      	bne.n	8014c28 <_raise_r+0x42>
 8014c20:	2316      	movs	r3, #22
 8014c22:	6003      	str	r3, [r0, #0]
 8014c24:	2001      	movs	r0, #1
 8014c26:	e7e7      	b.n	8014bf8 <_raise_r+0x12>
 8014c28:	2100      	movs	r1, #0
 8014c2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014c2e:	4620      	mov	r0, r4
 8014c30:	4798      	blx	r3
 8014c32:	2000      	movs	r0, #0
 8014c34:	e7e0      	b.n	8014bf8 <_raise_r+0x12>
	...

08014c38 <raise>:
 8014c38:	4b02      	ldr	r3, [pc, #8]	@ (8014c44 <raise+0xc>)
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	6818      	ldr	r0, [r3, #0]
 8014c3e:	f7ff bfd2 	b.w	8014be6 <_raise_r>
 8014c42:	bf00      	nop
 8014c44:	20000024 	.word	0x20000024

08014c48 <_fstat_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d07      	ldr	r5, [pc, #28]	@ (8014c68 <_fstat_r+0x20>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7ec fd2d 	bl	80016b4 <_fstat>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_fstat_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_fstat_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	20004608 	.word	0x20004608

08014c6c <_isatty_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	4d06      	ldr	r5, [pc, #24]	@ (8014c88 <_isatty_r+0x1c>)
 8014c70:	2300      	movs	r3, #0
 8014c72:	4604      	mov	r4, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	602b      	str	r3, [r5, #0]
 8014c78:	f7ec fd2c 	bl	80016d4 <_isatty>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_isatty_r+0x1a>
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_isatty_r+0x1a>
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	20004608 	.word	0x20004608

08014c8c <_kill_r>:
 8014c8c:	b538      	push	{r3, r4, r5, lr}
 8014c8e:	4d07      	ldr	r5, [pc, #28]	@ (8014cac <_kill_r+0x20>)
 8014c90:	2300      	movs	r3, #0
 8014c92:	4604      	mov	r4, r0
 8014c94:	4608      	mov	r0, r1
 8014c96:	4611      	mov	r1, r2
 8014c98:	602b      	str	r3, [r5, #0]
 8014c9a:	f7ec fca9 	bl	80015f0 <_kill>
 8014c9e:	1c43      	adds	r3, r0, #1
 8014ca0:	d102      	bne.n	8014ca8 <_kill_r+0x1c>
 8014ca2:	682b      	ldr	r3, [r5, #0]
 8014ca4:	b103      	cbz	r3, 8014ca8 <_kill_r+0x1c>
 8014ca6:	6023      	str	r3, [r4, #0]
 8014ca8:	bd38      	pop	{r3, r4, r5, pc}
 8014caa:	bf00      	nop
 8014cac:	20004608 	.word	0x20004608

08014cb0 <_getpid_r>:
 8014cb0:	f7ec bc96 	b.w	80015e0 <_getpid>

08014cb4 <_init>:
 8014cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb6:	bf00      	nop
 8014cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cba:	bc08      	pop	{r3}
 8014cbc:	469e      	mov	lr, r3
 8014cbe:	4770      	bx	lr

08014cc0 <_fini>:
 8014cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cc2:	bf00      	nop
 8014cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cc6:	bc08      	pop	{r3}
 8014cc8:	469e      	mov	lr, r3
 8014cca:	4770      	bx	lr
